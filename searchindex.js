Search.setIndex({"docnames": ["about", "bugs", "c-api/abstract", "c-api/allocation", "c-api/apiabiversion", "c-api/arg", "c-api/bool", "c-api/buffer", "c-api/bytearray", "c-api/bytes", "c-api/call", "c-api/capsule", "c-api/cell", "c-api/code", "c-api/codec", "c-api/complex", "c-api/concrete", "c-api/contextvars", "c-api/conversion", "c-api/coro", "c-api/datetime", "c-api/descriptor", "c-api/dict", "c-api/exceptions", "c-api/file", "c-api/float", "c-api/frame", "c-api/function", "c-api/gcsupport", "c-api/gen", "c-api/hash", "c-api/import", "c-api/index", "c-api/init", "c-api/init_config", "c-api/intro", "c-api/iter", "c-api/iterator", "c-api/list", "c-api/long", "c-api/mapping", "c-api/marshal", "c-api/memory", "c-api/memoryview", "c-api/method", "c-api/module", "c-api/none", "c-api/number", "c-api/objbuffer", "c-api/object", "c-api/objimpl", "c-api/perfmaps", "c-api/refcounting", "c-api/reflection", "c-api/sequence", "c-api/set", "c-api/slice", "c-api/stable", "c-api/structures", "c-api/sys", "c-api/tuple", "c-api/type", "c-api/typehints", "c-api/typeobj", "c-api/unicode", "c-api/utilities", "c-api/veryhigh", "c-api/weakref", "contents", "copyright", "distributing/index", "extending/building", "extending/embedding", "extending/extending", "extending/index", "extending/newtypes", "extending/newtypes_tutorial", "extending/windows", "faq/design", "faq/extending", "faq/general", "faq/gui", "faq/index", "faq/installed", "faq/library", "faq/programming", "faq/windows", "glossary", "howto/annotations", "howto/argparse", "howto/clinic", "howto/cporting", "howto/curses", "howto/descriptor", "howto/enum", "howto/functional", "howto/index", "howto/instrumentation", "howto/ipaddress", "howto/isolating-extensions", "howto/logging", "howto/logging-cookbook", "howto/perf_profiling", "howto/pyporting", "howto/regex", "howto/sockets", "howto/sorting", "howto/unicode", "howto/urllib2", "installing/index", "library/2to3", "library/__future__", "library/__main__", "library/_thread", "library/abc", "library/aifc", "library/allos", "library/archiving", "library/argparse", "library/array", "library/ast", "library/asyncio", "library/asyncio-api-index", "library/asyncio-dev", "library/asyncio-eventloop", "library/asyncio-exceptions", "library/asyncio-extending", "library/asyncio-future", "library/asyncio-llapi-index", "library/asyncio-platforms", "library/asyncio-policy", "library/asyncio-protocol", "library/asyncio-queue", "library/asyncio-runner", "library/asyncio-stream", "library/asyncio-subprocess", "library/asyncio-sync", "library/asyncio-task", "library/atexit", "library/audioop", "library/audit_events", "library/base64", "library/bdb", "library/binary", "library/binascii", "library/bisect", "library/builtins", "library/bz2", "library/calendar", "library/cgi", "library/cgitb", "library/chunk", "library/cmath", "library/cmd", "library/cmdline", "library/code", "library/codecs", "library/codeop", "library/collections", "library/collections.abc", "library/colorsys", "library/compileall", "library/concurrency", "library/concurrent", "library/concurrent.futures", "library/configparser", "library/constants", "library/contextlib", "library/contextvars", "library/copy", "library/copyreg", "library/crypt", "library/crypto", "library/csv", "library/ctypes", "library/curses", "library/curses.ascii", "library/curses.panel", "library/custominterp", "library/dataclasses", "library/datatypes", "library/datetime", "library/dbm", "library/debug", "library/decimal", "library/development", "library/devmode", "library/dialog", "library/difflib", "library/dis", "library/distribution", "library/doctest", "library/email", "library/email.charset", "library/email.compat32-message", "library/email.contentmanager", "library/email.encoders", "library/email.errors", "library/email.examples", "library/email.generator", "library/email.header", "library/email.headerregistry", "library/email.iterators", "library/email.message", "library/email.mime", "library/email.parser", "library/email.policy", "library/email.utils", "library/ensurepip", "library/enum", "library/errno", "library/exceptions", "library/faulthandler", "library/fcntl", "library/filecmp", "library/fileformats", "library/fileinput", "library/filesys", "library/fnmatch", "library/fractions", "library/frameworks", "library/ftplib", "library/functional", "library/functions", "library/functools", "library/gc", "library/getopt", "library/getpass", "library/gettext", "library/glob", "library/graphlib", "library/grp", "library/gzip", "library/hashlib", "library/heapq", "library/hmac", "library/html", "library/html.entities", "library/html.parser", "library/http", "library/http.client", "library/http.cookiejar", "library/http.cookies", "library/http.server", "library/i18n", "library/idle", "library/imaplib", "library/imghdr", "library/importlib", "library/importlib.metadata", "library/importlib.resources", "library/importlib.resources.abc", "library/index", "library/inspect", "library/internet", "library/intro", "library/io", "library/ipaddress", "library/ipc", "library/itertools", "library/json", "library/keyword", "library/language", "library/linecache", "library/locale", "library/logging", "library/logging.config", "library/logging.handlers", "library/lzma", "library/mailbox", "library/mailcap", "library/markup", "library/marshal", "library/math", "library/mimetypes", "library/mm", "library/mmap", "library/modulefinder", "library/modules", "library/msilib", "library/msvcrt", "library/multiprocessing", "library/multiprocessing.shared_memory", "library/netdata", "library/netrc", "library/nis", "library/nntplib", "library/numbers", "library/numeric", "library/operator", "library/optparse", "library/os", "library/os.path", "library/ossaudiodev", "library/pathlib", "library/pdb", "library/persistence", "library/pickle", "library/pickletools", "library/pipes", "library/pkgutil", "library/platform", "library/plistlib", "library/poplib", "library/posix", "library/pprint", "library/profile", "library/pty", "library/pwd", "library/py_compile", "library/pyclbr", "library/pydoc", "library/pyexpat", "library/python", "library/queue", "library/quopri", "library/random", "library/re", "library/readline", "library/reprlib", "library/resource", "library/rlcompleter", "library/runpy", "library/sched", "library/secrets", "library/security_warnings", "library/select", "library/selectors", "library/shelve", "library/shlex", "library/shutil", "library/signal", "library/site", "library/smtplib", "library/sndhdr", "library/socket", "library/socketserver", "library/spwd", "library/sqlite3", "library/ssl", "library/stat", "library/statistics", "library/stdtypes", "library/string", "library/stringprep", "library/struct", "library/subprocess", "library/sunau", "library/superseded", "library/symtable", "library/sys", "library/sys.monitoring", "library/sys_path_init", "library/sysconfig", "library/syslog", "library/tabnanny", "library/tarfile", "library/telnetlib", "library/tempfile", "library/termios", "library/test", "library/text", "library/textwrap", "library/threading", "library/time", "library/timeit", "library/tk", "library/tkinter", "library/tkinter.colorchooser", "library/tkinter.dnd", "library/tkinter.font", "library/tkinter.messagebox", "library/tkinter.scrolledtext", "library/tkinter.tix", "library/tkinter.ttk", "library/token", "library/tokenize", "library/tomllib", "library/trace", "library/traceback", "library/tracemalloc", "library/tty", "library/turtle", "library/types", "library/typing", "library/unicodedata", "library/unittest", "library/unittest.mock", "library/unittest.mock-examples", "library/unix", "library/urllib", "library/urllib.error", "library/urllib.parse", "library/urllib.request", "library/urllib.robotparser", "library/uu", "library/uuid", "library/venv", "library/warnings", "library/wave", "library/weakref", "library/webbrowser", "library/windows", "library/winreg", "library/winsound", "library/wsgiref", "library/xdrlib", "library/xml", "library/xml.dom", "library/xml.dom.minidom", "library/xml.dom.pulldom", "library/xml.etree.elementtree", "library/xml.sax", "library/xml.sax.handler", "library/xml.sax.reader", "library/xml.sax.utils", "library/xmlrpc", "library/xmlrpc.client", "library/xmlrpc.server", "library/zipapp", "library/zipfile", "library/zipimport", "library/zlib", "library/zoneinfo", "license", "reference/compound_stmts", "reference/datamodel", "reference/executionmodel", "reference/expressions", "reference/grammar", "reference/import", "reference/index", "reference/introduction", "reference/lexical_analysis", "reference/simple_stmts", "reference/toplevel_components", "tutorial/appendix", "tutorial/appetite", "tutorial/classes", "tutorial/controlflow", "tutorial/datastructures", "tutorial/errors", "tutorial/floatingpoint", "tutorial/index", "tutorial/inputoutput", "tutorial/interactive", "tutorial/interpreter", "tutorial/introduction", "tutorial/modules", "tutorial/stdlib", "tutorial/stdlib2", "tutorial/venv", "tutorial/whatnow", "using/cmdline", "using/configure", "using/editors", "using/index", "using/mac", "using/unix", "using/windows", "whatsnew/2.0", "whatsnew/2.1", "whatsnew/2.2", "whatsnew/2.3", "whatsnew/2.4", "whatsnew/2.5", "whatsnew/2.6", "whatsnew/2.7", "whatsnew/3.0", "whatsnew/3.1", "whatsnew/3.10", "whatsnew/3.11", "whatsnew/3.12", "whatsnew/3.2", "whatsnew/3.3", "whatsnew/3.4", "whatsnew/3.5", "whatsnew/3.6", "whatsnew/3.7", "whatsnew/3.8", "whatsnew/3.9", "whatsnew/changelog", "whatsnew/index"], "filenames": ["about.rst", "bugs.rst", "c-api/abstract.rst", "c-api/allocation.rst", "c-api/apiabiversion.rst", "c-api/arg.rst", "c-api/bool.rst", "c-api/buffer.rst", "c-api/bytearray.rst", "c-api/bytes.rst", "c-api/call.rst", "c-api/capsule.rst", "c-api/cell.rst", "c-api/code.rst", "c-api/codec.rst", "c-api/complex.rst", "c-api/concrete.rst", "c-api/contextvars.rst", "c-api/conversion.rst", "c-api/coro.rst", "c-api/datetime.rst", "c-api/descriptor.rst", "c-api/dict.rst", "c-api/exceptions.rst", "c-api/file.rst", "c-api/float.rst", "c-api/frame.rst", "c-api/function.rst", "c-api/gcsupport.rst", "c-api/gen.rst", "c-api/hash.rst", "c-api/import.rst", "c-api/index.rst", "c-api/init.rst", "c-api/init_config.rst", "c-api/intro.rst", "c-api/iter.rst", "c-api/iterator.rst", "c-api/list.rst", "c-api/long.rst", "c-api/mapping.rst", "c-api/marshal.rst", "c-api/memory.rst", "c-api/memoryview.rst", "c-api/method.rst", "c-api/module.rst", "c-api/none.rst", "c-api/number.rst", "c-api/objbuffer.rst", "c-api/object.rst", "c-api/objimpl.rst", "c-api/perfmaps.rst", "c-api/refcounting.rst", "c-api/reflection.rst", "c-api/sequence.rst", "c-api/set.rst", "c-api/slice.rst", "c-api/stable.rst", "c-api/structures.rst", "c-api/sys.rst", "c-api/tuple.rst", "c-api/type.rst", "c-api/typehints.rst", "c-api/typeobj.rst", "c-api/unicode.rst", "c-api/utilities.rst", "c-api/veryhigh.rst", "c-api/weakref.rst", "contents.rst", "copyright.rst", "distributing/index.rst", "extending/building.rst", "extending/embedding.rst", "extending/extending.rst", "extending/index.rst", "extending/newtypes.rst", "extending/newtypes_tutorial.rst", "extending/windows.rst", "faq/design.rst", "faq/extending.rst", "faq/general.rst", "faq/gui.rst", "faq/index.rst", "faq/installed.rst", "faq/library.rst", "faq/programming.rst", "faq/windows.rst", "glossary.rst", "howto/annotations.rst", "howto/argparse.rst", "howto/clinic.rst", "howto/cporting.rst", "howto/curses.rst", "howto/descriptor.rst", "howto/enum.rst", "howto/functional.rst", "howto/index.rst", "howto/instrumentation.rst", "howto/ipaddress.rst", "howto/isolating-extensions.rst", "howto/logging.rst", "howto/logging-cookbook.rst", "howto/perf_profiling.rst", "howto/pyporting.rst", "howto/regex.rst", "howto/sockets.rst", "howto/sorting.rst", "howto/unicode.rst", "howto/urllib2.rst", "installing/index.rst", "library/2to3.rst", "library/__future__.rst", "library/__main__.rst", "library/_thread.rst", "library/abc.rst", "library/aifc.rst", "library/allos.rst", "library/archiving.rst", "library/argparse.rst", "library/array.rst", "library/ast.rst", "library/asyncio.rst", "library/asyncio-api-index.rst", "library/asyncio-dev.rst", "library/asyncio-eventloop.rst", "library/asyncio-exceptions.rst", "library/asyncio-extending.rst", "library/asyncio-future.rst", "library/asyncio-llapi-index.rst", "library/asyncio-platforms.rst", "library/asyncio-policy.rst", "library/asyncio-protocol.rst", "library/asyncio-queue.rst", "library/asyncio-runner.rst", "library/asyncio-stream.rst", "library/asyncio-subprocess.rst", "library/asyncio-sync.rst", "library/asyncio-task.rst", "library/atexit.rst", "library/audioop.rst", "library/audit_events.rst", "library/base64.rst", "library/bdb.rst", "library/binary.rst", "library/binascii.rst", "library/bisect.rst", "library/builtins.rst", "library/bz2.rst", "library/calendar.rst", "library/cgi.rst", "library/cgitb.rst", "library/chunk.rst", "library/cmath.rst", "library/cmd.rst", "library/cmdline.rst", "library/code.rst", "library/codecs.rst", "library/codeop.rst", "library/collections.rst", "library/collections.abc.rst", "library/colorsys.rst", "library/compileall.rst", "library/concurrency.rst", "library/concurrent.rst", "library/concurrent.futures.rst", "library/configparser.rst", "library/constants.rst", "library/contextlib.rst", "library/contextvars.rst", "library/copy.rst", "library/copyreg.rst", "library/crypt.rst", "library/crypto.rst", "library/csv.rst", "library/ctypes.rst", "library/curses.rst", "library/curses.ascii.rst", "library/curses.panel.rst", "library/custominterp.rst", "library/dataclasses.rst", "library/datatypes.rst", "library/datetime.rst", "library/dbm.rst", "library/debug.rst", "library/decimal.rst", "library/development.rst", "library/devmode.rst", "library/dialog.rst", "library/difflib.rst", "library/dis.rst", "library/distribution.rst", "library/doctest.rst", "library/email.rst", "library/email.charset.rst", "library/email.compat32-message.rst", "library/email.contentmanager.rst", "library/email.encoders.rst", "library/email.errors.rst", "library/email.examples.rst", "library/email.generator.rst", "library/email.header.rst", "library/email.headerregistry.rst", "library/email.iterators.rst", "library/email.message.rst", "library/email.mime.rst", "library/email.parser.rst", "library/email.policy.rst", "library/email.utils.rst", "library/ensurepip.rst", "library/enum.rst", "library/errno.rst", "library/exceptions.rst", "library/faulthandler.rst", "library/fcntl.rst", "library/filecmp.rst", "library/fileformats.rst", "library/fileinput.rst", "library/filesys.rst", "library/fnmatch.rst", "library/fractions.rst", "library/frameworks.rst", "library/ftplib.rst", "library/functional.rst", "library/functions.rst", "library/functools.rst", "library/gc.rst", "library/getopt.rst", "library/getpass.rst", "library/gettext.rst", "library/glob.rst", "library/graphlib.rst", "library/grp.rst", "library/gzip.rst", "library/hashlib.rst", "library/heapq.rst", "library/hmac.rst", "library/html.rst", "library/html.entities.rst", "library/html.parser.rst", "library/http.rst", "library/http.client.rst", "library/http.cookiejar.rst", "library/http.cookies.rst", "library/http.server.rst", "library/i18n.rst", "library/idle.rst", "library/imaplib.rst", "library/imghdr.rst", "library/importlib.rst", "library/importlib.metadata.rst", "library/importlib.resources.rst", "library/importlib.resources.abc.rst", "library/index.rst", "library/inspect.rst", "library/internet.rst", "library/intro.rst", "library/io.rst", "library/ipaddress.rst", "library/ipc.rst", "library/itertools.rst", "library/json.rst", "library/keyword.rst", "library/language.rst", "library/linecache.rst", "library/locale.rst", "library/logging.rst", "library/logging.config.rst", "library/logging.handlers.rst", "library/lzma.rst", "library/mailbox.rst", "library/mailcap.rst", "library/markup.rst", "library/marshal.rst", "library/math.rst", "library/mimetypes.rst", "library/mm.rst", "library/mmap.rst", "library/modulefinder.rst", "library/modules.rst", "library/msilib.rst", "library/msvcrt.rst", "library/multiprocessing.rst", "library/multiprocessing.shared_memory.rst", "library/netdata.rst", "library/netrc.rst", "library/nis.rst", "library/nntplib.rst", "library/numbers.rst", "library/numeric.rst", "library/operator.rst", "library/optparse.rst", "library/os.rst", "library/os.path.rst", "library/ossaudiodev.rst", "library/pathlib.rst", "library/pdb.rst", "library/persistence.rst", "library/pickle.rst", "library/pickletools.rst", "library/pipes.rst", "library/pkgutil.rst", "library/platform.rst", "library/plistlib.rst", "library/poplib.rst", "library/posix.rst", "library/pprint.rst", "library/profile.rst", "library/pty.rst", "library/pwd.rst", "library/py_compile.rst", "library/pyclbr.rst", "library/pydoc.rst", "library/pyexpat.rst", "library/python.rst", "library/queue.rst", "library/quopri.rst", "library/random.rst", "library/re.rst", "library/readline.rst", "library/reprlib.rst", "library/resource.rst", "library/rlcompleter.rst", "library/runpy.rst", "library/sched.rst", "library/secrets.rst", "library/security_warnings.rst", "library/select.rst", "library/selectors.rst", "library/shelve.rst", "library/shlex.rst", "library/shutil.rst", "library/signal.rst", "library/site.rst", "library/smtplib.rst", "library/sndhdr.rst", "library/socket.rst", "library/socketserver.rst", "library/spwd.rst", "library/sqlite3.rst", "library/ssl.rst", "library/stat.rst", "library/statistics.rst", "library/stdtypes.rst", "library/string.rst", "library/stringprep.rst", "library/struct.rst", "library/subprocess.rst", "library/sunau.rst", "library/superseded.rst", "library/symtable.rst", "library/sys.rst", "library/sys.monitoring.rst", "library/sys_path_init.rst", "library/sysconfig.rst", "library/syslog.rst", "library/tabnanny.rst", "library/tarfile.rst", "library/telnetlib.rst", "library/tempfile.rst", "library/termios.rst", "library/test.rst", "library/text.rst", "library/textwrap.rst", "library/threading.rst", "library/time.rst", "library/timeit.rst", "library/tk.rst", "library/tkinter.rst", "library/tkinter.colorchooser.rst", "library/tkinter.dnd.rst", "library/tkinter.font.rst", "library/tkinter.messagebox.rst", "library/tkinter.scrolledtext.rst", "library/tkinter.tix.rst", "library/tkinter.ttk.rst", "library/token.rst", "library/tokenize.rst", "library/tomllib.rst", "library/trace.rst", "library/traceback.rst", "library/tracemalloc.rst", "library/tty.rst", "library/turtle.rst", "library/types.rst", "library/typing.rst", "library/unicodedata.rst", "library/unittest.rst", "library/unittest.mock.rst", "library/unittest.mock-examples.rst", "library/unix.rst", "library/urllib.rst", "library/urllib.error.rst", "library/urllib.parse.rst", "library/urllib.request.rst", "library/urllib.robotparser.rst", "library/uu.rst", "library/uuid.rst", "library/venv.rst", "library/warnings.rst", "library/wave.rst", "library/weakref.rst", "library/webbrowser.rst", "library/windows.rst", "library/winreg.rst", "library/winsound.rst", "library/wsgiref.rst", "library/xdrlib.rst", "library/xml.rst", "library/xml.dom.rst", "library/xml.dom.minidom.rst", "library/xml.dom.pulldom.rst", "library/xml.etree.elementtree.rst", "library/xml.sax.rst", "library/xml.sax.handler.rst", "library/xml.sax.reader.rst", "library/xml.sax.utils.rst", "library/xmlrpc.rst", "library/xmlrpc.client.rst", "library/xmlrpc.server.rst", "library/zipapp.rst", "library/zipfile.rst", "library/zipimport.rst", "library/zlib.rst", "library/zoneinfo.rst", "license.rst", "reference/compound_stmts.rst", "reference/datamodel.rst", "reference/executionmodel.rst", "reference/expressions.rst", "reference/grammar.rst", "reference/import.rst", "reference/index.rst", "reference/introduction.rst", "reference/lexical_analysis.rst", "reference/simple_stmts.rst", "reference/toplevel_components.rst", "tutorial/appendix.rst", "tutorial/appetite.rst", "tutorial/classes.rst", "tutorial/controlflow.rst", "tutorial/datastructures.rst", "tutorial/errors.rst", "tutorial/floatingpoint.rst", "tutorial/index.rst", "tutorial/inputoutput.rst", "tutorial/interactive.rst", "tutorial/interpreter.rst", "tutorial/introduction.rst", "tutorial/modules.rst", "tutorial/stdlib.rst", "tutorial/stdlib2.rst", "tutorial/venv.rst", "tutorial/whatnow.rst", "using/cmdline.rst", "using/configure.rst", "using/editors.rst", "using/index.rst", "using/mac.rst", "using/unix.rst", "using/windows.rst", "whatsnew/2.0.rst", "whatsnew/2.1.rst", "whatsnew/2.2.rst", "whatsnew/2.3.rst", "whatsnew/2.4.rst", "whatsnew/2.5.rst", "whatsnew/2.6.rst", "whatsnew/2.7.rst", "whatsnew/3.0.rst", "whatsnew/3.1.rst", "whatsnew/3.10.rst", "whatsnew/3.11.rst", "whatsnew/3.12.rst", "whatsnew/3.2.rst", "whatsnew/3.3.rst", "whatsnew/3.4.rst", "whatsnew/3.5.rst", "whatsnew/3.6.rst", "whatsnew/3.7.rst", "whatsnew/3.8.rst", "whatsnew/3.9.rst", "whatsnew/changelog.rst", "whatsnew/index.rst"], "titles": ["\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6", "\u8655\u7406\u932f\u8aa4 (Bug)", "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)", "\u5728 heap \u4e0a\u5206\u914d\u7269\u4ef6", "API \u548c ABI \u7248\u672c\u7ba1\u7406", "\u5256\u6790\u5f15\u6578\u8207\u5efa\u7f6e\u6578\u503c", "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6", "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "\u4f4d\u5143\u7d44\u9663\u5217\u7269\u4ef6 (Byte Array Objects)", "\u4f4d\u5143\u7d44\u7269\u4ef6 (Bytes Objects)", "\u547c\u53eb\u5354\u5b9a (Call Protocol)", "Capsules", "Cell \u7269\u4ef6", "\u7a0b\u5f0f\u78bc\u7269\u4ef6", "\u7de8\u89e3\u78bc\u5668\u8a3b\u518a\u8868\u548c\u652f\u63f4\u51fd\u5f0f", "\u8907\u6578\u7269\u4ef6", "\u5177\u9ad4\u7269\u4ef6\u5c64", "Context Variables Objects", "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316", "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6", "DateTime \u7269\u4ef6", "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6", "\u5b57\u5178\u7269\u4ef6", "\u4f8b\u5916\u8655\u7406", "\u6a94\u6848\u7269\u4ef6 (File Objects)", "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6", "Frame \u7269\u4ef6", "\u51fd\u5f0f\u7269\u4ef6 (Function Objects)", "Supporting Cyclic Garbage Collection", "\u7522\u751f\u5668 (Generator) \u7269\u4ef6", "PyHash API", "\u5f15\u5165\u6a21\u7d44", "Python/C API \u53c3\u8003\u624b\u518a", "Initialization, Finalization, and Threads", "Python Initialization Configuration", "\u7c21\u4ecb", "\u758a\u4ee3\u5668\u5354\u8b70", "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6", "List\uff08\u4e32\u5217\uff09\u7269\u4ef6", "\u6574\u6578\u7269\u4ef6", "Mapping Protocol", "Data marshalling support", "\u8a18\u61b6\u9ad4\u7ba1\u7406", "MemoryView \u7269\u4ef6", "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)", "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44", "<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> \u7269\u4ef6", "Number Protocol", "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "Object Protocol", "Object Implementation Support", "Support for Perf Maps", "\u53c3\u7167\u8a08\u6578", "Reflection", "Sequence Protocol", "\u96c6\u5408\u7269\u4ef6", "\u5207\u7247\u7269\u4ef6", "C API \u7a69\u5b9a\u6027", "\u901a\u7528\u7269\u4ef6\u7d50\u69cb", "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177", "Tuple\uff08\u5143\u7d44\uff09\u7269\u4ef6", "Type Objects", "\u578b\u5225\u63d0\u793a\u7269\u4ef6", "\u578b\u5225\u7269\u4ef6", "Unicode \u7269\u4ef6\u8207\u7de8\u89e3\u78bc\u5668", "\u5de5\u5177", "The Very High Level Layer", "\u5f31\u53c3\u7167\u7269\u4ef6", "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9", "\u7248\u6b0a\u5ba3\u544a", "\u767c\u5e03 Python \u6a21\u7d44", "<span class=\"section-number\">4. </span>\u5efa\u7acb C \u8207 C++ \u64f4\u5145\u5957\u4ef6", "<span class=\"section-number\">1. </span>\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python", "<span class=\"section-number\">1. </span>\u4ee5 C \u6216 C++ \u64f4\u5145 Python", "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>Defining Extension Types: Assorted Topics", "<span class=\"section-number\">2. </span>Defining Extension Types: Tutorial", "<span class=\"section-number\">5. </span>Building C and C++ Extensions on Windows", "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6", "\u64f4\u5145/\u5d4c\u5165\u5e38\u898b\u554f\u984c\u96c6", "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6", "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6", "Python \u5e38\u898b\u554f\u984c", "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6", "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c", "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6", "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6", "\u8853\u8a9e\u8868", "\u8a3b\u91cb (annotation) \u6700\u4f73\u5be6\u8e10", "Argparse \u6559\u5b78", "Argument Clinic \u6307\u5357", "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3", "Curses Programming with Python", "\u63cf\u8ff0\u5668 HowTo \u6307\u5357", "Enum HOWTO", "\u51fd\u5f0f\u7de8\u7a0b HOWTO", "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9", "\u4f7f\u7528 DTrace \u548c SystemTap \u6aa2\u6e2c CPython", "ipaddress \u6a21\u7d44\u4ecb\u7d39", "Isolating Extension Modules", "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44", "Logging Cookbook", "Python \u5c0d Linux <code class=\"docutils literal notranslate\"><span class=\"pre\">perf</span></code> \u5206\u6790\u5668\u7684\u652f\u63f4", "\u5982\u4f55\u5c07 Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230 Python 3", "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f", "Socket \u7a0b\u5f0f\u8a2d\u8a08\u6307\u5357", "\u5982\u4f55\u6392\u5e8f", "Unicode HOWTO", "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90", "\u5b89\u88dd Python \u6a21\u7d44", "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__future__</span></code> --- Future \u9673\u8ff0\u5f0f\u5b9a\u7fa9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__main__</span></code> --- \u9802\u5c64\u7a0b\u5f0f\u78bc\u74b0\u5883", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">_thread</span></code> --- Low-level threading API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">abc</span></code> --- \u62bd\u8c61\u57fa\u5e95\u985e\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aifc</span></code> --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848", "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9", "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code> --- Parser for command-line options, arguments and sub-commands", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">array</span></code> --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ast</span></code> --- \u62bd\u8c61\u8a9e\u6cd5\u6a39 (Abstract Syntax Trees)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">asyncio</span></code> --- \u975e\u540c\u6b65 I/O", "\u9ad8\u968e API \u7d22\u5f15", "\u4f7f\u7528 asyncio \u958b\u767c", "Event Loop", "\u4f8b\u5916", "Extending", "Futures", "\u4f4e\u968e API \u7d22\u5f15", "\u5e73\u81fa\u652f\u63f4", "Policies", "Transports and Protocols", "\u4f47\u5217 (Queues)", "Runners (\u57f7\u884c\u5668)", "\u4e32\u6d41", "\u5b50\u884c\u7a0b", "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)", "Coroutines and Tasks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">atexit</span></code> --- Exit handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">audioop</span></code> --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848", "\u7a3d\u6838\u4e8b\u4ef6\u8868", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">base64</span></code> \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bdb</span></code> --- \u5075\u932f\u5668\u6846\u67b6", "\u4e8c\u9032\u4f4d\u8cc7\u6599\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">binascii</span></code> --- Convert between binary and ASCII", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bisect</span></code> --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">builtins</span></code> --- \u5167\u5efa\u7269\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bz2</span></code> --- Support for <strong class=\"program\">bzip2</strong> compression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">calendar</span></code> --- \u65e5\u66c6\u76f8\u95dc\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgi</span></code> --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgitb</span></code> --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">chunk</span></code> --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmath</span></code> --- Mathematical functions for complex numbers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmd</span></code> --- Support for line-oriented command interpreters", "\u6a21\u7d44\u547d\u4ee4\u5217\u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">code</span></code> --- Interpreter base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codecs</span></code> --- Codec registry and base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codeop</span></code> --- Compile Python code", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections</span></code> --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections.abc</span></code> --- Abstract Base Classes for Containers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">colorsys</span></code> --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">compileall</span></code> --- Byte-compile Python libraries", "\u4e26\u884c\u57f7\u884c (Concurrent Execution)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent</span></code> \u5957\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent.futures</span></code> -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">configparser</span></code> --- \u8a2d\u5b9a\u6a94\u5256\u6790\u5668", "\u5167\u5efa\u5e38\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextlib</span></code> --- Utilities for <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">with</span></code>-statement contexts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextvars</span></code> --- Context Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copy</span></code> --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copyreg</span></code> --- \u8a3b\u518a <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> \u652f\u63f4\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">crypt</span></code> --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f", "\u52a0\u5bc6\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">csv</span></code> --- CSV \u6a94\u6848\u8b80\u53d6\u53ca\u5beb\u5165", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ctypes</span></code> --- A foreign function library for Python", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses</span></code> --- Terminal handling for character-cell displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.ascii</span></code> --- ASCII \u5b57\u5143\u7684\u5de5\u5177\u7a0b\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.panel</span></code> --- A panel stack extension for curses", "Custom Python Interpreters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dataclasses</span></code> --- Data Classes", "\u8cc7\u6599\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">datetime</span></code> --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dbm</span></code> --- Unix &quot;databases&quot; \u7684\u4ecb\u9762", "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">decimal</span></code> --- Decimal fixed point and floating point arithmetic", "\u958b\u767c\u5de5\u5177", "Python Development Mode", "Tkinter Dialogs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">difflib</span></code> --- Helpers for computing deltas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dis</span></code> --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668", "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">doctest</span></code> --- Test interactive Python examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code> --- An email and MIME handling package", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.charset</span></code>: \u8868\u793a\u5b57\u5143\u96c6\u5408", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message.Message</span></code>: Representing an email message using the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">compat32</span></code> API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.contentmanager</span></code>: Managing MIME Content", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.encoders</span></code>: Encoders", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.errors</span></code>: Exception and Defect classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code>: Examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.generator</span></code>: Generating MIME documents", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.header</span></code>: Internationalized headers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.headerregistry</span></code>: Custom Header Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.iterators</span></code>: Iterators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message</span></code>: Representing an email message", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.mime</span></code>: Creating email and MIME objects from scratch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.parser</span></code>: Parsing email messages", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.policy</span></code>: Policy Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.utils</span></code>: Miscellaneous utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ensurepip</span></code> --- <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code> \u5b89\u88dd\u5668\u7684\u521d\u59cb\u5efa\u7f6e (bootstrapping)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">enum</span></code> --- \u5c0d\u5217\u8209\u7684\u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">errno</span></code> --- Standard errno system symbols", "\u5167\u5efa\u7684\u4f8b\u5916", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">faulthandler</span></code> --- Dump the Python traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> --- The <code class=\"docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ioctl</span></code> system calls", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">filecmp</span></code> --- File and Directory Comparisons", "\u6a94\u6848\u683c\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fileinput</span></code> --- Iterate over lines from multiple input streams", "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fnmatch</span></code> --- Unix filename pattern matching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fractions</span></code> --- Rational numbers", "\u7a0b\u5f0f\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ftplib</span></code> --- FTP \u5354\u5b9a\u7528\u6236\u7aef", "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44", "\u5167\u5efa\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">functools</span></code> --- Higher-order functions and operations on callable objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gc</span></code> --- \u5783\u573e\u56de\u6536\u5668\u4ecb\u9762 (Garbage Collector interface)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getopt</span></code> --- C-style parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getpass</span></code> --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gettext</span></code> --- Multilingual internationalization services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">glob</span></code> --- Unix \u98a8\u683c\u7684\u8def\u5f91\u540d\u7a31\u6a21\u5f0f\u64f4\u5c55", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">graphlib</span></code> \u2014-- \u4f7f\u7528\u985e\u5716 (graph-like) \u7d50\u69cb\u9032\u884c\u64cd\u4f5c\u7684\u529f\u80fd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">grp</span></code> --- The group database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gzip</span></code> --- <strong class=\"program\">gzip</strong> \u6a94\u6848\u7684\u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hashlib</span></code> --- Secure hashes and message digests", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">heapq</span></code> --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hmac</span></code> --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html</span></code> --- \u8d85\u9023\u7d50\u6a19\u8a18\u8a9e\u8a00 (HTML) \u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.entities</span></code> --- HTML \u4e00\u822c\u5be6\u9ad4\u7684\u5b9a\u7fa9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.parser</span></code> --- \u7c21\u55ae\u7684 HTML \u548c XHTML \u5256\u6790\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http</span></code> --- HTTP \u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.client</span></code> --- HTTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookiejar</span></code> --- Cookie handling for HTTP clients", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookies</span></code> --- HTTP state management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.server</span></code> \u2014 HTTP \u4f3a\u670d\u5668", "\u570b\u969b\u5316", "IDLE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imaplib</span></code> --- IMAP4 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imghdr</span></code> --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib</span></code> --- <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">import</span></code> \u7684\u5be6\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.metadata</span></code> -- Accessing package metadata", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources</span></code> -- Package resource reading, opening and access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources.abc</span></code> -- Abstract base classes for resources", "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">inspect</span></code> --- \u6aa2\u8996\u6d3b\u52d5\u7269\u4ef6", "\u7db2\u8def\u5354\u5b9a (Internet protocols) \u53ca\u652f\u63f4", "\u7c21\u4ecb", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code> \u2014 \u8655\u7406\u8cc7\u6599\u4e32\u6d41\u7684\u6838\u5fc3\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ipaddress</span></code> --- IPv4/IPv6 manipulation library", "Networking and Interprocess Communication", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">itertools</span></code> --- \u5efa\u7acb\u7522\u751f\u9ad8\u6548\u7387\u8ff4\u5708\u4e4b\u758a\u4ee3\u5668\u7684\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code> --- JSON \u7de8\u78bc\u5668\u8207\u89e3\u78bc\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">keyword</span></code> --- \u6aa2\u9a57 Python \u95dc\u9375\u5b57", "Python Language Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">linecache</span></code> --- Random access to text lines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">locale</span></code> \u2014 \u570b\u969b\u5316\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging</span></code> --- Python \u7684\u65e5\u8a8c\u8a18\u9304\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.config</span></code> --- Logging configuration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.handlers</span></code> --- Logging handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">lzma</span></code> --- Compression using the LZMA algorithm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailbox</span></code> --- \u4ee5\u5404\u7a2e\u683c\u5f0f\u64cd\u4f5c\u90f5\u4ef6\u4fe1\u7bb1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailcap</span></code> --- Mailcap file handling", "Structured Markup Processing Tools", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">marshal</span></code> --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">math</span></code> --- \u6578\u5b78\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mimetypes</span></code> --- Map filenames to MIME types", "\u591a\u5a92\u9ad4\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mmap</span></code> --- Memory-mapped file support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">modulefinder</span></code> --- Find modules used by a script", "\u5f15\u5165\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msilib</span></code> --- \u8b80\u5beb Microsoft Installer \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msvcrt</span></code> --- Useful routines from the MS VC++ runtime", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing</span></code> --- Process-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing.shared_memory</span></code> --- \u5c0d\u65bc\u5171\u4eab\u8a18\u61b6\u9ad4\u7684\u8de8\u884c\u7a0b\u76f4\u63a5\u5b58\u53d6", "\u7db2\u969b\u7db2\u8def\u8cc7\u6599\u8655\u7406", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">netrc</span></code> --- netrc \u6a94\u6848\u8655\u7406", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nis</span></code> --- Sun NIS (Yellow Pages) \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nntplib</span></code> --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">numbers</span></code> --- \u6578\u503c\u7684\u62bd\u8c61\u57fa\u5e95\u985e\u5225", "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">operator</span></code> --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">optparse</span></code> --- Parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os</span></code> --- \u5404\u7a2e\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os.path</span></code> --- \u5e38\u898b\u7684\u8def\u5f91\u540d\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ossaudiodev</span></code> --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pathlib</span></code> --- \u7269\u4ef6\u5c0e\u5411\u6a94\u6848\u7cfb\u7d71\u8def\u5f91", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pdb</span></code> --- The Python Debugger", "Data Persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> --- Python \u7269\u4ef6\u5e8f\u5217\u5316", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickletools</span></code> --- pickle \u958b\u767c\u8005\u7684\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pipes</span></code> --- shell pipelines \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pkgutil</span></code> --- Package extension utility", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">platform</span></code> ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">plistlib</span></code> --- Generate and parse Apple <code class=\"docutils literal notranslate\"><span class=\"pre\">.plist</span></code> files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">poplib</span></code> --- POP3 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">posix</span></code> --- \u6700\u5e38\u898b\u7684 POSIX \u7cfb\u7d71\u547c\u53eb", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pprint</span></code> --- Data pretty printer", "The Python Profilers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pty</span></code> --- Pseudo-terminal utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pwd</span></code> --- \u5bc6\u78bc\u8cc7\u6599\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_compile</span></code> \u2014 \u7de8\u8b6f Python \u4f86\u6e90\u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pyclbr</span></code> --- Python module browser support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pydoc</span></code> --- Documentation generator and online help system", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.parsers.expat</span></code> --- Fast XML parsing using Expat", "Python Runtime Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">queue</span></code> --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">quopri</span></code> --- \u7de8\u78bc\u548c\u89e3\u78bc MIME \u53ef\u5217\u5370\u5b57\u5143\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">random</span></code> --- \u751f\u6210\u507d\u96a8\u6a5f\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">re</span></code> --- \u6b63\u898f\u8868\u793a\u5f0f (regular expression) \u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">readline</span></code> --- GNU readline interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reprlib</span></code> --- Alternate <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">repr()</span></code> implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">resource</span></code> --- Resource usage information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">rlcompleter</span></code> --- Completion function for GNU readline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">runpy</span></code> --- Locating and executing Python modules", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sched</span></code> --- Event scheduler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">secrets</span></code> --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578", "\u5b89\u5168\u6027\u6ce8\u610f\u4e8b\u9805", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">select</span></code> --- Waiting for I/O completion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">selectors</span></code> --- High-level I/O multiplexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shelve</span></code> --- Python object persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shlex</span></code> --- Simple lexical analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shutil</span></code> \u2014 \u9ad8\u968e\u6a94\u6848\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">signal</span></code> --- Set handlers for asynchronous events", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">site</span></code> --- Site-specific configuration hook", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">smtplib</span></code> --- SMTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sndhdr</span></code> --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socket</span></code> --- Low-level networking interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socketserver</span></code> --- A framework for network servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">spwd</span></code> --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sqlite3</span></code> --- SQLite \u8cc7\u6599\u5eab\u7684 DB-API 2.0 \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ssl</span></code> --- socket \u7269\u4ef6\u7684 TLS/SSL \u5305\u88dd\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stat</span></code> --- Interpreting <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">stat()</span></code> results", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">statistics</span></code> --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f", "\u5167\u5efa\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">string</span></code> --- \u5e38\u898b\u7684\u5b57\u4e32\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stringprep</span></code> --- Internet String Preparation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">struct</span></code> --- Interpret bytes as packed binary data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">subprocess</span></code> --- \u5b50\u884c\u7a0b\u7ba1\u7406", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sunau</span></code> --- \u8b80\u5beb Sun AU \u6a94\u6848", "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">symtable</span></code> --- \u5b58\u53d6\u7de8\u8b6f\u5668\u7684\u7b26\u865f\u8868", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sys</span></code> --- \u7cfb\u7d71\u7279\u5b9a\u7684\u53c3\u6578\u8207\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sys.monitoring</span></code> --- Execution event monitoring", "The initialization of the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.path</span></code> module search path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sysconfig</span></code> --- Provide access to Python's configuration information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">syslog</span></code> --- Unix syslog library routines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tabnanny</span></code> --- \u5075\u6e2c\u4e0d\u826f\u7e2e\u6392", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tarfile</span></code> --- Read and write tar archive files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">telnetlib</span></code> --- Telnet \u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tempfile</span></code> --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">termios</span></code> --- POSIX style tty control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test</span></code> --- Python \u7684\u56de\u6b78\u6e2c\u8a66 (regression tests) \u5957\u4ef6", "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">textwrap</span></code> --- Text wrapping and filling", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">threading</span></code> --- Thread-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">time</span></code> --- Time access and conversions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">timeit</span></code> --- \u6e2c\u91cf\u5c0f\u91cf\u7a0b\u5f0f\u7247\u6bb5\u7684\u57f7\u884c\u6642\u9593", "\u4ee5 Tk \u6253\u9020\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (Graphical User Interfaces)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter</span></code> --- Python interface to Tcl/Tk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.colorchooser</span></code> --- \u984f\u8272\u9078\u64c7\u5c0d\u8a71\u6846", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.dnd</span></code> --- Drag and drop support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.font</span></code> --- Tkinter \u5b57\u578b\u5305\u88dd\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.messagebox</span></code> --- Tkinter message prompts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.scrolledtext</span></code> --- Scrolled Text Widget", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.tix</span></code> --- Tk \u64f4\u5145\u5c0f\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.ttk</span></code> --- Tk themed widgets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">token</span></code> --- Constants used with Python parse trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tokenize</span></code> --- Tokenizer for Python source", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tomllib</span></code> --- \u5256\u6790 TOML \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">trace</span></code> --- Trace or track Python statement execution", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">traceback</span></code> --- Print or retrieve a stack traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tracemalloc</span></code> --- Trace memory allocations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tty</span></code> --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">turtle</span></code> --- \u9f9c\u5716\u5b78 (Turtle graphics)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">types</span></code> --- Dynamic type creation and names for built-in types", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">typing</span></code> --- \u652f\u63f4\u578b\u5225\u63d0\u793a", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unicodedata</span></code> --- Unicode Database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code> --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> \u2014 mock \u7269\u4ef6\u51fd\u5f0f\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> --- \u5165\u9580\u6307\u5357", "Unix \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib</span></code> --- URL \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.error</span></code> --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.parse</span></code> --- Parse URLs into components", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.request</span></code> --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.robotparser</span></code> --- robots.txt \u7684\u5256\u6790\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">uuid</span></code> --- <strong>RFC 4122</strong> \u5b9a\u7fa9\u7684 UUID \u7269\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">venv</span></code> --- Creation of virtual environments", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">warnings</span></code> --- Warning control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wave</span></code> --- \u8b80\u5beb WAV \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">weakref</span></code> --- Weak references", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">webbrowser</span></code> --- Convenient web-browser controller", "MS Windows \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winreg</span></code> --- Windows registry access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winsound</span></code> --- Sound-playing interface for Windows", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wsgiref</span></code> --- WSGI \u5de5\u5177\u8207\u53c3\u8003\u5be6\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "XML \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom</span></code> --- The Document Object Model API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.minidom</span></code> --- Minimal DOM implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.pulldom</span></code> --- Support for building partial DOM trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree</span></code> --- The ElementTree XML API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax</span></code> --- Support for SAX2 parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.handler</span></code> --- Base classes for SAX handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.xmlreader</span></code> --- Interface for XML parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.saxutils</span></code> --- SAX Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc</span></code> --- XMLRPC \u4f3a\u670d\u5668\u8207\u7528\u6236\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.client</span></code> --- XML-RPC client access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.server</span></code> --- Basic XML-RPC servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipapp</span></code> \u2014 \u7ba1\u7406\u53ef\u57f7\u884c\u7684 Python zip \u5c01\u5b58\u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipfile</span></code> --- Work with ZIP archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipimport</span></code> --- Import modules from Zip archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zlib</span></code> --- \u76f8\u5bb9\u65bc <strong class=\"program\">gzip</strong> \u7684\u58d3\u7e2e", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zoneinfo</span></code> --- IANA \u6642\u5340\u652f\u63f4", "\u6cbf\u9769\u8207\u6388\u6b0a", "<span class=\"section-number\">8. </span>Compound statements", "<span class=\"section-number\">3. </span>\u8cc7\u6599\u6a21\u578b", "<span class=\"section-number\">4. </span>Execution model", "<span class=\"section-number\">6. </span>Expressions", "<span class=\"section-number\">10. </span>\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8", "<span class=\"section-number\">5. </span>The import system", "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a", "<span class=\"section-number\">1. </span>\u7c21\u4ecb", "<span class=\"section-number\">2. </span>Lexical analysis", "<span class=\"section-number\">7. </span>Simple statements", "<span class=\"section-number\">9. </span>\u6700\u9ad8\u5c64\u7d1a\u5143\u4ef6", "<span class=\"section-number\">16. </span>\u9644\u9304", "<span class=\"section-number\">1. </span>\u6dfa\u5617\u6ecb\u5473", "<span class=\"section-number\">9. </span>Class\uff08\u985e\u5225\uff09", "<span class=\"section-number\">4. </span>\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236", "<span class=\"section-number\">5. </span>\u8cc7\u6599\u7d50\u69cb", "<span class=\"section-number\">8. </span>\u932f\u8aa4\u548c\u4f8b\u5916", "<span class=\"section-number\">15. </span>\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236", "Python \u6559\u5b78", "<span class=\"section-number\">7. </span>\u8f38\u5165\u548c\u8f38\u51fa", "<span class=\"section-number\">14. </span>\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db", "<span class=\"section-number\">2. </span>\u4f7f\u7528 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb", "<span class=\"section-number\">6. </span>\u6a21\u7d44 (Module)", "<span class=\"section-number\">10. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd", "<span class=\"section-number\">11. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd", "<span class=\"section-number\">12. </span>\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6", "<span class=\"section-number\">13. </span>\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f", "<span class=\"section-number\">1. </span>\u547d\u4ee4\u5217\u8207\u74b0\u5883", "<span class=\"section-number\">3. </span>\u914d\u7f6e Python", "<span class=\"section-number\">6. </span>\u7de8\u8f2f\u5668\u8207 IDE", "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528", "<span class=\"section-number\">5. </span>\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python", "<span class=\"section-number\">2. </span>\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python", "<span class=\"section-number\">4. </span>\u5728 Windows \u4e0a\u4f7f\u7528 Python", "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.11 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.12 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09", "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f"], "terms": {"sphinx": [0, 68, 80, 84, 101, 472, 481], "restructuredtext": [0, 68, 80, 191, 481], "bug": [0, 59, 63, 68, 72, 73, 78, 79, 80, 84, 93, 95, 101, 103, 107, 123, 149, 175, 206, 223, 240, 241, 269, 291, 294, 297, 306, 338, 339, 346, 360, 363, 366, 384, 387, 442, 444, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481], "fred": [0, 101, 312, 367, 433, 460, 461, 462, 463, 465, 466, 477], "drake": [0, 460, 461, 462, 463, 465, 466], "jr": [0, 84, 461, 462, 463, 465, 466], "docutil": [0, 466, 481], "fredrik": [0, 85, 95, 424, 460, 461, 462, 464, 465, 467, 469, 473], "lundh": [0, 85, 95, 424, 460, 461, 462, 464, 465, 467, 473], "altern": [0, 18, 23, 31, 33, 45, 63, 68, 73, 79, 84, 85, 93, 95, 104, 107, 108, 110, 118, 124, 130, 135, 136, 137, 141, 152, 156, 159, 165, 171, 174, 175, 176, 179, 180, 184, 191, 194, 197, 198, 203, 209, 212, 213, 216, 219, 223, 226, 240, 249, 252, 259, 265, 266, 267, 270, 273, 281, 290, 291, 293, 295, 297, 312, 322, 330, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 352, 356, 357, 363, 367, 373, 374, 379, 382, 384, 386, 387, 388, 392, 397, 398, 400, 403, 405, 423, 424, 428, 429, 430, 431, 453, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 475, 476, 477, 478, 479, 480, 481], "refer": [0, 5, 7, 9, 11, 12, 13, 17, 19, 22, 23, 24, 26, 27, 28, 29, 31, 33, 34, 35, 36, 39, 42, 45, 49, 50, 54, 55, 58, 59, 60, 64, 66, 67, 68, 71, 72, 74, 76, 77, 78, 84, 87, 93, 98, 99, 100, 101, 104, 108, 113, 116, 118, 124, 127, 131, 134, 135, 137, 138, 139, 140, 142, 152, 156, 162, 165, 168, 175, 180, 181, 183, 189, 203, 210, 211, 213, 220, 223, 224, 225, 226, 228, 231, 233, 237, 238, 241, 243, 245, 248, 249, 251, 252, 253, 256, 257, 260, 265, 266, 267, 269, 271, 276, 286, 291, 295, 296, 297, 300, 305, 311, 312, 317, 319, 322, 327, 330, 331, 332, 335, 339, 342, 343, 345, 350, 354, 359, 360, 363, 364, 366, 373, 374, 375, 379, 383, 384, 386, 387, 388, 392, 393, 398, 403, 408, 409, 413, 415, 419, 420, 423, 425, 426, 427, 431, 432, 433, 434, 438, 439, 443, 448, 453, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "misc": [0, 35, 80, 221, 342, 374, 454, 460, 463, 464, 465, 466, 467, 468, 471, 473, 475, 481, 482], "ack": [0, 176, 466], "12": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 480, 482], "tracker": [1, 68, 281, 360, 465, 467, 481], "https": [1, 68, 71, 75, 78, 79, 80, 81, 84, 85, 95, 100, 101, 103, 107, 108, 124, 134, 158, 160, 167, 181, 224, 233, 237, 238, 240, 241, 246, 249, 259, 267, 305, 311, 312, 316, 317, 324, 326, 338, 339, 350, 377, 385, 386, 392, 393, 397, 401, 405, 409, 411, 417, 422, 424, 426, 433, 438, 442, 443, 449, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 472, 473, 474, 475, 476, 478, 479, 481], "github": [1, 75, 80, 109, 246, 305, 386, 424, 472, 477, 478, 481], "com": [1, 68, 69, 73, 75, 80, 84, 85, 93, 100, 101, 103, 104, 108, 134, 160, 164, 174, 181, 182, 198, 241, 246, 259, 286, 295, 305, 316, 317, 324, 338, 339, 342, 386, 393, 394, 396, 403, 411, 417, 451, 452, 457, 459, 462, 464, 465, 466, 467, 472, 473, 474, 475, 476, 479, 481], "doc": [1, 23, 58, 60, 75, 76, 79, 80, 93, 103, 104, 124, 174, 192, 203, 221, 223, 240, 245, 249, 253, 260, 291, 294, 311, 338, 339, 350, 360, 365, 383, 392, 401, 403, 410, 450, 452, 454, 458, 459, 460, 462, 463, 465, 466, 467, 472, 473, 477, 478, 479, 481], "zh": 1, "tw": [1, 156], "issu": [1, 7, 22, 32, 33, 34, 61, 66, 68, 76, 80, 93, 94, 100, 101, 103, 107, 117, 118, 124, 133, 153, 156, 174, 175, 179, 183, 184, 186, 201, 211, 219, 223, 233, 240, 245, 246, 256, 260, 264, 265, 269, 270, 281, 290, 291, 294, 297, 309, 331, 333, 335, 339, 342, 346, 360, 382, 384, 386, 387, 388, 398, 400, 410, 411, 419, 424, 453, 456, 460, 461, 462, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "discours": [1, 481], "org": [1, 57, 68, 75, 78, 79, 84, 87, 95, 101, 105, 107, 108, 109, 124, 158, 164, 165, 167, 182, 221, 224, 233, 237, 238, 240, 241, 245, 246, 281, 286, 301, 305, 311, 312, 317, 326, 333, 335, 338, 339, 350, 353, 385, 392, 393, 394, 396, 401, 409, 411, 413, 417, 424, 426, 433, 438, 442, 443, 449, 451, 452, 453, 456, 457, 458, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 478, 479, 480, 481], "list": [1, 2, 5, 7, 16, 23, 31, 33, 34, 35, 40, 42, 49, 52, 54, 55, 57, 58, 59, 60, 63, 64, 66, 68, 73, 75, 76, 77, 79, 80, 84, 86, 87, 89, 92, 93, 94, 99, 100, 101, 103, 104, 106, 107, 108, 110, 113, 115, 118, 119, 120, 124, 126, 131, 134, 137, 138, 142, 149, 153, 156, 158, 159, 161, 165, 167, 168, 169, 171, 173, 174, 175, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 191, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 214, 216, 218, 220, 221, 223, 224, 225, 226, 228, 229, 231, 233, 234, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 269, 270, 272, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 302, 303, 305, 306, 308, 309, 310, 312, 316, 317, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 346, 349, 350, 353, 356, 357, 359, 360, 361, 362, 363, 364, 367, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 392, 393, 394, 398, 400, 401, 403, 405, 406, 408, 409, 411, 412, 413, 414, 417, 418, 419, 420, 421, 424, 426, 427, 429, 430, 431, 433, 434, 438, 441, 443, 444, 446, 448, 449, 451, 452, 453, 454, 455, 457, 459, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "cpython": [1, 4, 10, 13, 33, 35, 54, 57, 59, 63, 68, 71, 73, 75, 76, 80, 85, 87, 89, 96, 99, 140, 156, 159, 184, 186, 189, 208, 211, 212, 223, 233, 235, 248, 253, 255, 273, 281, 291, 294, 301, 309, 314, 318, 322, 330, 341, 342, 346, 350, 351, 360, 363, 377, 383, 400, 405, 423, 425, 426, 427, 428, 429, 432, 434, 448, 453, 454, 458, 459, 461, 462, 463, 465, 466, 467, 473, 474, 476, 481, 482], "sign": [1, 30, 49, 64, 68, 75, 85, 104, 119, 139, 152, 156, 165, 174, 175, 181, 184, 194, 199, 207, 219, 223, 226, 233, 264, 266, 267, 270, 273, 281, 290, 291, 293, 295, 297, 317, 334, 342, 343, 345, 363, 364, 392, 411, 426, 428, 433, 459, 461, 462, 464, 465, 466, 467, 472, 473, 475, 477, 479, 481], "up": [1, 7, 9, 23, 33, 42, 45, 61, 63, 64, 68, 73, 75, 76, 77, 84, 92, 93, 94, 95, 99, 100, 101, 104, 107, 118, 124, 130, 136, 137, 138, 147, 149, 156, 161, 164, 165, 175, 177, 181, 184, 188, 189, 191, 192, 195, 198, 206, 207, 211, 219, 223, 224, 228, 233, 238, 240, 241, 243, 245, 250, 253, 256, 259, 263, 264, 265, 266, 267, 268, 273, 274, 276, 278, 280, 281, 282, 290, 291, 294, 295, 306, 307, 309, 313, 317, 318, 321, 326, 329, 331, 332, 335, 336, 338, 339, 342, 343, 345, 346, 350, 353, 354, 356, 357, 360, 362, 363, 367, 372, 373, 374, 379, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 400, 408, 411, 414, 415, 419, 423, 425, 426, 427, 428, 430, 432, 433, 434, 439, 448, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "new": [1, 5, 7, 9, 13, 17, 22, 23, 26, 27, 28, 31, 33, 37, 39, 42, 43, 45, 49, 50, 54, 55, 56, 58, 59, 60, 61, 63, 64, 67, 68, 72, 73, 75, 76, 79, 84, 85, 87, 92, 93, 94, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 124, 126, 127, 130, 131, 136, 137, 138, 141, 142, 147, 149, 151, 153, 155, 156, 158, 159, 165, 167, 168, 174, 175, 176, 179, 181, 182, 184, 186, 189, 191, 192, 193, 194, 196, 198, 199, 203, 204, 205, 206, 207, 211, 212, 213, 214, 219, 223, 224, 232, 233, 234, 235, 240, 245, 246, 248, 253, 255, 256, 257, 259, 264, 265, 266, 267, 268, 269, 270, 274, 276, 278, 279, 281, 282, 286, 291, 293, 294, 295, 297, 299, 302, 305, 306, 307, 310, 312, 313, 317, 318, 320, 323, 326, 327, 330, 331, 333, 335, 336, 338, 339, 342, 345, 346, 350, 353, 356, 359, 360, 363, 364, 367, 373, 374, 378, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 401, 403, 408, 409, 410, 411, 413, 414, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 430, 432, 434, 438, 439, 440, 447, 449, 450, 453, 454, 457, 459, 470, 471, 481, 482], "titl": [1, 64, 84, 93, 95, 104, 107, 108, 118, 149, 158, 182, 187, 238, 245, 260, 265, 279, 281, 290, 335, 338, 342, 343, 367, 371, 382, 384, 393, 409, 410, 411, 418, 424, 460, 462, 464, 471, 473, 479, 481], "comment": [1, 9, 64, 68, 73, 95, 101, 104, 107, 110, 120, 165, 174, 191, 201, 238, 241, 242, 245, 253, 271, 291, 297, 311, 312, 317, 329, 346, 360, 375, 376, 392, 410, 411, 413, 420, 421, 429, 434, 447, 460, 462, 463, 465, 467, 468, 470, 471, 472, 473, 479, 481], "mozilla": [1, 108, 241, 339, 393, 401, 464, 481], "patch": [1, 57, 68, 80, 84, 89, 92, 104, 118, 175, 185, 239, 240, 286, 342, 360, 384, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 476, 477, 479, 480, 481], "python": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 75, 76, 77, 87, 89, 90, 94, 97, 98, 100, 101, 104, 105, 106, 108, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 263, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 357, 358, 359, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 437, 439, 440, 441, 442, 444, 445, 451, 452, 453, 455], "except": [2, 5, 7, 9, 11, 13, 14, 17, 22, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 45, 47, 49, 51, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 74, 75, 76, 78, 79, 84, 87, 92, 93, 94, 95, 98, 99, 103, 104, 107, 110, 112, 113, 115, 116, 120, 123, 124, 125, 127, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 164, 165, 168, 169, 171, 173, 174, 175, 176, 179, 180, 181, 182, 184, 185, 186, 188, 189, 192, 193, 194, 198, 199, 203, 204, 205, 206, 208, 210, 212, 213, 216, 221, 223, 224, 226, 227, 230, 232, 233, 240, 241, 242, 243, 245, 246, 248, 252, 253, 254, 256, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 276, 277, 279, 281, 283, 284, 285, 286, 291, 293, 294, 295, 297, 300, 302, 303, 306, 309, 312, 313, 314, 318, 320, 321, 323, 326, 327, 328, 329, 330, 332, 333, 335, 336, 338, 339, 341, 342, 343, 345, 346, 347, 350, 351, 355, 356, 359, 360, 361, 362, 363, 364, 365, 367, 373, 376, 377, 379, 380, 383, 384, 386, 387, 388, 391, 392, 393, 395, 397, 398, 399, 400, 401, 403, 405, 406, 408, 409, 411, 412, 413, 414, 417, 418, 420, 421, 422, 424, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 439, 443, 448, 450, 453, 454, 459, 460, 461, 462, 463, 464, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "pylist_new": [2, 35, 38, 57], "null": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 72, 75, 76, 79, 93, 99, 101, 103, 107, 120, 173, 174, 189, 223, 225, 241, 260, 270, 279, 282, 285, 291, 297, 316, 317, 335, 338, 339, 345, 346, 403, 406, 408, 409, 420, 429, 433, 434, 460, 464, 467, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481], "protocol": [2, 8, 9, 23, 28, 32, 55, 58, 61, 63, 66, 68, 74, 79, 84, 87, 93, 94, 95, 98, 101, 107, 108, 119, 121, 124, 128, 135, 139, 140, 144, 149, 156, 159, 167, 174, 181, 182, 185, 192, 201, 207, 210, 215, 223, 233, 239, 241, 243, 248, 249, 252, 253, 256, 258, 265, 266, 267, 269, 281, 286, 291, 293, 297, 298, 326, 327, 328, 335, 336, 338, 339, 342, 344, 345, 356, 357, 360, 363, 367, 384, 387, 388, 393, 403, 405, 414, 417, 418, 421, 425, 426, 428, 433, 454, 460, 462, 463, 465, 466, 467, 469, 470, 471, 473, 475, 478, 480, 481, 482], "call": [2, 5, 7, 9, 11, 13, 17, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 37, 39, 40, 42, 45, 47, 49, 51, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 74, 75, 76, 77, 79, 84, 87, 89, 92, 93, 94, 97, 98, 99, 100, 101, 104, 107, 108, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 147, 149, 151, 153, 155, 156, 158, 159, 161, 165, 167, 168, 171, 175, 177, 179, 181, 182, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 221, 223, 224, 225, 228, 230, 232, 233, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 274, 276, 279, 280, 281, 282, 286, 289, 291, 293, 294, 295, 297, 300, 303, 305, 306, 307, 312, 317, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 367, 369, 373, 374, 376, 378, 379, 380, 382, 383, 384, 385, 386, 389, 392, 393, 395, 397, 398, 400, 401, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 423, 425, 426, 427, 429, 430, 433, 434, 438, 439, 440, 441, 444, 447, 449, 450, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481], "tp_call": [2, 23, 63, 68, 75, 472, 481], "vectorcal": [2, 27, 58, 61, 63, 68, 470, 471, 472, 480, 481], "api": [2, 7, 11, 13, 15, 16, 17, 20, 22, 23, 24, 26, 27, 28, 35, 38, 39, 45, 46, 48, 51, 55, 58, 59, 61, 63, 64, 65, 68, 72, 74, 75, 76, 79, 84, 87, 88, 91, 92, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 118, 123, 125, 126, 127, 130, 131, 134, 135, 137, 138, 140, 157, 159, 162, 167, 168, 173, 174, 175, 183, 185, 186, 189, 190, 192, 193, 195, 196, 199, 200, 201, 203, 204, 206, 207, 209, 215, 221, 226, 233, 234, 244, 248, 252, 253, 255, 256, 257, 259, 260, 265, 266, 267, 269, 271, 278, 279, 280, 281, 283, 291, 292, 293, 296, 300, 302, 307, 316, 317, 318, 330, 335, 339, 340, 343, 350, 351, 353, 355, 358, 360, 363, 367, 377, 384, 386, 387, 388, 392, 393, 398, 403, 404, 405, 407, 409, 412, 413, 417, 418, 427, 428, 430, 431, 433, 434, 438, 439, 443, 449, 459, 460, 461, 462, 482], "number": [2, 5, 7, 9, 13, 22, 23, 25, 26, 28, 31, 32, 33, 39, 40, 41, 42, 50, 54, 55, 58, 59, 60, 64, 66, 68, 72, 73, 75, 76, 77, 79, 84, 87, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 110, 113, 114, 115, 116, 118, 120, 124, 130, 131, 135, 136, 137, 139, 142, 144, 147, 149, 150, 153, 156, 158, 161, 164, 165, 168, 171, 173, 174, 175, 181, 184, 186, 188, 189, 191, 193, 194, 197, 200, 201, 203, 206, 209, 210, 211, 212, 213, 214, 216, 223, 224, 228, 232, 233, 238, 240, 242, 243, 245, 246, 248, 249, 252, 253, 255, 256, 257, 259, 262, 264, 265, 267, 268, 269, 270, 272, 273, 274, 276, 279, 281, 283, 286, 288, 290, 293, 294, 295, 297, 302, 303, 305, 306, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 324, 326, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 350, 351, 356, 357, 360, 362, 363, 364, 365, 367, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 392, 393, 398, 400, 401, 403, 404, 405, 406, 408, 411, 412, 414, 415, 417, 420, 423, 425, 428, 429, 430, 432, 433, 434, 439, 440, 441, 442, 443, 448, 449, 450, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "sequenc": [2, 5, 7, 16, 22, 32, 33, 35, 37, 39, 42, 49, 50, 56, 59, 64, 66, 68, 75, 79, 84, 87, 92, 94, 95, 99, 101, 104, 107, 110, 118, 120, 124, 137, 141, 143, 155, 156, 157, 159, 161, 162, 173, 174, 175, 187, 188, 189, 191, 194, 200, 203, 204, 207, 210, 211, 216, 223, 228, 234, 236, 241, 248, 252, 253, 256, 257, 259, 260, 264, 266, 268, 269, 273, 274, 279, 281, 282, 290, 291, 297, 299, 300, 305, 310, 312, 316, 317, 319, 323, 324, 330, 335, 338, 339, 341, 343, 356, 357, 360, 361, 364, 367, 374, 376, 379, 380, 382, 384, 385, 386, 387, 388, 392, 393, 398, 400, 403, 408, 411, 412, 417, 423, 428, 432, 433, 434, 438, 439, 443, 447, 460, 461, 462, 463, 464, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "map": [2, 16, 22, 32, 33, 34, 42, 49, 50, 59, 65, 66, 68, 75, 78, 79, 84, 85, 87, 93, 94, 95, 101, 102, 107, 108, 110, 120, 141, 153, 156, 158, 159, 164, 167, 168, 173, 175, 179, 181, 182, 184, 188, 189, 191, 193, 194, 201, 203, 209, 210, 211, 214, 215, 223, 224, 228, 234, 240, 243, 245, 252, 253, 257, 258, 259, 265, 266, 267, 268, 269, 270, 271, 277, 278, 279, 281, 283, 285, 286, 289, 290, 291, 293, 294, 296, 297, 306, 310, 312, 316, 317, 319, 320, 327, 335, 338, 339, 341, 343, 344, 345, 346, 350, 360, 363, 364, 365, 374, 375, 382, 383, 384, 385, 392, 393, 400, 409, 411, 413, 414, 428, 429, 430, 434, 438, 439, 440, 442, 448, 450, 453, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481], "buffer": [2, 8, 9, 18, 24, 32, 33, 34, 41, 42, 43, 50, 64, 65, 66, 68, 75, 87, 92, 100, 110, 116, 118, 119, 124, 125, 128, 134, 135, 140, 144, 147, 149, 155, 156, 159, 174, 175, 186, 210, 211, 212, 213, 223, 232, 233, 240, 243, 267, 268, 276, 280, 281, 282, 291, 293, 294, 296, 312, 313, 320, 326, 329, 330, 331, 335, 339, 342, 345, 346, 350, 356, 357, 358, 360, 361, 363, 384, 386, 393, 405, 406, 411, 412, 420, 422, 453, 454, 462, 463, 464, 465, 466, 467, 468, 473, 475, 476, 477, 478, 480, 481, 482], "structur": [2, 5, 13, 17, 22, 26, 31, 32, 33, 34, 42, 43, 45, 47, 50, 55, 58, 59, 61, 66, 68, 73, 75, 76, 79, 85, 92, 93, 95, 99, 100, 104, 116, 126, 133, 137, 142, 151, 156, 175, 185, 192, 194, 199, 201, 202, 203, 204, 205, 210, 211, 213, 215, 220, 221, 224, 228, 231, 243, 245, 246, 249, 252, 253, 254, 256, 259, 260, 269, 274, 279, 281, 291, 297, 303, 305, 309, 317, 330, 331, 335, 337, 339, 342, 344, 345, 346, 352, 360, 364, 367, 373, 382, 383, 386, 387, 400, 408, 411, 412, 417, 420, 421, 425, 426, 430, 431, 460, 461, 462, 463, 464, 465, 466, 467, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481], "request": [2, 5, 23, 31, 33, 42, 43, 45, 49, 61, 63, 68, 76, 84, 85, 94, 95, 98, 99, 101, 107, 108, 118, 131, 137, 140, 149, 156, 158, 164, 167, 174, 175, 184, 195, 206, 210, 211, 213, 221, 223, 224, 228, 232, 239, 240, 241, 242, 243, 245, 246, 248, 252, 253, 254, 256, 269, 281, 286, 290, 291, 293, 297, 303, 305, 307, 312, 314, 320, 326, 329, 331, 332, 339, 342, 346, 350, 360, 364, 374, 382, 387, 390, 392, 394, 397, 403, 405, 408, 414, 415, 417, 418, 421, 426, 430, 434, 439, 449, 451, 459, 460, 461, 463, 464, 465, 466, 467, 470, 473, 474, 475, 476, 478, 479, 480, 481], "type": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 53, 54, 55, 56, 59, 60, 62, 67, 68, 73, 74, 77, 79, 80, 84, 85, 86, 87, 88, 89, 92, 93, 98, 100, 101, 108, 110, 113, 115, 116, 119, 121, 124, 137, 140, 142, 143, 148, 149, 150, 151, 153, 156, 158, 159, 165, 166, 167, 170, 171, 175, 176, 180, 182, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 214, 219, 221, 223, 224, 225, 228, 233, 234, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 254, 256, 259, 260, 262, 264, 265, 266, 267, 268, 270, 271, 273, 276, 277, 279, 281, 282, 283, 288, 291, 294, 295, 296, 302, 305, 306, 311, 312, 313, 314, 317, 318, 319, 322, 323, 326, 327, 328, 329, 330, 331, 334, 335, 336, 339, 340, 343, 345, 346, 347, 349, 350, 356, 360, 361, 363, 364, 366, 371, 374, 375, 376, 379, 380, 382, 386, 387, 388, 392, 393, 397, 398, 399, 400, 401, 402, 404, 406, 409, 410, 411, 413, 414, 417, 418, 420, 423, 424, 427, 428, 429, 430, 431, 433, 437, 438, 439, 440, 441, 446, 447, 448, 449, 453, 454, 459, 460, 461, 467, 468, 469, 473, 481, 482], "independ": [2, 18, 22, 25, 33, 34, 45, 68, 73, 75, 84, 92, 94, 95, 99, 101, 158, 181, 184, 191, 199, 223, 224, 244, 259, 264, 265, 269, 341, 342, 350, 351, 352, 364, 367, 374, 376, 386, 397, 408, 411, 420, 428, 454, 460, 467, 474, 480, 481, 482], "field": [2, 5, 13, 28, 31, 33, 34, 42, 54, 55, 58, 60, 61, 63, 64, 66, 68, 73, 75, 76, 84, 87, 93, 94, 99, 100, 116, 149, 151, 156, 158, 175, 181, 184, 189, 194, 197, 200, 201, 203, 206, 207, 211, 231, 232, 234, 240, 245, 257, 259, 265, 266, 270, 279, 291, 312, 313, 314, 320, 323, 333, 335, 337, 338, 339, 340, 342, 343, 345, 346, 350, 354, 356, 359, 364, 367, 374, 376, 379, 392, 396, 398, 403, 409, 411, 420, 426, 433, 450, 453, 460, 461, 462, 463, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "readon": [2, 43, 58, 68, 246, 330, 338, 342, 374, 408, 409, 466, 472, 481], "format": [2, 5, 9, 10, 18, 23, 25, 31, 35, 41, 48, 49, 59, 63, 64, 68, 73, 75, 79, 84, 85, 87, 92, 93, 94, 103, 104, 107, 108, 110, 115, 116, 117, 118, 120, 131, 139, 140, 141, 142, 143, 144, 149, 150, 151, 156, 162, 165, 167, 171, 173, 174, 181, 182, 184, 188, 189, 190, 191, 192, 194, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 215, 219, 223, 226, 228, 232, 233, 241, 243, 246, 247, 248, 253, 257, 260, 263, 264, 265, 267, 268, 269, 270, 274, 279, 282, 290, 291, 293, 294, 295, 296, 300, 302, 305, 306, 312, 317, 318, 319, 328, 329, 330, 334, 335, 336, 338, 339, 346, 347, 350, 357, 360, 361, 364, 366, 367, 373, 374, 376, 379, 380, 382, 383, 386, 392, 393, 395, 398, 403, 411, 415, 420, 421, 425, 426, 428, 429, 432, 433, 440, 442, 443, 447, 448, 449, 453, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 475, 478, 479, 481, 482], "shape": [2, 63, 68, 94, 220, 223, 282, 316, 342, 384, 466, 470, 471, 474, 481], "stride": [2, 63, 68, 253, 342, 426, 428, 463, 474, 481], "suboffset": [2, 63, 68, 342, 474], "contigu": [2, 5, 43, 68, 87, 188, 246, 259, 269, 297, 342, 356, 413, 466, 474, 481], "compound": [2, 68, 220, 245, 343, 362, 367, 373, 374, 429, 431, 433, 466, 474, 481], "complex": [2, 5, 13, 15, 68, 72, 73, 75, 84, 85, 87, 101, 104, 118, 124, 126, 130, 159, 165, 168, 173, 182, 184, 185, 188, 192, 198, 201, 223, 224, 252, 259, 260, 266, 273, 287, 288, 290, 297, 305, 317, 331, 332, 343, 346, 350, 356, 382, 384, 387, 417, 425, 428, 433, 434, 438, 447, 448, 453, 462, 464, 465, 466, 467, 469, 470, 471, 473, 475, 477, 478, 479, 480, 481], "array": [2, 5, 9, 10, 16, 31, 39, 45, 54, 58, 60, 61, 63, 64, 66, 68, 72, 73, 75, 76, 78, 84, 87, 93, 99, 101, 115, 116, 140, 156, 176, 180, 213, 252, 277, 281, 282, 283, 285, 291, 297, 307, 335, 342, 345, 359, 377, 379, 383, 384, 400, 406, 417, 425, 426, 440, 450, 463, 464, 465, 466, 467, 468, 473, 476, 478, 480, 481], "numpi": [2, 68, 85, 119, 223, 282, 297, 341, 442, 448, 451, 459, 465, 466, 471, 473, 474, 476, 481], "style": [2, 5, 9, 23, 64, 68, 73, 76, 78, 85, 87, 94, 95, 100, 104, 116, 118, 131, 141, 142, 144, 148, 158, 165, 188, 194, 203, 205, 218, 219, 222, 223, 224, 228, 238, 240, 243, 252, 259, 265, 266, 269, 273, 274, 290, 291, 294, 295, 297, 306, 311, 317, 328, 330, 331, 335, 338, 350, 353, 360, 363, 366, 367, 371, 373, 379, 386, 389, 405, 418, 428, 429, 432, 433, 443, 444, 447, 450, 454, 459, 460, 461, 462, 463, 464, 466, 467, 468, 471, 472, 473, 474, 475, 478, 479, 481, 482], "and": [2, 9, 10, 11, 13, 16, 17, 18, 22, 24, 26, 27, 28, 30, 31, 32, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 59, 60, 61, 63, 65, 66, 67, 68, 74, 78, 84, 87, 89, 91, 97, 98, 100, 103, 105, 110, 111, 112, 113, 115, 116, 117, 120, 121, 122, 127, 128, 132, 133, 135, 136, 138, 139, 141, 142, 143, 145, 147, 150, 151, 153, 155, 157, 158, 161, 162, 164, 165, 168, 171, 172, 173, 175, 176, 177, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 230, 231, 232, 234, 240, 242, 243, 244, 246, 247, 249, 251, 252, 254, 255, 256, 259, 262, 263, 265, 267, 269, 270, 271, 274, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288, 289, 293, 294, 295, 296, 299, 300, 301, 303, 305, 307, 309, 310, 312, 313, 316, 318, 319, 320, 321, 323, 324, 327, 328, 329, 332, 333, 334, 336, 337, 340, 341, 343, 344, 346, 350, 352, 353, 354, 357, 358, 359, 360, 361, 366, 371, 372, 373, 374, 375, 376, 378, 379, 381, 385, 389, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 410, 412, 413, 414, 415, 418, 419, 420, 421, 424, 425, 429, 431, 432, 434, 436, 439, 440, 441, 444, 447, 449, 453, 455, 456, 470, 471, 482], "pil": [2, 68, 85, 342], "relat": [2, 33, 42, 45, 63, 68, 79, 84, 85, 93, 95, 100, 101, 104, 107, 110, 111, 124, 131, 137, 151, 152, 156, 165, 167, 175, 179, 181, 188, 189, 191, 192, 194, 198, 203, 205, 206, 207, 211, 213, 215, 223, 226, 233, 239, 243, 253, 255, 257, 259, 263, 264, 265, 267, 268, 269, 273, 276, 278, 279, 281, 288, 291, 294, 296, 297, 300, 306, 312, 313, 317, 318, 322, 323, 329, 330, 331, 335, 338, 339, 341, 342, 343, 346, 350, 352, 356, 360, 364, 367, 373, 374, 378, 382, 383, 386, 387, 392, 397, 398, 400, 403, 405, 410, 411, 413, 419, 420, 423, 426, 428, 429, 431, 433, 434, 448, 453, 459, 460, 461, 462, 463, 464, 467, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "function": [2, 5, 9, 10, 11, 13, 16, 17, 22, 23, 24, 26, 28, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 66, 67, 68, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 87, 89, 92, 97, 98, 100, 101, 103, 107, 108, 110, 111, 112, 113, 115, 116, 122, 124, 126, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 149, 150, 153, 155, 156, 157, 159, 162, 164, 165, 168, 170, 171, 175, 176, 177, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 222, 223, 226, 228, 232, 233, 234, 240, 241, 243, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 262, 263, 264, 267, 268, 270, 274, 276, 278, 279, 281, 285, 288, 290, 291, 293, 294, 295, 296, 300, 302, 305, 306, 307, 309, 310, 311, 312, 313, 318, 319, 320, 322, 323, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 349, 350, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 369, 371, 375, 376, 378, 379, 380, 384, 385, 387, 388, 392, 393, 395, 397, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 423, 427, 429, 430, 433, 434, 437, 438, 440, 443, 448, 449, 453, 454, 457, 459, 462, 463, 467, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482], "pyobject": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 97, 99, 174, 317, 360, 462, 465, 466, 470, 471, 478, 479, 481], "_pyobject_new": 3, "pytypeobject": [3, 6, 8, 9, 12, 13, 15, 17, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 35, 37, 38, 39, 44, 45, 46, 49, 50, 55, 56, 57, 58, 60, 61, 62, 64, 68, 75, 76, 99, 461, 471, 472, 476, 479, 480, 481], "pyvarobject": [3, 28, 50, 57, 58, 68, 360, 471], "_pyobject_newvar": 3, "py_ssize_t": [3, 5, 7, 8, 9, 10, 13, 18, 22, 23, 28, 34, 35, 38, 39, 40, 41, 43, 45, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 73, 75, 99, 174, 350, 426, 465, 466, 471, 479, 481], "size": [3, 5, 7, 9, 18, 28, 30, 31, 34, 39, 41, 42, 43, 49, 51, 54, 55, 58, 59, 60, 61, 63, 64, 68, 73, 75, 76, 92, 93, 94, 97, 99, 100, 101, 107, 113, 115, 116, 118, 131, 135, 139, 140, 142, 143, 147, 149, 151, 156, 159, 161, 171, 172, 175, 182, 183, 184, 188, 189, 213, 214, 217, 221, 223, 224, 240, 243, 245, 246, 248, 249, 256, 259, 260, 264, 267, 268, 276, 281, 282, 293, 297, 303, 306, 309, 312, 318, 319, 320, 333, 335, 336, 338, 340, 341, 342, 346, 347, 350, 356, 358, 359, 360, 362, 363, 367, 370, 373, 374, 379, 382, 384, 386, 393, 406, 408, 419, 420, 426, 430, 444, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pyobject_init": [3, 57, 479, 480, 481], "op": [3, 10, 15, 27, 28, 33, 37, 39, 49, 63, 64, 75, 85, 120, 136, 175, 189, 228, 267, 281, 291, 317, 335, 338, 350, 363, 375, 376, 405, 463, 466, 470, 471, 472, 478, 481], "abi": [3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 26, 28, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 45, 47, 48, 49, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 97, 99, 350, 454, 458, 467, 471, 472, 475, 476, 478, 480, 481, 482], "pyobject_initvar": [3, 57, 481], "pyobject_new": [3, 28, 42, 63, 68, 463, 479, 480, 481], "typeobj": [3, 28, 99, 386], "header": [3, 25, 28, 58, 63, 68, 73, 84, 100, 104, 115, 134, 140, 144, 149, 151, 153, 165, 167, 174, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 213, 228, 232, 240, 241, 242, 243, 245, 246, 248, 254, 265, 267, 269, 274, 280, 283, 286, 291, 295, 303, 309, 315, 333, 334, 335, 339, 347, 350, 353, 356, 360, 375, 379, 383, 391, 393, 395, 409, 417, 420, 425, 427, 450, 454, 459, 461, 463, 465, 466, 467, 469, 472, 473, 475, 476, 477, 478, 479, 480, 481], "tp_basics": [3, 28, 61, 63, 75, 76, 480, 481], "pyobject_newvar": [3, 28, 42, 63, 99, 463, 479, 480, 481], "tp_items": [3, 28, 61, 63, 75, 76], "tupl": [3, 5, 10, 14, 16, 23, 27, 35, 38, 40, 42, 49, 54, 55, 58, 59, 61, 62, 63, 66, 68, 72, 73, 75, 76, 79, 87, 94, 95, 97, 100, 101, 104, 108, 110, 111, 113, 114, 115, 118, 119, 120, 124, 131, 132, 135, 139, 142, 145, 148, 150, 153, 156, 164, 168, 174, 175, 179, 180, 181, 182, 184, 185, 187, 188, 189, 191, 194, 201, 203, 206, 207, 211, 219, 221, 223, 224, 225, 230, 231, 234, 240, 241, 242, 243, 246, 248, 252, 253, 256, 257, 259, 260, 264, 265, 267, 269, 270, 272, 274, 277, 279, 281, 284, 286, 287, 289, 290, 291, 293, 294, 297, 301, 302, 303, 305, 306, 308, 312, 314, 316, 317, 320, 323, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 343, 345, 346, 347, 349, 353, 357, 358, 359, 360, 363, 364, 367, 374, 376, 379, 380, 382, 383, 386, 387, 392, 393, 394, 396, 398, 399, 400, 403, 410, 411, 413, 414, 417, 418, 420, 425, 426, 427, 428, 429, 430, 434, 438, 439, 441, 443, 444, 448, 449, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "void": [3, 5, 7, 9, 11, 12, 13, 17, 21, 22, 23, 24, 25, 27, 28, 30, 31, 33, 34, 35, 38, 39, 41, 42, 45, 48, 49, 51, 52, 53, 58, 59, 60, 61, 63, 64, 66, 67, 71, 72, 73, 75, 76, 77, 86, 97, 99, 174, 317, 345, 409, 429, 467, 470, 471, 472, 479, 480, 481], "pyobject_del": [3, 42, 63, 463], "tp_dealloc": [3, 28, 61, 63, 67, 68, 75, 76, 471, 479, 481], "handler": [3, 23, 24, 28, 33, 34, 59, 61, 63, 64, 66, 67, 68, 73, 75, 76, 81, 87, 107, 113, 116, 118, 120, 123, 128, 130, 133, 143, 149, 150, 165, 175, 183, 186, 187, 189, 194, 195, 199, 200, 211, 223, 227, 238, 243, 252, 254, 256, 258, 264, 271, 281, 290, 291, 295, 306, 312, 313, 326, 327, 330, 335, 338, 342, 350, 354, 356, 360, 364, 366, 386, 391, 393, 401, 409, 410, 412, 414, 415, 418, 425, 426, 427, 453, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "_py_nonestruct": [3, 86], "none": [3, 5, 16, 20, 23, 26, 31, 33, 34, 45, 55, 56, 58, 63, 64, 67, 68, 73, 80, 85, 87, 88, 89, 93, 95, 100, 101, 104, 105, 106, 108, 110, 111, 112, 114, 115, 118, 120, 124, 126, 127, 130, 131, 133, 134, 135, 136, 137, 139, 141, 142, 145, 147, 148, 149, 150, 153, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 179, 181, 182, 184, 187, 188, 189, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 216, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 279, 281, 282, 284, 285, 286, 289, 290, 291, 294, 295, 297, 298, 300, 302, 303, 305, 306, 309, 310, 312, 314, 316, 317, 318, 319, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 342, 343, 345, 346, 347, 350, 351, 353, 356, 357, 358, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 425, 428, 429, 430, 433, 434, 435, 439, 440, 441, 444, 448, 451, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "py_non": [3, 23, 27, 33, 46, 47, 56, 67, 73, 86, 429], "pymodule_cr": [3, 33, 35, 45, 72, 73, 76], "macro": [4, 5, 6, 17, 23, 28, 33, 34, 35, 42, 43, 44, 45, 50, 55, 56, 59, 60, 63, 64, 68, 73, 76, 174, 284, 350, 360, 454, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "built": [4, 7, 16, 23, 31, 33, 34, 35, 37, 42, 47, 49, 58, 59, 61, 63, 68, 73, 75, 76, 77, 79, 80, 84, 85, 93, 100, 101, 103, 107, 108, 109, 110, 113, 118, 126, 130, 149, 152, 156, 157, 159, 161, 166, 176, 179, 180, 184, 188, 189, 193, 197, 200, 204, 211, 219, 223, 228, 233, 245, 248, 249, 250, 252, 253, 255, 256, 259, 264, 273, 274, 281, 290, 291, 294, 295, 297, 306, 309, 311, 318, 319, 326, 327, 335, 338, 339, 343, 345, 346, 350, 353, 360, 367, 374, 382, 386, 387, 388, 398, 400, 403, 408, 409, 411, 413, 417, 421, 425, 427, 428, 430, 432, 433, 434, 440, 441, 453, 454, 459, 461, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482], "run": [4, 23, 28, 33, 34, 42, 45, 51, 59, 63, 64, 68, 72, 73, 76, 77, 79, 81, 84, 85, 86, 89, 92, 93, 95, 99, 100, 103, 104, 105, 107, 110, 113, 118, 121, 122, 123, 127, 130, 131, 132, 133, 134, 135, 136, 138, 142, 149, 150, 155, 161, 164, 165, 167, 168, 171, 174, 175, 179, 184, 185, 191, 198, 201, 206, 211, 212, 224, 226, 228, 233, 234, 240, 241, 242, 243, 248, 249, 253, 259, 264, 265, 266, 267, 269, 277, 281, 286, 290, 291, 294, 295, 306, 311, 318, 320, 321, 322, 323, 329, 330, 331, 332, 335, 336, 338, 339, 342, 345, 346, 350, 351, 352, 353, 354, 360, 362, 363, 364, 366, 367, 374, 378, 380, 382, 384, 387, 388, 397, 398, 400, 401, 403, 405, 418, 419, 425, 426, 427, 428, 429, 430, 433, 438, 441, 449, 450, 451, 453, 454, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "time": [4, 5, 13, 20, 22, 23, 27, 28, 31, 33, 34, 41, 42, 45, 54, 63, 64, 68, 72, 73, 75, 76, 77, 79, 81, 85, 86, 87, 92, 93, 94, 95, 103, 104, 108, 113, 115, 116, 118, 124, 130, 131, 132, 134, 136, 137, 138, 139, 140, 142, 144, 148, 149, 155, 158, 161, 164, 165, 167, 171, 174, 175, 180, 184, 188, 191, 200, 201, 206, 207, 210, 211, 212, 214, 216, 223, 224, 228, 232, 233, 241, 243, 245, 246, 248, 252, 253, 255, 257, 259, 264, 265, 266, 267, 269, 274, 279, 280, 281, 282, 286, 290, 291, 292, 293, 294, 295, 297, 306, 307, 312, 316, 317, 318, 320, 323, 324, 326, 327, 328, 329, 330, 331, 335, 336, 338, 339, 340, 342, 346, 350, 351, 356, 357, 360, 362, 363, 365, 367, 370, 373, 374, 377, 378, 382, 384, 386, 387, 388, 393, 396, 398, 400, 403, 406, 408, 413, 414, 417, 418, 420, 421, 424, 425, 426, 427, 428, 430, 432, 433, 434, 438, 441, 447, 449, 450, 453, 454, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 475, 481], "py_major_vers": [4, 111], "1a2": 4, "py_minor_vers": [4, 66, 111, 479], "py_micro_vers": [4, 111], "py_release_level": [4, 111], "0xa": 4, "alpha": [4, 68, 80, 87, 111, 282, 286, 305, 316, 350, 353, 449, 460, 461, 466, 469, 482], "0xb": 4, "beta": [4, 68, 111, 316, 350, 449, 460, 466, 476, 482], "0xc": 4, "0xf": 4, "py_release_seri": [4, 111], "py_version_hex": [4, 57, 99, 470, 471, 479, 480, 481], "32": [4, 16, 25, 41, 42, 59, 68, 86, 94, 95, 97, 98, 104, 105, 107, 113, 119, 137, 139, 144, 151, 156, 164, 174, 184, 213, 224, 233, 248, 249, 257, 259, 260, 268, 281, 291, 301, 302, 304, 309, 316, 324, 331, 335, 341, 342, 345, 347, 350, 363, 364, 386, 396, 403, 404, 420, 421, 422, 426, 433, 444, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481], "big": [4, 25, 35, 42, 64, 68, 73, 78, 84, 95, 101, 105, 107, 130, 131, 139, 151, 156, 165, 174, 175, 189, 228, 257, 267, 293, 342, 345, 347, 350, 360, 387, 396, 403, 432, 450, 454, 462, 463, 464, 467, 469, 471, 473, 475, 481], "endian": [4, 25, 31, 42, 64, 84, 105, 107, 139, 151, 156, 174, 228, 257, 293, 345, 347, 350, 396, 403, 450, 475, 481], "order": [4, 7, 13, 28, 31, 33, 34, 43, 45, 58, 59, 63, 64, 68, 72, 73, 75, 76, 87, 92, 93, 94, 95, 98, 99, 100, 101, 104, 106, 107, 108, 110, 114, 116, 118, 124, 131, 137, 138, 143, 145, 147, 149, 151, 153, 156, 158, 165, 167, 175, 176, 177, 181, 182, 184, 185, 188, 189, 191, 194, 198, 200, 201, 203, 206, 211, 212, 216, 222, 223, 226, 228, 231, 234, 243, 245, 246, 248, 252, 253, 257, 259, 260, 264, 265, 267, 269, 273, 279, 281, 286, 291, 293, 294, 297, 300, 301, 302, 305, 306, 307, 311, 312, 313, 314, 316, 317, 323, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 342, 343, 346, 350, 351, 356, 360, 362, 363, 364, 367, 374, 379, 380, 382, 383, 384, 386, 387, 392, 393, 398, 400, 408, 409, 411, 413, 419, 420, 425, 426, 427, 429, 430, 431, 433, 440, 450, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "0x03": [4, 189], "16": [4, 5, 16, 34, 41, 47, 68, 78, 85, 89, 94, 95, 101, 105, 107, 115, 119, 139, 144, 148, 156, 171, 174, 175, 181, 191, 209, 219, 223, 224, 233, 234, 238, 257, 259, 260, 265, 281, 290, 291, 293, 312, 316, 317, 320, 324, 330, 335, 339, 341, 342, 343, 346, 350, 364, 367, 376, 396, 422, 424, 433, 438, 440, 442, 444, 447, 449, 450, 451, 454, 460, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "0x04": [4, 189, 426], "17": [4, 68, 94, 95, 101, 107, 137, 148, 181, 184, 188, 191, 206, 209, 221, 234, 255, 259, 290, 291, 317, 364, 376, 424, 442, 447, 461, 464, 466, 467, 469, 472, 473, 475, 476, 481, 482], "24": [4, 85, 94, 95, 98, 104, 107, 137, 139, 148, 181, 184, 191, 207, 234, 257, 259, 293, 317, 330, 341, 342, 345, 347, 364, 422, 433, 467, 471, 474, 475, 479, 480, 481], "0x01": [4, 189, 335], "25": [4, 85, 94, 95, 124, 148, 181, 184, 188, 219, 234, 257, 259, 281, 316, 317, 320, 333, 335, 338, 341, 342, 359, 376, 380, 382, 422, 440, 444, 446, 447, 449, 460, 462, 463, 464, 466, 467, 471, 472, 474, 476, 477, 478, 479, 480, 481], "28": [4, 33, 97, 101, 148, 184, 224, 234, 257, 338, 364, 382, 464, 465, 466, 470, 473, 479, 480, 481], "29": [4, 97, 101, 104, 148, 181, 184, 188, 234, 257, 259, 265, 316, 364, 463, 466, 470, 474, 479, 480, 481], "0x2": 4, "hexvers": [4, 80, 350, 448, 474], "0x030401a2": 4, "10": [4, 10, 14, 18, 20, 22, 23, 26, 28, 33, 34, 36, 39, 45, 47, 49, 52, 55, 57, 58, 61, 63, 64, 68, 73, 79, 84, 87, 92, 93, 94, 95, 97, 100, 101, 104, 106, 107, 108, 110, 111, 113, 114, 118, 119, 120, 121, 124, 127, 129, 132, 133, 134, 135, 136, 137, 141, 145, 147, 148, 149, 152, 153, 156, 158, 161, 167, 174, 175, 179, 181, 183, 184, 186, 189, 191, 207, 211, 212, 213, 214, 216, 218, 219, 221, 223, 224, 229, 231, 233, 234, 235, 239, 240, 248, 249, 250, 253, 256, 257, 259, 264, 265, 266, 272, 273, 276, 280, 281, 282, 284, 286, 289, 290, 291, 292, 294, 301, 302, 305, 306, 309, 310, 316, 317, 320, 323, 324, 328, 330, 335, 338, 339, 340, 341, 342, 343, 345, 346, 350, 353, 358, 360, 362, 363, 364, 365, 367, 370, 376, 379, 382, 383, 384, 386, 388, 392, 393, 405, 411, 413, 418, 420, 421, 423, 425, 426, 427, 428, 429, 430, 433, 438, 439, 440, 441, 442, 444, 446, 447, 449, 450, 451, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 480, 482], "0x030a00f0": 4, "if": [4, 5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 80, 84, 87, 88, 89, 92, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 115, 118, 120, 124, 127, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 164, 165, 167, 168, 171, 174, 175, 176, 177, 178, 179, 180, 182, 184, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 216, 218, 219, 221, 223, 224, 226, 228, 230, 231, 232, 233, 234, 238, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 253, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 278, 279, 280, 281, 285, 286, 287, 289, 290, 291, 293, 294, 295, 297, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 360, 362, 363, 364, 365, 367, 369, 371, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 438, 440, 441, 443, 446, 448, 449, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "py_vers": [4, 33, 57, 99, 174, 471, 473, 481], "const": [4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 26, 30, 31, 33, 34, 39, 40, 41, 43, 45, 48, 49, 51, 52, 53, 54, 58, 59, 60, 61, 63, 64, 66, 68, 73, 75, 79, 97, 99, 116, 290, 409, 475, 478, 479, 481], "unsign": [4, 5, 7, 9, 18, 25, 30, 31, 33, 34, 35, 39, 42, 51, 58, 61, 63, 64, 75, 119, 139, 144, 174, 291, 293, 297, 335, 342, 345, 347, 406, 408, 409, 422, 450, 462, 463, 465, 470, 474, 478, 481], "long": [4, 5, 6, 9, 18, 22, 23, 31, 33, 34, 35, 39, 41, 45, 58, 59, 61, 63, 64, 66, 68, 73, 75, 84, 85, 95, 97, 99, 100, 101, 103, 104, 105, 108, 110, 118, 119, 124, 137, 141, 144, 165, 167, 174, 175, 188, 191, 200, 206, 210, 213, 221, 223, 224, 226, 240, 243, 245, 246, 256, 257, 259, 265, 266, 281, 290, 291, 297, 301, 303, 304, 305, 306, 317, 319, 326, 328, 331, 333, 335, 336, 338, 339, 342, 345, 346, 350, 356, 360, 362, 363, 364, 367, 373, 374, 379, 393, 398, 403, 408, 409, 423, 425, 426, 428, 433, 453, 459, 460, 461, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "11": [4, 7, 13, 23, 25, 26, 31, 33, 34, 35, 43, 52, 57, 58, 59, 60, 61, 68, 72, 85, 87, 89, 92, 93, 94, 95, 99, 100, 101, 102, 104, 107, 110, 111, 115, 118, 120, 124, 125, 126, 133, 134, 136, 137, 139, 144, 148, 149, 150, 151, 156, 158, 164, 167, 171, 173, 174, 179, 181, 182, 184, 189, 191, 209, 210, 211, 213, 216, 219, 223, 224, 228, 229, 232, 233, 234, 239, 240, 243, 245, 247, 248, 250, 251, 253, 256, 257, 259, 260, 264, 265, 266, 267, 270, 273, 276, 279, 281, 285, 286, 289, 291, 293, 294, 295, 297, 299, 305, 316, 317, 319, 320, 328, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 345, 346, 347, 350, 352, 353, 356, 357, 358, 359, 360, 362, 364, 376, 377, 379, 381, 384, 386, 393, 395, 397, 398, 401, 405, 406, 410, 420, 421, 422, 423, 425, 426, 428, 429, 433, 434, 440, 444, 453, 454, 459, 462, 463, 464, 466, 468, 470, 472, 473, 475, 476, 477, 482], "includ": [4, 5, 7, 9, 13, 22, 23, 26, 27, 28, 31, 32, 33, 34, 49, 53, 55, 56, 58, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 79, 81, 84, 85, 86, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 115, 118, 120, 131, 135, 137, 141, 144, 150, 151, 152, 153, 155, 156, 157, 159, 161, 165, 171, 174, 175, 176, 179, 181, 184, 188, 189, 191, 194, 198, 200, 201, 203, 204, 205, 206, 209, 210, 211, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 268, 269, 271, 273, 274, 276, 279, 281, 286, 287, 290, 291, 294, 295, 297, 303, 305, 306, 307, 309, 310, 312, 317, 320, 321, 328, 329, 330, 331, 332, 333, 335, 338, 339, 340, 342, 343, 345, 346, 350, 353, 354, 356, 357, 360, 362, 363, 364, 367, 371, 373, 374, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 408, 409, 411, 413, 414, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 447, 449, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "patchlevel": [4, 301, 481], "these": [5, 7, 9, 11, 13, 18, 23, 25, 28, 31, 33, 34, 41, 42, 45, 49, 51, 58, 59, 63, 64, 66, 72, 73, 75, 76, 77, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 113, 118, 124, 130, 131, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 156, 157, 159, 161, 165, 167, 174, 175, 176, 179, 181, 182, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 203, 204, 205, 206, 207, 211, 212, 213, 219, 223, 224, 228, 233, 240, 241, 243, 245, 248, 249, 250, 253, 256, 257, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 280, 281, 286, 290, 291, 293, 294, 295, 297, 300, 305, 306, 310, 312, 317, 318, 319, 320, 322, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 363, 364, 367, 373, 376, 378, 379, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 406, 408, 409, 411, 412, 413, 414, 417, 418, 420, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "are": [5, 7, 9, 11, 13, 18, 22, 23, 25, 28, 31, 33, 34, 39, 40, 41, 42, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 89, 92, 93, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 120, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 159, 161, 164, 165, 167, 168, 171, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 223, 224, 226, 228, 231, 232, 233, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 280, 281, 285, 286, 288, 291, 293, 294, 295, 297, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 311, 312, 314, 317, 318, 319, 320, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 367, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 440, 444, 447, 449, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481], "use": [5, 7, 9, 10, 11, 13, 17, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 79, 89, 91, 92, 93, 95, 99, 107, 108, 110, 112, 113, 115, 117, 118, 120, 121, 122, 124, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 144, 145, 147, 150, 151, 152, 153, 155, 156, 157, 159, 162, 164, 165, 166, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 223, 224, 226, 228, 232, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 276, 278, 279, 282, 283, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 303, 305, 307, 309, 310, 311, 313, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 339, 340, 341, 342, 343, 344, 345, 350, 352, 353, 354, 356, 357, 358, 359, 360, 362, 364, 366, 367, 371, 372, 374, 376, 378, 379, 380, 383, 384, 385, 387, 388, 392, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 424, 425, 427, 428, 429, 430, 432, 433, 434, 438, 440, 441, 444, 447, 451, 453, 454, 457, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482], "when": [5, 7, 9, 10, 11, 13, 22, 23, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 42, 45, 47, 49, 50, 54, 58, 59, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 84, 92, 93, 95, 99, 100, 101, 103, 104, 107, 108, 110, 112, 113, 115, 118, 122, 124, 126, 127, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 147, 149, 150, 151, 152, 153, 155, 156, 165, 167, 168, 171, 174, 175, 176, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 219, 221, 223, 224, 226, 228, 230, 232, 233, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 273, 274, 276, 279, 281, 285, 286, 290, 291, 293, 294, 295, 297, 299, 300, 302, 303, 306, 307, 309, 311, 312, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 363, 364, 367, 369, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 430, 432, 433, 434, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "creat": [5, 7, 9, 11, 13, 16, 17, 22, 23, 24, 25, 27, 28, 31, 34, 39, 40, 42, 43, 45, 49, 51, 55, 58, 59, 60, 63, 66, 67, 68, 73, 75, 76, 77, 88, 92, 93, 99, 100, 103, 104, 105, 107, 108, 113, 115, 118, 123, 126, 127, 130, 131, 132, 133, 134, 135, 136, 142, 147, 149, 151, 155, 156, 158, 159, 161, 165, 167, 168, 172, 174, 175, 179, 181, 182, 184, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 201, 203, 205, 206, 211, 213, 216, 219, 223, 224, 228, 232, 234, 239, 240, 243, 245, 246, 248, 249, 250, 253, 256, 257, 259, 264, 265, 266, 267, 268, 269, 270, 276, 279, 280, 281, 282, 283, 286, 291, 294, 295, 296, 297, 300, 303, 305, 306, 310, 312, 317, 320, 321, 326, 328, 330, 332, 333, 335, 336, 339, 340, 341, 342, 343, 345, 346, 350, 352, 356, 358, 360, 362, 363, 367, 369, 371, 373, 374, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 393, 395, 397, 400, 401, 403, 408, 409, 411, 412, 413, 414, 415, 417, 418, 420, 421, 423, 424, 425, 427, 428, 430, 432, 433, 434, 438, 439, 440, 449, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481], "your": [5, 22, 33, 59, 63, 68, 72, 73, 75, 76, 77, 79, 84, 85, 89, 92, 94, 95, 99, 100, 104, 107, 108, 110, 116, 118, 131, 139, 150, 157, 165, 175, 179, 181, 189, 191, 194, 196, 198, 199, 200, 203, 205, 211, 220, 224, 232, 233, 240, 241, 242, 243, 244, 245, 248, 253, 256, 260, 264, 265, 266, 267, 269, 276, 281, 291, 294, 295, 297, 303, 306, 311, 317, 318, 326, 327, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 352, 357, 359, 360, 362, 363, 364, 367, 369, 373, 380, 382, 384, 386, 387, 388, 392, 393, 398, 400, 408, 409, 411, 413, 418, 419, 420, 423, 424, 432, 434, 439, 440, 447, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "own": [5, 7, 9, 22, 23, 26, 28, 33, 45, 59, 61, 63, 64, 68, 72, 73, 76, 77, 84, 85, 92, 93, 94, 95, 99, 100, 101, 107, 108, 110, 116, 118, 124, 131, 135, 137, 149, 165, 167, 179, 184, 191, 194, 198, 201, 203, 205, 223, 228, 241, 245, 248, 253, 256, 265, 266, 267, 269, 281, 290, 291, 294, 295, 297, 306, 317, 319, 324, 329, 330, 331, 335, 338, 339, 342, 343, 346, 350, 356, 360, 362, 363, 367, 382, 386, 392, 393, 397, 400, 401, 408, 411, 413, 418, 424, 426, 428, 430, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 476, 478, 480, 481], "extens": [5, 7, 11, 13, 23, 27, 34, 35, 42, 45, 50, 57, 61, 63, 66, 68, 72, 74, 79, 84, 85, 87, 91, 92, 94, 96, 103, 104, 116, 137, 141, 150, 165, 171, 174, 175, 179, 181, 182, 187, 188, 191, 192, 198, 201, 206, 216, 218, 233, 239, 240, 243, 244, 246, 248, 249, 252, 253, 260, 267, 269, 271, 274, 278, 286, 290, 291, 295, 297, 303, 306, 310, 312, 317, 328, 329, 330, 331, 333, 335, 338, 339, 342, 350, 352, 353, 356, 360, 363, 366, 367, 373, 380, 382, 383, 384, 386, 393, 400, 403, 408, 409, 412, 413, 417, 419, 420, 426, 428, 430, 438, 443, 449, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 477, 478, 479, 480, 481], "method": [5, 7, 10, 16, 21, 22, 23, 24, 25, 28, 33, 34, 39, 40, 42, 45, 46, 49, 53, 54, 55, 56, 58, 61, 62, 63, 66, 68, 72, 74, 75, 80, 81, 86, 87, 92, 95, 100, 101, 103, 107, 108, 110, 113, 114, 115, 116, 123, 126, 128, 129, 130, 131, 134, 135, 136, 137, 140, 142, 144, 145, 147, 149, 151, 152, 153, 155, 156, 157, 159, 161, 162, 164, 165, 166, 168, 173, 174, 175, 177, 179, 180, 181, 182, 184, 185, 188, 189, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 213, 214, 216, 217, 219, 220, 221, 223, 224, 225, 228, 232, 233, 235, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 256, 257, 259, 260, 263, 265, 266, 267, 268, 269, 271, 274, 276, 277, 279, 289, 291, 293, 295, 296, 297, 299, 300, 303, 305, 306, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 323, 326, 327, 328, 329, 333, 336, 339, 341, 343, 345, 346, 347, 350, 356, 357, 358, 360, 362, 363, 367, 371, 372, 373, 374, 376, 379, 380, 383, 384, 385, 386, 392, 393, 395, 397, 401, 403, 406, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 425, 427, 430, 431, 433, 434, 439, 440, 441, 442, 443, 445, 447, 449, 450, 453, 461, 462, 463, 466, 467, 469, 470, 471, 472, 473, 474, 475, 479, 481, 482], "addit": [5, 7, 9, 23, 31, 33, 41, 42, 45, 58, 61, 63, 66, 68, 73, 75, 76, 84, 94, 95, 98, 99, 100, 101, 104, 107, 110, 113, 115, 118, 124, 137, 139, 149, 155, 156, 165, 167, 171, 174, 175, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 191, 192, 194, 195, 197, 200, 201, 203, 204, 206, 211, 213, 216, 219, 223, 224, 228, 232, 233, 240, 241, 243, 245, 248, 249, 253, 255, 256, 257, 259, 260, 264, 265, 266, 268, 269, 273, 274, 276, 281, 283, 290, 291, 294, 297, 303, 305, 306, 311, 312, 317, 319, 328, 329, 330, 331, 332, 333, 335, 338, 339, 340, 341, 343, 345, 346, 350, 356, 357, 360, 362, 363, 364, 367, 373, 374, 376, 382, 384, 385, 386, 387, 392, 393, 397, 398, 400, 403, 406, 408, 409, 411, 412, 413, 414, 415, 417, 420, 424, 425, 426, 427, 428, 430, 432, 433, 434, 442, 453, 454, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481], "inform": [5, 7, 11, 16, 23, 25, 28, 33, 34, 42, 45, 51, 58, 60, 63, 64, 66, 68, 72, 73, 75, 77, 85, 86, 89, 93, 95, 98, 100, 104, 107, 108, 110, 113, 116, 118, 121, 124, 131, 138, 141, 142, 149, 150, 152, 156, 161, 167, 174, 175, 179, 181, 184, 186, 188, 189, 191, 193, 194, 195, 199, 201, 203, 205, 207, 211, 213, 214, 221, 223, 224, 226, 231, 233, 238, 240, 241, 243, 245, 246, 248, 249, 250, 252, 253, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 274, 276, 281, 286, 290, 294, 297, 300, 303, 305, 306, 309, 310, 311, 312, 313, 317, 318, 319, 326, 329, 330, 331, 333, 335, 336, 338, 339, 340, 342, 345, 346, 350, 356, 359, 360, 363, 364, 367, 371, 373, 374, 378, 379, 380, 382, 384, 386, 387, 389, 392, 393, 397, 400, 403, 405, 408, 409, 410, 411, 412, 413, 414, 420, 421, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 441, 446, 450, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "exampl": [5, 7, 22, 23, 33, 34, 35, 42, 45, 51, 58, 61, 63, 64, 66, 68, 72, 73, 74, 75, 77, 84, 85, 92, 94, 95, 98, 99, 100, 102, 103, 104, 107, 108, 110, 115, 117, 118, 124, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 147, 149, 152, 156, 157, 158, 161, 168, 171, 173, 174, 175, 179, 180, 181, 182, 184, 185, 189, 190, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 228, 233, 240, 241, 242, 243, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 278, 280, 281, 282, 283, 286, 291, 293, 294, 295, 297, 303, 305, 306, 309, 311, 312, 313, 316, 318, 319, 324, 327, 329, 331, 332, 333, 335, 336, 338, 339, 342, 343, 344, 345, 346, 350, 351, 353, 354, 357, 360, 361, 362, 363, 364, 367, 373, 374, 376, 378, 380, 382, 383, 384, 385, 386, 387, 388, 392, 396, 398, 400, 401, 405, 406, 408, 409, 410, 411, 413, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 438, 442, 449, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "avail": [5, 7, 11, 13, 22, 23, 25, 26, 27, 33, 34, 39, 42, 45, 55, 58, 59, 61, 64, 66, 68, 71, 72, 73, 75, 77, 84, 85, 92, 94, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 124, 131, 134, 135, 137, 149, 153, 156, 161, 165, 167, 168, 171, 174, 175, 180, 182, 184, 189, 193, 205, 208, 210, 211, 212, 213, 216, 221, 223, 224, 227, 228, 231, 233, 240, 243, 245, 246, 248, 249, 250, 253, 255, 256, 257, 260, 264, 265, 266, 267, 269, 273, 274, 276, 280, 281, 282, 285, 286, 290, 291, 293, 294, 295, 297, 302, 303, 306, 311, 312, 313, 316, 317, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 350, 352, 354, 356, 357, 359, 360, 363, 364, 367, 371, 372, 373, 374, 376, 379, 380, 382, 383, 384, 386, 387, 388, 393, 397, 400, 401, 403, 406, 408, 409, 411, 412, 413, 414, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "in": [5, 6, 7, 9, 10, 11, 13, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 66, 68, 71, 74, 75, 76, 78, 80, 87, 89, 91, 92, 93, 94, 97, 98, 102, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 126, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 161, 162, 164, 165, 166, 168, 171, 173, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 230, 231, 232, 233, 234, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 288, 291, 293, 295, 296, 297, 300, 301, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 341, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 364, 365, 366, 367, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 385, 386, 387, 388, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 438, 439, 440, 441, 442, 444, 447, 448, 449, 450, 453, 454, 456, 457, 462, 463, 465, 466, 467, 469, 473, 474, 481, 482], "thefirst": [5, 13, 22, 23, 25, 27, 31, 33, 34, 37, 39, 41, 42, 45, 47, 49, 51, 54, 58, 59, 60, 61, 63, 64, 67, 72, 73, 75, 76, 77, 78, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 115, 118, 124, 130, 133, 137, 138, 139, 142, 145, 149, 151, 153, 155, 156, 158, 165, 167, 174, 175, 176, 181, 182, 184, 186, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 211, 212, 213, 216, 219, 223, 224, 226, 228, 233, 240, 241, 242, 245, 246, 253, 256, 257, 259, 263, 264, 265, 266, 267, 269, 270, 273, 274, 276, 279, 281, 282, 285, 286, 289, 290, 291, 293, 295, 297, 299, 300, 305, 306, 311, 312, 317, 318, 322, 323, 326, 328, 329, 330, 331, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 352, 353, 354, 356, 357, 359, 360, 362, 364, 367, 371, 373, 374, 375, 376, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 398, 400, 403, 405, 406, 408, 411, 412, 417, 420, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 440, 444, 447, 450, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "three": [5, 7, 23, 31, 35, 42, 58, 63, 73, 75, 76, 77, 84, 85, 93, 94, 100, 101, 104, 107, 115, 118, 131, 132, 137, 156, 158, 159, 173, 174, 175, 179, 181, 184, 187, 188, 189, 191, 192, 194, 198, 203, 205, 209, 211, 214, 223, 224, 241, 243, 246, 248, 264, 265, 266, 267, 269, 276, 281, 286, 290, 291, 293, 294, 295, 297, 305, 306, 312, 316, 317, 326, 330, 331, 332, 335, 338, 339, 342, 345, 346, 350, 351, 356, 357, 364, 367, 371, 374, 382, 383, 384, 386, 387, 388, 393, 397, 401, 408, 412, 413, 417, 423, 425, 426, 428, 429, 430, 432, 433, 434, 439, 449, 450, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 478, 479, 481], "of": [5, 6, 7, 9, 11, 13, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 87, 89, 91, 92, 104, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 121, 122, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 168, 171, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 278, 279, 280, 282, 285, 286, 288, 290, 293, 294, 295, 296, 299, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 351, 353, 354, 356, 357, 359, 360, 362, 363, 364, 365, 367, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 383, 385, 386, 387, 392, 393, 395, 396, 400, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 421, 423, 424, 425, 428, 429, 430, 431, 432, 434, 438, 439, 440, 441, 442, 444, 446, 447, 448, 449, 450, 453, 455, 456, 457, 461, 462, 463, 464, 465, 466, 469, 470, 471, 473, 474, 480, 481, 482], "describ": [5, 7, 13, 23, 31, 42, 45, 49, 50, 51, 58, 59, 60, 61, 63, 66, 68, 72, 73, 75, 77, 92, 93, 94, 95, 98, 99, 100, 101, 107, 108, 110, 113, 115, 118, 124, 126, 135, 141, 142, 149, 150, 156, 161, 165, 167, 174, 175, 178, 179, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 200, 201, 206, 211, 214, 215, 220, 221, 222, 223, 228, 233, 240, 242, 243, 244, 245, 246, 247, 249, 253, 257, 258, 264, 265, 266, 267, 269, 274, 278, 279, 286, 288, 290, 291, 293, 296, 297, 305, 306, 310, 312, 313, 317, 319, 320, 322, 326, 330, 333, 334, 335, 338, 339, 340, 342, 343, 345, 346, 350, 352, 356, 363, 367, 373, 374, 381, 382, 384, 386, 387, 392, 393, 395, 403, 404, 406, 408, 412, 413, 414, 417, 420, 421, 424, 425, 426, 428, 430, 432, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pyarg_parsetupl": [5, 7, 48, 57, 58, 72, 73, 75, 77, 99, 428, 460, 462, 463, 465, 466, 470, 472, 474, 479, 481], "pyarg_parsetupleandkeyword": [5, 57, 58, 73, 75, 76, 464, 477, 481], "pyarg_pars": [5, 57, 467, 473, 481], "all": [5, 7, 9, 17, 22, 23, 25, 28, 31, 33, 34, 35, 39, 42, 45, 47, 55, 58, 59, 60, 61, 63, 64, 67, 68, 72, 73, 75, 76, 77, 84, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 110, 115, 118, 122, 124, 126, 131, 132, 135, 136, 137, 138, 139, 141, 142, 144, 145, 147, 149, 151, 153, 155, 156, 157, 158, 159, 161, 162, 165, 167, 168, 171, 174, 175, 176, 179, 181, 182, 183, 184, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 223, 224, 226, 228, 231, 232, 233, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 282, 285, 286, 291, 293, 294, 295, 297, 300, 303, 306, 307, 309, 310, 311, 312, 314, 320, 322, 323, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 367, 373, 374, 376, 378, 379, 382, 383, 384, 385, 386, 387, 388, 392, 393, 398, 400, 401, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 438, 439, 440, 447, 448, 449, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 478, 479, 480, 481], "which": [5, 7, 9, 13, 18, 22, 23, 25, 27, 28, 31, 33, 34, 39, 40, 41, 42, 43, 45, 49, 51, 53, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 104, 107, 108, 113, 115, 118, 124, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 151, 152, 153, 155, 156, 157, 159, 161, 165, 167, 168, 171, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 216, 218, 219, 221, 223, 224, 226, 228, 232, 233, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 280, 281, 286, 290, 291, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 317, 318, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 344, 345, 346, 350, 351, 352, 354, 356, 357, 359, 360, 362, 363, 364, 367, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 449, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "to": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 87, 89, 91, 92, 93, 95, 98, 104, 105, 108, 110, 112, 113, 115, 116, 118, 120, 122, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 230, 231, 232, 233, 234, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 265, 267, 268, 269, 270, 271, 273, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 293, 295, 296, 299, 300, 302, 303, 305, 307, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 342, 343, 344, 345, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 385, 386, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 438, 439, 440, 441, 444, 446, 447, 448, 449, 450, 453, 454, 455, 457, 459, 461, 462, 470, 471, 481, 482], "tell": [5, 18, 31, 33, 68, 73, 75, 92, 95, 101, 103, 104, 110, 115, 118, 124, 149, 151, 157, 191, 206, 220, 233, 256, 265, 267, 276, 281, 290, 293, 297, 330, 331, 335, 336, 338, 339, 342, 347, 367, 378, 384, 393, 399, 420, 444, 460, 462, 463, 464, 466, 476, 477, 478, 481], "about": [5, 7, 13, 22, 23, 25, 27, 28, 42, 51, 63, 64, 66, 68, 71, 72, 73, 75, 76, 77, 80, 84, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 118, 124, 126, 131, 139, 141, 142, 152, 153, 155, 156, 167, 174, 176, 179, 181, 184, 185, 188, 189, 192, 193, 195, 199, 201, 205, 207, 211, 214, 223, 233, 241, 243, 245, 248, 253, 259, 263, 265, 266, 267, 268, 269, 273, 276, 277, 281, 286, 290, 291, 294, 295, 297, 305, 306, 310, 317, 318, 319, 320, 326, 328, 330, 331, 333, 335, 337, 338, 339, 340, 342, 345, 346, 350, 351, 356, 357, 360, 367, 374, 379, 382, 384, 386, 387, 388, 392, 393, 398, 400, 403, 406, 408, 410, 412, 413, 414, 420, 421, 423, 425, 426, 427, 428, 430, 432, 434, 453, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "expect": [5, 9, 23, 28, 39, 45, 58, 63, 66, 68, 73, 75, 76, 77, 84, 85, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 118, 124, 125, 131, 132, 137, 149, 151, 156, 165, 167, 174, 175, 179, 184, 185, 186, 188, 189, 191, 195, 201, 211, 219, 223, 228, 233, 240, 241, 243, 248, 249, 251, 253, 259, 260, 264, 265, 267, 269, 276, 281, 290, 291, 297, 300, 307, 310, 326, 328, 329, 331, 335, 338, 339, 341, 342, 346, 350, 352, 356, 357, 360, 364, 374, 376, 382, 383, 384, 387, 388, 392, 393, 395, 406, 411, 413, 414, 417, 423, 426, 427, 428, 429, 430, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "same": [5, 6, 7, 9, 13, 18, 20, 22, 23, 25, 26, 27, 28, 33, 34, 39, 40, 41, 42, 45, 46, 49, 51, 54, 56, 58, 59, 60, 61, 63, 64, 66, 68, 72, 73, 75, 76, 79, 84, 92, 93, 94, 95, 99, 100, 103, 104, 107, 108, 110, 113, 118, 124, 130, 131, 133, 135, 136, 137, 138, 139, 142, 149, 152, 155, 156, 161, 165, 167, 168, 171, 174, 175, 176, 179, 181, 182, 184, 185, 188, 189, 191, 192, 193, 194, 199, 200, 201, 203, 205, 206, 207, 209, 211, 213, 214, 216, 218, 219, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 245, 246, 248, 250, 251, 253, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 274, 276, 279, 280, 281, 282, 286, 290, 291, 293, 294, 295, 297, 303, 305, 306, 307, 310, 311, 312, 317, 318, 319, 320, 323, 326, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 351, 352, 353, 356, 357, 359, 360, 362, 363, 364, 367, 369, 372, 373, 374, 376, 379, 382, 383, 384, 385, 386, 387, 392, 393, 397, 398, 400, 401, 403, 408, 411, 413, 417, 418, 419, 420, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 480, 481], "syntax": [5, 7, 68, 73, 79, 80, 85, 95, 98, 100, 101, 104, 107, 108, 110, 116, 124, 137, 149, 155, 157, 165, 166, 174, 179, 184, 201, 209, 211, 223, 228, 245, 252, 253, 260, 262, 264, 266, 271, 281, 290, 293, 295, 312, 317, 329, 338, 342, 343, 350, 360, 367, 374, 379, 380, 384, 386, 392, 393, 415, 417, 425, 426, 427, 428, 429, 430, 432, 433, 434, 443, 447, 453, 455, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 473, 475, 478, 479, 480, 481, 482], "for": [5, 7, 9, 11, 13, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 53, 54, 55, 56, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 86, 87, 89, 91, 93, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 148, 149, 150, 151, 155, 156, 157, 158, 161, 164, 165, 168, 171, 173, 176, 179, 180, 181, 182, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 223, 224, 228, 230, 231, 232, 233, 234, 238, 240, 242, 243, 244, 245, 246, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 288, 289, 291, 293, 294, 295, 296, 299, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 322, 323, 324, 327, 328, 329, 330, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 357, 359, 361, 362, 363, 364, 365, 367, 369, 371, 373, 374, 375, 378, 379, 380, 385, 386, 387, 388, 392, 393, 395, 397, 400, 401, 402, 403, 405, 406, 408, 409, 415, 417, 418, 419, 420, 421, 423, 424, 427, 429, 431, 432, 433, 434, 438, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 460, 461, 462, 468, 470, 471, 481, 482], "each": [5, 7, 13, 22, 23, 28, 31, 33, 34, 37, 40, 42, 45, 59, 61, 63, 73, 75, 76, 77, 79, 84, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 110, 115, 118, 124, 130, 131, 136, 137, 139, 141, 147, 149, 150, 151, 152, 153, 156, 157, 161, 164, 165, 167, 174, 175, 177, 179, 181, 182, 184, 188, 189, 191, 193, 194, 195, 200, 201, 202, 203, 206, 210, 212, 214, 216, 223, 224, 226, 228, 233, 240, 241, 242, 243, 245, 246, 247, 248, 249, 253, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 279, 281, 282, 286, 290, 291, 293, 294, 295, 297, 300, 303, 305, 306, 307, 310, 311, 312, 316, 317, 318, 319, 320, 323, 327, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 342, 344, 345, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 367, 371, 373, 374, 376, 378, 379, 382, 383, 384, 385, 386, 387, 392, 393, 397, 398, 400, 403, 406, 408, 409, 411, 413, 415, 417, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 438, 440, 449, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 481], "consist": [5, 7, 9, 23, 31, 33, 56, 63, 64, 66, 73, 85, 92, 94, 95, 100, 101, 103, 115, 139, 144, 149, 151, 156, 165, 175, 176, 181, 188, 189, 191, 194, 201, 203, 205, 206, 207, 226, 240, 241, 245, 246, 248, 250, 257, 260, 264, 266, 267, 268, 273, 281, 291, 297, 299, 306, 317, 323, 329, 333, 336, 338, 342, 344, 345, 346, 350, 351, 360, 362, 367, 373, 374, 379, 382, 384, 386, 393, 408, 423, 424, 425, 426, 428, 430, 433, 454, 457, 459, 460, 461, 462, 463, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "zero": [5, 7, 18, 23, 25, 26, 28, 31, 33, 34, 35, 36, 39, 42, 45, 49, 58, 59, 61, 63, 64, 66, 68, 73, 75, 76, 84, 85, 87, 94, 98, 99, 100, 101, 104, 107, 118, 124, 131, 137, 139, 141, 144, 152, 153, 156, 158, 174, 175, 179, 181, 184, 188, 189, 191, 194, 207, 211, 223, 224, 232, 233, 240, 246, 248, 256, 257, 259, 267, 269, 273, 276, 281, 286, 290, 291, 295, 297, 303, 312, 317, 318, 326, 330, 331, 333, 335, 338, 339, 340, 342, 343, 345, 346, 350, 356, 359, 362, 363, 364, 374, 382, 386, 395, 403, 408, 411, 420, 426, 427, 428, 429, 432, 433, 434, 439, 441, 446, 453, 460, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "or": [5, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 39, 40, 41, 42, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 86, 87, 89, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 107, 108, 110, 111, 113, 115, 116, 120, 121, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 147, 149, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 165, 166, 167, 168, 171, 173, 175, 176, 177, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 221, 223, 224, 226, 228, 230, 231, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 280, 281, 282, 285, 286, 289, 290, 291, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 343, 344, 345, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 365, 367, 369, 373, 374, 375, 376, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 440, 441, 443, 446, 447, 449, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "more": [5, 11, 13, 22, 23, 24, 25, 27, 33, 34, 42, 45, 49, 51, 56, 58, 60, 61, 63, 64, 66, 68, 71, 72, 73, 74, 76, 77, 79, 84, 85, 86, 93, 94, 95, 99, 100, 103, 107, 108, 110, 113, 118, 121, 124, 131, 135, 137, 138, 139, 141, 142, 144, 147, 149, 151, 153, 155, 156, 158, 159, 161, 165, 167, 168, 174, 175, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 211, 213, 216, 218, 220, 221, 223, 224, 226, 228, 230, 232, 233, 240, 241, 243, 245, 246, 248, 249, 250, 253, 255, 256, 257, 258, 259, 260, 265, 266, 267, 268, 269, 273, 274, 279, 281, 282, 286, 290, 291, 293, 295, 297, 299, 300, 303, 305, 306, 309, 310, 312, 316, 317, 319, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 351, 352, 353, 356, 357, 359, 360, 362, 363, 364, 367, 372, 373, 374, 375, 379, 380, 384, 386, 387, 392, 393, 397, 398, 400, 403, 404, 408, 409, 410, 411, 413, 420, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 439, 441, 446, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481], "unit": [5, 64, 73, 85, 87, 94, 95, 98, 100, 101, 107, 112, 176, 181, 185, 191, 223, 224, 273, 306, 323, 335, 339, 342, 343, 360, 364, 365, 367, 374, 382, 386, 387, 424, 426, 427, 461, 466, 472, 474, 476, 479, 480, 481], "one": [5, 7, 9, 11, 13, 23, 24, 25, 28, 31, 33, 34, 42, 43, 45, 47, 49, 51, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 84, 87, 89, 91, 92, 93, 94, 95, 98, 100, 101, 103, 104, 107, 108, 110, 113, 115, 117, 118, 120, 124, 130, 131, 133, 135, 136, 137, 139, 141, 142, 144, 149, 151, 152, 153, 155, 156, 158, 159, 161, 164, 165, 167, 168, 171, 173, 174, 175, 179, 181, 184, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 211, 213, 214, 216, 219, 223, 224, 226, 228, 230, 232, 233, 240, 241, 243, 245, 246, 248, 249, 253, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 280, 281, 282, 286, 290, 291, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 309, 312, 316, 317, 318, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 350, 352, 353, 356, 357, 359, 360, 362, 363, 364, 367, 371, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 403, 405, 406, 408, 409, 410, 411, 413, 417, 420, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 438, 439, 449, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "object": [5, 6, 7, 11, 13, 14, 16, 20, 22, 25, 26, 28, 31, 32, 33, 34, 35, 37, 39, 40, 41, 43, 45, 46, 47, 53, 54, 55, 59, 66, 67, 68, 72, 73, 74, 76, 77, 78, 80, 87, 92, 95, 102, 103, 104, 106, 107, 108, 113, 114, 115, 116, 117, 119, 123, 127, 131, 134, 135, 136, 139, 140, 141, 142, 144, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 205, 207, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 231, 232, 235, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 259, 262, 267, 268, 269, 271, 272, 274, 276, 280, 283, 286, 288, 289, 290, 292, 294, 295, 296, 300, 302, 303, 305, 306, 308, 311, 312, 313, 320, 321, 322, 327, 329, 330, 331, 333, 334, 335, 337, 339, 343, 345, 347, 349, 350, 353, 356, 358, 359, 360, 361, 362, 364, 367, 369, 372, 376, 378, 379, 380, 383, 385, 386, 388, 392, 395, 397, 398, 399, 402, 404, 405, 409, 410, 411, 412, 413, 415, 418, 419, 421, 422, 423, 424, 425, 427, 428, 430, 431, 434, 438, 439, 440, 444, 447, 448, 450, 453, 454, 457, 459, 460, 461, 462, 465, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482], "it": [5, 6, 7, 9, 10, 11, 13, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 110, 113, 115, 118, 120, 124, 127, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 164, 165, 167, 168, 171, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 216, 218, 219, 223, 224, 226, 228, 231, 232, 233, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 280, 281, 285, 286, 291, 293, 294, 295, 297, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 367, 369, 373, 374, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 438, 439, 440, 447, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "is": [5, 6, 7, 9, 10, 11, 13, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 89, 93, 94, 95, 98, 99, 101, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 118, 120, 122, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 164, 165, 167, 168, 171, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 289, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 303, 305, 307, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 365, 367, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 440, 441, 444, 447, 449, 450, 453, 454, 457, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "usual": [5, 7, 23, 28, 33, 34, 39, 45, 47, 61, 63, 64, 73, 75, 84, 85, 92, 93, 94, 95, 98, 99, 101, 103, 104, 107, 108, 110, 113, 118, 124, 131, 144, 147, 149, 151, 171, 174, 184, 188, 191, 192, 194, 196, 200, 203, 211, 219, 223, 224, 228, 241, 243, 245, 246, 248, 249, 253, 256, 257, 259, 266, 267, 270, 273, 281, 286, 290, 291, 293, 295, 297, 302, 317, 319, 326, 330, 331, 332, 335, 336, 337, 338, 339, 342, 346, 350, 356, 360, 364, 367, 373, 374, 379, 382, 384, 386, 387, 388, 393, 400, 411, 419, 420, 421, 425, 426, 428, 434, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 475, 476, 477, 479, 481], "singl": [5, 7, 9, 16, 22, 23, 25, 31, 33, 39, 48, 51, 58, 59, 61, 63, 64, 66, 67, 68, 71, 73, 76, 79, 85, 87, 92, 94, 95, 98, 99, 103, 104, 107, 108, 118, 120, 124, 142, 144, 149, 155, 156, 157, 161, 164, 165, 174, 175, 176, 179, 181, 184, 187, 188, 189, 191, 193, 194, 200, 201, 205, 206, 211, 216, 218, 221, 223, 224, 228, 232, 233, 240, 241, 245, 246, 248, 249, 253, 256, 257, 259, 263, 265, 266, 267, 268, 269, 273, 276, 279, 281, 282, 286, 290, 291, 295, 297, 300, 303, 305, 306, 312, 313, 316, 317, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 353, 356, 360, 362, 364, 367, 369, 374, 376, 378, 379, 384, 386, 387, 392, 393, 398, 400, 406, 408, 411, 413, 415, 417, 419, 420, 425, 426, 428, 429, 430, 432, 433, 434, 439, 442, 447, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481], "charact": [5, 9, 16, 18, 33, 34, 39, 42, 49, 59, 68, 73, 84, 85, 87, 92, 101, 107, 116, 118, 119, 124, 129, 135, 141, 143, 144, 149, 153, 156, 165, 171, 173, 174, 176, 181, 182, 184, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 211, 212, 218, 223, 226, 229, 237, 242, 243, 245, 246, 248, 249, 252, 256, 263, 264, 266, 269, 270, 280, 281, 283, 286, 291, 294, 297, 305, 312, 317, 318, 319, 321, 329, 330, 333, 335, 336, 338, 340, 342, 343, 344, 346, 350, 356, 357, 359, 360, 362, 364, 367, 373, 374, 385, 386, 392, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 424, 428, 429, 432, 433, 434, 447, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "parenthes": [5, 63, 68, 73, 79, 85, 95, 101, 104, 155, 189, 246, 248, 264, 306, 317, 342, 397, 425, 426, 427, 429, 432, 433, 434, 440, 447, 460, 464, 465, 466, 467, 470, 472, 476, 478, 479, 481], "with": [5, 7, 9, 10, 11, 13, 22, 23, 24, 25, 27, 28, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 45, 47, 49, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 68, 72, 73, 74, 75, 76, 77, 87, 89, 91, 93, 95, 96, 97, 100, 103, 104, 105, 107, 108, 110, 111, 113, 115, 116, 117, 118, 120, 122, 123, 126, 130, 131, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 147, 149, 151, 152, 153, 155, 157, 158, 159, 161, 162, 164, 165, 168, 171, 173, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 231, 232, 233, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 262, 264, 266, 267, 268, 269, 270, 271, 273, 274, 276, 279, 280, 281, 282, 286, 288, 289, 290, 291, 293, 294, 295, 296, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 364, 367, 369, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 392, 393, 397, 398, 399, 401, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 417, 418, 421, 423, 424, 428, 429, 430, 431, 432, 433, 434, 436, 439, 440, 441, 442, 444, 447, 449, 450, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 475, 477, 480, 481, 482], "few": [5, 33, 73, 85, 94, 95, 99, 100, 101, 104, 107, 118, 139, 153, 156, 165, 168, 171, 174, 175, 179, 181, 184, 188, 191, 196, 198, 221, 228, 245, 267, 279, 281, 290, 297, 317, 332, 333, 335, 339, 342, 345, 351, 360, 367, 379, 386, 387, 392, 393, 426, 432, 433, 460, 461, 462, 463, 465, 466, 467, 468, 472, 473, 475, 476, 477, 479, 481], "that": [5, 7, 9, 13, 17, 22, 23, 25, 26, 27, 28, 31, 33, 34, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 51, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 84, 92, 98, 99, 100, 103, 104, 107, 108, 110, 112, 113, 115, 118, 120, 122, 123, 124, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 165, 167, 168, 171, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 226, 228, 230, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 263, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 281, 282, 285, 286, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 367, 369, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 440, 441, 444, 450, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "not": [5, 7, 9, 11, 13, 17, 22, 23, 25, 26, 27, 28, 31, 33, 34, 35, 39, 42, 43, 45, 46, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 80, 84, 87, 89, 92, 93, 94, 95, 98, 100, 101, 103, 104, 105, 107, 108, 110, 112, 113, 115, 118, 120, 122, 123, 124, 126, 127, 130, 131, 134, 135, 137, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 165, 167, 168, 171, 174, 175, 176, 177, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 223, 224, 226, 227, 228, 231, 232, 233, 234, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 280, 281, 282, 285, 286, 289, 290, 291, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 358, 360, 362, 363, 364, 367, 369, 371, 373, 374, 376, 378, 379, 380, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 399, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 438, 439, 440, 441, 446, 447, 449, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "normal": [5, 20, 22, 23, 25, 31, 33, 34, 45, 49, 51, 56, 58, 63, 66, 72, 73, 75, 76, 85, 92, 93, 94, 100, 101, 104, 105, 107, 108, 118, 137, 138, 141, 142, 144, 153, 156, 165, 167, 174, 175, 179, 181, 184, 186, 188, 191, 193, 194, 196, 198, 200, 203, 206, 207, 211, 212, 216, 218, 219, 223, 224, 228, 232, 233, 240, 245, 246, 256, 264, 265, 266, 267, 273, 274, 280, 281, 286, 290, 291, 294, 295, 297, 300, 306, 309, 312, 317, 318, 319, 322, 329, 331, 333, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 360, 362, 363, 364, 367, 370, 372, 374, 379, 382, 383, 384, 385, 386, 387, 388, 392, 393, 398, 400, 408, 409, 412, 413, 414, 417, 419, 420, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 439, 453, 459, 461, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "correspond": [5, 9, 18, 22, 23, 31, 33, 45, 49, 56, 58, 61, 63, 64, 68, 71, 73, 75, 76, 79, 85, 92, 94, 95, 98, 99, 100, 101, 104, 107, 108, 113, 115, 118, 124, 126, 131, 135, 137, 144, 153, 156, 161, 165, 168, 174, 175, 176, 181, 182, 184, 187, 189, 191, 197, 206, 207, 210, 211, 216, 217, 220, 221, 223, 224, 228, 231, 233, 241, 243, 245, 246, 248, 249, 253, 257, 259, 260, 264, 265, 266, 267, 269, 281, 290, 291, 293, 305, 306, 312, 317, 327, 329, 330, 331, 332, 333, 335, 337, 338, 339, 342, 343, 345, 346, 350, 351, 353, 356, 362, 363, 364, 367, 373, 374, 379, 384, 385, 386, 387, 392, 395, 397, 400, 401, 404, 408, 409, 413, 415, 417, 420, 421, 425, 426, 427, 428, 429, 430, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "address": [5, 9, 23, 42, 51, 58, 63, 64, 68, 73, 75, 85, 100, 101, 105, 110, 119, 124, 126, 131, 140, 162, 168, 174, 189, 191, 198, 201, 206, 207, 210, 213, 221, 223, 240, 241, 243, 254, 260, 265, 267, 268, 269, 282, 317, 320, 333, 335, 336, 338, 339, 360, 380, 384, 392, 418, 426, 454, 460, 462, 463, 465, 466, 467, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481], "follow": [5, 7, 9, 23, 28, 33, 34, 39, 41, 42, 45, 55, 58, 61, 63, 64, 66, 72, 73, 75, 76, 77, 79, 84, 85, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 120, 124, 126, 130, 131, 133, 135, 137, 138, 139, 142, 144, 147, 149, 151, 152, 153, 155, 156, 157, 159, 165, 167, 168, 174, 175, 176, 177, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 213, 214, 216, 218, 219, 223, 224, 226, 228, 231, 233, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 276, 281, 285, 286, 288, 289, 290, 291, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 310, 312, 317, 318, 319, 320, 321, 323, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 350, 351, 352, 354, 356, 357, 359, 360, 362, 363, 364, 367, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 440, 441, 447, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "descript": [5, 23, 24, 53, 58, 59, 63, 64, 68, 73, 89, 93, 97, 99, 100, 101, 115, 118, 126, 139, 158, 174, 175, 180, 188, 189, 191, 194, 198, 199, 200, 203, 210, 213, 228, 239, 243, 248, 249, 253, 257, 264, 265, 266, 268, 271, 276, 286, 290, 291, 295, 305, 311, 320, 330, 331, 335, 338, 339, 342, 354, 357, 359, 360, 364, 367, 373, 374, 384, 386, 397, 406, 412, 413, 417, 418, 425, 426, 427, 428, 432, 434, 449, 453, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 472, 473, 475, 476, 478, 480, 481], "quot": [5, 68, 79, 84, 85, 87, 104, 107, 124, 135, 144, 156, 173, 174, 193, 194, 195, 196, 200, 201, 203, 206, 207, 233, 236, 245, 246, 254, 260, 295, 315, 317, 329, 338, 342, 343, 346, 358, 362, 382, 384, 393, 411, 415, 424, 425, 429, 432, 433, 444, 447, 449, 459, 460, 463, 465, 472, 473, 474, 478, 481], "form": [5, 7, 23, 31, 33, 34, 37, 54, 55, 63, 68, 72, 73, 79, 84, 85, 92, 95, 98, 100, 101, 104, 107, 108, 118, 124, 142, 149, 156, 159, 165, 167, 174, 175, 176, 179, 181, 184, 185, 188, 189, 191, 194, 195, 196, 198, 201, 203, 204, 206, 207, 211, 219, 223, 224, 226, 228, 240, 242, 243, 246, 249, 253, 255, 257, 259, 264, 265, 266, 267, 269, 271, 274, 281, 286, 291, 296, 300, 302, 303, 305, 317, 332, 335, 338, 339, 340, 342, 343, 344, 345, 350, 356, 360, 362, 363, 364, 366, 367, 374, 382, 385, 386, 387, 388, 392, 393, 396, 398, 403, 406, 408, 411, 417, 419, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 437, 453, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "entri": [5, 13, 22, 26, 27, 31, 33, 45, 49, 51, 58, 63, 68, 73, 75, 87, 89, 93, 94, 95, 97, 101, 107, 108, 118, 124, 137, 142, 156, 158, 165, 167, 174, 175, 179, 182, 184, 189, 191, 193, 214, 223, 224, 228, 231, 234, 241, 245, 246, 248, 253, 259, 263, 266, 267, 268, 269, 270, 278, 279, 281, 282, 290, 291, 294, 297, 300, 305, 306, 312, 314, 317, 319, 322, 328, 329, 331, 333, 337, 338, 339, 342, 350, 352, 356, 360, 363, 367, 373, 374, 376, 379, 382, 383, 387, 388, 398, 400, 401, 403, 419, 420, 423, 427, 428, 450, 453, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 476, 477, 478, 479, 481], "round": [5, 63, 64, 68, 147, 171, 181, 188, 191, 219, 223, 241, 259, 273, 287, 288, 291, 316, 341, 342, 343, 345, 350, 376, 382, 384, 386, 426, 428, 440, 442, 447, 448, 449, 450, 460, 462, 464, 465, 466, 467, 468, 469, 474, 475, 478, 479, 481], "match": [5, 11, 22, 23, 33, 42, 45, 61, 63, 64, 68, 73, 78, 85, 92, 94, 95, 100, 101, 107, 108, 116, 124, 134, 137, 138, 139, 142, 149, 153, 161, 165, 175, 181, 184, 185, 188, 189, 191, 194, 195, 201, 202, 203, 206, 211, 214, 217, 223, 224, 226, 240, 241, 244, 245, 246, 249, 252, 253, 259, 262, 265, 266, 268, 270, 281, 285, 286, 291, 294, 295, 300, 306, 309, 312, 316, 318, 321, 329, 330, 331, 335, 338, 339, 342, 343, 345, 346, 350, 356, 357, 360, 361, 364, 367, 373, 374, 376, 379, 380, 381, 383, 384, 386, 387, 392, 393, 398, 401, 408, 409, 411, 413, 418, 423, 427, 428, 429, 431, 433, 443, 453, 454, 459, 460, 461, 462, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "squar": [5, 33, 63, 85, 87, 89, 94, 95, 107, 139, 152, 175, 179, 184, 259, 273, 295, 306, 338, 341, 342, 382, 392, 411, 425, 426, 428, 432, 433, 434, 438, 440, 447, 462, 463, 466, 470, 479, 481], "bracket": [5, 33, 63, 95, 101, 104, 107, 142, 207, 218, 223, 269, 295, 317, 338, 342, 384, 385, 392, 408, 411, 425, 426, 428, 432, 433, 434, 465, 466, 467, 481], "variabl": [5, 9, 13, 16, 22, 23, 26, 28, 31, 32, 34, 42, 45, 53, 55, 58, 61, 63, 64, 66, 68, 72, 73, 75, 76, 79, 84, 85, 87, 92, 93, 94, 95, 99, 101, 104, 107, 108, 110, 112, 116, 124, 137, 139, 149, 150, 152, 153, 161, 162, 165, 172, 175, 186, 189, 191, 207, 211, 212, 213, 221, 223, 226, 228, 243, 245, 246, 247, 248, 252, 253, 259, 264, 265, 279, 281, 293, 295, 297, 299, 309, 311, 313, 317, 318, 322, 329, 330, 331, 335, 336, 338, 340, 341, 342, 343, 345, 346, 349, 350, 352, 356, 360, 363, 364, 366, 374, 379, 380, 382, 383, 384, 386, 387, 392, 393, 398, 401, 403, 405, 406, 408, 409, 410, 418, 423, 425, 426, 427, 428, 429, 430, 433, 434, 438, 439, 446, 447, 450, 453, 454, 456, 457, 460, 461, 462, 463, 464, 465, 466, 468, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481], "whose": [5, 23, 31, 33, 42, 45, 60, 61, 63, 73, 85, 93, 101, 118, 167, 174, 175, 179, 181, 184, 191, 196, 198, 201, 203, 206, 211, 213, 214, 219, 223, 224, 226, 231, 240, 241, 242, 250, 253, 264, 265, 266, 267, 269, 281, 290, 291, 294, 295, 297, 305, 306, 310, 317, 320, 330, 331, 332, 335, 337, 338, 342, 343, 350, 356, 360, 363, 364, 367, 371, 374, 378, 379, 386, 388, 393, 398, 400, 403, 411, 413, 425, 426, 428, 430, 433, 460, 461, 462, 464, 465, 466, 467, 472, 474, 475, 476, 478, 479, 481], "should": [5, 7, 10, 11, 13, 22, 23, 25, 27, 28, 31, 33, 34, 35, 37, 42, 45, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 84, 85, 92, 94, 95, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 124, 126, 130, 131, 133, 135, 137, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 159, 161, 165, 167, 168, 171, 174, 175, 178, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 213, 219, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 273, 274, 276, 279, 280, 281, 285, 286, 290, 291, 293, 294, 295, 297, 300, 302, 303, 305, 306, 307, 309, 312, 317, 318, 319, 320, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 353, 356, 357, 360, 362, 363, 364, 367, 369, 371, 372, 373, 374, 376, 378, 379, 380, 382, 383, 384, 386, 387, 392, 393, 397, 398, 400, 403, 404, 406, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 425, 426, 427, 428, 430, 432, 433, 434, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "be": [5, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 41, 42, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 84, 91, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 124, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 159, 161, 165, 167, 168, 171, 174, 175, 177, 179, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 221, 223, 224, 226, 228, 231, 232, 233, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 289, 290, 291, 293, 294, 295, 296, 299, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 367, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 440, 441, 444, 446, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pass": [5, 7, 9, 11, 13, 17, 22, 23, 27, 28, 33, 34, 42, 43, 45, 47, 49, 58, 59, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 78, 79, 84, 87, 88, 92, 93, 94, 98, 99, 100, 103, 104, 107, 108, 110, 114, 116, 118, 120, 124, 131, 133, 135, 136, 137, 138, 139, 142, 144, 147, 149, 152, 153, 155, 156, 158, 161, 165, 167, 168, 171, 175, 176, 179, 181, 188, 189, 191, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 223, 224, 228, 230, 232, 233, 240, 241, 242, 243, 245, 246, 248, 249, 250, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 276, 277, 279, 281, 286, 290, 291, 293, 295, 297, 303, 305, 306, 307, 309, 312, 317, 318, 319, 320, 321, 323, 328, 329, 330, 331, 333, 335, 336, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 353, 356, 357, 360, 362, 363, 364, 365, 367, 371, 373, 374, 376, 378, 379, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 405, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 433, 441, 443, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "allow": [5, 7, 9, 22, 23, 33, 34, 41, 42, 43, 45, 49, 58, 59, 61, 63, 64, 68, 71, 72, 73, 75, 76, 79, 84, 85, 89, 92, 93, 95, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 124, 130, 131, 133, 135, 136, 137, 141, 149, 151, 152, 155, 156, 158, 159, 161, 165, 167, 171, 174, 175, 178, 179, 181, 184, 187, 188, 189, 191, 192, 193, 194, 200, 201, 203, 206, 209, 211, 212, 213, 216, 219, 221, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 245, 246, 248, 251, 253, 256, 259, 260, 263, 264, 265, 266, 267, 269, 273, 274, 276, 277, 281, 285, 286, 290, 291, 293, 294, 295, 297, 300, 303, 305, 306, 309, 311, 312, 317, 318, 319, 320, 322, 323, 326, 327, 328, 329, 330, 331, 333, 335, 336, 338, 339, 342, 343, 344, 346, 350, 351, 352, 354, 356, 360, 362, 363, 364, 367, 372, 373, 374, 375, 378, 380, 382, 383, 384, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 408, 409, 411, 413, 414, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 433, 434, 439, 441, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "access": [5, 7, 11, 16, 23, 31, 33, 45, 47, 49, 50, 54, 55, 59, 60, 61, 63, 68, 72, 73, 75, 76, 77, 79, 84, 85, 87, 93, 98, 100, 101, 103, 104, 107, 108, 116, 134, 136, 137, 140, 144, 147, 149, 152, 156, 158, 159, 167, 168, 175, 179, 181, 182, 184, 189, 191, 192, 194, 198, 201, 203, 205, 210, 211, 215, 216, 217, 219, 223, 224, 228, 231, 233, 240, 241, 242, 243, 244, 245, 248, 251, 252, 253, 254, 255, 256, 257, 259, 265, 267, 269, 274, 276, 278, 279, 280, 281, 282, 290, 291, 293, 294, 295, 297, 300, 310, 312, 313, 317, 318, 320, 322, 326, 328, 330, 331, 333, 335, 336, 337, 338, 340, 342, 346, 350, 351, 352, 356, 357, 360, 363, 367, 373, 374, 379, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 400, 402, 404, 408, 409, 410, 411, 413, 418, 420, 423, 424, 425, 427, 428, 430, 434, 447, 457, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 479, 480, 481], "an": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 40, 42, 43, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 74, 75, 76, 77, 80, 89, 91, 92, 94, 95, 98, 99, 100, 103, 104, 105, 108, 110, 111, 112, 113, 115, 118, 124, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 162, 164, 165, 168, 171, 174, 175, 176, 177, 179, 180, 182, 184, 186, 187, 188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 219, 221, 223, 224, 226, 228, 231, 232, 233, 234, 238, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 278, 279, 281, 282, 283, 285, 286, 288, 290, 291, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 309, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 345, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 367, 369, 371, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 396, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 440, 441, 447, 449, 453, 454, 456, 457, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "as": [5, 6, 7, 9, 11, 13, 17, 18, 20, 22, 23, 25, 26, 27, 28, 31, 33, 34, 35, 39, 40, 41, 42, 43, 45, 47, 49, 51, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 78, 79, 84, 85, 92, 93, 94, 95, 99, 103, 104, 107, 108, 110, 112, 113, 115, 118, 120, 124, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 147, 149, 150, 152, 153, 155, 156, 157, 158, 159, 161, 164, 165, 171, 173, 174, 175, 176, 177, 179, 181, 182, 184, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 216, 218, 219, 220, 221, 223, 224, 226, 228, 230, 231, 232, 233, 234, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 280, 281, 282, 286, 290, 291, 293, 294, 295, 297, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 367, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 427, 428, 429, 430, 432, 433, 434, 436, 439, 441, 444, 448, 449, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482], "chunk": [5, 13, 43, 68, 78, 85, 101, 105, 107, 131, 147, 164, 178, 221, 223, 233, 238, 240, 252, 256, 259, 260, 268, 281, 291, 301, 312, 330, 332, 335, 345, 348, 393, 405, 413, 414, 428, 460, 463, 465, 467, 471, 472, 477, 481], "memori": [5, 7, 23, 28, 31, 32, 33, 34, 41, 43, 45, 47, 49, 55, 58, 59, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 85, 87, 93, 95, 99, 100, 101, 104, 105, 107, 113, 117, 130, 135, 149, 156, 174, 182, 183, 184, 186, 205, 210, 211, 212, 223, 232, 233, 245, 248, 252, 253, 256, 258, 259, 267, 269, 281, 282, 291, 297, 312, 320, 328, 330, 331, 335, 336, 338, 345, 346, 350, 356, 360, 363, 384, 387, 400, 403, 404, 409, 411, 419, 420, 426, 433, 440, 453, 454, 460, 461, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 477, 478, 479, 480, 481], "you": [5, 13, 22, 23, 25, 26, 31, 33, 34, 39, 41, 42, 43, 45, 56, 58, 59, 60, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 87, 89, 92, 93, 94, 95, 98, 99, 100, 101, 104, 107, 108, 110, 112, 113, 115, 118, 124, 131, 138, 139, 141, 144, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 165, 167, 168, 171, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 188, 190, 191, 193, 194, 196, 198, 199, 200, 203, 204, 205, 206, 211, 212, 213, 216, 219, 223, 224, 228, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 256, 257, 260, 263, 264, 265, 266, 267, 268, 269, 270, 276, 281, 286, 290, 291, 293, 294, 295, 297, 303, 305, 306, 311, 312, 317, 318, 326, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 350, 353, 356, 357, 360, 362, 363, 367, 369, 373, 374, 378, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 405, 406, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 423, 424, 425, 426, 428, 429, 430, 432, 434, 439, 440, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "don": [5, 9, 23, 28, 33, 34, 49, 58, 59, 63, 73, 75, 76, 79, 85, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 118, 124, 131, 135, 137, 142, 149, 150, 151, 152, 157, 158, 161, 165, 167, 174, 177, 179, 181, 188, 189, 191, 198, 207, 214, 223, 224, 228, 240, 241, 248, 255, 256, 257, 260, 265, 266, 267, 281, 286, 290, 291, 293, 295, 297, 305, 306, 326, 328, 330, 333, 335, 338, 339, 342, 353, 363, 367, 374, 384, 386, 387, 388, 393, 397, 400, 403, 411, 424, 425, 426, 428, 429, 430, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 474, 475, 476, 477, 479, 480, 481], "have": [5, 7, 11, 22, 23, 27, 28, 31, 33, 34, 42, 45, 47, 49, 58, 59, 60, 63, 64, 67, 72, 73, 75, 76, 77, 79, 84, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 124, 127, 130, 135, 136, 137, 138, 139, 141, 142, 147, 149, 151, 152, 153, 155, 156, 157, 159, 161, 165, 167, 168, 174, 175, 176, 177, 179, 181, 182, 184, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 211, 213, 216, 219, 223, 224, 228, 232, 233, 239, 240, 241, 242, 245, 246, 248, 249, 250, 253, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 280, 281, 286, 290, 291, 293, 294, 295, 297, 300, 303, 305, 306, 309, 310, 312, 317, 320, 321, 322, 323, 326, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 350, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 367, 369, 373, 374, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 395, 397, 398, 400, 403, 405, 406, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 440, 441, 447, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "provid": [5, 7, 11, 23, 25, 28, 31, 33, 34, 40, 42, 43, 45, 47, 49, 51, 54, 58, 61, 63, 64, 66, 68, 72, 74, 75, 79, 84, 85, 91, 92, 93, 94, 95, 97, 98, 99, 101, 103, 104, 107, 108, 113, 115, 118, 122, 124, 131, 135, 137, 139, 141, 147, 149, 150, 151, 152, 153, 155, 156, 157, 159, 161, 165, 167, 168, 171, 174, 175, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 213, 214, 216, 218, 219, 222, 223, 224, 226, 228, 231, 232, 233, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 278, 279, 280, 281, 286, 288, 290, 291, 293, 294, 296, 300, 302, 303, 305, 306, 309, 310, 312, 313, 317, 318, 319, 320, 321, 322, 324, 326, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 354, 356, 357, 359, 360, 362, 363, 364, 367, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 430, 433, 434, 438, 453, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "raw": [5, 7, 16, 32, 63, 68, 100, 104, 116, 118, 149, 165, 174, 175, 189, 191, 194, 195, 203, 204, 205, 223, 228, 253, 268, 281, 286, 291, 297, 327, 329, 335, 336, 339, 342, 361, 364, 367, 379, 381, 393, 396, 400, 413, 425, 433, 447, 461, 463, 465, 466, 468, 471, 472, 474, 476, 481], "storag": [5, 32, 35, 42, 55, 68, 87, 99, 101, 107, 156, 165, 175, 189, 248, 256, 259, 282, 291, 328, 338, 342, 345, 411, 438, 462, 465, 466, 467, 472, 474, 475, 481], "return": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 78, 79, 84, 86, 87, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 118, 120, 123, 124, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 164, 165, 167, 168, 170, 171, 175, 176, 177, 179, 181, 182, 184, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 216, 218, 219, 221, 223, 224, 226, 228, 231, 232, 233, 234, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 280, 281, 285, 286, 287, 289, 290, 291, 293, 294, 295, 297, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 312, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 364, 365, 367, 369, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 433, 438, 439, 441, 447, 448, 449, 450, 453, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "unicod": [5, 16, 27, 31, 32, 39, 45, 59, 63, 65, 68, 80, 85, 87, 92, 96, 101, 103, 104, 110, 117, 119, 141, 143, 144, 165, 173, 174, 175, 180, 181, 184, 191, 192, 193, 194, 195, 198, 199, 200, 201, 206, 207, 211, 219, 223, 228, 236, 237, 238, 245, 252, 256, 260, 264, 280, 291, 292, 294, 297, 300, 317, 338, 342, 343, 344, 350, 361, 376, 384, 392, 398, 403, 405, 409, 410, 411, 420, 423, 426, 428, 433, 440, 453, 454, 461, 465, 466, 467, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482], "byte": [5, 7, 12, 16, 22, 23, 24, 25, 26, 28, 31, 33, 34, 39, 40, 41, 42, 43, 49, 58, 59, 61, 63, 64, 66, 68, 78, 79, 84, 85, 87, 92, 93, 94, 99, 101, 103, 104, 105, 108, 111, 115, 116, 119, 120, 124, 125, 131, 134, 135, 139, 140, 141, 143, 144, 147, 149, 151, 156, 159, 164, 165, 175, 176, 180, 182, 184, 186, 188, 189, 192, 193, 194, 195, 197, 198, 199, 200, 203, 204, 205, 206, 210, 211, 213, 221, 223, 228, 232, 233, 235, 240, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 259, 260, 262, 264, 266, 267, 268, 269, 272, 276, 280, 281, 282, 285, 286, 291, 293, 294, 296, 297, 302, 307, 309, 312, 315, 316, 317, 320, 322, 326, 330, 331, 333, 334, 335, 336, 338, 339, 340, 346, 347, 350, 356, 357, 360, 367, 375, 376, 380, 381, 384, 393, 396, 398, 399, 403, 404, 405, 406, 408, 409, 411, 412, 413, 414, 417, 419, 420, 422, 423, 425, 426, 428, 429, 430, 438, 444, 448, 449, 453, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "area": [5, 7, 42, 45, 63, 92, 94, 100, 101, 107, 175, 194, 203, 223, 245, 276, 297, 320, 335, 339, 369, 374, 432, 444, 460, 465, 466, 475, 478], "unless": [5, 7, 9, 13, 22, 23, 26, 27, 31, 33, 42, 51, 54, 56, 58, 59, 63, 73, 76, 85, 94, 95, 99, 100, 104, 110, 115, 118, 124, 137, 138, 139, 147, 159, 165, 167, 179, 181, 184, 189, 191, 194, 198, 203, 204, 207, 223, 224, 240, 241, 242, 245, 248, 253, 256, 257, 259, 265, 266, 268, 269, 273, 279, 281, 286, 290, 291, 295, 307, 312, 317, 321, 326, 327, 330, 332, 333, 335, 336, 338, 339, 342, 343, 346, 350, 351, 352, 356, 357, 362, 363, 384, 386, 387, 392, 393, 397, 398, 400, 404, 410, 413, 424, 425, 426, 427, 428, 433, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 474, 475, 477, 478, 479, 480, 481], "otherwis": [5, 7, 11, 13, 22, 23, 27, 28, 31, 33, 34, 39, 40, 42, 43, 45, 47, 49, 54, 58, 59, 61, 63, 64, 66, 73, 76, 79, 94, 95, 100, 101, 104, 108, 110, 115, 118, 124, 127, 131, 137, 139, 144, 147, 152, 153, 155, 156, 161, 165, 167, 168, 174, 175, 177, 179, 181, 182, 184, 188, 189, 191, 193, 194, 195, 197, 198, 200, 203, 204, 206, 207, 212, 214, 216, 221, 223, 224, 228, 232, 240, 241, 242, 243, 245, 248, 249, 250, 253, 255, 256, 257, 259, 260, 265, 266, 267, 269, 273, 274, 276, 281, 290, 291, 294, 295, 297, 299, 300, 302, 303, 305, 309, 310, 312, 317, 319, 322, 326, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 346, 350, 351, 352, 353, 354, 356, 357, 360, 362, 363, 364, 367, 371, 374, 376, 379, 380, 382, 385, 386, 388, 392, 393, 398, 400, 401, 404, 405, 409, 411, 413, 417, 418, 419, 420, 423, 424, 425, 426, 428, 429, 430, 433, 434, 440, 453, 454, 459, 461, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "state": [5, 13, 17, 22, 23, 27, 31, 32, 45, 50, 51, 53, 59, 61, 63, 68, 73, 75, 76, 84, 85, 92, 95, 100, 103, 104, 108, 117, 124, 131, 136, 137, 138, 139, 142, 149, 152, 155, 156, 158, 162, 165, 167, 168, 169, 175, 183, 189, 210, 211, 216, 220, 224, 233, 241, 246, 248, 252, 254, 256, 257, 266, 268, 269, 291, 293, 295, 296, 299, 306, 312, 313, 316, 318, 321, 323, 326, 331, 335, 336, 338, 339, 342, 346, 350, 360, 363, 364, 366, 367, 373, 379, 383, 386, 392, 393, 398, 400, 403, 409, 410, 423, 424, 426, 428, 430, 439, 450, 460, 462, 463, 465, 472, 473, 474, 475, 478, 479, 480, 481], "nul": [5, 7, 63, 174, 175, 176, 235, 267, 282, 291, 294, 312, 345, 350, 417, 473, 474, 481], "termin": [5, 7, 9, 31, 33, 34, 37, 39, 45, 58, 60, 61, 63, 64, 66, 68, 73, 84, 85, 92, 95, 99, 100, 101, 107, 113, 116, 118, 124, 128, 130, 131, 135, 137, 138, 153, 174, 176, 187, 188, 189, 191, 205, 206, 212, 217, 223, 227, 240, 243, 245, 252, 253, 256, 259, 263, 264, 267, 269, 281, 286, 290, 295, 300, 306, 317, 320, 331, 333, 336, 338, 339, 342, 343, 346, 350, 359, 363, 367, 375, 382, 389, 393, 398, 403, 409, 411, 413, 424, 425, 427, 428, 430, 433, 434, 453, 457, 460, 464, 465, 466, 468, 473, 474, 476, 478, 479, 481], "there": [5, 7, 9, 13, 22, 23, 25, 26, 27, 31, 33, 34, 39, 41, 42, 45, 46, 49, 51, 55, 58, 59, 60, 63, 64, 66, 67, 72, 73, 75, 76, 77, 79, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 112, 113, 118, 124, 130, 131, 135, 137, 141, 142, 149, 151, 152, 153, 155, 156, 157, 161, 164, 165, 167, 168, 174, 175, 177, 179, 181, 182, 184, 188, 189, 191, 194, 195, 197, 198, 199, 201, 203, 205, 206, 207, 211, 213, 214, 216, 223, 224, 226, 228, 233, 240, 241, 242, 243, 245, 246, 248, 249, 250, 253, 256, 257, 259, 263, 264, 265, 266, 267, 269, 273, 276, 279, 281, 285, 286, 290, 291, 293, 294, 295, 297, 302, 303, 305, 306, 311, 312, 316, 317, 322, 323, 326, 328, 329, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 356, 357, 360, 362, 363, 364, 367, 373, 374, 376, 382, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 406, 408, 409, 411, 412, 413, 414, 419, 420, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 441, 453, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "way": [5, 7, 9, 13, 23, 25, 31, 33, 34, 42, 45, 58, 59, 61, 63, 64, 66, 72, 73, 75, 76, 79, 84, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 118, 122, 124, 131, 137, 139, 142, 149, 152, 155, 156, 157, 159, 161, 165, 167, 171, 174, 175, 179, 181, 184, 186, 188, 191, 192, 193, 194, 198, 199, 203, 205, 206, 207, 223, 226, 228, 233, 241, 245, 246, 248, 249, 253, 256, 257, 259, 264, 265, 266, 267, 268, 269, 273, 276, 278, 281, 290, 291, 293, 294, 295, 297, 305, 306, 317, 322, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 345, 346, 350, 351, 352, 356, 360, 363, 367, 373, 376, 379, 382, 384, 385, 386, 387, 388, 393, 398, 400, 401, 408, 411, 413, 417, 418, 419, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "can": [5, 7, 11, 13, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 41, 42, 43, 45, 47, 49, 51, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 112, 113, 115, 118, 120, 124, 126, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 155, 156, 157, 159, 161, 164, 165, 167, 168, 171, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 216, 218, 219, 223, 224, 226, 228, 230, 232, 233, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 253, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 278, 279, 280, 281, 286, 290, 291, 293, 294, 295, 296, 299, 300, 302, 305, 306, 307, 309, 310, 311, 312, 317, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 367, 371, 373, 374, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 440, 441, 444, 447, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "convert": [5, 7, 18, 25, 33, 39, 47, 55, 56, 58, 59, 64, 66, 68, 72, 73, 75, 76, 84, 92, 93, 94, 95, 99, 100, 101, 104, 110, 115, 118, 124, 137, 139, 142, 146, 152, 153, 156, 158, 162, 165, 174, 175, 176, 179, 181, 182, 184, 188, 189, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 206, 207, 211, 213, 218, 223, 224, 228, 242, 246, 252, 257, 259, 264, 265, 266, 267, 268, 269, 273, 274, 281, 283, 290, 291, 296, 297, 299, 300, 305, 307, 317, 333, 335, 340, 342, 343, 345, 350, 356, 360, 364, 374, 376, 381, 384, 386, 392, 396, 398, 403, 409, 411, 413, 417, 423, 425, 426, 428, 433, 434, 441, 444, 449, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "such": [5, 7, 13, 23, 25, 27, 28, 31, 33, 34, 42, 45, 51, 58, 61, 63, 64, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 104, 107, 108, 110, 113, 118, 124, 130, 131, 135, 137, 139, 142, 144, 149, 153, 156, 157, 159, 165, 167, 174, 175, 179, 181, 182, 184, 188, 191, 192, 194, 195, 200, 201, 203, 205, 206, 207, 209, 210, 211, 213, 214, 223, 224, 228, 232, 233, 241, 243, 245, 246, 248, 249, 251, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 269, 270, 273, 276, 279, 281, 285, 286, 290, 291, 293, 294, 295, 297, 300, 302, 305, 306, 311, 312, 317, 322, 326, 327, 328, 329, 330, 331, 333, 335, 336, 338, 339, 342, 343, 344, 345, 346, 350, 353, 356, 357, 359, 360, 363, 364, 367, 373, 374, 375, 378, 379, 382, 383, 384, 385, 386, 387, 392, 393, 395, 397, 398, 400, 404, 408, 409, 410, 411, 413, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 430, 433, 434, 441, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "fill": [5, 7, 22, 33, 34, 42, 45, 47, 55, 60, 63, 64, 68, 75, 76, 85, 92, 95, 99, 101, 103, 108, 115, 118, 136, 149, 174, 175, 181, 184, 191, 194, 199, 203, 220, 223, 243, 245, 248, 252, 256, 259, 267, 291, 333, 335, 338, 339, 342, 343, 345, 346, 360, 361, 364, 367, 426, 428, 430, 450, 454, 460, 462, 463, 464, 465, 466, 472, 473, 474, 476, 477, 481], "py_buff": [5, 7, 43, 57, 63, 466, 471, 474, 481], "this": [5, 6, 7, 9, 10, 11, 13, 17, 20, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 84, 85, 87, 89, 92, 93, 94, 95, 98, 100, 101, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 118, 124, 126, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 164, 165, 167, 168, 171, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 228, 230, 231, 232, 233, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 367, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 444, 447, 448, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "lock": [5, 31, 32, 51, 63, 68, 73, 76, 84, 87, 99, 101, 113, 122, 140, 162, 164, 165, 167, 174, 210, 213, 224, 239, 256, 265, 267, 268, 269, 280, 281, 291, 303, 314, 320, 322, 328, 331, 336, 338, 340, 350, 360, 367, 384, 400, 426, 450, 460, 462, 464, 465, 466, 467, 468, 471, 472, 473, 476, 478, 479, 480, 481, 482], "under": [5, 7, 13, 23, 33, 34, 42, 43, 45, 54, 58, 61, 66, 68, 74, 84, 85, 92, 93, 95, 100, 101, 103, 104, 118, 124, 130, 131, 133, 147, 149, 151, 153, 156, 159, 167, 174, 175, 181, 188, 191, 194, 197, 201, 206, 210, 211, 213, 214, 223, 224, 228, 232, 233, 240, 245, 253, 256, 259, 260, 265, 266, 267, 268, 269, 273, 276, 279, 281, 290, 291, 293, 295, 297, 303, 306, 312, 318, 320, 326, 327, 328, 329, 330, 331, 335, 336, 338, 339, 340, 342, 346, 350, 351, 353, 360, 363, 364, 367, 369, 373, 374, 378, 379, 382, 383, 384, 386, 387, 388, 392, 393, 395, 397, 398, 401, 403, 404, 408, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 433, 434, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "so": [5, 7, 11, 13, 22, 23, 25, 27, 28, 31, 33, 34, 41, 42, 45, 49, 54, 57, 59, 63, 64, 66, 68, 71, 72, 73, 75, 76, 77, 79, 84, 85, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 107, 108, 110, 118, 124, 135, 137, 138, 139, 141, 149, 151, 152, 155, 156, 157, 165, 167, 168, 171, 174, 175, 176, 177, 179, 181, 184, 188, 189, 191, 194, 197, 198, 199, 200, 201, 203, 205, 206, 207, 211, 212, 213, 214, 216, 219, 223, 224, 226, 228, 230, 232, 233, 240, 241, 242, 243, 245, 246, 248, 251, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 276, 281, 282, 290, 291, 295, 297, 300, 306, 310, 312, 317, 323, 326, 327, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 352, 353, 356, 357, 360, 362, 363, 364, 367, 371, 373, 374, 376, 382, 383, 384, 386, 387, 388, 393, 397, 400, 403, 404, 405, 408, 409, 411, 413, 414, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 434, 447, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "caller": [5, 9, 23, 31, 33, 34, 45, 58, 61, 64, 73, 85, 88, 93, 95, 137, 142, 155, 156, 167, 174, 179, 187, 189, 211, 223, 233, 240, 249, 250, 253, 256, 265, 289, 291, 294, 300, 306, 330, 331, 333, 335, 339, 346, 350, 363, 374, 378, 379, 384, 386, 393, 395, 398, 401, 403, 417, 419, 426, 427, 428, 438, 441, 461, 462, 463, 464, 465, 466, 467, 471, 477, 480, 481], "subsequ": [5, 23, 33, 45, 60, 64, 85, 93, 100, 104, 113, 118, 157, 175, 188, 189, 200, 204, 206, 224, 241, 248, 253, 256, 259, 266, 267, 269, 276, 281, 290, 291, 294, 317, 330, 335, 339, 342, 343, 350, 354, 356, 363, 367, 373, 382, 387, 393, 424, 425, 428, 430, 432, 434, 463, 464, 465, 466, 467, 469, 476, 479, 481], "even": [5, 9, 23, 26, 31, 33, 34, 42, 45, 58, 59, 63, 64, 73, 76, 84, 85, 93, 94, 95, 99, 101, 103, 104, 107, 110, 118, 124, 130, 137, 144, 149, 152, 156, 159, 161, 165, 167, 174, 175, 179, 181, 184, 186, 191, 192, 194, 196, 197, 203, 204, 205, 206, 211, 212, 213, 216, 219, 223, 224, 233, 241, 245, 248, 249, 253, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 273, 281, 290, 291, 294, 295, 297, 305, 306, 316, 317, 329, 330, 331, 332, 333, 335, 338, 339, 342, 343, 345, 350, 351, 352, 356, 360, 362, 363, 364, 367, 374, 380, 382, 384, 385, 386, 387, 388, 393, 397, 398, 400, 401, 403, 409, 413, 415, 417, 420, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 439, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 480, 481], "insid": [5, 7, 11, 33, 42, 63, 68, 76, 85, 92, 95, 99, 104, 111, 112, 133, 142, 167, 175, 184, 191, 194, 197, 203, 223, 224, 249, 250, 256, 260, 279, 281, 295, 297, 300, 317, 330, 331, 335, 343, 350, 356, 367, 373, 374, 382, 384, 386, 388, 411, 418, 420, 421, 425, 426, 427, 428, 433, 447, 459, 461, 462, 463, 464, 465, 466, 468, 471, 472, 473, 475, 477, 478, 479, 481], "py_begin_allow_thread": [5, 33, 57, 73], "block": [5, 7, 23, 33, 42, 45, 55, 63, 68, 73, 75, 77, 92, 93, 104, 105, 108, 110, 113, 115, 123, 124, 131, 132, 133, 135, 136, 137, 142, 144, 147, 167, 174, 175, 176, 183, 184, 186, 188, 189, 191, 197, 205, 206, 210, 211, 213, 223, 224, 230, 232, 233, 240, 241, 245, 246, 253, 255, 256, 259, 267, 271, 280, 281, 282, 286, 291, 293, 294, 303, 311, 314, 320, 323, 326, 327, 328, 330, 331, 333, 335, 338, 340, 346, 349, 350, 351, 356, 357, 360, 363, 367, 384, 386, 393, 401, 403, 404, 409, 414, 426, 427, 428, 429, 430, 434, 453, 461, 462, 463, 465, 466, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "without": [5, 7, 9, 13, 22, 23, 25, 33, 34, 42, 45, 49, 54, 55, 58, 59, 61, 63, 66, 68, 72, 73, 75, 76, 79, 85, 92, 93, 94, 95, 99, 100, 101, 104, 113, 118, 120, 124, 131, 133, 135, 137, 138, 147, 149, 153, 156, 165, 167, 168, 171, 174, 175, 179, 181, 182, 184, 186, 188, 189, 190, 191, 192, 194, 195, 200, 203, 206, 207, 211, 212, 216, 223, 224, 226, 228, 232, 233, 241, 242, 246, 248, 250, 251, 253, 256, 257, 259, 263, 264, 265, 268, 269, 273, 276, 280, 281, 286, 290, 291, 293, 294, 295, 297, 303, 306, 307, 312, 316, 317, 320, 321, 322, 323, 326, 328, 330, 332, 335, 338, 339, 342, 345, 346, 350, 351, 352, 356, 357, 360, 362, 363, 364, 366, 367, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 401, 408, 409, 411, 414, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 439, 447, 449, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "risk": [5, 42, 43, 73, 85, 95, 124, 211, 266, 269, 281, 290, 297, 360, 382, 411, 419, 424, 466, 473, 478, 479, 481], "mutabl": [5, 27, 28, 33, 63, 68, 85, 87, 95, 99, 159, 169, 174, 185, 201, 213, 223, 224, 253, 281, 289, 291, 295, 297, 313, 328, 400, 411, 422, 425, 428, 434, 438, 440, 447, 460, 463, 465, 466, 467, 468, 471, 472, 477, 480, 481], "data": [5, 7, 9, 13, 28, 32, 33, 42, 49, 54, 55, 56, 58, 60, 63, 64, 65, 68, 72, 73, 74, 75, 77, 79, 84, 92, 93, 97, 99, 101, 102, 104, 106, 113, 115, 116, 117, 118, 119, 120, 124, 131, 132, 134, 135, 139, 140, 141, 142, 143, 144, 145, 147, 149, 151, 155, 156, 158, 162, 164, 165, 167, 175, 176, 177, 180, 181, 182, 184, 188, 189, 193, 194, 195, 196, 199, 201, 204, 205, 206, 210, 211, 213, 221, 223, 224, 228, 232, 233, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 256, 259, 260, 264, 265, 267, 269, 270, 271, 272, 274, 276, 279, 281, 282, 286, 288, 290, 291, 293, 294, 300, 302, 306, 307, 312, 313, 314, 316, 317, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 346, 347, 350, 353, 356, 357, 358, 359, 360, 364, 366, 373, 374, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 392, 393, 395, 399, 400, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 424, 426, 428, 430, 437, 438, 441, 443, 449, 454, 456, 460, 461, 462, 463, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482], "being": [5, 7, 13, 22, 23, 27, 28, 33, 45, 60, 61, 63, 64, 66, 73, 75, 76, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 118, 124, 131, 137, 147, 149, 156, 157, 159, 161, 165, 167, 168, 174, 175, 179, 181, 182, 189, 191, 193, 194, 200, 203, 206, 211, 214, 216, 223, 224, 228, 232, 245, 246, 248, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 274, 276, 281, 290, 291, 293, 294, 295, 297, 300, 305, 306, 307, 310, 312, 316, 317, 318, 322, 326, 327, 328, 330, 331, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 353, 360, 362, 363, 364, 367, 374, 379, 384, 386, 387, 388, 392, 397, 398, 400, 405, 408, 411, 412, 413, 415, 419, 420, 424, 425, 426, 428, 430, 432, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "resiz": [5, 9, 28, 42, 54, 56, 60, 64, 174, 175, 256, 276, 331, 342, 367, 373, 374, 382, 386, 476, 478, 481], "destroy": [5, 11, 13, 22, 27, 33, 60, 63, 67, 95, 99, 245, 256, 276, 281, 290, 343, 363, 367, 386, 398, 400, 403, 426, 430, 460, 462, 463, 465, 473, 477, 478, 480, 481], "result": [5, 7, 9, 13, 23, 26, 31, 33, 34, 39, 42, 45, 47, 49, 53, 54, 58, 60, 61, 63, 64, 66, 68, 72, 73, 75, 76, 78, 84, 87, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 115, 118, 121, 123, 124, 127, 131, 133, 135, 136, 137, 139, 140, 141, 142, 144, 149, 150, 152, 156, 157, 158, 161, 164, 165, 167, 168, 171, 174, 175, 176, 179, 181, 182, 184, 188, 189, 191, 194, 195, 197, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 217, 223, 224, 228, 232, 233, 240, 241, 242, 243, 245, 246, 248, 250, 252, 253, 254, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 280, 281, 282, 286, 290, 291, 293, 294, 295, 297, 303, 305, 306, 307, 309, 316, 317, 319, 320, 322, 326, 329, 330, 331, 333, 335, 338, 339, 341, 342, 343, 344, 345, 346, 350, 353, 356, 357, 360, 362, 363, 364, 367, 374, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 393, 395, 398, 400, 401, 403, 408, 409, 411, 414, 415, 417, 418, 419, 420, 423, 424, 425, 426, 428, 429, 430, 433, 434, 439, 441, 444, 448, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pybuffer_releas": [5, 7, 48, 57, 63, 466, 471, 481], "after": [5, 7, 13, 23, 26, 27, 28, 33, 34, 39, 42, 45, 58, 59, 61, 63, 64, 68, 71, 72, 73, 76, 85, 92, 94, 95, 99, 100, 101, 103, 104, 108, 110, 113, 115, 118, 124, 126, 131, 133, 137, 138, 141, 142, 144, 145, 147, 149, 150, 151, 153, 155, 165, 167, 168, 174, 175, 177, 179, 181, 183, 184, 188, 189, 191, 193, 194, 203, 204, 205, 207, 210, 211, 213, 214, 216, 223, 226, 230, 232, 233, 240, 243, 245, 246, 248, 253, 256, 259, 264, 265, 266, 267, 268, 269, 273, 276, 277, 280, 281, 282, 286, 290, 291, 293, 294, 295, 303, 306, 307, 312, 317, 318, 322, 323, 326, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 356, 359, 360, 362, 363, 364, 367, 373, 374, 379, 380, 382, 384, 386, 387, 388, 393, 397, 398, 400, 403, 405, 408, 411, 413, 414, 419, 420, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 438, 439, 442, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "finish": [5, 34, 42, 61, 63, 72, 79, 84, 85, 100, 101, 122, 123, 124, 126, 133, 135, 136, 137, 142, 147, 153, 167, 211, 240, 268, 281, 312, 314, 331, 336, 338, 339, 342, 346, 356, 360, 369, 386, 401, 409, 410, 411, 414, 417, 420, 425, 426, 450, 453, 465, 466, 473, 474, 476, 477, 480, 481], "process": [5, 7, 23, 32, 34, 39, 45, 51, 58, 59, 63, 66, 68, 72, 73, 75, 77, 78, 79, 84, 92, 95, 97, 98, 100, 104, 105, 107, 108, 110, 112, 113, 116, 118, 128, 131, 132, 135, 138, 143, 147, 148, 149, 153, 156, 162, 164, 167, 173, 174, 175, 181, 184, 191, 198, 199, 201, 210, 211, 212, 216, 223, 224, 226, 228, 230, 233, 238, 239, 243, 245, 246, 248, 252, 253, 255, 258, 259, 264, 265, 266, 267, 268, 269, 276, 278, 282, 290, 293, 294, 297, 306, 307, 312, 313, 314, 317, 320, 322, 326, 327, 329, 330, 331, 332, 333, 335, 336, 338, 340, 342, 344, 345, 346, 350, 352, 354, 356, 357, 360, 362, 363, 364, 365, 367, 369, 376, 378, 379, 382, 383, 384, 392, 393, 397, 398, 400, 401, 403, 405, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 423, 425, 426, 428, 430, 433, 434, 453, 454, 459, 461, 462, 463, 464, 465, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "ani": [5, 7, 9, 11, 13, 22, 23, 24, 27, 28, 31, 33, 34, 35, 37, 39, 42, 43, 45, 55, 56, 58, 59, 60, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 113, 114, 115, 118, 124, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 147, 149, 150, 152, 153, 155, 156, 157, 161, 165, 168, 171, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 216, 218, 219, 223, 224, 228, 232, 233, 234, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 274, 276, 281, 286, 289, 290, 291, 293, 294, 295, 297, 300, 303, 306, 307, 311, 312, 313, 314, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 352, 356, 357, 360, 362, 363, 364, 367, 373, 374, 376, 378, 379, 380, 382, 383, 386, 388, 392, 393, 397, 398, 400, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 444, 448, 451, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "earli": [5, 34, 75, 167, 253, 267, 290, 331, 339, 342, 363, 367, 380, 409, 420, 428, 430, 460, 464, 466, 473, 481], "abort": [5, 35, 42, 59, 73, 101, 124, 128, 131, 134, 136, 210, 211, 221, 246, 291, 295, 331, 338, 339, 350, 356, 357, 363, 371, 386, 430, 463, 478, 481], "case": [5, 7, 13, 18, 22, 23, 24, 25, 27, 31, 33, 34, 35, 39, 41, 45, 49, 56, 58, 59, 61, 63, 64, 66, 68, 71, 72, 73, 75, 76, 84, 85, 92, 93, 94, 95, 98, 100, 101, 103, 104, 105, 107, 108, 110, 115, 118, 120, 122, 124, 131, 133, 137, 139, 142, 144, 147, 149, 152, 153, 156, 157, 161, 165, 167, 171, 174, 175, 176, 179, 181, 184, 185, 186, 188, 189, 191, 193, 194, 199, 200, 201, 203, 205, 206, 207, 211, 212, 213, 218, 223, 228, 232, 233, 241, 242, 243, 245, 246, 248, 249, 253, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 281, 286, 290, 291, 293, 294, 295, 297, 300, 305, 306, 312, 317, 322, 323, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 344, 345, 346, 350, 352, 353, 356, 357, 360, 363, 364, 367, 373, 374, 376, 380, 382, 384, 385, 387, 388, 392, 393, 397, 398, 403, 408, 409, 411, 413, 414, 418, 419, 423, 426, 427, 428, 429, 430, 433, 434, 439, 441, 448, 453, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "es": [5, 85, 317, 342, 462, 466, 467, 468, 470, 472, 481], "et": [5, 79, 101, 179, 335, 339, 374, 411, 462, 465, 467, 470, 481], "alloc": [5, 7, 16, 23, 28, 31, 32, 34, 45, 49, 56, 58, 59, 63, 64, 66, 68, 72, 73, 74, 76, 85, 93, 99, 113, 131, 167, 174, 183, 186, 212, 252, 256, 257, 281, 282, 291, 297, 312, 320, 335, 350, 363, 374, 403, 414, 453, 454, 460, 461, 462, 465, 467, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482], "pymem_fre": [5, 18, 34, 42, 57, 59, 64, 463, 465, 481], "other": [5, 7, 9, 11, 13, 22, 23, 25, 27, 28, 33, 34, 35, 39, 42, 43, 45, 54, 55, 58, 59, 60, 61, 62, 63, 64, 66, 68, 72, 73, 74, 75, 77, 78, 84, 92, 93, 95, 99, 103, 104, 106, 107, 108, 110, 113, 116, 124, 130, 131, 135, 139, 142, 144, 149, 150, 151, 152, 156, 157, 159, 161, 165, 167, 168, 174, 175, 177, 179, 181, 182, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 199, 200, 201, 203, 204, 205, 207, 209, 211, 214, 223, 224, 228, 232, 233, 240, 241, 242, 243, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 273, 276, 278, 281, 285, 286, 287, 291, 294, 295, 296, 300, 305, 306, 307, 311, 312, 313, 317, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 350, 352, 353, 354, 356, 357, 360, 363, 364, 367, 374, 376, 378, 380, 382, 383, 385, 386, 387, 388, 392, 393, 397, 398, 400, 402, 403, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 444, 453, 454, 457, 459, 462, 464, 465, 466, 469, 470, 472, 473, 474, 479, 480, 481, 482], "take": [5, 9, 13, 22, 23, 27, 31, 33, 49, 51, 58, 60, 63, 64, 66, 73, 75, 76, 79, 84, 85, 92, 93, 94, 95, 100, 101, 103, 104, 107, 118, 124, 137, 139, 142, 149, 150, 156, 165, 167, 174, 175, 176, 179, 181, 184, 185, 188, 189, 191, 192, 196, 199, 200, 201, 204, 205, 206, 207, 213, 216, 223, 224, 228, 230, 233, 241, 242, 243, 245, 247, 248, 249, 256, 259, 260, 264, 265, 266, 268, 269, 273, 274, 281, 286, 290, 291, 294, 297, 305, 306, 317, 322, 323, 326, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 342, 343, 345, 346, 350, 353, 356, 359, 360, 362, 367, 373, 374, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 405, 406, 408, 409, 410, 411, 413, 415, 417, 419, 420, 425, 426, 428, 430, 434, 439, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 481], "str": [5, 10, 18, 22, 24, 25, 26, 33, 34, 35, 39, 40, 49, 58, 59, 63, 64, 66, 68, 75, 76, 78, 84, 85, 87, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 106, 107, 110, 112, 118, 120, 124, 134, 140, 144, 147, 153, 156, 158, 161, 165, 167, 173, 175, 179, 180, 181, 182, 184, 186, 188, 189, 193, 194, 195, 199, 200, 201, 203, 206, 207, 209, 211, 219, 221, 223, 224, 232, 233, 234, 235, 238, 240, 242, 245, 249, 250, 252, 253, 256, 257, 259, 260, 264, 265, 266, 268, 281, 282, 286, 289, 290, 291, 294, 297, 304, 316, 317, 329, 333, 336, 338, 339, 343, 345, 346, 350, 351, 356, 360, 361, 362, 365, 376, 377, 380, 383, 384, 386, 387, 392, 396, 398, 400, 403, 408, 411, 412, 417, 420, 423, 425, 426, 428, 433, 438, 439, 440, 441, 442, 444, 447, 448, 449, 450, 453, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "read": [5, 7, 22, 23, 24, 25, 31, 33, 34, 41, 42, 43, 58, 61, 63, 64, 66, 68, 72, 73, 75, 76, 78, 79, 85, 86, 87, 92, 93, 94, 95, 100, 101, 103, 104, 105, 108, 110, 115, 117, 118, 134, 135, 138, 141, 144, 146, 147, 149, 151, 153, 155, 156, 157, 158, 159, 161, 164, 165, 168, 173, 174, 175, 179, 181, 182, 186, 187, 188, 189, 191, 192, 198, 201, 202, 205, 206, 210, 211, 213, 214, 216, 221, 223, 224, 228, 232, 233, 240, 241, 242, 243, 245, 246, 248, 249, 251, 252, 253, 256, 260, 263, 266, 269, 274, 276, 278, 279, 280, 281, 286, 290, 291, 293, 294, 295, 297, 299, 300, 302, 303, 306, 307, 310, 311, 312, 317, 318, 323, 326, 327, 328, 329, 330, 331, 333, 335, 336, 338, 339, 340, 342, 345, 346, 350, 353, 357, 358, 363, 364, 367, 374, 376, 378, 379, 380, 382, 383, 387, 388, 392, 393, 394, 395, 397, 398, 400, 405, 408, 411, 412, 413, 414, 415, 417, 419, 420, 423, 424, 425, 426, 428, 430, 433, 436, 438, 444, 450, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "onli": [5, 7, 9, 10, 13, 22, 23, 26, 28, 31, 33, 34, 35, 39, 41, 42, 43, 45, 49, 51, 54, 58, 59, 60, 61, 63, 64, 66, 68, 71, 72, 73, 75, 76, 77, 79, 84, 85, 87, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 113, 115, 118, 120, 124, 130, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 151, 152, 153, 156, 158, 159, 161, 164, 165, 167, 168, 174, 175, 177, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 216, 219, 223, 224, 226, 228, 230, 232, 233, 240, 241, 242, 243, 246, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 274, 276, 279, 280, 281, 282, 285, 286, 290, 291, 293, 294, 295, 297, 299, 300, 302, 303, 306, 309, 310, 311, 312, 313, 316, 317, 318, 320, 323, 326, 328, 329, 330, 331, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 354, 356, 359, 360, 362, 363, 364, 366, 367, 371, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 441, 443, 447, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 480, 481, 482], "like": [5, 7, 13, 23, 25, 28, 31, 33, 34, 42, 43, 45, 49, 51, 55, 56, 58, 60, 61, 63, 64, 66, 68, 73, 74, 75, 76, 77, 79, 84, 85, 87, 92, 93, 94, 95, 98, 99, 100, 103, 104, 107, 108, 110, 115, 118, 119, 124, 127, 131, 134, 137, 139, 141, 142, 144, 147, 149, 150, 151, 153, 156, 157, 158, 159, 161, 165, 167, 173, 174, 175, 179, 180, 181, 182, 184, 188, 189, 191, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 211, 212, 213, 216, 223, 224, 226, 227, 228, 229, 231, 232, 233, 235, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 276, 281, 290, 291, 292, 293, 294, 295, 297, 299, 302, 305, 306, 307, 308, 309, 311, 312, 317, 319, 322, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 347, 350, 351, 353, 356, 357, 358, 359, 360, 363, 364, 367, 373, 374, 376, 379, 380, 381, 382, 383, 384, 386, 387, 388, 392, 393, 395, 398, 399, 400, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 440, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "char": [5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 39, 40, 41, 42, 43, 45, 48, 49, 51, 53, 54, 58, 59, 60, 61, 63, 64, 66, 72, 73, 75, 76, 79, 97, 119, 144, 156, 174, 175, 200, 245, 260, 280, 342, 343, 345, 365, 367, 384, 411, 426, 438, 463, 465, 466, 467, 470, 475, 478, 479, 481], "pointer": [5, 7, 9, 11, 13, 17, 18, 23, 31, 33, 39, 42, 43, 45, 49, 54, 55, 58, 59, 60, 61, 63, 64, 68, 72, 75, 76, 78, 79, 85, 87, 99, 102, 115, 116, 140, 175, 177, 240, 276, 281, 291, 297, 301, 306, 347, 350, 428, 438, 462, 464, 465, 466, 467, 472, 473, 475, 477, 478, 481], "its": [5, 7, 9, 11, 22, 23, 25, 28, 31, 33, 34, 39, 42, 43, 45, 47, 49, 55, 56, 58, 60, 61, 63, 64, 66, 72, 73, 75, 76, 79, 84, 85, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 124, 131, 133, 134, 135, 137, 141, 142, 147, 149, 150, 152, 153, 156, 161, 164, 165, 167, 168, 174, 175, 176, 179, 181, 182, 184, 186, 189, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 209, 211, 212, 216, 221, 223, 224, 226, 228, 233, 240, 241, 243, 245, 246, 248, 249, 250, 251, 253, 256, 259, 260, 263, 265, 266, 267, 269, 273, 274, 276, 277, 281, 290, 291, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 309, 311, 312, 313, 317, 318, 319, 320, 321, 322, 326, 327, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 353, 356, 358, 360, 362, 363, 364, 367, 371, 373, 374, 376, 378, 379, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 404, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 424, 425, 426, 427, 428, 430, 432, 433, 434, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "borrow": [5, 22, 27, 58, 63, 67, 73, 75, 87, 95, 210, 338, 462, 463, 464, 481], "manag": [5, 17, 28, 33, 42, 61, 63, 68, 74, 76, 87, 100, 108, 118, 122, 124, 126, 135, 137, 142, 149, 156, 162, 174, 182, 184, 186, 189, 192, 201, 211, 216, 223, 241, 243, 245, 248, 250, 252, 254, 265, 269, 276, 282, 283, 291, 293, 296, 297, 306, 313, 326, 327, 328, 335, 336, 339, 346, 350, 353, 356, 357, 358, 360, 363, 366, 372, 374, 382, 386, 387, 388, 393, 400, 401, 417, 419, 420, 424, 425, 429, 432, 457, 458, 459, 460, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "by": [5, 7, 13, 15, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 39, 41, 42, 43, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 84, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 106, 107, 108, 110, 112, 113, 115, 116, 118, 124, 126, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 150, 152, 153, 155, 156, 157, 158, 159, 161, 165, 167, 168, 171, 175, 176, 177, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 221, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 278, 279, 280, 281, 282, 286, 290, 291, 293, 294, 295, 297, 299, 300, 301, 302, 303, 305, 306, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 367, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 438, 439, 441, 447, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481], "share": [5, 7, 33, 35, 41, 42, 45, 58, 63, 64, 68, 71, 73, 76, 77, 79, 84, 94, 97, 99, 101, 102, 105, 113, 116, 118, 131, 136, 162, 179, 181, 184, 210, 213, 224, 228, 233, 257, 259, 264, 265, 276, 282, 290, 291, 292, 294, 297, 309, 320, 324, 328, 335, 336, 338, 340, 342, 343, 350, 352, 356, 363, 364, 367, 373, 386, 387, 424, 425, 426, 428, 430, 438, 453, 454, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 477, 478, 479, 481, 482], "lifetim": [5, 42, 68, 73, 85, 156, 167, 291, 403, 428, 461, 474, 477, 478, 481], "won": [5, 33, 34, 41, 63, 73, 75, 76, 85, 92, 94, 95, 98, 100, 101, 104, 107, 131, 137, 149, 165, 181, 182, 184, 191, 204, 223, 228, 241, 265, 267, 290, 291, 295, 297, 327, 335, 345, 350, 367, 387, 414, 453, 461, 462, 464, 465, 466, 467, 468, 469, 473, 476, 478, 481], "releas": [5, 7, 9, 28, 34, 35, 36, 42, 45, 57, 58, 61, 63, 64, 68, 72, 73, 75, 76, 77, 80, 84, 85, 93, 101, 103, 108, 113, 124, 130, 133, 136, 137, 145, 167, 174, 175, 189, 232, 233, 234, 253, 256, 265, 269, 281, 282, 291, 297, 301, 331, 335, 338, 342, 350, 360, 363, 367, 369, 380, 382, 384, 398, 420, 424, 426, 434, 438, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 482], "yourself": [5, 33, 43, 72, 85, 92, 94, 104, 107, 153, 175, 177, 191, 199, 248, 260, 264, 265, 266, 267, 290, 295, 326, 333, 339, 350, 386, 387, 388, 408, 459, 465, 468, 473], "ensur": [5, 33, 34, 42, 45, 49, 51, 58, 59, 63, 66, 68, 73, 76, 79, 84, 92, 98, 99, 100, 101, 104, 118, 124, 130, 131, 135, 141, 156, 164, 167, 174, 179, 181, 184, 191, 194, 203, 224, 253, 260, 265, 267, 268, 276, 281, 290, 291, 297, 322, 335, 338, 339, 342, 346, 350, 359, 360, 362, 367, 380, 384, 386, 387, 388, 398, 400, 403, 417, 419, 420, 426, 428, 453, 454, 459, 460, 463, 465, 466, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481], "may": [5, 7, 9, 10, 11, 13, 22, 23, 24, 27, 28, 31, 33, 34, 42, 43, 45, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 72, 73, 75, 76, 77, 78, 79, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 124, 126, 130, 131, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 153, 155, 156, 157, 159, 161, 165, 167, 171, 174, 175, 179, 181, 182, 184, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 211, 213, 214, 216, 219, 221, 223, 224, 226, 228, 231, 232, 233, 240, 241, 243, 245, 246, 248, 249, 250, 251, 253, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 274, 276, 277, 279, 280, 281, 285, 286, 290, 291, 293, 294, 295, 297, 299, 300, 303, 305, 309, 310, 311, 312, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 360, 362, 363, 364, 367, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 440, 441, 444, 451, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "safe": [5, 22, 23, 33, 34, 42, 45, 49, 51, 56, 59, 63, 64, 68, 72, 73, 75, 76, 85, 101, 123, 124, 127, 128, 130, 131, 132, 135, 136, 137, 141, 149, 158, 167, 174, 175, 179, 191, 212, 233, 245, 248, 256, 264, 265, 266, 268, 269, 281, 291, 297, 310, 322, 323, 326, 328, 329, 330, 332, 335, 338, 339, 346, 360, 363, 384, 387, 388, 392, 396, 398, 400, 413, 459, 460, 461, 463, 466, 467, 472, 473, 474, 478, 479, 481], "pybufferproc": [5, 61, 63, 75], "bf_releasebuff": [5, 61, 63, 471], "must": [5, 7, 9, 11, 13, 17, 18, 22, 23, 27, 28, 31, 33, 34, 35, 39, 41, 42, 43, 45, 47, 49, 56, 58, 59, 60, 61, 63, 64, 66, 71, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 98, 99, 103, 104, 108, 110, 113, 115, 118, 124, 130, 131, 137, 138, 141, 142, 144, 147, 149, 152, 153, 156, 159, 165, 167, 171, 174, 175, 179, 181, 184, 186, 187, 188, 189, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 211, 212, 216, 221, 223, 224, 226, 228, 230, 232, 233, 240, 241, 243, 245, 246, 248, 253, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 280, 281, 286, 289, 290, 291, 293, 295, 297, 299, 300, 302, 306, 312, 317, 318, 320, 326, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 350, 351, 353, 354, 356, 357, 359, 360, 363, 364, 367, 369, 373, 374, 376, 378, 380, 382, 384, 386, 387, 388, 392, 393, 395, 398, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 440, 441, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481], "disallow": [5, 33, 63, 94, 118, 165, 179, 270, 291, 335, 338, 342, 421, 425, 459, 466, 472, 475, 478, 479, 481], "common": [5, 7, 23, 33, 34, 58, 63, 68, 73, 76, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 107, 108, 113, 118, 126, 137, 156, 158, 165, 167, 174, 179, 181, 188, 191, 193, 198, 199, 201, 203, 205, 206, 211, 213, 214, 233, 240, 241, 243, 245, 249, 257, 259, 260, 263, 265, 269, 270, 273, 274, 281, 290, 291, 293, 297, 305, 329, 330, 331, 333, 336, 338, 339, 344, 345, 346, 352, 356, 359, 360, 362, 363, 364, 367, 371, 373, 382, 384, 386, 387, 392, 393, 397, 398, 406, 415, 417, 419, 420, 423, 424, 425, 426, 428, 429, 430, 433, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482], "bytearray": [5, 7, 8, 33, 34, 64, 68, 78, 85, 87, 119, 131, 143, 144, 159, 174, 180, 189, 211, 213, 223, 233, 235, 252, 256, 259, 260, 272, 276, 282, 297, 302, 316, 335, 339, 345, 384, 392, 398, 417, 422, 425, 426, 428, 448, 453, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481], "but": [5, 7, 9, 13, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 39, 40, 42, 45, 47, 49, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 72, 73, 75, 76, 77, 78, 79, 84, 91, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 124, 126, 130, 131, 135, 137, 139, 141, 142, 144, 149, 150, 152, 153, 156, 157, 159, 165, 167, 174, 175, 179, 181, 182, 184, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 211, 213, 214, 216, 218, 219, 223, 226, 228, 233, 240, 241, 242, 243, 245, 246, 248, 249, 250, 253, 255, 256, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 280, 281, 286, 287, 290, 291, 293, 294, 295, 297, 299, 302, 306, 307, 309, 310, 311, 312, 317, 318, 319, 320, 321, 326, 327, 328, 329, 330, 331, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 351, 353, 356, 358, 360, 362, 363, 364, 367, 371, 373, 374, 375, 376, 379, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 398, 400, 401, 403, 406, 408, 409, 411, 412, 413, 414, 415, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 438, 439, 440, 441, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "also": [5, 7, 11, 13, 23, 26, 28, 30, 31, 33, 34, 35, 40, 42, 45, 49, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 124, 130, 131, 135, 137, 138, 139, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 158, 159, 161, 165, 167, 171, 174, 175, 179, 181, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 211, 212, 213, 214, 216, 218, 219, 223, 224, 226, 228, 231, 232, 233, 239, 240, 241, 242, 243, 245, 246, 248, 249, 251, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 273, 274, 276, 277, 279, 281, 286, 290, 291, 293, 294, 295, 297, 300, 303, 305, 306, 307, 309, 311, 312, 317, 319, 320, 322, 323, 326, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 353, 356, 359, 360, 362, 363, 364, 367, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 447, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "some": [5, 7, 23, 28, 33, 34, 42, 58, 59, 60, 61, 63, 64, 68, 72, 73, 75, 76, 84, 85, 92, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 112, 113, 118, 124, 130, 131, 135, 136, 137, 139, 147, 149, 152, 153, 155, 156, 159, 161, 165, 167, 173, 174, 175, 178, 179, 181, 182, 184, 186, 188, 189, 191, 192, 193, 194, 196, 197, 201, 202, 203, 204, 205, 206, 207, 211, 213, 214, 216, 219, 223, 224, 228, 232, 233, 238, 241, 242, 245, 246, 248, 249, 253, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 280, 281, 286, 290, 291, 293, 294, 295, 297, 300, 305, 306, 309, 312, 317, 320, 326, 327, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 351, 352, 353, 354, 356, 357, 358, 360, 362, 363, 364, 367, 374, 375, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 401, 408, 409, 410, 411, 412, 413, 414, 417, 420, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 441, 447, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "memoryview": [5, 7, 16, 68, 87, 110, 143, 223, 252, 282, 297, 330, 335, 350, 384, 425, 426, 448, 468, 472, 473, 475, 476, 479, 481, 482], "besid": [5, 76, 93, 94, 181, 223, 331, 374, 400, 433, 434, 459, 481], "requir": [5, 7, 23, 28, 33, 35, 42, 45, 51, 58, 59, 63, 64, 68, 71, 72, 73, 75, 76, 79, 84, 85, 89, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 110, 113, 116, 124, 130, 136, 137, 147, 155, 156, 159, 165, 167, 168, 175, 179, 181, 182, 184, 187, 189, 191, 192, 193, 194, 198, 199, 200, 201, 205, 206, 210, 211, 219, 224, 226, 232, 233, 241, 243, 245, 246, 248, 250, 251, 253, 255, 256, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 278, 279, 281, 286, 290, 291, 293, 294, 297, 299, 303, 305, 306, 312, 317, 320, 326, 328, 330, 331, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 354, 356, 359, 360, 363, 364, 367, 373, 374, 376, 379, 382, 383, 384, 385, 386, 387, 392, 393, 395, 397, 400, 403, 408, 411, 412, 413, 414, 415, 417, 419, 420, 423, 424, 425, 426, 428, 429, 430, 433, 434, 439, 451, 453, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "no": [5, 7, 11, 13, 17, 18, 22, 23, 24, 26, 27, 31, 33, 34, 35, 37, 39, 41, 42, 45, 46, 49, 51, 53, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 99, 101, 102, 103, 104, 107, 108, 110, 113, 115, 118, 120, 124, 130, 131, 135, 136, 137, 139, 142, 144, 149, 151, 152, 153, 156, 159, 161, 165, 167, 168, 171, 174, 175, 179, 181, 182, 184, 188, 189, 191, 193, 194, 195, 197, 198, 199, 201, 203, 205, 206, 207, 209, 210, 211, 212, 214, 216, 223, 224, 226, 228, 232, 240, 241, 242, 243, 245, 246, 248, 249, 251, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 281, 282, 286, 290, 291, 293, 294, 295, 297, 299, 300, 303, 305, 306, 307, 309, 311, 312, 316, 317, 318, 319, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 367, 369, 371, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 439, 441, 442, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481], "check": [5, 7, 9, 17, 23, 25, 31, 33, 34, 41, 42, 43, 45, 49, 51, 54, 55, 58, 59, 60, 61, 63, 64, 67, 68, 72, 73, 75, 76, 84, 92, 94, 95, 97, 99, 100, 101, 104, 107, 118, 124, 126, 137, 141, 142, 147, 149, 153, 158, 159, 161, 165, 167, 171, 174, 175, 176, 179, 181, 184, 185, 186, 189, 195, 198, 203, 206, 209, 211, 212, 213, 219, 224, 231, 240, 241, 243, 245, 246, 253, 257, 260, 263, 265, 266, 267, 268, 270, 273, 278, 281, 285, 286, 287, 291, 293, 294, 300, 301, 303, 318, 320, 326, 329, 330, 331, 332, 333, 335, 338, 339, 340, 342, 343, 345, 346, 350, 355, 356, 360, 361, 363, 373, 374, 376, 380, 382, 383, 384, 386, 387, 393, 397, 398, 400, 411, 414, 417, 420, 422, 425, 428, 429, 430, 434, 444, 453, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "verifi": [5, 7, 75, 85, 93, 95, 103, 159, 185, 191, 209, 233, 241, 248, 266, 267, 269, 291, 333, 338, 339, 360, 386, 398, 459, 466, 467, 471, 472, 473, 474, 475, 479, 481], "whether": [5, 7, 9, 11, 13, 17, 23, 31, 45, 58, 59, 63, 64, 73, 79, 85, 92, 93, 95, 98, 99, 100, 103, 104, 107, 113, 118, 131, 137, 141, 142, 147, 149, 150, 152, 153, 155, 156, 157, 159, 165, 167, 174, 175, 179, 181, 184, 187, 189, 191, 194, 200, 205, 206, 218, 223, 228, 232, 233, 241, 242, 245, 248, 253, 256, 257, 259, 264, 266, 267, 269, 270, 273, 274, 281, 290, 291, 293, 294, 295, 297, 300, 305, 306, 309, 312, 317, 322, 326, 330, 331, 332, 333, 335, 336, 338, 339, 342, 344, 345, 346, 350, 356, 360, 363, 364, 367, 374, 378, 382, 384, 385, 386, 392, 393, 398, 400, 403, 408, 413, 418, 419, 420, 424, 425, 426, 427, 428, 430, 434, 453, 454, 459, 462, 463, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 481], "input": [5, 9, 30, 34, 63, 64, 66, 68, 73, 75, 79, 84, 85, 93, 95, 98, 100, 107, 108, 110, 112, 116, 118, 131, 135, 139, 140, 141, 144, 147, 149, 153, 155, 156, 157, 158, 165, 167, 171, 174, 181, 184, 188, 189, 191, 192, 193, 194, 195, 198, 199, 201, 205, 206, 207, 211, 217, 219, 220, 223, 227, 232, 233, 242, 243, 245, 252, 256, 259, 260, 262, 265, 267, 268, 269, 273, 281, 290, 291, 293, 295, 299, 300, 305, 307, 309, 312, 315, 317, 318, 320, 326, 329, 333, 335, 338, 339, 342, 346, 350, 352, 357, 359, 360, 362, 364, 366, 367, 373, 374, 375, 379, 381, 392, 393, 395, 405, 406, 409, 410, 411, 412, 413, 414, 415, 419, 425, 426, 427, 428, 429, 430, 432, 433, 439, 441, 448, 450, 453, 454, 460, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 481], "immut": [5, 9, 10, 28, 33, 35, 60, 63, 64, 68, 85, 87, 93, 99, 120, 159, 173, 174, 179, 181, 184, 206, 219, 223, 224, 253, 265, 289, 291, 294, 425, 428, 440, 447, 460, 463, 464, 465, 466, 467, 468, 472, 479, 480, 481], "would": [5, 7, 23, 31, 33, 34, 47, 49, 58, 59, 61, 64, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 110, 118, 124, 136, 137, 149, 152, 156, 159, 165, 167, 168, 174, 175, 179, 181, 182, 184, 186, 188, 191, 194, 197, 198, 200, 201, 203, 205, 206, 209, 210, 211, 223, 224, 226, 228, 232, 233, 240, 241, 243, 245, 248, 251, 253, 256, 259, 260, 265, 266, 267, 270, 273, 274, 281, 290, 291, 303, 305, 306, 311, 317, 318, 320, 328, 329, 330, 331, 335, 336, 338, 339, 340, 342, 343, 344, 346, 350, 351, 353, 354, 356, 360, 363, 367, 374, 379, 380, 382, 384, 385, 386, 387, 388, 392, 393, 398, 400, 401, 403, 406, 408, 410, 411, 419, 420, 421, 423, 424, 425, 426, 428, 430, 432, 433, 434, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 481], "honor": [5, 113, 249, 295, 350, 356, 418, 457, 466, 467, 477, 481], "writabl": [5, 7, 43, 84, 118, 131, 147, 149, 211, 246, 253, 256, 276, 281, 291, 293, 302, 330, 335, 336, 342, 345, 367, 400, 420, 426, 430, 434, 464, 466, 474, 476, 477, 478, 481], "anoth": [5, 7, 22, 23, 31, 33, 42, 58, 63, 64, 72, 73, 75, 76, 77, 84, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 123, 124, 130, 131, 137, 142, 149, 153, 156, 161, 165, 167, 171, 174, 175, 179, 181, 184, 191, 192, 194, 201, 211, 213, 219, 223, 224, 228, 233, 241, 243, 245, 248, 253, 259, 260, 265, 266, 268, 269, 276, 281, 285, 286, 290, 291, 294, 295, 297, 299, 306, 307, 309, 312, 317, 326, 330, 331, 336, 338, 339, 342, 345, 346, 350, 351, 352, 353, 363, 367, 373, 374, 376, 378, 382, 384, 386, 387, 388, 392, 393, 397, 400, 403, 406, 408, 409, 411, 412, 420, 423, 425, 426, 427, 428, 430, 434, 441, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 476, 477, 479, 480, 481], "thread": [5, 17, 23, 31, 32, 34, 35, 42, 51, 53, 59, 63, 68, 73, 76, 79, 85, 87, 99, 100, 105, 116, 122, 123, 127, 128, 130, 131, 132, 133, 135, 136, 138, 147, 158, 162, 164, 167, 168, 174, 185, 188, 212, 224, 230, 243, 245, 246, 252, 255, 264, 266, 267, 268, 269, 281, 288, 291, 314, 319, 320, 322, 323, 330, 336, 338, 339, 342, 346, 350, 364, 366, 384, 393, 397, 398, 400, 426, 443, 453, 454, 460, 462, 463, 464, 465, 466, 467, 468, 477, 480, 481, 482], "mutat": [5, 22, 63, 85, 99, 165, 179, 194, 224, 248, 256, 281, 328, 342, 384, 388, 398, 462, 464, 475, 481], "variant": [5, 22, 31, 41, 47, 63, 73, 84, 93, 95, 101, 104, 107, 118, 124, 156, 158, 165, 175, 181, 182, 184, 189, 201, 223, 224, 243, 246, 259, 280, 281, 291, 294, 301, 330, 335, 338, 339, 356, 386, 387, 388, 393, 396, 414, 426, 430, 465, 466, 467, 468, 472, 475, 478, 479, 480, 481], "etc": [5, 34, 64, 79, 84, 85, 94, 95, 100, 101, 107, 108, 118, 131, 139, 144, 149, 153, 204, 223, 241, 242, 245, 250, 253, 257, 264, 265, 267, 270, 274, 279, 281, 290, 291, 294, 301, 305, 306, 308, 309, 317, 327, 332, 335, 338, 339, 356, 363, 364, 367, 373, 382, 384, 386, 392, 408, 420, 426, 429, 434, 449, 454, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 479, 480, 481], "py_ssize_t_clean": [5, 35, 59, 72, 73, 76, 465, 470, 479, 481], "defin": [5, 7, 11, 23, 25, 28, 33, 34, 35, 42, 43, 45, 50, 59, 61, 63, 64, 68, 71, 72, 73, 74, 77, 79, 84, 92, 93, 94, 95, 100, 101, 103, 104, 107, 108, 112, 113, 116, 118, 123, 124, 130, 131, 138, 139, 141, 142, 144, 149, 151, 152, 153, 156, 159, 165, 167, 171, 174, 175, 177, 179, 181, 184, 185, 187, 189, 191, 192, 194, 197, 201, 203, 206, 210, 211, 213, 214, 223, 224, 228, 231, 233, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 253, 256, 257, 260, 263, 264, 265, 267, 269, 273, 274, 281, 285, 286, 288, 291, 293, 295, 297, 299, 300, 302, 303, 305, 307, 310, 312, 317, 318, 320, 321, 322, 323, 326, 327, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 353, 354, 356, 359, 360, 363, 364, 367, 373, 374, 375, 378, 379, 382, 383, 385, 386, 387, 388, 392, 393, 395, 398, 400, 401, 403, 406, 408, 409, 411, 412, 413, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 438, 439, 441, 447, 448, 453, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "befor": [5, 7, 13, 17, 22, 23, 27, 28, 31, 32, 34, 42, 45, 51, 55, 56, 58, 59, 60, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 85, 87, 92, 93, 94, 95, 99, 100, 101, 104, 107, 108, 113, 115, 118, 124, 126, 130, 131, 133, 134, 135, 137, 138, 139, 141, 147, 149, 151, 153, 155, 156, 157, 165, 167, 168, 174, 175, 181, 182, 184, 188, 189, 191, 193, 194, 199, 201, 203, 211, 216, 221, 223, 224, 232, 240, 241, 243, 245, 246, 248, 253, 256, 257, 259, 264, 265, 266, 267, 268, 269, 274, 276, 281, 286, 290, 291, 293, 294, 295, 297, 303, 305, 306, 307, 311, 312, 317, 318, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 350, 351, 353, 354, 356, 357, 360, 362, 363, 364, 373, 374, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 403, 408, 409, 410, 411, 412, 413, 414, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 444, 447, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "on": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 39, 40, 41, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 86, 89, 91, 92, 93, 94, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 113, 118, 124, 130, 131, 134, 135, 136, 137, 138, 139, 142, 144, 151, 152, 153, 155, 156, 159, 161, 162, 164, 165, 167, 168, 171, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 210, 211, 213, 218, 219, 222, 223, 226, 230, 231, 232, 233, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 280, 281, 282, 285, 286, 287, 290, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 336, 337, 338, 340, 343, 344, 345, 350, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 366, 367, 369, 371, 373, 374, 376, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 405, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 440, 444, 446, 447, 449, 453, 454, 457, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "older": [5, 33, 61, 63, 68, 73, 75, 92, 101, 103, 117, 118, 162, 175, 184, 188, 200, 228, 233, 245, 249, 250, 266, 286, 291, 293, 295, 297, 312, 326, 338, 339, 350, 352, 360, 367, 375, 384, 393, 413, 420, 428, 430, 460, 463, 466, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481], "length": [5, 7, 9, 22, 23, 24, 34, 35, 49, 54, 55, 56, 58, 59, 60, 63, 64, 68, 73, 75, 79, 85, 92, 93, 94, 95, 97, 99, 101, 107, 108, 115, 118, 119, 139, 140, 141, 144, 156, 172, 174, 175, 182, 184, 188, 189, 193, 194, 199, 200, 203, 205, 206, 213, 223, 240, 243, 246, 252, 256, 257, 259, 260, 266, 267, 268, 269, 273, 276, 281, 290, 291, 306, 312, 317, 318, 326, 330, 333, 335, 338, 339, 343, 345, 350, 356, 359, 362, 363, 364, 374, 383, 384, 386, 391, 393, 398, 403, 406, 408, 413, 417, 420, 421, 422, 425, 426, 428, 433, 434, 453, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 79, 84, 87, 88, 89, 93, 94, 97, 98, 99, 100, 101, 103, 104, 110, 111, 112, 118, 119, 120, 124, 125, 137, 138, 153, 158, 164, 165, 168, 174, 179, 181, 182, 184, 188, 191, 209, 211, 219, 221, 223, 224, 234, 238, 246, 252, 253, 256, 257, 260, 265, 273, 279, 282, 287, 289, 290, 291, 293, 297, 302, 304, 314, 316, 317, 324, 326, 335, 338, 341, 343, 345, 349, 350, 351, 356, 364, 365, 376, 377, 380, 382, 383, 384, 386, 387, 396, 400, 403, 405, 408, 409, 410, 411, 417, 425, 426, 427, 428, 438, 439, 441, 444, 447, 448, 449, 453, 454, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481], "exist": [5, 9, 22, 23, 25, 31, 33, 34, 39, 42, 55, 58, 59, 63, 64, 66, 67, 68, 72, 73, 76, 79, 84, 85, 93, 94, 95, 98, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 124, 126, 134, 137, 142, 147, 149, 153, 156, 158, 159, 161, 165, 167, 174, 179, 181, 182, 187, 189, 191, 192, 194, 198, 203, 204, 206, 209, 210, 211, 214, 216, 223, 224, 228, 232, 233, 234, 241, 242, 245, 246, 248, 249, 250, 251, 253, 255, 256, 257, 259, 265, 266, 267, 268, 269, 270, 274, 276, 279, 281, 282, 285, 286, 290, 291, 292, 293, 294, 295, 297, 300, 306, 311, 317, 318, 322, 328, 330, 331, 332, 335, 338, 339, 340, 341, 342, 343, 345, 346, 350, 352, 353, 356, 358, 360, 364, 367, 370, 373, 374, 382, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 405, 408, 411, 417, 419, 420, 421, 423, 425, 426, 427, 428, 430, 433, 434, 451, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "store": [5, 7, 11, 13, 25, 27, 28, 33, 34, 41, 42, 49, 56, 58, 61, 63, 64, 68, 73, 75, 76, 79, 84, 85, 93, 95, 99, 100, 101, 104, 107, 108, 115, 118, 120, 131, 132, 139, 152, 156, 158, 165, 168, 171, 174, 175, 179, 181, 182, 184, 189, 191, 194, 195, 198, 199, 201, 203, 206, 241, 243, 245, 246, 248, 251, 253, 256, 259, 265, 268, 269, 270, 274, 276, 281, 282, 286, 291, 296, 297, 312, 326, 327, 328, 333, 335, 336, 338, 339, 340, 342, 345, 350, 353, 356, 360, 363, 373, 374, 378, 379, 380, 382, 383, 384, 386, 388, 393, 400, 403, 408, 411, 417, 419, 420, 423, 425, 426, 428, 429, 430, 433, 434, 441, 446, 453, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481], "contain": [5, 7, 9, 13, 18, 22, 23, 25, 28, 31, 33, 34, 40, 41, 42, 49, 51, 54, 55, 58, 59, 60, 61, 63, 64, 68, 72, 73, 75, 76, 77, 78, 79, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 115, 116, 124, 131, 137, 139, 141, 142, 144, 147, 149, 150, 155, 156, 157, 161, 165, 167, 168, 174, 175, 176, 179, 180, 181, 182, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 223, 224, 228, 232, 233, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 260, 264, 265, 266, 267, 268, 269, 270, 272, 274, 276, 277, 279, 281, 285, 286, 288, 289, 290, 291, 293, 294, 295, 297, 300, 302, 303, 305, 306, 309, 310, 311, 312, 317, 320, 322, 326, 328, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 352, 353, 356, 359, 360, 362, 363, 364, 367, 373, 374, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 438, 439, 440, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "embed": [5, 7, 9, 33, 35, 45, 57, 61, 64, 68, 73, 74, 79, 92, 93, 99, 104, 107, 126, 133, 161, 175, 197, 200, 257, 264, 278, 279, 291, 306, 342, 346, 364, 367, 373, 398, 413, 418, 419, 433, 449, 459, 461, 462, 465, 466, 467, 473, 475, 478, 479, 480, 481, 482], "code": [5, 7, 9, 11, 12, 13, 22, 23, 26, 27, 31, 34, 35, 39, 41, 42, 45, 48, 51, 55, 56, 59, 60, 63, 64, 66, 68, 72, 73, 75, 76, 77, 78, 79, 80, 84, 87, 91, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 110, 116, 119, 126, 128, 130, 131, 133, 135, 137, 139, 140, 141, 142, 144, 149, 150, 154, 156, 161, 165, 166, 167, 168, 173, 174, 175, 178, 179, 181, 182, 184, 185, 186, 188, 189, 191, 194, 200, 201, 203, 204, 206, 210, 211, 212, 213, 219, 221, 223, 224, 226, 228, 233, 234, 239, 240, 241, 243, 246, 249, 252, 255, 257, 259, 260, 264, 265, 266, 267, 268, 269, 272, 276, 277, 278, 281, 285, 286, 290, 291, 293, 294, 295, 297, 300, 306, 307, 309, 310, 311, 312, 313, 317, 318, 322, 323, 328, 329, 330, 331, 332, 333, 335, 338, 339, 344, 345, 346, 349, 350, 352, 354, 360, 362, 363, 364, 366, 367, 373, 374, 375, 376, 378, 379, 380, 383, 384, 387, 388, 391, 392, 393, 395, 397, 400, 406, 408, 409, 411, 412, 413, 417, 418, 419, 420, 421, 424, 425, 427, 428, 429, 430, 432, 433, 434, 440, 443, 446, 452, 453, 454, 456, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 475, 477, 478, 479, 481, 482], "point": [5, 7, 16, 17, 22, 23, 31, 33, 34, 39, 41, 42, 43, 45, 47, 55, 58, 60, 63, 64, 66, 68, 73, 77, 79, 84, 85, 87, 92, 93, 95, 99, 100, 101, 104, 107, 113, 114, 124, 131, 135, 136, 137, 139, 142, 151, 152, 156, 158, 160, 161, 165, 167, 168, 174, 175, 179, 181, 187, 188, 191, 194, 198, 200, 201, 203, 204, 207, 211, 219, 223, 230, 233, 245, 248, 252, 259, 260, 264, 265, 266, 267, 269, 272, 273, 276, 278, 279, 281, 288, 290, 291, 292, 294, 295, 297, 300, 306, 317, 320, 326, 329, 330, 331, 335, 338, 339, 341, 342, 343, 344, 345, 350, 352, 353, 356, 360, 363, 364, 367, 370, 374, 376, 379, 382, 384, 386, 387, 388, 393, 397, 401, 406, 409, 410, 411, 412, 419, 421, 423, 425, 426, 427, 428, 430, 434, 439, 440, 442, 447, 454, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "doe": [5, 9, 13, 22, 23, 25, 26, 27, 28, 31, 33, 34, 35, 42, 45, 49, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 84, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 108, 113, 118, 124, 131, 137, 138, 141, 144, 147, 149, 151, 155, 156, 159, 161, 165, 167, 174, 175, 177, 179, 181, 182, 184, 186, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 205, 206, 209, 211, 218, 219, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 245, 248, 249, 250, 251, 253, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 274, 276, 281, 286, 290, 291, 293, 294, 295, 297, 299, 300, 306, 307, 309, 312, 317, 320, 326, 328, 329, 330, 331, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 351, 352, 354, 356, 360, 362, 363, 364, 366, 374, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 404, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 438, 440, 447, 450, 453, 454, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "valueerror": [5, 9, 18, 23, 39, 41, 58, 64, 85, 93, 94, 98, 100, 108, 112, 113, 118, 119, 120, 124, 132, 136, 141, 142, 145, 148, 149, 155, 156, 157, 158, 161, 164, 165, 171, 173, 174, 179, 181, 184, 191, 194, 195, 197, 201, 203, 206, 207, 208, 209, 211, 221, 223, 225, 230, 241, 246, 248, 253, 256, 257, 259, 260, 265, 266, 272, 273, 276, 281, 282, 286, 290, 291, 292, 294, 300, 303, 312, 314, 316, 320, 323, 327, 328, 330, 331, 333, 335, 338, 339, 341, 342, 343, 346, 349, 350, 351, 363, 364, 377, 385, 386, 387, 392, 393, 397, 406, 408, 420, 423, 425, 428, 439, 440, 441, 444, 448, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "rais": [5, 7, 9, 13, 22, 24, 25, 26, 28, 32, 33, 34, 37, 39, 45, 47, 49, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 73, 75, 76, 78, 92, 93, 94, 95, 98, 101, 103, 105, 107, 108, 110, 112, 113, 118, 120, 123, 124, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 145, 147, 149, 151, 152, 155, 156, 157, 158, 161, 165, 167, 168, 171, 173, 174, 175, 179, 181, 182, 184, 189, 191, 192, 194, 195, 196, 197, 198, 200, 201, 203, 204, 206, 207, 211, 213, 216, 219, 221, 223, 224, 226, 228, 231, 232, 233, 234, 240, 241, 242, 243, 245, 246, 248, 250, 251, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 276, 279, 280, 281, 285, 286, 289, 291, 293, 294, 295, 297, 300, 302, 303, 305, 309, 312, 317, 320, 321, 323, 326, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 342, 343, 345, 346, 350, 351, 353, 354, 356, 357, 360, 363, 364, 367, 376, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 411, 412, 413, 414, 417, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 433, 438, 439, 440, 441, 453, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "utf": [5, 16, 22, 23, 26, 30, 31, 33, 34, 40, 45, 49, 59, 68, 87, 100, 101, 107, 116, 118, 120, 143, 149, 165, 173, 186, 188, 194, 195, 203, 204, 206, 207, 216, 221, 223, 233, 246, 248, 249, 250, 256, 260, 263, 264, 282, 284, 286, 295, 296, 297, 303, 305, 312, 328, 335, 336, 339, 342, 350, 356, 376, 392, 393, 396, 397, 405, 409, 411, 417, 419, 420, 426, 430, 433, 439, 444, 446, 453, 454, 456, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481], "encod": [5, 14, 16, 22, 23, 24, 26, 30, 31, 33, 34, 40, 45, 49, 58, 59, 66, 68, 71, 77, 84, 87, 92, 97, 100, 101, 103, 104, 108, 118, 119, 124, 131, 134, 139, 141, 143, 144, 147, 148, 149, 151, 154, 165, 168, 173, 174, 175, 176, 182, 184, 186, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 211, 212, 216, 221, 223, 228, 232, 233, 240, 242, 246, 248, 249, 250, 251, 253, 254, 256, 263, 264, 265, 266, 267, 268, 274, 283, 291, 293, 294, 295, 296, 297, 302, 305, 307, 312, 315, 328, 333, 335, 339, 342, 345, 346, 347, 350, 354, 356, 357, 358, 360, 367, 375, 376, 384, 393, 395, 405, 406, 409, 411, 413, 414, 415, 417, 418, 419, 420, 426, 430, 443, 444, 453, 459, 460, 461, 462, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "convers": [5, 9, 18, 33, 34, 63, 64, 68, 72, 92, 93, 116, 118, 120, 131, 141, 144, 156, 165, 181, 184, 193, 223, 252, 254, 256, 260, 264, 269, 274, 288, 290, 291, 297, 335, 339, 343, 345, 346, 350, 356, 376, 383, 387, 392, 395, 424, 425, 429, 431, 433, 448, 453, 459, 465, 466, 467, 468, 469, 470, 473, 475, 476, 478, 479, 480, 481, 482], "fail": [5, 7, 9, 11, 23, 24, 31, 33, 35, 41, 42, 45, 47, 56, 64, 68, 72, 73, 76, 79, 84, 85, 94, 101, 103, 104, 108, 118, 136, 137, 149, 151, 152, 167, 174, 181, 186, 188, 191, 207, 211, 213, 242, 243, 245, 247, 248, 253, 255, 256, 259, 260, 264, 266, 268, 269, 270, 276, 281, 290, 291, 293, 294, 295, 300, 305, 317, 320, 326, 328, 330, 331, 332, 333, 334, 335, 338, 339, 342, 343, 346, 350, 356, 360, 363, 367, 380, 384, 386, 393, 403, 406, 411, 414, 417, 420, 423, 425, 426, 427, 429, 430, 434, 441, 453, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 481], "unicodeerror": [5, 23, 87, 156, 181, 200, 211, 291, 342, 448, 463, 468], "accept": [5, 23, 28, 31, 33, 58, 61, 64, 66, 67, 68, 73, 75, 76, 79, 85, 89, 92, 95, 98, 101, 103, 104, 105, 107, 108, 115, 118, 124, 131, 135, 137, 139, 141, 144, 147, 149, 152, 153, 156, 161, 165, 167, 171, 174, 175, 176, 179, 181, 182, 184, 188, 189, 191, 199, 203, 204, 206, 207, 211, 213, 219, 223, 224, 226, 232, 233, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 276, 280, 281, 290, 291, 293, 297, 312, 317, 322, 326, 327, 328, 330, 331, 333, 336, 338, 339, 342, 346, 350, 356, 360, 362, 364, 373, 374, 376, 378, 380, 383, 384, 386, 392, 393, 395, 401, 403, 405, 409, 411, 414, 417, 419, 420, 424, 425, 426, 428, 430, 433, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "want": [5, 7, 23, 25, 33, 34, 56, 63, 72, 73, 75, 76, 77, 79, 84, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 113, 118, 124, 130, 134, 139, 141, 142, 149, 150, 153, 155, 157, 165, 167, 174, 175, 178, 181, 188, 191, 194, 198, 199, 200, 203, 206, 213, 216, 223, 224, 226, 228, 233, 240, 241, 243, 245, 246, 248, 249, 253, 264, 265, 266, 267, 270, 274, 276, 281, 290, 291, 295, 297, 300, 306, 311, 317, 326, 327, 330, 331, 333, 335, 336, 338, 339, 342, 343, 346, 350, 353, 356, 362, 363, 367, 379, 382, 384, 386, 387, 388, 392, 393, 398, 400, 411, 419, 420, 423, 424, 426, 427, 430, 439, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 477, 479, 480, 481], "filesystem": [5, 23, 33, 34, 59, 64, 66, 68, 87, 107, 118, 124, 141, 165, 211, 213, 214, 248, 264, 269, 281, 291, 294, 295, 300, 322, 330, 339, 350, 353, 356, 360, 386, 387, 397, 398, 419, 420, 453, 459, 461, 467, 472, 475, 478, 481], "path": [5, 23, 24, 31, 32, 33, 35, 39, 59, 64, 68, 72, 73, 76, 84, 85, 87, 93, 95, 97, 99, 100, 101, 103, 107, 109, 112, 117, 118, 124, 134, 137, 140, 142, 146, 147, 149, 161, 165, 167, 174, 182, 188, 191, 198, 208, 211, 213, 217, 218, 221, 223, 228, 229, 232, 240, 241, 242, 243, 245, 247, 249, 250, 251, 252, 253, 256, 259, 263, 264, 265, 266, 267, 268, 269, 274, 277, 278, 279, 281, 284, 286, 290, 291, 295, 300, 306, 309, 310, 311, 313, 318, 322, 325, 328, 329, 330, 332, 333, 335, 338, 339, 340, 346, 350, 354, 356, 358, 360, 364, 367, 382, 384, 386, 387, 392, 393, 397, 398, 401, 403, 405, 411, 414, 417, 418, 419, 421, 423, 426, 431, 434, 436, 448, 450, 451, 453, 454, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 469, 471, 473, 474, 475, 476, 478, 480, 481], "them": [5, 7, 22, 23, 33, 34, 45, 59, 63, 64, 66, 68, 71, 73, 76, 77, 84, 85, 91, 92, 94, 95, 98, 99, 100, 104, 107, 108, 110, 118, 124, 126, 132, 137, 149, 153, 156, 157, 159, 161, 165, 167, 168, 174, 175, 179, 181, 182, 184, 186, 189, 191, 193, 194, 199, 204, 206, 212, 214, 223, 224, 228, 233, 241, 242, 245, 246, 248, 249, 253, 256, 264, 265, 266, 267, 269, 281, 286, 290, 291, 293, 294, 297, 305, 306, 317, 320, 322, 326, 328, 333, 335, 338, 339, 340, 342, 345, 346, 350, 351, 353, 356, 357, 360, 362, 363, 367, 373, 374, 380, 382, 384, 386, 387, 388, 398, 403, 408, 409, 410, 411, 420, 425, 426, 428, 429, 430, 432, 434, 447, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "prefer": [5, 22, 23, 28, 31, 34, 43, 49, 61, 63, 68, 85, 94, 95, 101, 108, 118, 124, 137, 159, 165, 175, 181, 184, 200, 203, 211, 223, 248, 253, 256, 259, 264, 269, 281, 290, 291, 297, 311, 330, 338, 339, 341, 342, 346, 350, 353, 360, 362, 363, 364, 366, 374, 382, 383, 384, 401, 403, 414, 419, 424, 430, 454, 457, 459, 465, 467, 472, 473, 474, 476, 477, 478, 479, 481], "pyunicode_fsconvert": [5, 57, 64, 477, 481], "previous": [5, 7, 9, 11, 13, 17, 22, 23, 26, 27, 28, 33, 40, 42, 47, 58, 59, 61, 63, 64, 72, 73, 75, 76, 79, 84, 85, 92, 95, 100, 101, 104, 107, 118, 124, 130, 131, 137, 138, 142, 147, 149, 156, 165, 167, 168, 171, 174, 175, 179, 181, 184, 188, 189, 191, 205, 206, 211, 212, 214, 219, 224, 228, 240, 243, 245, 248, 253, 256, 259, 263, 265, 267, 268, 269, 274, 276, 280, 281, 282, 290, 291, 295, 297, 309, 312, 317, 327, 328, 329, 331, 333, 335, 338, 339, 342, 345, 350, 353, 354, 356, 360, 362, 363, 364, 373, 374, 378, 380, 382, 383, 384, 386, 388, 392, 393, 398, 403, 408, 411, 418, 420, 421, 424, 425, 426, 427, 430, 434, 444, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "typeerror": [5, 9, 22, 23, 39, 41, 47, 48, 49, 54, 55, 58, 59, 61, 63, 64, 67, 73, 75, 76, 85, 89, 93, 94, 95, 98, 107, 108, 118, 119, 120, 127, 141, 165, 166, 167, 170, 174, 179, 181, 182, 184, 191, 194, 195, 196, 197, 203, 204, 209, 211, 223, 231, 248, 253, 256, 257, 260, 266, 272, 273, 276, 289, 290, 291, 294, 302, 316, 342, 350, 364, 384, 386, 387, 392, 396, 400, 409, 411, 417, 420, 425, 426, 428, 434, 439, 440, 441, 447, 448, 449, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481], "was": [5, 7, 9, 11, 13, 17, 22, 23, 26, 27, 31, 33, 42, 45, 49, 54, 56, 58, 59, 60, 61, 63, 64, 66, 73, 75, 76, 77, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 123, 124, 130, 131, 135, 137, 138, 139, 141, 142, 147, 149, 150, 153, 155, 156, 159, 161, 165, 167, 168, 175, 179, 181, 184, 186, 188, 189, 191, 194, 197, 199, 200, 203, 204, 205, 211, 212, 216, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 245, 246, 248, 249, 250, 253, 256, 257, 264, 265, 266, 267, 268, 269, 270, 273, 276, 280, 281, 282, 286, 290, 291, 293, 294, 295, 297, 300, 305, 306, 309, 311, 312, 317, 318, 319, 320, 326, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 360, 362, 363, 364, 367, 374, 375, 376, 378, 380, 382, 383, 384, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 406, 408, 411, 412, 413, 417, 418, 420, 421, 423, 424, 425, 426, 428, 430, 432, 433, 434, 439, 441, 450, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "were": [5, 7, 9, 17, 23, 26, 33, 58, 61, 63, 66, 73, 75, 76, 93, 95, 100, 101, 104, 110, 118, 124, 131, 137, 138, 142, 149, 156, 158, 165, 167, 175, 179, 181, 184, 186, 188, 189, 191, 194, 197, 198, 199, 201, 203, 205, 206, 211, 214, 223, 226, 233, 242, 245, 248, 249, 253, 260, 265, 266, 273, 274, 276, 281, 291, 293, 297, 306, 312, 317, 328, 331, 333, 335, 336, 338, 342, 343, 345, 346, 350, 351, 354, 356, 357, 360, 367, 374, 378, 379, 380, 382, 384, 386, 388, 392, 393, 398, 410, 411, 421, 425, 426, 427, 428, 430, 432, 433, 434, 439, 441, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "encount": [5, 9, 55, 63, 104, 107, 118, 149, 151, 184, 191, 197, 203, 206, 210, 211, 226, 238, 242, 253, 265, 266, 270, 290, 295, 297, 309, 312, 317, 329, 330, 336, 338, 342, 346, 357, 374, 382, 384, 386, 398, 411, 413, 430, 460, 463, 464, 465, 466, 472, 473, 474, 479, 481], "well": [5, 23, 49, 63, 64, 73, 75, 76, 77, 79, 84, 85, 93, 94, 95, 99, 100, 101, 103, 104, 105, 107, 108, 118, 130, 131, 135, 139, 141, 142, 144, 149, 150, 152, 155, 156, 165, 167, 174, 175, 181, 182, 184, 189, 191, 192, 195, 198, 201, 202, 206, 211, 213, 216, 223, 224, 226, 228, 232, 233, 241, 245, 249, 255, 256, 257, 259, 265, 266, 267, 268, 269, 274, 277, 282, 286, 290, 291, 297, 305, 317, 319, 322, 327, 330, 333, 338, 339, 340, 341, 342, 346, 350, 352, 356, 359, 360, 362, 367, 371, 373, 376, 379, 380, 381, 382, 383, 384, 386, 387, 392, 400, 408, 411, 412, 413, 414, 417, 423, 425, 426, 428, 430, 434, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "into": [5, 9, 13, 22, 23, 25, 26, 33, 34, 41, 49, 55, 58, 59, 61, 63, 64, 68, 72, 73, 76, 79, 84, 85, 92, 93, 94, 98, 100, 103, 104, 107, 110, 118, 124, 131, 132, 135, 136, 137, 138, 139, 142, 144, 147, 149, 151, 155, 156, 158, 161, 165, 167, 174, 175, 179, 181, 184, 185, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 206, 207, 209, 211, 212, 213, 220, 221, 223, 224, 228, 240, 242, 243, 245, 246, 248, 249, 250, 252, 253, 254, 256, 257, 259, 260, 264, 265, 266, 267, 269, 270, 274, 276, 279, 280, 281, 282, 290, 291, 293, 294, 295, 296, 297, 303, 305, 306, 307, 309, 310, 312, 317, 318, 329, 330, 331, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 350, 351, 353, 356, 360, 362, 363, 364, 367, 373, 374, 375, 376, 378, 379, 380, 383, 384, 385, 386, 387, 388, 393, 395, 397, 398, 400, 403, 406, 408, 409, 410, 411, 413, 415, 417, 419, 420, 425, 426, 428, 430, 433, 434, 450, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "two": [5, 7, 9, 14, 20, 23, 25, 28, 31, 33, 34, 37, 41, 42, 45, 47, 58, 63, 64, 67, 68, 72, 73, 75, 76, 77, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 115, 118, 124, 130, 131, 137, 139, 141, 142, 144, 149, 152, 153, 155, 156, 157, 158, 161, 165, 171, 173, 174, 175, 176, 179, 181, 184, 187, 188, 189, 191, 192, 193, 194, 198, 200, 205, 206, 207, 209, 211, 214, 216, 219, 223, 224, 226, 228, 233, 241, 243, 245, 246, 247, 248, 253, 256, 257, 258, 259, 264, 265, 266, 269, 273, 274, 276, 281, 282, 286, 290, 291, 293, 295, 297, 299, 303, 306, 310, 312, 316, 317, 320, 322, 323, 328, 330, 331, 332, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 350, 353, 356, 359, 360, 362, 363, 364, 371, 373, 374, 376, 380, 382, 384, 385, 386, 387, 388, 392, 397, 398, 400, 403, 405, 406, 408, 411, 414, 419, 420, 423, 425, 426, 428, 429, 430, 432, 433, 434, 438, 439, 440, 447, 449, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "second": [5, 20, 22, 23, 33, 58, 64, 67, 73, 75, 76, 77, 84, 85, 92, 93, 94, 95, 100, 101, 103, 104, 107, 108, 110, 113, 115, 124, 127, 132, 133, 134, 136, 137, 139, 149, 156, 165, 167, 174, 175, 181, 184, 188, 189, 191, 193, 198, 201, 206, 207, 209, 211, 212, 213, 216, 219, 223, 226, 228, 233, 240, 241, 245, 246, 248, 253, 256, 265, 266, 267, 269, 270, 273, 274, 280, 281, 282, 290, 291, 293, 295, 297, 299, 300, 303, 305, 306, 316, 317, 320, 323, 326, 327, 329, 330, 331, 333, 335, 336, 338, 339, 342, 345, 346, 350, 353, 356, 357, 359, 360, 363, 364, 374, 376, 382, 384, 386, 387, 392, 393, 394, 405, 411, 417, 420, 426, 428, 429, 430, 433, 434, 440, 444, 447, 454, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 476, 477, 478, 479, 481], "set": [5, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 27, 28, 31, 33, 34, 39, 41, 42, 45, 49, 55, 56, 58, 59, 60, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 79, 81, 84, 85, 87, 92, 93, 94, 95, 98, 99, 100, 101, 104, 107, 108, 110, 113, 115, 118, 120, 127, 131, 133, 134, 135, 136, 137, 142, 147, 149, 150, 151, 152, 153, 155, 156, 158, 159, 161, 164, 165, 167, 168, 171, 174, 175, 176, 177, 179, 180, 181, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 199, 200, 201, 203, 204, 205, 206, 207, 209, 211, 212, 213, 220, 221, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 246, 249, 250, 252, 253, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 281, 286, 290, 291, 293, 294, 295, 297, 299, 303, 305, 306, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 326, 328, 329, 330, 332, 333, 335, 336, 338, 339, 340, 343, 344, 346, 347, 350, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 366, 371, 372, 373, 374, 375, 378, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 399, 400, 401, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 425, 427, 429, 430, 433, 434, 438, 443, 446, 448, 450, 453, 454, 456, 457, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "buf": [5, 7, 42, 124, 213, 233, 282, 339, 342, 356, 465], "member": [5, 26, 30, 31, 33, 34, 35, 45, 50, 56, 59, 61, 63, 68, 73, 75, 76, 110, 147, 161, 165, 174, 175, 179, 182, 189, 209, 211, 231, 232, 242, 243, 246, 259, 266, 268, 291, 297, 309, 311, 313, 330, 335, 337, 338, 339, 340, 342, 345, 350, 356, 360, 364, 376, 383, 384, 386, 387, 420, 425, 426, 428, 463, 464, 465, 466, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481], "doesn": [5, 7, 22, 23, 33, 34, 43, 56, 63, 72, 73, 76, 77, 79, 85, 92, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 118, 130, 131, 133, 142, 149, 156, 167, 171, 174, 181, 182, 184, 191, 194, 196, 198, 203, 209, 211, 212, 223, 224, 241, 248, 249, 253, 256, 257, 264, 265, 266, 267, 290, 291, 294, 295, 297, 300, 303, 312, 317, 320, 321, 326, 328, 330, 331, 332, 333, 335, 337, 338, 339, 342, 343, 346, 350, 356, 360, 363, 367, 382, 383, 385, 386, 387, 388, 398, 403, 417, 421, 426, 428, 430, 439, 447, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "recommend": [5, 33, 42, 45, 63, 64, 68, 72, 73, 75, 76, 85, 91, 94, 95, 100, 103, 107, 118, 124, 130, 131, 137, 141, 156, 165, 171, 174, 179, 181, 184, 191, 194, 211, 223, 228, 233, 240, 243, 245, 246, 248, 253, 260, 265, 273, 286, 291, 293, 297, 306, 312, 317, 322, 329, 330, 335, 336, 338, 339, 346, 350, 356, 364, 367, 382, 384, 386, 392, 408, 409, 413, 414, 420, 423, 426, 430, 433, 454, 459, 460, 462, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "binari": [5, 7, 34, 41, 42, 47, 57, 63, 66, 68, 75, 78, 84, 85, 87, 94, 101, 107, 113, 116, 120, 124, 139, 141, 143, 147, 166, 174, 184, 189, 192, 194, 195, 196, 198, 199, 201, 203, 205, 206, 213, 219, 221, 223, 228, 232, 233, 243, 248, 250, 251, 252, 253, 254, 257, 259, 260, 264, 266, 267, 268, 269, 272, 273, 279, 280, 281, 283, 286, 290, 291, 294, 297, 300, 302, 335, 343, 346, 350, 353, 356, 367, 384, 393, 395, 397, 400, 403, 411, 414, 418, 419, 420, 423, 424, 426, 431, 434, 437, 443, 444, 454, 457, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pybytesobject": [5, 9, 13, 64, 466, 471, 472, 481], "attempt": [5, 11, 23, 25, 31, 33, 47, 59, 61, 63, 67, 85, 92, 94, 98, 101, 104, 107, 108, 118, 124, 131, 138, 147, 153, 165, 167, 171, 175, 182, 184, 188, 189, 191, 192, 194, 197, 201, 203, 204, 205, 207, 210, 211, 223, 224, 240, 241, 245, 246, 248, 253, 256, 263, 264, 266, 267, 268, 269, 276, 280, 281, 291, 293, 297, 300, 303, 305, 309, 311, 312, 317, 318, 320, 323, 326, 330, 331, 332, 333, 335, 336, 338, 339, 342, 345, 350, 356, 357, 360, 362, 363, 364, 384, 386, 387, 392, 393, 408, 411, 413, 414, 415, 420, 421, 425, 426, 428, 430, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 476, 477, 478, 479, 480, 481], "declar": [5, 33, 35, 58, 63, 68, 73, 75, 76, 78, 84, 85, 95, 101, 107, 126, 137, 165, 167, 168, 174, 223, 224, 238, 248, 253, 266, 290, 297, 312, 329, 336, 338, 342, 384, 386, 400, 401, 408, 409, 411, 413, 414, 423, 425, 426, 427, 428, 429, 434, 463, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pybytearrayobject": [5, 8], "implement": [5, 9, 13, 23, 28, 31, 32, 33, 39, 42, 45, 49, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 85, 87, 88, 91, 92, 93, 94, 95, 99, 100, 104, 107, 108, 118, 126, 130, 131, 135, 137, 141, 142, 149, 153, 155, 156, 159, 165, 168, 171, 174, 179, 180, 181, 182, 184, 189, 191, 194, 201, 203, 205, 206, 210, 211, 212, 216, 218, 219, 221, 223, 224, 228, 232, 233, 235, 240, 241, 242, 243, 245, 246, 249, 250, 251, 252, 253, 256, 257, 259, 264, 265, 266, 267, 269, 271, 273, 278, 279, 280, 281, 283, 286, 290, 291, 294, 297, 300, 303, 305, 306, 307, 310, 312, 313, 317, 318, 322, 323, 326, 327, 328, 329, 330, 331, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 351, 353, 354, 356, 357, 360, 363, 364, 367, 372, 374, 376, 377, 379, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 408, 411, 412, 413, 414, 415, 417, 420, 421, 423, 425, 427, 428, 430, 431, 433, 434, 439, 440, 448, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 479, 480, 481, 482], "write": [5, 7, 23, 25, 28, 33, 34, 41, 42, 43, 51, 58, 59, 63, 64, 68, 72, 74, 75, 76, 78, 79, 84, 86, 87, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 110, 115, 117, 118, 124, 128, 133, 134, 135, 137, 138, 140, 141, 147, 149, 153, 155, 156, 159, 161, 165, 167, 168, 173, 174, 175, 178, 182, 185, 187, 188, 191, 194, 198, 199, 203, 206, 211, 213, 216, 220, 221, 223, 224, 226, 228, 232, 234, 241, 243, 244, 245, 246, 248, 252, 253, 256, 257, 260, 265, 266, 267, 269, 276, 279, 281, 286, 290, 291, 293, 294, 296, 297, 299, 302, 303, 305, 306, 307, 309, 318, 326, 327, 328, 329, 330, 331, 335, 336, 339, 340, 342, 345, 346, 350, 353, 354, 357, 358, 360, 361, 363, 367, 369, 374, 376, 378, 380, 382, 384, 386, 387, 388, 395, 397, 398, 403, 405, 408, 409, 411, 413, 415, 417, 419, 420, 424, 425, 426, 429, 430, 434, 439, 444, 448, 449, 450, 453, 459, 460, 461, 462, 463, 464, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "interfac": [5, 7, 28, 31, 32, 33, 43, 51, 57, 59, 63, 64, 66, 68, 72, 73, 75, 80, 84, 85, 92, 93, 95, 100, 101, 103, 104, 107, 108, 116, 117, 118, 124, 130, 131, 141, 147, 151, 153, 156, 159, 165, 167, 168, 171, 174, 175, 178, 182, 183, 185, 187, 191, 192, 194, 195, 201, 202, 203, 204, 205, 210, 212, 213, 216, 220, 226, 228, 231, 232, 233, 240, 241, 243, 245, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 262, 264, 265, 268, 269, 271, 274, 279, 281, 290, 293, 295, 297, 300, 302, 303, 306, 310, 312, 313, 323, 326, 328, 331, 333, 336, 337, 338, 339, 342, 346, 350, 354, 359, 360, 361, 363, 364, 373, 376, 379, 382, 392, 395, 396, 398, 400, 401, 402, 408, 409, 411, 412, 413, 415, 424, 426, 430, 453, 459, 460, 462, 463, 464, 465, 466, 467, 469, 472, 474, 475, 476, 477, 478, 480, 481, 482], "done": [5, 7, 31, 33, 34, 36, 47, 49, 51, 54, 55, 58, 63, 64, 66, 72, 73, 75, 76, 84, 85, 92, 95, 97, 98, 100, 101, 104, 107, 108, 118, 123, 124, 127, 131, 134, 137, 139, 149, 153, 156, 157, 164, 165, 171, 174, 175, 181, 182, 184, 189, 191, 194, 198, 202, 203, 206, 207, 214, 223, 230, 232, 233, 243, 245, 248, 253, 256, 264, 265, 266, 267, 276, 281, 286, 290, 291, 293, 297, 300, 306, 307, 312, 314, 317, 332, 336, 338, 339, 342, 343, 346, 350, 356, 357, 359, 360, 364, 373, 374, 382, 383, 384, 387, 388, 393, 397, 398, 400, 406, 409, 410, 411, 412, 419, 426, 428, 430, 433, 434, 450, 459, 460, 461, 462, 463, 465, 466, 472, 473, 474, 475, 476, 477, 479, 481], "work": [5, 23, 25, 33, 34, 36, 37, 41, 42, 45, 55, 59, 63, 64, 68, 72, 73, 76, 77, 78, 79, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 113, 117, 118, 130, 131, 132, 133, 135, 136, 137, 138, 149, 153, 156, 159, 161, 165, 167, 168, 174, 175, 179, 181, 182, 185, 188, 189, 190, 195, 203, 205, 206, 213, 223, 224, 226, 228, 230, 239, 241, 243, 245, 246, 248, 249, 252, 253, 255, 256, 258, 259, 262, 264, 265, 266, 267, 271, 281, 282, 288, 289, 290, 291, 295, 296, 297, 300, 302, 303, 306, 307, 314, 317, 322, 326, 328, 330, 335, 336, 339, 341, 342, 343, 345, 346, 350, 356, 359, 360, 362, 363, 367, 373, 374, 379, 382, 386, 387, 388, 392, 393, 398, 400, 401, 403, 408, 409, 411, 412, 417, 419, 424, 425, 426, 428, 430, 432, 434, 449, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "name": [5, 10, 11, 13, 14, 17, 19, 20, 23, 24, 26, 28, 29, 30, 31, 33, 34, 35, 42, 45, 49, 51, 53, 54, 56, 58, 59, 60, 61, 63, 64, 66, 68, 71, 72, 73, 75, 76, 77, 79, 84, 87, 92, 95, 97, 100, 101, 103, 106, 107, 108, 110, 112, 115, 116, 117, 120, 124, 126, 131, 132, 134, 137, 138, 140, 142, 143, 145, 147, 149, 150, 151, 153, 155, 158, 159, 161, 164, 165, 167, 168, 173, 174, 175, 176, 179, 180, 181, 182, 184, 186, 188, 189, 191, 192, 193, 194, 195, 198, 200, 201, 203, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 221, 223, 224, 226, 228, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 270, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 289, 290, 292, 293, 294, 295, 297, 300, 301, 303, 305, 306, 308, 309, 310, 311, 312, 317, 318, 319, 320, 321, 322, 323, 326, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 351, 352, 353, 357, 358, 359, 360, 363, 364, 367, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 423, 424, 425, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 444, 447, 448, 450, 451, 453, 454, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "known": [5, 9, 23, 33, 60, 61, 63, 64, 68, 75, 85, 94, 95, 104, 105, 108, 118, 149, 152, 156, 165, 167, 174, 181, 184, 194, 195, 207, 233, 240, 245, 248, 249, 251, 264, 265, 266, 273, 274, 291, 297, 317, 318, 326, 335, 338, 339, 340, 342, 346, 350, 352, 353, 364, 367, 373, 374, 376, 382, 384, 385, 387, 388, 397, 398, 408, 413, 414, 420, 423, 424, 428, 432, 433, 434, 454, 456, 463, 465, 467, 468, 469, 473, 475, 477, 478, 479, 481], "will": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 37, 39, 41, 42, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 124, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 159, 161, 164, 165, 167, 168, 171, 174, 175, 177, 179, 181, 182, 184, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 216, 218, 220, 221, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 280, 281, 286, 290, 291, 293, 294, 295, 297, 300, 302, 303, 305, 306, 307, 309, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 351, 352, 353, 354, 356, 357, 358, 360, 362, 363, 364, 367, 371, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 404, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "content": [5, 7, 9, 25, 33, 42, 45, 54, 58, 61, 64, 66, 68, 72, 84, 85, 92, 95, 100, 101, 104, 107, 108, 141, 147, 149, 151, 155, 156, 158, 161, 164, 173, 174, 175, 177, 182, 185, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 213, 214, 221, 223, 224, 228, 232, 233, 238, 239, 240, 243, 245, 248, 249, 250, 251, 253, 256, 260, 266, 269, 271, 274, 276, 277, 279, 283, 291, 294, 297, 300, 305, 309, 313, 317, 318, 330, 332, 335, 338, 339, 342, 345, 350, 352, 356, 358, 360, 362, 367, 376, 383, 391, 392, 393, 397, 400, 405, 408, 409, 411, 413, 414, 415, 417, 418, 419, 420, 423, 424, 427, 428, 430, 433, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "text": [5, 54, 59, 64, 68, 72, 75, 84, 85, 87, 95, 100, 101, 104, 107, 108, 116, 118, 120, 124, 143, 144, 147, 148, 149, 150, 153, 155, 157, 165, 166, 171, 174, 176, 185, 186, 188, 189, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 210, 211, 216, 217, 221, 223, 224, 232, 238, 240, 243, 246, 248, 250, 251, 252, 253, 256, 260, 264, 265, 266, 267, 268, 269, 271, 279, 280, 286, 290, 291, 294, 296, 297, 303, 305, 311, 312, 318, 321, 329, 331, 339, 343, 344, 346, 350, 356, 358, 365, 366, 367, 370, 373, 374, 375, 379, 382, 384, 385, 386, 392, 393, 397, 398, 401, 405, 409, 410, 411, 413, 414, 420, 424, 426, 427, 428, 430, 432, 433, 444, 447, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "specifi": [5, 7, 9, 11, 13, 17, 22, 23, 25, 33, 34, 39, 40, 42, 45, 49, 56, 61, 63, 64, 66, 68, 73, 75, 76, 77, 79, 85, 89, 92, 93, 94, 95, 100, 101, 104, 107, 108, 110, 113, 115, 116, 117, 118, 124, 130, 131, 133, 136, 137, 139, 141, 142, 144, 147, 149, 152, 153, 155, 156, 159, 161, 165, 167, 171, 175, 179, 181, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 216, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 245, 246, 248, 250, 251, 253, 256, 257, 259, 260, 264, 265, 266, 267, 269, 270, 273, 274, 276, 277, 279, 280, 281, 282, 286, 290, 291, 293, 294, 295, 297, 300, 302, 303, 305, 306, 309, 311, 312, 317, 318, 320, 322, 326, 327, 328, 329, 330, 331, 333, 335, 338, 339, 342, 343, 345, 346, 350, 351, 352, 353, 356, 357, 359, 360, 363, 364, 367, 371, 373, 374, 376, 378, 379, 382, 383, 386, 392, 393, 395, 397, 398, 400, 403, 404, 408, 409, 411, 413, 414, 420, 421, 423, 425, 426, 427, 428, 429, 430, 433, 434, 444, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "need": [5, 7, 11, 13, 23, 26, 28, 31, 33, 34, 42, 45, 49, 51, 58, 59, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 79, 84, 85, 91, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 115, 118, 120, 124, 130, 135, 136, 137, 138, 139, 142, 147, 149, 151, 152, 153, 155, 156, 159, 165, 167, 171, 174, 175, 177, 179, 181, 184, 188, 189, 191, 192, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 210, 211, 223, 224, 228, 232, 233, 241, 243, 245, 246, 248, 249, 250, 253, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 276, 279, 281, 286, 290, 291, 293, 294, 297, 300, 303, 305, 306, 309, 312, 317, 318, 319, 320, 323, 324, 328, 329, 330, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 356, 359, 360, 362, 363, 364, 367, 373, 375, 376, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 405, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 423, 426, 428, 429, 430, 432, 433, 434, 453, 454, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "copi": [5, 7, 9, 17, 25, 33, 34, 42, 43, 55, 58, 63, 64, 68, 73, 77, 80, 84, 85, 95, 99, 101, 110, 118, 124, 131, 137, 149, 156, 158, 164, 165, 168, 170, 174, 175, 179, 180, 181, 184, 189, 191, 198, 199, 201, 206, 211, 213, 217, 223, 224, 228, 233, 235, 242, 245, 246, 252, 253, 256, 259, 265, 266, 267, 269, 274, 276, 281, 282, 290, 291, 295, 297, 299, 300, 307, 317, 328, 338, 342, 343, 345, 346, 350, 353, 356, 360, 370, 380, 382, 383, 386, 387, 388, 393, 397, 398, 413, 414, 419, 422, 424, 426, 438, 439, 440, 459, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "adjust": [5, 45, 54, 56, 64, 118, 158, 175, 181, 184, 199, 206, 291, 305, 322, 332, 338, 339, 342, 364, 367, 373, 374, 411, 460, 467, 475, 477, 478, 479, 481], "newli": [5, 42, 59, 68, 73, 85, 100, 137, 155, 159, 179, 189, 196, 230, 241, 256, 281, 291, 300, 330, 332, 335, 373, 374, 382, 408, 425, 426, 464, 466, 472, 474, 477, 478, 481], "respons": [5, 23, 33, 34, 45, 61, 63, 64, 68, 73, 76, 79, 93, 94, 95, 100, 101, 107, 108, 124, 131, 133, 135, 153, 167, 175, 177, 181, 189, 194, 221, 240, 241, 243, 246, 248, 252, 254, 264, 265, 286, 303, 312, 323, 333, 335, 336, 338, 339, 345, 346, 356, 384, 386, 388, 391, 410, 417, 418, 419, 423, 424, 426, 428, 430, 439, 449, 459, 460, 463, 466, 467, 471, 473, 474, 475, 476, 478, 479, 481], "free": [5, 7, 11, 13, 33, 34, 42, 59, 63, 64, 73, 75, 76, 78, 84, 85, 95, 103, 126, 132, 138, 156, 174, 188, 189, 223, 227, 228, 246, 253, 281, 282, 290, 291, 297, 301, 314, 330, 342, 349, 350, 360, 380, 383, 386, 400, 408, 417, 418, 423, 424, 425, 426, 427, 428, 430, 434, 459, 461, 462, 463, 465, 466, 468, 473, 474, 475, 480, 481], "through": [5, 7, 9, 11, 22, 23, 28, 33, 42, 45, 51, 55, 59, 60, 63, 64, 67, 68, 73, 76, 77, 85, 91, 93, 95, 98, 99, 100, 101, 103, 104, 107, 108, 118, 124, 142, 149, 156, 165, 174, 175, 176, 179, 181, 184, 188, 189, 191, 192, 194, 195, 196, 200, 202, 203, 204, 206, 214, 219, 223, 224, 228, 240, 242, 243, 245, 248, 249, 255, 265, 266, 267, 269, 273, 276, 279, 281, 290, 291, 295, 299, 300, 310, 312, 317, 333, 335, 338, 339, 340, 342, 343, 346, 350, 360, 362, 363, 367, 373, 374, 383, 384, 386, 387, 388, 392, 393, 400, 404, 408, 409, 411, 413, 415, 417, 420, 424, 425, 426, 427, 428, 430, 432, 433, 434, 439, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "recod": 5, "instead": [5, 7, 13, 17, 18, 22, 23, 28, 31, 33, 34, 40, 42, 45, 49, 58, 59, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 84, 92, 93, 94, 95, 98, 99, 100, 101, 104, 107, 108, 118, 121, 124, 126, 131, 137, 141, 144, 147, 149, 150, 155, 156, 157, 159, 165, 167, 168, 174, 175, 179, 181, 182, 184, 188, 189, 191, 194, 195, 196, 198, 199, 200, 201, 203, 205, 206, 207, 211, 223, 224, 226, 228, 232, 240, 241, 242, 243, 245, 246, 248, 251, 253, 256, 259, 260, 264, 265, 267, 268, 269, 273, 281, 286, 290, 291, 294, 295, 297, 300, 305, 306, 309, 310, 311, 312, 317, 318, 319, 326, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 342, 343, 345, 346, 350, 352, 353, 356, 357, 360, 363, 367, 373, 374, 376, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 403, 408, 409, 410, 411, 413, 421, 423, 425, 426, 427, 428, 429, 430, 433, 434, 447, 450, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "assum": [5, 7, 33, 34, 41, 45, 54, 56, 60, 63, 72, 73, 76, 84, 85, 89, 95, 98, 99, 100, 101, 103, 104, 107, 118, 124, 149, 151, 152, 156, 159, 165, 167, 174, 181, 194, 197, 199, 200, 201, 207, 223, 228, 233, 240, 241, 245, 246, 247, 250, 264, 265, 266, 281, 286, 290, 291, 294, 295, 300, 309, 311, 332, 335, 338, 339, 342, 343, 345, 346, 356, 362, 364, 374, 384, 386, 393, 397, 406, 414, 419, 424, 426, 428, 430, 434, 459, 460, 461, 462, 465, 466, 468, 472, 474, 475, 476, 477, 478, 481], "paramet": [5, 7, 9, 11, 17, 22, 23, 28, 32, 34, 37, 45, 49, 56, 58, 61, 63, 64, 66, 67, 68, 74, 75, 79, 84, 87, 93, 94, 95, 100, 104, 107, 110, 113, 115, 116, 118, 124, 135, 137, 139, 142, 147, 149, 156, 161, 165, 167, 168, 173, 175, 181, 182, 184, 188, 189, 191, 194, 195, 196, 197, 199, 201, 203, 204, 206, 207, 211, 212, 213, 214, 216, 218, 223, 224, 226, 228, 232, 233, 240, 241, 243, 245, 246, 248, 249, 250, 251, 253, 256, 257, 259, 260, 262, 264, 265, 266, 267, 269, 270, 273, 274, 276, 279, 280, 281, 286, 290, 293, 295, 303, 305, 309, 310, 312, 313, 317, 318, 320, 323, 326, 328, 329, 330, 331, 333, 335, 336, 338, 339, 342, 343, 344, 346, 349, 350, 354, 356, 357, 360, 363, 364, 366, 373, 378, 379, 380, 382, 386, 387, 392, 393, 398, 400, 401, 403, 404, 408, 409, 410, 411, 412, 413, 415, 417, 418, 420, 423, 426, 427, 428, 429, 430, 431, 434, 443, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 480, 481], "buffer_length": 5, "unlik": [5, 33, 41, 42, 45, 49, 55, 60, 64, 73, 76, 84, 85, 93, 94, 95, 99, 100, 101, 107, 124, 135, 137, 147, 161, 167, 175, 181, 182, 184, 203, 223, 226, 241, 246, 259, 268, 269, 273, 281, 291, 293, 294, 295, 297, 303, 317, 322, 335, 339, 342, 346, 351, 356, 360, 364, 367, 380, 382, 383, 384, 386, 400, 403, 411, 423, 426, 428, 430, 432, 433, 434, 459, 461, 462, 463, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 480, 481], "third": [5, 7, 23, 28, 31, 33, 58, 63, 73, 75, 76, 84, 85, 93, 95, 100, 101, 104, 107, 110, 115, 124, 126, 130, 131, 136, 156, 165, 167, 174, 175, 179, 181, 182, 184, 223, 226, 248, 249, 259, 265, 266, 291, 297, 300, 305, 317, 328, 330, 335, 338, 339, 341, 342, 350, 353, 367, 378, 384, 386, 388, 393, 397, 398, 400, 417, 424, 426, 430, 447, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 479, 480, 481], "integ": [5, 7, 9, 22, 23, 30, 33, 34, 35, 39, 41, 42, 45, 47, 49, 56, 61, 63, 64, 66, 68, 72, 73, 75, 76, 84, 85, 92, 94, 95, 98, 101, 103, 104, 107, 108, 113, 115, 118, 124, 131, 136, 139, 147, 149, 152, 156, 165, 171, 174, 175, 176, 181, 184, 191, 201, 210, 211, 213, 216, 219, 223, 231, 232, 241, 243, 246, 248, 252, 254, 256, 264, 265, 266, 267, 268, 273, 276, 279, 281, 286, 287, 290, 291, 297, 302, 303, 305, 306, 312, 316, 317, 318, 319, 320, 326, 327, 330, 335, 336, 337, 338, 339, 343, 345, 346, 347, 350, 351, 359, 360, 363, 364, 367, 374, 377, 382, 385, 392, 398, 403, 406, 408, 409, 411, 417, 420, 425, 426, 428, 434, 439, 441, 449, 453, 454, 460, 461, 463, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "referenc": [5, 7, 13, 60, 63, 67, 73, 75, 85, 100, 104, 118, 137, 165, 177, 189, 223, 224, 245, 253, 281, 291, 297, 317, 342, 349, 400, 408, 426, 459, 461, 462, 463, 466, 467, 468, 474, 475, 481], "output": [5, 9, 33, 34, 42, 59, 63, 64, 66, 68, 73, 75, 76, 79, 84, 89, 92, 95, 100, 104, 107, 110, 112, 115, 118, 124, 131, 135, 137, 139, 141, 142, 144, 146, 147, 149, 150, 153, 155, 156, 161, 165, 167, 174, 175, 181, 185, 188, 189, 191, 193, 198, 199, 200, 202, 206, 207, 210, 216, 217, 221, 223, 226, 232, 233, 240, 242, 243, 244, 246, 253, 256, 259, 260, 265, 267, 268, 273, 277, 281, 286, 290, 291, 293, 297, 298, 299, 300, 303, 305, 306, 307, 309, 311, 312, 315, 317, 319, 320, 323, 326, 329, 331, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 353, 355, 356, 357, 359, 360, 362, 364, 366, 376, 378, 379, 380, 382, 384, 386, 393, 395, 397, 398, 400, 409, 411, 415, 419, 420, 426, 433, 434, 443, 448, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "mode": [5, 24, 33, 34, 35, 41, 42, 59, 64, 66, 68, 73, 84, 92, 100, 101, 103, 104, 107, 110, 115, 116, 118, 120, 123, 133, 140, 142, 147, 149, 156, 161, 165, 172, 174, 175, 176, 182, 185, 187, 188, 191, 198, 205, 211, 212, 216, 221, 223, 226, 232, 243, 245, 248, 249, 250, 251, 252, 256, 264, 265, 267, 268, 269, 273, 280, 286, 288, 290, 293, 294, 295, 297, 299, 303, 307, 309, 316, 317, 318, 320, 321, 329, 330, 332, 333, 335, 338, 339, 340, 341, 342, 345, 346, 347, 349, 350, 352, 356, 358, 360, 374, 376, 380, 381, 382, 384, 386, 395, 399, 401, 411, 413, 419, 420, 422, 423, 426, 434, 444, 446, 453, 454, 459, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481], "oper": [5, 7, 22, 23, 28, 33, 37, 41, 42, 47, 49, 54, 59, 63, 64, 66, 68, 72, 73, 75, 76, 77, 84, 87, 92, 93, 94, 100, 101, 103, 104, 107, 108, 110, 111, 116, 117, 120, 124, 131, 137, 139, 140, 142, 145, 149, 152, 159, 164, 165, 167, 171, 174, 175, 181, 182, 184, 186, 189, 192, 193, 194, 198, 199, 200, 203, 205, 206, 209, 210, 211, 213, 214, 217, 218, 219, 222, 223, 225, 228, 240, 243, 245, 248, 249, 252, 253, 254, 255, 256, 259, 264, 265, 267, 268, 269, 273, 274, 281, 287, 293, 294, 297, 306, 307, 311, 312, 317, 318, 320, 326, 328, 329, 331, 333, 335, 338, 340, 343, 345, 346, 350, 351, 353, 356, 357, 359, 360, 363, 367, 371, 374, 376, 382, 383, 384, 388, 392, 393, 397, 398, 400, 401, 402, 403, 408, 409, 411, 414, 417, 420, 423, 425, 426, 427, 429, 430, 431, 432, 434, 440, 441, 444, 447, 453, 454, 459, 460, 461, 463, 464, 465, 466, 467, 472, 473, 474, 477, 478, 479, 481, 482], "usag": [5, 33, 34, 63, 64, 67, 68, 72, 73, 76, 85, 89, 95, 100, 101, 103, 104, 107, 110, 112, 116, 133, 138, 141, 147, 151, 167, 176, 181, 183, 185, 186, 189, 192, 211, 216, 223, 224, 226, 228, 232, 241, 243, 246, 248, 249, 252, 254, 257, 262, 265, 267, 270, 278, 281, 290, 291, 295, 297, 303, 305, 330, 342, 350, 356, 360, 373, 380, 384, 386, 389, 393, 397, 398, 401, 408, 409, 419, 423, 424, 425, 426, 447, 453, 454, 457, 459, 462, 463, 464, 465, 466, 467, 472, 473, 474, 476, 477, 481], "non": [5, 7, 9, 11, 13, 18, 22, 23, 25, 26, 28, 31, 34, 35, 36, 39, 42, 45, 49, 58, 59, 60, 61, 63, 64, 68, 71, 73, 75, 76, 84, 92, 93, 94, 95, 99, 100, 101, 105, 107, 108, 113, 118, 123, 124, 130, 131, 137, 141, 142, 147, 149, 153, 156, 165, 167, 173, 174, 175, 176, 179, 181, 182, 184, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 210, 211, 221, 223, 224, 226, 228, 231, 232, 233, 235, 240, 241, 243, 245, 246, 248, 250, 251, 255, 256, 257, 259, 263, 264, 265, 266, 267, 271, 273, 274, 276, 281, 283, 286, 290, 291, 293, 294, 295, 296, 297, 300, 303, 306, 309, 312, 314, 317, 318, 320, 326, 329, 330, 331, 332, 333, 335, 336, 340, 342, 343, 344, 345, 346, 350, 353, 356, 357, 360, 362, 363, 364, 375, 383, 384, 386, 387, 388, 392, 393, 398, 401, 413, 417, 420, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 438, 439, 441, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481], "alreadi": [5, 7, 9, 13, 22, 23, 24, 27, 28, 31, 33, 34, 42, 49, 51, 54, 60, 61, 63, 64, 66, 68, 73, 75, 76, 77, 84, 85, 92, 93, 94, 95, 98, 99, 101, 103, 104, 107, 110, 118, 124, 127, 131, 137, 149, 161, 165, 167, 174, 179, 181, 182, 187, 188, 194, 197, 198, 203, 206, 210, 211, 216, 225, 240, 241, 245, 246, 248, 253, 256, 259, 265, 266, 268, 269, 274, 279, 280, 281, 290, 291, 294, 297, 300, 303, 305, 306, 318, 319, 326, 327, 330, 331, 335, 338, 339, 342, 346, 350, 351, 354, 356, 357, 360, 363, 367, 374, 382, 386, 387, 392, 395, 397, 398, 401, 403, 408, 409, 411, 415, 419, 425, 426, 428, 430, 434, 459, 460, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "locat": [5, 7, 33, 34, 58, 64, 68, 72, 77, 84, 85, 92, 93, 94, 97, 100, 101, 104, 108, 110, 139, 145, 156, 161, 165, 174, 175, 181, 189, 191, 211, 223, 241, 245, 248, 249, 250, 251, 252, 264, 266, 267, 271, 274, 278, 281, 291, 295, 297, 300, 309, 310, 311, 312, 317, 318, 330, 338, 339, 351, 352, 353, 360, 364, 373, 382, 384, 386, 392, 393, 397, 398, 408, 411, 412, 413, 420, 423, 424, 425, 426, 429, 430, 434, 451, 453, 457, 459, 460, 462, 463, 464, 465, 466, 467, 470, 472, 473, 475, 477, 479, 481], "interpret": [5, 7, 13, 23, 24, 26, 27, 28, 31, 32, 34, 35, 39, 42, 45, 47, 49, 51, 53, 58, 59, 63, 64, 66, 68, 72, 73, 75, 76, 79, 84, 85, 87, 93, 95, 100, 101, 103, 104, 107, 110, 113, 118, 120, 124, 138, 143, 149, 150, 161, 164, 165, 173, 174, 175, 180, 181, 182, 184, 188, 189, 190, 191, 195, 201, 205, 207, 208, 211, 217, 220, 223, 225, 233, 243, 245, 246, 248, 249, 252, 257, 259, 260, 264, 265, 266, 276, 279, 281, 290, 291, 295, 297, 305, 306, 307, 309, 311, 312, 313, 317, 318, 322, 326, 328, 329, 331, 332, 333, 335, 338, 339, 342, 346, 350, 353, 354, 359, 360, 363, 364, 367, 373, 374, 379, 384, 386, 393, 397, 398, 400, 401, 404, 408, 411, 424, 425, 426, 427, 428, 430, 432, 433, 434, 440, 447, 453, 454, 459, 460, 461, 462, 463, 464, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481], "initi": [5, 13, 16, 18, 22, 23, 24, 27, 28, 31, 32, 35, 42, 49, 51, 58, 59, 60, 61, 63, 66, 68, 69, 71, 72, 74, 76, 79, 85, 86, 92, 93, 95, 99, 100, 101, 107, 112, 113, 118, 119, 124, 133, 137, 138, 139, 140, 144, 153, 156, 164, 165, 173, 174, 175, 179, 184, 187, 188, 189, 191, 193, 200, 201, 204, 211, 224, 228, 232, 233, 241, 245, 246, 248, 252, 256, 259, 260, 264, 265, 266, 267, 268, 269, 274, 276, 278, 279, 281, 286, 290, 291, 297, 299, 303, 306, 312, 318, 319, 329, 332, 333, 335, 336, 338, 339, 342, 346, 350, 354, 357, 363, 364, 367, 374, 382, 383, 384, 386, 393, 398, 411, 417, 423, 424, 425, 426, 429, 430, 434, 448, 453, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 480, 481], "then": [5, 7, 13, 23, 25, 27, 28, 31, 33, 34, 42, 43, 47, 49, 59, 61, 63, 64, 66, 72, 73, 75, 76, 79, 84, 85, 91, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 113, 118, 124, 130, 131, 137, 142, 149, 152, 155, 156, 159, 161, 167, 174, 175, 179, 181, 182, 184, 187, 188, 189, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 213, 223, 224, 226, 228, 233, 241, 243, 245, 246, 248, 249, 251, 253, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 269, 270, 273, 274, 276, 279, 281, 286, 290, 291, 295, 296, 297, 300, 305, 306, 307, 311, 312, 317, 320, 322, 323, 326, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 352, 356, 360, 362, 363, 364, 367, 369, 371, 373, 374, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 398, 400, 401, 403, 405, 406, 408, 411, 412, 413, 418, 419, 420, 424, 425, 426, 428, 429, 430, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "larg": [5, 7, 55, 58, 59, 63, 68, 72, 84, 92, 93, 95, 98, 101, 104, 107, 108, 135, 156, 174, 175, 181, 182, 184, 186, 188, 191, 210, 211, 220, 245, 246, 256, 257, 260, 273, 281, 286, 290, 291, 293, 294, 297, 331, 342, 343, 344, 345, 346, 350, 356, 380, 382, 386, 389, 400, 408, 409, 411, 420, 423, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 476, 479, 481], "enough": [5, 42, 45, 59, 63, 64, 84, 85, 92, 93, 98, 100, 101, 103, 156, 174, 181, 188, 197, 199, 245, 248, 259, 263, 268, 290, 291, 297, 306, 335, 337, 342, 343, 346, 360, 362, 367, 383, 387, 400, 460, 461, 462, 463, 468, 474, 481], "both": [5, 7, 22, 23, 24, 33, 45, 49, 55, 58, 63, 64, 72, 73, 75, 76, 77, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 118, 124, 131, 135, 137, 139, 141, 149, 152, 156, 157, 159, 165, 167, 174, 175, 179, 181, 184, 188, 189, 191, 192, 193, 194, 198, 199, 200, 201, 203, 204, 205, 211, 213, 214, 218, 223, 224, 228, 231, 233, 241, 242, 243, 245, 248, 253, 255, 256, 257, 265, 266, 268, 273, 276, 279, 280, 281, 282, 285, 290, 291, 293, 295, 297, 300, 302, 303, 305, 306, 307, 317, 318, 320, 322, 327, 328, 330, 331, 332, 333, 335, 338, 339, 342, 343, 345, 346, 350, 351, 353, 359, 360, 362, 364, 367, 374, 376, 378, 380, 382, 384, 386, 387, 388, 392, 393, 398, 400, 403, 409, 411, 415, 417, 419, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 440, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "trail": [5, 33, 34, 39, 64, 78, 92, 95, 104, 141, 144, 155, 156, 157, 165, 175, 184, 188, 194, 203, 206, 219, 223, 226, 245, 269, 282, 312, 335, 339, 342, 343, 346, 354, 364, 367, 379, 393, 408, 425, 426, 428, 429, 433, 434, 440, 449, 453, 460, 464, 466, 467, 468, 469, 473, 475, 476, 477, 478, 479, 481], "remov": [5, 10, 22, 24, 26, 28, 31, 34, 35, 45, 49, 55, 63, 64, 66, 68, 73, 75, 76, 80, 84, 93, 94, 95, 100, 101, 104, 108, 110, 118, 119, 124, 130, 133, 135, 137, 138, 140, 141, 142, 147, 149, 153, 155, 156, 158, 159, 161, 165, 167, 175, 177, 181, 184, 186, 189, 191, 192, 194, 198, 201, 203, 205, 206, 209, 210, 211, 216, 224, 232, 233, 234, 240, 241, 245, 246, 248, 249, 250, 253, 257, 259, 260, 264, 265, 267, 269, 273, 279, 281, 290, 291, 294, 295, 297, 302, 303, 306, 311, 312, 317, 318, 323, 326, 327, 329, 330, 331, 332, 333, 338, 339, 342, 343, 350, 356, 357, 358, 360, 362, 374, 375, 380, 382, 383, 384, 386, 392, 393, 398, 400, 401, 403, 408, 410, 411, 419, 420, 421, 423, 424, 426, 428, 430, 434, 438, 440, 447, 449, 450, 453, 454, 456, 457, 460, 461, 462, 463, 464, 468, 470, 471, 472, 473, 474, 475, 481, 482], "becaus": [5, 23, 28, 33, 34, 42, 45, 47, 54, 58, 60, 63, 71, 72, 73, 75, 76, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 118, 120, 124, 127, 131, 133, 134, 135, 137, 147, 149, 155, 156, 159, 161, 164, 165, 167, 174, 179, 181, 182, 184, 186, 188, 191, 194, 199, 201, 203, 206, 210, 211, 212, 213, 223, 224, 228, 233, 241, 242, 243, 245, 248, 249, 251, 253, 256, 259, 265, 266, 267, 268, 269, 279, 281, 285, 290, 291, 293, 294, 295, 297, 299, 300, 317, 326, 328, 329, 330, 332, 333, 335, 336, 338, 339, 342, 343, 346, 350, 356, 357, 360, 363, 364, 367, 373, 382, 384, 386, 387, 388, 393, 398, 400, 404, 405, 408, 411, 413, 417, 423, 425, 426, 427, 428, 429, 430, 433, 434, 447, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "they": [5, 7, 23, 28, 33, 34, 42, 45, 54, 55, 58, 59, 61, 63, 64, 66, 73, 75, 76, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 124, 131, 136, 137, 138, 139, 142, 149, 151, 152, 153, 156, 159, 161, 165, 167, 168, 174, 175, 176, 177, 179, 181, 182, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 203, 205, 206, 207, 211, 213, 214, 216, 223, 224, 226, 228, 231, 233, 241, 242, 245, 246, 248, 250, 253, 256, 257, 259, 260, 265, 266, 267, 268, 269, 273, 274, 279, 280, 281, 286, 290, 291, 293, 294, 297, 300, 302, 305, 306, 307, 310, 312, 317, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 350, 353, 356, 357, 360, 362, 363, 364, 367, 373, 374, 375, 378, 379, 382, 384, 385, 386, 387, 388, 392, 393, 398, 400, 403, 406, 408, 409, 411, 412, 413, 414, 415, 417, 420, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 440, 447, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "legaci": [5, 23, 33, 58, 68, 75, 141, 161, 162, 192, 194, 196, 200, 203, 204, 207, 215, 233, 248, 253, 254, 268, 286, 290, 291, 330, 338, 339, 345, 350, 360, 386, 420, 430, 433, 453, 457, 459, 467, 472, 473, 474, 475, 477, 479, 480, 481], "py_unicod": [5, 64, 119, 470, 471, 472, 474, 480, 481], "represent": [5, 7, 9, 23, 25, 26, 39, 41, 49, 58, 59, 63, 64, 68, 75, 76, 85, 100, 103, 107, 118, 119, 144, 152, 156, 158, 165, 174, 175, 176, 180, 181, 184, 189, 194, 195, 199, 202, 203, 205, 210, 211, 223, 240, 242, 243, 246, 248, 251, 257, 260, 264, 265, 269, 270, 273, 279, 281, 288, 291, 297, 305, 312, 319, 328, 335, 338, 342, 343, 344, 345, 350, 360, 364, 375, 379, 382, 384, 386, 387, 406, 408, 411, 424, 426, 430, 443, 460, 464, 465, 466, 467, 469, 472, 473, 475, 476, 477, 479, 480, 481, 482], "nonneg": [5, 147, 184, 268, 273, 335, 342, 382, 428, 434], "tini": [5, 84, 85, 179, 460, 466, 467, 481], "overflow": [5, 18, 23, 39, 42, 139, 174, 181, 184, 186, 210, 212, 273, 281, 350, 426, 454, 464, 466, 467, 472, 477, 478, 481], "short": [5, 7, 41, 42, 58, 63, 73, 75, 84, 94, 95, 99, 101, 104, 105, 118, 119, 141, 157, 174, 175, 191, 226, 243, 256, 257, 269, 281, 290, 291, 329, 342, 345, 346, 350, 360, 364, 367, 382, 384, 386, 409, 411, 419, 432, 440, 453, 459, 460, 462, 463, 465, 467, 473, 474, 475, 477, 478, 480, 481], "repres": [5, 6, 7, 9, 11, 13, 17, 20, 22, 25, 33, 39, 42, 45, 47, 55, 58, 60, 63, 64, 66, 68, 73, 77, 84, 85, 92, 94, 95, 98, 101, 103, 104, 107, 108, 118, 124, 131, 137, 142, 144, 149, 151, 152, 156, 165, 174, 175, 181, 184, 189, 192, 195, 197, 199, 201, 204, 206, 207, 211, 213, 219, 223, 240, 241, 242, 246, 248, 249, 250, 251, 253, 256, 257, 260, 264, 265, 266, 268, 269, 270, 273, 274, 279, 280, 281, 283, 286, 290, 291, 294, 297, 302, 303, 305, 306, 312, 317, 319, 320, 323, 326, 330, 331, 333, 335, 336, 338, 339, 342, 343, 344, 345, 346, 350, 351, 356, 357, 360, 363, 364, 367, 373, 374, 375, 379, 382, 384, 386, 387, 395, 398, 400, 403, 408, 409, 410, 411, 413, 414, 417, 418, 419, 420, 423, 424, 425, 426, 428, 430, 433, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "float": [5, 16, 18, 41, 42, 47, 58, 63, 68, 76, 78, 84, 85, 87, 93, 94, 103, 110, 113, 118, 119, 124, 137, 139, 152, 158, 160, 165, 173, 174, 179, 181, 188, 191, 207, 211, 219, 221, 223, 224, 225, 231, 246, 248, 252, 259, 260, 264, 269, 272, 273, 281, 282, 287, 288, 290, 291, 297, 302, 306, 316, 317, 320, 326, 331, 335, 338, 339, 341, 343, 345, 350, 356, 363, 364, 374, 376, 377, 382, 383, 384, 385, 386, 406, 417, 425, 428, 434, 438, 440, 442, 447, 448, 449, 450, 454, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "doubl": [5, 15, 18, 25, 35, 39, 58, 63, 64, 75, 76, 78, 85, 101, 104, 119, 156, 158, 174, 175, 180, 187, 191, 207, 233, 245, 246, 260, 267, 273, 281, 291, 295, 317, 329, 342, 343, 345, 346, 357, 360, 387, 406, 415, 417, 425, 426, 428, 429, 433, 440, 442, 447, 457, 459, 463, 464, 465, 466, 471, 472, 473, 474, 477, 478, 479, 481], "py_complex": [5, 15, 73], "program": [5, 31, 33, 34, 42, 45, 66, 68, 72, 73, 77, 84, 86, 89, 93, 94, 95, 96, 100, 101, 103, 104, 108, 110, 116, 118, 123, 124, 131, 133, 135, 138, 144, 149, 153, 155, 156, 157, 158, 162, 165, 166, 167, 174, 181, 184, 191, 198, 199, 201, 206, 211, 212, 214, 220, 222, 223, 224, 225, 226, 232, 244, 245, 246, 248, 252, 253, 265, 267, 269, 270, 274, 280, 290, 291, 294, 295, 297, 305, 306, 307, 309, 311, 312, 317, 320, 326, 328, 331, 335, 336, 338, 339, 342, 345, 346, 350, 351, 352, 360, 363, 366, 373, 374, 378, 379, 382, 384, 386, 392, 393, 398, 400, 401, 403, 408, 409, 417, 419, 420, 424, 425, 426, 428, 431, 432, 433, 434, 438, 450, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 479, 481], "thus": [5, 7, 10, 33, 42, 54, 73, 84, 85, 94, 99, 100, 101, 103, 115, 118, 138, 165, 167, 174, 175, 191, 199, 202, 203, 206, 211, 223, 226, 233, 241, 248, 249, 257, 260, 264, 265, 266, 267, 273, 281, 290, 291, 297, 311, 317, 329, 330, 332, 335, 338, 339, 342, 346, 350, 356, 360, 364, 382, 384, 386, 392, 393, 403, 419, 423, 425, 428, 430, 433, 434, 453, 459, 460, 468, 473, 474, 475, 476, 477, 479, 481], "receiv": [5, 23, 33, 45, 49, 67, 68, 72, 73, 76, 84, 95, 100, 103, 108, 113, 118, 124, 130, 131, 134, 136, 149, 153, 156, 165, 174, 188, 211, 223, 233, 240, 241, 242, 243, 245, 246, 257, 265, 266, 267, 281, 286, 293, 297, 303, 307, 312, 320, 327, 330, 331, 333, 335, 336, 339, 346, 351, 357, 363, 374, 379, 384, 386, 393, 398, 400, 408, 409, 411, 412, 413, 418, 424, 425, 427, 428, 460, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481], "actual": [5, 7, 13, 23, 33, 39, 49, 55, 58, 61, 63, 64, 66, 73, 75, 76, 77, 84, 85, 92, 93, 94, 98, 100, 101, 103, 104, 107, 115, 124, 137, 147, 149, 156, 158, 165, 167, 171, 174, 175, 176, 179, 189, 191, 195, 196, 198, 201, 204, 205, 207, 211, 223, 228, 232, 243, 246, 248, 249, 250, 251, 253, 256, 259, 263, 265, 266, 267, 268, 269, 276, 279, 281, 290, 291, 293, 295, 303, 306, 318, 322, 323, 328, 331, 332, 333, 335, 336, 338, 339, 341, 342, 343, 345, 346, 350, 356, 363, 367, 370, 379, 382, 384, 386, 387, 388, 393, 397, 400, 403, 408, 412, 420, 424, 425, 426, 427, 430, 432, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 478, 479, 480, 481], "strong": [5, 7, 9, 13, 23, 26, 33, 49, 58, 59, 63, 64, 73, 75, 87, 94, 100, 137, 168, 181, 223, 238, 339, 350, 400, 413, 420, 426, 430, 454, 461, 462, 465, 466, 471, 477, 481], "count": [5, 7, 9, 33, 34, 35, 45, 54, 58, 63, 64, 68, 74, 75, 76, 78, 80, 84, 85, 87, 89, 93, 94, 95, 99, 101, 104, 118, 119, 124, 137, 142, 144, 146, 149, 158, 159, 174, 175, 186, 188, 189, 191, 194, 206, 209, 216, 224, 234, 245, 246, 248, 253, 256, 259, 265, 269, 276, 279, 281, 282, 286, 290, 291, 295, 297, 303, 306, 316, 317, 326, 329, 335, 338, 339, 342, 343, 345, 350, 360, 362, 363, 364, 367, 378, 380, 386, 393, 398, 411, 426, 428, 433, 434, 440, 444, 450, 453, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 479, 481], "increas": [5, 68, 76, 89, 94, 98, 100, 107, 118, 156, 188, 189, 219, 245, 253, 257, 265, 268, 288, 291, 326, 338, 342, 350, 374, 380, 382, 386, 398, 410, 412, 426, 433, 454, 460, 462, 463, 466, 467, 474, 477, 478, 479, 480, 481], "typeobject": [5, 93, 462, 481], "similar": [5, 7, 9, 13, 22, 23, 26, 28, 31, 33, 45, 49, 58, 59, 60, 63, 64, 66, 67, 72, 73, 75, 79, 84, 85, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 110, 118, 124, 131, 135, 137, 141, 144, 149, 152, 155, 156, 161, 165, 167, 168, 174, 175, 178, 179, 181, 182, 184, 186, 188, 189, 191, 193, 194, 203, 205, 211, 218, 223, 224, 226, 228, 231, 233, 240, 241, 243, 245, 248, 249, 250, 253, 256, 257, 259, 264, 266, 268, 269, 274, 280, 281, 290, 291, 295, 297, 299, 300, 303, 306, 311, 317, 319, 329, 330, 333, 335, 336, 337, 338, 339, 342, 345, 346, 350, 353, 356, 362, 363, 364, 367, 373, 379, 380, 382, 384, 386, 388, 392, 400, 406, 408, 409, 411, 412, 415, 417, 420, 423, 425, 426, 428, 430, 433, 434, 453, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "anyth": [5, 28, 41, 63, 72, 73, 76, 85, 92, 95, 100, 101, 104, 107, 118, 135, 149, 174, 175, 176, 179, 181, 184, 191, 194, 201, 245, 246, 255, 256, 265, 267, 281, 290, 295, 299, 317, 321, 328, 332, 333, 339, 343, 346, 350, 351, 360, 363, 367, 374, 382, 384, 387, 392, 403, 411, 419, 425, 426, 428, 430, 439, 459, 461, 462, 465, 466, 474, 475, 479, 481], "arbitrari": [5, 13, 23, 33, 39, 42, 45, 55, 59, 61, 63, 68, 72, 74, 76, 84, 85, 94, 95, 101, 104, 107, 108, 113, 118, 131, 141, 149, 156, 157, 167, 173, 174, 177, 181, 184, 189, 201, 206, 223, 228, 231, 232, 243, 246, 248, 249, 253, 256, 257, 260, 265, 266, 269, 273, 281, 285, 288, 291, 293, 294, 295, 297, 305, 311, 317, 320, 326, 328, 331, 332, 335, 336, 337, 338, 342, 343, 350, 352, 356, 360, 363, 364, 367, 382, 384, 386, 387, 388, 395, 408, 411, 417, 418, 419, 426, 443, 453, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "turn": [5, 23, 33, 34, 58, 63, 68, 73, 85, 89, 92, 93, 95, 100, 103, 104, 107, 108, 110, 118, 126, 153, 156, 165, 174, 175, 188, 191, 192, 206, 207, 223, 241, 243, 245, 253, 264, 265, 266, 281, 290, 296, 299, 309, 313, 314, 318, 326, 331, 333, 335, 342, 359, 360, 363, 367, 382, 386, 388, 393, 398, 418, 425, 430, 432, 433, 453, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 477, 481], "status": [5, 33, 34, 49, 59, 63, 73, 84, 92, 94, 100, 101, 108, 113, 118, 142, 175, 194, 203, 205, 211, 212, 239, 240, 243, 245, 246, 269, 281, 286, 290, 291, 303, 305, 307, 309, 332, 336, 338, 346, 350, 374, 393, 405, 436, 439, 446, 460, 464, 465, 467, 468, 470, 472, 473, 475, 476, 477, 478, 480, 481], "where": [5, 23, 24, 33, 34, 35, 40, 42, 45, 47, 49, 54, 56, 58, 59, 61, 63, 64, 66, 68, 73, 75, 76, 77, 78, 79, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 104, 107, 108, 110, 118, 120, 124, 131, 137, 139, 142, 149, 150, 151, 152, 156, 161, 165, 167, 174, 175, 179, 181, 184, 185, 186, 188, 189, 191, 194, 197, 199, 200, 201, 203, 206, 211, 213, 219, 223, 224, 228, 233, 240, 241, 243, 245, 246, 248, 249, 251, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 274, 276, 279, 280, 281, 286, 290, 291, 293, 294, 295, 297, 300, 306, 310, 311, 312, 317, 322, 326, 329, 330, 331, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 353, 356, 357, 359, 360, 363, 364, 367, 369, 371, 374, 376, 378, 379, 380, 382, 383, 384, 386, 388, 392, 393, 397, 398, 400, 408, 409, 410, 411, 413, 414, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "success": [5, 7, 9, 11, 13, 17, 22, 23, 27, 31, 33, 34, 35, 39, 40, 42, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 73, 75, 76, 77, 79, 80, 85, 92, 95, 100, 104, 108, 113, 124, 130, 131, 137, 157, 161, 165, 167, 174, 175, 189, 191, 207, 213, 221, 240, 243, 246, 248, 259, 264, 267, 276, 281, 286, 290, 291, 293, 297, 303, 312, 317, 321, 330, 333, 335, 338, 339, 342, 345, 346, 350, 363, 373, 374, 386, 393, 408, 421, 425, 426, 430, 434, 451, 454, 460, 463, 464, 467, 473, 475, 476, 477, 479, 481], "has": [5, 7, 9, 11, 13, 17, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 40, 42, 43, 45, 46, 47, 49, 56, 58, 59, 61, 63, 64, 71, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 124, 126, 127, 130, 131, 132, 135, 137, 138, 139, 142, 147, 149, 151, 152, 153, 155, 156, 157, 158, 159, 165, 167, 168, 174, 175, 176, 179, 181, 182, 184, 186, 188, 189, 191, 192, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 212, 214, 216, 219, 223, 224, 226, 228, 230, 233, 240, 241, 242, 243, 245, 246, 248, 249, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 273, 274, 279, 281, 286, 290, 291, 293, 294, 295, 297, 300, 302, 303, 305, 306, 309, 310, 311, 312, 316, 317, 318, 320, 322, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 367, 372, 373, 374, 376, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 406, 408, 410, 411, 413, 414, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 441, 442, 444, 447, 449, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "leav": [5, 23, 31, 60, 64, 66, 75, 76, 92, 95, 99, 101, 107, 118, 124, 136, 138, 165, 167, 175, 182, 184, 186, 189, 191, 194, 203, 211, 224, 233, 241, 245, 248, 256, 267, 269, 273, 281, 290, 291, 338, 339, 356, 360, 363, 367, 382, 386, 403, 425, 430, 432, 434, 440, 454, 460, 462, 463, 464, 465, 466, 467, 474, 477, 481], "unmodifi": [5, 7, 113, 206, 207, 305, 342, 363, 392, 415, 481], "py_cleanup_support": 5, "get": [5, 7, 17, 23, 26, 30, 31, 33, 34, 39, 42, 45, 49, 54, 58, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 78, 79, 80, 88, 92, 93, 94, 95, 97, 99, 100, 101, 103, 104, 107, 108, 115, 118, 124, 126, 127, 131, 132, 134, 135, 137, 139, 142, 149, 156, 158, 159, 165, 167, 168, 174, 175, 179, 181, 182, 183, 184, 186, 187, 188, 191, 194, 198, 203, 204, 206, 207, 209, 211, 214, 220, 223, 226, 228, 230, 231, 233, 239, 240, 241, 243, 245, 246, 248, 249, 253, 256, 259, 263, 264, 265, 266, 267, 269, 277, 279, 281, 286, 287, 290, 291, 293, 294, 295, 297, 300, 303, 306, 307, 311, 314, 316, 318, 320, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 346, 347, 350, 353, 356, 357, 360, 363, 364, 367, 373, 374, 379, 383, 384, 386, 387, 388, 392, 393, 396, 397, 398, 399, 400, 401, 405, 408, 409, 411, 412, 413, 414, 417, 418, 423, 425, 426, 428, 430, 436, 450, 453, 454, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "eventu": [5, 33, 73, 76, 79, 84, 104, 131, 137, 191, 230, 240, 245, 248, 281, 291, 307, 393, 409, 417, 430, 433, 461, 462, 464, 465, 466, 467, 468, 472, 475, 477, 481], "give": [5, 7, 23, 42, 63, 64, 72, 73, 75, 77, 79, 84, 85, 92, 93, 94, 95, 99, 103, 104, 107, 115, 118, 139, 149, 151, 152, 153, 156, 174, 175, 179, 181, 184, 188, 189, 191, 206, 211, 214, 223, 226, 228, 248, 256, 259, 266, 267, 273, 274, 276, 277, 281, 285, 290, 291, 295, 297, 305, 312, 317, 330, 331, 336, 339, 342, 343, 346, 350, 363, 364, 367, 371, 374, 382, 384, 386, 388, 392, 397, 401, 403, 408, 409, 413, 420, 424, 425, 426, 432, 433, 442, 453, 459, 460, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 479, 480, 481], "chanc": [5, 59, 75, 100, 101, 137, 138, 248, 363, 465, 472, 479, 481], "had": [5, 22, 33, 42, 61, 72, 76, 85, 95, 101, 110, 118, 138, 153, 156, 167, 168, 175, 181, 184, 189, 197, 211, 241, 253, 281, 291, 295, 312, 326, 335, 339, 367, 378, 380, 384, 386, 387, 392, 408, 426, 430, 434, 439, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "origin": [5, 7, 9, 23, 33, 34, 42, 43, 60, 62, 63, 67, 73, 85, 92, 94, 100, 104, 107, 110, 118, 124, 139, 142, 147, 150, 152, 156, 165, 167, 171, 174, 175, 179, 184, 186, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 203, 206, 211, 219, 223, 224, 228, 232, 241, 245, 248, 253, 259, 260, 264, 265, 267, 269, 273, 276, 281, 282, 290, 291, 295, 297, 306, 310, 317, 322, 326, 329, 330, 335, 338, 339, 342, 346, 350, 356, 360, 363, 364, 367, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 405, 406, 411, 413, 414, 415, 419, 420, 421, 423, 424, 425, 426, 428, 430, 432, 434, 438, 439, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 481], "bool": [5, 6, 31, 58, 68, 92, 94, 118, 124, 137, 165, 166, 174, 179, 209, 223, 224, 252, 259, 260, 265, 282, 287, 289, 338, 345, 377, 380, 384, 386, 408, 417, 425, 426, 428, 438, 448, 463, 466, 470, 472, 478, 479, 481], "test": [5, 23, 46, 58, 61, 68, 73, 78, 84, 92, 93, 94, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 112, 118, 120, 123, 152, 153, 159, 168, 174, 175, 176, 179, 184, 185, 187, 189, 198, 211, 218, 223, 224, 226, 234, 238, 243, 245, 246, 247, 248, 249, 252, 253, 257, 259, 260, 264, 267, 270, 273, 281, 291, 294, 303, 307, 313, 317, 333, 334, 338, 340, 342, 350, 356, 362, 363, 365, 373, 374, 380, 384, 387, 393, 400, 411, 417, 420, 423, 424, 425, 426, 432, 438, 440, 441, 444, 449, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480], "truth": [5, 95, 174, 289, 342, 345, 411, 426, 428, 463, 472, 481], "boolean": [5, 16, 68, 85, 100, 106, 118, 136, 165, 166, 174, 175, 181, 189, 191, 223, 233, 241, 243, 246, 252, 260, 266, 272, 281, 289, 291, 293, 302, 317, 318, 335, 336, 338, 339, 363, 367, 374, 377, 382, 384, 387, 393, 397, 400, 408, 409, 417, 425, 426, 431, 461, 464, 465, 466, 467, 468, 472, 473, 475, 476, 477, 479, 480, 481, 482], "redic": 5, "equival": [5, 7, 9, 13, 22, 23, 24, 33, 40, 42, 45, 47, 49, 54, 55, 58, 60, 61, 63, 64, 68, 73, 76, 78, 94, 95, 99, 103, 104, 110, 113, 115, 118, 131, 135, 137, 147, 152, 156, 161, 165, 167, 174, 175, 176, 179, 181, 184, 188, 189, 194, 202, 203, 205, 211, 223, 224, 226, 232, 233, 241, 242, 243, 245, 248, 249, 253, 257, 259, 264, 265, 266, 267, 268, 269, 273, 281, 290, 291, 294, 297, 299, 300, 306, 317, 319, 322, 327, 335, 336, 342, 343, 346, 350, 353, 356, 360, 363, 364, 367, 379, 382, 383, 384, 385, 386, 392, 401, 403, 408, 420, 425, 426, 428, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 480, 481], "true": [5, 6, 7, 9, 11, 13, 15, 17, 20, 22, 23, 25, 27, 33, 34, 35, 37, 38, 39, 43, 44, 45, 49, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 73, 76, 78, 84, 85, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 105, 106, 107, 110, 112, 113, 114, 118, 120, 123, 124, 127, 128, 130, 131, 132, 133, 134, 136, 137, 141, 142, 144, 147, 148, 149, 151, 152, 153, 155, 156, 158, 159, 161, 164, 165, 166, 167, 168, 171, 173, 174, 175, 177, 179, 181, 184, 186, 187, 188, 189, 191, 194, 196, 198, 199, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 214, 216, 218, 219, 223, 224, 225, 226, 228, 229, 230, 233, 234, 236, 238, 239, 240, 241, 246, 248, 249, 250, 251, 253, 256, 257, 259, 260, 261, 264, 265, 266, 267, 268, 269, 273, 274, 276, 280, 281, 282, 286, 289, 290, 291, 292, 293, 294, 295, 297, 299, 301, 302, 305, 306, 309, 310, 312, 314, 315, 317, 318, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 341, 342, 343, 344, 345, 346, 349, 350, 353, 356, 358, 360, 362, 363, 364, 367, 371, 374, 375, 378, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 394, 395, 397, 398, 400, 401, 403, 405, 408, 409, 410, 411, 413, 415, 417, 418, 419, 420, 421, 423, 425, 426, 428, 429, 433, 434, 438, 439, 440, 441, 442, 444, 446, 447, 448, 450, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "fals": [5, 6, 7, 22, 33, 34, 35, 47, 49, 58, 63, 64, 66, 73, 84, 85, 89, 92, 94, 95, 98, 99, 100, 101, 103, 105, 106, 107, 108, 112, 113, 114, 118, 120, 124, 127, 130, 131, 132, 133, 134, 136, 137, 141, 142, 144, 147, 148, 149, 151, 152, 153, 155, 156, 158, 159, 161, 164, 165, 166, 167, 168, 173, 174, 175, 177, 179, 181, 184, 186, 188, 189, 191, 194, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 216, 218, 223, 224, 225, 226, 228, 229, 230, 233, 234, 239, 240, 241, 243, 246, 248, 250, 251, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 273, 274, 281, 282, 286, 289, 290, 291, 292, 293, 294, 295, 297, 301, 302, 305, 309, 310, 312, 314, 315, 317, 318, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 341, 342, 343, 345, 346, 350, 353, 356, 358, 360, 362, 363, 364, 367, 370, 371, 374, 378, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 394, 395, 397, 398, 400, 401, 405, 411, 413, 415, 417, 418, 419, 420, 423, 425, 426, 428, 429, 433, 434, 438, 439, 440, 441, 442, 447, 448, 450, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "express": [5, 22, 40, 47, 49, 54, 60, 66, 68, 73, 85, 87, 93, 101, 118, 120, 137, 142, 152, 157, 159, 161, 165, 181, 184, 188, 189, 191, 211, 218, 223, 228, 245, 252, 253, 257, 259, 264, 266, 281, 291, 295, 306, 321, 331, 335, 338, 339, 342, 343, 345, 350, 351, 357, 360, 361, 364, 367, 376, 378, 383, 384, 385, 386, 388, 398, 400, 411, 417, 424, 425, 426, 427, 429, 430, 431, 433, 437, 440, 444, 445, 447, 449, 453, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482], "valid": [5, 7, 11, 23, 28, 34, 42, 61, 63, 64, 66, 68, 72, 73, 85, 92, 98, 99, 104, 107, 110, 118, 137, 141, 144, 149, 155, 156, 157, 161, 165, 167, 171, 174, 175, 179, 181, 182, 184, 185, 187, 189, 192, 193, 195, 201, 205, 207, 223, 240, 242, 243, 245, 248, 253, 254, 256, 257, 259, 260, 263, 265, 266, 268, 276, 279, 281, 285, 286, 291, 299, 300, 302, 306, 309, 312, 317, 320, 321, 322, 329, 331, 333, 335, 338, 339, 342, 343, 345, 346, 350, 356, 360, 363, 364, 374, 376, 382, 384, 385, 386, 387, 392, 393, 403, 409, 411, 413, 414, 418, 420, 421, 423, 425, 426, 429, 430, 433, 434, 441, 449, 453, 454, 460, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "see": [5, 7, 11, 23, 26, 30, 31, 33, 34, 40, 42, 45, 47, 58, 59, 61, 62, 63, 64, 66, 71, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 110, 118, 124, 130, 131, 135, 137, 139, 141, 142, 149, 153, 156, 159, 161, 165, 166, 167, 171, 174, 175, 179, 181, 182, 184, 186, 188, 189, 191, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 211, 212, 213, 214, 216, 218, 219, 221, 223, 224, 228, 231, 232, 233, 240, 241, 243, 245, 246, 248, 249, 253, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 270, 273, 276, 277, 279, 281, 286, 290, 291, 293, 295, 297, 299, 300, 302, 303, 306, 309, 311, 312, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 367, 369, 371, 373, 374, 378, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 403, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "how": [5, 7, 11, 33, 42, 58, 61, 63, 64, 68, 71, 72, 73, 75, 76, 77, 92, 93, 95, 98, 99, 100, 103, 104, 107, 108, 110, 115, 118, 124, 130, 131, 135, 137, 138, 139, 142, 147, 149, 152, 153, 156, 161, 165, 174, 179, 181, 182, 184, 185, 187, 188, 192, 193, 198, 199, 200, 205, 211, 216, 220, 223, 224, 228, 233, 240, 241, 242, 245, 248, 249, 251, 253, 256, 257, 259, 260, 264, 265, 266, 267, 270, 276, 281, 286, 291, 296, 297, 306, 309, 317, 318, 319, 320, 329, 330, 331, 335, 336, 339, 342, 344, 346, 350, 356, 362, 363, 364, 366, 374, 378, 380, 384, 386, 387, 388, 392, 393, 397, 400, 406, 408, 417, 419, 423, 425, 426, 427, 428, 430, 433, 434, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "item": [5, 7, 14, 22, 23, 31, 33, 34, 35, 36, 37, 38, 40, 49, 54, 60, 63, 64, 68, 73, 76, 79, 84, 87, 94, 95, 101, 103, 104, 110, 118, 120, 132, 139, 145, 149, 155, 156, 158, 159, 165, 168, 169, 174, 179, 182, 187, 188, 189, 191, 194, 195, 198, 203, 207, 211, 223, 224, 231, 233, 234, 242, 245, 246, 248, 250, 251, 259, 260, 266, 267, 269, 273, 274, 277, 281, 286, 289, 291, 297, 300, 305, 306, 311, 314, 317, 318, 322, 330, 332, 335, 337, 338, 339, 342, 343, 345, 346, 350, 352, 357, 359, 360, 363, 366, 367, 373, 376, 379, 382, 383, 384, 392, 400, 403, 405, 406, 408, 410, 411, 414, 417, 420, 421, 425, 426, 428, 429, 430, 432, 433, 434, 438, 439, 440, 444, 447, 448, 450, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 481], "individu": [5, 13, 42, 45, 58, 61, 63, 92, 94, 98, 99, 100, 101, 104, 110, 115, 118, 156, 175, 182, 184, 188, 189, 191, 194, 196, 201, 204, 228, 246, 247, 259, 265, 269, 279, 280, 281, 291, 311, 317, 330, 334, 342, 343, 351, 354, 356, 357, 362, 364, 367, 374, 382, 384, 386, 387, 392, 398, 406, 411, 417, 418, 420, 424, 426, 430, 432, 434, 438, 453, 461, 464, 465, 467, 469, 474, 475, 480, 481], "nest": [5, 13, 68, 73, 85, 87, 94, 95, 100, 104, 111, 137, 158, 167, 174, 179, 184, 185, 188, 189, 191, 197, 211, 224, 253, 259, 260, 265, 269, 281, 295, 300, 305, 310, 312, 317, 342, 350, 363, 367, 374, 379, 384, 386, 411, 413, 425, 426, 427, 428, 433, 434, 439, 440, 453, 460, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 481, 482], "possibl": [5, 7, 13, 22, 23, 27, 31, 33, 34, 39, 42, 47, 49, 58, 61, 63, 64, 66, 68, 71, 72, 73, 76, 79, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 110, 113, 115, 118, 124, 130, 137, 138, 139, 147, 149, 156, 157, 161, 165, 167, 168, 171, 174, 175, 178, 179, 181, 182, 184, 188, 189, 191, 192, 194, 195, 198, 199, 200, 201, 203, 204, 206, 211, 216, 220, 223, 224, 230, 233, 240, 243, 245, 248, 253, 256, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 280, 281, 286, 290, 291, 293, 295, 297, 300, 302, 306, 307, 309, 310, 312, 317, 318, 321, 326, 329, 330, 331, 335, 338, 339, 342, 343, 344, 345, 346, 350, 353, 354, 356, 357, 360, 362, 363, 364, 367, 373, 374, 380, 383, 384, 386, 387, 388, 392, 393, 398, 400, 401, 403, 404, 411, 413, 414, 417, 419, 420, 421, 424, 425, 426, 428, 429, 432, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "exceed": [5, 59, 124, 137, 165, 184, 210, 211, 223, 267, 282, 291, 297, 305, 320, 342, 362, 363, 379, 408, 420, 463, 464, 466, 467, 477, 478, 481], "platform": [5, 9, 25, 33, 34, 35, 42, 51, 59, 61, 64, 68, 72, 73, 75, 76, 84, 85, 101, 113, 116, 124, 131, 154, 156, 161, 171, 174, 181, 184, 187, 191, 206, 210, 211, 217, 223, 233, 245, 248, 249, 252, 255, 256, 264, 267, 269, 273, 280, 281, 290, 291, 294, 305, 306, 307, 320, 321, 324, 326, 327, 331, 335, 336, 338, 339, 340, 345, 346, 350, 352, 353, 356, 360, 363, 364, 366, 367, 371, 376, 386, 397, 401, 404, 405, 423, 428, 433, 448, 453, 454, 457, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482], "long_max": [5, 18, 39, 481], "howev": [5, 23, 24, 33, 34, 42, 45, 49, 63, 71, 72, 73, 76, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 104, 107, 108, 110, 118, 124, 126, 131, 133, 137, 149, 156, 159, 165, 167, 168, 174, 175, 179, 184, 188, 191, 192, 194, 197, 199, 201, 203, 204, 206, 207, 211, 223, 224, 228, 233, 241, 243, 245, 246, 248, 250, 253, 256, 257, 259, 265, 266, 267, 269, 270, 279, 281, 286, 290, 291, 297, 309, 317, 326, 329, 330, 331, 332, 335, 338, 339, 342, 343, 346, 350, 351, 352, 353, 356, 360, 362, 363, 367, 374, 376, 379, 383, 384, 385, 386, 387, 388, 395, 400, 401, 403, 408, 409, 413, 414, 417, 420, 424, 426, 427, 428, 430, 453, 459, 460, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 481], "proper": [5, 23, 33, 34, 40, 45, 49, 59, 63, 68, 72, 73, 75, 76, 85, 99, 101, 104, 124, 135, 152, 167, 168, 175, 188, 189, 200, 201, 205, 207, 211, 228, 233, 243, 245, 248, 264, 281, 291, 306, 312, 330, 333, 335, 339, 342, 345, 346, 350, 356, 360, 363, 367, 374, 384, 386, 387, 392, 393, 408, 411, 413, 425, 426, 428, 459, 460, 461, 462, 463, 467, 468, 472, 474, 475, 476, 477, 478, 479, 481], "rang": [5, 7, 18, 23, 25, 39, 59, 64, 68, 72, 73, 76, 84, 85, 87, 92, 93, 94, 95, 98, 101, 102, 104, 107, 108, 110, 118, 124, 132, 136, 137, 139, 142, 147, 152, 156, 164, 165, 167, 174, 175, 176, 181, 184, 188, 189, 191, 210, 211, 221, 223, 224, 233, 234, 239, 242, 246, 252, 253, 257, 259, 260, 276, 281, 282, 286, 291, 293, 295, 297, 302, 303, 306, 313, 314, 316, 317, 320, 324, 331, 333, 335, 338, 339, 341, 343, 345, 350, 351, 363, 364, 365, 367, 373, 376, 379, 380, 382, 384, 386, 392, 404, 408, 417, 423, 425, 426, 427, 428, 430, 432, 433, 434, 438, 440, 441, 443, 444, 447, 448, 449, 450, 453, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "most": [5, 7, 9, 23, 25, 31, 33, 34, 39, 42, 45, 58, 59, 61, 63, 64, 66, 72, 73, 75, 76, 77, 79, 84, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 112, 113, 118, 123, 124, 131, 134, 137, 139, 141, 142, 144, 147, 149, 151, 156, 158, 165, 167, 174, 175, 181, 182, 184, 186, 188, 189, 191, 192, 194, 195, 196, 198, 199, 200, 201, 203, 205, 209, 211, 212, 213, 219, 223, 224, 228, 231, 232, 241, 245, 246, 248, 249, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 270, 273, 276, 281, 282, 290, 291, 293, 294, 295, 297, 300, 303, 305, 306, 312, 317, 319, 326, 327, 328, 330, 331, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 353, 354, 356, 360, 362, 363, 364, 367, 372, 373, 379, 380, 382, 384, 385, 386, 387, 388, 392, 393, 398, 400, 401, 404, 406, 408, 409, 411, 412, 413, 414, 419, 420, 423, 425, 426, 427, 428, 430, 432, 434, 438, 439, 440, 441, 444, 447, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "signific": [5, 41, 85, 95, 98, 101, 104, 107, 124, 130, 131, 156, 167, 176, 184, 191, 195, 223, 256, 257, 259, 267, 273, 291, 297, 306, 339, 342, 343, 350, 363, 386, 409, 426, 430, 432, 433, 442, 453, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "bit": [5, 7, 25, 30, 41, 42, 58, 61, 63, 64, 66, 68, 73, 75, 76, 85, 86, 92, 93, 94, 95, 98, 101, 104, 107, 115, 116, 131, 139, 144, 150, 151, 152, 156, 165, 167, 175, 176, 184, 189, 191, 193, 198, 199, 200, 203, 206, 213, 214, 223, 225, 228, 233, 241, 242, 257, 264, 268, 273, 285, 287, 290, 291, 293, 297, 301, 304, 313, 317, 320, 326, 330, 334, 335, 339, 340, 342, 345, 346, 347, 350, 354, 356, 358, 364, 367, 374, 388, 395, 396, 402, 408, 419, 420, 422, 425, 426, 428, 433, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "silent": [5, 22, 40, 49, 56, 59, 66, 100, 101, 107, 113, 131, 138, 167, 184, 211, 216, 246, 265, 267, 269, 276, 281, 282, 291, 293, 295, 305, 306, 328, 330, 332, 338, 346, 363, 387, 392, 423, 434, 453, 459, 460, 464, 465, 467, 468, 472, 473, 475, 476, 478, 479, 480, 481], "truncat": [5, 59, 64, 84, 85, 139, 140, 147, 175, 181, 184, 211, 223, 232, 246, 256, 259, 268, 291, 318, 335, 338, 342, 345, 358, 360, 362, 379, 380, 395, 420, 426, 428, 444, 460, 462, 466, 467, 468, 473, 474, 475, 476, 478, 481], "too": [5, 35, 63, 66, 75, 84, 92, 94, 95, 100, 101, 104, 107, 108, 131, 135, 137, 149, 152, 156, 165, 167, 174, 182, 184, 186, 189, 191, 192, 202, 210, 211, 228, 241, 255, 256, 257, 281, 290, 303, 305, 330, 331, 335, 336, 338, 339, 342, 343, 345, 346, 350, 357, 360, 363, 367, 382, 384, 386, 387, 388, 411, 420, 421, 426, 430, 432, 449, 453, 460, 461, 462, 463, 464, 466, 467, 468, 472, 474, 476, 478, 479, 481], "small": [5, 33, 39, 42, 55, 58, 63, 68, 73, 84, 85, 92, 94, 98, 101, 104, 107, 156, 167, 174, 184, 188, 191, 241, 245, 256, 259, 269, 273, 281, 286, 291, 306, 317, 328, 331, 335, 342, 360, 363, 373, 380, 386, 405, 411, 426, 434, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 477, 479, 480, 481], "semant": [5, 7, 11, 13, 27, 57, 63, 64, 94, 100, 101, 103, 131, 137, 159, 184, 191, 194, 200, 203, 205, 206, 223, 246, 248, 250, 265, 266, 267, 269, 281, 290, 291, 293, 294, 297, 309, 314, 317, 328, 329, 330, 335, 340, 350, 363, 364, 384, 392, 403, 421, 423, 425, 426, 427, 428, 430, 434, 453, 454, 460, 462, 463, 465, 466, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481], "inherit": [5, 28, 34, 61, 63, 68, 75, 76, 85, 93, 94, 99, 114, 116, 118, 124, 126, 137, 153, 156, 159, 167, 174, 175, 181, 197, 211, 219, 220, 223, 232, 233, 245, 248, 253, 256, 257, 267, 269, 281, 290, 297, 313, 326, 335, 336, 339, 340, 346, 360, 363, 367, 374, 376, 384, 408, 412, 413, 414, 425, 426, 428, 443, 459, 460, 463, 465, 466, 468, 472, 474, 476, 478, 479, 480, 481], "from": [5, 7, 9, 10, 11, 13, 22, 23, 24, 25, 26, 27, 28, 31, 34, 39, 41, 42, 43, 45, 46, 47, 49, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 74, 75, 76, 77, 87, 88, 89, 91, 92, 94, 95, 98, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 124, 126, 130, 131, 133, 134, 135, 136, 138, 139, 141, 142, 144, 145, 147, 149, 150, 151, 153, 155, 156, 158, 159, 161, 162, 165, 168, 171, 175, 176, 177, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 213, 214, 217, 218, 219, 220, 221, 223, 224, 228, 230, 232, 233, 234, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 278, 279, 281, 282, 283, 286, 288, 290, 291, 293, 294, 295, 296, 297, 299, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 350, 351, 353, 356, 357, 358, 359, 360, 362, 363, 364, 365, 367, 372, 373, 374, 375, 376, 378, 379, 380, 383, 384, 385, 386, 387, 388, 392, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 438, 439, 440, 441, 442, 447, 448, 449, 450, 451, 453, 454, 456, 457, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "downcast": [5, 454], "mileag": [5, 333], "vari": [5, 7, 58, 75, 84, 85, 95, 104, 107, 139, 149, 156, 181, 189, 191, 223, 245, 249, 253, 264, 269, 277, 303, 333, 336, 338, 339, 340, 342, 350, 360, 363, 364, 367, 383, 398, 425, 426, 432, 460, 461, 462, 464, 466, 467, 473, 474, 475], "mean": [5, 7, 13, 22, 23, 27, 31, 33, 34, 42, 45, 59, 61, 63, 64, 66, 67, 73, 75, 76, 84, 93, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 124, 131, 137, 139, 142, 149, 153, 156, 161, 165, 167, 168, 174, 175, 176, 179, 181, 182, 184, 188, 189, 191, 194, 200, 201, 203, 204, 205, 206, 207, 211, 212, 213, 214, 216, 218, 223, 224, 226, 231, 232, 233, 240, 241, 242, 245, 248, 249, 250, 251, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 274, 276, 279, 281, 286, 290, 291, 294, 295, 297, 299, 305, 306, 309, 312, 316, 317, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 350, 351, 359, 360, 363, 364, 367, 374, 379, 382, 383, 384, 386, 387, 388, 392, 393, 395, 398, 400, 403, 408, 411, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 447, 449, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "occur": [5, 7, 13, 17, 18, 22, 23, 31, 39, 40, 42, 45, 49, 59, 63, 64, 66, 73, 75, 79, 85, 93, 95, 98, 100, 101, 103, 107, 118, 120, 124, 135, 137, 142, 149, 150, 152, 155, 156, 165, 167, 168, 175, 179, 181, 184, 188, 189, 191, 201, 210, 211, 216, 226, 228, 245, 248, 253, 259, 265, 267, 268, 269, 273, 286, 290, 291, 295, 297, 300, 309, 312, 317, 326, 330, 331, 333, 335, 342, 343, 346, 350, 351, 356, 360, 362, 363, 364, 367, 369, 374, 379, 382, 383, 384, 386, 393, 398, 400, 401, 405, 408, 410, 411, 413, 417, 420, 425, 426, 427, 428, 430, 433, 434, 441, 450, 463, 465, 466, 467, 468, 470, 473, 474, 475, 478, 479, 480, 481], "indic": [5, 7, 31, 32, 33, 41, 42, 49, 54, 56, 58, 59, 61, 63, 64, 68, 73, 75, 76, 84, 85, 98, 100, 101, 104, 107, 108, 115, 118, 120, 124, 135, 137, 149, 153, 155, 156, 165, 167, 171, 174, 175, 181, 184, 187, 189, 194, 200, 201, 203, 206, 207, 211, 221, 223, 224, 226, 232, 233, 239, 240, 241, 243, 245, 246, 248, 249, 253, 256, 259, 264, 265, 266, 268, 269, 274, 276, 281, 286, 290, 291, 293, 295, 301, 303, 305, 306, 309, 312, 316, 317, 326, 327, 330, 331, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 351, 356, 359, 360, 363, 364, 367, 374, 375, 379, 384, 386, 387, 392, 393, 397, 398, 403, 404, 406, 408, 411, 417, 420, 424, 425, 426, 428, 429, 430, 433, 434, 447, 453, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 475, 476, 477, 478, 479, 480, 481], "remain": [5, 13, 33, 42, 63, 73, 76, 85, 94, 95, 101, 104, 118, 124, 137, 151, 159, 167, 174, 175, 181, 184, 188, 189, 191, 192, 196, 200, 201, 203, 206, 207, 211, 216, 223, 224, 245, 246, 248, 266, 269, 273, 281, 290, 291, 293, 294, 295, 297, 310, 320, 322, 331, 335, 338, 342, 343, 346, 350, 360, 362, 363, 374, 382, 383, 384, 386, 392, 398, 400, 424, 425, 426, 430, 433, 434, 440, 453, 454, 462, 463, 464, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "option": [5, 23, 33, 34, 42, 47, 49, 58, 59, 61, 63, 64, 66, 68, 72, 73, 75, 78, 88, 89, 92, 93, 94, 95, 99, 100, 101, 104, 107, 108, 110, 113, 116, 117, 120, 124, 126, 133, 135, 137, 138, 139, 141, 144, 149, 150, 151, 153, 155, 156, 158, 159, 161, 165, 167, 168, 171, 174, 175, 179, 181, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 198, 199, 200, 202, 203, 204, 205, 207, 211, 212, 214, 216, 219, 221, 223, 224, 228, 232, 233, 239, 240, 243, 246, 248, 249, 250, 252, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 274, 276, 279, 281, 286, 291, 293, 294, 295, 297, 303, 305, 306, 307, 309, 310, 311, 312, 317, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 338, 339, 342, 343, 344, 345, 346, 348, 350, 352, 353, 354, 357, 360, 362, 363, 364, 366, 368, 370, 371, 373, 376, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 401, 405, 409, 411, 412, 413, 415, 417, 418, 419, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 447, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481], "their": [5, 7, 28, 33, 34, 42, 45, 55, 61, 63, 64, 68, 72, 73, 75, 76, 77, 84, 85, 92, 93, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 124, 130, 135, 137, 149, 156, 161, 165, 167, 168, 174, 175, 179, 181, 182, 184, 185, 189, 191, 192, 193, 194, 201, 203, 205, 206, 211, 212, 213, 214, 216, 223, 224, 228, 233, 241, 242, 248, 249, 253, 256, 257, 259, 260, 264, 265, 266, 267, 273, 277, 280, 281, 286, 290, 291, 294, 295, 297, 305, 306, 310, 311, 312, 322, 323, 324, 327, 330, 331, 333, 335, 338, 339, 340, 342, 343, 345, 346, 350, 353, 356, 359, 360, 361, 363, 364, 367, 373, 374, 379, 380, 381, 382, 384, 385, 386, 387, 392, 393, 397, 398, 400, 408, 409, 410, 411, 413, 415, 417, 419, 420, 423, 424, 425, 426, 427, 428, 430, 433, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "default": [5, 7, 17, 18, 23, 24, 27, 32, 33, 34, 35, 45, 49, 58, 61, 63, 64, 66, 68, 71, 76, 77, 84, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 113, 115, 116, 117, 120, 123, 124, 130, 131, 133, 134, 135, 136, 137, 139, 141, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 165, 167, 168, 171, 174, 175, 176, 181, 182, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 216, 221, 223, 224, 226, 228, 232, 233, 240, 241, 242, 243, 245, 246, 248, 249, 250, 253, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 281, 284, 285, 286, 289, 291, 293, 294, 295, 296, 297, 302, 303, 305, 306, 307, 309, 311, 312, 313, 317, 318, 319, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 342, 343, 345, 346, 350, 351, 353, 354, 357, 360, 362, 363, 364, 365, 367, 371, 374, 376, 378, 379, 380, 382, 383, 384, 385, 386, 388, 392, 393, 395, 396, 397, 400, 401, 403, 404, 405, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 423, 425, 426, 427, 428, 429, 430, 433, 434, 446, 449, 451, 453, 454, 456, 457, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481], "touch": [5, 68, 85, 175, 245, 294, 295, 427, 466, 479, 481], "keyword": [5, 58, 63, 64, 66, 68, 74, 75, 76, 84, 87, 95, 99, 100, 101, 113, 118, 120, 124, 133, 137, 138, 147, 149, 156, 158, 165, 168, 174, 175, 181, 184, 187, 188, 189, 191, 194, 203, 204, 205, 206, 211, 216, 223, 224, 228, 233, 241, 243, 245, 249, 252, 253, 259, 260, 262, 264, 265, 266, 269, 276, 281, 286, 290, 291, 294, 295, 297, 302, 305, 311, 313, 317, 319, 321, 323, 329, 330, 333, 335, 342, 343, 346, 350, 354, 356, 360, 362, 363, 367, 371, 374, 382, 383, 384, 386, 387, 388, 393, 397, 398, 401, 409, 411, 418, 420, 425, 426, 427, 428, 429, 431, 434, 440, 441, 443, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 478, 479, 480, 481], "current": [5, 7, 11, 13, 17, 23, 26, 27, 28, 31, 33, 34, 39, 41, 42, 43, 45, 49, 53, 59, 61, 63, 64, 66, 68, 73, 75, 76, 79, 84, 89, 92, 95, 98, 99, 100, 101, 103, 104, 107, 108, 113, 115, 118, 126, 127, 130, 131, 133, 134, 135, 136, 137, 142, 149, 150, 151, 153, 156, 158, 161, 165, 167, 168, 171, 174, 175, 177, 181, 183, 184, 187, 189, 191, 194, 195, 198, 200, 201, 203, 206, 207, 210, 211, 212, 213, 216, 218, 220, 223, 228, 232, 233, 240, 242, 243, 245, 246, 248, 256, 257, 259, 264, 265, 267, 269, 273, 274, 276, 279, 280, 281, 286, 290, 291, 293, 294, 295, 297, 305, 306, 307, 309, 311, 312, 313, 317, 318, 320, 321, 322, 323, 327, 329, 330, 331, 335, 338, 339, 342, 343, 346, 350, 351, 352, 353, 354, 356, 360, 362, 363, 364, 367, 373, 374, 378, 379, 382, 384, 386, 392, 393, 396, 397, 398, 400, 403, 404, 406, 408, 409, 410, 411, 413, 414, 417, 420, 425, 426, 427, 428, 429, 430, 433, 434, 449, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "alway": [5, 7, 9, 11, 13, 17, 23, 25, 31, 33, 34, 37, 39, 40, 42, 43, 45, 47, 49, 54, 55, 56, 58, 59, 60, 61, 63, 64, 67, 73, 75, 76, 79, 85, 92, 93, 94, 95, 99, 100, 101, 103, 104, 108, 110, 113, 118, 124, 131, 137, 139, 141, 142, 144, 147, 149, 152, 155, 156, 161, 165, 174, 175, 177, 179, 181, 182, 184, 188, 189, 191, 193, 194, 201, 203, 204, 205, 206, 211, 212, 214, 219, 224, 228, 232, 233, 240, 242, 243, 245, 246, 248, 249, 253, 255, 256, 257, 260, 264, 265, 267, 268, 269, 270, 273, 281, 290, 291, 293, 297, 305, 307, 317, 322, 328, 329, 331, 332, 335, 336, 338, 339, 342, 343, 345, 346, 350, 352, 356, 360, 362, 363, 364, 367, 374, 375, 382, 384, 386, 387, 392, 393, 398, 400, 403, 408, 411, 413, 415, 420, 423, 425, 426, 427, 428, 430, 433, 434, 447, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "end": [5, 7, 9, 13, 18, 23, 24, 28, 31, 33, 34, 37, 39, 42, 56, 58, 60, 63, 64, 66, 68, 72, 73, 75, 78, 79, 80, 84, 89, 94, 95, 99, 100, 101, 103, 104, 107, 114, 115, 118, 124, 131, 136, 137, 141, 144, 147, 149, 151, 153, 156, 157, 158, 161, 165, 167, 173, 174, 175, 176, 180, 181, 184, 188, 189, 191, 192, 194, 203, 205, 206, 207, 211, 213, 223, 224, 232, 233, 238, 240, 241, 243, 245, 246, 248, 253, 256, 259, 260, 265, 266, 267, 268, 269, 276, 277, 280, 281, 282, 286, 290, 291, 293, 294, 295, 299, 300, 303, 306, 307, 309, 312, 317, 318, 326, 328, 329, 330, 333, 335, 338, 339, 342, 343, 345, 346, 350, 351, 353, 356, 357, 360, 362, 364, 369, 374, 375, 376, 378, 379, 382, 386, 388, 393, 398, 406, 408, 409, 411, 413, 414, 415, 419, 420, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 438, 439, 440, 441, 444, 446, 447, 448, 453, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "here": [5, 7, 23, 28, 33, 34, 42, 45, 51, 63, 72, 73, 75, 76, 84, 85, 89, 92, 93, 94, 95, 100, 101, 104, 108, 110, 118, 127, 135, 139, 142, 149, 151, 153, 156, 165, 167, 168, 173, 174, 175, 179, 181, 184, 188, 189, 191, 194, 196, 197, 198, 200, 203, 204, 205, 206, 207, 214, 219, 220, 223, 224, 228, 232, 233, 240, 243, 245, 246, 249, 253, 265, 266, 267, 268, 273, 281, 286, 290, 291, 295, 297, 303, 305, 312, 313, 317, 320, 327, 329, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 350, 356, 359, 360, 363, 364, 367, 382, 383, 384, 386, 387, 388, 393, 398, 401, 406, 408, 409, 411, 421, 425, 426, 427, 428, 429, 430, 432, 433, 434, 447, 453, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 473, 474, 476, 477, 478, 479, 480, 481], "colon": [5, 104, 181, 191, 194, 197, 203, 206, 226, 228, 240, 253, 257, 265, 269, 295, 300, 317, 333, 343, 375, 376, 393, 398, 408, 425, 428, 429, 433, 453, 454, 459, 466, 467, 477, 481], "error": [5, 7, 9, 13, 14, 17, 18, 22, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 45, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 74, 75, 76, 79, 84, 87, 89, 94, 95, 98, 99, 100, 101, 103, 104, 107, 113, 117, 118, 130, 131, 135, 138, 139, 140, 141, 142, 143, 144, 147, 149, 152, 153, 155, 157, 161, 165, 167, 169, 173, 174, 175, 179, 181, 182, 185, 188, 191, 192, 194, 195, 199, 200, 201, 203, 205, 206, 207, 210, 211, 212, 214, 216, 223, 224, 226, 227, 232, 242, 243, 245, 246, 248, 250, 252, 254, 255, 256, 257, 260, 263, 264, 265, 266, 267, 268, 269, 271, 273, 276, 281, 283, 285, 286, 288, 291, 293, 294, 297, 300, 303, 306, 309, 317, 320, 326, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 345, 346, 347, 350, 354, 357, 358, 360, 363, 367, 371, 374, 379, 382, 384, 386, 387, 388, 390, 392, 393, 395, 397, 398, 399, 400, 401, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 417, 418, 419, 420, 422, 425, 426, 427, 428, 429, 433, 434, 440, 443, 450, 453, 454, 459, 460, 461, 462, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "messag": [5, 23, 33, 34, 54, 59, 66, 68, 72, 73, 75, 76, 79, 84, 85, 89, 92, 95, 98, 104, 107, 108, 118, 124, 131, 134, 140, 141, 142, 144, 149, 153, 155, 156, 161, 172, 174, 175, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 210, 211, 226, 240, 241, 243, 244, 245, 246, 248, 252, 253, 257, 260, 265, 266, 267, 270, 277, 281, 283, 286, 290, 291, 295, 303, 309, 312, 317, 320, 329, 331, 333, 335, 336, 338, 339, 340, 350, 354, 355, 356, 357, 360, 366, 373, 376, 379, 384, 386, 387, 388, 393, 397, 398, 411, 412, 413, 417, 419, 425, 427, 429, 434, 447, 450, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 476, 477, 478, 480, 481], "associ": [5, 23, 33, 58, 61, 63, 66, 73, 75, 76, 84, 87, 92, 94, 98, 99, 100, 101, 104, 108, 113, 118, 124, 133, 137, 142, 149, 156, 173, 175, 177, 184, 189, 191, 192, 194, 199, 201, 211, 228, 240, 243, 245, 246, 248, 250, 253, 265, 274, 281, 290, 291, 293, 295, 297, 312, 326, 327, 335, 342, 344, 346, 351, 356, 360, 363, 367, 373, 374, 384, 386, 400, 401, 403, 404, 408, 411, 413, 414, 417, 418, 420, 421, 424, 425, 426, 427, 429, 430, 434, 440, 452, 459, 467, 473, 474, 475, 478, 479, 480, 481], "semicolon": [5, 33, 76, 104, 295, 338, 425, 434, 453, 459], "mutual": [5, 63, 68, 103, 116, 260, 266, 269, 290, 317, 367, 378, 384, 401, 427, 481], "exclud": [5, 34, 59, 64, 99, 101, 104, 161, 179, 181, 189, 191, 233, 245, 259, 269, 273, 277, 279, 291, 294, 306, 312, 342, 350, 356, 363, 364, 374, 380, 411, 419, 420, 424, 425, 426, 428, 434, 440, 447, 453, 466, 467, 473, 474, 475, 476, 478, 479, 480, 481], "note": [5, 7, 23, 25, 28, 31, 33, 34, 40, 42, 45, 46, 51, 54, 59, 61, 63, 64, 66, 68, 72, 73, 75, 76, 79, 84, 85, 92, 93, 94, 95, 97, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 124, 130, 135, 137, 138, 139, 141, 149, 152, 155, 156, 159, 161, 165, 167, 174, 175, 176, 179, 181, 182, 188, 189, 191, 192, 194, 196, 197, 198, 199, 202, 203, 206, 207, 211, 212, 213, 214, 218, 219, 223, 224, 226, 228, 231, 232, 233, 240, 241, 242, 243, 245, 246, 248, 249, 251, 253, 254, 255, 256, 257, 259, 260, 265, 266, 267, 268, 269, 273, 276, 281, 282, 283, 285, 286, 288, 290, 291, 293, 294, 295, 297, 299, 300, 303, 305, 306, 307, 317, 319, 320, 322, 326, 329, 330, 332, 333, 338, 342, 343, 345, 346, 350, 351, 352, 356, 357, 359, 360, 362, 363, 364, 366, 367, 376, 379, 382, 383, 384, 386, 387, 388, 392, 393, 398, 400, 401, 403, 405, 408, 411, 412, 413, 414, 417, 418, 419, 420, 421, 423, 425, 426, 428, 429, 430, 432, 433, 434, 440, 441, 444, 447, 453, 459, 460, 462, 463, 464, 465, 466, 467, 468, 472, 474, 475, 476, 477, 478, 479, 480, 481], "do": [5, 7, 22, 23, 28, 33, 34, 36, 42, 43, 56, 59, 60, 61, 63, 64, 68, 72, 73, 75, 76, 77, 78, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 113, 118, 124, 130, 135, 136, 137, 138, 139, 149, 156, 157, 159, 161, 165, 167, 174, 175, 176, 177, 179, 184, 187, 188, 189, 191, 192, 193, 194, 195, 199, 200, 203, 205, 206, 211, 212, 223, 224, 226, 228, 241, 242, 245, 246, 248, 249, 250, 251, 253, 255, 256, 257, 264, 265, 266, 267, 269, 273, 281, 290, 291, 293, 294, 295, 297, 303, 306, 312, 317, 318, 320, 328, 329, 330, 331, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 351, 353, 354, 356, 357, 360, 362, 363, 364, 366, 372, 373, 374, 376, 378, 380, 382, 384, 386, 387, 388, 392, 393, 397, 398, 400, 401, 404, 408, 409, 411, 412, 413, 415, 417, 419, 420, 423, 424, 425, 426, 427, 428, 430, 433, 434, 439, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "decrement": [5, 7, 9, 63, 73, 76, 85, 99, 137, 189, 281, 291, 295, 331, 363, 374, 426, 481], "determin": [5, 7, 11, 22, 23, 33, 34, 39, 40, 45, 49, 54, 60, 63, 68, 73, 75, 76, 85, 92, 94, 98, 100, 101, 103, 104, 107, 118, 124, 131, 142, 149, 152, 155, 156, 157, 159, 174, 175, 177, 179, 180, 182, 184, 187, 188, 189, 191, 195, 201, 206, 211, 213, 223, 228, 240, 245, 246, 247, 248, 253, 257, 263, 264, 265, 266, 267, 268, 269, 270, 273, 277, 281, 290, 291, 293, 294, 295, 297, 305, 306, 309, 312, 316, 317, 318, 319, 326, 328, 329, 330, 331, 332, 335, 338, 342, 344, 345, 346, 350, 352, 353, 354, 356, 359, 364, 367, 374, 376, 382, 384, 386, 393, 398, 403, 408, 413, 419, 423, 424, 425, 427, 428, 430, 432, 433, 434, 453, 459, 462, 463, 465, 466, 467, 469, 472, 473, 474, 475, 476, 478, 481], "abov": [5, 7, 23, 33, 34, 42, 58, 63, 64, 72, 73, 75, 76, 85, 92, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 124, 135, 137, 147, 149, 152, 156, 161, 165, 167, 174, 175, 176, 177, 179, 181, 182, 184, 186, 187, 188, 189, 191, 195, 198, 201, 203, 206, 211, 213, 223, 228, 232, 233, 240, 241, 245, 249, 256, 257, 264, 265, 266, 267, 268, 273, 276, 281, 286, 290, 291, 295, 297, 305, 306, 311, 317, 322, 330, 331, 332, 333, 335, 338, 339, 340, 342, 343, 345, 346, 350, 352, 360, 364, 367, 373, 374, 378, 382, 384, 386, 392, 393, 395, 400, 403, 406, 408, 411, 418, 419, 424, 425, 426, 429, 430, 432, 433, 434, 441, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 478, 479, 480, 481], "what": [5, 9, 23, 25, 26, 31, 33, 34, 35, 39, 40, 42, 49, 51, 54, 58, 63, 64, 68, 72, 75, 76, 93, 94, 95, 101, 103, 104, 107, 108, 110, 118, 124, 131, 137, 149, 152, 156, 161, 165, 168, 174, 175, 181, 183, 184, 185, 197, 198, 199, 201, 205, 206, 211, 213, 223, 228, 233, 241, 242, 245, 246, 247, 248, 249, 259, 264, 265, 266, 267, 268, 270, 277, 291, 293, 296, 305, 309, 312, 317, 318, 326, 330, 334, 335, 336, 338, 339, 342, 343, 344, 345, 346, 350, 356, 359, 360, 366, 373, 374, 378, 381, 382, 384, 386, 387, 388, 392, 398, 408, 409, 411, 419, 425, 427, 428, 430, 432, 433, 434, 440, 457, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "succeed": [5, 7, 9, 11, 13, 17, 25, 37, 39, 40, 43, 45, 47, 49, 54, 55, 56, 60, 61, 63, 64, 67, 85, 104, 174, 191, 207, 230, 247, 286, 291, 330, 334, 335, 339, 360, 386, 387, 388, 392, 393, 403, 408, 425, 427, 429, 453, 462, 463, 464, 481], "arg": [5, 10, 20, 23, 28, 33, 34, 35, 36, 58, 59, 61, 62, 63, 64, 66, 72, 73, 75, 76, 78, 84, 85, 87, 89, 93, 94, 99, 100, 101, 110, 113, 114, 118, 120, 123, 124, 130, 135, 137, 138, 140, 142, 153, 158, 164, 167, 168, 173, 174, 175, 181, 188, 189, 195, 198, 201, 203, 209, 210, 211, 213, 223, 224, 226, 230, 245, 246, 248, 251, 253, 259, 265, 266, 267, 269, 281, 282, 289, 290, 291, 295, 297, 298, 305, 306, 314, 316, 333, 342, 343, 346, 350, 353, 357, 360, 363, 374, 378, 382, 384, 386, 387, 388, 393, 397, 400, 425, 426, 429, 434, 439, 441, 446, 449, 453, 454, 460, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 476, 477, 479, 480, 481], "exhaust": [5, 63, 95, 156, 158, 189, 223, 240, 259, 291, 340, 342, 360, 367, 384, 420, 425, 426, 428, 462, 464, 465, 466, 468, 476, 477, 481], "appropri": [5, 9, 23, 31, 41, 42, 49, 54, 61, 63, 64, 68, 71, 73, 75, 76, 92, 94, 95, 100, 101, 103, 104, 108, 110, 118, 124, 135, 137, 149, 155, 156, 175, 181, 182, 184, 191, 193, 194, 196, 199, 200, 203, 204, 205, 206, 209, 223, 224, 228, 233, 240, 241, 243, 246, 248, 256, 257, 264, 265, 266, 267, 269, 273, 281, 290, 291, 294, 297, 305, 306, 312, 317, 322, 326, 331, 333, 335, 336, 339, 342, 343, 345, 346, 350, 353, 356, 363, 364, 373, 379, 382, 383, 384, 392, 393, 397, 400, 401, 406, 408, 409, 411, 413, 419, 420, 424, 427, 428, 430, 434, 453, 459, 460, 461, 462, 463, 464, 466, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "due": [5, 23, 33, 45, 63, 66, 75, 76, 84, 93, 100, 103, 108, 124, 135, 137, 167, 174, 175, 181, 182, 188, 206, 211, 219, 240, 245, 248, 256, 265, 266, 267, 269, 273, 281, 297, 312, 323, 339, 342, 346, 360, 363, 369, 384, 386, 387, 400, 420, 425, 426, 428, 429, 430, 433, 454, 459, 460, 461, 464, 466, 467, 468, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481], "failur": [5, 7, 9, 11, 13, 22, 23, 24, 25, 28, 31, 33, 34, 35, 39, 40, 42, 45, 47, 49, 51, 54, 55, 58, 59, 60, 64, 66, 68, 73, 103, 104, 131, 174, 175, 181, 185, 189, 191, 211, 241, 267, 276, 280, 281, 291, 294, 300, 320, 330, 332, 335, 339, 342, 360, 364, 366, 387, 388, 421, 423, 424, 425, 428, 429, 434, 441, 461, 464, 466, 467, 469, 473, 475, 476, 477, 478, 479, 481], "at": [5, 7, 9, 13, 22, 23, 25, 27, 28, 31, 33, 34, 41, 42, 43, 45, 49, 58, 59, 60, 61, 63, 64, 66, 71, 72, 73, 75, 76, 77, 79, 85, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 107, 108, 113, 115, 118, 123, 124, 127, 131, 133, 134, 136, 137, 138, 139, 141, 142, 144, 147, 149, 151, 152, 153, 156, 158, 161, 165, 167, 168, 171, 174, 175, 178, 179, 181, 184, 186, 188, 189, 190, 191, 192, 194, 198, 199, 200, 201, 205, 206, 211, 212, 213, 216, 219, 221, 223, 224, 228, 230, 232, 233, 240, 241, 243, 245, 246, 248, 249, 253, 256, 259, 260, 264, 265, 266, 267, 268, 269, 273, 276, 279, 280, 281, 282, 286, 290, 291, 293, 294, 295, 297, 299, 300, 303, 306, 307, 309, 311, 312, 316, 317, 318, 320, 322, 326, 328, 329, 330, 331, 332, 333, 335, 338, 339, 340, 342, 343, 345, 346, 350, 351, 352, 353, 356, 357, 359, 360, 362, 363, 364, 367, 373, 374, 375, 376, 378, 379, 380, 382, 384, 386, 387, 388, 392, 393, 398, 400, 403, 404, 406, 408, 409, 410, 411, 413, 414, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 438, 439, 440, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "left": [5, 15, 33, 34, 47, 63, 64, 72, 73, 75, 92, 95, 101, 104, 107, 120, 124, 139, 144, 147, 152, 153, 155, 158, 165, 174, 175, 179, 181, 184, 188, 189, 191, 194, 210, 214, 223, 224, 226, 233, 245, 248, 265, 266, 267, 269, 279, 281, 290, 291, 293, 295, 300, 312, 317, 322, 329, 335, 338, 339, 342, 343, 346, 362, 363, 367, 373, 374, 382, 384, 385, 386, 388, 393, 398, 409, 425, 426, 428, 430, 433, 434, 454, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 472, 473, 476, 478, 479, 481], "untouch": [5, 64, 179, 454, 481], "posit": [5, 7, 13, 23, 25, 47, 58, 60, 61, 63, 64, 68, 73, 76, 84, 85, 87, 89, 92, 94, 95, 99, 101, 104, 107, 113, 115, 118, 124, 131, 134, 136, 137, 138, 142, 147, 151, 152, 153, 156, 158, 161, 173, 174, 175, 179, 181, 184, 188, 189, 191, 211, 213, 219, 220, 223, 224, 232, 233, 245, 250, 253, 256, 259, 264, 265, 268, 273, 276, 280, 281, 291, 297, 309, 312, 318, 319, 323, 326, 330, 335, 338, 339, 342, 343, 345, 346, 347, 350, 356, 360, 361, 363, 364, 367, 374, 376, 379, 380, 383, 384, 386, 387, 392, 397, 406, 408, 411, 413, 419, 420, 425, 428, 429, 440, 443, 447, 460, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481], "local": [5, 13, 16, 18, 31, 32, 34, 35, 49, 53, 59, 66, 68, 73, 79, 84, 85, 87, 92, 95, 99, 100, 101, 104, 106, 107, 118, 124, 138, 142, 148, 149, 150, 155, 158, 162, 165, 168, 173, 174, 175, 181, 184, 188, 189, 190, 191, 198, 207, 211, 223, 224, 240, 243, 244, 245, 246, 248, 252, 253, 256, 257, 259, 265, 267, 270, 276, 281, 286, 291, 292, 295, 297, 306, 311, 312, 313, 317, 318, 330, 332, 333, 335, 339, 342, 343, 346, 349, 350, 353, 360, 364, 377, 378, 379, 381, 384, 386, 388, 393, 396, 403, 411, 412, 413, 414, 417, 420, 423, 425, 426, 427, 428, 430, 434, 436, 438, 439, 446, 448, 449, 450, 451, 453, 454, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 473, 474, 475, 479, 481, 482], "pyarg_vapars": [5, 57, 481], "va_list": [5, 9, 18, 23, 64, 464, 476, 481], "varg": [5, 9, 23, 64], "ident": [5, 9, 25, 46, 49, 64, 68, 73, 84, 93, 94, 95, 98, 100, 101, 120, 124, 138, 140, 152, 157, 179, 181, 184, 188, 191, 194, 199, 203, 205, 213, 214, 223, 228, 243, 253, 259, 265, 267, 269, 279, 281, 291, 303, 306, 317, 326, 330, 331, 335, 338, 339, 342, 345, 350, 354, 363, 364, 373, 376, 383, 387, 388, 400, 408, 411, 423, 426, 429, 439, 462, 463, 465, 466, 470, 473, 477, 478, 479, 481], "rather": [5, 7, 22, 23, 33, 40, 41, 45, 49, 55, 58, 61, 64, 72, 73, 75, 76, 84, 94, 99, 100, 101, 118, 124, 135, 138, 147, 149, 152, 153, 156, 161, 167, 174, 175, 179, 181, 184, 189, 206, 207, 211, 223, 224, 233, 241, 245, 246, 253, 256, 259, 265, 266, 267, 268, 269, 273, 281, 290, 291, 293, 294, 300, 310, 311, 312, 317, 322, 329, 330, 332, 333, 335, 338, 339, 342, 343, 346, 350, 353, 356, 360, 364, 367, 373, 374, 376, 382, 384, 386, 387, 388, 392, 393, 397, 398, 400, 408, 411, 417, 420, 421, 423, 425, 426, 428, 430, 432, 434, 453, 454, 459, 461, 462, 463, 464, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "than": [5, 10, 22, 23, 24, 25, 33, 34, 39, 40, 41, 42, 45, 49, 55, 56, 58, 61, 63, 64, 68, 72, 73, 75, 76, 84, 85, 87, 92, 93, 94, 95, 99, 100, 103, 104, 107, 108, 112, 113, 115, 118, 124, 131, 135, 137, 138, 142, 144, 145, 147, 149, 152, 156, 158, 159, 161, 165, 167, 168, 174, 175, 179, 181, 182, 184, 186, 188, 189, 191, 193, 194, 195, 196, 197, 199, 201, 203, 205, 206, 207, 211, 213, 216, 223, 224, 228, 232, 233, 240, 241, 242, 245, 246, 248, 249, 253, 256, 257, 259, 260, 265, 266, 267, 268, 269, 270, 273, 274, 276, 281, 282, 286, 290, 291, 293, 294, 295, 297, 300, 305, 306, 310, 311, 312, 317, 318, 320, 322, 323, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 345, 346, 350, 352, 353, 356, 357, 360, 362, 363, 364, 367, 371, 372, 373, 374, 376, 379, 380, 382, 384, 386, 387, 388, 392, 393, 397, 398, 400, 403, 408, 409, 411, 413, 417, 420, 423, 425, 426, 428, 430, 432, 433, 434, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "kw": [5, 63, 174, 187, 195, 201, 203, 206, 260, 360, 370, 372, 373, 374, 387, 388, 398, 439, 460, 463, 466, 473], "empti": [5, 13, 17, 22, 24, 31, 33, 34, 45, 49, 55, 59, 73, 76, 84, 85, 95, 104, 118, 124, 131, 132, 134, 136, 137, 141, 142, 147, 149, 151, 153, 155, 156, 158, 165, 168, 179, 181, 182, 186, 188, 189, 191, 194, 195, 201, 203, 205, 206, 207, 210, 211, 216, 221, 223, 224, 226, 228, 231, 232, 234, 240, 243, 248, 253, 256, 257, 259, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 281, 286, 290, 291, 294, 297, 307, 312, 314, 317, 323, 326, 327, 328, 329, 330, 331, 332, 335, 338, 339, 342, 345, 346, 350, 356, 357, 360, 362, 363, 367, 371, 373, 374, 378, 380, 382, 383, 384, 385, 386, 387, 392, 393, 398, 403, 406, 408, 409, 411, 417, 418, 420, 421, 425, 426, 428, 429, 430, 433, 434, 438, 440, 447, 453, 454, 459, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "denot": [5, 46, 61, 68, 85, 104, 165, 189, 242, 243, 253, 257, 291, 320, 342, 367, 393, 425, 426, 428, 429, 430, 433, 460, 466, 478, 481], "added": [5, 22, 23, 31, 34, 42, 45, 58, 59, 61, 63, 64, 68, 73, 75, 85, 92, 93, 94, 95, 99, 100, 101, 103, 104, 110, 113, 115, 118, 124, 126, 137, 139, 141, 147, 149, 153, 156, 158, 159, 161, 165, 167, 174, 175, 177, 179, 181, 182, 184, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 211, 212, 216, 223, 232, 233, 240, 241, 243, 245, 246, 248, 249, 250, 253, 256, 257, 260, 264, 265, 266, 267, 269, 273, 274, 279, 281, 286, 290, 291, 294, 295, 297, 300, 302, 303, 305, 306, 309, 317, 319, 322, 326, 328, 330, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 352, 354, 356, 357, 360, 362, 363, 364, 367, 375, 378, 380, 382, 383, 384, 385, 386, 387, 392, 393, 397, 398, 400, 401, 408, 409, 411, 417, 418, 419, 420, 425, 426, 428, 430, 433, 434, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "support": [5, 7, 13, 16, 22, 23, 25, 32, 34, 40, 42, 43, 47, 49, 54, 58, 60, 61, 63, 65, 67, 68, 73, 74, 79, 84, 85, 89, 91, 92, 93, 98, 99, 100, 104, 108, 110, 113, 115, 117, 118, 124, 130, 131, 135, 137, 139, 141, 144, 149, 151, 156, 159, 161, 162, 171, 174, 175, 178, 181, 182, 184, 185, 187, 188, 189, 191, 192, 193, 194, 199, 200, 201, 202, 205, 206, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 232, 233, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 279, 281, 282, 286, 288, 290, 291, 293, 294, 295, 296, 297, 300, 302, 303, 305, 306, 312, 313, 317, 318, 319, 320, 326, 327, 328, 330, 331, 332, 333, 335, 336, 338, 340, 342, 343, 345, 346, 350, 351, 353, 357, 359, 363, 364, 366, 367, 371, 374, 375, 380, 383, 384, 385, 386, 392, 393, 395, 397, 398, 400, 401, 403, 404, 406, 408, 409, 413, 414, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 440, 447, 449, 453, 454, 455, 457, 459, 460, 461, 462, 464, 465, 467, 468, 469, 472, 473, 474, 481, 482], "pyarg_vaparsetupleandkeyword": [5, 57, 464, 481], "pyarg_validatekeywordargu": [5, 57, 481], "key": [5, 22, 33, 35, 40, 49, 54, 55, 63, 68, 78, 84, 85, 87, 92, 93, 94, 95, 99, 100, 101, 103, 110, 120, 124, 140, 145, 149, 153, 155, 158, 159, 162, 165, 168, 172, 173, 175, 179, 181, 182, 184, 187, 189, 191, 194, 195, 199, 201, 203, 204, 210, 211, 221, 223, 224, 228, 234, 235, 242, 243, 246, 248, 249, 253, 257, 259, 260, 264, 265, 266, 268, 269, 270, 277, 280, 285, 286, 289, 291, 293, 295, 297, 302, 303, 305, 306, 310, 317, 318, 327, 328, 331, 332, 338, 342, 343, 344, 350, 353, 356, 360, 366, 367, 374, 382, 383, 384, 387, 388, 392, 393, 400, 403, 405, 411, 414, 415, 417, 419, 423, 425, 426, 428, 429, 430, 434, 438, 439, 440, 444, 450, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "dictionari": [5, 21, 22, 23, 31, 33, 42, 45, 49, 53, 58, 59, 61, 63, 64, 66, 68, 73, 75, 76, 84, 85, 87, 93, 94, 95, 100, 104, 108, 110, 113, 116, 118, 120, 142, 149, 155, 156, 158, 165, 171, 173, 174, 179, 181, 184, 185, 189, 191, 193, 194, 198, 199, 200, 201, 203, 204, 205, 210, 211, 214, 223, 224, 228, 234, 240, 242, 243, 248, 249, 253, 257, 259, 260, 264, 265, 267, 268, 269, 270, 272, 274, 277, 281, 285, 286, 289, 290, 291, 295, 297, 302, 303, 305, 306, 310, 312, 317, 322, 323, 324, 328, 333, 338, 339, 342, 343, 344, 346, 350, 353, 356, 360, 363, 367, 373, 374, 375, 378, 379, 382, 384, 386, 387, 391, 392, 393, 398, 400, 405, 411, 414, 415, 425, 426, 427, 429, 434, 438, 439, 443, 444, 450, 453, 460, 461, 462, 463, 464, 465, 466, 468, 470, 472, 475, 476, 477, 478, 479, 481, 482], "sinc": [5, 7, 13, 22, 23, 28, 33, 34, 40, 45, 46, 49, 54, 58, 59, 61, 63, 64, 68, 72, 73, 75, 76, 79, 84, 85, 92, 93, 94, 98, 99, 100, 101, 103, 104, 107, 108, 110, 124, 131, 142, 144, 147, 149, 155, 159, 165, 167, 171, 174, 175, 179, 181, 184, 188, 191, 192, 194, 196, 197, 199, 201, 203, 205, 206, 207, 211, 216, 220, 223, 224, 228, 232, 233, 241, 242, 243, 245, 246, 248, 249, 256, 260, 264, 266, 267, 269, 270, 276, 281, 286, 290, 291, 293, 294, 295, 305, 306, 312, 317, 326, 328, 330, 333, 335, 336, 337, 338, 339, 342, 343, 345, 350, 353, 356, 360, 362, 363, 364, 367, 374, 376, 378, 379, 380, 384, 386, 393, 398, 400, 403, 408, 409, 410, 412, 413, 417, 419, 420, 425, 426, 428, 430, 432, 433, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "latter": [5, 7, 23, 42, 73, 85, 103, 104, 108, 118, 124, 131, 142, 165, 181, 182, 194, 199, 203, 207, 213, 245, 248, 253, 256, 257, 265, 266, 274, 290, 291, 294, 297, 306, 330, 335, 338, 342, 345, 367, 373, 374, 382, 384, 386, 398, 425, 426, 427, 428, 429, 430, 434, 459, 463, 468, 473, 474, 475, 478, 480, 481], "deconstruct": 5, "old": [5, 9, 13, 23, 42, 45, 58, 59, 60, 64, 68, 73, 85, 100, 104, 110, 118, 149, 158, 167, 174, 175, 185, 194, 203, 211, 223, 224, 241, 246, 248, 260, 266, 267, 269, 274, 281, 290, 291, 295, 297, 302, 306, 328, 331, 338, 342, 350, 356, 359, 360, 367, 379, 380, 382, 384, 387, 408, 413, 425, 426, 428, 433, 434, 460, 461, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "meth_oldarg": [5, 462, 468], "been": [5, 7, 13, 22, 23, 24, 27, 28, 31, 33, 34, 42, 43, 45, 47, 49, 58, 59, 60, 63, 64, 67, 73, 75, 79, 84, 85, 92, 93, 94, 95, 98, 100, 101, 103, 104, 107, 108, 110, 113, 115, 118, 124, 131, 132, 137, 138, 139, 142, 147, 149, 151, 153, 156, 158, 159, 165, 167, 174, 175, 177, 179, 181, 182, 184, 188, 189, 191, 194, 197, 199, 200, 202, 205, 210, 211, 216, 223, 224, 228, 230, 233, 240, 241, 242, 245, 246, 248, 249, 253, 256, 257, 259, 264, 265, 266, 267, 268, 269, 274, 279, 280, 281, 286, 290, 291, 293, 294, 295, 297, 300, 303, 305, 306, 307, 312, 317, 318, 320, 326, 327, 329, 331, 332, 333, 335, 336, 338, 339, 342, 345, 346, 350, 352, 354, 356, 358, 359, 360, 362, 363, 364, 367, 373, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 401, 403, 406, 409, 410, 411, 414, 417, 418, 419, 420, 424, 425, 426, 427, 428, 430, 433, 434, 440, 444, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "standard": [5, 7, 31, 32, 33, 34, 42, 59, 61, 63, 64, 66, 68, 73, 74, 75, 76, 77, 79, 80, 84, 85, 94, 95, 100, 101, 103, 104, 107, 108, 110, 112, 113, 116, 118, 124, 131, 135, 139, 141, 142, 143, 149, 151, 152, 155, 161, 165, 174, 175, 176, 180, 181, 184, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 203, 205, 206, 207, 211, 212, 216, 218, 221, 223, 228, 233, 241, 243, 245, 246, 248, 253, 255, 256, 259, 264, 265, 266, 267, 269, 270, 271, 273, 274, 276, 277, 279, 281, 283, 286, 291, 293, 295, 297, 299, 300, 303, 306, 307, 309, 310, 312, 317, 319, 322, 324, 326, 329, 330, 331, 332, 333, 335, 336, 341, 343, 346, 350, 352, 353, 355, 356, 357, 360, 363, 364, 366, 367, 373, 374, 379, 382, 384, 385, 386, 387, 388, 392, 393, 395, 396, 398, 400, 405, 406, 408, 411, 417, 419, 420, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 439, 442, 443, 450, 452, 453, 454, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "modifi": [5, 9, 22, 23, 27, 33, 34, 61, 63, 64, 66, 68, 73, 76, 77, 79, 94, 95, 99, 100, 101, 107, 108, 110, 118, 135, 137, 139, 156, 165, 171, 174, 175, 183, 184, 189, 191, 194, 195, 196, 199, 201, 203, 206, 213, 214, 223, 243, 245, 253, 264, 265, 266, 267, 269, 279, 281, 282, 290, 291, 294, 295, 297, 300, 305, 306, 312, 317, 319, 322, 326, 327, 328, 329, 330, 333, 335, 336, 338, 342, 343, 346, 350, 351, 353, 356, 360, 363, 367, 373, 374, 376, 379, 380, 382, 383, 386, 387, 392, 393, 394, 395, 398, 403, 405, 408, 411, 414, 415, 418, 419, 421, 423, 424, 425, 426, 427, 430, 432, 433, 434, 453, 456, 457, 460, 461, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 479, 481], "longer": [5, 7, 22, 23, 31, 34, 39, 45, 58, 59, 61, 63, 64, 67, 68, 71, 73, 85, 92, 94, 95, 99, 100, 103, 108, 115, 118, 124, 139, 156, 165, 174, 175, 186, 188, 189, 197, 199, 206, 209, 223, 224, 233, 240, 243, 246, 248, 249, 253, 257, 259, 263, 266, 267, 269, 281, 282, 290, 291, 305, 307, 309, 317, 323, 326, 330, 335, 338, 339, 342, 345, 346, 350, 351, 356, 360, 362, 363, 364, 374, 379, 380, 381, 382, 384, 386, 388, 397, 398, 400, 408, 409, 410, 411, 412, 420, 426, 428, 430, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 476, 477, 478, 479, 480, 481], "purpos": [5, 7, 17, 31, 33, 42, 63, 68, 72, 73, 75, 85, 93, 94, 100, 101, 104, 108, 112, 124, 126, 141, 152, 156, 165, 167, 168, 171, 174, 175, 179, 181, 184, 188, 191, 194, 200, 203, 204, 211, 224, 228, 233, 243, 248, 251, 253, 259, 266, 281, 290, 291, 293, 297, 305, 306, 321, 323, 332, 335, 338, 339, 345, 350, 356, 363, 367, 374, 382, 383, 384, 386, 387, 392, 398, 405, 408, 411, 412, 419, 423, 424, 425, 427, 428, 429, 430, 433, 438, 453, 454, 459, 460, 466, 467, 468, 469, 473, 475, 476, 477, 478, 479, 481], "conveni": [5, 7, 23, 28, 31, 33, 42, 45, 63, 68, 73, 75, 84, 85, 100, 101, 107, 108, 118, 122, 124, 137, 144, 149, 155, 156, 165, 179, 181, 184, 187, 189, 193, 194, 196, 199, 200, 201, 203, 204, 205, 206, 207, 223, 224, 228, 232, 233, 241, 245, 249, 252, 253, 254, 265, 266, 268, 269, 273, 274, 281, 290, 293, 295, 297, 306, 324, 329, 333, 335, 342, 346, 353, 356, 359, 360, 362, 364, 367, 371, 373, 382, 384, 386, 387, 397, 408, 411, 412, 414, 419, 425, 426, 430, 433, 434, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 475, 476, 477, 479, 481], "decompos": [5, 95, 385, 392, 481], "continu": [5, 23, 28, 35, 36, 59, 61, 68, 73, 78, 79, 85, 87, 93, 95, 99, 100, 107, 108, 113, 116, 120, 124, 137, 152, 153, 156, 167, 175, 179, 191, 194, 197, 198, 200, 205, 209, 239, 240, 243, 246, 248, 249, 259, 265, 269, 280, 290, 291, 294, 295, 312, 317, 330, 331, 335, 336, 339, 341, 342, 352, 356, 364, 375, 382, 386, 393, 398, 413, 425, 426, 427, 428, 429, 430, 431, 432, 433, 441, 443, 450, 453, 459, 460, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 478, 479, 481], "pyarg_unpacktupl": [5, 57, 58, 462, 481], "min": [5, 87, 95, 101, 104, 105, 158, 164, 181, 184, 223, 224, 234, 259, 273, 314, 341, 342, 350, 365, 428, 438, 448, 465, 467, 475, 481], "max": [5, 87, 95, 118, 139, 152, 158, 181, 184, 223, 224, 234, 241, 242, 259, 273, 316, 338, 339, 341, 342, 350, 398, 425, 428, 438, 448, 465, 467, 472, 473, 475, 479, 481], "simpler": [5, 63, 68, 92, 101, 104, 118, 149, 223, 233, 281, 317, 342, 367, 387, 400, 409, 411, 413, 430, 459, 460, 461, 462, 463, 465, 467, 474, 475, 478, 481, 482], "retriev": [5, 11, 23, 33, 39, 45, 49, 54, 56, 61, 63, 68, 72, 73, 75, 84, 85, 92, 93, 95, 104, 108, 137, 149, 164, 165, 169, 174, 175, 179, 182, 187, 194, 201, 205, 206, 223, 224, 232, 239, 240, 241, 245, 246, 252, 256, 263, 264, 266, 269, 281, 291, 294, 297, 300, 302, 303, 313, 317, 320, 326, 328, 330, 338, 342, 343, 350, 363, 380, 384, 393, 400, 403, 411, 425, 426, 428, 434, 453, 461, 462, 463, 464, 465, 466, 467, 472, 474, 475, 476, 477, 478, 479, 480, 481], "meth_vararg": [5, 58, 72, 73, 462, 481], "tabl": [5, 7, 31, 33, 42, 45, 58, 59, 64, 68, 74, 75, 77, 78, 93, 95, 100, 103, 104, 107, 108, 145, 156, 174, 175, 181, 184, 188, 201, 210, 233, 245, 248, 259, 260, 264, 265, 274, 281, 294, 296, 317, 326, 336, 338, 339, 342, 344, 345, 349, 350, 356, 364, 367, 377, 384, 386, 401, 403, 408, 420, 424, 428, 439, 444, 450, 453, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 480, 481], "least": [5, 28, 34, 41, 49, 61, 63, 66, 72, 73, 76, 84, 85, 93, 98, 101, 103, 104, 107, 113, 118, 134, 147, 151, 152, 156, 158, 174, 175, 181, 184, 188, 191, 192, 198, 201, 206, 213, 219, 224, 230, 232, 240, 246, 256, 259, 267, 268, 273, 290, 291, 306, 307, 316, 326, 330, 331, 333, 335, 339, 341, 342, 343, 345, 346, 350, 353, 357, 359, 360, 363, 364, 376, 378, 380, 384, 386, 387, 404, 420, 424, 425, 426, 428, 429, 432, 434, 459, 463, 466, 467, 468, 472, 474, 477, 478, 480, 481], "equal": [5, 7, 25, 33, 34, 37, 42, 54, 59, 63, 64, 66, 68, 75, 85, 89, 94, 95, 101, 110, 118, 130, 131, 138, 139, 145, 147, 152, 158, 168, 174, 175, 179, 181, 184, 188, 191, 193, 194, 200, 206, 214, 219, 223, 224, 226, 241, 256, 257, 259, 264, 270, 273, 276, 291, 293, 295, 306, 317, 329, 332, 335, 338, 339, 342, 344, 345, 350, 360, 362, 363, 374, 375, 376, 380, 382, 384, 385, 386, 387, 388, 398, 400, 406, 408, 410, 411, 421, 425, 426, 428, 429, 430, 433, 434, 439, 448, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 477, 479, 480, 481], "given": [5, 7, 9, 13, 18, 22, 23, 27, 31, 33, 42, 43, 45, 49, 56, 58, 61, 63, 64, 66, 72, 73, 84, 89, 92, 93, 94, 95, 98, 99, 100, 101, 104, 108, 110, 113, 115, 118, 124, 131, 133, 137, 142, 147, 151, 152, 153, 155, 156, 161, 165, 167, 168, 171, 174, 175, 176, 177, 179, 181, 182, 184, 188, 189, 191, 193, 194, 198, 200, 201, 203, 204, 206, 207, 209, 211, 214, 216, 219, 221, 223, 224, 226, 228, 231, 232, 233, 240, 241, 242, 243, 245, 246, 248, 250, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 281, 286, 290, 291, 293, 294, 295, 297, 299, 300, 306, 310, 311, 312, 317, 320, 322, 326, 327, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 350, 351, 354, 356, 357, 360, 362, 363, 364, 367, 371, 373, 374, 378, 379, 382, 383, 384, 385, 386, 387, 392, 393, 397, 398, 400, 401, 406, 408, 409, 410, 411, 412, 415, 418, 419, 420, 421, 425, 426, 427, 428, 430, 432, 433, 434, 439, 453, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "wrong": [5, 33, 42, 73, 84, 85, 95, 99, 103, 104, 108, 118, 142, 174, 181, 191, 210, 211, 246, 273, 290, 291, 293, 333, 338, 345, 350, 356, 364, 386, 387, 393, 426, 439, 447, 461, 463, 464, 465, 466, 470, 472, 473, 475, 481], "element": [5, 7, 13, 33, 35, 42, 49, 54, 55, 59, 61, 63, 64, 68, 85, 101, 104, 107, 115, 118, 131, 137, 139, 149, 153, 158, 159, 174, 176, 179, 184, 188, 189, 191, 193, 194, 201, 203, 205, 207, 211, 218, 223, 224, 226, 240, 243, 253, 259, 265, 270, 271, 273, 281, 290, 291, 302, 312, 316, 317, 320, 330, 333, 335, 342, 343, 345, 346, 350, 364, 367, 373, 374, 376, 379, 382, 383, 384, 386, 392, 400, 406, 409, 410, 413, 414, 415, 417, 418, 423, 425, 426, 427, 428, 429, 438, 440, 447, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 479, 480, 481], "taken": [5, 33, 34, 42, 45, 55, 63, 66, 73, 75, 95, 101, 118, 139, 142, 161, 165, 181, 184, 189, 191, 194, 200, 203, 204, 214, 223, 228, 246, 259, 264, 266, 267, 274, 276, 281, 291, 306, 309, 312, 320, 329, 338, 339, 342, 345, 351, 356, 360, 362, 363, 379, 380, 395, 398, 425, 426, 430, 434, 460, 462, 463, 465, 472, 473, 474, 475, 479, 481], "sourc": [5, 13, 22, 23, 31, 33, 34, 66, 68, 72, 73, 75, 76, 79, 84, 85, 92, 93, 94, 95, 101, 110, 120, 140, 150, 155, 156, 157, 161, 165, 174, 175, 179, 180, 185, 188, 189, 191, 201, 205, 206, 207, 211, 212, 221, 223, 228, 233, 240, 246, 249, 250, 252, 255, 259, 262, 263, 265, 266, 267, 268, 278, 279, 281, 290, 291, 293, 295, 297, 306, 309, 310, 311, 313, 319, 322, 328, 329, 330, 333, 335, 338, 342, 343, 344, 345, 350, 353, 356, 357, 360, 362, 364, 366, 367, 369, 375, 378, 379, 380, 386, 393, 397, 398, 403, 408, 411, 412, 413, 414, 415, 419, 420, 421, 424, 425, 426, 430, 432, 433, 434, 441, 451, 453, 454, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "_weakref": [5, 480, 481], "helper": [5, 33, 51, 68, 86, 93, 126, 162, 167, 174, 185, 194, 203, 216, 233, 248, 252, 255, 256, 265, 297, 317, 330, 361, 379, 382, 386, 388, 393, 411, 465, 466, 474, 476, 477, 481], "modul": [5, 7, 11, 16, 17, 23, 24, 31, 33, 34, 35, 41, 42, 58, 59, 61, 63, 65, 66, 68, 71, 72, 74, 75, 76, 77, 79, 81, 87, 88, 89, 91, 94, 96, 97, 102, 103, 107, 108, 110, 112, 113, 115, 116, 118, 120, 123, 124, 129, 136, 137, 138, 139, 140, 141, 142, 144, 147, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 231, 232, 233, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 285, 286, 288, 289, 290, 291, 293, 295, 296, 299, 300, 302, 303, 305, 307, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 369, 371, 372, 373, 374, 375, 376, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 425, 427, 428, 432, 433, 434, 437, 438, 439, 440, 441, 443, 444, 446, 447, 449, 450, 453, 454, 456, 468, 470, 471, 472, 474, 475, 479, 480, 481, 482], "weak": [5, 63, 67, 68, 73, 74, 85, 137, 180, 211, 224, 233, 252, 339, 342, 386, 426, 443, 462, 465, 467, 472, 475, 481, 482], "static": [5, 10, 28, 33, 35, 42, 45, 50, 52, 58, 60, 62, 64, 68, 72, 73, 75, 76, 77, 79, 80, 87, 101, 104, 111, 181, 187, 189, 213, 223, 224, 248, 297, 313, 317, 342, 363, 367, 384, 387, 388, 425, 430, 434, 438, 454, 461, 462, 463, 464, 467, 469, 470, 473, 476, 477, 478, 479, 480, 481], "weakref_ref": 5, "self": [5, 10, 22, 28, 44, 52, 58, 61, 63, 68, 72, 73, 75, 76, 79, 84, 87, 93, 94, 95, 97, 99, 101, 102, 105, 106, 114, 118, 120, 124, 130, 131, 140, 142, 146, 153, 158, 159, 167, 170, 174, 179, 181, 184, 189, 201, 203, 209, 211, 214, 219, 221, 223, 224, 225, 228, 230, 238, 240, 241, 246, 248, 251, 253, 257, 259, 260, 272, 281, 286, 287, 290, 291, 294, 295, 297, 303, 316, 318, 319, 331, 333, 335, 336, 338, 342, 343, 356, 357, 360, 367, 373, 379, 380, 382, 383, 384, 386, 387, 388, 393, 397, 400, 408, 411, 415, 417, 418, 419, 425, 426, 430, 438, 439, 444, 449, 450, 453, 460, 461, 462, 463, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 480, 481], "callback": [5, 11, 13, 14, 22, 27, 28, 33, 61, 63, 67, 68, 73, 81, 87, 93, 99, 116, 118, 121, 123, 127, 128, 130, 131, 134, 137, 167, 221, 225, 253, 279, 281, 297, 306, 307, 312, 313, 314, 318, 327, 330, 338, 339, 340, 350, 357, 365, 367, 369, 374, 383, 384, 400, 410, 411, 413, 419, 426, 450, 465, 466, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482], "ref": [5, 34, 35, 63, 67, 78, 175, 400, 453, 454, 461, 467, 470, 475, 479, 481], "pyweakref_newref": [5, 57, 67, 481], "entir": [5, 42, 63, 73, 75, 84, 85, 92, 93, 98, 99, 103, 104, 107, 110, 124, 149, 167, 175, 182, 194, 198, 203, 205, 211, 214, 228, 233, 240, 245, 256, 257, 259, 264, 265, 267, 268, 269, 276, 286, 290, 291, 293, 317, 320, 329, 330, 338, 339, 342, 343, 350, 353, 356, 362, 363, 367, 374, 382, 385, 386, 398, 403, 406, 408, 411, 414, 424, 425, 427, 430, 433, 434, 444, 453, 459, 461, 463, 464, 465, 466, 467, 469, 472, 474, 475, 478, 481], "py_buildvalu": [5, 10, 35, 57, 59, 60, 68, 73, 86, 465, 470, 479, 481], "base": [5, 18, 23, 25, 31, 33, 34, 39, 43, 45, 47, 49, 50, 61, 63, 64, 68, 73, 75, 76, 78, 84, 87, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 108, 118, 120, 121, 124, 130, 134, 137, 141, 142, 143, 144, 152, 161, 162, 165, 167, 171, 174, 178, 179, 180, 181, 184, 185, 187, 191, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 219, 223, 224, 232, 233, 240, 241, 243, 244, 245, 246, 249, 252, 253, 256, 259, 260, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 278, 279, 280, 286, 290, 291, 294, 296, 297, 300, 303, 306, 310, 312, 317, 318, 319, 322, 327, 328, 330, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 352, 353, 356, 360, 364, 367, 371, 373, 374, 380, 383, 384, 385, 386, 387, 388, 392, 393, 396, 397, 398, 400, 401, 405, 406, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 431, 433, 438, 441, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482], "those": [5, 7, 23, 33, 39, 59, 63, 64, 66, 67, 72, 73, 76, 77, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 118, 124, 131, 137, 149, 152, 156, 159, 165, 167, 174, 175, 176, 181, 184, 188, 189, 191, 192, 194, 200, 201, 202, 203, 206, 209, 211, 214, 218, 223, 224, 226, 232, 240, 242, 245, 248, 249, 250, 251, 253, 256, 257, 259, 260, 264, 265, 266, 267, 269, 274, 281, 290, 291, 293, 295, 297, 300, 306, 309, 312, 317, 320, 322, 323, 327, 328, 329, 330, 331, 333, 335, 339, 342, 350, 351, 353, 356, 359, 363, 364, 367, 373, 374, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 397, 398, 400, 403, 408, 410, 411, 413, 414, 420, 423, 424, 425, 426, 427, 428, 430, 433, 434, 453, 459, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "famili": [5, 16, 33, 42, 54, 68, 95, 107, 124, 134, 140, 162, 198, 210, 233, 269, 281, 291, 296, 335, 336, 354, 360, 367, 370, 408, 453, 459, 463, 464, 465, 467, 474, 477, 478, 479, 481], "exact": [5, 7, 9, 11, 13, 24, 28, 39, 47, 64, 66, 73, 75, 76, 84, 85, 92, 93, 94, 95, 98, 99, 101, 104, 107, 110, 118, 124, 131, 145, 147, 150, 167, 174, 175, 181, 184, 189, 191, 194, 196, 199, 201, 203, 205, 211, 219, 223, 226, 241, 243, 248, 253, 265, 266, 267, 268, 269, 273, 281, 288, 290, 291, 293, 297, 312, 317, 320, 326, 333, 335, 336, 341, 342, 343, 344, 345, 346, 350, 353, 359, 362, 363, 367, 376, 379, 384, 386, 387, 388, 400, 409, 411, 419, 420, 425, 428, 430, 433, 434, 442, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 481], "whatev": [5, 31, 73, 78, 84, 85, 100, 101, 104, 118, 149, 174, 193, 198, 206, 223, 248, 265, 266, 290, 291, 295, 309, 317, 342, 350, 357, 360, 363, 388, 393, 428, 430, 460, 461, 462, 463, 464, 467, 481], "forc": [5, 33, 34, 63, 68, 73, 84, 85, 95, 98, 103, 124, 131, 150, 157, 161, 175, 179, 181, 182, 184, 191, 233, 246, 256, 265, 280, 281, 286, 291, 306, 307, 309, 331, 343, 345, 346, 350, 360, 364, 400, 426, 430, 453, 467, 472, 474, 475, 476, 477, 479, 480, 481], "suppli": [5, 28, 33, 63, 75, 85, 92, 93, 94, 95, 104, 107, 108, 118, 120, 137, 144, 149, 150, 159, 174, 175, 176, 179, 181, 184, 189, 191, 213, 224, 233, 241, 245, 246, 248, 249, 251, 253, 257, 259, 265, 267, 281, 286, 290, 291, 293, 295, 300, 306, 312, 322, 326, 335, 338, 339, 342, 346, 353, 360, 363, 374, 379, 382, 384, 386, 392, 393, 397, 398, 400, 413, 417, 419, 420, 423, 425, 426, 428, 430, 434, 453, 454, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 477, 481], "never": [5, 13, 22, 23, 27, 28, 33, 34, 42, 59, 60, 61, 63, 68, 73, 76, 85, 92, 95, 100, 101, 103, 104, 108, 118, 126, 130, 131, 137, 139, 142, 149, 156, 161, 164, 165, 167, 168, 174, 175, 179, 181, 184, 188, 194, 197, 203, 211, 224, 228, 240, 241, 243, 245, 248, 253, 257, 260, 263, 264, 265, 267, 276, 281, 290, 291, 295, 297, 312, 317, 320, 322, 326, 330, 332, 336, 338, 339, 342, 345, 346, 356, 357, 360, 363, 367, 383, 384, 387, 392, 398, 400, 401, 408, 411, 413, 420, 423, 425, 426, 428, 430, 433, 434, 453, 457, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481], "word": [5, 11, 33, 63, 73, 85, 92, 94, 101, 104, 106, 107, 118, 152, 156, 158, 165, 171, 174, 181, 184, 188, 191, 199, 201, 206, 245, 273, 290, 294, 295, 317, 318, 324, 329, 338, 342, 347, 351, 362, 363, 367, 384, 410, 411, 415, 428, 430, 432, 433, 434, 438, 439, 440, 447, 460, 462, 464, 465, 466, 468, 472, 476, 477, 478, 479, 481], "invok": [5, 13, 23, 27, 31, 58, 59, 63, 64, 68, 75, 84, 85, 93, 95, 98, 101, 103, 104, 107, 118, 124, 142, 149, 153, 165, 167, 174, 179, 181, 189, 191, 223, 224, 241, 243, 245, 253, 264, 265, 266, 281, 290, 291, 295, 297, 300, 306, 309, 311, 318, 322, 330, 333, 336, 338, 339, 342, 346, 350, 357, 360, 363, 367, 369, 371, 374, 375, 378, 384, 386, 392, 400, 411, 412, 413, 414, 417, 418, 420, 421, 423, 425, 427, 430, 433, 435, 449, 453, 459, 461, 462, 463, 464, 465, 466, 467, 468, 474, 475, 476, 478, 480, 481], "malloc": [5, 7, 34, 42, 73, 78, 211, 280, 291, 422, 453, 460, 461, 463, 465, 475, 476, 477, 481], "onc": [5, 7, 13, 22, 23, 24, 28, 33, 34, 56, 59, 61, 63, 72, 73, 75, 76, 84, 85, 92, 94, 95, 99, 100, 101, 103, 104, 107, 115, 118, 124, 130, 131, 137, 138, 147, 149, 153, 156, 157, 158, 161, 165, 167, 184, 186, 188, 191, 194, 203, 211, 216, 224, 228, 232, 233, 242, 243, 245, 248, 249, 253, 256, 259, 265, 266, 267, 268, 269, 281, 282, 286, 290, 291, 293, 297, 306, 312, 317, 318, 326, 327, 330, 331, 332, 335, 336, 338, 339, 342, 345, 351, 352, 356, 360, 363, 367, 380, 382, 384, 386, 387, 388, 393, 397, 398, 400, 401, 408, 409, 411, 413, 414, 425, 426, 428, 429, 430, 434, 453, 454, 459, 460, 461, 463, 464, 465, 466, 467, 468, 472, 473, 474, 476, 478, 479, 480, 481], "space": [5, 18, 33, 42, 49, 59, 61, 63, 64, 72, 73, 85, 92, 93, 95, 99, 100, 104, 107, 113, 118, 141, 144, 148, 153, 156, 159, 160, 165, 175, 176, 182, 184, 188, 189, 191, 196, 197, 199, 200, 210, 211, 219, 223, 224, 240, 245, 246, 253, 257, 259, 264, 265, 266, 281, 282, 290, 291, 295, 301, 312, 317, 319, 320, 329, 330, 331, 332, 333, 335, 342, 343, 344, 346, 360, 362, 363, 364, 367, 373, 374, 376, 380, 382, 392, 393, 395, 397, 408, 411, 424, 426, 430, 432, 433, 459, 460, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 477, 478, 480, 481], "tab": [5, 66, 68, 77, 120, 144, 153, 173, 175, 176, 188, 191, 196, 200, 211, 223, 240, 245, 253, 260, 295, 315, 317, 318, 321, 329, 332, 342, 343, 346, 362, 366, 373, 392, 401, 417, 433, 439, 443, 447, 453, 460, 465, 467, 470, 472, 474, 475, 477, 478, 479, 480, 481], "comma": [5, 34, 68, 78, 94, 110, 149, 173, 184, 191, 240, 246, 264, 265, 266, 269, 290, 317, 342, 343, 360, 375, 378, 393, 398, 425, 426, 428, 429, 434, 440, 453, 464, 465, 466, 467, 468, 470, 472, 475, 478, 479, 481, 482], "ignor": [5, 18, 22, 23, 24, 33, 34, 35, 39, 40, 47, 49, 59, 61, 63, 64, 66, 73, 76, 77, 100, 104, 107, 108, 113, 120, 131, 134, 135, 137, 141, 142, 147, 149, 153, 156, 157, 161, 165, 167, 173, 174, 175, 179, 181, 184, 186, 188, 189, 191, 194, 197, 198, 206, 207, 211, 213, 214, 216, 221, 223, 224, 228, 240, 241, 245, 246, 247, 248, 249, 253, 256, 259, 260, 264, 265, 266, 267, 268, 269, 270, 274, 281, 286, 291, 294, 295, 297, 300, 302, 306, 312, 317, 318, 326, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 345, 346, 350, 352, 354, 356, 360, 362, 363, 364, 371, 374, 376, 378, 379, 380, 384, 386, 387, 392, 393, 396, 398, 403, 408, 411, 413, 414, 419, 420, 423, 425, 426, 429, 430, 433, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "within": [5, 7, 22, 33, 42, 49, 54, 68, 73, 76, 85, 92, 94, 95, 98, 99, 101, 103, 104, 118, 133, 137, 138, 142, 152, 155, 156, 161, 165, 167, 174, 175, 181, 184, 188, 189, 191, 201, 214, 216, 223, 228, 245, 246, 248, 249, 250, 251, 253, 259, 265, 268, 269, 273, 281, 282, 283, 295, 300, 305, 306, 310, 311, 317, 319, 322, 329, 330, 335, 336, 338, 342, 343, 345, 346, 350, 351, 352, 360, 362, 367, 369, 374, 382, 384, 386, 387, 392, 393, 397, 398, 408, 409, 411, 418, 420, 421, 424, 425, 426, 427, 428, 430, 433, 434, 447, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 472, 473, 474, 475, 477, 478, 479, 480, 481], "make": [5, 10, 11, 23, 33, 39, 45, 51, 59, 63, 64, 68, 72, 73, 75, 76, 84, 92, 93, 94, 95, 98, 100, 101, 104, 107, 108, 110, 111, 118, 124, 131, 137, 138, 139, 147, 149, 153, 155, 156, 158, 159, 161, 165, 167, 168, 174, 175, 177, 179, 181, 184, 186, 188, 189, 191, 194, 195, 198, 203, 204, 207, 210, 211, 216, 219, 220, 223, 224, 228, 232, 233, 240, 243, 245, 248, 250, 253, 256, 257, 259, 264, 265, 266, 267, 268, 269, 273, 277, 279, 281, 286, 290, 291, 293, 294, 295, 297, 300, 306, 310, 320, 326, 327, 328, 329, 331, 332, 335, 336, 338, 339, 342, 345, 350, 351, 353, 356, 360, 361, 362, 363, 367, 371, 374, 376, 378, 379, 383, 384, 386, 387, 388, 392, 393, 396, 398, 400, 401, 405, 409, 410, 411, 414, 419, 420, 424, 425, 426, 428, 430, 432, 433, 434, 454, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 473, 474, 475, 478, 479, 480, 481, 482], "tad": 5, "readabl": [5, 85, 92, 100, 101, 104, 115, 118, 131, 147, 149, 153, 158, 165, 174, 188, 189, 196, 203, 228, 241, 243, 256, 265, 266, 281, 286, 291, 297, 301, 302, 305, 308, 317, 331, 336, 340, 342, 345, 346, 347, 367, 375, 387, 412, 424, 433, 453, 461, 462, 464, 466, 467, 468, 469, 473, 475, 476, 477, 478, 479, 481], "wchar_t": [5, 16, 33, 34, 59, 66, 68, 72, 73, 119, 174, 471, 472, 478, 480, 481], "ucs": [5, 350, 462, 474], "increment": [5, 33, 34, 42, 63, 68, 73, 76, 85, 94, 95, 101, 116, 117, 143, 184, 189, 205, 268, 281, 290, 291, 342, 363, 364, 367, 374, 384, 409, 411, 460, 462, 463, 464, 465, 467, 471, 473, 474, 481], "caus": [5, 9, 23, 33, 42, 47, 51, 59, 61, 63, 64, 66, 73, 75, 76, 77, 85, 95, 100, 101, 104, 108, 110, 113, 118, 120, 124, 131, 133, 136, 137, 149, 150, 153, 156, 157, 161, 165, 167, 174, 175, 184, 186, 188, 189, 191, 203, 206, 210, 211, 223, 226, 240, 243, 245, 246, 248, 253, 256, 260, 264, 265, 267, 269, 273, 274, 280, 281, 291, 295, 297, 300, 306, 311, 312, 317, 326, 328, 331, 332, 335, 338, 339, 342, 343, 350, 351, 354, 356, 360, 362, 363, 364, 374, 384, 386, 387, 388, 393, 398, 400, 403, 408, 409, 413, 417, 420, 424, 425, 426, 427, 428, 429, 430, 433, 434, 441, 450, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 481], "produc": [5, 7, 22, 23, 25, 34, 35, 39, 59, 63, 76, 77, 84, 85, 92, 95, 100, 101, 104, 107, 118, 137, 147, 149, 156, 159, 161, 165, 174, 175, 181, 184, 185, 188, 191, 192, 194, 195, 199, 200, 201, 203, 206, 211, 212, 223, 226, 228, 232, 233, 246, 256, 259, 260, 265, 268, 274, 281, 286, 291, 297, 300, 303, 306, 311, 316, 317, 319, 339, 342, 345, 346, 350, 356, 363, 375, 376, 378, 382, 392, 395, 404, 409, 410, 412, 413, 414, 419, 420, 426, 428, 430, 433, 447, 453, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 481], "found": [5, 17, 22, 31, 33, 42, 45, 49, 55, 58, 59, 61, 63, 64, 71, 72, 73, 77, 79, 93, 94, 95, 97, 99, 100, 101, 104, 107, 108, 112, 118, 147, 149, 156, 161, 165, 168, 174, 175, 189, 191, 194, 195, 197, 201, 203, 205, 206, 209, 211, 213, 214, 223, 224, 226, 228, 231, 234, 239, 240, 241, 242, 243, 245, 246, 248, 249, 251, 253, 259, 263, 264, 265, 266, 268, 269, 270, 274, 276, 277, 280, 281, 290, 291, 293, 294, 295, 300, 312, 317, 320, 330, 331, 333, 335, 337, 338, 339, 342, 346, 350, 352, 353, 356, 357, 360, 367, 369, 374, 376, 383, 384, 385, 386, 387, 388, 393, 398, 404, 405, 408, 410, 411, 412, 413, 417, 418, 421, 423, 425, 426, 427, 428, 430, 432, 433, 434, 439, 449, 450, 451, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "therefor": [5, 23, 33, 42, 49, 63, 73, 75, 76, 84, 85, 92, 95, 100, 101, 103, 104, 107, 118, 137, 144, 149, 156, 171, 174, 179, 181, 206, 211, 212, 213, 223, 241, 248, 251, 256, 260, 264, 267, 279, 281, 291, 297, 311, 317, 328, 330, 331, 335, 339, 342, 350, 356, 363, 373, 384, 398, 411, 412, 419, 420, 425, 426, 428, 432, 433, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 474, 477, 478, 481], "yet": [5, 13, 23, 28, 31, 33, 34, 45, 63, 64, 73, 79, 84, 85, 92, 94, 99, 103, 104, 131, 135, 137, 149, 167, 174, 175, 184, 194, 195, 203, 211, 230, 248, 266, 281, 291, 293, 295, 306, 332, 333, 339, 342, 346, 363, 379, 384, 387, 408, 411, 427, 429, 434, 460, 462, 463, 465, 467, 472, 475, 477, 478, 480, 481], "systemerror": [5, 23, 27, 45, 49, 55, 60, 64, 211, 441, 448, 472, 477, 481], "constructor": [5, 23, 28, 53, 55, 63, 64, 68, 73, 79, 87, 93, 94, 95, 98, 100, 101, 103, 110, 118, 120, 124, 133, 147, 155, 156, 158, 159, 162, 165, 170, 173, 174, 179, 181, 184, 188, 191, 196, 199, 200, 201, 204, 205, 206, 211, 216, 219, 223, 224, 232, 233, 235, 240, 241, 244, 246, 256, 257, 259, 260, 265, 266, 268, 269, 276, 281, 290, 297, 303, 305, 306, 314, 319, 323, 326, 328, 329, 333, 335, 336, 339, 342, 343, 349, 356, 357, 360, 362, 363, 367, 371, 382, 383, 384, 386, 387, 388, 393, 400, 401, 405, 411, 418, 420, 421, 423, 426, 428, 439, 441, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "compat": [5, 23, 24, 33, 34, 42, 59, 61, 63, 64, 66, 68, 75, 76, 79, 84, 87, 92, 99, 100, 101, 104, 107, 108, 118, 124, 126, 137, 142, 156, 159, 165, 174, 182, 184, 191, 192, 194, 199, 201, 203, 205, 206, 209, 211, 212, 220, 226, 228, 241, 243, 245, 246, 248, 249, 250, 251, 253, 257, 264, 265, 266, 269, 281, 286, 291, 293, 294, 297, 299, 300, 306, 310, 312, 317, 320, 323, 330, 335, 338, 339, 342, 346, 350, 356, 360, 363, 364, 374, 379, 382, 384, 385, 386, 392, 393, 395, 409, 417, 419, 420, 423, 425, 426, 428, 430, 433, 434, 454, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "dict": [5, 10, 22, 23, 26, 31, 33, 35, 54, 59, 61, 63, 68, 73, 78, 79, 84, 85, 87, 88, 93, 95, 99, 110, 118, 120, 124, 158, 165, 169, 173, 179, 180, 182, 185, 188, 189, 191, 203, 223, 224, 242, 248, 252, 253, 260, 265, 266, 267, 281, 286, 289, 297, 302, 305, 324, 328, 338, 339, 343, 353, 356, 360, 363, 367, 374, 377, 383, 384, 386, 400, 411, 417, 425, 426, 428, 429, 433, 439, 440, 444, 448, 450, 453, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481], "pair": [5, 7, 22, 28, 33, 40, 64, 68, 73, 75, 85, 92, 94, 95, 98, 104, 107, 118, 124, 131, 134, 139, 142, 149, 152, 158, 165, 175, 179, 182, 184, 188, 189, 191, 194, 195, 200, 207, 211, 219, 226, 228, 242, 253, 257, 259, 260, 266, 269, 273, 281, 286, 290, 291, 294, 295, 297, 307, 320, 330, 335, 336, 338, 339, 342, 346, 353, 356, 357, 359, 361, 363, 367, 373, 374, 382, 383, 384, 387, 392, 393, 400, 408, 411, 414, 415, 425, 426, 428, 433, 434, 439, 440, 461, 462, 463, 464, 466, 467, 468, 469, 472, 473, 474, 475, 477, 481], "consecut": [5, 22, 61, 64, 95, 141, 156, 259, 273, 342, 343, 345, 382, 426, 433, 453, 464, 475, 481], "add": [5, 7, 28, 31, 33, 34, 45, 55, 58, 59, 63, 73, 76, 77, 79, 84, 85, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 110, 115, 118, 120, 137, 139, 141, 149, 150, 153, 155, 156, 158, 159, 161, 165, 167, 175, 179, 181, 184, 186, 187, 189, 191, 192, 193, 194, 195, 198, 201, 203, 204, 206, 211, 221, 223, 224, 228, 230, 232, 234, 241, 242, 243, 245, 248, 253, 256, 259, 260, 265, 266, 269, 274, 279, 281, 287, 289, 290, 291, 294, 297, 299, 300, 305, 306, 317, 319, 326, 330, 332, 333, 335, 336, 338, 339, 342, 343, 345, 350, 351, 352, 353, 356, 360, 362, 364, 367, 373, 374, 382, 383, 384, 386, 387, 388, 392, 393, 398, 400, 408, 409, 411, 412, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 432, 433, 434, 438, 441, 444, 447, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "serv": [5, 73, 76, 100, 101, 124, 131, 134, 184, 191, 200, 201, 224, 243, 248, 251, 259, 266, 281, 291, 297, 311, 331, 338, 339, 367, 382, 384, 405, 411, 418, 430, 433, 464, 468, 473, 474, 476, 478, 481], "respect": [5, 7, 22, 23, 31, 33, 34, 39, 47, 49, 64, 72, 73, 75, 76, 84, 85, 93, 94, 100, 101, 104, 110, 118, 130, 133, 137, 139, 147, 149, 152, 156, 161, 165, 174, 175, 181, 184, 189, 191, 192, 194, 206, 211, 213, 223, 228, 241, 243, 248, 251, 256, 260, 265, 266, 267, 268, 273, 276, 281, 291, 297, 306, 307, 320, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 352, 356, 363, 364, 373, 374, 382, 384, 386, 395, 409, 424, 426, 428, 430, 434, 453, 454, 457, 460, 462, 464, 466, 468, 472, 473, 474, 475, 477, 478, 479, 480, 481], "py_vabuildvalu": [5, 57], "py_fals": [6, 63, 64, 75, 429, 481], "py_tru": [6, 63, 64, 75, 429, 481], "pybool_typ": [6, 57, 481], "instanc": [6, 9, 13, 16, 20, 23, 25, 28, 31, 33, 39, 42, 43, 45, 47, 49, 53, 55, 58, 60, 61, 63, 64, 68, 71, 73, 75, 76, 78, 89, 92, 95, 99, 100, 101, 103, 104, 108, 115, 118, 124, 126, 130, 131, 133, 134, 135, 137, 138, 142, 147, 149, 151, 153, 155, 156, 157, 159, 165, 167, 170, 174, 175, 181, 184, 188, 189, 191, 192, 193, 194, 197, 199, 200, 201, 203, 204, 205, 206, 207, 210, 211, 214, 216, 219, 223, 224, 228, 232, 233, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 256, 259, 260, 265, 266, 267, 268, 269, 279, 281, 282, 283, 286, 290, 291, 294, 295, 296, 303, 305, 306, 310, 312, 313, 316, 317, 319, 321, 323, 327, 328, 329, 330, 333, 335, 336, 338, 339, 345, 346, 350, 353, 356, 357, 360, 362, 363, 367, 378, 379, 380, 382, 383, 384, 386, 387, 388, 392, 393, 398, 400, 401, 404, 406, 408, 409, 410, 411, 412, 413, 414, 417, 418, 420, 421, 423, 425, 427, 428, 433, 434, 438, 441, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "layer": [6, 9, 20, 25, 26, 32, 39, 56, 60, 61, 68, 75, 84, 101, 303, 333, 335, 339, 345, 417, 453, 460, 463, 466, 479, 480, 481], "pybool_check": 6, "immort": [6, 33, 34, 46, 52, 56, 87, 350, 463, 472, 479, 481], "py_return_fals": [6, 464], "py_return_tru": [6, 464], "pybool_fromlong": [6, 57], "certain": [7, 23, 33, 41, 42, 49, 58, 59, 63, 66, 73, 77, 85, 92, 94, 95, 100, 101, 104, 118, 131, 142, 156, 171, 174, 181, 188, 191, 193, 194, 197, 201, 203, 204, 206, 207, 211, 232, 245, 253, 264, 265, 266, 267, 268, 269, 270, 281, 290, 291, 293, 295, 305, 306, 335, 339, 344, 346, 352, 356, 363, 364, 367, 384, 385, 386, 387, 392, 408, 417, 426, 428, 430, 433, 459, 460, 461, 462, 463, 464, 466, 467, 469, 472, 474, 475, 478, 479, 481], "wrap": [7, 21, 33, 42, 43, 58, 63, 68, 79, 88, 93, 97, 101, 107, 110, 118, 124, 127, 135, 137, 139, 147, 153, 156, 167, 174, 175, 179, 188, 189, 191, 199, 200, 205, 206, 211, 218, 223, 224, 228, 232, 240, 245, 249, 252, 253, 256, 259, 265, 266, 268, 279, 281, 290, 291, 302, 331, 338, 339, 342, 345, 350, 354, 356, 360, 361, 366, 374, 383, 384, 386, 387, 388, 392, 393, 403, 405, 411, 415, 425, 426, 450, 459, 462, 463, 464, 465, 466, 467, 468, 472, 473, 475, 476, 477, 479, 481], "parti": [7, 31, 33, 84, 85, 101, 110, 124, 126, 130, 131, 136, 156, 167, 174, 179, 181, 182, 223, 233, 248, 249, 281, 291, 297, 300, 328, 332, 338, 339, 350, 353, 363, 367, 378, 384, 397, 398, 400, 423, 424, 426, 457, 459, 460, 461, 463, 464, 466, 467, 469, 472, 473, 474, 475, 477, 479, 480, 481], "librari": [7, 23, 33, 34, 42, 45, 51, 59, 63, 66, 68, 71, 72, 73, 74, 77, 79, 80, 84, 85, 91, 92, 95, 97, 99, 103, 104, 105, 107, 108, 116, 118, 121, 124, 131, 137, 140, 165, 167, 175, 176, 181, 182, 184, 185, 190, 191, 192, 201, 206, 210, 226, 228, 233, 241, 245, 249, 254, 255, 262, 264, 265, 267, 273, 280, 281, 285, 290, 291, 294, 297, 300, 306, 311, 312, 318, 326, 328, 329, 331, 332, 335, 338, 339, 342, 350, 352, 353, 356, 360, 363, 364, 367, 373, 376, 382, 384, 386, 388, 389, 392, 397, 398, 408, 420, 423, 425, 426, 428, 430, 431, 432, 433, 434, 443, 452, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "special": [7, 18, 23, 31, 33, 34, 35, 42, 49, 58, 60, 61, 63, 64, 68, 73, 75, 84, 85, 87, 92, 94, 95, 99, 100, 101, 103, 104, 107, 118, 124, 135, 136, 137, 141, 142, 149, 150, 152, 153, 165, 166, 167, 174, 175, 178, 179, 181, 185, 189, 191, 194, 201, 203, 206, 211, 218, 220, 226, 228, 243, 245, 248, 252, 253, 257, 259, 260, 264, 265, 266, 269, 270, 279, 280, 281, 288, 290, 291, 294, 297, 300, 317, 319, 322, 327, 329, 330, 331, 335, 339, 340, 345, 346, 350, 351, 356, 359, 363, 367, 373, 386, 387, 392, 393, 400, 408, 411, 413, 417, 423, 424, 425, 427, 428, 429, 431, 433, 434, 447, 454, 459, 460, 461, 462, 464, 465, 466, 467, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "imag": [7, 15, 42, 68, 85, 87, 149, 152, 175, 196, 198, 204, 223, 224, 241, 247, 260, 287, 320, 334, 342, 343, 350, 366, 371, 374, 382, 393, 400, 404, 417, 426, 429, 473, 478, 481], "numer": [7, 41, 47, 63, 64, 68, 84, 85, 95, 100, 101, 104, 107, 108, 142, 145, 152, 156, 175, 184, 189, 207, 210, 211, 219, 223, 231, 232, 236, 238, 240, 243, 252, 259, 260, 264, 265, 273, 281, 287, 288, 291, 300, 306, 312, 317, 323, 329, 333, 335, 338, 339, 343, 350, 367, 374, 375, 382, 385, 386, 387, 393, 411, 417, 420, 428, 447, 459, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 479, 481], "analysi": [7, 33, 68, 104, 150, 152, 188, 220, 252, 262, 277, 306, 384, 428, 431, 432, 434, 465, 474, 476, 481], "while": [7, 13, 22, 23, 28, 33, 36, 40, 45, 49, 63, 64, 68, 72, 73, 75, 76, 84, 85, 87, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 107, 110, 113, 114, 118, 120, 124, 131, 132, 134, 136, 137, 138, 145, 147, 149, 152, 156, 158, 165, 167, 168, 174, 175, 177, 181, 182, 184, 188, 189, 190, 191, 194, 197, 206, 207, 211, 223, 224, 225, 228, 230, 232, 233, 234, 240, 241, 245, 248, 249, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 281, 290, 291, 294, 295, 297, 300, 306, 309, 312, 314, 316, 317, 324, 326, 327, 329, 331, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 356, 360, 362, 363, 364, 367, 369, 378, 379, 382, 384, 386, 392, 393, 397, 398, 408, 411, 420, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 447, 448, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "characterist": [7, 85, 297, 344, 350, 465, 466], "back": [7, 10, 22, 25, 28, 39, 41, 42, 58, 59, 63, 64, 73, 76, 84, 85, 95, 101, 103, 104, 107, 110, 118, 126, 131, 144, 149, 152, 153, 156, 159, 165, 167, 175, 179, 181, 184, 188, 189, 191, 192, 194, 203, 206, 213, 223, 228, 230, 233, 241, 243, 248, 256, 266, 267, 276, 280, 281, 282, 290, 291, 293, 295, 297, 310, 312, 317, 328, 335, 336, 338, 339, 340, 342, 343, 350, 356, 360, 364, 367, 375, 376, 382, 388, 392, 393, 411, 415, 417, 418, 420, 423, 425, 426, 430, 434, 447, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 479, 480, 481], "desir": [7, 9, 23, 33, 42, 61, 73, 85, 92, 93, 94, 95, 100, 101, 104, 107, 118, 135, 137, 149, 156, 159, 165, 167, 174, 175, 187, 188, 189, 206, 210, 224, 233, 243, 245, 248, 257, 264, 265, 269, 270, 274, 276, 290, 295, 300, 305, 309, 317, 318, 336, 338, 339, 342, 343, 345, 352, 360, 362, 363, 367, 373, 374, 382, 384, 392, 400, 403, 410, 411, 414, 426, 428, 430, 453, 460, 462, 463, 464, 465, 466, 467, 475, 476, 477, 479, 481], "situat": [7, 42, 61, 63, 73, 75, 85, 94, 95, 99, 100, 101, 103, 108, 118, 124, 149, 156, 167, 179, 189, 205, 211, 228, 233, 248, 251, 256, 265, 269, 281, 290, 333, 346, 360, 363, 388, 395, 398, 408, 426, 462, 467, 468, 472, 475, 476, 477, 481], "direct": [7, 13, 28, 31, 33, 34, 42, 45, 46, 49, 54, 58, 59, 61, 63, 64, 67, 68, 72, 73, 75, 76, 85, 93, 94, 98, 99, 100, 101, 103, 108, 110, 113, 118, 121, 126, 130, 131, 137, 144, 147, 149, 156, 157, 158, 159, 161, 165, 167, 174, 179, 181, 184, 185, 188, 189, 192, 194, 199, 203, 204, 207, 210, 211, 216, 219, 223, 224, 230, 233, 240, 241, 243, 245, 249, 250, 251, 256, 257, 260, 264, 265, 266, 268, 269, 276, 278, 281, 290, 291, 293, 297, 300, 305, 306, 312, 317, 318, 322, 328, 333, 335, 336, 338, 339, 342, 346, 350, 356, 360, 362, 363, 364, 367, 372, 373, 374, 376, 378, 379, 382, 383, 386, 387, 388, 393, 398, 400, 408, 411, 412, 415, 419, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 441, 453, 459, 460, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "intermedi": [7, 84, 87, 95, 184, 189, 204, 224, 248, 259, 273, 290, 291, 330, 339, 387, 430, 465, 469, 473, 478, 481], "facil": [7, 33, 92, 100, 140, 142, 153, 155, 175, 245, 262, 265, 267, 269, 291, 297, 335, 354, 356, 367, 382, 426, 459, 463, 481], "level": [7, 13, 16, 22, 23, 31, 32, 33, 34, 42, 43, 59, 63, 68, 73, 74, 75, 79, 84, 85, 93, 94, 95, 97, 99, 107, 108, 116, 118, 120, 123, 124, 127, 131, 133, 134, 135, 137, 138, 144, 147, 150, 156, 158, 161, 162, 165, 167, 168, 175, 178, 179, 181, 188, 189, 191, 192, 200, 202, 205, 210, 211, 221, 223, 224, 228, 232, 240, 241, 243, 245, 246, 248, 249, 252, 253, 254, 256, 258, 259, 266, 267, 268, 269, 277, 279, 280, 281, 283, 286, 291, 293, 294, 295, 297, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 317, 319, 320, 322, 328, 329, 330, 331, 332, 333, 338, 339, 345, 350, 352, 353, 354, 356, 357, 358, 360, 362, 363, 367, 373, 374, 379, 383, 386, 387, 393, 397, 398, 400, 401, 408, 409, 411, 413, 417, 420, 422, 423, 425, 426, 427, 428, 429, 430, 433, 434, 438, 448, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "side": [7, 14, 22, 33, 52, 60, 68, 73, 75, 84, 85, 95, 101, 104, 107, 108, 124, 131, 149, 152, 158, 167, 175, 179, 185, 188, 189, 194, 224, 240, 241, 248, 264, 265, 267, 281, 286, 291, 297, 300, 309, 316, 321, 322, 328, 335, 336, 342, 346, 350, 360, 367, 374, 384, 386, 387, 411, 423, 425, 428, 430, 434, 440, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "export": [7, 23, 42, 43, 45, 48, 63, 68, 71, 72, 73, 77, 85, 108, 116, 297, 335, 338, 342, 350, 353, 376, 434, 454, 463, 467, 473, 474, 476, 477, 478, 479, 480, 481], "expos": [7, 33, 38, 43, 44, 45, 46, 55, 58, 61, 62, 63, 64, 72, 73, 76, 100, 108, 124, 137, 174, 175, 179, 184, 213, 248, 250, 253, 257, 264, 265, 279, 281, 291, 297, 305, 328, 329, 333, 342, 343, 344, 346, 350, 378, 382, 383, 385, 400, 403, 418, 420, 423, 426, 430, 463, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "section": [7, 17, 34, 42, 51, 55, 58, 63, 64, 71, 72, 73, 75, 76, 77, 85, 92, 93, 95, 98, 99, 100, 101, 104, 107, 108, 112, 118, 120, 124, 130, 131, 135, 137, 141, 149, 153, 156, 158, 165, 167, 174, 179, 182, 184, 191, 192, 196, 200, 201, 210, 219, 228, 233, 239, 240, 241, 245, 246, 256, 259, 260, 265, 266, 269, 290, 291, 297, 303, 305, 306, 312, 317, 319, 326, 330, 335, 338, 339, 342, 345, 346, 350, 356, 363, 367, 382, 386, 392, 393, 408, 409, 411, 413, 414, 417, 420, 424, 425, 426, 427, 428, 430, 433, 434, 449, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "consum": [7, 59, 63, 64, 68, 84, 85, 95, 104, 118, 123, 125, 132, 134, 149, 156, 167, 189, 192, 205, 240, 259, 260, 281, 286, 290, 291, 294, 296, 306, 314, 317, 320, 328, 345, 350, 360, 363, 380, 384, 387, 392, 411, 426, 429, 453, 460, 464, 465, 466, 467, 473, 474, 475, 477, 479, 481], "sever": [7, 28, 33, 42, 66, 72, 73, 75, 77, 84, 85, 93, 94, 95, 99, 100, 101, 104, 107, 108, 110, 118, 124, 133, 135, 155, 156, 159, 165, 174, 175, 181, 182, 184, 186, 189, 191, 197, 210, 211, 223, 239, 245, 248, 253, 257, 265, 266, 267, 269, 271, 279, 281, 285, 290, 291, 293, 297, 305, 306, 309, 317, 319, 327, 331, 333, 335, 336, 338, 339, 340, 342, 345, 346, 356, 363, 367, 373, 374, 376, 378, 379, 382, 384, 385, 386, 388, 393, 398, 400, 401, 403, 404, 413, 417, 423, 425, 426, 430, 432, 434, 447, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481], "obtain": [7, 31, 64, 92, 98, 100, 104, 124, 135, 147, 149, 150, 151, 175, 181, 184, 188, 194, 195, 201, 203, 206, 213, 223, 233, 246, 256, 257, 259, 264, 265, 266, 267, 268, 276, 281, 290, 291, 306, 309, 311, 317, 335, 339, 342, 346, 364, 393, 397, 400, 411, 412, 413, 424, 425, 428, 434, 459, 460, 462, 463, 465, 466, 473, 474, 475, 476, 477, 478, 481], "simpl": [7, 33, 43, 63, 64, 67, 68, 73, 75, 84, 85, 92, 94, 95, 98, 99, 100, 101, 107, 108, 111, 113, 118, 120, 136, 138, 139, 149, 153, 156, 159, 165, 167, 168, 171, 172, 174, 179, 181, 182, 185, 187, 188, 192, 194, 198, 203, 205, 206, 207, 220, 221, 224, 228, 232, 240, 242, 246, 252, 253, 260, 266, 267, 269, 276, 281, 287, 290, 291, 293, 294, 295, 297, 302, 305, 306, 317, 322, 327, 331, 333, 335, 338, 341, 342, 343, 345, 356, 357, 360, 363, 367, 376, 378, 379, 382, 383, 384, 386, 388, 392, 393, 397, 398, 400, 404, 405, 406, 408, 409, 411, 412, 417, 418, 420, 425, 428, 429, 431, 438, 444, 453, 459, 460, 461, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 479, 480, 481, 482], "orient": [7, 42, 68, 76, 85, 87, 93, 95, 107, 131, 199, 220, 252, 281, 306, 335, 342, 363, 364, 367, 374, 438, 461, 466, 473, 475], "multi": [7, 16, 32, 33, 68, 71, 73, 84, 85, 86, 87, 94, 95, 99, 101, 104, 107, 111, 116, 147, 184, 188, 189, 191, 224, 232, 245, 248, 259, 265, 266, 268, 281, 314, 317, 320, 323, 329, 330, 338, 342, 363, 418, 420, 425, 433, 443, 453, 459, 460, 465, 467, 470, 472, 474, 475, 479, 481, 482], "valu": [7, 9, 11, 12, 13, 15, 17, 18, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 45, 46, 47, 49, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 74, 75, 76, 78, 79, 87, 89, 92, 93, 98, 100, 101, 103, 104, 107, 108, 110, 113, 115, 116, 120, 124, 127, 131, 135, 136, 137, 138, 139, 140, 142, 144, 145, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 167, 168, 171, 173, 175, 176, 181, 182, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 209, 210, 211, 213, 214, 215, 216, 219, 223, 224, 226, 228, 232, 233, 234, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 253, 255, 256, 257, 259, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 288, 289, 291, 293, 294, 295, 296, 297, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 357, 360, 362, 363, 364, 367, 371, 373, 374, 375, 376, 379, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 395, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 427, 429, 430, 431, 433, 434, 438, 439, 440, 444, 447, 449, 450, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "file": [7, 16, 23, 25, 31, 32, 33, 34, 41, 45, 49, 51, 59, 63, 66, 68, 72, 73, 75, 76, 77, 78, 79, 81, 84, 86, 87, 89, 93, 94, 95, 97, 99, 104, 108, 110, 112, 113, 115, 116, 117, 119, 120, 123, 128, 129, 130, 131, 135, 137, 138, 139, 141, 142, 144, 146, 148, 149, 150, 151, 153, 155, 156, 158, 161, 167, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 188, 189, 194, 198, 199, 202, 204, 205, 206, 210, 211, 213, 215, 216, 217, 218, 221, 223, 226, 227, 228, 229, 232, 240, 241, 243, 246, 247, 250, 251, 252, 253, 255, 257, 258, 260, 263, 264, 265, 267, 269, 272, 274, 277, 278, 279, 281, 284, 286, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 309, 310, 311, 312, 317, 319, 320, 322, 324, 326, 327, 328, 329, 331, 332, 334, 335, 336, 338, 339, 340, 342, 345, 346, 347, 348, 350, 353, 357, 358, 359, 360, 361, 363, 364, 365, 366, 374, 375, 376, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 411, 412, 414, 415, 417, 419, 421, 423, 424, 425, 427, 428, 429, 430, 433, 434, 438, 439, 440, 441, 443, 444, 446, 447, 448, 450, 453, 456, 457, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 480, 481, 482], "seri": [7, 33, 61, 95, 104, 110, 118, 153, 174, 184, 189, 223, 233, 290, 312, 335, 342, 353, 363, 373, 384, 388, 392, 428, 439, 447, 448, 462, 464, 465, 466, 467, 475, 478], "written": [7, 9, 23, 34, 42, 45, 49, 59, 64, 72, 73, 76, 84, 85, 91, 92, 93, 95, 99, 101, 103, 104, 107, 110, 115, 124, 131, 135, 137, 144, 149, 150, 155, 156, 159, 161, 165, 167, 174, 175, 182, 189, 191, 194, 200, 203, 211, 212, 223, 228, 232, 233, 243, 245, 253, 256, 267, 269, 276, 279, 281, 286, 290, 291, 293, 297, 299, 302, 305, 306, 309, 311, 318, 322, 326, 328, 330, 331, 335, 336, 338, 339, 342, 350, 353, 356, 359, 360, 378, 380, 382, 383, 384, 386, 388, 398, 400, 403, 406, 408, 411, 417, 418, 419, 420, 421, 424, 426, 429, 432, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "intern": [7, 9, 10, 11, 13, 16, 22, 23, 30, 31, 33, 34, 41, 42, 45, 55, 59, 61, 63, 64, 68, 73, 75, 76, 84, 92, 93, 95, 100, 101, 103, 104, 107, 108, 110, 116, 118, 124, 126, 133, 134, 137, 138, 147, 152, 153, 155, 156, 159, 165, 174, 179, 181, 182, 184, 189, 191, 197, 202, 205, 206, 211, 233, 241, 243, 245, 248, 253, 256, 259, 263, 264, 265, 267, 268, 272, 273, 274, 276, 281, 291, 295, 297, 300, 305, 306, 312, 320, 326, 329, 330, 331, 335, 338, 339, 344, 345, 346, 350, 356, 357, 360, 363, 364, 367, 373, 374, 379, 382, 384, 386, 393, 398, 400, 408, 409, 411, 413, 417, 420, 421, 427, 428, 448, 454, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "readinto": [7, 147, 240, 256, 297, 466, 474, 476, 481], "argument": [7, 9, 11, 13, 22, 23, 24, 25, 28, 31, 33, 34, 35, 37, 39, 42, 47, 49, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 75, 76, 78, 79, 84, 87, 89, 92, 93, 94, 95, 97, 99, 100, 101, 103, 104, 107, 108, 110, 112, 113, 115, 116, 120, 124, 126, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 165, 167, 168, 171, 175, 176, 179, 181, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 216, 219, 221, 223, 224, 226, 228, 231, 232, 233, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 273, 274, 276, 277, 279, 280, 281, 285, 286, 293, 294, 295, 297, 299, 300, 302, 305, 306, 309, 311, 312, 313, 317, 318, 319, 320, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 345, 350, 353, 354, 356, 357, 359, 360, 362, 363, 364, 367, 369, 371, 374, 376, 378, 379, 382, 383, 384, 386, 387, 392, 393, 395, 397, 398, 400, 401, 403, 404, 405, 406, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 434, 438, 440, 441, 443, 444, 448, 453, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 480, 481], "select": [7, 33, 59, 64, 66, 68, 84, 93, 94, 100, 104, 105, 107, 118, 124, 136, 139, 152, 158, 167, 174, 175, 211, 223, 228, 244, 245, 246, 249, 252, 258, 259, 264, 266, 268, 279, 281, 286, 291, 297, 306, 309, 311, 316, 327, 331, 333, 335, 336, 338, 342, 343, 345, 346, 362, 363, 364, 366, 367, 369, 371, 373, 374, 382, 384, 388, 401, 411, 415, 425, 426, 427, 428, 430, 454, 457, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 476, 477, 478, 479, 480, 481], "reject": [7, 98, 104, 165, 241, 246, 273, 316, 356, 384, 433, 434, 460, 467, 475, 477, 481], "acquir": [7, 33, 73, 113, 136, 167, 206, 213, 265, 269, 281, 291, 331, 339, 356, 363, 372, 426, 465, 466, 467, 468, 471, 473, 474, 476, 478, 481], "over": [7, 13, 22, 23, 33, 42, 49, 61, 64, 68, 73, 74, 75, 84, 91, 92, 93, 94, 95, 100, 101, 103, 104, 107, 118, 124, 131, 139, 142, 149, 150, 158, 159, 165, 168, 174, 175, 181, 182, 184, 188, 189, 191, 194, 199, 200, 202, 203, 217, 223, 224, 228, 241, 245, 246, 248, 250, 251, 252, 256, 257, 259, 264, 265, 266, 267, 269, 274, 276, 281, 286, 291, 297, 303, 306, 317, 320, 326, 327, 330, 333, 335, 338, 339, 342, 346, 350, 356, 360, 367, 373, 374, 375, 376, 378, 382, 383, 384, 386, 387, 388, 395, 398, 408, 410, 411, 417, 420, 425, 426, 428, 430, 433, 438, 439, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "target": [7, 33, 35, 64, 68, 84, 93, 97, 100, 101, 103, 118, 120, 124, 131, 134, 167, 181, 184, 189, 239, 240, 245, 248, 249, 253, 266, 267, 281, 282, 290, 291, 294, 312, 314, 317, 330, 331, 335, 336, 338, 356, 360, 363, 367, 369, 384, 386, 387, 397, 408, 411, 413, 417, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 434, 440, 453, 454, 459, 463, 465, 466, 468, 470, 472, 473, 474, 475, 478, 479, 481], "pyobject_getbuff": [7, 48, 57, 63, 466, 471, 481], "right": [7, 15, 42, 47, 64, 68, 72, 73, 85, 92, 95, 101, 104, 107, 110, 120, 139, 142, 144, 149, 152, 153, 156, 158, 167, 174, 175, 181, 184, 188, 189, 191, 194, 211, 214, 223, 224, 233, 245, 246, 253, 265, 273, 286, 287, 290, 291, 293, 297, 300, 306, 317, 328, 335, 339, 342, 343, 362, 367, 372, 373, 374, 382, 386, 387, 388, 398, 401, 402, 409, 423, 424, 425, 426, 428, 429, 433, 434, 450, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 475, 477, 478, 479, 481], "sibl": [7, 85, 110, 118, 223, 374, 408], "isn": [7, 22, 23, 25, 31, 33, 61, 63, 73, 76, 79, 84, 85, 92, 93, 94, 98, 99, 101, 103, 104, 107, 113, 118, 131, 137, 155, 156, 167, 181, 189, 191, 194, 200, 202, 203, 232, 241, 246, 253, 267, 291, 294, 300, 312, 317, 335, 336, 339, 340, 350, 353, 367, 376, 386, 387, 388, 392, 401, 403, 404, 417, 426, 434, 447, 460, 461, 462, 463, 464, 465, 466, 467, 473, 481], "anymor": [7, 11, 31, 33, 63, 64, 85, 131, 281, 291, 295, 335, 350, 467, 468, 472, 473, 474, 479, 481], "could": [7, 22, 23, 27, 31, 33, 39, 42, 47, 56, 61, 63, 73, 76, 77, 85, 92, 93, 94, 95, 99, 100, 101, 103, 107, 108, 110, 118, 124, 126, 127, 130, 131, 133, 136, 139, 149, 153, 165, 174, 175, 181, 191, 198, 199, 204, 206, 211, 214, 223, 224, 226, 228, 243, 245, 253, 257, 259, 260, 265, 266, 267, 269, 281, 290, 291, 293, 294, 295, 297, 306, 309, 312, 317, 319, 327, 329, 331, 335, 338, 346, 350, 356, 360, 363, 367, 380, 384, 386, 388, 392, 393, 395, 400, 408, 420, 423, 426, 428, 430, 432, 433, 434, 441, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "lead": [7, 18, 28, 39, 63, 64, 73, 75, 78, 85, 94, 98, 99, 100, 101, 103, 104, 137, 138, 148, 149, 153, 161, 165, 181, 184, 186, 188, 191, 194, 197, 203, 206, 211, 219, 223, 226, 241, 243, 245, 248, 253, 256, 257, 259, 265, 267, 269, 273, 274, 281, 291, 294, 295, 297, 306, 312, 316, 335, 342, 345, 350, 352, 354, 356, 357, 360, 362, 364, 379, 386, 392, 393, 398, 408, 411, 420, 425, 426, 427, 428, 430, 433, 434, 453, 459, 460, 463, 464, 465, 466, 468, 472, 474, 475, 477, 478, 479, 480, 481], "various": [7, 33, 42, 58, 63, 73, 75, 79, 85, 91, 92, 93, 94, 95, 103, 104, 107, 110, 115, 118, 131, 144, 149, 156, 167, 174, 176, 179, 184, 188, 191, 192, 195, 201, 206, 211, 214, 215, 228, 240, 241, 248, 256, 257, 259, 262, 266, 271, 276, 279, 288, 290, 291, 294, 296, 306, 312, 329, 333, 335, 336, 337, 338, 339, 342, 343, 345, 350, 352, 356, 360, 364, 367, 382, 383, 385, 386, 388, 393, 395, 411, 426, 428, 430, 433, 434, 453, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 476, 477, 478, 479, 481], "resourc": [7, 23, 33, 63, 68, 84, 85, 91, 99, 103, 108, 117, 118, 130, 131, 133, 136, 140, 167, 186, 191, 210, 211, 224, 240, 246, 248, 249, 252, 255, 265, 278, 281, 291, 297, 300, 327, 330, 335, 339, 342, 350, 360, 363, 367, 374, 380, 386, 389, 392, 393, 396, 398, 403, 411, 414, 417, 426, 430, 453, 457, 463, 465, 466, 467, 471, 473, 474, 477, 480, 481], "leak": [7, 33, 38, 45, 59, 60, 73, 99, 101, 223, 225, 281, 291, 346, 350, 380, 428, 460, 461, 467, 468, 473, 475, 476, 480, 481], "simpli": [7, 63, 72, 73, 75, 76, 79, 84, 85, 95, 98, 101, 103, 104, 107, 118, 137, 150, 153, 156, 165, 174, 175, 181, 184, 191, 223, 228, 248, 253, 260, 266, 267, 270, 281, 290, 291, 295, 297, 302, 312, 317, 322, 323, 331, 333, 338, 340, 343, 346, 350, 351, 363, 383, 384, 386, 387, 388, 393, 398, 400, 401, 408, 409, 417, 419, 430, 459, 460, 461, 462, 463, 464, 465, 466, 467, 472, 473, 476, 481], "programm": [7, 63, 73, 77, 80, 85, 92, 93, 100, 175, 179, 181, 184, 191, 192, 211, 264, 269, 281, 290, 291, 293, 335, 338, 342, 345, 350, 367, 373, 382, 388, 398, 400, 403, 425, 434, 461, 462, 464, 465, 466, 473, 481], "slice": [7, 40, 42, 54, 56, 60, 68, 85, 87, 95, 103, 119, 120, 139, 166, 169, 174, 189, 204, 211, 223, 226, 259, 276, 281, 289, 291, 294, 297, 317, 338, 342, 364, 413, 429, 434, 440, 444, 447, 448, 460, 462, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 478, 480, 481, 482], "mechan": [7, 11, 28, 33, 45, 61, 63, 73, 75, 79, 84, 85, 92, 93, 94, 100, 101, 104, 124, 137, 141, 167, 174, 179, 191, 195, 201, 224, 241, 242, 243, 244, 246, 249, 257, 258, 264, 265, 266, 267, 269, 270, 290, 295, 297, 300, 317, 320, 322, 331, 333, 335, 336, 339, 342, 350, 356, 363, 367, 373, 374, 383, 386, 393, 398, 421, 424, 426, 430, 433, 434, 460, 461, 462, 463, 464, 465, 467, 469, 472, 473, 474, 475, 476, 479, 480, 481], "abil": [7, 72, 73, 85, 92, 95, 100, 101, 104, 115, 211, 248, 251, 266, 281, 290, 322, 330, 342, 343, 408, 419, 421, 424, 425, 461, 462, 463, 465, 466, 467, 473, 474, 475, 476, 477, 481], "quit": [7, 72, 73, 76, 84, 92, 95, 100, 101, 104, 118, 142, 166, 167, 174, 175, 187, 198, 221, 245, 256, 267, 281, 286, 290, 295, 303, 307, 333, 338, 339, 367, 428, 430, 432, 439, 446, 448, 449, 460, 461, 462, 463, 465, 474, 475, 481], "easili": [7, 23, 42, 72, 73, 76, 84, 85, 94, 98, 100, 101, 103, 104, 137, 149, 156, 165, 167, 174, 198, 223, 228, 253, 295, 317, 329, 342, 360, 386, 400, 426, 433, 449, 459, 460, 463, 465, 469, 473, 474, 476, 477, 480, 481], "constant": [7, 25, 33, 45, 58, 63, 64, 68, 76, 84, 85, 92, 94, 101, 113, 116, 118, 120, 124, 137, 152, 156, 159, 162, 171, 174, 176, 181, 184, 189, 191, 209, 213, 223, 224, 233, 240, 242, 252, 253, 259, 262, 264, 265, 268, 271, 273, 279, 280, 281, 290, 291, 293, 296, 297, 302, 306, 317, 320, 324, 326, 327, 331, 335, 339, 340, 342, 350, 351, 354, 356, 357, 359, 360, 363, 367, 373, 376, 380, 384, 385, 398, 402, 404, 408, 410, 411, 413, 417, 420, 426, 428, 433, 439, 453, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "manipul": [7, 13, 33, 34, 42, 45, 55, 68, 73, 76, 95, 98, 101, 142, 167, 174, 175, 181, 184, 192, 203, 205, 252, 254, 267, 269, 281, 291, 306, 322, 329, 330, 332, 335, 340, 342, 350, 367, 373, 374, 392, 408, 411, 418, 423, 430, 453, 460, 463, 466, 474, 475, 477, 479, 480, 481], "system": [7, 16, 23, 33, 34, 42, 59, 63, 68, 73, 74, 76, 77, 79, 84, 85, 86, 92, 94, 95, 100, 101, 103, 104, 107, 108, 113, 116, 117, 119, 124, 131, 135, 140, 142, 153, 161, 162, 165, 167, 171, 174, 175, 181, 184, 185, 205, 206, 207, 211, 212, 218, 221, 223, 226, 228, 229, 243, 245, 248, 249, 250, 251, 252, 255, 256, 264, 265, 266, 267, 268, 269, 270, 274, 276, 280, 281, 285, 293, 294, 295, 297, 299, 300, 301, 304, 306, 307, 309, 312, 320, 322, 324, 326, 329, 330, 331, 332, 335, 336, 338, 339, 340, 342, 345, 350, 353, 354, 356, 359, 360, 363, 364, 367, 373, 380, 382, 383, 384, 386, 387, 388, 389, 393, 397, 401, 403, 404, 408, 411, 412, 413, 414, 417, 418, 419, 423, 424, 426, 431, 433, 434, 449, 453, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 478, 479, 480, 481, 482], "around": [7, 23, 25, 31, 33, 43, 59, 72, 73, 76, 79, 95, 97, 99, 101, 112, 118, 137, 139, 146, 150, 153, 165, 167, 175, 181, 184, 189, 191, 204, 213, 216, 219, 224, 245, 248, 253, 263, 267, 273, 279, 281, 285, 290, 291, 295, 300, 317, 335, 339, 350, 356, 360, 367, 374, 379, 382, 384, 386, 400, 425, 426, 429, 440, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 481], "nativ": [7, 25, 33, 41, 64, 68, 107, 113, 143, 152, 156, 167, 168, 174, 181, 182, 206, 211, 233, 256, 291, 328, 335, 338, 342, 350, 363, 366, 382, 384, 420, 430, 457, 459, 462, 467, 468, 473, 474, 475, 477, 478, 479, 480, 481], "contrari": [7, 61, 188], "veri": [7, 32, 33, 59, 63, 68, 73, 74, 75, 84, 85, 92, 93, 94, 95, 99, 100, 101, 104, 107, 108, 126, 147, 149, 156, 165, 167, 175, 181, 184, 188, 191, 194, 200, 201, 204, 205, 228, 240, 243, 248, 253, 264, 268, 269, 281, 282, 286, 290, 291, 297, 306, 317, 326, 328, 333, 335, 336, 339, 344, 346, 350, 351, 356, 357, 367, 373, 382, 384, 386, 387, 388, 392, 424, 426, 428, 430, 434, 439, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 472, 473, 474, 475, 476, 477, 479, 481], "generic": [7, 16, 35, 49, 61, 62, 63, 68, 76, 85, 87, 98, 100, 110, 131, 142, 149, 156, 159, 165, 182, 185, 189, 191, 192, 198, 201, 224, 233, 248, 252, 256, 266, 267, 279, 307, 317, 323, 328, 335, 360, 363, 376, 383, 392, 411, 427, 428, 429, 434, 456, 466, 470, 472, 473, 474, 475, 476, 477, 479, 481], "wrapper": [7, 21, 23, 25, 31, 33, 42, 44, 58, 59, 86, 87, 92, 93, 101, 106, 112, 124, 135, 144, 146, 158, 167, 174, 175, 189, 191, 213, 224, 248, 253, 265, 273, 279, 281, 285, 291, 297, 300, 326, 335, 343, 360, 362, 367, 379, 398, 405, 408, 411, 417, 423, 425, 426, 438, 460, 461, 462, 464, 465, 466, 467, 472, 473, 475, 476, 479, 481], "instruct": [7, 13, 26, 68, 77, 84, 95, 149, 184, 191, 238, 253, 262, 290, 291, 306, 312, 331, 338, 351, 386, 408, 411, 413, 426, 428, 453, 460, 465, 467, 471, 472, 473, 475, 479, 480, 481], "start": [7, 9, 11, 22, 23, 25, 33, 34, 42, 56, 63, 64, 66, 68, 72, 75, 76, 79, 80, 84, 85, 93, 94, 95, 97, 100, 101, 103, 104, 107, 108, 112, 113, 115, 118, 119, 124, 130, 131, 135, 137, 138, 139, 140, 142, 144, 149, 151, 155, 156, 158, 159, 162, 164, 167, 174, 175, 176, 179, 181, 182, 187, 188, 189, 191, 192, 197, 199, 201, 203, 206, 209, 211, 213, 215, 218, 220, 223, 225, 228, 231, 238, 240, 241, 243, 245, 246, 249, 253, 256, 257, 259, 260, 264, 265, 266, 267, 269, 270, 273, 276, 279, 282, 286, 288, 290, 291, 292, 295, 297, 300, 303, 306, 307, 310, 311, 312, 314, 316, 317, 318, 330, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 352, 354, 356, 360, 363, 364, 367, 369, 374, 376, 378, 379, 380, 384, 386, 387, 388, 392, 393, 397, 398, 400, 401, 405, 408, 409, 411, 413, 415, 419, 420, 425, 426, 428, 429, 430, 433, 434, 439, 440, 449, 450, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "logic": [7, 68, 84, 85, 95, 99, 101, 112, 137, 159, 167, 175, 179, 189, 191, 205, 219, 230, 254, 265, 267, 268, 269, 279, 288, 291, 294, 300, 317, 342, 343, 354, 360, 367, 371, 375, 384, 386, 425, 434, 460, 463, 464, 466, 467, 472, 474, 478, 479, 481], "physic": [7, 68, 92, 175, 191, 245, 250, 276, 279, 335, 342, 375, 376, 382, 403, 430, 465, 478], "negat": [7, 15, 22, 23, 31, 39, 42, 45, 47, 49, 54, 58, 60, 61, 63, 64, 66, 93, 94, 95, 99, 104, 113, 118, 131, 135, 144, 147, 151, 152, 156, 158, 173, 174, 175, 176, 181, 184, 219, 223, 224, 256, 257, 259, 264, 268, 273, 276, 281, 291, 297, 306, 317, 318, 326, 329, 330, 331, 335, 338, 339, 342, 343, 346, 350, 363, 364, 367, 382, 408, 411, 425, 426, 428, 429, 434, 439, 440, 460, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "begin": [7, 23, 58, 73, 75, 76, 78, 79, 84, 85, 95, 101, 103, 104, 115, 118, 137, 149, 153, 165, 175, 176, 181, 184, 188, 191, 194, 199, 207, 213, 245, 248, 253, 256, 259, 260, 268, 269, 276, 281, 286, 291, 294, 295, 299, 300, 312, 317, 318, 322, 332, 333, 338, 339, 342, 343, 345, 356, 357, 362, 367, 374, 376, 382, 386, 411, 413, 414, 423, 425, 426, 427, 428, 430, 432, 433, 434, 447, 453, 454, 459, 462, 465, 466, 467, 472, 477, 478, 481], "obj": [7, 9, 10, 23, 24, 26, 28, 33, 36, 39, 43, 45, 48, 49, 52, 63, 64, 75, 77, 78, 84, 85, 87, 93, 94, 95, 101, 110, 127, 137, 140, 156, 159, 174, 177, 179, 189, 191, 195, 206, 209, 211, 223, 225, 253, 257, 260, 276, 281, 289, 297, 319, 342, 343, 360, 380, 384, 386, 387, 400, 426, 429, 438, 439, 460, 461, 462, 463, 464, 465, 466, 470, 471, 476, 478, 479, 481], "automat": [7, 23, 28, 33, 45, 55, 59, 61, 63, 68, 71, 73, 76, 84, 85, 92, 95, 98, 103, 104, 107, 110, 118, 124, 130, 131, 137, 138, 149, 153, 156, 159, 165, 167, 174, 175, 179, 182, 184, 185, 188, 189, 191, 194, 199, 203, 204, 206, 207, 211, 221, 223, 224, 232, 240, 241, 246, 248, 253, 264, 265, 266, 268, 269, 270, 276, 279, 281, 286, 290, 291, 295, 297, 306, 311, 318, 321, 326, 328, 330, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 354, 356, 360, 363, 364, 366, 367, 374, 382, 384, 386, 387, 388, 392, 393, 400, 403, 409, 413, 417, 420, 421, 424, 426, 427, 428, 430, 434, 444, 449, 450, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "temporari": [7, 22, 40, 49, 55, 63, 68, 101, 108, 110, 142, 174, 191, 245, 250, 256, 259, 264, 269, 270, 281, 291, 295, 322, 338, 342, 350, 356, 358, 360, 380, 386, 393, 400, 456, 462, 464, 466, 473, 474, 475, 480, 481], "pymemoryview_frombuff": [7, 43, 57, 471, 481], "pybuffer_fillinfo": [7, 57, 63, 471, 481], "general": [7, 13, 23, 33, 35, 37, 40, 42, 51, 54, 63, 68, 72, 73, 76, 84, 85, 91, 93, 94, 99, 100, 101, 104, 107, 118, 124, 131, 137, 144, 149, 150, 156, 165, 167, 174, 175, 179, 181, 182, 184, 189, 201, 206, 211, 222, 223, 224, 233, 240, 241, 242, 245, 248, 259, 264, 265, 266, 267, 268, 269, 271, 281, 286, 291, 297, 303, 305, 312, 317, 318, 323, 328, 333, 335, 339, 340, 342, 343, 345, 346, 350, 356, 362, 364, 367, 373, 379, 382, 384, 385, 387, 388, 392, 393, 403, 406, 409, 410, 411, 412, 413, 415, 423, 424, 425, 426, 428, 429, 432, 433, 434, 453, 459, 460, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481], "scheme": [7, 31, 63, 68, 75, 78, 95, 101, 108, 134, 139, 156, 174, 245, 267, 269, 313, 332, 338, 339, 350, 356, 373, 392, 393, 397, 405, 426, 453, 460, 461, 463, 466, 467, 472, 473, 474, 475, 476, 481], "len": [7, 8, 9, 22, 38, 40, 41, 49, 54, 55, 60, 68, 76, 85, 87, 93, 94, 101, 104, 105, 107, 112, 139, 140, 145, 147, 149, 158, 159, 164, 168, 174, 186, 188, 189, 191, 209, 213, 223, 224, 228, 233, 234, 240, 245, 259, 267, 276, 281, 282, 286, 289, 290, 291, 294, 303, 316, 318, 333, 335, 338, 339, 341, 342, 345, 360, 380, 383, 387, 398, 405, 406, 408, 411, 425, 426, 433, 438, 439, 440, 441, 447, 448, 449, 460, 463, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 479, 481], "product": [7, 68, 80, 84, 95, 100, 123, 141, 184, 191, 234, 243, 245, 259, 267, 273, 316, 342, 350, 382, 386, 387, 419, 424, 428, 433, 438, 448, 457, 460, 461, 465, 466, 467, 469, 474, 477, 479, 481], "items": [7, 61, 119, 281, 335, 342, 481], "guarante": [7, 9, 11, 24, 33, 42, 54, 58, 59, 61, 63, 64, 67, 72, 73, 76, 85, 92, 95, 103, 113, 124, 137, 174, 181, 184, 189, 191, 194, 203, 223, 224, 230, 233, 241, 248, 253, 256, 260, 273, 274, 276, 281, 286, 290, 291, 297, 306, 322, 326, 329, 336, 342, 345, 346, 350, 360, 362, 363, 376, 384, 398, 400, 403, 406, 411, 413, 423, 425, 426, 430, 459, 464, 465, 467, 469, 473, 474, 477, 478, 479, 480, 481], "pybuf_simpl": 7, "pybuf_writ": [7, 43, 466], "control": [7, 32, 33, 34, 42, 50, 58, 68, 73, 74, 75, 77, 79, 83, 84, 85, 92, 93, 94, 99, 100, 101, 103, 104, 113, 118, 124, 128, 130, 131, 135, 137, 141, 142, 147, 149, 150, 153, 156, 161, 174, 175, 176, 181, 182, 184, 188, 189, 191, 192, 194, 195, 199, 200, 203, 205, 206, 211, 213, 216, 220, 221, 223, 227, 232, 243, 245, 246, 248, 252, 253, 254, 256, 257, 260, 265, 266, 267, 269, 274, 279, 280, 281, 286, 290, 291, 293, 295, 296, 297, 303, 305, 306, 307, 309, 312, 313, 319, 320, 326, 327, 329, 331, 335, 336, 339, 342, 344, 345, 346, 350, 351, 356, 362, 363, 367, 372, 373, 374, 378, 379, 383, 386, 387, 388, 389, 392, 393, 397, 400, 403, 404, 405, 411, 413, 415, 417, 418, 420, 424, 425, 426, 427, 428, 430, 432, 434, 436, 441, 446, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "flag": [7, 9, 10, 13, 18, 24, 28, 33, 34, 43, 49, 50, 61, 63, 64, 66, 68, 72, 73, 75, 76, 98, 99, 100, 101, 103, 107, 110, 112, 116, 124, 134, 136, 140, 141, 142, 153, 156, 174, 175, 179, 181, 182, 184, 185, 186, 189, 194, 205, 206, 207, 209, 213, 223, 225, 241, 246, 255, 256, 264, 265, 266, 269, 274, 276, 279, 280, 281, 286, 291, 294, 299, 303, 305, 311, 312, 313, 326, 328, 330, 331, 332, 335, 336, 338, 339, 340, 342, 343, 346, 350, 359, 360, 361, 363, 364, 374, 381, 383, 384, 386, 392, 393, 398, 404, 406, 417, 418, 420, 423, 425, 426, 430, 448, 453, 456, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "struct": [7, 15, 16, 21, 26, 31, 33, 35, 39, 45, 57, 58, 61, 63, 66, 68, 73, 75, 76, 78, 84, 86, 99, 101, 119, 139, 143, 174, 213, 223, 252, 266, 267, 282, 335, 342, 364, 417, 438, 450, 462, 465, 466, 467, 470, 471, 472, 473, 478, 479, 480, 481], "calcsiz": [7, 223, 335, 342, 345, 481], "import": [7, 11, 23, 31, 33, 34, 42, 45, 59, 63, 66, 68, 71, 72, 73, 75, 76, 77, 79, 84, 86, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 113, 114, 116, 118, 119, 121, 123, 124, 129, 131, 132, 134, 135, 137, 138, 140, 141, 144, 145, 146, 147, 148, 149, 150, 153, 158, 160, 161, 164, 165, 166, 167, 168, 170, 171, 173, 174, 179, 181, 182, 184, 185, 186, 188, 189, 191, 193, 194, 198, 200, 203, 205, 206, 207, 211, 212, 213, 214, 216, 218, 219, 221, 223, 224, 226, 228, 229, 232, 233, 234, 238, 239, 240, 241, 242, 243, 245, 246, 247, 250, 252, 253, 255, 256, 259, 260, 262, 263, 264, 268, 269, 270, 273, 274, 276, 277, 278, 281, 282, 286, 290, 291, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 363, 364, 365, 366, 373, 374, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 392, 393, 394, 396, 397, 398, 400, 404, 405, 406, 408, 409, 410, 411, 413, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 431, 433, 436, 438, 439, 440, 441, 442, 443, 444, 446, 449, 450, 451, 453, 454, 457, 459, 460, 462, 467, 468, 469, 470, 472, 473, 476, 477, 478, 479, 480, 481, 482], "pybuf_format": 7, "still": [7, 9, 13, 22, 23, 27, 28, 31, 33, 34, 58, 63, 72, 73, 75, 76, 77, 84, 85, 92, 94, 95, 98, 99, 100, 101, 103, 104, 108, 118, 131, 137, 141, 149, 156, 161, 165, 167, 168, 174, 175, 179, 184, 191, 192, 200, 204, 206, 211, 224, 228, 241, 245, 248, 250, 253, 265, 266, 267, 269, 273, 276, 281, 290, 291, 293, 294, 297, 306, 312, 317, 320, 321, 322, 326, 328, 331, 332, 335, 336, 338, 339, 342, 346, 350, 360, 362, 363, 367, 374, 380, 383, 384, 386, 387, 388, 393, 400, 408, 411, 414, 424, 425, 426, 428, 430, 433, 434, 450, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "present": [7, 22, 31, 34, 39, 45, 49, 63, 68, 73, 74, 77, 79, 85, 92, 93, 94, 95, 100, 101, 103, 104, 107, 108, 113, 118, 141, 144, 149, 150, 151, 153, 156, 159, 165, 174, 175, 179, 182, 184, 188, 189, 191, 194, 195, 203, 211, 213, 219, 223, 224, 233, 241, 243, 245, 248, 249, 253, 257, 260, 265, 266, 267, 269, 274, 276, 286, 290, 291, 294, 295, 297, 305, 306, 311, 312, 317, 320, 329, 333, 335, 339, 342, 343, 350, 356, 357, 360, 362, 363, 364, 365, 367, 369, 371, 373, 374, 376, 379, 382, 384, 386, 392, 393, 400, 408, 411, 413, 417, 419, 421, 425, 426, 428, 430, 433, 434, 460, 461, 462, 463, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "hold": [7, 9, 23, 27, 33, 45, 51, 55, 58, 63, 66, 73, 85, 93, 99, 100, 101, 118, 122, 137, 165, 167, 168, 174, 181, 184, 189, 201, 211, 213, 240, 243, 253, 255, 266, 267, 269, 281, 290, 291, 300, 306, 317, 320, 323, 328, 335, 339, 342, 346, 350, 360, 363, 367, 379, 386, 400, 403, 409, 411, 413, 424, 426, 430, 434, 460, 461, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "navig": [7, 68, 92, 175, 311, 366, 373, 481], "disregard": [7, 33, 342], "string": [7, 8, 9, 11, 16, 18, 22, 23, 24, 25, 26, 28, 30, 31, 33, 34, 35, 39, 40, 41, 42, 45, 47, 49, 53, 58, 59, 63, 65, 66, 68, 72, 73, 75, 76, 79, 87, 89, 92, 93, 95, 98, 100, 101, 103, 106, 108, 110, 111, 115, 118, 120, 124, 131, 135, 137, 139, 141, 142, 143, 144, 147, 149, 150, 151, 153, 155, 156, 157, 162, 165, 167, 171, 173, 174, 175, 176, 179, 180, 181, 182, 184, 186, 188, 189, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 218, 219, 221, 223, 224, 226, 228, 231, 232, 233, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 260, 264, 265, 266, 267, 269, 270, 272, 274, 276, 279, 280, 281, 285, 286, 287, 289, 291, 293, 294, 295, 296, 297, 300, 302, 303, 305, 306, 307, 309, 310, 311, 312, 318, 319, 324, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 349, 350, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 392, 393, 395, 396, 397, 398, 400, 401, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 420, 421, 422, 425, 426, 427, 428, 429, 430, 432, 434, 440, 442, 443, 445, 447, 448, 450, 453, 454, 459, 461, 462, 465, 467, 469, 470, 473, 475, 476, 481, 482], "ndim": [7, 342], "dimens": [7, 174, 175, 273, 330, 342, 466, 474, 479, 481], "dimension": [7, 87, 201, 273, 297, 316, 342, 373, 382, 474, 476, 481], "scalar": [7, 139, 194, 197, 224, 382, 384, 481], "maximum": [7, 25, 59, 64, 85, 93, 95, 100, 101, 104, 113, 124, 137, 139, 149, 152, 156, 161, 165, 174, 175, 184, 188, 193, 200, 201, 206, 211, 233, 245, 259, 260, 267, 268, 273, 276, 279, 281, 286, 291, 297, 303, 305, 317, 318, 319, 320, 327, 335, 337, 338, 339, 341, 346, 350, 356, 362, 363, 374, 376, 380, 382, 386, 392, 393, 411, 433, 453, 460, 462, 463, 465, 466, 467, 473, 474, 476, 477, 478, 481], "pybuf_max_ndim": 7, "restrict": [7, 33, 42, 58, 68, 73, 75, 76, 93, 99, 101, 104, 113, 118, 156, 174, 175, 181, 184, 188, 203, 221, 223, 228, 233, 245, 254, 255, 260, 281, 291, 296, 306, 310, 317, 335, 338, 339, 342, 343, 344, 346, 351, 352, 354, 363, 364, 384, 387, 408, 411, 417, 418, 424, 425, 426, 428, 429, 433, 434, 453, 459, 461, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "attent": [7, 99, 104, 175, 382, 463, 473, 475], "further": [7, 33, 41, 63, 68, 73, 75, 76, 79, 85, 95, 98, 100, 101, 107, 108, 117, 137, 142, 147, 149, 151, 156, 167, 171, 174, 179, 189, 191, 211, 216, 226, 245, 253, 264, 265, 267, 268, 273, 280, 281, 290, 291, 293, 295, 297, 317, 330, 331, 335, 336, 338, 339, 342, 350, 352, 364, 367, 379, 384, 388, 408, 411, 413, 419, 423, 425, 426, 428, 430, 433, 453, 459, 460, 461, 462, 463, 464, 466, 467, 472, 474, 478, 479, 481], "skip": [7, 33, 34, 35, 58, 68, 84, 95, 103, 104, 107, 137, 142, 151, 156, 161, 165, 167, 181, 185, 189, 191, 202, 203, 216, 248, 253, 259, 260, 265, 269, 270, 295, 302, 317, 329, 332, 340, 342, 345, 350, 356, 360, 374, 384, 397, 411, 413, 424, 425, 434, 450, 453, 459, 460, 462, 463, 464, 465, 466, 467, 469, 472, 473, 475, 480, 481], "regular": [7, 11, 33, 34, 42, 63, 68, 76, 84, 85, 87, 93, 95, 101, 103, 118, 124, 131, 158, 159, 161, 165, 167, 174, 179, 184, 191, 198, 211, 218, 223, 224, 232, 241, 245, 252, 253, 259, 264, 266, 291, 294, 297, 306, 309, 326, 331, 333, 335, 339, 340, 342, 343, 350, 356, 357, 360, 361, 382, 384, 386, 393, 398, 400, 426, 427, 428, 433, 434, 449, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "abl": [7, 33, 63, 73, 75, 76, 77, 84, 92, 94, 100, 101, 103, 104, 107, 139, 149, 156, 157, 167, 174, 175, 179, 181, 192, 211, 233, 253, 265, 266, 267, 281, 290, 291, 293, 295, 297, 307, 312, 317, 330, 335, 338, 339, 346, 356, 360, 363, 382, 387, 392, 398, 404, 411, 419, 425, 426, 432, 453, 454, 459, 460, 461, 462, 465, 467, 472, 473, 474, 475, 478, 479, 481], "handl": [7, 25, 31, 32, 33, 34, 35, 40, 42, 49, 51, 56, 61, 63, 64, 66, 68, 73, 75, 76, 79, 85, 91, 92, 94, 95, 98, 99, 100, 103, 104, 107, 110, 111, 113, 116, 118, 120, 130, 137, 138, 140, 142, 144, 147, 149, 150, 152, 155, 156, 165, 167, 168, 174, 179, 181, 184, 185, 187, 188, 189, 191, 194, 198, 199, 200, 201, 205, 206, 210, 211, 213, 221, 223, 224, 228, 232, 240, 242, 243, 245, 246, 248, 251, 252, 253, 254, 256, 257, 260, 265, 266, 267, 268, 269, 273, 276, 280, 281, 283, 291, 293, 294, 295, 296, 306, 307, 309, 317, 319, 326, 328, 329, 330, 331, 333, 335, 336, 339, 340, 342, 343, 346, 348, 350, 351, 356, 360, 363, 364, 369, 373, 376, 384, 387, 388, 393, 398, 400, 401, 402, 405, 411, 413, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 430, 433, 434, 441, 450, 453, 457, 459, 460, 461, 462, 464, 465, 468, 469, 470, 472, 473, 474, 477, 478, 479, 480, 481, 482], "along": [7, 58, 95, 99, 100, 101, 118, 124, 138, 139, 147, 152, 161, 167, 174, 184, 191, 201, 203, 216, 228, 232, 233, 242, 248, 249, 265, 267, 276, 291, 297, 306, 327, 333, 335, 339, 342, 343, 346, 367, 374, 378, 382, 384, 386, 387, 412, 419, 424, 425, 460, 461, 462, 463, 464, 466, 467, 472, 473, 475, 476, 481], "nth": [7, 259, 374], "dictat": [7, 87, 165, 220, 223, 297, 335, 459, 460, 466], "mani": [7, 13, 33, 34, 63, 64, 72, 73, 75, 76, 79, 84, 92, 94, 95, 98, 99, 100, 101, 104, 107, 108, 115, 118, 126, 131, 135, 137, 141, 152, 156, 161, 165, 167, 174, 175, 176, 179, 181, 184, 188, 189, 191, 192, 201, 206, 210, 223, 228, 233, 240, 241, 242, 245, 248, 257, 259, 263, 265, 273, 276, 281, 286, 290, 291, 293, 294, 296, 297, 303, 305, 306, 312, 317, 323, 326, 328, 330, 331, 333, 335, 336, 338, 339, 342, 345, 346, 350, 353, 356, 357, 360, 362, 363, 364, 367, 373, 378, 379, 382, 383, 384, 387, 388, 393, 400, 401, 403, 404, 408, 413, 425, 426, 430, 432, 434, 453, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "de": [7, 12, 23, 28, 41, 68, 74, 80, 117, 175, 228, 241, 250, 259, 286, 297, 342, 356, 384, 392, 417, 470, 471, 472, 475, 477, 478, 480, 481], "might": [7, 23, 33, 58, 63, 64, 73, 75, 76, 85, 92, 94, 95, 99, 100, 101, 103, 104, 107, 108, 130, 135, 137, 139, 142, 144, 156, 174, 177, 179, 181, 189, 191, 194, 203, 205, 207, 211, 219, 232, 233, 241, 245, 256, 257, 264, 265, 266, 267, 269, 270, 276, 281, 282, 286, 290, 291, 293, 297, 300, 303, 306, 317, 333, 335, 338, 339, 342, 350, 351, 353, 360, 363, 367, 382, 384, 387, 388, 392, 393, 398, 400, 406, 411, 420, 426, 430, 432, 453, 459, 460, 462, 463, 464, 465, 466, 467, 472, 473, 474, 475, 477, 478, 481], "re": [7, 33, 42, 45, 63, 68, 72, 73, 75, 76, 77, 84, 85, 91, 92, 93, 94, 95, 98, 99, 100, 101, 103, 107, 137, 138, 142, 143, 153, 158, 161, 165, 167, 174, 175, 181, 184, 185, 188, 189, 191, 194, 199, 203, 205, 209, 218, 241, 245, 246, 248, 252, 256, 257, 264, 265, 266, 267, 269, 276, 277, 281, 286, 290, 291, 293, 294, 295, 306, 313, 336, 339, 342, 343, 346, 350, 351, 361, 362, 363, 367, 375, 376, 382, 384, 388, 392, 393, 398, 405, 411, 413, 417, 425, 426, 427, 430, 432, 433, 434, 439, 449, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 479, 481], "cast": [7, 33, 42, 45, 58, 61, 64, 73, 76, 174, 184, 342, 379, 384, 474, 478, 479, 481], "freed": [7, 13, 22, 27, 33, 42, 45, 73, 75, 99, 101, 230, 281, 291, 327, 426, 461, 463, 465, 477, 481], "alter": [7, 22, 42, 85, 124, 151, 184, 206, 241, 245, 246, 260, 266, 270, 297, 322, 342, 343, 382, 424, 426, 430, 460, 464, 473, 475, 477, 478, 479, 480, 481], "limit": [7, 13, 23, 34, 35, 57, 59, 61, 63, 64, 68, 75, 85, 92, 94, 95, 97, 101, 104, 110, 117, 118, 124, 130, 131, 134, 135, 137, 140, 147, 156, 161, 167, 171, 182, 184, 189, 199, 205, 206, 212, 213, 223, 224, 233, 245, 246, 252, 255, 259, 266, 268, 274, 280, 281, 283, 290, 291, 293, 297, 305, 306, 310, 312, 317, 319, 322, 328, 331, 332, 335, 338, 339, 341, 346, 350, 356, 360, 363, 371, 373, 379, 380, 382, 387, 389, 403, 405, 408, 411, 419, 424, 426, 427, 428, 430, 432, 433, 453, 454, 456, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "64": [7, 42, 64, 68, 85, 93, 94, 98, 105, 134, 141, 144, 174, 175, 181, 184, 223, 233, 257, 259, 268, 281, 282, 291, 301, 302, 304, 330, 335, 339, 342, 345, 350, 382, 402, 417, 426, 440, 444, 447, 454, 459, 460, 462, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "send": [7, 68, 79, 84, 92, 95, 100, 103, 104, 105, 108, 124, 126, 131, 134, 135, 139, 140, 149, 150, 156, 159, 167, 175, 189, 192, 198, 199, 210, 221, 228, 240, 242, 243, 245, 246, 255, 265, 266, 267, 276, 281, 286, 291, 297, 303, 314, 327, 331, 333, 335, 336, 339, 346, 354, 359, 360, 367, 382, 384, 393, 417, 426, 428, 450, 460, 463, 464, 465, 467, 471, 472, 473, 474, 476, 477, 478, 480, 481], "via": [7, 33, 42, 45, 61, 63, 64, 68, 73, 76, 84, 85, 95, 99, 100, 108, 110, 113, 118, 137, 138, 142, 149, 165, 168, 181, 188, 191, 194, 198, 199, 200, 203, 204, 205, 206, 211, 214, 216, 219, 223, 226, 231, 233, 240, 245, 249, 253, 259, 263, 264, 265, 266, 267, 276, 281, 282, 290, 291, 295, 296, 297, 300, 303, 306, 312, 317, 318, 319, 321, 333, 335, 336, 339, 342, 343, 346, 350, 353, 360, 382, 384, 386, 387, 393, 398, 403, 408, 411, 417, 423, 425, 426, 428, 453, 456, 460, 465, 466, 467, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481], "drastic": [7, 110], "unambigu": [7, 118, 181, 266, 306, 333, 426, 434, 466, 473], "influenc": [7, 297, 335, 453, 466, 481], "correct": [7, 25, 33, 45, 63, 64, 66, 71, 73, 76, 77, 85, 93, 94, 95, 98, 99, 101, 107, 108, 110, 115, 118, 131, 149, 156, 167, 174, 181, 184, 186, 189, 191, 194, 195, 197, 201, 206, 207, 214, 223, 241, 245, 246, 257, 264, 273, 276, 281, 287, 290, 291, 293, 297, 312, 322, 329, 330, 335, 338, 339, 341, 342, 343, 345, 346, 350, 356, 360, 364, 367, 382, 384, 386, 387, 388, 403, 413, 419, 423, 424, 426, 428, 430, 433, 442, 459, 460, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "els": [7, 22, 28, 35, 36, 41, 42, 53, 63, 64, 68, 72, 73, 75, 76, 78, 79, 84, 85, 88, 89, 95, 99, 101, 103, 104, 105, 108, 112, 120, 124, 134, 137, 149, 158, 164, 167, 171, 174, 181, 184, 188, 189, 191, 194, 198, 205, 224, 226, 228, 238, 240, 245, 246, 248, 259, 260, 265, 267, 269, 274, 281, 287, 289, 290, 291, 297, 307, 316, 317, 327, 330, 335, 338, 339, 340, 341, 342, 346, 350, 356, 360, 363, 376, 382, 383, 384, 387, 397, 398, 400, 405, 408, 420, 426, 428, 429, 430, 432, 433, 434, 441, 443, 453, 459, 460, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 480, 481], "report": [7, 22, 33, 45, 61, 72, 73, 85, 98, 100, 102, 103, 104, 107, 118, 131, 149, 150, 164, 174, 175, 188, 189, 191, 194, 201, 203, 211, 214, 223, 231, 253, 257, 259, 277, 281, 290, 291, 306, 312, 317, 326, 327, 331, 337, 339, 340, 342, 350, 360, 367, 378, 384, 386, 393, 398, 411, 413, 429, 453, 459, 460, 462, 463, 464, 465, 466, 467, 473, 474, 475, 477, 479, 481], "either": [7, 11, 22, 23, 33, 42, 43, 45, 49, 55, 58, 59, 61, 63, 64, 67, 71, 72, 73, 76, 84, 85, 92, 93, 94, 95, 100, 101, 103, 104, 107, 108, 115, 118, 124, 131, 135, 137, 139, 141, 142, 147, 149, 152, 156, 167, 171, 174, 175, 176, 179, 181, 184, 188, 189, 191, 192, 193, 194, 195, 196, 197, 200, 203, 204, 205, 206, 207, 209, 211, 213, 219, 223, 233, 240, 241, 243, 245, 246, 248, 250, 253, 255, 256, 257, 259, 260, 265, 266, 267, 268, 269, 270, 276, 279, 281, 282, 286, 290, 291, 293, 294, 295, 297, 299, 300, 306, 307, 309, 312, 317, 320, 322, 323, 326, 327, 329, 330, 332, 335, 338, 339, 342, 343, 345, 346, 350, 351, 353, 356, 357, 360, 363, 364, 367, 373, 374, 376, 379, 382, 384, 386, 387, 392, 393, 397, 398, 400, 401, 403, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 430, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "choic": [7, 68, 73, 84, 85, 89, 101, 108, 116, 149, 152, 191, 223, 228, 245, 253, 265, 266, 269, 281, 290, 306, 312, 316, 322, 324, 327, 328, 339, 342, 345, 373, 429, 432, 439, 449, 457, 462, 465, 472, 473, 476, 477, 478, 481], "next": [7, 23, 26, 33, 37, 42, 63, 64, 68, 72, 73, 75, 76, 85, 87, 92, 93, 94, 95, 98, 101, 103, 104, 107, 110, 112, 115, 124, 137, 139, 142, 147, 149, 151, 153, 155, 157, 158, 165, 173, 174, 175, 184, 188, 189, 191, 192, 193, 194, 195, 203, 211, 216, 219, 223, 224, 228, 234, 240, 241, 245, 248, 251, 253, 259, 265, 267, 268, 269, 276, 280, 281, 286, 290, 291, 294, 295, 305, 306, 312, 317, 318, 321, 323, 328, 329, 331, 335, 336, 338, 339, 342, 346, 351, 352, 356, 367, 373, 374, 382, 387, 393, 398, 411, 423, 425, 426, 427, 428, 430, 432, 434, 438, 440, 447, 448, 450, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 474, 476, 478, 479, 480, 482], "stand": [7, 81, 85, 107, 167, 184, 273, 290, 300, 317, 418, 419, 425, 433, 460, 465, 466, 467, 473, 475, 478, 479, 481], "alon": [7, 64, 75, 81, 85, 101, 104, 248, 295, 317, 322, 329, 418, 424, 425, 432, 462, 465, 466, 475, 481], "impli": [7, 31, 35, 42, 58, 63, 101, 107, 110, 161, 179, 256, 290, 312, 318, 338, 339, 342, 413, 420, 424, 426, 428, 434, 453, 454, 459, 466, 475, 478, 479, 481], "decreas": [7, 136, 181, 189, 257, 364, 426, 460, 464, 467, 474, 477, 479, 481], "below": [7, 23, 33, 45, 55, 59, 60, 61, 63, 64, 66, 73, 76, 93, 94, 95, 100, 101, 108, 113, 115, 118, 131, 142, 147, 152, 156, 165, 175, 177, 179, 181, 184, 186, 187, 189, 191, 193, 201, 206, 211, 219, 228, 231, 233, 240, 241, 243, 245, 246, 247, 248, 250, 256, 264, 265, 266, 267, 274, 280, 281, 286, 290, 291, 293, 294, 295, 297, 305, 312, 317, 318, 319, 320, 322, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 342, 343, 344, 345, 346, 350, 352, 354, 356, 357, 360, 362, 363, 364, 367, 369, 374, 378, 382, 384, 386, 387, 393, 401, 404, 411, 412, 417, 418, 420, 424, 425, 426, 427, 428, 429, 430, 433, 439, 459, 460, 461, 463, 465, 466, 467, 468, 472, 475, 476, 481], "pybuf_indirect": 7, "yes": [7, 73, 79, 85, 97, 165, 184, 191, 264, 265, 312, 317, 339, 367, 371, 403, 405, 409, 411, 439, 444, 447, 454, 459, 462, 473], "pybuf_strid": 7, "pybuf_nd": 7, "fortran": [7, 78, 87, 297, 338, 342, 442, 461, 464, 466], "explicit": [7, 23, 28, 31, 33, 34, 45, 49, 51, 63, 66, 68, 73, 76, 85, 92, 94, 95, 99, 100, 101, 103, 104, 110, 112, 118, 124, 130, 131, 137, 138, 149, 155, 165, 167, 168, 174, 177, 179, 181, 184, 186, 188, 194, 196, 200, 203, 204, 206, 211, 212, 216, 221, 223, 224, 228, 231, 241, 243, 248, 253, 256, 257, 260, 264, 265, 266, 267, 268, 269, 279, 281, 290, 291, 293, 295, 297, 305, 309, 312, 322, 326, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 345, 346, 350, 354, 356, 360, 363, 379, 382, 383, 384, 386, 393, 397, 398, 400, 403, 408, 409, 410, 411, 412, 419, 421, 424, 425, 426, 427, 428, 430, 434, 438, 453, 454, 459, 460, 461, 462, 463, 465, 467, 468, 470, 472, 473, 476, 477, 478, 479, 480, 481, 482], "contig": [7, 253], "pybuf_c_contigu": [7, 466], "pybuf_f_contigu": [7, 466], "pybuf_any_contigu": 7, "fulli": [7, 13, 27, 33, 34, 45, 61, 63, 71, 87, 101, 103, 107, 110, 118, 132, 184, 191, 195, 201, 205, 206, 248, 253, 259, 266, 267, 281, 297, 331, 333, 335, 342, 346, 350, 356, 384, 386, 396, 398, 408, 411, 415, 421, 426, 430, 453, 459, 462, 467, 468, 472, 473, 474, 475, 476, 477, 479, 480, 481], "combin": [7, 23, 33, 49, 56, 58, 63, 64, 68, 72, 76, 85, 92, 95, 99, 101, 104, 107, 108, 115, 118, 124, 137, 156, 158, 161, 167, 174, 175, 179, 181, 184, 187, 191, 201, 203, 206, 209, 241, 242, 243, 245, 248, 256, 259, 264, 265, 281, 290, 291, 293, 294, 306, 316, 317, 320, 326, 327, 329, 332, 333, 335, 336, 338, 341, 342, 344, 345, 346, 354, 356, 367, 374, 384, 385, 386, 392, 403, 404, 421, 424, 425, 426, 428, 430, 433, 434, 454, 460, 464, 465, 466, 467, 475, 476, 477, 478, 479, 481], "frequent": [7, 68, 73, 75, 84, 85, 104, 107, 108, 162, 181, 188, 245, 264, 267, 281, 286, 290, 303, 386, 463, 464, 466, 467, 472, 479, 481], "undefin": [7, 25, 28, 33, 39, 42, 63, 64, 85, 124, 138, 156, 164, 194, 203, 205, 211, 223, 225, 256, 273, 290, 326, 342, 350, 364, 376, 380, 398, 411, 414, 426, 428, 433, 447, 454, 476, 478, 481], "pybuffer_iscontigu": [7, 57, 471, 481], "pybuf_ful": 7, "pybuf_full_ro": 7, "pybuf_record": 7, "pybuf_records_ro": 7, "pybuf_strided_ro": 7, "pybuf_contig": 7, "pybuf_contig_ro": 7, "ptr": [7, 18, 34, 42, 257, 464, 476], "typeof": 7, "def": [7, 17, 22, 35, 45, 61, 66, 68, 71, 72, 73, 76, 79, 84, 85, 87, 88, 92, 93, 94, 95, 99, 100, 101, 102, 104, 105, 106, 107, 110, 112, 114, 118, 120, 121, 123, 124, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 145, 146, 147, 153, 158, 159, 164, 167, 168, 170, 171, 174, 179, 181, 184, 186, 188, 189, 191, 198, 201, 209, 211, 214, 223, 224, 225, 226, 228, 230, 233, 234, 238, 241, 243, 245, 248, 249, 253, 256, 257, 259, 260, 265, 266, 273, 281, 287, 289, 290, 294, 295, 297, 301, 307, 310, 312, 314, 316, 317, 318, 319, 323, 327, 329, 330, 331, 333, 335, 336, 338, 339, 340, 341, 342, 343, 349, 350, 356, 359, 360, 362, 363, 365, 367, 376, 379, 380, 382, 383, 384, 386, 387, 388, 397, 398, 400, 405, 409, 411, 417, 418, 420, 425, 426, 427, 428, 429, 433, 434, 438, 439, 441, 448, 449, 450, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "verify_structur": 7, "memlen": 7, "offset": [7, 10, 20, 22, 23, 26, 28, 58, 61, 63, 75, 76, 84, 93, 97, 120, 124, 139, 140, 151, 174, 181, 184, 189, 201, 207, 211, 213, 221, 233, 238, 253, 256, 269, 276, 281, 291, 304, 312, 335, 338, 345, 351, 356, 360, 364, 377, 379, 413, 420, 423, 426, 444, 453, 460, 465, 466, 470, 473, 474, 478, 481], "bound": [7, 10, 13, 42, 44, 54, 56, 60, 63, 64, 85, 93, 94, 100, 101, 104, 120, 124, 128, 136, 137, 156, 167, 184, 188, 189, 211, 223, 224, 245, 246, 248, 253, 266, 267, 281, 316, 317, 320, 329, 335, 338, 342, 349, 360, 363, 367, 373, 374, 383, 384, 388, 393, 400, 418, 424, 425, 426, 427, 428, 429, 430, 434, 460, 462, 463, 465, 466, 467, 472, 474, 475, 478, 480, 481], "mem": [7, 42, 43], "imin": 7, "sum": [7, 87, 93, 95, 118, 120, 124, 139, 158, 181, 184, 191, 206, 223, 224, 253, 259, 268, 273, 282, 291, 294, 306, 316, 320, 324, 335, 341, 342, 364, 374, 380, 384, 428, 429, 438, 439, 442, 447, 448, 449, 450, 463, 464, 466, 469, 471, 472, 479, 480, 481], "imax": 7, "view": [7, 22, 43, 48, 63, 68, 84, 87, 92, 93, 94, 118, 131, 137, 158, 159, 181, 184, 189, 194, 198, 203, 206, 223, 245, 256, 265, 270, 297, 306, 311, 338, 340, 345, 349, 350, 367, 373, 374, 382, 383, 403, 408, 424, 460, 465, 466, 470, 473, 474, 476, 481, 482], "anywher": [7, 85, 149, 184, 188, 245, 249, 259, 266, 290, 317, 350, 376, 384, 392, 413, 423, 427, 428, 430, 468, 480, 481], "index": [7, 13, 34, 35, 38, 47, 54, 59, 60, 63, 64, 68, 79, 80, 84, 87, 94, 95, 98, 101, 103, 104, 109, 113, 114, 119, 120, 139, 140, 142, 145, 149, 153, 158, 159, 174, 189, 190, 194, 203, 207, 209, 211, 223, 228, 231, 234, 240, 243, 252, 253, 259, 260, 266, 276, 279, 281, 282, 289, 291, 294, 297, 311, 312, 317, 318, 320, 335, 337, 338, 340, 342, 343, 350, 357, 359, 363, 364, 366, 374, 379, 380, 392, 403, 405, 408, 411, 420, 425, 426, 428, 434, 438, 440, 447, 451, 452, 457, 460, 462, 464, 466, 467, 468, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482], "get_item_point": 7, "pyobject_checkbuff": [7, 57, 471, 480, 481], "cannot": [7, 9, 24, 26, 28, 33, 34, 39, 49, 54, 58, 61, 63, 64, 66, 67, 72, 73, 76, 85, 92, 94, 95, 98, 99, 100, 101, 103, 108, 110, 113, 124, 130, 133, 142, 149, 156, 158, 159, 161, 165, 167, 174, 175, 179, 181, 184, 189, 191, 195, 199, 200, 201, 206, 210, 211, 212, 213, 216, 223, 224, 228, 231, 243, 245, 248, 250, 251, 253, 256, 264, 265, 266, 267, 268, 269, 274, 276, 280, 281, 291, 293, 294, 295, 297, 300, 302, 305, 306, 312, 317, 320, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 342, 346, 350, 351, 352, 356, 360, 363, 364, 367, 384, 392, 393, 397, 400, 403, 404, 408, 411, 413, 414, 417, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 441, 453, 454, 459, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 475, 477, 478, 479, 480, 481], "buffererror": [7, 23, 63, 211, 297, 448, 481], "chain": [7, 23, 63, 68, 85, 93, 95, 99, 101, 108, 117, 155, 158, 165, 174, 211, 212, 223, 234, 253, 259, 265, 291, 350, 379, 387, 388, 393, 426, 428, 434, 443, 466, 468, 474, 475, 476, 480, 481], "redirect": [7, 63, 68, 86, 100, 101, 108, 131, 135, 167, 240, 241, 243, 248, 265, 331, 346, 350, 393, 397, 453, 456, 460, 475, 476, 477, 478, 481], "pybuffer_sizefromformat": [7, 57, 471, 481], "pybuffer_getpoint": [7, 57, 471, 481], "pybuffer_fromcontigu": [7, 57, 471, 481], "fort": 7, "pybuffer_tocontigu": [7, 57, 471, 481], "src": [7, 52, 89, 102, 140, 174, 191, 198, 229, 238, 276, 279, 291, 330, 338, 463, 465, 481], "pyobject_copydata": [7, 57, 471], "dest": [7, 68, 89, 101, 116, 198, 226, 267, 276, 290, 307, 397, 463, 465, 466, 467, 481], "between": [7, 18, 20, 33, 34, 39, 42, 45, 54, 56, 60, 61, 63, 68, 72, 73, 74, 75, 76, 79, 84, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 118, 120, 124, 131, 138, 139, 147, 152, 156, 159, 162, 165, 171, 175, 181, 184, 189, 191, 193, 194, 195, 199, 203, 207, 211, 214, 216, 223, 228, 233, 245, 248, 249, 252, 253, 256, 257, 259, 260, 264, 265, 266, 267, 268, 273, 274, 276, 283, 291, 293, 294, 295, 297, 306, 316, 317, 318, 332, 335, 336, 337, 338, 339, 341, 342, 345, 346, 350, 357, 360, 362, 363, 364, 367, 369, 373, 374, 375, 376, 380, 382, 383, 384, 386, 387, 388, 392, 393, 398, 403, 408, 409, 411, 415, 417, 423, 424, 425, 426, 428, 429, 430, 432, 434, 453, 457, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pybuffer_fillcontiguousstrid": [7, 57, 471], "per": [7, 13, 22, 23, 31, 35, 45, 49, 63, 64, 68, 73, 84, 85, 101, 115, 118, 124, 130, 131, 139, 141, 142, 144, 156, 175, 179, 181, 184, 189, 194, 195, 201, 203, 206, 207, 224, 240, 248, 249, 265, 269, 279, 281, 286, 291, 293, 303, 305, 306, 313, 317, 327, 332, 335, 336, 338, 339, 342, 350, 360, 363, 364, 365, 367, 374, 378, 380, 386, 417, 420, 425, 426, 430, 434, 453, 459, 463, 464, 465, 467, 468, 469, 470, 474, 475, 476, 478, 479, 481, 482], "accord": [7, 18, 33, 39, 64, 66, 76, 92, 93, 94, 95, 98, 101, 107, 124, 149, 152, 156, 167, 179, 181, 184, 194, 199, 201, 203, 206, 207, 214, 216, 223, 224, 231, 233, 241, 245, 246, 248, 259, 264, 265, 266, 273, 279, 281, 290, 291, 306, 339, 340, 342, 344, 345, 364, 373, 374, 376, 382, 386, 392, 393, 408, 420, 424, 426, 428, 430, 433, 453, 459, 462, 463, 464, 465, 466, 472, 473, 474, 475, 476, 477, 478, 481], "design": [7, 34, 63, 76, 84, 85, 93, 94, 95, 99, 100, 101, 103, 107, 108, 135, 137, 144, 150, 156, 165, 167, 175, 181, 184, 190, 191, 192, 199, 211, 223, 224, 226, 228, 233, 245, 248, 269, 281, 290, 291, 297, 306, 321, 329, 335, 339, 345, 353, 356, 360, 363, 367, 373, 376, 382, 384, 387, 392, 415, 423, 424, 430, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 478, 480, 481], "part": [7, 9, 13, 18, 23, 25, 33, 34, 39, 58, 60, 61, 63, 64, 66, 72, 73, 75, 85, 92, 94, 95, 98, 99, 100, 101, 104, 107, 108, 110, 126, 141, 149, 152, 155, 156, 157, 159, 165, 167, 174, 175, 181, 182, 184, 189, 191, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 206, 207, 211, 223, 228, 233, 243, 245, 246, 248, 249, 256, 257, 264, 265, 266, 267, 268, 273, 274, 279, 280, 281, 291, 294, 297, 300, 305, 306, 312, 317, 321, 329, 332, 335, 336, 338, 339, 342, 343, 344, 350, 353, 360, 363, 364, 367, 373, 379, 382, 383, 384, 386, 387, 392, 397, 400, 401, 408, 409, 411, 417, 424, 425, 426, 427, 428, 430, 433, 434, 447, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "getbufferproc": [7, 57, 63, 474, 481], "pybytearray_typ": [8, 57], "pybytearray_check": 8, "pybytearray_checkexact": 8, "pybytearray_fromobject": [8, 57, 466], "pybytearray_fromstringands": [8, 57, 466], "pybytearray_concat": [8, 57], "pybytearray_s": [8, 57], "pybytearray_asstr": [8, 57], "pybytearray_res": [8, 57], "pybytearray_as_str": 8, "pybytearray_get_s": 8, "subtyp": [9, 11, 20, 25, 39, 45, 49, 55, 60, 61, 63, 64, 68, 185, 194, 195, 198, 199, 201, 202, 203, 204, 241, 245, 274, 290, 331, 342, 414, 425, 426, 428, 462, 481], "pybytes_typ": [9, 57, 481], "pybytes_check": [9, 79, 466], "pybytes_checkexact": 9, "pybytes_fromstr": [9, 42, 57], "pybytes_fromstringands": [9, 57, 466], "uniniti": [9, 33, 35, 42, 73, 85, 297, 454, 481], "pybytes_fromformat": [9, 57, 481], "printf": [9, 64, 68, 72, 73, 97, 174, 243, 265, 428, 444, 447, 458, 465, 471, 481], "calcul": [9, 31, 33, 34, 59, 63, 64, 73, 85, 89, 93, 95, 118, 148, 175, 179, 181, 184, 189, 204, 224, 233, 259, 267, 273, 281, 293, 320, 331, 335, 342, 343, 345, 352, 354, 364, 376, 379, 382, 383, 388, 393, 426, 428, 430, 433, 462, 465, 466, 469, 471, 472, 475, 479, 481], "liter": [9, 39, 64, 68, 78, 94, 103, 104, 110, 111, 118, 155, 156, 157, 181, 184, 189, 191, 218, 219, 223, 228, 229, 246, 255, 260, 262, 265, 266, 268, 300, 305, 317, 329, 338, 342, 343, 346, 364, 367, 374, 376, 384, 386, 392, 398, 401, 411, 413, 426, 427, 429, 430, 431, 432, 439, 443, 447, 460, 462, 463, 465, 467, 468, 470, 472, 473, 475, 478, 479, 480, 481, 482], "ld": [9, 72, 77, 174, 342, 454], "lu": [9, 342, 385, 433, 460, 475, 477, 478, 481], "zd": [9, 481], "zu": [9, 481], "size_t": [9, 10, 18, 28, 34, 35, 39, 42, 59, 64, 174, 345, 474, 481], "hex": [9, 64, 85, 94, 104, 107, 141, 144, 156, 174, 209, 223, 233, 339, 342, 343, 350, 367, 396, 426, 433, 442, 448, 450, 460, 461, 463, 465, 466, 468, 469, 470, 475, 476, 481], "0x": [9, 18, 47, 64, 85, 87, 94, 104, 136, 174, 191, 223, 242, 281, 290, 342, 343, 382, 387, 388, 433, 464, 473, 481], "regardless": [9, 24, 33, 34, 41, 59, 64, 94, 118, 137, 167, 175, 181, 184, 206, 218, 245, 248, 256, 259, 260, 300, 312, 331, 332, 333, 335, 338, 339, 342, 343, 345, 346, 350, 351, 353, 374, 382, 386, 398, 400, 401, 410, 423, 428, 430, 433, 453, 459, 472, 473, 474, 475, 476, 478, 481], "yield": [9, 36, 64, 68, 75, 85, 87, 95, 114, 120, 131, 136, 137, 147, 149, 158, 165, 167, 181, 188, 189, 195, 205, 223, 224, 230, 233, 240, 248, 251, 253, 256, 259, 260, 269, 281, 291, 294, 297, 300, 317, 329, 342, 345, 351, 356, 360, 376, 379, 384, 387, 388, 392, 405, 408, 411, 417, 425, 426, 427, 429, 431, 433, 438, 462, 463, 465, 466, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "unrecogn": [9, 64, 89, 118, 226, 412, 420, 433, 472, 476, 477, 481], "rest": [9, 64, 77, 85, 95, 99, 100, 101, 104, 110, 118, 120, 126, 149, 159, 175, 184, 191, 211, 221, 224, 245, 265, 274, 290, 291, 300, 317, 321, 342, 360, 374, 376, 417, 425, 426, 429, 433, 434, 439, 460, 462, 463, 465, 466, 467, 468, 470, 472, 474, 475, 478, 480, 481], "extra": [9, 16, 28, 63, 64, 68, 76, 85, 92, 94, 101, 108, 110, 118, 120, 124, 130, 159, 168, 184, 189, 191, 194, 200, 201, 203, 206, 240, 245, 249, 265, 266, 269, 281, 290, 291, 330, 338, 339, 342, 345, 356, 357, 360, 374, 384, 411, 420, 426, 429, 450, 453, 454, 460, 463, 466, 467, 472, 473, 474, 477, 478, 479, 481], "discard": [9, 35, 49, 55, 60, 64, 66, 73, 94, 95, 124, 137, 141, 149, 155, 156, 159, 181, 184, 241, 256, 265, 266, 269, 281, 290, 335, 338, 342, 359, 374, 398, 400, 409, 411, 414, 425, 426, 447, 453, 462, 465, 466, 467, 472, 475, 477, 479, 481], "effect": [9, 11, 14, 22, 23, 27, 33, 34, 45, 52, 58, 59, 63, 64, 68, 73, 75, 84, 85, 92, 93, 95, 98, 100, 101, 103, 104, 108, 113, 118, 124, 130, 138, 142, 157, 165, 167, 174, 175, 179, 181, 184, 185, 189, 191, 201, 206, 211, 213, 216, 223, 224, 225, 241, 245, 248, 256, 259, 264, 265, 266, 267, 270, 281, 290, 291, 293, 294, 295, 300, 306, 309, 312, 317, 320, 321, 322, 323, 326, 328, 329, 330, 332, 338, 339, 340, 341, 342, 343, 346, 350, 356, 360, 362, 363, 364, 374, 380, 382, 383, 384, 386, 387, 398, 403, 410, 418, 419, 420, 423, 425, 426, 428, 430, 433, 434, 440, 448, 453, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "precis": [9, 13, 18, 25, 45, 64, 68, 72, 100, 181, 211, 223, 228, 257, 260, 266, 267, 273, 281, 288, 291, 306, 311, 326, 327, 335, 338, 342, 343, 345, 350, 364, 374, 384, 393, 406, 425, 426, 428, 432, 433, 442, 450, 460, 464, 465, 466, 467, 473, 474, 475, 477, 478, 479, 480, 481], "pybytes_fromformatv": [9, 57], "pybytes_fromobject": [9, 57], "pybytes_s": [9, 57, 79], "pybytes_get_s": 9, "pybytes_asstr": [9, 57, 470], "last": [9, 22, 23, 25, 26, 33, 34, 45, 59, 63, 67, 73, 76, 78, 84, 85, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 112, 118, 123, 137, 138, 142, 144, 149, 153, 156, 158, 159, 165, 167, 174, 175, 181, 182, 184, 186, 188, 189, 191, 194, 198, 201, 203, 207, 209, 211, 212, 213, 216, 219, 223, 232, 233, 243, 245, 246, 253, 257, 259, 260, 264, 265, 267, 268, 269, 273, 281, 282, 286, 289, 290, 291, 294, 295, 297, 299, 306, 312, 317, 318, 321, 326, 328, 329, 330, 335, 337, 338, 340, 342, 343, 345, 346, 350, 356, 363, 364, 367, 374, 376, 379, 380, 382, 384, 385, 386, 387, 388, 392, 393, 400, 403, 404, 408, 411, 413, 420, 425, 426, 427, 428, 430, 433, 434, 438, 439, 440, 441, 444, 447, 450, 453, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "just": [9, 13, 28, 33, 39, 51, 63, 64, 66, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 118, 126, 127, 136, 137, 147, 149, 153, 155, 156, 157, 159, 165, 167, 174, 175, 177, 179, 181, 184, 188, 191, 192, 198, 199, 211, 216, 223, 224, 228, 232, 233, 241, 245, 248, 250, 251, 259, 264, 265, 266, 267, 269, 279, 281, 290, 291, 295, 297, 306, 311, 312, 317, 318, 326, 328, 329, 331, 335, 336, 338, 339, 342, 343, 346, 350, 353, 356, 360, 362, 363, 367, 373, 374, 379, 382, 384, 386, 387, 388, 393, 397, 400, 408, 411, 412, 413, 418, 419, 420, 421, 425, 426, 428, 430, 432, 434, 439, 450, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "dealloc": [9, 13, 22, 28, 33, 35, 42, 45, 52, 63, 64, 73, 75, 76, 87, 99, 360, 400, 434, 454, 461, 462, 467, 471, 473, 479, 481], "pybytes_as_str": [9, 429], "pybytes_asstringands": [9, 57, 79], "pybytes_concat": [9, 57, 481], "newpart": 9, "append": [9, 34, 38, 59, 64, 76, 78, 79, 80, 84, 85, 100, 101, 105, 110, 118, 119, 132, 147, 149, 155, 156, 158, 159, 161, 174, 179, 182, 184, 187, 189, 194, 198, 200, 201, 203, 206, 223, 224, 232, 245, 246, 247, 248, 253, 256, 259, 265, 267, 268, 269, 279, 281, 282, 286, 290, 291, 295, 297, 299, 300, 307, 314, 316, 317, 318, 319, 328, 332, 335, 339, 340, 342, 350, 356, 360, 376, 386, 393, 398, 406, 409, 411, 420, 425, 426, 433, 438, 439, 440, 441, 447, 448, 450, 453, 454, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 481], "stolen": [9, 72, 481], "pybytes_concatanddel": [9, 57], "version": [9, 10, 13, 33, 34, 35, 41, 42, 45, 58, 59, 61, 63, 64, 66, 68, 73, 75, 76, 77, 79, 80, 85, 91, 92, 93, 94, 95, 97, 100, 101, 104, 107, 108, 109, 110, 115, 117, 118, 124, 126, 131, 137, 140, 141, 149, 156, 161, 165, 171, 174, 175, 181, 182, 184, 188, 189, 191, 192, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 219, 223, 228, 231, 233, 240, 241, 242, 243, 245, 246, 248, 250, 253, 255, 257, 260, 263, 264, 265, 266, 267, 268, 269, 272, 273, 276, 278, 279, 280, 281, 286, 291, 293, 297, 301, 302, 305, 306, 310, 311, 312, 313, 316, 317, 318, 328, 329, 330, 332, 335, 336, 337, 338, 339, 342, 343, 345, 346, 350, 352, 353, 354, 357, 359, 360, 362, 363, 367, 373, 374, 375, 377, 378, 379, 383, 384, 385, 386, 387, 388, 392, 393, 396, 397, 400, 401, 403, 408, 409, 411, 415, 419, 420, 423, 424, 426, 427, 428, 429, 430, 433, 434, 448, 451, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "_pybytes_res": [9, 481], "newsiz": [9, 28, 60, 276], "though": [9, 11, 31, 33, 58, 63, 64, 73, 75, 76, 84, 85, 92, 94, 95, 101, 103, 104, 107, 108, 113, 118, 124, 130, 131, 152, 153, 156, 159, 171, 175, 184, 191, 194, 197, 198, 203, 204, 206, 211, 223, 228, 233, 241, 245, 248, 249, 250, 253, 260, 265, 267, 269, 273, 281, 286, 290, 291, 303, 309, 312, 317, 326, 329, 339, 342, 345, 360, 363, 364, 367, 380, 382, 384, 386, 387, 388, 393, 408, 409, 413, 423, 424, 426, 427, 428, 430, 432, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 472, 473, 474, 481], "build": [9, 33, 34, 35, 42, 58, 64, 65, 68, 74, 75, 76, 79, 84, 85, 93, 97, 101, 108, 139, 153, 155, 156, 174, 184, 185, 186, 188, 189, 201, 204, 206, 209, 223, 233, 243, 252, 255, 256, 259, 271, 273, 280, 290, 294, 305, 309, 312, 326, 332, 335, 336, 339, 342, 350, 353, 360, 367, 380, 382, 386, 388, 392, 393, 397, 398, 408, 423, 426, 449, 453, 456, 457, 459, 460, 462, 471, 482], "brand": [9, 55, 60, 73, 303, 481], "refcount": [9, 33, 63, 99, 350, 360, 465, 481], "lvalu": [9, 290, 342], "differ": [9, 10, 13, 20, 23, 27, 33, 34, 42, 45, 58, 59, 63, 64, 66, 68, 72, 73, 74, 75, 76, 79, 84, 91, 92, 93, 95, 98, 99, 100, 101, 104, 107, 108, 110, 118, 124, 130, 131, 135, 136, 137, 139, 149, 152, 153, 155, 156, 157, 159, 161, 165, 167, 168, 171, 172, 174, 175, 181, 183, 184, 189, 191, 193, 194, 200, 201, 203, 206, 211, 212, 214, 220, 223, 224, 228, 240, 241, 243, 245, 248, 253, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 279, 281, 290, 291, 293, 294, 295, 297, 300, 306, 311, 312, 316, 317, 318, 319, 320, 326, 328, 329, 331, 333, 335, 336, 338, 339, 342, 343, 345, 346, 350, 351, 353, 356, 360, 361, 362, 363, 364, 367, 373, 374, 379, 383, 384, 386, 387, 392, 393, 403, 408, 409, 418, 420, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "realloc": [9, 42, 54, 73, 175, 464, 477, 481], "memoryerror": [9, 23, 55, 60, 64, 120, 184, 211, 393, 448, 475, 481], "slot": [10, 16, 32, 45, 47, 49, 50, 58, 61, 68, 75, 76, 93, 101, 132, 179, 189, 210, 224, 248, 253, 279, 281, 297, 314, 342, 383, 384, 426, 428, 460, 461, 462, 464, 465, 466, 468, 470, 471, 472, 474, 475, 476, 479, 480, 481], "callabl": [10, 33, 37, 58, 59, 63, 67, 68, 72, 73, 85, 87, 88, 92, 94, 95, 101, 106, 110, 118, 120, 124, 130, 134, 136, 137, 159, 164, 165, 168, 174, 175, 179, 185, 188, 189, 204, 205, 206, 221, 222, 223, 233, 246, 248, 249, 252, 256, 265, 266, 267, 269, 281, 289, 290, 291, 294, 296, 297, 311, 312, 313, 323, 330, 331, 333, 342, 346, 350, 351, 356, 363, 369, 374, 376, 386, 387, 388, 393, 397, 398, 400, 405, 411, 419, 425, 428, 430, 448, 453, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481], "kwarg": [10, 58, 63, 68, 85, 87, 93, 100, 101, 110, 113, 118, 120, 124, 137, 138, 140, 156, 158, 164, 165, 168, 175, 184, 223, 248, 251, 253, 260, 265, 266, 281, 289, 290, 291, 297, 305, 306, 323, 342, 343, 356, 360, 362, 363, 383, 384, 386, 387, 388, 397, 400, 426, 429, 439, 466, 471, 474, 476, 477, 479, 481], "tp_new": [10, 61, 63, 75, 76, 99, 472, 481], "tp_init": [10, 61, 63, 75, 76, 472, 481], "pyobject_cal": [10, 57, 63, 73, 480, 481], "pep": [10, 13, 23, 26, 30, 31, 33, 34, 35, 45, 49, 57, 59, 62, 63, 64, 66, 68, 71, 73, 75, 78, 80, 85, 86, 87, 88, 95, 107, 110, 111, 114, 115, 120, 124, 127, 139, 140, 149, 150, 151, 152, 156, 158, 159, 161, 164, 167, 168, 171, 173, 179, 185, 189, 198, 208, 211, 219, 223, 224, 225, 245, 247, 248, 249, 253, 256, 263, 264, 265, 270, 273, 279, 285, 286, 287, 291, 293, 294, 297, 299, 300, 309, 320, 322, 324, 326, 327, 330, 331, 332, 334, 335, 337, 338, 339, 342, 343, 346, 347, 350, 351, 356, 357, 360, 364, 376, 383, 395, 397, 400, 405, 406, 421, 423, 425, 426, 427, 428, 429, 430, 433, 434, 439, 448, 453, 454, 455, 459, 460, 480, 481, 482], "590": [10, 68, 470, 471, 480, 481], "pyvectorcall_cal": [10, 57, 63, 472, 481], "py_tpflags_have_vectorcal": [10, 63, 472, 481], "now": [10, 23, 28, 33, 34, 39, 42, 49, 58, 59, 61, 63, 64, 66, 72, 73, 75, 76, 84, 85, 92, 93, 94, 100, 101, 103, 104, 105, 106, 107, 108, 113, 115, 118, 124, 130, 131, 135, 137, 138, 139, 141, 144, 147, 149, 151, 156, 158, 159, 161, 165, 167, 168, 174, 175, 179, 181, 182, 184, 186, 189, 191, 198, 200, 203, 210, 211, 212, 213, 214, 216, 219, 223, 224, 228, 232, 233, 240, 241, 242, 243, 246, 248, 249, 250, 253, 256, 257, 260, 264, 265, 266, 267, 268, 269, 273, 276, 280, 281, 282, 286, 290, 291, 293, 294, 295, 297, 302, 303, 306, 307, 309, 311, 317, 326, 327, 328, 329, 330, 331, 333, 335, 336, 338, 339, 341, 342, 343, 345, 346, 350, 357, 358, 363, 364, 375, 379, 380, 382, 383, 384, 386, 387, 392, 393, 397, 398, 403, 409, 411, 417, 418, 420, 421, 425, 426, 428, 430, 433, 434, 439, 440, 447, 448, 449, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "class": [10, 22, 23, 28, 33, 40, 44, 45, 49, 53, 54, 58, 61, 62, 63, 64, 67, 68, 73, 75, 76, 80, 84, 86, 87, 88, 92, 95, 98, 100, 103, 104, 105, 106, 107, 108, 110, 111, 114, 116, 119, 120, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 157, 158, 162, 164, 165, 167, 168, 170, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 209, 216, 217, 219, 220, 221, 222, 223, 224, 225, 230, 232, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 252, 253, 254, 256, 257, 259, 260, 262, 264, 265, 266, 267, 268, 269, 271, 274, 276, 277, 278, 282, 283, 284, 286, 287, 290, 291, 293, 294, 295, 296, 299, 300, 302, 303, 305, 309, 311, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 331, 333, 335, 336, 338, 339, 341, 343, 346, 349, 350, 356, 357, 358, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 385, 387, 388, 392, 394, 396, 397, 398, 399, 400, 401, 403, 405, 406, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 427, 428, 429, 430, 431, 432, 434, 437, 439, 441, 443, 444, 448, 449, 450, 453, 459, 460, 461, 463, 464, 467, 468, 469, 470, 472, 473, 475, 476, 478, 479, 480, 481, 482], "__call__": [10, 63, 85, 87, 93, 118, 157, 158, 159, 201, 209, 223, 281, 289, 356, 384, 387, 388, 400, 426, 428, 472, 477, 481], "reassign": [10, 42, 63, 76, 305, 346, 384, 400, 472, 479, 481], "behav": [10, 23, 33, 34, 45, 63, 64, 76, 85, 94, 99, 101, 104, 107, 161, 165, 167, 168, 174, 181, 182, 184, 186, 223, 224, 242, 255, 256, 269, 276, 286, 291, 318, 319, 331, 333, 335, 336, 339, 342, 346, 350, 354, 362, 367, 384, 386, 388, 409, 411, 425, 426, 427, 428, 433, 434, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 474, 475, 478, 479, 481], "earlier": [10, 33, 63, 64, 72, 84, 85, 92, 95, 100, 101, 103, 104, 113, 124, 175, 181, 191, 228, 243, 245, 265, 267, 290, 291, 297, 317, 329, 338, 339, 346, 356, 367, 378, 381, 384, 386, 392, 398, 400, 409, 413, 426, 428, 430, 433, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 472, 474, 475, 476, 477, 478, 479, 480, 481], "tp_vectorcall_offset": [10, 58, 61, 63, 75, 481], "vectorcallfunc": [10, 27, 57, 63, 75, 472], "typedef": [10, 11, 13, 15, 22, 27, 28, 32, 33, 50, 58, 59, 61, 64, 68, 75, 76, 481], "nargsf": 10, "kwname": [10, 58, 99], "py_vectorcall_arguments_offset": [10, 57, 472, 481], "pyvectorcall_narg": [10, 57, 472, 481], "pyobject_vectorcallmethod": [10, 57, 472, 481], "pyobject_vectorcal": [10, 57, 102, 472, 481], "_pyobject_vectorcal": 10, "_py_tpflags_have_vectorcal": 10, "_pyobject_vectorcallmethod": [10, 481], "_pyvectorcall_funct": 10, "_pyobject_callonearg": [10, 481], "_pyobject_callmethodnoarg": [10, 481], "_pyobject_callmethodonearg": [10, 481], "pyobject_vectorcalldict": 10, "_pyobject_fastcalldict": 10, "py_enterrecursivecal": [10, 23, 57, 480, 481], "py_leaverecursivecal": [10, 23, 57, 480, 481], "pyvectorcall_funct": [10, 481], "fall": [10, 18, 22, 25, 39, 42, 63, 64, 84, 95, 100, 159, 175, 179, 181, 184, 194, 203, 211, 223, 233, 266, 291, 293, 323, 339, 342, 343, 356, 392, 393, 423, 426, 430, 433, 446, 460, 462, 463, 465, 466, 467, 468, 472, 473, 475, 477, 478, 480, 481], "pyobject_callnoarg": [10, 57, 75, 480, 481], "pyobject_callonearg": [10, 480, 481], "pyobject_callobject": [10, 57, 72, 73, 79], "pyobject_callfunct": [10, 57, 465, 479], "pyobject_callmethod": [10, 39, 55, 57, 79, 470, 472], "pyobject_callfunctionobjarg": [10, 57, 481], "pyobject_callmethodobjarg": [10, 57, 481], "pyobject_callmethodnoarg": [10, 481], "pyobject_callmethodonearg": [10, 481], "arg1": [10, 75, 85, 95, 97, 114, 189, 223, 290, 291, 426, 462, 463, 465], "arg2": [10, 75, 85, 95, 97, 114, 189, 223, 290, 387, 426, 462, 463, 465], "kwdict": [10, 73], "py_tpflags_method_descriptor": [10, 63, 481], "unbound": [10, 63, 68, 101, 113, 184, 185, 189, 223, 224, 253, 266, 360, 363, 382, 383, 426, 427, 430, 434, 462, 464, 468, 470, 476, 478, 481], "pycallable_check": [10, 57, 72, 73], "pycapsul": [11, 73, 467, 469, 470, 473, 481], "opaqu": [11, 13, 26, 33, 35, 39, 61, 63, 114, 169, 256, 312, 327, 340, 406, 411, 461, 472, 473, 475, 478, 479, 480, 481], "who": [11, 68, 73, 98, 100, 101, 107, 124, 161, 226, 228, 246, 265, 291, 320, 339, 343, 356, 382, 409, 419, 421, 423, 444, 459, 460, 462, 463, 464, 465, 467, 474, 477, 479, 480, 481], "often": [11, 13, 33, 58, 64, 73, 75, 76, 84, 85, 92, 93, 95, 98, 101, 104, 107, 108, 118, 144, 149, 153, 174, 181, 182, 184, 188, 191, 192, 196, 211, 223, 228, 231, 253, 259, 279, 290, 297, 306, 307, 309, 329, 335, 338, 339, 342, 344, 346, 352, 360, 363, 364, 367, 384, 393, 412, 426, 428, 432, 433, 434, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 476, 479, 481], "dynam": [11, 22, 25, 31, 42, 45, 63, 66, 68, 72, 73, 77, 79, 80, 84, 85, 100, 101, 116, 139, 180, 188, 201, 223, 224, 245, 248, 252, 253, 291, 294, 319, 333, 335, 338, 342, 350, 367, 374, 382, 384, 387, 388, 421, 426, 428, 430, 434, 438, 454, 460, 462, 463, 465, 466, 473, 474, 475, 478, 479, 481], "load": [11, 31, 33, 34, 41, 45, 58, 59, 68, 72, 73, 77, 79, 84, 85, 86, 93, 94, 99, 100, 101, 108, 116, 120, 140, 149, 153, 164, 165, 182, 185, 189, 191, 211, 241, 242, 245, 248, 249, 251, 259, 260, 265, 266, 272, 274, 277, 282, 291, 295, 297, 300, 302, 305, 306, 309, 312, 318, 328, 332, 338, 339, 342, 350, 352, 360, 364, 366, 367, 377, 380, 382, 383, 403, 408, 411, 412, 417, 418, 419, 421, 423, 425, 426, 429, 431, 434, 444, 453, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pycapsule_destructor": [11, 57], "destructor": [11, 33, 57, 63, 75, 76, 78, 84, 87, 113, 186, 291, 314, 346, 350, 426, 434, 453, 469, 473, 477, 479, 481], "pycapsule_new": [11, 57, 73], "pycapsule_checkexact": 11, "encapsul": [11, 84, 85, 88, 93, 99, 110, 112, 153, 200, 206, 246, 284, 303, 333, 350, 408, 412, 414, 417, 425, 430, 434, 464, 465, 466, 467, 475], "outliv": [11, 58, 425, 481], "permit": [11, 27, 59, 73, 98, 184, 210, 219, 223, 243, 253, 255, 257, 260, 263, 269, 281, 291, 297, 306, 317, 342, 346, 352, 408, 417, 424, 428, 429, 433, 434, 453, 465, 466, 472, 474, 475, 476, 479, 481], "attribut": [11, 22, 23, 26, 27, 31, 33, 45, 49, 50, 56, 60, 61, 63, 68, 74, 79, 87, 88, 95, 100, 104, 108, 110, 113, 116, 118, 120, 124, 131, 135, 140, 142, 147, 149, 153, 156, 157, 158, 165, 172, 173, 174, 175, 179, 181, 184, 185, 186, 188, 189, 191, 193, 194, 195, 198, 201, 203, 205, 206, 209, 211, 213, 214, 223, 224, 226, 231, 232, 240, 241, 242, 243, 245, 246, 248, 249, 252, 256, 257, 260, 266, 267, 268, 269, 271, 279, 281, 286, 289, 293, 294, 296, 297, 300, 302, 303, 310, 311, 312, 313, 317, 319, 323, 326, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 343, 345, 346, 351, 356, 359, 360, 362, 363, 364, 365, 367, 369, 372, 379, 380, 381, 382, 383, 384, 386, 387, 392, 393, 397, 398, 400, 403, 406, 408, 409, 411, 412, 413, 415, 417, 418, 420, 421, 423, 424, 425, 427, 433, 434, 438, 440, 454, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482], "modulenam": [11, 71, 73, 79, 85, 97, 448, 481], "attributenam": [11, 73], "enabl": [11, 28, 34, 35, 49, 63, 68, 75, 76, 92, 94, 97, 104, 108, 110, 118, 131, 137, 140, 142, 149, 150, 153, 165, 167, 174, 175, 184, 186, 191, 195, 211, 212, 223, 224, 225, 228, 240, 243, 245, 246, 248, 253, 256, 264, 266, 267, 281, 286, 291, 294, 295, 297, 303, 306, 309, 312, 317, 318, 331, 332, 335, 338, 339, 342, 346, 350, 351, 352, 360, 365, 367, 369, 374, 378, 384, 386, 398, 410, 412, 413, 418, 420, 425, 426, 427, 434, 453, 454, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 480, 481], "pycapsule_import": [11, 57, 73, 481], "pycapsule_getpoint": [11, 57, 467], "compar": [11, 23, 33, 34, 49, 63, 64, 68, 72, 75, 84, 92, 94, 98, 100, 101, 103, 104, 120, 124, 174, 179, 180, 181, 184, 188, 189, 191, 193, 194, 195, 200, 212, 214, 223, 224, 234, 257, 260, 264, 265, 267, 269, 281, 290, 295, 306, 309, 312, 314, 324, 326, 338, 339, 340, 342, 344, 350, 360, 367, 380, 384, 385, 386, 387, 388, 403, 411, 423, 425, 426, 428, 430, 433, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "strcmp": [11, 18, 75, 481], "pycapsule_getdestructor": [11, 57], "legal": [11, 77, 92, 107, 223, 239, 245, 256, 295, 364, 367, 374, 384, 418, 424, 428, 433, 461, 462, 463, 465, 466, 467, 481], "somewhat": [11, 23, 99, 101, 174, 181, 202, 224, 245, 264, 290, 291, 335, 367, 423, 460, 465, 468, 478, 479, 481], "ambigu": [11, 89, 95, 104, 118, 181, 257, 290, 295, 317, 342, 423, 425, 428, 432, 433, 460, 466, 472, 475, 477, 478, 479, 480, 481], "pycapsule_isvalid": [11, 57, 467], "pyerr_occur": [11, 22, 23, 25, 35, 36, 39, 41, 49, 57, 64, 72, 73, 429, 481], "disambigu": [11, 39, 68, 181, 428, 433, 481], "pycapsule_getcontext": [11, 57], "context": [11, 16, 23, 33, 42, 45, 49, 54, 64, 66, 68, 73, 78, 79, 85, 87, 95, 99, 107, 118, 120, 121, 122, 124, 126, 127, 130, 137, 149, 150, 158, 162, 164, 165, 181, 182, 185, 186, 188, 189, 216, 221, 223, 228, 233, 240, 248, 249, 250, 252, 253, 260, 265, 266, 267, 268, 269, 276, 286, 288, 291, 293, 295, 296, 297, 303, 305, 306, 312, 313, 314, 317, 319, 320, 326, 327, 328, 333, 335, 336, 343, 346, 350, 356, 357, 358, 360, 363, 366, 373, 375, 384, 386, 387, 388, 393, 397, 400, 403, 408, 410, 411, 412, 413, 417, 420, 425, 427, 428, 429, 433, 434, 454, 460, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "pycapsule_getnam": [11, 57], "no_block": [11, 481], "full": [11, 28, 33, 34, 63, 64, 68, 73, 76, 84, 93, 100, 101, 104, 108, 132, 137, 155, 156, 159, 161, 165, 166, 171, 174, 178, 181, 184, 188, 189, 191, 195, 198, 199, 210, 211, 220, 241, 245, 249, 253, 257, 259, 265, 267, 273, 276, 278, 279, 281, 290, 291, 293, 294, 295, 300, 312, 314, 317, 329, 330, 331, 333, 335, 336, 339, 342, 345, 346, 350, 356, 360, 364, 367, 382, 383, 384, 386, 387, 392, 393, 400, 401, 409, 411, 417, 420, 425, 426, 427, 429, 430, 434, 444, 453, 454, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "accessor": [11, 68, 85, 223, 271, 409, 465, 479, 481], "pycapsule_get": 11, "nonzero": [11, 23, 33, 59, 73, 104, 110, 113, 184, 189, 223, 267, 273, 276, 281, 309, 317, 342, 350, 359, 363, 364, 426, 433, 436, 453, 466, 479], "pycapsule_setcontext": [11, 57], "pycapsule_setdestructor": [11, 57], "pycapsule_setnam": [11, 57], "made": [11, 31, 33, 43, 58, 59, 63, 66, 72, 85, 94, 100, 101, 103, 104, 110, 118, 131, 137, 156, 158, 165, 167, 174, 175, 181, 184, 189, 191, 194, 197, 198, 203, 206, 211, 228, 240, 245, 248, 253, 256, 265, 266, 267, 276, 279, 281, 291, 295, 297, 305, 306, 312, 318, 319, 320, 322, 326, 329, 330, 331, 332, 333, 335, 342, 346, 351, 356, 360, 363, 367, 371, 380, 388, 392, 398, 400, 408, 411, 417, 418, 419, 423, 424, 425, 426, 434, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pycapsule_setpoint": [11, 57], "stack": [12, 23, 33, 35, 59, 68, 73, 75, 78, 94, 100, 102, 113, 116, 120, 124, 133, 137, 138, 142, 155, 158, 167, 169, 175, 182, 183, 189, 191, 211, 212, 223, 224, 245, 252, 255, 265, 267, 295, 313, 314, 317, 320, 329, 331, 335, 340, 342, 350, 351, 363, 373, 386, 387, 398, 425, 426, 427, 428, 433, 434, 441, 443, 453, 460, 461, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481], "frame": [12, 13, 16, 19, 23, 29, 33, 35, 49, 53, 66, 68, 78, 84, 94, 97, 102, 115, 137, 139, 140, 141, 142, 169, 175, 183, 189, 211, 212, 245, 253, 265, 295, 331, 334, 335, 339, 342, 347, 350, 351, 367, 372, 373, 374, 379, 383, 398, 425, 427, 453, 461, 463, 464, 465, 467, 470, 472, 474, 475, 476, 478, 480, 481], "pycellobject": 12, "pycell_typ": 12, "pycell_check": 12, "ob": [12, 19, 20, 29, 56, 67, 400, 471], "pycell_new": 12, "pycell_get": 12, "pycell_set": [12, 470, 481], "low": [13, 16, 33, 38, 60, 63, 64, 68, 75, 84, 100, 104, 107, 124, 127, 128, 131, 133, 134, 135, 137, 144, 162, 165, 167, 175, 176, 189, 211, 223, 252, 258, 265, 279, 291, 306, 316, 317, 326, 327, 328, 331, 333, 338, 339, 341, 342, 350, 354, 367, 384, 398, 400, 411, 413, 426, 454, 462, 463, 465, 466, 467, 474, 476, 477, 479, 481], "detail": [13, 17, 26, 34, 39, 42, 45, 54, 55, 59, 61, 63, 64, 66, 68, 71, 72, 73, 76, 77, 79, 84, 85, 88, 92, 93, 94, 95, 99, 100, 101, 103, 104, 107, 108, 110, 116, 118, 124, 131, 135, 137, 139, 142, 149, 150, 156, 167, 171, 174, 175, 179, 180, 181, 184, 188, 189, 191, 192, 194, 199, 203, 205, 209, 211, 213, 221, 223, 224, 228, 232, 233, 243, 244, 245, 248, 249, 253, 257, 260, 263, 265, 267, 268, 269, 270, 279, 281, 290, 291, 297, 317, 320, 322, 329, 330, 333, 335, 336, 338, 340, 342, 345, 346, 350, 352, 353, 354, 356, 357, 360, 362, 363, 367, 371, 379, 383, 384, 386, 392, 393, 398, 400, 403, 408, 411, 413, 417, 419, 420, 425, 426, 427, 428, 429, 430, 432, 433, 434, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "execut": [13, 22, 23, 26, 27, 33, 34, 45, 49, 51, 53, 59, 66, 68, 72, 73, 75, 76, 77, 79, 84, 85, 93, 95, 101, 103, 104, 107, 112, 113, 118, 126, 131, 133, 135, 137, 138, 140, 142, 149, 153, 155, 156, 158, 161, 164, 167, 168, 174, 183, 185, 189, 199, 211, 223, 224, 232, 243, 246, 248, 252, 253, 256, 264, 265, 266, 267, 270, 278, 279, 281, 290, 291, 294, 295, 297, 299, 301, 306, 307, 311, 313, 318, 320, 323, 326, 328, 329, 330, 332, 335, 338, 340, 342, 344, 345, 346, 350, 352, 356, 360, 363, 364, 366, 367, 369, 373, 376, 384, 386, 387, 388, 393, 397, 398, 401, 403, 418, 419, 424, 425, 428, 429, 430, 431, 434, 441, 448, 449, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "hasn": [13, 79, 84, 85, 131, 133, 137, 188, 230, 295, 312, 332, 339, 354, 460, 461, 465, 466, 468, 476, 478, 481], "pycodeobject": [13, 26, 471, 481], "subject": [13, 39, 45, 55, 61, 63, 75, 84, 95, 100, 101, 108, 120, 165, 181, 189, 191, 194, 198, 200, 201, 203, 241, 245, 260, 265, 266, 267, 269, 286, 291, 305, 306, 328, 335, 339, 360, 364, 384, 424, 425, 426, 429, 433, 439, 465, 470, 472, 475, 481], "chang": [13, 17, 22, 23, 27, 33, 34, 39, 45, 54, 55, 58, 59, 60, 61, 63, 66, 68, 72, 73, 75, 76, 77, 79, 92, 93, 94, 95, 101, 103, 104, 107, 108, 110, 111, 113, 118, 137, 147, 149, 153, 161, 165, 167, 168, 174, 175, 177, 179, 181, 182, 184, 188, 189, 191, 192, 194, 195, 199, 203, 204, 205, 206, 210, 211, 214, 216, 220, 221, 223, 224, 232, 233, 241, 244, 245, 246, 248, 249, 253, 256, 257, 259, 263, 264, 265, 266, 267, 268, 269, 273, 276, 279, 281, 282, 291, 294, 295, 297, 303, 306, 309, 311, 312, 317, 318, 319, 326, 327, 329, 330, 331, 335, 336, 337, 338, 339, 340, 342, 344, 346, 350, 351, 356, 359, 360, 362, 363, 364, 367, 373, 374, 375, 376, 380, 383, 384, 386, 387, 392, 393, 398, 403, 408, 409, 410, 411, 414, 419, 420, 423, 424, 425, 426, 427, 430, 432, 433, 434, 439, 449, 453, 454, 457, 459, 474, 481, 482], "pycode_typ": 13, "pycode_check": 13, "co": [13, 31, 58, 66, 68, 76, 118, 164, 175, 254, 335, 351, 360, 382, 464, 473, 478, 481], "pycode_getnumfre": 13, "pyunstable_code_new": [13, 472], "argcount": [13, 66, 140, 383, 479], "kwonlyargcount": [13, 140, 383, 481], "nlocal": [13, 140, 383], "stacksiz": [13, 140, 383, 481], "varnam": [13, 481], "freevar": [13, 481], "cellvar": [13, 223, 481], "filenam": [13, 23, 33, 34, 45, 59, 66, 68, 71, 77, 84, 85, 95, 97, 100, 101, 104, 110, 118, 120, 140, 142, 147, 149, 153, 155, 156, 157, 158, 161, 165, 167, 173, 174, 182, 187, 188, 191, 194, 195, 198, 199, 203, 211, 212, 216, 217, 221, 223, 228, 232, 241, 245, 248, 252, 253, 263, 265, 266, 267, 268, 270, 277, 279, 281, 283, 284, 290, 291, 293, 294, 295, 297, 300, 306, 307, 309, 317, 318, 328, 329, 330, 334, 338, 346, 349, 350, 356, 360, 367, 373, 376, 379, 380, 382, 383, 386, 388, 391, 393, 398, 401, 403, 404, 405, 409, 410, 411, 412, 419, 420, 434, 436, 444, 449, 450, 453, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481], "qualnam": [13, 19, 27, 29, 94, 100, 195, 209, 266, 481], "firstlineno": 13, "linet": 13, "exceptiont": 13, "dummi": [13, 68, 73, 101, 112, 162, 174, 188, 228, 256, 291, 339, 356, 360, 363, 382, 477, 481], "pycode_newempti": [13, 467], "definit": [13, 30, 31, 33, 39, 45, 50, 58, 59, 64, 68, 73, 75, 76, 85, 87, 92, 94, 98, 99, 101, 104, 107, 110, 118, 141, 142, 156, 159, 167, 174, 175, 179, 181, 209, 223, 224, 228, 230, 245, 248, 249, 253, 254, 265, 267, 279, 281, 287, 290, 297, 306, 310, 311, 322, 333, 338, 342, 343, 350, 357, 362, 364, 375, 382, 383, 384, 385, 386, 393, 400, 406, 408, 409, 412, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 443, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 476, 478, 479, 480, 481], "bytecod": [13, 31, 33, 66, 68, 84, 85, 87, 95, 97, 102, 104, 161, 223, 248, 252, 253, 262, 309, 322, 331, 349, 350, 360, 380, 426, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 481, 482], "bind": [13, 44, 58, 61, 68, 85, 93, 101, 105, 124, 127, 140, 167, 169, 175, 191, 221, 223, 228, 239, 243, 253, 264, 266, 292, 296, 312, 318, 327, 333, 335, 336, 339, 350, 360, 366, 369, 373, 374, 382, 424, 425, 426, 428, 430, 431, 432, 434, 439, 457, 460, 461, 462, 464, 465, 466, 470, 474, 475, 476, 478, 481], "inter": [13, 188, 255, 258, 331, 384, 481], "depend": [13, 27, 33, 34, 45, 53, 63, 64, 68, 72, 73, 75, 77, 79, 84, 85, 92, 93, 94, 95, 99, 101, 104, 107, 109, 113, 124, 131, 137, 142, 149, 153, 156, 165, 167, 171, 174, 175, 179, 181, 184, 188, 189, 191, 193, 203, 206, 208, 211, 213, 217, 219, 223, 228, 232, 240, 241, 242, 245, 248, 253, 255, 256, 257, 259, 264, 265, 266, 267, 268, 269, 273, 277, 279, 281, 286, 291, 294, 297, 306, 307, 313, 317, 320, 326, 327, 328, 331, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 352, 353, 356, 357, 359, 360, 362, 364, 367, 374, 382, 384, 386, 387, 388, 393, 397, 400, 401, 403, 404, 411, 413, 417, 419, 423, 425, 426, 427, 428, 430, 433, 434, 450, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 481], "subtl": [13, 23, 63, 73, 191, 213, 290, 293, 306, 426, 427, 475, 481], "incorrect": [13, 101, 104, 110, 141, 155, 182, 191, 211, 223, 242, 245, 253, 265, 269, 290, 291, 346, 364, 384, 386, 387, 388, 395, 409, 420, 426, 429, 461, 462, 463, 465, 468, 472, 473, 474, 475, 479, 480, 481], "vm": [13, 63, 84, 320, 351, 474, 481], "crash": [13, 33, 43, 57, 63, 73, 75, 99, 138, 149, 174, 182, 186, 212, 245, 248, 269, 281, 290, 295, 297, 328, 350, 360, 454, 460, 465, 466, 472, 474, 475, 477, 481], "extrem": [13, 95, 99, 101, 107, 205, 260, 266, 291, 297, 316, 387, 408, 420, 428, 481], "care": [13, 23, 33, 63, 66, 68, 73, 75, 76, 84, 85, 93, 94, 99, 100, 101, 103, 104, 107, 108, 118, 142, 167, 174, 179, 181, 184, 189, 191, 194, 206, 228, 248, 265, 266, 267, 269, 281, 290, 297, 306, 312, 317, 328, 331, 345, 346, 350, 356, 386, 387, 388, 398, 406, 409, 411, 419, 426, 428, 446, 453, 459, 460, 464, 465, 466, 467, 468, 472, 473, 475, 480, 481], "renam": [13, 42, 58, 63, 76, 84, 101, 110, 140, 158, 211, 221, 245, 246, 250, 267, 269, 291, 294, 309, 326, 330, 340, 379, 386, 387, 419, 450, 460, 462, 463, 464, 466, 467, 468, 469, 472, 473, 474, 476, 477, 481], "pycode_new": [13, 467, 471, 472, 479, 481], "deprec": [13, 23, 31, 33, 42, 49, 54, 56, 58, 59, 61, 63, 64, 68, 93, 110, 118, 124, 137, 147, 149, 156, 159, 171, 174, 184, 185, 196, 197, 203, 205, 211, 216, 223, 232, 240, 241, 246, 248, 250, 253, 257, 265, 270, 290, 291, 296, 297, 302, 303, 312, 320, 322, 326, 330, 333, 335, 339, 342, 344, 350, 356, 360, 363, 364, 367, 369, 382, 386, 393, 395, 398, 401, 411, 421, 426, 428, 430, 459, 461, 462, 465, 468, 470, 472, 474, 479, 480, 481, 482], "until": [13, 31, 33, 34, 59, 63, 66, 72, 73, 76, 79, 84, 85, 92, 95, 100, 101, 104, 113, 118, 124, 127, 131, 132, 135, 136, 137, 141, 149, 151, 158, 175, 181, 184, 189, 205, 212, 216, 223, 224, 228, 233, 240, 241, 245, 248, 256, 259, 263, 265, 267, 268, 281, 290, 291, 293, 295, 297, 303, 306, 314, 318, 321, 323, 326, 327, 329, 331, 335, 336, 337, 338, 339, 342, 345, 346, 357, 359, 360, 363, 367, 379, 382, 384, 387, 393, 398, 400, 401, 403, 405, 406, 410, 413, 414, 425, 426, 434, 450, 453, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 480, 481], "signatur": [13, 17, 45, 58, 63, 68, 71, 85, 93, 94, 99, 100, 101, 120, 124, 137, 143, 157, 158, 159, 167, 179, 181, 211, 214, 223, 224, 233, 245, 265, 266, 290, 297, 311, 313, 330, 338, 339, 346, 350, 379, 382, 383, 384, 387, 388, 392, 411, 413, 417, 422, 426, 428, 438, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481], "again": [13, 22, 27, 28, 33, 45, 63, 73, 75, 76, 84, 85, 92, 94, 95, 101, 104, 107, 108, 131, 144, 149, 165, 168, 174, 175, 181, 186, 198, 210, 212, 219, 224, 230, 241, 245, 259, 265, 267, 273, 276, 280, 281, 290, 291, 293, 294, 295, 297, 306, 311, 326, 329, 331, 333, 338, 339, 342, 346, 350, 358, 360, 363, 367, 373, 374, 382, 385, 388, 393, 398, 411, 412, 425, 426, 428, 430, 433, 434, 439, 441, 459, 460, 462, 463, 466, 468, 473, 474, 478, 479, 481], "pyunstable_code_newwithposonlyarg": [13, 472], "posonlyargcount": [13, 140, 383, 479, 481], "caveat": [13, 61, 68, 113, 190, 244, 248, 253, 306, 309, 387, 426, 434], "appli": [13, 34, 63, 64, 68, 73, 75, 94, 95, 100, 101, 110, 118, 120, 137, 139, 152, 156, 167, 174, 175, 176, 179, 181, 184, 185, 188, 189, 191, 196, 203, 206, 207, 211, 218, 221, 223, 224, 228, 233, 241, 242, 243, 245, 253, 257, 259, 265, 266, 268, 269, 270, 274, 281, 290, 291, 295, 297, 306, 312, 317, 319, 320, 322, 326, 330, 335, 339, 342, 343, 346, 350, 352, 356, 360, 363, 364, 367, 374, 376, 380, 384, 385, 386, 387, 392, 398, 409, 411, 417, 420, 424, 425, 426, 427, 428, 430, 434, 440, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 477, 478, 479, 480, 481], "pycode_newwithposonlyarg": [13, 471, 472, 479, 481], "funcnam": [13, 72, 97, 142, 265, 425, 438], "line": [13, 23, 24, 26, 33, 34, 64, 66, 68, 72, 73, 76, 84, 85, 89, 92, 94, 95, 97, 99, 100, 101, 103, 104, 107, 108, 110, 111, 116, 117, 120, 123, 134, 135, 140, 141, 142, 144, 147, 148, 149, 150, 152, 155, 156, 157, 158, 165, 167, 168, 173, 174, 175, 176, 181, 183, 184, 185, 186, 191, 193, 194, 197, 198, 199, 200, 202, 203, 205, 206, 211, 212, 217, 220, 221, 223, 228, 232, 238, 240, 243, 245, 246, 248, 249, 252, 253, 256, 257, 259, 260, 262, 265, 266, 267, 268, 269, 270, 276, 279, 280, 281, 286, 294, 295, 297, 299, 300, 303, 305, 306, 310, 311, 312, 317, 319, 322, 329, 330, 332, 333, 338, 339, 342, 343, 345, 346, 348, 350, 351, 352, 357, 360, 361, 362, 365, 367, 373, 375, 379, 380, 382, 384, 385, 387, 394, 397, 398, 401, 405, 409, 411, 414, 418, 419, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 438, 439, 440, 441, 444, 446, 447, 449, 450, 451, 453, 454, 456, 457, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pycode_addr2lin": [13, 463, 470, 471, 477], "byte_offset": 13, "pyframe_getlinenumb": [13, 26, 57, 467, 470, 471, 477, 480], "effici": [13, 22, 25, 33, 49, 60, 63, 64, 68, 92, 95, 98, 105, 107, 124, 131, 149, 156, 181, 184, 189, 211, 214, 217, 218, 224, 233, 249, 259, 281, 282, 291, 297, 305, 317, 326, 327, 339, 342, 345, 362, 363, 403, 411, 426, 462, 464, 466, 468, 472, 473, 474, 475, 476, 479, 480, 481], "iter": [13, 16, 22, 28, 29, 33, 36, 49, 54, 55, 63, 64, 67, 68, 75, 78, 87, 93, 98, 104, 106, 110, 114, 119, 120, 124, 131, 134, 137, 142, 147, 148, 149, 156, 158, 159, 164, 165, 167, 168, 173, 174, 179, 185, 189, 192, 193, 194, 195, 203, 211, 217, 218, 223, 224, 228, 229, 232, 233, 234, 240, 241, 248, 249, 250, 251, 252, 253, 254, 256, 259, 260, 264, 265, 268, 269, 273, 281, 283, 286, 291, 294, 295, 297, 298, 302, 306, 316, 317, 326, 335, 338, 341, 345, 350, 360, 376, 383, 384, 387, 388, 392, 393, 400, 405, 408, 411, 412, 413, 417, 423, 425, 429, 430, 434, 439, 440, 441, 443, 448, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "626": [13, 68, 189, 426, 472, 481], "pycode_addr2loc": [13, 471, 481], "start_lin": [13, 426], "start_column": [13, 426], "end_lin": [13, 426], "end_column": [13, 426], "column": [13, 34, 63, 68, 85, 97, 107, 149, 153, 175, 188, 189, 191, 211, 223, 245, 253, 259, 260, 279, 291, 306, 312, 317, 330, 338, 342, 345, 362, 366, 367, 376, 411, 414, 426, 453, 460, 467, 471, 476, 481], "particular": [13, 33, 45, 59, 63, 64, 66, 68, 72, 73, 75, 85, 93, 95, 98, 99, 100, 104, 107, 108, 113, 118, 137, 149, 156, 159, 165, 167, 174, 175, 181, 191, 201, 206, 211, 241, 245, 246, 249, 253, 257, 260, 265, 266, 267, 269, 273, 274, 281, 286, 290, 291, 295, 297, 300, 306, 317, 320, 326, 330, 331, 332, 333, 335, 336, 339, 340, 342, 343, 345, 346, 350, 351, 353, 360, 362, 363, 367, 373, 374, 379, 384, 386, 387, 388, 392, 393, 398, 400, 408, 409, 411, 418, 424, 425, 426, 428, 429, 430, 432, 434, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "pycode_getcod": [13, 471, 481], "getattr": [13, 78, 85, 87, 88, 93, 100, 101, 114, 124, 158, 174, 179, 189, 223, 253, 259, 281, 289, 290, 297, 343, 356, 383, 384, 425, 438, 448, 460, 473, 475, 478, 481], "co_cod": [13, 253, 426, 471, 481], "demand": [13, 42, 64, 93, 165, 281, 290, 387, 425, 459, 472, 476, 480, 481], "necessarili": [13, 23, 61, 63, 72, 76, 85, 99, 113, 175, 184, 191, 194, 203, 249, 269, 273, 281, 291, 297, 317, 335, 338, 339, 342, 350, 351, 364, 383, 387, 408, 413, 423, 424, 434, 459, 463, 465, 466, 467, 481], "primari": [13, 68, 76, 85, 93, 94, 106, 155, 167, 191, 192, 194, 203, 204, 216, 259, 265, 274, 279, 291, 297, 306, 332, 335, 338, 339, 350, 376, 400, 417, 423, 429, 430, 431, 434, 450, 460, 461, 463, 464, 466, 467, 468, 473, 474, 475, 481], "debugg": [13, 32, 42, 68, 73, 142, 183, 191, 211, 212, 223, 245, 252, 319, 350, 351, 379, 386, 426, 438, 454, 459, 462, 463, 465, 466, 467, 472, 473, 477, 478, 479, 481], "profil": [13, 32, 34, 51, 68, 85, 102, 154, 156, 183, 252, 331, 339, 344, 350, 352, 363, 367, 403, 436, 449, 453, 454, 457, 461, 462, 464, 465, 466, 468, 470, 471, 472, 477, 479, 481], "pycode_getvarnam": [13, 471, 481], "co_varnam": [13, 189, 253, 426, 471, 481], "pytupleobject": [13, 54, 59, 60, 62], "pycode_getcellvar": [13, 471, 481], "co_cellvar": [13, 253, 426, 471, 481], "pycode_getfreevar": [13, 471, 481], "co_freevar": [13, 253, 426, 471, 481], "pycode_addwatch": [13, 472, 481], "pycode_watchcallback": 13, "regist": [13, 22, 27, 33, 34, 59, 61, 63, 68, 73, 76, 84, 85, 87, 107, 108, 114, 118, 124, 126, 130, 131, 134, 138, 156, 159, 165, 167, 191, 195, 201, 206, 212, 223, 224, 248, 256, 265, 274, 281, 287, 291, 296, 297, 300, 313, 318, 326, 327, 330, 331, 335, 339, 342, 350, 360, 367, 374, 382, 384, 386, 393, 398, 400, 401, 404, 408, 411, 413, 418, 419, 425, 426, 428, 430, 459, 460, 461, 463, 464, 466, 467, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481], "watcher": [13, 22, 27, 61, 63, 68, 75, 135, 472, 480, 481], "id": [13, 22, 27, 33, 45, 61, 68, 78, 87, 95, 97, 100, 101, 113, 115, 116, 120, 128, 131, 140, 151, 158, 175, 179, 191, 194, 195, 198, 201, 203, 207, 223, 228, 231, 238, 257, 259, 265, 266, 267, 268, 269, 270, 279, 281, 286, 291, 297, 301, 303, 305, 308, 312, 317, 320, 326, 327, 332, 335, 338, 339, 340, 346, 347, 351, 354, 356, 363, 367, 374, 384, 386, 387, 388, 396, 399, 400, 411, 414, 426, 428, 429, 448, 461, 462, 464, 465, 466, 471, 472, 478, 479, 480, 481], "pycode_clearwatch": [13, 472, 481], "ids": [13, 22, 27, 61, 85, 228, 257, 266, 268, 281, 286, 291, 297, 301, 351, 363, 374, 400, 464, 474, 481], "watcher_id": [13, 22, 27, 61], "clear": [13, 22, 27, 32, 33, 35, 45, 47, 58, 61, 63, 67, 68, 73, 75, 76, 80, 85, 92, 95, 97, 99, 101, 103, 104, 107, 108, 118, 124, 136, 153, 156, 158, 159, 165, 167, 175, 184, 189, 191, 203, 214, 221, 224, 241, 245, 248, 253, 263, 265, 267, 269, 274, 290, 291, 295, 300, 317, 318, 330, 331, 335, 338, 342, 350, 351, 356, 360, 363, 374, 379, 380, 381, 382, 384, 386, 387, 388, 397, 398, 411, 421, 425, 426, 428, 440, 447, 454, 459, 460, 462, 463, 465, 466, 467, 472, 473, 474, 475, 477, 478, 480, 481], "identifi": [13, 22, 23, 27, 33, 42, 61, 64, 68, 73, 75, 76, 77, 85, 87, 98, 100, 107, 108, 113, 118, 120, 151, 158, 174, 189, 191, 192, 194, 203, 210, 223, 228, 245, 246, 253, 257, 266, 267, 269, 279, 281, 286, 291, 295, 300, 306, 312, 313, 317, 318, 321, 326, 333, 335, 339, 342, 343, 344, 349, 350, 353, 360, 363, 366, 367, 371, 384, 385, 386, 388, 392, 393, 396, 403, 408, 411, 413, 414, 418, 424, 425, 426, 427, 430, 431, 434, 438, 441, 446, 459, 463, 464, 465, 466, 467, 468, 472, 473, 475, 476, 477, 478, 479, 480, 481], "pycodeev": 13, "enumer": [13, 22, 23, 27, 68, 78, 93, 95, 106, 107, 180, 209, 223, 224, 259, 281, 309, 342, 363, 380, 403, 420, 439, 440, 448, 450, 459, 471, 472, 475, 477, 481, 482], "event": [13, 22, 24, 27, 31, 33, 42, 58, 59, 66, 68, 73, 81, 92, 97, 100, 113, 119, 121, 122, 123, 127, 128, 130, 131, 133, 134, 135, 137, 140, 142, 162, 174, 175, 183, 187, 189, 220, 225, 252, 255, 258, 265, 267, 272, 279, 281, 291, 306, 312, 313, 326, 327, 333, 339, 340, 342, 350, 356, 360, 366, 369, 383, 386, 393, 400, 408, 409, 410, 411, 412, 413, 414, 415, 424, 426, 428, 444, 450, 453, 459, 460, 465, 466, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "py_code_event_cr": 13, "py_code_event_destroy": 13, "destruct": [13, 33, 73, 75, 153, 175, 253, 342, 426, 461, 472, 473, 481], "place": [13, 22, 23, 27, 33, 34, 38, 42, 45, 47, 52, 54, 58, 60, 61, 63, 64, 68, 73, 75, 76, 77, 79, 84, 87, 93, 94, 95, 99, 100, 101, 106, 108, 110, 118, 137, 149, 150, 156, 158, 165, 166, 167, 174, 175, 179, 181, 184, 187, 188, 189, 191, 194, 203, 206, 216, 222, 223, 224, 228, 230, 241, 245, 248, 256, 260, 265, 266, 267, 269, 273, 276, 281, 291, 294, 295, 297, 300, 306, 309, 312, 316, 317, 319, 322, 336, 338, 339, 342, 343, 346, 362, 367, 373, 374, 378, 382, 383, 384, 386, 387, 388, 393, 395, 397, 419, 420, 424, 425, 426, 428, 430, 434, 450, 453, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 473, 474, 476, 477, 478, 479, 481], "prior": [13, 22, 27, 33, 45, 59, 85, 93, 100, 101, 124, 141, 184, 223, 224, 243, 249, 253, 265, 327, 330, 335, 338, 339, 341, 342, 346, 350, 354, 356, 360, 363, 384, 386, 400, 411, 420, 424, 425, 426, 428, 430, 433, 472, 475, 476, 477, 478, 479, 481], "inspect": [13, 22, 27, 33, 34, 66, 68, 73, 76, 87, 88, 101, 103, 118, 120, 127, 137, 154, 159, 179, 191, 223, 233, 248, 249, 252, 257, 265, 269, 295, 300, 305, 311, 313, 330, 331, 332, 339, 342, 350, 356, 360, 369, 380, 384, 386, 387, 393, 420, 425, 426, 453, 460, 461, 462, 466, 467, 481], "resurrect": [13, 22, 27, 350, 360, 363, 426, 473, 480, 481], "prevent": [13, 22, 23, 27, 33, 42, 58, 61, 68, 73, 75, 76, 84, 85, 92, 93, 99, 100, 101, 107, 108, 124, 137, 156, 165, 167, 168, 174, 179, 184, 186, 188, 191, 204, 211, 223, 224, 245, 248, 257, 260, 266, 267, 269, 270, 274, 281, 286, 290, 291, 294, 303, 309, 333, 335, 339, 346, 350, 351, 356, 360, 367, 379, 382, 384, 386, 387, 388, 398, 400, 420, 426, 428, 430, 453, 459, 462, 463, 465, 466, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "later": [13, 22, 23, 24, 27, 33, 34, 42, 45, 61, 72, 73, 75, 76, 84, 92, 95, 100, 101, 104, 108, 118, 123, 124, 136, 137, 138, 139, 147, 149, 150, 152, 153, 156, 165, 167, 174, 175, 181, 189, 194, 200, 203, 228, 233, 241, 245, 248, 253, 259, 263, 264, 266, 268, 277, 281, 290, 291, 297, 317, 323, 326, 329, 331, 335, 338, 339, 350, 356, 360, 379, 384, 386, 387, 388, 393, 398, 400, 419, 425, 426, 428, 430, 434, 453, 454, 459, 460, 461, 462, 463, 466, 467, 468, 471, 472, 473, 475, 476, 478, 480, 481], "activ": [13, 22, 23, 27, 33, 49, 59, 63, 66, 72, 85, 92, 104, 124, 130, 136, 137, 142, 149, 150, 158, 167, 175, 184, 211, 216, 221, 223, 241, 245, 249, 270, 281, 286, 290, 293, 295, 303, 306, 312, 326, 332, 336, 338, 339, 342, 346, 350, 351, 363, 364, 367, 374, 382, 383, 388, 397, 409, 410, 413, 434, 439, 451, 453, 459, 460, 462, 463, 465, 466, 467, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481], "user": [13, 23, 28, 33, 34, 39, 42, 61, 63, 64, 66, 68, 70, 72, 73, 74, 76, 79, 84, 85, 86, 93, 94, 98, 99, 100, 101, 103, 104, 107, 108, 109, 116, 118, 124, 131, 133, 137, 140, 142, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 167, 171, 175, 177, 179, 181, 183, 184, 185, 187, 191, 198, 208, 210, 211, 214, 221, 224, 226, 227, 228, 231, 233, 240, 241, 243, 246, 248, 249, 252, 253, 255, 256, 264, 265, 267, 269, 270, 279, 281, 286, 290, 291, 292, 293, 294, 295, 297, 303, 309, 310, 313, 317, 318, 320, 326, 327, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 345, 346, 350, 351, 354, 356, 357, 360, 363, 364, 367, 371, 373, 374, 378, 379, 382, 383, 386, 388, 392, 393, 394, 397, 398, 401, 403, 409, 410, 411, 412, 413, 417, 419, 420, 423, 424, 425, 426, 427, 428, 430, 434, 436, 439, 451, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "reli": [13, 51, 73, 76, 93, 94, 99, 101, 103, 131, 138, 149, 159, 179, 181, 223, 248, 253, 265, 274, 281, 290, 291, 297, 300, 328, 330, 342, 350, 360, 362, 363, 364, 384, 386, 388, 425, 426, 427, 430, 459, 460, 463, 464, 465, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "runtim": [13, 24, 27, 33, 35, 42, 51, 52, 59, 66, 68, 73, 75, 76, 77, 85, 87, 88, 99, 100, 107, 111, 138, 140, 161, 165, 174, 180, 186, 189, 211, 223, 248, 252, 255, 266, 267, 290, 291, 309, 338, 342, 346, 350, 352, 367, 380, 384, 398, 402, 409, 419, 422, 425, 426, 427, 430, 434, 438, 453, 454, 459, 461, 463, 467, 468, 470, 472, 474, 475, 476, 477, 480, 481], "creation": [13, 16, 27, 33, 58, 59, 63, 68, 73, 76, 85, 93, 94, 95, 100, 101, 116, 118, 131, 133, 135, 137, 147, 179, 180, 184, 190, 195, 209, 223, 224, 228, 246, 248, 252, 253, 254, 256, 265, 268, 269, 279, 281, 286, 290, 303, 309, 319, 320, 329, 330, 333, 340, 342, 346, 356, 360, 367, 373, 387, 400, 408, 411, 419, 424, 425, 427, 430, 463, 472, 474, 475, 476, 478, 480, 481], "observ": [13, 27, 85, 94, 101, 181, 206, 316, 341, 346, 380, 382, 392, 434, 462, 474, 481], "print": [13, 22, 27, 32, 33, 34, 42, 49, 59, 63, 68, 72, 73, 75, 76, 78, 79, 84, 85, 86, 87, 88, 89, 94, 95, 98, 99, 100, 101, 104, 107, 108, 110, 111, 112, 113, 116, 120, 121, 123, 124, 127, 131, 132, 133, 134, 135, 136, 137, 138, 142, 144, 149, 153, 155, 157, 158, 161, 164, 165, 167, 168, 170, 173, 174, 175, 179, 181, 182, 184, 186, 188, 189, 191, 194, 198, 199, 202, 203, 209, 211, 212, 214, 218, 223, 224, 226, 228, 230, 233, 238, 240, 242, 243, 245, 246, 248, 249, 252, 253, 256, 259, 260, 265, 267, 269, 276, 277, 280, 281, 286, 291, 294, 295, 297, 299, 302, 303, 305, 306, 307, 311, 312, 313, 314, 316, 317, 318, 319, 320, 323, 327, 329, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 346, 350, 353, 355, 356, 357, 358, 360, 362, 363, 365, 367, 373, 374, 376, 378, 380, 382, 384, 386, 387, 393, 395, 397, 398, 400, 403, 405, 406, 409, 410, 411, 414, 415, 417, 418, 419, 420, 423, 425, 426, 427, 428, 433, 434, 438, 439, 440, 441, 444, 446, 447, 448, 449, 450, 453, 454, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "unrais": [13, 22, 23, 27, 140, 338, 350, 360, 471, 479, 481], "pyerr_writeunrais": [13, 22, 23, 27, 57, 75, 481], "pend": [13, 22, 23, 27, 33, 39, 75, 110, 124, 131, 137, 164, 256, 269, 279, 303, 326, 331, 338, 339, 428, 473, 475, 477, 480, 481], "save": [13, 22, 23, 27, 33, 42, 63, 68, 72, 73, 75, 85, 93, 94, 95, 99, 100, 101, 104, 118, 137, 138, 147, 149, 150, 153, 165, 167, 175, 181, 198, 207, 224, 241, 245, 259, 264, 267, 268, 269, 290, 291, 297, 306, 311, 317, 318, 332, 338, 350, 360, 363, 364, 366, 367, 379, 382, 398, 403, 417, 423, 425, 426, 462, 464, 465, 466, 467, 468, 469, 472, 473, 475, 478, 480, 481], "restor": [13, 17, 22, 23, 27, 33, 63, 75, 92, 101, 130, 156, 167, 168, 169, 175, 184, 188, 189, 241, 245, 253, 256, 264, 290, 297, 299, 317, 318, 322, 338, 346, 350, 356, 359, 360, 363, 374, 381, 382, 386, 387, 388, 398, 403, 426, 460, 462, 463, 465, 466, 472, 475, 478, 480, 481], "evalu": [13, 22, 33, 52, 56, 66, 68, 73, 85, 94, 95, 111, 120, 142, 165, 223, 228, 259, 265, 266, 273, 281, 291, 295, 321, 322, 342, 350, 363, 367, 384, 392, 400, 425, 426, 431, 433, 434, 444, 447, 454, 460, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 475, 479, 480, 481], "extern": [13, 35, 51, 68, 73, 79, 84, 85, 93, 99, 101, 116, 119, 149, 156, 165, 174, 182, 195, 214, 245, 248, 253, 255, 265, 270, 291, 296, 309, 312, 336, 342, 345, 346, 356, 360, 363, 367, 382, 386, 406, 407, 408, 410, 411, 412, 413, 414, 420, 426, 428, 459, 466, 468, 469, 473, 476, 477, 478, 479, 480, 481], "compil": [13, 31, 33, 34, 35, 42, 45, 58, 59, 63, 66, 68, 74, 76, 77, 79, 84, 85, 86, 95, 101, 107, 110, 111, 120, 140, 155, 165, 174, 178, 180, 182, 189, 191, 211, 218, 223, 228, 233, 240, 245, 246, 248, 250, 252, 253, 262, 266, 268, 272, 306, 309, 312, 317, 318, 322, 329, 338, 339, 342, 343, 345, 349, 350, 353, 357, 360, 379, 383, 384, 385, 386, 398, 408, 420, 424, 426, 427, 430, 432, 433, 434, 438, 448, 453, 456, 459, 460, 461, 462, 463, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481], "attach": [13, 33, 45, 72, 99, 100, 101, 118, 124, 130, 181, 191, 192, 194, 195, 197, 201, 203, 204, 205, 210, 245, 265, 266, 282, 326, 327, 338, 350, 367, 373, 379, 386, 388, 405, 423, 424, 425, 426, 434, 461, 463, 467, 468, 474, 477, 479, 481], "unstabl": [13, 28, 75, 110, 184, 472, 479, 481], "tier": [13, 471, 472, 481], "warn": [13, 27, 32, 33, 34, 58, 59, 68, 76, 85, 100, 101, 103, 110, 116, 123, 124, 133, 137, 179, 180, 185, 186, 211, 248, 252, 266, 267, 270, 281, 291, 306, 309, 313, 317, 331, 337, 338, 346, 350, 356, 367, 371, 382, 384, 386, 395, 405, 412, 413, 414, 426, 427, 430, 433, 448, 449, 450, 453, 454, 460, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 475, 476, 479, 480, 481, 482], "pyunstable_eval_requestcodeextraindex": [13, 472], "freefunc": [13, 45, 63, 75], "adding": [13, 22, 33, 35, 47, 61, 68, 73, 74, 77, 84, 85, 92, 93, 95, 99, 103, 104, 108, 139, 149, 179, 184, 193, 194, 195, 203, 204, 205, 241, 245, 260, 265, 269, 291, 317, 338, 342, 363, 374, 384, 386, 393, 400, 411, 420, 421, 426, 428, 430, 433, 434, 453, 459, 460, 462, 463, 464, 465, 466, 468, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482], "pycode_getextra": 13, "pycode_setextra": 13, "py_decref": [13, 22, 23, 28, 35, 36, 45, 52, 57, 63, 72, 73, 75, 76, 79, 87, 99, 470, 472, 479, 481], "_pyeval_requestcodeextraindex": [13, 472], "privat": [13, 32, 33, 42, 43, 57, 68, 85, 93, 94, 95, 174, 179, 188, 221, 223, 245, 246, 248, 257, 276, 281, 297, 303, 333, 339, 344, 346, 360, 384, 387, 428, 433, 434, 438, 459, 461, 462, 463, 466, 472, 473, 474, 475, 476, 477, 479, 481], "pyunstable_code_getextra": [13, 472], "_pycode_getextra": [13, 472, 481], "pyunstable_code_setextra": [13, 472], "_pycode_setextra": [13, 472, 481], "pycodec_regist": [14, 57], "search_funct": [14, 156], "pycodec_unregist": [14, 57, 470, 481], "registri": [14, 23, 34, 64, 68, 143, 165, 173, 193, 195, 201, 224, 248, 252, 257, 267, 274, 297, 301, 339, 350, 352, 384, 393, 398, 402, 404, 411, 456, 460, 466, 467, 477, 480, 481], "pycodec_knownencod": [14, 57], "pycodec_encod": [14, 57, 472], "lookuperror": [14, 23, 64, 156, 168, 211, 342, 448, 475], "pycodec_decod": [14, 57, 472], "keyerror": [14, 22, 23, 35, 55, 78, 85, 158, 165, 168, 182, 194, 195, 203, 209, 211, 231, 234, 241, 248, 259, 269, 294, 308, 326, 327, 328, 337, 342, 343, 353, 356, 383, 384, 385, 387, 388, 420, 423, 426, 430, 448, 450, 463, 464, 467, 474, 477, 479, 481], "pycodec_incrementalencod": [14, 57], "incrementalencod": [14, 68, 143, 465], "pycodec_incrementaldecod": [14, 57], "incrementaldecod": [14, 68, 143, 256, 465], "pycodec_streamread": [14, 57], "stream": [14, 33, 34, 41, 68, 84, 87, 95, 100, 105, 107, 116, 124, 134, 135, 137, 143, 144, 147, 155, 167, 175, 192, 198, 199, 204, 205, 210, 211, 217, 223, 227, 232, 240, 243, 245, 247, 250, 252, 259, 260, 265, 266, 267, 268, 274, 279, 291, 296, 305, 306, 312, 326, 327, 329, 330, 331, 332, 334, 335, 336, 346, 347, 350, 356, 360, 376, 384, 386, 393, 397, 406, 410, 411, 414, 415, 417, 420, 426, 428, 432, 433, 453, 460, 464, 465, 466, 467, 468, 473, 474, 475, 476, 477, 478, 479, 481], "streamread": [14, 68, 122, 124, 135, 143, 464, 465, 476, 477, 481], "pycodec_streamwrit": [14, 57], "streamwrit": [14, 68, 122, 124, 135, 143, 465, 471, 478, 481], "pycodec_registererror": [14, 57], "unicodeencodeerror": [14, 23, 45, 71, 107, 156, 211, 350, 392, 448, 471, 473, 479, 481], "unicodedecodeerror": [14, 23, 107, 156, 211, 291, 392, 448, 465, 468, 473, 475, 479, 481], "unicodetranslateerror": [14, 23, 156, 211, 448, 481], "pycodec_lookuperror": [14, 57], "strict": [14, 34, 63, 64, 73, 94, 95, 98, 101, 107, 118, 131, 141, 156, 165, 173, 174, 179, 181, 184, 200, 205, 206, 209, 216, 223, 238, 240, 241, 242, 246, 250, 253, 256, 257, 259, 260, 273, 274, 291, 292, 293, 294, 297, 339, 342, 350, 360, 364, 392, 393, 408, 424, 425, 426, 427, 428, 430, 433, 454, 460, 461, 463, 465, 466, 467, 470, 472, 473, 474, 475, 476, 478, 481], "pycodec_stricterror": [14, 57], "exc": [14, 23, 33, 47, 110, 120, 131, 137, 164, 167, 211, 379, 386, 388, 426, 434, 441, 466, 468, 470, 472, 474, 481], "pycodec_ignoreerror": [14, 57], "pycodec_replaceerror": [14, 57], "fffd": [14, 107, 156, 460], "pycodec_xmlcharrefreplaceerror": [14, 57], "xml": [14, 68, 80, 95, 104, 107, 156, 223, 252, 254, 256, 271, 302, 325, 393, 416, 449, 450, 459, 461, 462, 463, 464, 465, 466, 467, 471, 473, 481, 482], "pycodec_backslashreplaceerror": [14, 57], "pycodec_namereplaceerror": [14, 57, 476], "derefer": [15, 57, 281, 356, 481], "real": [15, 47, 59, 68, 72, 76, 85, 87, 93, 101, 108, 142, 151, 152, 155, 167, 174, 189, 191, 198, 203, 211, 223, 224, 246, 248, 260, 286, 287, 291, 306, 317, 320, 322, 329, 331, 332, 338, 339, 341, 342, 343, 350, 351, 352, 364, 367, 386, 387, 388, 411, 425, 429, 433, 438, 459, 465, 466, 467, 472, 473, 474, 477, 481], "_py_c_sum": 15, "_py_c_diff": 15, "_py_c_neg": 15, "num": [15, 101, 120, 156, 175, 184, 224, 228, 238, 246, 281, 290, 298, 339, 343, 384, 439, 440, 466, 467, 472, 479, 481], "_py_c_prod": 15, "_py_c_quot": 15, "dividend": [15, 184], "divisor": [15, 184, 273, 447], "errno": [15, 18, 23, 35, 51, 68, 73, 84, 116, 131, 140, 174, 186, 211, 213, 248, 252, 291, 312, 326, 331, 335, 339, 350, 360, 441, 466, 471, 474, 476, 478, 481], "edom": [15, 210], "_py_c_pow": 15, "exp": [15, 152, 184, 223, 273, 316, 343, 466, 467, 474, 481], "pycomplexobject": 15, "pycomplex_typ": [15, 57], "pycomplex_check": 15, "pycomplex_checkexact": 15, "pycomplex_fromccomplex": 15, "pycomplex_fromdoubl": [15, 57], "pycomplex_realasdoubl": [15, 57], "pycomplex_imagasdoubl": [15, 57], "pycomplex_asccomplex": [15, 466], "__complex__": [15, 152, 223, 260, 384, 387, 426, 466, 471, 475, 478, 479, 481], "__float__": [15, 25, 63, 152, 223, 384, 387, 426, 470, 478, 479, 481], "__index__": [15, 25, 39, 63, 68, 223, 289, 342, 345, 384, 387, 426, 466, 467, 468, 470, 471, 475, 478, 479, 481, 482], "pydict_check": [16, 22], "tree": [16, 33, 34, 63, 68, 78, 84, 85, 95, 110, 149, 161, 172, 188, 192, 194, 202, 203, 205, 214, 245, 252, 262, 271, 291, 294, 309, 310, 330, 340, 342, 350, 355, 367, 373, 374, 382, 397, 408, 409, 426, 429, 450, 453, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 474, 476, 477, 479, 480, 481], "singleton": [16, 20, 33, 45, 46, 49, 56, 58, 63, 73, 85, 87, 94, 101, 120, 181, 272, 297, 342, 387, 417, 425, 426, 428, 439, 440, 454, 461, 471, 477, 478, 481], "heap": [16, 32, 35, 42, 50, 58, 68, 73, 75, 76, 180, 212, 252, 280, 320, 382, 450, 463, 464, 466, 467, 470, 471, 472, 479, 480, 481], "pack": [16, 68, 101, 139, 143, 174, 213, 223, 232, 245, 252, 257, 266, 267, 269, 291, 301, 335, 342, 367, 372, 374, 406, 419, 426, 440, 450, 465, 467, 471, 473, 481], "unpack": [16, 68, 73, 84, 95, 101, 110, 120, 158, 189, 198, 213, 223, 281, 302, 330, 335, 342, 343, 345, 383, 384, 425, 428, 429, 434, 440, 441, 443, 450, 460, 464, 465, 466, 468, 470, 471, 472, 473, 475, 479, 481], "properti": [16, 58, 63, 68, 85, 87, 94, 95, 98, 100, 104, 114, 120, 156, 158, 168, 174, 175, 179, 184, 191, 193, 194, 201, 203, 206, 209, 219, 223, 224, 228, 233, 239, 249, 253, 255, 257, 260, 264, 269, 279, 281, 302, 329, 333, 339, 342, 344, 345, 350, 363, 376, 380, 382, 383, 384, 385, 386, 387, 393, 400, 403, 408, 409, 412, 413, 414, 424, 425, 426, 433, 434, 448, 459, 460, 462, 463, 464, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "codec": [16, 34, 68, 87, 103, 107, 143, 193, 199, 200, 211, 223, 252, 256, 291, 333, 342, 361, 420, 446, 449, 459, 460, 462, 464, 465, 468, 471, 476, 477, 479, 480, 481, 482], "escap": [16, 42, 49, 59, 68, 73, 78, 85, 92, 101, 104, 107, 118, 124, 135, 156, 165, 173, 175, 176, 188, 206, 223, 229, 236, 245, 248, 256, 260, 286, 317, 319, 329, 342, 343, 346, 364, 382, 384, 392, 415, 417, 426, 433, 447, 460, 461, 464, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "latin": [16, 68, 104, 107, 118, 134, 156, 193, 221, 237, 317, 329, 338, 356, 385, 428, 462, 463, 466, 469, 473, 476, 477, 478, 480, 481], "ascii": [16, 23, 31, 34, 42, 49, 58, 68, 71, 92, 100, 101, 104, 105, 107, 108, 116, 118, 120, 131, 135, 141, 143, 149, 156, 174, 175, 181, 189, 193, 194, 195, 198, 199, 200, 201, 203, 204, 205, 206, 207, 212, 223, 228, 235, 246, 252, 254, 256, 260, 264, 270, 280, 283, 284, 286, 291, 297, 312, 315, 317, 329, 333, 336, 338, 339, 342, 343, 344, 347, 356, 357, 360, 393, 395, 411, 417, 420, 424, 432, 433, 439, 444, 446, 448, 453, 460, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481], "mbcs": [16, 33, 34, 68, 143, 350, 453, 459, 462, 463, 473, 474, 477, 481], "window": [16, 23, 33, 34, 35, 42, 57, 59, 63, 66, 68, 71, 73, 74, 78, 80, 81, 82, 83, 84, 85, 87, 100, 101, 105, 107, 108, 109, 113, 116, 118, 124, 130, 131, 135, 143, 149, 153, 162, 164, 165, 174, 177, 211, 212, 220, 223, 227, 229, 241, 248, 252, 256, 259, 264, 267, 270, 273, 274, 276, 279, 280, 281, 290, 291, 292, 294, 304, 314, 326, 327, 329, 330, 331, 332, 333, 335, 338, 339, 340, 350, 352, 353, 356, 358, 359, 360, 363, 364, 366, 369, 371, 373, 374, 376, 386, 393, 395, 397, 401, 405, 419, 420, 423, 424, 426, 433, 436, 437, 439, 444, 446, 448, 451, 453, 454, 456, 457, 460, 461, 462, 464, 465, 468, 469, 470, 472, 473, 475, 476, 479, 480, 482], "cell": [16, 27, 66, 68, 85, 92, 93, 116, 174, 189, 224, 252, 253, 374, 383, 426, 466, 471, 481], "phase": [16, 32, 33, 68, 71, 73, 99, 136, 152, 225, 248, 339, 374, 429, 430, 434, 466, 470, 473, 474, 481], "lookup": [16, 17, 22, 31, 61, 63, 68, 77, 85, 94, 145, 156, 158, 179, 189, 193, 201, 209, 211, 223, 224, 228, 243, 253, 257, 267, 285, 291, 342, 343, 349, 350, 367, 374, 379, 385, 387, 423, 425, 430, 460, 462, 464, 465, 466, 472, 473, 474, 475, 477, 479, 480, 481], "descriptor": [16, 23, 24, 31, 33, 49, 61, 63, 68, 75, 78, 81, 84, 87, 94, 97, 114, 116, 123, 128, 129, 130, 131, 147, 174, 175, 183, 185, 210, 213, 216, 223, 224, 233, 246, 253, 255, 256, 266, 276, 280, 281, 293, 307, 310, 313, 320, 326, 327, 330, 331, 335, 336, 339, 342, 346, 356, 357, 359, 360, 367, 383, 425, 428, 434, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 478, 480, 481], "ellipsi": [16, 63, 68, 87, 120, 166, 191, 272, 297, 305, 375, 376, 383, 384, 429, 433, 448, 464, 468, 472, 479, 481], "capsul": [16, 68, 73, 95, 468, 481], "generat": [16, 26, 31, 33, 49, 51, 58, 64, 66, 68, 71, 72, 73, 75, 77, 79, 85, 87, 97, 100, 101, 107, 110, 111, 118, 120, 124, 128, 132, 133, 135, 137, 139, 140, 141, 142, 149, 153, 156, 159, 161, 164, 167, 171, 175, 179, 181, 185, 188, 189, 191, 192, 194, 201, 203, 206, 207, 211, 215, 221, 223, 224, 225, 228, 233, 240, 242, 243, 246, 252, 259, 265, 267, 269, 279, 281, 283, 291, 294, 297, 305, 309, 312, 313, 316, 319, 321, 324, 329, 333, 338, 339, 344, 346, 350, 351, 356, 360, 364, 367, 374, 375, 376, 378, 379, 382, 383, 384, 386, 392, 393, 396, 400, 408, 411, 415, 417, 418, 419, 424, 425, 427, 429, 430, 432, 433, 434, 443, 453, 454, 459, 460, 461, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482], "coroutin": [16, 26, 68, 87, 95, 121, 122, 123, 124, 126, 127, 128, 131, 132, 133, 134, 135, 136, 159, 167, 180, 184, 186, 189, 211, 313, 342, 350, 351, 384, 386, 387, 428, 454, 465, 471, 472, 477, 478, 479, 480, 481], "datetim": [16, 68, 85, 94, 101, 124, 131, 135, 137, 148, 180, 188, 201, 207, 209, 246, 252, 267, 286, 297, 302, 338, 339, 343, 364, 377, 383, 388, 417, 418, 423, 433, 449, 463, 464, 465, 466, 467, 470, 472, 476, 481], "pycontext": 17, "pycontextvar": [17, 481], "pycontexttoken": 17, "pycontext_new": 17, "bpo": [17, 35, 181, 186, 224, 265, 267, 281, 291, 300, 330, 384, 465, 466, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481], "34762": [17, 478, 481], "public": [17, 26, 28, 33, 34, 55, 63, 68, 84, 93, 105, 108, 124, 153, 173, 174, 188, 202, 220, 221, 233, 238, 241, 248, 249, 253, 257, 262, 280, 281, 290, 312, 329, 335, 339, 350, 356, 360, 362, 384, 385, 386, 393, 406, 408, 411, 414, 424, 433, 434, 438, 460, 461, 463, 464, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "contextvar": [17, 68, 87, 124, 127, 133, 137, 162, 184, 252, 454, 481], "token": [17, 66, 68, 84, 114, 120, 154, 168, 172, 248, 252, 262, 263, 279, 280, 284, 302, 312, 316, 329, 346, 355, 361, 393, 425, 429, 431, 432, 441, 445, 467, 468, 473, 477, 478, 481], "pycontext_typ": 17, "pycontextvar_typ": 17, "pycontexttoken_typ": 17, "pycontext_checkexact": 17, "pycontextvar_checkexact": 17, "pycontexttoken_checkexact": 17, "pycontext_copi": 17, "ctx": [17, 23, 42, 101, 120, 168, 184, 281, 339, 466], "shallow": [17, 33, 68, 158, 168, 179, 180, 191, 214, 242, 252, 253, 297, 342, 356, 383, 440, 481], "pycontext_copycurr": 17, "pycontext_ent": 17, "pycontext_exit": 17, "deactiv": [17, 350, 367, 397, 426, 451, 459, 472, 481], "pycontextvar_new": 17, "introspect": [17, 68, 75, 85, 87, 93, 168, 185, 189, 211, 224, 248, 297, 313, 367, 383, 387, 417, 418, 426, 430, 468, 470, 471, 472, 473, 474, 475, 476, 481], "debug": [17, 32, 33, 34, 35, 49, 63, 66, 68, 75, 76, 92, 100, 101, 123, 133, 142, 150, 168, 174, 184, 185, 186, 189, 194, 202, 203, 209, 211, 240, 246, 265, 266, 267, 277, 286, 290, 291, 295, 299, 303, 317, 329, 333, 338, 339, 342, 350, 356, 357, 360, 366, 367, 373, 380, 384, 386, 398, 411, 417, 420, 426, 427, 433, 434, 444, 450, 453, 455, 456, 459, 460, 461, 462, 463, 465, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481], "pycontextvar_get": 17, "var": [17, 78, 85, 87, 88, 93, 94, 101, 118, 120, 158, 165, 168, 223, 267, 342, 353, 358, 384, 387, 429, 439, 444, 448, 464, 465, 466, 467, 468, 470, 473, 481], "default_valu": 17, "dure": [17, 22, 23, 28, 33, 34, 45, 51, 58, 63, 64, 68, 77, 85, 93, 94, 101, 103, 131, 137, 138, 149, 156, 165, 174, 175, 179, 181, 184, 189, 191, 196, 199, 200, 201, 206, 209, 211, 216, 224, 233, 248, 249, 256, 260, 265, 266, 267, 268, 269, 279, 286, 291, 294, 297, 306, 311, 312, 317, 318, 321, 330, 331, 332, 333, 338, 339, 342, 350, 351, 359, 360, 364, 374, 378, 380, 382, 383, 384, 386, 398, 400, 411, 412, 413, 414, 420, 423, 425, 426, 428, 430, 433, 434, 441, 453, 459, 460, 463, 464, 465, 466, 467, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481], "pycontextvar_set": 17, "pycontextvar_reset": 17, "reset": [17, 33, 59, 85, 94, 95, 108, 136, 142, 153, 155, 156, 158, 168, 175, 184, 188, 196, 204, 210, 211, 212, 216, 238, 243, 245, 248, 265, 281, 291, 293, 299, 324, 326, 331, 335, 339, 342, 354, 356, 360, 363, 364, 373, 378, 382, 386, 387, 398, 406, 410, 411, 414, 423, 425, 433, 462, 466, 473, 474, 475, 476, 481], "pyos_snprintf": [18, 57, 462], "unix": [18, 23, 33, 34, 35, 59, 66, 68, 73, 74, 80, 81, 83, 87, 92, 95, 100, 105, 107, 113, 116, 118, 122, 128, 129, 130, 131, 134, 135, 144, 148, 158, 165, 172, 173, 175, 188, 194, 197, 199, 206, 213, 217, 223, 226, 227, 228, 231, 241, 245, 252, 255, 256, 259, 264, 267, 269, 270, 276, 281, 284, 285, 286, 290, 291, 292, 293, 294, 296, 299, 303, 304, 307, 308, 311, 320, 321, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 346, 348, 350, 352, 353, 356, 358, 359, 360, 363, 364, 367, 373, 381, 386, 401, 405, 419, 420, 433, 436, 437, 444, 446, 451, 452, 453, 454, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 481], "snprintf": [18, 462, 470, 481], "pyos_vsnprintf": [18, 57, 462], "va": [18, 424], "vsnprintf": [18, 462, 470, 481], "corner": [18, 63, 92, 175, 382, 462, 465, 466, 471, 481], "int_max": [18, 481], "c99": [18, 35, 63, 76, 152, 174, 273, 342, 345, 350, 442, 454, 466, 470, 473, 477, 481], "rv": [18, 35, 213], "pyos_strtoul": [18, 57], "36": [18, 39, 100, 102, 107, 223, 259, 269, 281, 316, 320, 341, 343, 364, 440, 444, 447, 449, 450, 451, 470, 473, 475, 479, 480, 481], "inclus": [18, 34, 39, 42, 118, 158, 181, 210, 257, 263, 265, 268, 291, 306, 316, 317, 329, 341, 351, 380, 411, 424, 426, 428, 432, 434, 453, 467, 473, 478, 481], "white": [18, 92, 94, 104, 175, 176, 197, 209, 245, 346, 374, 382, 393, 424, 432, 450, 475, 480, 481], "look": [18, 28, 33, 42, 45, 49, 51, 63, 64, 72, 73, 75, 76, 77, 79, 84, 85, 87, 92, 93, 94, 95, 100, 101, 103, 104, 107, 108, 110, 118, 124, 137, 139, 141, 149, 152, 156, 165, 167, 174, 175, 178, 179, 181, 184, 187, 188, 189, 191, 194, 195, 197, 201, 203, 211, 223, 224, 228, 232, 241, 243, 245, 248, 249, 257, 263, 265, 266, 267, 269, 290, 291, 293, 294, 300, 306, 311, 317, 322, 330, 336, 338, 339, 342, 343, 346, 350, 352, 353, 360, 367, 374, 376, 379, 380, 383, 384, 385, 386, 387, 388, 393, 400, 408, 411, 421, 423, 425, 426, 427, 428, 430, 433, 434, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 477, 479, 481], "0b": [18, 47, 223, 290, 342, 343, 466, 473], "0o": [18, 47, 85, 223, 342, 343, 466, 473], "absent": [18, 118, 175, 266, 295, 335, 393, 473, 481], "scan": [18, 85, 93, 95, 100, 104, 156, 175, 191, 226, 228, 243, 291, 294, 317, 326, 367, 384, 426, 427, 453, 462, 463, 465, 467, 473, 476, 481], "out": [18, 23, 31, 34, 35, 39, 42, 56, 59, 60, 64, 68, 72, 73, 76, 85, 92, 94, 95, 98, 100, 101, 103, 104, 107, 108, 118, 131, 132, 137, 138, 139, 142, 147, 156, 159, 161, 165, 174, 175, 176, 181, 182, 184, 188, 189, 191, 193, 194, 201, 203, 210, 211, 213, 224, 228, 233, 241, 245, 248, 249, 251, 256, 257, 259, 264, 265, 273, 281, 290, 291, 293, 295, 296, 298, 302, 306, 309, 311, 312, 317, 320, 326, 329, 331, 335, 336, 338, 339, 342, 343, 345, 346, 350, 356, 360, 363, 367, 379, 382, 383, 384, 386, 387, 388, 392, 397, 398, 405, 408, 411, 415, 417, 421, 423, 424, 425, 426, 427, 434, 439, 440, 447, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 481], "erang": [18, 210], "ulong_max": [18, 39], "perform": [18, 23, 28, 33, 39, 42, 59, 60, 63, 64, 68, 72, 75, 92, 95, 100, 101, 107, 110, 116, 118, 124, 131, 137, 156, 159, 161, 165, 167, 175, 179, 181, 184, 186, 189, 191, 197, 204, 207, 211, 213, 218, 223, 224, 225, 240, 241, 243, 245, 246, 247, 248, 250, 257, 259, 260, 264, 265, 266, 267, 270, 281, 286, 291, 296, 303, 306, 312, 317, 319, 329, 330, 331, 332, 334, 335, 336, 338, 339, 342, 346, 350, 351, 353, 363, 364, 369, 376, 382, 384, 386, 387, 392, 393, 397, 403, 413, 417, 418, 424, 426, 428, 430, 433, 434, 453, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "strtoul": 18, "pyos_strtol": [18, 57], "strtol": 18, "pyos_string_to_doubl": [18, 57, 467, 469], "endptr": 18, "overflow_except": 18, "1e500": 18, "py_huge_v": 18, "pyos_double_to_str": [18, 57], "val": [18, 22, 23, 73, 95, 114, 165, 188, 189, 194, 203, 221, 242, 264, 295, 338, 342, 384, 388, 393, 426, 465, 472, 481], "format_cod": 18, "ptype": [18, 23, 301, 481], "repr": [18, 23, 24, 49, 63, 64, 68, 75, 94, 101, 106, 107, 110, 137, 174, 179, 180, 181, 189, 191, 209, 223, 240, 245, 252, 281, 312, 327, 335, 342, 343, 350, 360, 362, 376, 379, 383, 384, 387, 388, 423, 425, 426, 433, 434, 442, 444, 448, 450, 460, 461, 463, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 481], "py_dtsf_sign": 18, "py_dtsf_add_dot_0": 18, "py_dtsf_alt": 18, "py_dtst_finit": 18, "py_dtst_infinit": 18, "py_dtst_nan": 18, "pyos_stricmp": [18, 466], "s1": [18, 107, 159, 188, 264, 335, 463], "s2": [18, 107, 159, 188, 264, 335, 463], "pyos_strnicmp": [18, 466], "strncmp": 18, "async": [19, 23, 26, 32, 50, 68, 87, 101, 121, 122, 123, 124, 127, 131, 132, 133, 134, 135, 136, 137, 167, 168, 189, 223, 224, 253, 262, 310, 339, 375, 383, 384, 386, 387, 388, 426, 428, 429, 433, 470, 471, 472, 477, 478, 479, 480, 481], "pycoroobject": 19, "pycoro_typ": 19, "pycoro_checkexact": 19, "pycoro_new": 19, "pyframeobject": [19, 26, 29, 33, 53, 57, 66, 471, 475, 481], "__name__": [19, 29, 45, 61, 63, 68, 84, 85, 87, 93, 94, 100, 101, 102, 124, 142, 153, 155, 164, 181, 186, 188, 191, 195, 198, 209, 223, 224, 226, 248, 253, 265, 281, 287, 290, 294, 295, 297, 300, 311, 313, 319, 321, 322, 331, 336, 338, 340, 342, 360, 363, 365, 383, 384, 386, 397, 398, 400, 405, 418, 426, 430, 448, 462, 463, 466, 468, 470, 472, 474, 475, 476, 477, 479, 480, 481], "__qualname__": [19, 27, 29, 61, 87, 93, 94, 195, 209, 223, 224, 253, 342, 426, 427, 470, 474, 476, 481], "pydatetime_import": 20, "pydatetimeapi": 20, "pydatetime_d": 20, "date": [20, 33, 68, 72, 85, 94, 101, 131, 135, 137, 148, 161, 180, 191, 197, 201, 206, 207, 209, 241, 243, 264, 265, 267, 269, 286, 289, 291, 297, 309, 337, 338, 339, 342, 356, 364, 367, 377, 388, 417, 418, 420, 421, 424, 430, 433, 449, 450, 459, 460, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pydatetime_datetim": 20, "pydatetime_tim": 20, "pydatetime_delta": 20, "pydatetime_datetyp": 20, "pydatetime_datetimetyp": 20, "pydatetime_timetyp": 20, "pydatetime_deltatyp": 20, "timedelta": [20, 68, 94, 180, 286, 383, 423, 463, 467, 473, 474, 478, 479, 480, 481], "pydatetime_tzinfotyp": 20, "zone": [20, 181, 207, 257, 335, 364, 423, 424, 454, 463, 465, 467, 480, 481], "info": [20, 23, 63, 68, 73, 84, 93, 100, 101, 118, 123, 135, 150, 156, 167, 181, 189, 223, 225, 228, 240, 241, 249, 253, 265, 266, 267, 269, 281, 286, 300, 301, 305, 330, 347, 356, 367, 371, 382, 384, 386, 393, 419, 420, 428, 450, 457, 461, 463, 465, 466, 467, 472, 473, 475, 479, 481], "tzinfo": [20, 68, 180, 207, 377, 423, 463, 470, 471, 473, 474, 477, 478, 480, 481], "utc": [20, 68, 181, 188, 201, 207, 267, 338, 339, 364, 423, 449, 466, 471, 472, 473, 476, 477, 478, 481], "pydatetime_timezone_utc": [20, 478], "timezon": [20, 68, 101, 116, 180, 188, 201, 207, 338, 360, 377, 423, 449, 471, 472, 473, 474, 476, 477, 478, 481], "pydate_check": 20, "pydate_checkexact": 20, "pydatetime_check": 20, "pydatetime_checkexact": 20, "pytime_check": 20, "pytime_checkexact": 20, "pydelta_check": 20, "pydelta_checkexact": 20, "pytzinfo_check": 20, "pytzinfo_checkexact": 20, "pydate_fromd": 20, "year": [20, 85, 93, 104, 148, 181, 191, 260, 338, 341, 364, 384, 411, 420, 433, 444, 459, 461, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 479, 480, 481], "month": [20, 85, 148, 181, 264, 364, 420, 433, 460, 461, 463, 467, 472, 481], "day": [20, 73, 84, 85, 94, 104, 124, 148, 165, 181, 224, 242, 260, 264, 267, 273, 286, 291, 337, 339, 341, 364, 383, 420, 423, 430, 433, 449, 460, 463, 465, 466, 467, 472, 475, 477, 479, 480, 481], "pydatetime_fromdateandtim": 20, "hour": [20, 85, 104, 124, 131, 137, 181, 207, 267, 269, 364, 420, 423, 433, 463, 477], "minut": [20, 107, 133, 181, 267, 291, 364, 420, 433, 454, 463, 478, 481], "usecond": 20, "pydatetime_fromdateandtimeandfold": [20, 481], "fold": [20, 181, 199, 200, 201, 206, 248, 342, 344, 423, 424, 464, 465, 477, 478, 481], "pytime_fromtim": 20, "pytime_fromtimeandfold": 20, "pydelta_fromdsu": 20, "pytimezone_fromoffset": [20, 478], "pytimezone_fromoffsetandnam": [20, 478], "tzname": [20, 181, 364, 423, 477, 480, 481], "pydatetime_get_year": 20, "pydatetime_get_month": 20, "pydatetime_get_day": 20, "31": [20, 93, 104, 148, 171, 174, 176, 181, 209, 232, 257, 260, 316, 317, 341, 342, 350, 364, 417, 420, 422, 423, 433, 449, 463, 465, 466, 473, 478, 479, 480, 481], "pydatetime_date_get_hour": 20, "23": [20, 94, 97, 101, 107, 148, 181, 184, 207, 223, 224, 234, 257, 259, 265, 281, 317, 330, 335, 342, 346, 357, 364, 365, 462, 463, 471, 473, 475, 476, 477, 479, 480, 481], "pydatetime_date_get_minut": 20, "59": [20, 89, 101, 181, 259, 317, 364, 380, 451, 473, 481], "pydatetime_date_get_second": 20, "pydatetime_date_get_microsecond": 20, "999999": [20, 181, 184, 474], "pydatetime_date_get_fold": 20, "pydatetime_date_get_tzinfo": [20, 470, 481], "pydatetime_time_get_hour": 20, "pydatetime_time_get_minut": 20, "pydatetime_time_get_second": 20, "pydatetime_time_get_microsecond": 20, "pydatetime_time_get_fold": 20, "pydatetime_time_get_tzinfo": [20, 470, 481], "delta": [20, 68, 107, 139, 181, 189, 252, 268, 361, 386, 462, 464, 467, 477, 479, 481], "pydatetime_delta_get_day": 20, "999999999": [20, 181], "pydatetime_delta_get_second": 20, "86399": [20, 181], "pydatetime_delta_get_microsecond": 20, "db": [20, 68, 93, 173, 182, 223, 252, 259, 279, 296, 328, 449, 454, 465, 466, 468, 471, 481], "pydatetime_fromtimestamp": 20, "fromtimestamp": [20, 101, 181, 188, 338, 472, 478, 481], "pydate_fromtimestamp": [20, 481], "pyproperty_typ": [21, 57, 93], "pydescr_newgetset": [21, 57], "pygetsetdef": [21, 57, 58, 63, 75, 76, 99, 253, 383, 478, 481], "getset": [21, 63, 253], "pydescr_newmemb": [21, 57], "pymemberdef": [21, 57, 58, 61, 63, 75, 76, 93, 253, 383, 467, 472, 478, 481], "meth": [21, 44, 63, 78, 85, 87, 110, 384, 461, 464, 471, 474], "pydescr_newmethod": [21, 57, 481], "pymethoddef": [21, 35, 45, 57, 58, 62, 63, 72, 73, 75, 76, 99, 463, 481], "pydescr_newwrapp": 21, "wrapperbas": [21, 478, 481], "pydescr_newclassmethod": [21, 57], "pydescr_isdata": [21, 481], "descr": [21, 93, 174], "pywrapper_new": [21, 57], "pydictobject": [22, 55, 472, 481], "pydict_typ": [22, 57], "pydict_checkexact": 22, "pydict_new": [22, 57], "pydictproxy_new": [22, 57], "mappingproxytyp": [22, 179, 223, 342, 383, 425, 470, 472, 474, 481], "enforc": [22, 94, 184, 194, 203, 223, 241, 291, 320, 340, 342, 382, 384, 408, 409, 411, 425, 428, 434, 453, 461, 462, 465, 468, 473, 474, 481], "behavior": [22, 23, 27, 28, 33, 34, 42, 58, 61, 63, 68, 73, 79, 85, 92, 93, 94, 99, 100, 101, 117, 118, 124, 130, 137, 147, 155, 165, 171, 174, 175, 179, 181, 184, 188, 191, 192, 194, 199, 201, 203, 204, 206, 211, 213, 216, 223, 232, 240, 243, 245, 248, 253, 255, 259, 260, 264, 265, 267, 268, 269, 273, 274, 281, 286, 290, 291, 294, 297, 300, 307, 312, 326, 329, 330, 331, 332, 333, 335, 336, 339, 341, 342, 343, 345, 346, 350, 356, 360, 363, 364, 367, 372, 374, 376, 379, 381, 384, 386, 392, 393, 398, 408, 423, 425, 426, 427, 428, 430, 433, 434, 453, 454, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 480, 481, 482], "modif": [22, 27, 34, 61, 64, 66, 73, 94, 101, 110, 167, 188, 214, 232, 243, 246, 248, 264, 267, 269, 276, 281, 290, 291, 322, 330, 332, 336, 340, 350, 356, 360, 374, 408, 411, 420, 424, 426, 459, 465, 467, 473, 474, 475, 476, 477, 479, 481], "pydict_clear": [22, 57], "pydict_contain": [22, 57, 464], "pydict_copi": [22, 57], "pydict_setitem": [22, 57, 63, 73, 481], "insert": [22, 31, 33, 34, 38, 60, 68, 72, 73, 80, 95, 107, 110, 118, 119, 124, 141, 144, 145, 149, 158, 159, 165, 175, 179, 188, 191, 206, 223, 224, 245, 248, 256, 265, 268, 279, 282, 290, 295, 297, 305, 318, 338, 342, 343, 345, 350, 374, 383, 398, 400, 408, 411, 421, 426, 428, 430, 434, 438, 440, 453, 458, 460, 463, 465, 466, 467, 469, 472, 474, 475, 476, 477, 478, 479, 481], "hashabl": [22, 49, 63, 85, 87, 114, 159, 181, 188, 219, 223, 224, 230, 253, 257, 294, 316, 342, 384, 400, 426, 428, 463, 464, 466, 467, 471, 472, 474, 476, 480, 481], "steal": [22, 23, 33, 35, 45, 49, 54, 60, 481], "pydict_setitemstr": [22, 57, 481], "pydict_delitem": [22, 57], "pydict_delitemstr": [22, 57], "pydict_getitem": [22, 57, 73, 470, 481], "__hash__": [22, 63, 78, 80, 85, 87, 159, 179, 209, 223, 287, 342, 387, 426, 453, 465, 466, 468, 474, 478, 481], "__eq__": [22, 63, 78, 80, 85, 87, 145, 159, 166, 179, 193, 200, 209, 224, 242, 253, 289, 342, 383, 387, 388, 417, 426, 461, 466, 467, 468, 471, 473, 478, 481], "pydict_getitemwitherror": [22, 57, 481], "gil": [22, 23, 42, 45, 51, 59, 63, 68, 76, 84, 87, 99, 137, 164, 174, 186, 233, 248, 466, 467, 470, 473, 475, 477, 480, 481], "held": [22, 31, 33, 42, 59, 84, 99, 165, 245, 256, 266, 267, 276, 281, 342, 350, 363, 386, 400, 424, 426, 460, 465, 466, 467, 477, 481], "histor": [22, 41, 63, 73, 75, 95, 99, 165, 175, 181, 211, 246, 269, 293, 364, 381, 412, 420, 434, 459, 467, 472, 475, 477, 481], "reason": [22, 23, 33, 42, 46, 47, 49, 51, 63, 73, 76, 84, 85, 92, 94, 95, 100, 101, 103, 104, 107, 108, 113, 137, 139, 149, 152, 153, 175, 179, 181, 184, 189, 191, 192, 194, 211, 214, 228, 239, 240, 243, 245, 246, 248, 256, 265, 266, 267, 268, 269, 290, 291, 297, 303, 306, 312, 330, 332, 335, 339, 342, 350, 356, 357, 360, 362, 364, 367, 382, 384, 386, 387, 388, 391, 393, 423, 424, 425, 426, 430, 462, 463, 465, 468, 473, 474, 475, 476, 481], "suppress": [22, 33, 34, 68, 92, 100, 118, 137, 150, 155, 161, 167, 191, 286, 290, 294, 309, 313, 332, 333, 342, 346, 350, 360, 425, 426, 434, 453, 459, 461, 463, 465, 466, 467, 468, 469, 475, 476, 478, 479, 481, 482], "wasn": [22, 31, 45, 76, 101, 118, 267, 290, 354, 386, 421, 460, 462, 463, 465, 466, 477, 481], "pydict_getitemstr": [22, 57, 73], "pyunicode_fromstr": [22, 35, 57, 64, 72, 76], "pydict_setdefault": [22, 481], "defaultobj": 22, "setdefault": [22, 78, 158, 159, 182, 242, 342, 405, 426, 460, 463, 473, 474, 481], "hash": [22, 30, 33, 34, 49, 63, 64, 68, 75, 78, 84, 85, 87, 144, 159, 161, 165, 172, 179, 182, 221, 223, 235, 248, 249, 252, 268, 287, 296, 309, 335, 350, 383, 387, 396, 400, 424, 426, 428, 430, 433, 447, 448, 453, 454, 462, 463, 465, 466, 467, 470, 471, 473, 474, 477, 480, 481], "pydict_item": [22, 57], "pylistobject": [22, 38, 54, 76], "pydict_key": [22, 57], "pydict_valu": [22, 57], "pydict_s": [22, 57], "pydict_next": [22, 57], "ppos": 22, "pkey": 22, "pvalu": [22, 23, 72], "spars": [22, 291, 356, 481], "pos": [22, 60, 115, 139, 151, 184, 253, 260, 276, 289, 291, 298, 317, 318, 347, 374, 382, 399, 463, 467, 476], "someth": [22, 33, 36, 73, 75, 84, 85, 92, 93, 95, 98, 99, 100, 101, 103, 104, 105, 118, 120, 130, 137, 142, 149, 167, 174, 199, 211, 223, 226, 245, 248, 249, 251, 253, 259, 260, 265, 266, 281, 290, 291, 297, 306, 312, 320, 336, 338, 339, 353, 356, 360, 363, 367, 384, 386, 387, 388, 393, 400, 408, 411, 417, 423, 426, 429, 430, 434, 439, 447, 460, 461, 462, 463, 464, 465, 466, 467, 470, 472, 473, 480, 481], "interest": [22, 63, 68, 72, 73, 75, 77, 84, 85, 93, 94, 95, 100, 101, 104, 107, 118, 149, 151, 152, 165, 181, 188, 191, 192, 198, 205, 213, 214, 245, 259, 265, 269, 271, 274, 290, 295, 306, 312, 317, 326, 351, 363, 384, 386, 387, 388, 398, 413, 426, 432, 434, 460, 461, 462, 463, 465, 467, 481], "pylong_aslong": [22, 35, 39, 57, 72, 479], "pylong_fromlong": [22, 35, 39, 45, 57, 72, 73, 75, 76, 481], "pydict_merg": [22, 57], "overrid": [22, 33, 34, 49, 61, 63, 64, 66, 68, 85, 93, 100, 101, 108, 114, 118, 124, 130, 133, 134, 142, 153, 155, 159, 165, 169, 173, 174, 179, 181, 187, 191, 194, 200, 201, 203, 206, 207, 211, 216, 223, 224, 228, 241, 242, 243, 246, 248, 253, 256, 265, 267, 270, 281, 285, 290, 291, 294, 297, 309, 312, 313, 317, 329, 332, 335, 336, 342, 343, 346, 350, 352, 360, 363, 371, 374, 382, 384, 386, 388, 393, 400, 411, 415, 420, 426, 427, 428, 430, 438, 453, 454, 459, 460, 463, 466, 467, 468, 469, 474, 475, 477, 478, 479, 481], "pymapping_key": [22, 40, 57, 478, 481], "pyobject_getitem": [22, 35, 40, 49, 57, 63], "replac": [22, 24, 31, 33, 34, 42, 56, 59, 60, 61, 63, 64, 68, 71, 73, 84, 85, 89, 92, 93, 94, 95, 99, 101, 107, 110, 118, 124, 130, 137, 149, 155, 156, 162, 171, 174, 175, 177, 179, 181, 188, 189, 191, 194, 195, 200, 203, 204, 207, 209, 211, 212, 216, 223, 227, 233, 248, 249, 250, 253, 256, 264, 265, 266, 269, 270, 274, 277, 281, 290, 291, 294, 295, 305, 306, 313, 316, 317, 318, 319, 329, 330, 331, 338, 339, 342, 343, 350, 356, 360, 362, 363, 364, 366, 367, 369, 373, 374, 376, 380, 382, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 408, 411, 413, 415, 419, 420, 423, 426, 428, 431, 433, 434, 447, 449, 453, 454, 459, 460, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pydict_upd": [22, 57], "updat": [22, 33, 34, 42, 45, 59, 63, 68, 75, 76, 84, 85, 92, 93, 95, 101, 107, 115, 118, 124, 131, 133, 138, 158, 159, 161, 167, 175, 177, 181, 187, 189, 191, 194, 203, 205, 211, 223, 224, 233, 234, 235, 242, 245, 246, 248, 253, 256, 263, 269, 276, 279, 281, 286, 290, 291, 297, 300, 313, 322, 328, 335, 338, 342, 346, 353, 356, 364, 367, 374, 378, 382, 383, 387, 392, 393, 405, 411, 419, 426, 430, 434, 438, 453, 459, 460, 461, 462, 463, 464, 465, 466, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481], "pydict_mergefromseq2": [22, 57], "seq2": [22, 95, 289, 460], "merg": [22, 68, 85, 87, 92, 93, 95, 100, 101, 175, 181, 191, 211, 234, 265, 267, 280, 290, 291, 342, 378, 384, 424, 450, 454, 459, 460, 463, 466, 467, 472, 476, 481], "duplic": [22, 68, 95, 110, 161, 165, 167, 184, 188, 189, 194, 203, 206, 209, 213, 253, 257, 265, 269, 291, 300, 335, 342, 360, 382, 384, 386, 420, 425, 426, 428, 429, 439, 440, 462, 464, 465, 466, 472, 473, 476, 478, 480, 481], "win": [22, 33, 68, 92, 101, 175, 177, 290, 316, 353, 386, 459, 469, 473, 481], "pydict_addwatch": [22, 472], "pydict_watchcallback": 22, "futur": [22, 33, 61, 63, 68, 77, 84, 87, 99, 100, 103, 104, 110, 112, 118, 121, 123, 125, 128, 130, 131, 136, 137, 153, 157, 162, 163, 165, 181, 191, 195, 201, 203, 205, 206, 211, 223, 232, 243, 245, 248, 250, 252, 253, 255, 265, 266, 281, 290, 291, 306, 313, 317, 323, 326, 331, 335, 338, 339, 350, 351, 360, 363, 364, 383, 384, 386, 393, 398, 411, 426, 428, 433, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 474, 475, 479, 481, 482], "pydict_watch": [22, 472], "pydict_clearwatch": 22, "mark": [22, 23, 28, 34, 58, 61, 64, 75, 84, 93, 97, 101, 103, 104, 107, 110, 115, 118, 128, 131, 137, 142, 156, 164, 165, 175, 179, 188, 189, 191, 203, 228, 234, 238, 245, 253, 260, 267, 269, 295, 298, 303, 312, 326, 335, 338, 342, 346, 357, 360, 367, 378, 384, 386, 400, 408, 413, 424, 426, 428, 429, 433, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "watch": [22, 59, 61, 68, 99, 100, 131, 135, 184, 259, 265, 267, 326, 367, 449], "grant": [22, 61, 93, 104, 424, 460, 461, 465], "pydict_unwatch": 22, "pydict_watchev": 22, "pydict_event_ad": 22, "pydict_event_modifi": 22, "pydict_event_delet": 22, "pydict_event_clon": 22, "pydict_event_clear": 22, "pydict_event_dealloc": 22, "new_valu": [22, 27, 360], "delet": [22, 49, 54, 58, 59, 63, 64, 68, 73, 75, 76, 84, 93, 97, 101, 104, 108, 114, 120, 142, 158, 165, 175, 176, 177, 179, 182, 188, 189, 194, 198, 203, 204, 211, 216, 221, 223, 224, 239, 245, 246, 248, 267, 269, 281, 291, 294, 295, 303, 328, 330, 332, 338, 340, 342, 350, 358, 360, 363, 367, 374, 382, 387, 393, 397, 398, 400, 403, 425, 426, 430, 433, 434, 436, 457, 459, 462, 463, 465, 466, 467, 468, 469, 473, 475, 478, 479, 480, 481, 482], "maintain": [22, 33, 73, 84, 92, 94, 99, 101, 118, 145, 156, 165, 167, 174, 179, 184, 194, 205, 206, 211, 223, 246, 248, 249, 253, 264, 290, 305, 306, 323, 336, 345, 350, 353, 364, 373, 386, 398, 400, 401, 410, 423, 428, 430, 432, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 474, 475, 476, 478, 479, 480, 481], "doing": [22, 27, 33, 36, 63, 84, 85, 92, 95, 98, 100, 101, 103, 104, 107, 131, 149, 156, 157, 167, 174, 184, 192, 214, 223, 233, 241, 248, 256, 263, 267, 276, 277, 281, 290, 291, 293, 297, 303, 317, 326, 331, 336, 339, 340, 343, 346, 360, 363, 367, 382, 384, 386, 388, 393, 411, 419, 426, 427, 462, 465, 466, 467, 468, 472, 473, 475, 476, 477, 478, 481], "unpredict": [22, 27, 211, 269, 291, 411, 414, 426, 453, 462], "infinit": [22, 27, 45, 61, 68, 85, 95, 104, 136, 156, 184, 246, 259, 281, 283, 291, 294, 297, 317, 318, 342, 350, 386, 426, 460, 464, 466, 474, 481], "recurs": [22, 27, 32, 33, 61, 68, 73, 85, 95, 110, 140, 149, 161, 165, 168, 179, 188, 189, 191, 194, 198, 203, 211, 214, 224, 229, 248, 250, 260, 281, 291, 294, 295, 297, 300, 305, 306, 311, 319, 328, 330, 340, 350, 356, 363, 382, 384, 386, 387, 393, 410, 411, 420, 426, 427, 430, 434, 438, 460, 461, 462, 463, 464, 466, 472, 473, 475, 476, 477, 478, 479, 481], "trigger": [22, 33, 34, 42, 63, 68, 76, 93, 95, 103, 137, 167, 175, 184, 187, 194, 203, 211, 224, 248, 253, 281, 290, 291, 331, 332, 338, 342, 350, 351, 367, 369, 386, 387, 392, 398, 417, 426, 453, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 477, 478, 481], "notifi": [22, 59, 100, 103, 132, 136, 137, 245, 246, 281, 351, 363, 369, 400, 481], "chapter": [23, 42, 50, 66, 72, 73, 75, 76, 77, 84, 91, 95, 178, 185, 211, 215, 220, 222, 244, 245, 258, 278, 288, 296, 313, 350, 428, 432, 433, 481], "let": [23, 42, 66, 72, 73, 76, 79, 84, 85, 92, 93, 94, 95, 100, 101, 103, 104, 107, 108, 118, 124, 137, 153, 159, 165, 167, 174, 188, 198, 224, 228, 243, 249, 260, 264, 265, 266, 267, 290, 295, 305, 317, 328, 329, 338, 339, 367, 374, 382, 387, 411, 428, 430, 459, 460, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 475, 478, 481], "understand": [23, 42, 68, 73, 75, 76, 84, 93, 100, 101, 103, 104, 107, 118, 152, 181, 191, 205, 228, 240, 241, 260, 286, 305, 306, 317, 338, 343, 346, 366, 374, 384, 414, 420, 425, 432, 460, 461, 462, 463, 465, 466, 467, 468, 472, 477, 481], "basic": [23, 33, 63, 64, 68, 73, 74, 75, 77, 84, 85, 92, 93, 95, 98, 100, 101, 103, 110, 118, 133, 142, 153, 156, 158, 165, 167, 175, 181, 182, 185, 187, 188, 228, 232, 243, 245, 248, 250, 252, 253, 254, 256, 260, 265, 267, 281, 290, 302, 305, 306, 320, 335, 336, 338, 339, 342, 346, 356, 360, 363, 366, 367, 372, 374, 379, 382, 384, 386, 387, 388, 393, 404, 410, 411, 412, 413, 417, 428, 434, 454, 460, 462, 463, 465, 466, 467, 469, 473, 474, 475, 476, 479, 481], "posix": [23, 34, 68, 101, 105, 109, 113, 131, 135, 148, 164, 174, 181, 207, 211, 252, 255, 264, 281, 282, 284, 290, 291, 292, 294, 299, 307, 314, 320, 326, 329, 330, 335, 336, 346, 350, 353, 356, 358, 363, 364, 389, 397, 419, 423, 424, 453, 454, 460, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 478, 479, 481], "global": [23, 27, 31, 32, 34, 45, 51, 53, 63, 66, 68, 73, 76, 79, 85, 87, 94, 95, 97, 108, 113, 118, 120, 130, 133, 138, 142, 149, 158, 164, 167, 174, 175, 180, 189, 191, 193, 211, 216, 221, 223, 225, 228, 240, 245, 246, 248, 253, 263, 267, 274, 281, 290, 291, 295, 296, 303, 306, 313, 318, 322, 332, 333, 335, 342, 343, 349, 350, 352, 353, 356, 357, 360, 363, 365, 367, 378, 382, 384, 386, 388, 393, 398, 400, 411, 418, 425, 426, 427, 429, 430, 431, 433, 438, 439, 448, 453, 457, 459, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "suppos": [23, 60, 63, 64, 73, 77, 85, 98, 101, 179, 184, 191, 194, 197, 246, 307, 317, 332, 335, 338, 339, 343, 356, 374, 388, 400, 465, 466, 467, 473, 478, 479, 481], "pyarg_": 23, "concret": [23, 33, 68, 75, 76, 94, 104, 120, 174, 181, 185, 195, 206, 217, 228, 248, 251, 252, 256, 266, 290, 327, 336, 342, 345, 350, 363, 386, 392, 408, 415, 423, 430, 462, 463, 466, 474, 475, 478, 480, 481], "traceback": [23, 34, 42, 66, 68, 73, 76, 79, 85, 89, 92, 93, 94, 95, 98, 99, 100, 101, 107, 112, 118, 123, 137, 138, 140, 149, 155, 158, 161, 165, 167, 174, 175, 183, 184, 186, 189, 191, 209, 211, 223, 245, 252, 253, 257, 263, 265, 266, 267, 281, 282, 294, 295, 297, 309, 313, 317, 336, 338, 342, 343, 345, 346, 348, 350, 363, 365, 382, 383, 385, 386, 387, 388, 405, 425, 427, 428, 434, 438, 439, 440, 441, 444, 447, 450, 453, 454, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 478, 479, 480, 481], "although": [23, 25, 27, 42, 63, 72, 85, 94, 100, 101, 137, 156, 174, 179, 181, 188, 191, 194, 195, 198, 203, 204, 246, 253, 256, 259, 265, 269, 279, 281, 290, 291, 293, 297, 305, 317, 343, 350, 353, 356, 364, 373, 410, 412, 413, 414, 423, 425, 426, 428, 430, 432, 434, 453, 459, 460, 472, 475, 476, 477, 481], "forbidden": [23, 42, 94, 108, 137, 239, 297, 342, 363, 466, 476, 481], "clean": [23, 33, 68, 73, 75, 99, 101, 104, 118, 120, 130, 137, 138, 156, 164, 189, 191, 199, 203, 206, 210, 211, 245, 250, 253, 269, 280, 281, 282, 285, 313, 336, 338, 341, 356, 360, 393, 397, 400, 414, 426, 428, 454, 460, 461, 462, 464, 465, 466, 467, 468, 472, 473, 474, 479, 480, 481], "prepar": [23, 59, 66, 68, 101, 107, 108, 155, 181, 189, 223, 228, 230, 233, 242, 252, 267, 291, 297, 335, 346, 350, 360, 361, 382, 383, 386, 393, 411, 412, 415, 420, 424, 466, 468, 475, 476, 478, 480, 481], "propag": [23, 33, 36, 95, 100, 101, 123, 137, 155, 168, 211, 248, 265, 266, 281, 294, 295, 300, 323, 330, 331, 338, 342, 346, 350, 364, 379, 386, 393, 400, 425, 426, 428, 430, 441, 463, 465, 477, 481], "intend": [23, 31, 33, 34, 42, 45, 61, 64, 72, 73, 75, 84, 95, 100, 101, 103, 104, 108, 113, 124, 137, 149, 156, 167, 182, 189, 191, 199, 206, 211, 224, 242, 243, 245, 249, 253, 257, 265, 267, 268, 269, 273, 286, 291, 297, 300, 305, 332, 335, 339, 342, 343, 345, 346, 350, 351, 356, 363, 374, 378, 382, 384, 386, 392, 393, 398, 409, 420, 423, 425, 426, 428, 432, 433, 434, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 472, 475, 476, 477, 478, 479, 481], "mysteri": [23, 73, 149, 332, 475], "sys": [23, 24, 28, 31, 33, 34, 35, 45, 59, 63, 64, 66, 68, 73, 79, 80, 85, 87, 88, 97, 99, 100, 101, 102, 103, 107, 110, 111, 112, 113, 116, 120, 131, 134, 135, 137, 138, 140, 142, 149, 150, 153, 155, 161, 167, 173, 174, 175, 184, 186, 188, 189, 191, 198, 208, 211, 212, 213, 214, 216, 221, 223, 225, 226, 227, 228, 232, 243, 245, 248, 249, 252, 253, 256, 259, 260, 263, 265, 266, 267, 273, 277, 278, 281, 290, 291, 293, 295, 297, 298, 300, 301, 305, 306, 307, 309, 310, 311, 313, 319, 322, 325, 326, 329, 330, 331, 332, 335, 336, 338, 340, 342, 345, 346, 353, 354, 356, 357, 359, 360, 363, 365, 367, 378, 379, 380, 383, 384, 386, 387, 388, 393, 397, 398, 400, 405, 411, 415, 418, 419, 420, 421, 425, 426, 428, 430, 434, 435, 436, 441, 444, 446, 448, 449, 450, 451, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 481, 482], "exc_info": [23, 33, 35, 73, 100, 101, 110, 142, 150, 189, 191, 265, 267, 330, 350, 356, 386, 403, 405, 425, 426, 448, 463, 465, 466, 468, 471, 476, 481], "former": [23, 31, 63, 75, 85, 118, 142, 157, 159, 174, 175, 181, 184, 223, 242, 248, 253, 265, 273, 281, 286, 306, 320, 330, 338, 364, 367, 373, 382, 384, 426, 428, 430, 469, 472, 473, 474, 477, 478, 479, 480, 481], "caught": [23, 99, 113, 118, 137, 150, 155, 211, 281, 291, 300, 303, 321, 330, 331, 335, 338, 350, 360, 364, 367, 386, 387, 412, 421, 425, 426, 434, 441, 461, 466, 468, 475, 479, 481], "stop": [23, 28, 34, 56, 68, 85, 94, 95, 100, 101, 103, 119, 128, 131, 135, 137, 142, 153, 157, 158, 159, 188, 189, 191, 195, 205, 211, 223, 225, 226, 233, 245, 253, 259, 265, 266, 267, 269, 281, 290, 291, 293, 294, 295, 298, 300, 306, 312, 316, 331, 336, 342, 346, 360, 363, 374, 380, 382, 383, 384, 386, 387, 388, 404, 405, 425, 426, 428, 439, 460, 461, 462, 463, 465, 466, 467, 468, 470, 472, 473, 476, 477, 478, 481], "pyerr_clear": [23, 35, 57, 73, 475], "pyerr_printex": [23, 57, 481], "set_sys_last_var": 23, "stderr": [23, 33, 34, 42, 59, 64, 68, 72, 73, 85, 100, 101, 112, 124, 128, 131, 135, 149, 155, 167, 188, 191, 212, 225, 227, 243, 245, 256, 265, 266, 267, 281, 290, 291, 309, 319, 331, 338, 342, 346, 350, 356, 360, 363, 365, 379, 384, 386, 397, 398, 405, 426, 448, 449, 450, 453, 459, 460, 464, 466, 467, 468, 473, 475, 476, 477, 478, 480, 481], "systemexit": [23, 66, 100, 113, 137, 138, 155, 166, 211, 245, 350, 363, 404, 427, 441, 448, 465, 466, 468, 477, 481], "exit": [23, 33, 34, 59, 66, 68, 72, 73, 84, 86, 89, 92, 95, 101, 112, 113, 116, 124, 130, 131, 133, 135, 136, 137, 149, 153, 155, 164, 166, 167, 173, 175, 184, 186, 187, 189, 191, 198, 211, 212, 216, 226, 245, 246, 250, 252, 259, 265, 267, 281, 290, 291, 295, 306, 307, 309, 313, 317, 326, 331, 332, 333, 335, 336, 338, 342, 346, 350, 351, 357, 360, 363, 376, 378, 382, 383, 386, 387, 388, 397, 398, 400, 401, 404, 405, 409, 418, 419, 420, 425, 426, 428, 436, 441, 446, 448, 449, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 476, 477, 478, 479, 480, 481], "fatal": [23, 33, 42, 59, 72, 73, 138, 212, 339, 356, 386, 441, 467, 468, 474, 477, 481], "last_exc": [23, 350, 379, 472, 481], "backward": [23, 24, 33, 59, 61, 64, 66, 80, 87, 100, 101, 118, 126, 142, 165, 175, 181, 189, 191, 192, 194, 203, 205, 206, 209, 211, 226, 243, 246, 248, 253, 265, 266, 269, 291, 293, 297, 300, 306, 312, 317, 320, 330, 335, 339, 342, 346, 360, 364, 379, 382, 384, 392, 393, 395, 417, 426, 428, 430, 433, 434, 438, 459, 460, 462, 463, 465, 466, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481], "last_typ": [23, 350, 448, 468, 472, 481], "last_valu": [23, 94, 209, 350, 379, 448, 472, 481], "last_traceback": [23, 295, 350, 426, 448, 472, 481], "pyerr_print": [23, 57, 68, 72, 73, 481], "unraisablehook": [23, 28, 113, 140, 338, 350, 360, 448, 479, 481], "util": [23, 31, 33, 59, 68, 93, 94, 95, 101, 116, 131, 149, 153, 156, 157, 161, 175, 180, 184, 185, 188, 189, 191, 192, 194, 198, 201, 203, 205, 206, 228, 239, 246, 249, 252, 254, 268, 271, 278, 283, 290, 309, 313, 320, 330, 340, 342, 344, 346, 363, 367, 382, 386, 389, 397, 409, 459, 460, 462, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481], "imposs": [23, 40, 54, 63, 85, 100, 156, 211, 266, 281, 291, 310, 360, 363, 384, 386, 408, 420, 434, 460, 461, 462, 463, 464, 466, 467, 472, 476, 481], "__del__": [23, 33, 52, 63, 68, 73, 84, 180, 225, 256, 281, 314, 338, 358, 360, 387, 426, 475, 481], "pyerr_displayexcept": [23, 57, 472, 481], "display": [23, 33, 34, 42, 68, 87, 89, 94, 97, 101, 107, 116, 118, 137, 149, 150, 153, 155, 158, 177, 183, 184, 186, 189, 191, 198, 201, 211, 212, 245, 252, 253, 257, 264, 265, 269, 279, 286, 291, 294, 295, 305, 309, 311, 317, 318, 319, 340, 342, 343, 344, 346, 350, 356, 362, 367, 371, 373, 374, 376, 378, 379, 382, 386, 393, 397, 398, 401, 419, 424, 426, 433, 434, 447, 453, 454, 459, 460, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "help": [23, 33, 45, 49, 58, 61, 66, 68, 75, 80, 84, 85, 86, 87, 89, 93, 94, 100, 101, 103, 104, 107, 108, 116, 120, 121, 148, 149, 150, 153, 156, 167, 174, 175, 185, 188, 189, 190, 191, 198, 220, 223, 224, 226, 228, 232, 233, 239, 242, 244, 248, 251, 252, 253, 259, 260, 279, 286, 291, 295, 306, 333, 335, 338, 342, 350, 360, 364, 365, 366, 367, 373, 376, 378, 384, 387, 392, 393, 396, 397, 403, 411, 419, 426, 430, 433, 446, 448, 449, 453, 454, 457, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "statement": [23, 47, 49, 54, 61, 63, 66, 68, 72, 73, 79, 85, 87, 95, 99, 101, 110, 111, 112, 113, 115, 118, 120, 124, 137, 142, 147, 149, 157, 162, 164, 174, 182, 183, 184, 186, 189, 191, 199, 211, 216, 223, 232, 240, 245, 246, 248, 250, 252, 253, 268, 269, 276, 279, 281, 286, 289, 290, 291, 293, 295, 310, 313, 317, 326, 333, 335, 336, 338, 339, 342, 346, 350, 352, 356, 357, 359, 360, 365, 376, 382, 384, 387, 388, 403, 408, 409, 410, 420, 424, 427, 428, 429, 430, 431, 433, 435, 437, 438, 444, 453, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482], "pyerr_setstr": [23, 35, 57, 73, 75, 76, 99, 467, 472, 481], "pyexc_runtimeerror": [23, 57, 75], "py_incref": [23, 35, 52, 57, 67, 73, 75, 76, 86, 87, 470, 471, 472, 479, 481], "decod": [23, 33, 34, 59, 64, 66, 68, 72, 73, 87, 101, 103, 107, 119, 124, 131, 134, 135, 139, 141, 143, 144, 174, 186, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 211, 223, 233, 242, 248, 256, 268, 283, 286, 291, 297, 302, 315, 335, 338, 339, 342, 345, 346, 350, 356, 357, 360, 375, 376, 392, 393, 395, 397, 417, 420, 426, 430, 433, 449, 453, 460, 462, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 480, 481], "pyerr_setobject": [23, 57, 73, 472, 481], "pyerr_format": [23, 57, 75, 467, 476, 481], "pyunicode_fromformat": [23, 57, 64, 75, 76, 470, 472, 474, 475, 476, 481], "pyerr_formatv": [23, 57, 476, 481], "pyerr_setnon": [23, 57], "shorthand": [23, 85, 98, 118, 141, 189, 191, 257, 300, 335, 362, 367, 379, 384, 398, 425, 441, 463, 464, 475], "pyerr_badargu": [23, 57], "pyexc_typeerror": [23, 57, 73, 75, 76], "illeg": [23, 47, 95, 107, 156, 194, 203, 210, 211, 291, 312, 331, 339, 342, 364, 374, 408, 420, 425, 426, 429, 433, 434, 461, 462, 464, 465, 467, 473, 478, 479], "pyerr_nomemori": [23, 42, 57, 73], "pyexc_memoryerror": [23, 57], "pyerr_setfromerrno": [23, 57, 73], "construct": [23, 54, 58, 59, 61, 62, 66, 72, 73, 75, 85, 93, 94, 95, 98, 99, 100, 101, 118, 124, 131, 135, 137, 147, 156, 159, 167, 174, 181, 184, 187, 189, 191, 192, 195, 199, 201, 206, 207, 211, 214, 218, 219, 232, 233, 241, 243, 248, 257, 259, 265, 266, 268, 279, 281, 290, 291, 294, 297, 305, 306, 312, 317, 318, 329, 332, 333, 335, 338, 339, 342, 345, 363, 367, 379, 382, 384, 386, 387, 388, 392, 397, 400, 409, 410, 411, 412, 417, 418, 420, 423, 425, 426, 427, 428, 433, 434, 449, 453, 459, 460, 461, 462, 464, 465, 467, 472, 473, 474, 476, 477, 478, 479, 480, 481], "gotten": [23, 149, 184, 281, 460, 481], "strerror": [23, 210, 211, 264, 291, 466, 481], "eintr": [23, 68, 210, 211, 281, 467, 481], "interrupt": [23, 33, 68, 101, 113, 117, 124, 137, 149, 175, 176, 184, 189, 210, 211, 245, 269, 281, 291, 326, 327, 331, 335, 336, 338, 346, 357, 363, 364, 386, 393, 404, 418, 424, 426, 439, 466, 467, 473, 476, 479, 480, 481], "pyerr_checksign": [23, 57, 472, 481], "pyerr_setfromerrnowithfilenameobject": [23, 57], "filenameobject": 23, "oserror": [23, 107, 124, 128, 131, 151, 174, 181, 186, 211, 213, 216, 221, 223, 228, 232, 241, 243, 248, 253, 256, 276, 280, 281, 286, 291, 292, 293, 294, 301, 304, 320, 326, 330, 331, 333, 335, 339, 346, 356, 357, 360, 364, 391, 393, 403, 421, 425, 441, 448, 467, 470, 474, 475, 479, 481], "filenameobject2": 23, "pyerr_setfromerrnowithfilenam": [23, 57, 481], "pyerr_setfromwindowserr": [23, 57], "ierr": 23, "windowserror": [23, 174, 211, 403, 474], "getlasterror": [23, 174, 481], "win32": [23, 64, 84, 86, 135, 174, 267, 281, 291, 335, 346, 350, 353, 403, 404, 459, 460, 466, 468, 473, 476, 481], "formatmessag": [23, 174, 211], "pyexc_windowserror": [23, 57], "pyerr_setexcfromwindowserr": [23, 57], "pyerr_setfromwindowserrwithfilenam": [23, 57, 481], "os": [23, 33, 34, 59, 64, 68, 73, 78, 85, 87, 92, 93, 95, 97, 100, 101, 107, 110, 113, 116, 118, 122, 123, 124, 130, 131, 135, 136, 137, 138, 140, 149, 158, 161, 162, 164, 165, 167, 168, 181, 185, 186, 187, 188, 191, 198, 206, 208, 210, 212, 213, 214, 217, 218, 223, 227, 228, 229, 232, 233, 241, 243, 245, 250, 252, 256, 264, 267, 270, 276, 280, 281, 284, 290, 297, 299, 300, 301, 304, 306, 307, 316, 318, 326, 327, 330, 331, 332, 333, 335, 338, 339, 340, 342, 350, 352, 353, 356, 358, 363, 364, 367, 371, 378, 380, 386, 387, 393, 397, 398, 401, 405, 419, 420, 423, 426, 436, 441, 449, 450, 453, 454, 459, 460, 462, 463, 464, 465, 468, 481, 482], "fsdecod": [23, 87, 291, 350, 473, 477, 481], "pyerr_setexcfromwindowserrwithfilenameobject": [23, 57], "filename2": [23, 211], "pyerr_setexcfromwindowserrwithfilenam": [23, 57, 481], "pyerr_setimporterror": [23, 57, 475, 477], "msg": [23, 84, 101, 105, 120, 127, 137, 149, 167, 174, 188, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 211, 226, 233, 235, 240, 248, 260, 264, 265, 267, 269, 281, 284, 317, 333, 335, 342, 357, 360, 379, 386, 391, 393, 406, 412, 448, 463, 464, 465, 473, 474, 475, 476, 477, 481], "importerror": [23, 101, 103, 211, 248, 266, 277, 281, 297, 300, 332, 339, 350, 360, 386, 408, 421, 430, 434, 448, 454, 461, 463, 466, 472, 474, 475, 477, 478, 480, 481], "pyerr_setimporterrorsubclass": [23, 57, 477], "much": [23, 55, 61, 63, 67, 73, 75, 76, 84, 85, 92, 95, 101, 103, 104, 107, 108, 118, 124, 135, 149, 152, 156, 165, 174, 184, 191, 192, 201, 205, 223, 253, 259, 267, 268, 269, 273, 281, 290, 291, 293, 297, 306, 317, 328, 335, 346, 353, 367, 374, 380, 382, 386, 387, 388, 408, 409, 417, 425, 430, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 476, 477, 479, 480, 481], "subclass": [23, 28, 43, 47, 49, 54, 58, 59, 61, 63, 68, 74, 75, 87, 98, 99, 100, 104, 108, 114, 118, 124, 130, 131, 136, 137, 142, 153, 155, 156, 159, 165, 173, 174, 179, 180, 181, 184, 185, 187, 191, 197, 201, 203, 204, 206, 211, 214, 216, 221, 223, 224, 240, 243, 246, 248, 249, 251, 253, 254, 256, 257, 260, 265, 266, 267, 269, 281, 290, 291, 294, 297, 303, 305, 316, 317, 328, 329, 330, 332, 333, 335, 336, 338, 339, 342, 343, 346, 350, 356, 360, 363, 367, 373, 374, 382, 383, 384, 386, 387, 392, 393, 395, 397, 398, 400, 408, 410, 411, 412, 413, 415, 417, 421, 423, 425, 427, 428, 434, 438, 441, 450, 453, 460, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pyerr_syntaxlocationobject": [23, 481], "lineno": [23, 97, 120, 142, 165, 186, 189, 191, 211, 216, 253, 260, 263, 265, 284, 295, 297, 306, 310, 312, 317, 329, 360, 379, 380, 386, 398, 426, 429, 453, 470, 476, 477, 479, 481], "col_offset": [23, 120, 189, 479, 481], "syntaxerror": [23, 66, 68, 79, 104, 120, 155, 157, 166, 191, 211, 223, 245, 317, 360, 376, 379, 384, 425, 427, 429, 433, 434, 440, 441, 444, 447, 448, 460, 461, 462, 471, 472, 473, 475, 476, 477, 478, 481], "subsystem": [23, 95, 101, 248, 346, 367, 459, 463, 465, 467, 479, 481], "think": [23, 60, 64, 75, 85, 95, 99, 101, 104, 107, 191, 199, 223, 250, 259, 265, 290, 297, 384, 388, 426, 428, 430, 462, 465, 466], "pyerr_syntaxlocationex": [23, 57, 481], "pyerr_syntaxloc": [23, 57], "omit": [23, 60, 68, 75, 101, 102, 104, 115, 118, 124, 151, 165, 174, 175, 181, 188, 191, 198, 199, 200, 202, 211, 223, 228, 232, 243, 245, 246, 250, 256, 257, 263, 264, 269, 274, 276, 281, 286, 290, 291, 295, 297, 303, 312, 317, 318, 326, 329, 330, 332, 333, 335, 338, 342, 343, 356, 363, 374, 379, 382, 384, 386, 398, 409, 411, 412, 419, 424, 425, 426, 428, 429, 433, 434, 453, 459, 463, 464, 465, 467, 468, 474, 475, 477, 478, 481], "pyerr_badinternalcal": [23, 57], "pyexc_systemerror": [23, 57], "mirror": [23, 108, 221, 265, 266, 267, 367, 375, 385, 413, 453, 464, 481], "problem": [23, 25, 33, 59, 63, 68, 73, 76, 84, 85, 92, 93, 95, 99, 100, 101, 103, 107, 124, 139, 150, 152, 156, 157, 165, 167, 181, 184, 188, 191, 194, 197, 201, 203, 205, 228, 243, 245, 248, 260, 264, 265, 266, 281, 290, 291, 297, 306, 312, 331, 335, 338, 342, 345, 356, 360, 362, 384, 387, 388, 393, 400, 408, 411, 425, 433, 441, 442, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 478, 479, 481], "machineri": [23, 45, 63, 68, 73, 87, 93, 101, 156, 207, 223, 249, 253, 266, 278, 300, 339, 350, 383, 400, 404, 421, 426, 430, 453, 459, 461, 462, 464, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481], "nor": [23, 33, 34, 63, 75, 76, 84, 89, 94, 98, 108, 131, 141, 142, 156, 186, 189, 240, 241, 265, 268, 273, 281, 290, 291, 294, 295, 297, 300, 317, 328, 336, 338, 339, 342, 350, 351, 374, 378, 384, 386, 401, 423, 424, 426, 428, 453, 454, 472, 473, 475, 477, 478, 481], "intent": [23, 31, 72, 73, 101, 179, 181, 194, 203, 245, 286, 291, 350, 384, 386, 387, 405, 417, 424, 425, 426, 463, 464, 466, 468, 474, 475, 481], "pyerr_warnex": [23, 57, 398, 465], "stack_level": 23, "forth": [23, 85, 92, 104, 158, 291, 317, 326, 342, 426, 460, 462, 463, 465], "pyexc_warn": [23, 57], "pyexc_except": [23, 57], "pyexc_runtimewarn": [23, 57], "document": [23, 24, 28, 42, 45, 51, 55, 58, 59, 61, 63, 64, 68, 71, 72, 73, 75, 76, 77, 79, 85, 92, 93, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 113, 118, 124, 126, 131, 135, 137, 142, 149, 153, 165, 167, 174, 175, 179, 181, 185, 188, 191, 192, 193, 194, 196, 200, 201, 203, 205, 206, 211, 218, 219, 223, 224, 228, 233, 239, 241, 245, 246, 248, 249, 252, 253, 254, 257, 260, 264, 265, 266, 267, 269, 270, 271, 279, 280, 281, 283, 288, 290, 291, 293, 295, 302, 305, 312, 320, 328, 329, 333, 335, 336, 338, 339, 340, 342, 346, 350, 352, 356, 359, 360, 362, 363, 364, 367, 373, 374, 382, 383, 384, 392, 393, 397, 398, 400, 401, 403, 409, 410, 412, 413, 414, 415, 417, 420, 421, 423, 424, 425, 426, 428, 430, 432, 433, 434, 443, 444, 454, 457, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 472, 473, 476, 477, 478, 480, 482], "command": [23, 33, 34, 35, 66, 68, 72, 73, 77, 79, 85, 100, 101, 102, 103, 107, 110, 116, 117, 124, 135, 140, 149, 155, 162, 175, 183, 185, 186, 191, 204, 212, 220, 221, 223, 228, 232, 243, 245, 246, 249, 252, 253, 260, 262, 266, 270, 281, 286, 293, 294, 299, 303, 306, 307, 311, 322, 329, 330, 332, 333, 338, 339, 342, 348, 350, 352, 357, 360, 361, 367, 371, 373, 374, 380, 382, 398, 401, 405, 411, 418, 419, 426, 427, 434, 446, 449, 453, 454, 456, 457, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 474, 476, 478, 479, 480, 481, 482], "pyerr_warnexplicitobject": 23, "straightforward": [23, 73, 84, 85, 99, 101, 107, 156, 165, 174, 257, 266, 290, 326, 335, 382, 462, 463, 466, 473, 474, 481], "warn_explicit": [23, 398, 477, 481], "pyerr_warnexplicit": [23, 57, 481], "pyerr_warnformat": [23, 57], "pyerr_resourcewarn": [23, 57, 477, 481], "resourcewarn": [23, 68, 123, 185, 211, 225, 291, 346, 360, 386, 398, 448, 473, 477, 481], "warningmessag": [23, 477, 481], "pyerr_set": 23, "pyerr_restor": [23, 57, 63, 75, 472, 481], "specif": [23, 34, 35, 42, 45, 49, 51, 58, 60, 61, 63, 66, 67, 68, 73, 76, 77, 85, 93, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 113, 118, 124, 130, 131, 143, 149, 151, 152, 153, 159, 165, 167, 174, 175, 179, 181, 182, 184, 191, 192, 193, 194, 200, 201, 203, 204, 206, 210, 211, 213, 219, 220, 223, 224, 226, 228, 233, 238, 240, 241, 242, 243, 245, 248, 249, 250, 251, 252, 253, 256, 257, 259, 260, 264, 265, 266, 267, 269, 273, 279, 281, 286, 291, 293, 294, 295, 297, 306, 312, 313, 319, 320, 326, 327, 329, 330, 333, 335, 336, 338, 339, 340, 342, 345, 350, 351, 352, 353, 356, 357, 360, 361, 362, 363, 364, 366, 367, 372, 375, 383, 384, 385, 386, 387, 388, 392, 393, 397, 398, 400, 402, 405, 408, 409, 411, 415, 417, 420, 421, 423, 424, 425, 426, 430, 432, 433, 434, 444, 453, 459, 460, 461, 462, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481], "pyerr_exceptionmatch": [23, 35, 57], "shown": [23, 42, 73, 77, 92, 94, 99, 100, 101, 103, 108, 118, 167, 179, 184, 186, 188, 189, 191, 201, 211, 212, 245, 265, 266, 290, 295, 306, 311, 317, 323, 346, 364, 373, 374, 379, 382, 386, 387, 392, 398, 400, 426, 459, 466, 476, 477, 478, 479, 480, 481], "comparison": [23, 49, 63, 64, 68, 74, 95, 103, 107, 110, 138, 152, 158, 159, 171, 174, 179, 181, 184, 188, 189, 191, 217, 218, 223, 224, 252, 253, 254, 264, 273, 281, 289, 296, 342, 344, 350, 360, 384, 386, 387, 388, 403, 411, 417, 426, 429, 431, 433, 440, 447, 453, 460, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pyerr_givenexceptionmatch": [23, 57], "violat": [23, 42, 61, 63, 94, 174, 181, 186, 201, 206, 213, 246, 297, 303, 339, 342, 426, 477, 481], "subtupl": 23, "search": [23, 31, 33, 34, 35, 59, 64, 68, 75, 84, 85, 93, 99, 100, 107, 139, 145, 149, 156, 158, 161, 174, 191, 194, 214, 223, 228, 246, 248, 252, 263, 264, 265, 266, 268, 276, 277, 278, 286, 291, 294, 295, 297, 300, 306, 309, 310, 311, 329, 330, 332, 338, 342, 346, 350, 353, 361, 366, 367, 369, 373, 382, 386, 393, 394, 401, 408, 410, 411, 413, 418, 420, 421, 423, 425, 426, 427, 428, 431, 434, 448, 450, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 476, 477, 478, 479, 480, 481], "pyerr_getraisedexcept": [23, 57, 472, 481], "catch": [23, 42, 68, 85, 92, 95, 101, 103, 107, 108, 118, 137, 165, 191, 211, 242, 253, 265, 290, 291, 313, 320, 329, 331, 338, 346, 360, 386, 393, 406, 426, 428, 460, 463, 465, 466, 467, 468, 472, 473, 474, 475, 477, 480, 481], "temporarili": [23, 68, 73, 101, 108, 167, 184, 191, 228, 248, 264, 265, 313, 330, 342, 346, 360, 374, 380, 386, 387, 388, 425, 459, 466, 472, 477, 478, 481], "pyerr_setraisedexcept": [23, 57, 472, 481], "pyerr_gethandledexcept": [23, 57, 471, 481], "pyerr_fetch": [23, 57, 63, 75, 472, 475, 481], "ptraceback": 23, "invalid": [23, 28, 34, 59, 61, 63, 64, 68, 73, 79, 85, 87, 89, 93, 94, 98, 99, 100, 104, 107, 108, 113, 116, 124, 144, 155, 157, 158, 161, 174, 181, 184, 194, 197, 199, 201, 203, 206, 207, 209, 210, 211, 214, 224, 228, 232, 240, 242, 245, 248, 253, 256, 264, 266, 269, 273, 281, 290, 291, 293, 297, 307, 309, 317, 320, 326, 327, 331, 335, 338, 339, 342, 343, 346, 356, 360, 363, 364, 374, 376, 384, 386, 392, 398, 400, 403, 408, 417, 423, 425, 426, 429, 434, 439, 441, 447, 453, 460, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481], "rule": [23, 28, 33, 61, 63, 68, 85, 93, 94, 95, 99, 101, 103, 104, 107, 118, 149, 152, 159, 174, 176, 179, 181, 184, 188, 192, 194, 200, 201, 203, 205, 206, 207, 219, 220, 223, 241, 242, 245, 257, 264, 273, 290, 294, 317, 342, 343, 345, 346, 363, 364, 373, 384, 387, 388, 392, 398, 409, 413, 425, 426, 427, 428, 429, 430, 432, 433, 434, 460, 461, 463, 465, 466, 467, 468, 472, 473, 474, 481], "away": [23, 27, 33, 76, 85, 95, 100, 118, 175, 181, 184, 191, 211, 245, 248, 253, 273, 281, 290, 291, 306, 317, 450, 462, 463, 468, 475, 476, 481], "pyerr_normalizeexcept": [23, 57, 472, 481], "tb": [23, 101, 189, 211, 245, 379, 380, 383, 388, 426, 465, 466, 472, 475, 481], "avoid": [23, 33, 34, 42, 61, 63, 68, 72, 73, 75, 76, 85, 92, 94, 95, 100, 103, 104, 107, 118, 124, 130, 131, 135, 136, 137, 147, 156, 158, 165, 167, 174, 175, 181, 184, 211, 213, 223, 240, 243, 246, 253, 257, 263, 264, 266, 267, 269, 273, 276, 281, 287, 290, 291, 297, 312, 317, 319, 330, 331, 335, 338, 340, 342, 346, 350, 356, 360, 362, 363, 364, 367, 373, 383, 384, 386, 388, 393, 400, 404, 408, 409, 411, 415, 425, 426, 428, 429, 430, 433, 434, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "circumst": [23, 42, 85, 92, 94, 101, 149, 165, 211, 241, 265, 268, 290, 291, 320, 330, 393, 401, 426, 434, 464, 475, 479, 481], "unnorm": [23, 481], "instanti": [23, 63, 76, 94, 99, 100, 101, 108, 124, 130, 131, 137, 149, 151, 153, 158, 174, 175, 179, 181, 188, 192, 194, 196, 201, 228, 240, 243, 246, 248, 265, 266, 267, 269, 281, 290, 294, 295, 297, 326, 327, 329, 333, 335, 336, 342, 360, 367, 374, 383, 384, 386, 387, 388, 401, 406, 408, 409, 412, 414, 426, 434, 438, 441, 465, 466, 472, 473, 476, 478, 479, 480, 481], "noth": [23, 33, 34, 35, 42, 58, 64, 72, 73, 75, 100, 101, 104, 108, 113, 130, 137, 138, 152, 156, 167, 175, 179, 181, 188, 189, 191, 196, 209, 211, 224, 245, 246, 264, 265, 266, 267, 269, 280, 281, 290, 297, 303, 317, 330, 331, 336, 338, 342, 344, 346, 357, 363, 367, 380, 384, 386, 397, 415, 424, 426, 428, 433, 434, 439, 453, 462, 463, 466, 467, 472, 475, 476, 479, 480, 481], "happen": [23, 25, 33, 59, 68, 73, 76, 84, 85, 92, 93, 95, 101, 103, 108, 113, 124, 137, 155, 167, 174, 175, 179, 181, 188, 205, 211, 223, 224, 245, 248, 253, 256, 264, 265, 266, 267, 290, 291, 293, 297, 312, 326, 332, 335, 339, 342, 343, 350, 351, 357, 359, 360, 363, 367, 379, 386, 387, 388, 393, 425, 426, 427, 428, 430, 433, 434, 441, 460, 462, 464, 465, 466, 467, 468, 472, 475, 476, 479, 480, 481], "delay": [23, 68, 84, 92, 101, 127, 137, 175, 243, 245, 253, 267, 281, 286, 323, 331, 335, 339, 360, 381, 382, 388, 393, 394, 426, 448, 466, 473, 477, 478, 479, 481], "improv": [23, 68, 73, 85, 93, 99, 101, 104, 118, 131, 137, 156, 165, 220, 232, 246, 248, 273, 297, 312, 338, 339, 346, 374, 408, 424, 426, 428, 454, 468, 474, 476, 478, 479, 480, 481, 482], "implicit": [23, 34, 59, 63, 68, 73, 85, 99, 101, 110, 112, 118, 124, 131, 137, 141, 165, 167, 179, 182, 186, 188, 211, 221, 223, 246, 248, 253, 256, 266, 279, 293, 295, 312, 317, 322, 331, 333, 335, 338, 342, 343, 345, 346, 384, 388, 398, 400, 410, 425, 426, 428, 430, 434, 438, 441, 453, 467, 468, 473, 475, 476, 477, 478, 479, 481, 482], "__traceback__": [23, 211, 350, 379, 383, 426, 428, 434, 468, 471, 481], "snippet": [23, 94, 101, 137, 168, 242, 266, 329, 339, 363, 459, 462, 463, 465, 476, 481], "pyexception_settraceback": [23, 57, 481], "fresh": [23, 63, 85, 95, 156, 167, 253, 281, 305, 322, 360, 383, 430, 459, 462, 463, 481], "pyerr_sethandledexcept": [23, 57, 471, 481], "pyerr_getexcinfo": [23, 57, 471, 481], "kept": [23, 24, 33, 45, 59, 64, 85, 99, 101, 165, 174, 182, 184, 193, 197, 206, 209, 211, 212, 223, 241, 242, 245, 256, 259, 267, 269, 309, 310, 317, 332, 336, 339, 387, 400, 434, 460, 462, 467, 468, 472, 473, 474, 475, 480, 481], "pyerr_setexcinfo": [23, 57, 471, 481], "deriv": [23, 33, 49, 61, 68, 76, 88, 118, 142, 155, 156, 172, 174, 175, 176, 179, 181, 195, 197, 199, 200, 201, 211, 224, 228, 242, 246, 248, 249, 253, 259, 260, 265, 266, 270, 286, 290, 291, 306, 310, 311, 312, 326, 336, 350, 353, 367, 382, 384, 386, 393, 398, 406, 409, 414, 417, 418, 424, 426, 429, 430, 433, 438, 441, 460, 463, 464, 465, 466, 467, 468, 474, 475, 477, 478, 481], "interact": [23, 33, 34, 42, 59, 63, 66, 68, 72, 79, 84, 85, 87, 93, 101, 104, 113, 118, 120, 124, 142, 153, 164, 175, 178, 184, 185, 189, 192, 205, 211, 212, 216, 223, 241, 245, 252, 253, 255, 256, 281, 282, 290, 291, 293, 295, 305, 306, 311, 313, 318, 321, 332, 339, 346, 350, 352, 356, 357, 367, 373, 374, 379, 382, 386, 393, 398, 411, 418, 420, 426, 429, 430, 432, 433, 434, 446, 453, 459, 462, 463, 464, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "main": [23, 33, 34, 42, 45, 59, 63, 66, 68, 72, 73, 75, 76, 84, 85, 92, 93, 99, 100, 101, 112, 113, 118, 121, 123, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 149, 153, 155, 164, 165, 167, 168, 175, 183, 186, 188, 191, 192, 194, 197, 198, 199, 202, 203, 204, 206, 224, 226, 228, 238, 245, 248, 249, 250, 253, 265, 266, 269, 281, 286, 290, 291, 297, 307, 320, 322, 331, 332, 336, 338, 342, 345, 350, 352, 353, 354, 356, 360, 363, 367, 371, 373, 374, 380, 382, 384, 386, 387, 388, 393, 397, 400, 409, 411, 413, 417, 418, 419, 426, 427, 430, 448, 449, 450, 453, 456, 459, 462, 463, 465, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "sent": [23, 68, 92, 95, 100, 105, 107, 108, 124, 131, 135, 167, 175, 198, 233, 240, 242, 243, 245, 246, 257, 265, 266, 267, 281, 286, 291, 295, 303, 320, 331, 333, 335, 336, 338, 339, 346, 364, 384, 393, 417, 418, 424, 459, 460, 463, 464, 465, 466, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481], "immedi": [23, 24, 28, 31, 33, 45, 63, 66, 73, 79, 84, 85, 92, 93, 95, 103, 104, 113, 124, 131, 133, 137, 139, 151, 153, 167, 174, 175, 182, 184, 189, 191, 203, 211, 212, 214, 216, 224, 230, 240, 245, 253, 256, 264, 265, 269, 280, 281, 291, 293, 295, 310, 317, 329, 331, 335, 338, 339, 342, 343, 346, 350, 351, 357, 359, 363, 364, 367, 374, 382, 386, 393, 398, 404, 408, 411, 413, 414, 417, 418, 425, 426, 427, 428, 430, 453, 462, 463, 464, 466, 467, 472, 474, 475, 477, 478, 479, 480, 481], "invoc": [23, 28, 56, 68, 73, 162, 167, 174, 272, 281, 306, 363, 379, 386, 413, 425, 426, 438, 453, 457, 464, 473, 475, 479, 481], "press": [23, 92, 101, 124, 152, 175, 245, 280, 295, 321, 367, 373, 374, 382, 386, 420, 467, 473, 481], "ctrl": [23, 86, 92, 101, 124, 133, 166, 176, 281, 295, 331, 336, 338, 439, 453, 460, 465, 473, 479, 481], "sigint": [23, 68, 113, 133, 281, 295, 314, 331, 346, 386, 470, 473, 479, 481], "keyboardinterrupt": [23, 100, 101, 113, 133, 137, 155, 211, 281, 314, 331, 386, 405, 418, 436, 441, 448, 465, 466, 467, 468, 477, 478, 479, 481], "pyerr_setinterrupt": [23, 57], "simul": [23, 68, 92, 93, 101, 113, 124, 131, 134, 175, 232, 297, 316, 331, 341, 345, 361, 382, 400, 461, 462, 475], "arriv": [23, 113, 191, 241, 243, 281, 316, 331, 336, 339, 364, 440, 460], "pyerr_setinterruptex": [23, 57, 470], "signum": [23, 84, 113, 124, 212, 291, 331, 481], "sig_dfl": [23, 113, 331, 346, 481], "sig_ign": [23, 113, 331, 346, 481], "outsid": [23, 59, 85, 93, 95, 100, 101, 104, 105, 124, 130, 137, 156, 161, 168, 174, 175, 181, 184, 194, 197, 203, 206, 211, 243, 245, 250, 260, 297, 311, 312, 317, 323, 330, 335, 339, 342, 343, 345, 356, 360, 363, 364, 365, 374, 382, 384, 398, 411, 413, 420, 425, 426, 433, 434, 438, 463, 464, 467, 470, 471, 472, 473, 477, 478, 479, 480, 481], "pysignal_setwakeupfd": [23, 466], "fd": [23, 24, 84, 124, 128, 131, 140, 175, 213, 256, 280, 291, 307, 326, 327, 330, 331, 335, 359, 381, 382, 466, 481], "whenev": [23, 61, 63, 66, 73, 85, 93, 94, 95, 100, 101, 118, 131, 175, 184, 188, 205, 223, 245, 250, 253, 265, 267, 269, 281, 290, 297, 312, 326, 331, 338, 339, 342, 350, 360, 374, 382, 386, 411, 423, 426, 430, 462, 463, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 481], "disabl": [23, 28, 33, 34, 35, 42, 63, 68, 73, 94, 100, 101, 104, 110, 118, 124, 142, 149, 162, 165, 175, 184, 188, 191, 199, 212, 216, 223, 224, 225, 240, 248, 253, 260, 265, 266, 267, 281, 286, 290, 291, 295, 297, 306, 313, 317, 318, 326, 329, 331, 332, 333, 335, 337, 338, 339, 342, 350, 360, 374, 382, 384, 386, 387, 393, 398, 400, 403, 411, 423, 426, 430, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "featur": [23, 33, 34, 49, 51, 54, 61, 63, 66, 68, 75, 79, 84, 85, 87, 92, 93, 94, 95, 100, 101, 104, 107, 111, 118, 141, 149, 150, 152, 156, 165, 174, 175, 177, 178, 179, 181, 185, 191, 192, 206, 211, 223, 224, 241, 245, 248, 255, 260, 265, 268, 281, 290, 291, 295, 297, 300, 317, 322, 330, 333, 338, 339, 342, 346, 350, 356, 360, 363, 367, 378, 382, 386, 387, 393, 398, 400, 408, 409, 412, 413, 414, 420, 426, 428, 430, 432, 433, 434, 453, 454, 457, 459, 460, 461, 462, 463, 464, 466, 468, 469, 471, 473, 474, 481, 482], "set_wakeup_fd": [23, 331, 466, 476, 478, 481], "socket": [23, 68, 80, 87, 95, 96, 98, 100, 104, 107, 122, 125, 128, 129, 140, 156, 168, 169, 185, 205, 210, 211, 221, 233, 240, 243, 245, 246, 252, 254, 255, 256, 257, 258, 265, 266, 267, 281, 282, 286, 291, 294, 303, 305, 320, 326, 327, 331, 333, 336, 340, 356, 357, 367, 400, 405, 411, 426, 437, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 472, 481], "pyerr_newexcept": [23, 57, 73, 465, 467, 473], "classnam": [23, 85, 120, 159, 367, 373, 387, 388, 425, 438], "__module__": [23, 27, 58, 63, 88, 93, 94, 158, 179, 195, 209, 223, 224, 253, 277, 360, 384, 426, 463, 470, 476, 477, 481], "dot": [23, 31, 45, 63, 64, 76, 78, 87, 93, 97, 100, 101, 104, 120, 191, 223, 241, 245, 248, 257, 259, 264, 265, 266, 269, 274, 286, 300, 311, 317, 321, 330, 335, 342, 350, 356, 358, 367, 375, 382, 386, 387, 418, 420, 421, 425, 426, 430, 432, 434, 438, 445, 453, 459, 466, 469, 470, 476, 481], "pyerr_newexceptionwithdoc": [23, 57, 467, 473], "docstr": [23, 27, 34, 45, 58, 60, 63, 66, 68, 75, 84, 87, 101, 120, 153, 158, 185, 220, 223, 224, 245, 253, 295, 311, 360, 376, 383, 384, 386, 425, 426, 433, 434, 438, 439, 449, 453, 460, 461, 462, 463, 464, 465, 466, 467, 471, 473, 475, 476, 477, 478, 479, 480, 481], "pyexception_gettraceback": [23, 57], "ex": [23, 34, 42, 101, 318, 335, 342, 417, 429, 453, 465, 472, 476, 477, 480, 481], "pyexception_getcontext": [23, 57], "__context__": [23, 211, 379, 434, 468, 474, 481], "pyexception_setcontext": [23, 57], "sure": [23, 45, 63, 64, 68, 72, 75, 76, 84, 85, 92, 95, 100, 101, 104, 118, 149, 153, 156, 165, 174, 184, 211, 223, 233, 248, 264, 281, 290, 291, 327, 338, 339, 360, 363, 367, 395, 398, 411, 419, 426, 459, 462, 463, 465, 466, 468, 473, 474, 481], "pyexception_getcaus": [23, 57], "__cause__": [23, 189, 211, 379, 434, 468, 481], "pyexception_setcaus": [23, 57], "__suppress_context__": [23, 211, 379, 434], "pyexception_getarg": [23, 57, 472, 481], "pyexception_setarg": [23, 57, 472, 481], "pyunstable_exc_prepreraisestar": [23, 481], "orig": [23, 201, 394], "unhandl": [23, 66, 113, 149, 155, 167, 191, 226, 245, 350, 363, 379, 393, 426, 441, 468, 472, 481], "claus": [23, 68, 95, 101, 113, 137, 167, 211, 253, 281, 295, 312, 338, 342, 350, 360, 426, 427, 428, 433, 434, 441, 460, 465, 466, 473, 475, 478, 479, 480, 481], "rerais": [23, 167, 189, 281, 342, 351, 425, 426, 481], "exceptiongroup": [23, 124, 137, 189, 211, 335, 379, 425, 441, 471, 472, 481], "pyunicodedecodeerror_cr": [23, 57], "pyunicodedecodeerror_getencod": [23, 57], "pyunicodeencodeerror_getencod": [23, 57], "pyunicodedecodeerror_getobject": [23, 57], "pyunicodeencodeerror_getobject": [23, 57], "pyunicodetranslateerror_getobject": [23, 57], "pyunicodedecodeerror_getstart": [23, 57], "pyunicodeencodeerror_getstart": [23, 57], "pyunicodetranslateerror_getstart": [23, 57], "pyunicodedecodeerror_setstart": [23, 57], "pyunicodeencodeerror_setstart": [23, 57], "pyunicodetranslateerror_setstart": [23, 57], "pyunicodedecodeerror_getend": [23, 57], "pyunicodeencodeerror_getend": [23, 57], "pyunicodetranslateerror_getend": [23, 57], "pyunicodedecodeerror_setend": [23, 57], "pyunicodeencodeerror_setend": [23, 57], "pyunicodetranslateerror_setend": [23, 57], "pyunicodedecodeerror_getreason": [23, 57], "pyunicodeencodeerror_getreason": [23, 57], "pyunicodetranslateerror_getreason": [23, 57], "pyunicodedecodeerror_setreason": [23, 57], "pyunicodeencodeerror_setreason": [23, 57], "pyunicodetranslateerror_setreason": [23, 57], "core": [23, 28, 33, 34, 59, 68, 73, 100, 104, 116, 124, 161, 165, 203, 233, 248, 249, 259, 264, 267, 290, 291, 306, 311, 320, 331, 342, 360, 363, 367, 383, 397, 408, 411, 423, 426, 434, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 479, 480, 482], "track": [23, 28, 42, 63, 68, 85, 94, 99, 100, 103, 104, 124, 149, 156, 165, 167, 179, 183, 184, 185, 191, 252, 267, 273, 281, 290, 291, 294, 297, 317, 326, 350, 363, 364, 367, 369, 386, 393, 408, 424, 460, 461, 464, 467, 469, 472, 473, 475, 476, 477, 478, 479, 480, 481], "depth": [23, 91, 100, 140, 161, 165, 175, 177, 182, 189, 194, 203, 211, 233, 268, 297, 305, 319, 338, 342, 350, 356, 360, 373, 379, 383, 386, 410, 411, 460, 461, 462, 476, 477, 478, 481], "use_stackcheck": [23, 59, 481], "pyos_checkstack": [23, 57, 59, 481], "reach": [23, 24, 66, 73, 75, 84, 85, 95, 101, 103, 104, 108, 124, 135, 142, 147, 151, 157, 223, 240, 256, 259, 265, 268, 291, 295, 311, 312, 326, 329, 335, 336, 338, 342, 346, 379, 393, 411, 413, 425, 426, 428, 430, 434, 459, 460, 461, 462, 463, 465, 466, 467, 473, 475, 476, 478, 479, 481], "recursionerror": [23, 120, 211, 260, 297, 305, 350, 441, 476, 477, 481], "concaten": [23, 53, 54, 68, 76, 104, 118, 119, 147, 149, 155, 156, 189, 223, 232, 233, 265, 268, 269, 291, 295, 312, 317, 329, 333, 335, 339, 342, 356, 379, 384, 422, 426, 428, 441, 444, 447, 459, 463, 464, 470, 481], "tp_repr": [23, 63, 75], "protect": [23, 33, 73, 75, 76, 101, 137, 165, 174, 175, 179, 221, 228, 233, 246, 256, 268, 276, 281, 305, 322, 329, 336, 340, 356, 387, 398, 419, 426, 453, 462, 465, 472, 476, 481], "cycl": [23, 28, 61, 63, 68, 73, 76, 78, 85, 87, 95, 99, 101, 137, 225, 230, 245, 253, 259, 350, 360, 363, 374, 400, 425, 426, 434, 461, 463, 465, 466, 467, 473, 475, 479, 480, 481, 482], "facilit": [23, 245, 266, 317, 318, 333, 398, 475, 478, 481], "reprlib": [23, 68, 180, 252, 450, 468, 481], "recursive_repr": [23, 319, 473, 481], "py_reprent": [23, 57], "detect": [23, 28, 34, 42, 59, 63, 68, 73, 75, 76, 85, 93, 95, 104, 108, 110, 131, 138, 156, 159, 175, 179, 181, 184, 186, 189, 192, 201, 204, 211, 245, 248, 253, 269, 281, 290, 291, 293, 294, 297, 305, 312, 318, 319, 329, 331, 333, 335, 338, 342, 346, 350, 356, 360, 362, 363, 376, 380, 386, 393, 401, 425, 426, 427, 428, 433, 453, 454, 459, 460, 461, 462, 463, 466, 467, 472, 473, 475, 476, 477, 478, 479, 481], "typic": [23, 33, 34, 45, 49, 58, 61, 63, 73, 77, 85, 93, 94, 99, 100, 101, 108, 118, 124, 137, 147, 149, 156, 165, 171, 184, 188, 191, 194, 201, 203, 216, 223, 224, 226, 228, 243, 248, 249, 250, 251, 253, 264, 265, 266, 267, 269, 273, 274, 279, 281, 290, 291, 294, 295, 297, 305, 306, 318, 322, 330, 332, 336, 339, 342, 345, 346, 350, 353, 356, 357, 363, 364, 367, 369, 374, 382, 383, 384, 386, 393, 398, 403, 408, 409, 411, 412, 413, 414, 419, 421, 426, 428, 430, 453, 459, 463, 464, 467, 468, 472, 473, 475, 476, 478, 479, 481], "py_reprleav": [23, 57], "pyexc_": 23, "complet": [23, 33, 34, 42, 59, 64, 66, 68, 73, 75, 76, 77, 87, 92, 94, 95, 99, 101, 104, 115, 118, 124, 131, 134, 135, 137, 138, 149, 152, 153, 155, 156, 157, 161, 164, 165, 167, 175, 179, 181, 184, 188, 191, 192, 194, 200, 201, 203, 204, 205, 206, 211, 213, 221, 224, 228, 231, 233, 243, 252, 253, 257, 258, 259, 260, 265, 266, 267, 269, 270, 274, 279, 281, 282, 290, 291, 293, 295, 297, 306, 314, 317, 320, 329, 330, 332, 335, 336, 338, 339, 340, 342, 346, 350, 351, 352, 356, 359, 360, 361, 363, 366, 367, 373, 374, 376, 378, 379, 382, 384, 386, 388, 392, 393, 406, 408, 409, 411, 414, 425, 426, 427, 428, 430, 432, 443, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pyexc_baseexcept": [23, 57], "baseexcept": [23, 125, 137, 164, 211, 265, 350, 351, 379, 430, 434, 441, 448, 465, 466, 468, 471, 478, 479, 481], "pyexc_arithmeticerror": [23, 57], "arithmeticerror": [23, 184, 211, 448], "pyexc_assertionerror": [23, 57], "assertionerror": [23, 189, 211, 281, 360, 386, 387, 388, 405, 434, 448, 471, 480, 481], "pyexc_attributeerror": [23, 57, 75, 76], "attributeerror": [23, 49, 58, 68, 88, 93, 101, 149, 167, 174, 179, 211, 223, 224, 248, 253, 266, 281, 291, 297, 300, 317, 331, 342, 360, 365, 383, 386, 387, 388, 408, 409, 425, 426, 428, 434, 448, 454, 460, 462, 467, 471, 473, 474, 475, 476, 478, 481], "pyexc_blockingioerror": [23, 57], "blockingioerror": [23, 210, 211, 256, 291, 339, 425, 448, 474, 481], "pyexc_brokenpipeerror": [23, 57], "brokenpipeerror": [23, 135, 210, 211, 331, 448, 474, 481], "pyexc_buffererror": [23, 57], "pyexc_childprocesserror": [23, 57], "childprocesserror": [23, 210, 211, 291, 448, 474, 481], "pyexc_connectionabortederror": [23, 57], "connectionabortederror": [23, 210, 211, 448, 474], "pyexc_connectionerror": [23, 57], "connectionerror": [23, 211, 240, 441, 448, 474, 476], "pyexc_connectionrefusederror": [23, 57], "connectionrefusederror": [23, 210, 211, 448, 474], "pyexc_connectionreseterror": [23, 57], "connectionreseterror": [23, 135, 210, 211, 240, 448, 474, 481], "pyexc_eoferror": [23, 57], "eoferror": [23, 24, 41, 119, 125, 147, 151, 155, 211, 221, 223, 232, 268, 272, 281, 297, 333, 357, 448, 468], "pyexc_fileexistserror": [23, 57], "fileexistserror": [23, 198, 210, 211, 223, 256, 291, 294, 309, 330, 356, 420, 448, 474, 475, 481], "pyexc_filenotfounderror": [23, 57], "filenotfounderror": [23, 118, 138, 167, 210, 211, 248, 251, 266, 284, 291, 294, 318, 441, 448, 474, 476, 481], "pyexc_floatingpointerror": [23, 57], "floatingpointerror": [23, 211, 448], "pyexc_generatorexit": [23, 57], "generatorexit": [23, 95, 211, 426, 428, 448, 465, 466, 481], "pyexc_importerror": [23, 57, 99], "pyexc_indentationerror": [23, 57], "indentationerror": [23, 68, 86, 211, 448, 460, 481], "pyexc_indexerror": [23, 57], "indexerror": [23, 37, 38, 47, 60, 156, 158, 174, 194, 211, 234, 259, 281, 297, 316, 317, 342, 343, 379, 387, 426, 428, 434, 440, 447, 448, 460, 473, 481], "pyexc_interruptederror": [23, 57], "interruptederror": [23, 210, 211, 223, 291, 326, 331, 335, 448, 474, 476, 481], "pyexc_isadirectoryerror": [23, 57], "isadirectoryerror": [23, 210, 211, 291, 448, 474, 481], "pyexc_keyerror": [23, 35, 57], "pyexc_keyboardinterrupt": [23, 57], "pyexc_lookuperror": [23, 57], "pyexc_modulenotfounderror": [23, 57], "modulenotfounderror": [23, 211, 248, 430, 477, 478, 481], "pyexc_nameerror": [23, 57], "nameerror": [23, 26, 68, 174, 211, 248, 427, 428, 434, 441, 447, 448, 460, 461, 462, 465, 472, 481], "pyexc_notadirectoryerror": [23, 57], "notadirectoryerror": [23, 210, 211, 291, 448, 474, 481], "pyexc_notimplementederror": [23, 57], "notimplementederror": [23, 131, 166, 181, 198, 211, 224, 241, 248, 265, 281, 291, 294, 316, 339, 384, 403, 420, 448, 475, 477, 481], "pyexc_oserror": [23, 57, 73], "pyexc_overflowerror": [23, 57], "overflowerror": [23, 25, 39, 47, 113, 155, 157, 181, 184, 191, 211, 223, 273, 302, 335, 338, 342, 363, 364, 426, 448, 462, 463, 466, 467, 469, 470, 474, 475, 481], "pyexc_permissionerror": [23, 57], "permissionerror": [23, 210, 211, 248, 291, 320, 337, 358, 360, 448, 474, 477, 481], "pyexc_processlookuperror": [23, 57], "processlookuperror": [23, 210, 211, 320, 448, 474], "pyexc_recursionerror": [23, 57, 476], "pyexc_referenceerror": [23, 57], "referenceerror": [23, 211, 400, 448, 461, 462], "runtimeerror": [23, 95, 105, 113, 119, 124, 125, 130, 135, 136, 137, 138, 164, 167, 168, 211, 216, 223, 256, 259, 266, 281, 291, 294, 317, 333, 342, 346, 350, 354, 360, 363, 384, 404, 420, 426, 428, 434, 441, 448, 463, 464, 465, 467, 472, 474, 476, 477, 478, 479, 481], "pyexc_stopasynciter": [23, 57], "stopasynciter": [23, 87, 189, 211, 223, 387, 425, 426, 428, 434, 481], "pyexc_stopiter": [23, 57], "stopiter": [23, 63, 68, 75, 87, 95, 111, 158, 189, 211, 223, 259, 272, 281, 342, 351, 387, 426, 428, 434, 438, 448, 462, 463, 465, 466, 470, 477, 478, 481], "pyexc_syntaxerror": [23, 57, 429], "pyexc_systemexit": [23, 57], "pyexc_taberror": [23, 57], "taberror": [23, 86, 211, 433, 448, 460, 472], "pyexc_timeouterror": [23, 57], "timeouterror": [23, 125, 137, 164, 210, 211, 281, 333, 335, 448, 470, 474, 481], "pyexc_unboundlocalerror": [23, 57], "unboundlocalerror": [23, 189, 211, 427, 448, 460, 481], "pyexc_unicodedecodeerror": [23, 57], "pyexc_unicodeencodeerror": [23, 57], "pyexc_unicodeerror": [23, 57], "pyexc_unicodetranslateerror": [23, 57], "pyexc_valueerror": [23, 57, 73, 467], "pyexc_zerodivisionerror": [23, 57, 73], "zerodivisionerror": [23, 92, 101, 181, 184, 211, 219, 281, 295, 331, 338, 427, 428, 434, 441, 448, 449, 463, 469, 471, 473, 476, 480, 481], "3151": [23, 68, 211, 320, 326, 335, 463, 482], "alias": [23, 68, 94, 118, 156, 185, 193, 209, 211, 228, 264, 295, 301, 335, 338, 342, 374, 382, 385, 427, 433, 434, 438, 454, 459, 461, 463, 466, 470, 472, 473, 474, 475, 477, 480, 481], "pyexc_environmenterror": [23, 57], "pyexc_ioerror": [23, 57], "separ": [23, 33, 34, 55, 59, 63, 64, 68, 77, 79, 84, 85, 92, 94, 99, 100, 101, 103, 104, 107, 110, 118, 125, 130, 134, 137, 144, 149, 152, 153, 156, 165, 167, 173, 174, 175, 176, 181, 184, 188, 191, 194, 199, 200, 203, 206, 209, 211, 218, 223, 224, 228, 243, 245, 246, 248, 250, 256, 257, 260, 264, 265, 266, 267, 268, 269, 274, 281, 286, 290, 291, 294, 295, 300, 301, 305, 311, 312, 317, 322, 329, 332, 333, 335, 336, 338, 339, 342, 343, 345, 346, 356, 359, 360, 362, 363, 366, 367, 378, 384, 386, 388, 392, 393, 398, 400, 401, 420, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 439, 450, 453, 454, 459, 460, 462, 464, 465, 466, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "preprocessor": [23, 42, 57, 68, 329, 456, 460, 467, 481], "ms_window": [23, 34], "pyexc_byteswarn": [23, 57], "byteswarn": [23, 34, 211, 398, 448, 478, 481], "pyexc_deprecationwarn": [23, 57], "deprecationwarn": [23, 68, 104, 110, 130, 164, 166, 186, 211, 250, 281, 291, 338, 345, 356, 360, 386, 398, 411, 426, 430, 433, 448, 453, 461, 463, 467, 470, 471, 472, 473, 475, 476, 477, 479, 481, 482], "pyexc_futurewarn": [23, 57], "futurewarn": [23, 211, 317, 398, 448, 463, 464, 467, 472, 478, 481], "pyexc_importwarn": [23, 57], "importwarn": [23, 186, 211, 386, 398, 430, 448, 465, 470, 472, 477, 481], "pyexc_pendingdeprecationwarn": [23, 57], "pendingdeprecationwarn": [23, 110, 186, 211, 386, 398, 448, 463, 466, 467, 476, 477, 478, 479, 480, 481], "pyexc_resourcewarn": [23, 57], "runtimewarn": [23, 45, 123, 124, 211, 335, 350, 386, 398, 448, 473, 479, 481], "pyexc_syntaxwarn": [23, 57], "syntaxwarn": [23, 211, 317, 360, 398, 433, 448, 463, 471, 472, 477, 479, 481], "pyexc_unicodewarn": [23, 57], "unicodewarn": [23, 211, 398, 448, 465, 473], "pyexc_userwarn": [23, 57], "userwarn": [23, 211, 227, 360, 398, 448, 481], "minim": [24, 45, 68, 73, 76, 84, 92, 101, 103, 139, 149, 184, 188, 191, 212, 233, 246, 248, 252, 257, 271, 290, 297, 303, 317, 322, 331, 335, 337, 338, 360, 362, 377, 393, 454, 459, 460, 465, 477, 481], "emul": [24, 33, 68, 76, 79, 85, 93, 155, 157, 175, 179, 187, 191, 213, 256, 264, 269, 281, 290, 291, 300, 307, 318, 330, 331, 346, 350, 357, 462, 463, 466, 473, 474, 477, 479, 481], "io": [24, 33, 34, 68, 71, 79, 85, 87, 103, 116, 121, 122, 123, 124, 134, 137, 147, 156, 162, 167, 185, 186, 188, 194, 211, 213, 216, 217, 223, 232, 233, 240, 243, 248, 249, 251, 252, 260, 268, 269, 286, 291, 294, 297, 306, 307, 336, 339, 342, 346, 350, 356, 358, 360, 376, 377, 387, 397, 405, 409, 419, 420, 423, 424, 426, 453, 457, 465, 466, 467, 468, 469, 470, 471, 475, 477, 480, 481, 482], "pyfile_fromfd": [24, 57], "newlin": [24, 68, 79, 87, 101, 104, 118, 120, 141, 144, 147, 155, 157, 173, 175, 188, 191, 194, 205, 216, 223, 232, 245, 248, 256, 263, 265, 267, 268, 269, 276, 286, 294, 297, 305, 317, 329, 335, 336, 342, 346, 354, 358, 362, 364, 375, 376, 379, 380, 392, 398, 409, 417, 419, 420, 425, 429, 433, 435, 447, 449, 450, 453, 461, 464, 465, 466, 467, 468, 470, 471, 475, 477, 478, 479, 480, 481, 482], "closefd": [24, 186, 223, 256, 281, 468, 481], "open": [24, 33, 34, 41, 51, 66, 68, 73, 78, 84, 87, 92, 95, 100, 103, 104, 107, 110, 115, 118, 131, 134, 138, 140, 146, 147, 149, 153, 156, 158, 165, 167, 173, 175, 181, 182, 186, 187, 188, 198, 205, 206, 210, 211, 212, 213, 216, 217, 221, 223, 228, 232, 233, 238, 240, 241, 243, 245, 246, 247, 248, 251, 252, 253, 256, 263, 264, 265, 266, 267, 268, 269, 274, 276, 278, 279, 281, 286, 291, 292, 293, 294, 297, 299, 300, 303, 307, 311, 312, 318, 320, 324, 326, 328, 329, 331, 333, 334, 335, 338, 339, 340, 342, 346, 347, 350, 354, 356, 357, 358, 360, 363, 367, 373, 374, 376, 377, 379, 382, 384, 387, 388, 393, 395, 399, 401, 403, 405, 409, 411, 412, 414, 417, 419, 420, 423, 424, 425, 426, 433, 436, 438, 441, 444, 448, 449, 450, 453, 457, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "comprehens": [24, 68, 84, 85, 87, 99, 110, 147, 189, 233, 253, 262, 297, 342, 367, 427, 428, 429, 433, 438, 443, 455, 464, 465, 467, 468, 470, 471, 474, 475, 476, 478, 479, 480, 481, 482], "pleas": [24, 33, 71, 99, 100, 101, 103, 104, 108, 118, 126, 135, 149, 165, 174, 221, 228, 240, 246, 248, 265, 266, 267, 286, 291, 303, 317, 320, 330, 333, 335, 338, 339, 346, 350, 356, 359, 382, 387, 398, 405, 426, 428, 432, 439, 441, 455, 459, 460, 461, 463, 465, 468, 472, 474, 475, 476, 477, 478, 479, 480, 481], "pyobject_asfiledescriptor": [24, 57], "fileno": [24, 59, 84, 101, 140, 147, 186, 213, 216, 233, 240, 256, 276, 281, 291, 293, 326, 327, 331, 335, 336, 339, 357, 358, 359, 367, 462, 465, 475, 481], "pyfile_getlin": [24, 57], "readlin": [24, 34, 66, 68, 79, 84, 95, 99, 107, 124, 134, 135, 138, 141, 149, 153, 156, 168, 186, 188, 202, 205, 211, 216, 221, 223, 246, 252, 256, 266, 276, 291, 294, 295, 297, 313, 329, 336, 361, 367, 376, 380, 387, 393, 397, 419, 420, 426, 436, 438, 441, 444, 445, 446, 453, 454, 460, 461, 462, 463, 465, 466, 467, 473, 475, 478, 481], "greater": [24, 33, 34, 39, 45, 56, 63, 64, 76, 92, 100, 101, 107, 113, 131, 137, 142, 144, 145, 152, 175, 181, 184, 188, 194, 206, 207, 224, 228, 240, 246, 257, 265, 267, 273, 291, 295, 320, 332, 333, 342, 350, 356, 360, 363, 374, 375, 380, 382, 386, 408, 426, 433, 434, 460, 462, 463, 464, 465, 476, 477, 478, 480, 481], "partial": [24, 34, 68, 88, 95, 107, 108, 116, 124, 125, 127, 134, 175, 179, 185, 195, 204, 205, 222, 223, 246, 252, 253, 259, 267, 268, 271, 273, 282, 320, 322, 335, 336, 342, 346, 356, 411, 425, 460, 463, 464, 466, 467, 468, 469, 474, 475, 476, 477, 478, 479, 481, 482], "less": [24, 25, 33, 34, 39, 56, 59, 64, 68, 73, 76, 85, 99, 101, 104, 107, 110, 131, 137, 145, 147, 149, 151, 156, 175, 181, 184, 185, 191, 194, 213, 224, 226, 232, 233, 242, 245, 249, 256, 257, 259, 265, 268, 276, 281, 291, 295, 297, 305, 306, 317, 330, 331, 335, 338, 339, 342, 343, 346, 350, 356, 360, 363, 364, 367, 371, 373, 374, 375, 379, 384, 386, 393, 398, 408, 425, 426, 428, 434, 461, 462, 463, 464, 465, 466, 469, 472, 473, 475, 476, 477, 479, 480, 481], "pyfile_setopencodehook": [24, 256, 481], "py_opencodehookfunct": 24, "open_cod": [24, 256, 481], "userdata": [24, 59], "pyunicodeobject": [24, 63, 64, 470, 471], "hook": [24, 31, 32, 34, 59, 66, 68, 87, 93, 97, 99, 113, 140, 153, 174, 186, 206, 214, 216, 223, 240, 252, 278, 300, 305, 306, 313, 329, 338, 342, 350, 361, 363, 380, 383, 387, 397, 398, 421, 426, 428, 434, 436, 453, 454, 460, 462, 465, 467, 470, 471, 472, 474, 476, 477, 478, 480, 481, 482], "py_initi": [24, 31, 33, 34, 35, 57, 59, 72, 73, 86, 459, 470, 473, 478, 480, 481], "audit": [24, 58, 59, 68, 97, 113, 119, 140, 174, 183, 225, 272, 291, 333, 342, 350, 351, 383, 393, 448, 453, 463, 470, 481], "setopencodehook": [24, 140], "pyfile_writeobject": [24, 49, 57], "py_print_raw": [24, 49], "pyfile_writestr": [24, 57], "pyfloatobject": [25, 76], "pyfloat_typ": [25, 57], "pyfloat_check": 25, "pyfloat_checkexact": 25, "pyfloat_fromstr": [25, 57], "pyfloat_fromdoubl": [25, 57], "pyfloat_asdoubl": [25, 57, 479], "pyfloat": 25, "upon": [25, 33, 41, 64, 66, 72, 73, 85, 93, 100, 138, 142, 149, 153, 156, 157, 167, 171, 175, 184, 186, 187, 191, 240, 242, 245, 246, 248, 269, 291, 295, 297, 326, 327, 329, 331, 332, 338, 339, 345, 350, 360, 378, 398, 408, 424, 426, 428, 430, 461, 466, 474, 475, 477, 479, 481], "pyfloat_as_doubl": 25, "pyfloat_getinfo": [25, 57, 466], "structseq": [25, 467, 481], "minimum": [25, 34, 42, 64, 76, 93, 101, 103, 109, 113, 124, 131, 139, 152, 174, 175, 184, 195, 255, 259, 273, 291, 326, 332, 339, 342, 350, 360, 363, 374, 381, 382, 384, 386, 454, 462, 463, 466, 473, 474, 475, 477, 478, 481], "thin": [25, 59, 68, 224, 245, 273, 285, 331, 367, 454, 471, 481], "pyfloat_getmax": [25, 57, 466], "finit": [25, 84, 92, 95, 104, 152, 184, 219, 259, 273, 342, 350, 426, 481], "dbl_max": [25, 350], "pyfloat_getmin": [25, 57, 466], "dbl_min": [25, 350], "routin": [25, 33, 41, 63, 68, 72, 73, 75, 86, 93, 107, 138, 139, 171, 175, 182, 193, 213, 248, 252, 256, 264, 279, 291, 306, 339, 364, 389, 402, 463, 464, 478, 481], "suffix": [25, 64, 68, 71, 101, 110, 174, 198, 243, 246, 248, 257, 265, 266, 267, 274, 291, 294, 317, 328, 333, 342, 358, 393, 420, 428, 429, 454, 459, 460, 462, 471, 473, 474, 479, 481], "appear": [25, 33, 34, 45, 58, 59, 66, 68, 75, 76, 84, 92, 94, 95, 98, 100, 101, 103, 104, 110, 118, 120, 131, 149, 156, 161, 165, 174, 175, 179, 184, 188, 189, 191, 194, 197, 200, 201, 203, 211, 220, 223, 228, 233, 245, 246, 248, 253, 257, 264, 266, 267, 269, 270, 279, 281, 291, 295, 306, 312, 317, 329, 331, 333, 335, 338, 342, 343, 356, 362, 367, 374, 383, 384, 387, 393, 398, 400, 406, 408, 411, 414, 418, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 453, 459, 461, 463, 465, 466, 467, 469, 472, 473, 475, 476, 477, 478, 479, 481], "ieee": [25, 152, 184, 260, 273, 292, 335, 345, 360, 428, 442, 454, 464, 466, 469, 471, 473, 477, 478, 481], "754": [25, 152, 184, 260, 273, 345, 360, 428, 442, 454, 464, 466, 469, 471, 473, 477, 478, 481], "binary16": [25, 345], "half": [25, 92, 101, 131, 175, 181, 219, 224, 273, 293, 326, 342, 345, 433, 467, 472, 477, 481], "binary32": [25, 345], "binary64": [25, 345, 442], "inf": [25, 119, 152, 184, 223, 260, 273, 342, 343, 350, 466, 467, 471, 473, 476, 477, 481], "nan": [25, 68, 85, 119, 152, 184, 223, 273, 283, 341, 342, 343, 350, 428, 440, 454, 464, 466, 467, 470, 471, 473, 474, 476, 477, 481], "thing": [25, 33, 63, 68, 72, 73, 75, 76, 77, 84, 85, 92, 94, 95, 98, 100, 101, 103, 107, 108, 118, 131, 155, 157, 165, 167, 174, 179, 191, 198, 204, 213, 223, 242, 248, 256, 265, 266, 273, 281, 290, 297, 317, 332, 339, 344, 350, 356, 363, 367, 372, 374, 382, 384, 385, 386, 387, 388, 393, 397, 398, 401, 428, 429, 432, 457, 459, 460, 461, 462, 463, 464, 465, 468, 472, 474, 475, 479, 481], "larger": [25, 42, 49, 56, 76, 85, 92, 93, 115, 131, 149, 152, 174, 175, 181, 182, 184, 213, 223, 256, 257, 273, 276, 282, 291, 317, 320, 338, 339, 342, 343, 360, 363, 420, 426, 428, 433, 459, 460, 462, 463, 465, 467, 468, 472, 473, 476, 477, 478, 479, 480, 481], "smaller": [25, 42, 64, 92, 93, 104, 131, 174, 181, 184, 188, 189, 224, 257, 268, 273, 291, 297, 306, 343, 345, 353, 367, 374, 380, 382, 392, 409, 426, 428, 433, 453, 461, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 477, 479, 481], "accident": [25, 33, 101, 103, 184, 188, 191, 211, 434, 461, 463, 466, 476, 481], "ala": 25, "le": [25, 95, 107, 156, 198, 289, 461, 469, 474], "littl": [25, 31, 64, 95, 100, 101, 104, 105, 107, 139, 144, 151, 156, 174, 175, 176, 184, 188, 189, 191, 228, 241, 266, 281, 290, 293, 317, 331, 335, 342, 345, 350, 380, 382, 396, 403, 424, 439, 450, 460, 461, 462, 466, 473, 474, 475, 481], "expon": [25, 89, 184, 223, 273, 316, 342, 343, 345, 350, 376, 433, 464, 466, 474, 479, 481], "py_big_endian": 25, "processor": [25, 35, 73, 93, 107, 281, 286, 290, 293, 301, 312, 320, 335, 393, 413, 426, 457, 460, 464, 465, 479, 480, 481], "ok": [25, 73, 108, 175, 187, 191, 221, 239, 240, 241, 243, 246, 290, 333, 339, 371, 373, 384, 386, 405, 439, 464, 471, 472, 473, 481], "infin": [25, 104, 152, 184, 223, 260, 273, 342, 343, 350, 464, 466, 473, 481], "pyfloat_pack2": [25, 471, 481], "pyfloat_pack4": [25, 471, 481], "pyfloat_pack8": [25, 471, 481], "refus": [25, 210, 211, 270, 286, 328, 333, 335, 339, 356, 420, 470, 481], "pyfloat_unpack2": [25, 471, 481], "pyfloat_unpack4": [25, 471, 481], "pyfloat_unpack8": [25, 471, 481], "pyeval_getfram": [26, 33, 53, 57, 481], "pythreadstate_getfram": [26, 33, 53, 57, 471, 480, 481], "reflect": [26, 32, 65, 68, 85, 101, 115, 118, 175, 181, 191, 213, 223, 224, 245, 248, 253, 282, 290, 291, 306, 318, 335, 338, 339, 342, 345, 350, 367, 382, 383, 384, 403, 409, 419, 425, 426, 427, 453, 466, 472, 473, 474, 476, 479, 480, 481], "pyframe_typ": [26, 471, 481], "frametyp": [26, 383, 481], "frameobject": [26, 470, 471, 481], "pyframe_check": [26, 471, 481], "pyframe_getback": [26, 471, 480, 481], "outer": [26, 85, 137, 167, 184, 189, 205, 224, 235, 253, 350, 425, 426, 427, 428, 433, 434, 468, 471, 472, 473, 474, 480, 481], "pyframe_getbuiltin": [26, 471, 481], "f_builtin": [26, 253, 426, 471, 481], "pyframe_getcod": [26, 57, 471, 480, 481], "pyframe_getgener": [26, 471, 481], "pyframe_getglob": [26, 471, 481], "f_global": [26, 253, 426, 471, 481], "pyframe_getlasti": [26, 471, 481], "f_lasti": [26, 189, 253, 426, 463, 470, 471, 481], "pyframe_getvar": [26, 472, 481], "pyframe_getvarstr": [26, 472, 481], "pyframe_getloc": [26, 471, 481], "f_local": [26, 253, 383, 426, 471, 481], "523": [26, 33, 68, 463, 471, 472, 480, 481], "_pyinterpreterfram": [26, 33, 471, 481], "pyunstable_interpreterframe_getcod": [26, 481], "pyunstable_interpreterframe_getlasti": [26, 481], "pyunstable_interpreterframe_getlin": [26, 481], "pyfunctionobject": [27, 472, 481], "pyfunction_typ": [27, 481], "functiontyp": [27, 120, 383, 470, 481], "pyfunction_check": 27, "pyfunction_new": 27, "annot": [27, 68, 85, 87, 96, 111, 120, 179, 189, 224, 246, 252, 253, 264, 298, 349, 360, 378, 384, 400, 424, 425, 426, 428, 429, 443, 468, 470, 471, 472, 473, 474, 476, 479, 480, 481], "closur": [27, 58, 66, 76, 124, 167, 168, 189, 223, 248, 253, 290, 342, 426, 471, 474, 477, 481], "co_qualnam": [27, 253, 426, 481], "pyfunction_newwithqualnam": 27, "pyfunction_getcod": 27, "pyfunction_getglob": 27, "pyfunction_getmodul": 27, "pyfunction_getdefault": 27, "pyfunction_setdefault": 27, "pyfunction_setvectorcal": [27, 472, 481], "func": [27, 33, 34, 35, 44, 53, 59, 63, 66, 78, 85, 87, 88, 93, 95, 99, 118, 120, 124, 137, 138, 142, 158, 174, 175, 210, 224, 253, 259, 264, 265, 281, 290, 306, 312, 330, 338, 342, 350, 351, 360, 363, 365, 367, 378, 384, 386, 400, 418, 425, 427, 441, 464, 466, 468, 473, 474, 477, 479, 481], "preserv": [27, 33, 42, 68, 73, 84, 85, 95, 101, 110, 118, 165, 181, 184, 188, 191, 194, 199, 201, 203, 206, 211, 253, 259, 260, 266, 267, 290, 291, 295, 297, 329, 330, 338, 342, 356, 360, 366, 383, 384, 386, 387, 400, 409, 411, 425, 426, 428, 433, 459, 460, 461, 462, 463, 465, 466, 467, 473, 474, 475, 476, 478, 479, 480, 481], "unalt": [27, 481], "pyfunction_getclosur": 27, "pyfunction_setclosur": 27, "pyfunction_getannot": [27, 481], "pyfunction_setannot": 27, "pyfunction_addwatch": 27, "pyfunction_watchcallback": 27, "pyfunction_clearwatch": 27, "pyfunction_watchev": 27, "pyfunction_event_cr": 27, "pyfunction_event_destroy": 27, "pyfunction_event_modify_cod": 27, "pyfunction_event_modify_default": 27, "pyfunction_event_modify_kwdefault": 27, "optim": [27, 34, 35, 42, 58, 63, 66, 68, 76, 85, 104, 126, 131, 137, 139, 156, 161, 175, 189, 209, 223, 233, 241, 248, 253, 263, 291, 297, 298, 306, 309, 335, 338, 350, 360, 363, 364, 420, 425, 426, 434, 454, 459, 460, 462, 463, 464, 465, 466, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "emit": [27, 33, 34, 45, 58, 76, 100, 101, 113, 124, 130, 133, 137, 175, 181, 186, 189, 211, 243, 259, 265, 267, 291, 297, 338, 346, 350, 360, 374, 379, 384, 386, 398, 409, 411, 415, 426, 428, 434, 453, 463, 466, 469, 472, 473, 475, 477, 478, 479, 480, 481], "decis": [27, 101, 103, 155, 253, 350, 374, 425, 434, 460, 464, 465, 467, 473, 474, 481], "involv": [28, 42, 45, 63, 73, 76, 99, 152, 165, 167, 175, 184, 191, 211, 224, 241, 281, 290, 297, 306, 330, 338, 339, 342, 345, 360, 379, 388, 393, 410, 426, 428, 429, 430, 434, 460, 467, 475, 476, 478, 479, 481], "circular": [28, 33, 35, 73, 76, 85, 260, 382, 388, 426, 461, 476, 478, 481], "atom": [28, 68, 84, 225, 281, 291, 314, 317, 335, 342, 363, 364, 429, 431, 467, 468, 471, 474, 481], "tp_flag": [28, 61, 63, 75, 76, 99, 189, 466, 480, 481], "py_tpflags_have_gc": [28, 61, 63, 76, 99, 462, 471, 481], "tp_travers": [28, 61, 63, 68, 75, 76, 225, 471, 480, 481], "tp_clear": [28, 45, 63, 75, 76, 99, 481], "conform": [28, 63, 68, 94, 100, 124, 144, 149, 165, 181, 184, 199, 201, 206, 207, 209, 240, 243, 245, 248, 250, 264, 265, 271, 297, 312, 350, 384, 392, 409, 411, 417, 423, 426, 454, 464, 468, 469, 474, 475, 477, 478, 479, 480, 481], "pyobject_gc_new": [28, 63, 99, 462, 479], "pyobject_gc_newvar": [28, 63, 99, 462, 479], "pyobject_gc_track": [28, 57, 462, 481], "pyobject_gc_untrack": [28, 57, 63, 75, 76, 99, 462, 471, 481], "pyobject_gc_del": [28, 57, 63, 99, 462, 479, 481], "pytype_readi": [28, 45, 57, 61, 63, 75, 76, 99, 471, 481], "indirect": [28, 49, 58, 61, 64, 73, 85, 93, 103, 174, 211, 248, 253, 291, 305, 312, 350, 400, 424, 426, 427, 428, 430, 468, 475, 478, 479, 481], "pytype_fromspecwithbas": [28, 57, 61, 63, 470, 472, 481], "pytype_fromspec": [28, 45, 57, 58, 61, 63, 76, 99, 472, 479, 480, 481], "popul": [28, 35, 45, 68, 100, 101, 118, 120, 181, 189, 205, 248, 265, 282, 297, 316, 322, 342, 383, 398, 409, 411, 426, 430, 459, 463, 470, 471, 477, 481], "child": [28, 33, 59, 85, 100, 101, 118, 130, 131, 135, 158, 210, 211, 246, 248, 251, 276, 281, 291, 294, 307, 312, 320, 326, 331, 335, 336, 346, 367, 374, 384, 387, 388, 408, 409, 411, 420, 426, 460, 464, 465, 466, 467, 472, 473, 474, 475, 477, 478, 479, 480, 481], "analog": [28, 64, 75, 85, 101, 184, 253, 265, 266, 273, 281, 297, 362, 382, 426, 428, 430, 462, 464, 465, 467, 473, 475, 479, 481], "pyunstable_object_gc_newwithextradata": [28, 481], "extra_s": [28, 450], "final": [28, 32, 34, 45, 49, 59, 61, 63, 68, 73, 74, 76, 84, 85, 94, 95, 100, 101, 103, 104, 111, 113, 120, 124, 131, 133, 136, 137, 139, 142, 156, 174, 179, 180, 184, 186, 188, 189, 191, 195, 201, 209, 211, 233, 243, 248, 253, 259, 263, 265, 269, 281, 290, 291, 294, 295, 297, 306, 309, 312, 313, 317, 330, 332, 336, 338, 339, 350, 351, 352, 356, 359, 360, 362, 363, 367, 374, 376, 379, 380, 382, 383, 384, 386, 387, 397, 398, 404, 412, 420, 426, 427, 428, 429, 430, 433, 434, 441, 444, 454, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 473, 474, 476, 477, 478, 479, 480, 482], "reserv": [28, 49, 61, 68, 94, 253, 257, 297, 312, 317, 320, 331, 337, 342, 363, 403, 408, 417, 420, 424, 426, 434, 441, 453, 461, 466, 468, 473, 478, 479, 481], "decid": [28, 34, 76, 85, 95, 100, 103, 130, 137, 142, 152, 155, 167, 181, 191, 241, 267, 335, 336, 350, 363, 384, 426, 430, 434, 465, 467, 472, 481], "pyobject_gc_res": [28, 481], "unexpect": [28, 100, 101, 168, 191, 203, 206, 228, 248, 265, 286, 317, 320, 331, 333, 335, 339, 341, 360, 386, 393, 398, 420, 425, 426, 428, 433, 438, 441, 459, 462, 467, 470, 472, 474, 476, 478, 479, 480, 481], "becom": [28, 33, 34, 63, 64, 66, 73, 84, 85, 92, 93, 94, 95, 99, 101, 104, 105, 107, 110, 124, 130, 131, 137, 139, 156, 175, 191, 194, 200, 203, 209, 223, 245, 253, 256, 259, 281, 290, 291, 295, 297, 306, 309, 316, 326, 327, 329, 330, 331, 339, 342, 343, 346, 350, 356, 363, 367, 374, 382, 384, 387, 388, 393, 400, 420, 425, 426, 427, 428, 434, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "near": [28, 100, 103, 152, 165, 182, 184, 188, 245, 265, 267, 273, 281, 291, 295, 426, 434, 462, 463, 465, 466, 467, 468, 472, 473, 476, 481], "pyobject_is_gc": [28, 63, 75, 480, 481], "pyobject_gc_istrack": [28, 57, 480, 481], "gc": [28, 45, 61, 63, 68, 73, 76, 78, 85, 87, 97, 99, 140, 252, 253, 313, 350, 360, 365, 380, 400, 409, 426, 450, 454, 460, 463, 465, 467, 472, 473, 481], "is_track": [28, 225, 467], "pyobject_gc_isfin": [28, 57, 480, 481], "is_fin": [28, 33, 225, 350, 448, 476, 479, 480, 481], "_pyobject_gc_track": [28, 479, 481], "_pyobject_gc_untrack": [28, 479, 481], "visitproc": [28, 57, 63, 76, 99, 480], "visitor": 28, "travers": [28, 31, 45, 63, 76, 95, 99, 110, 120, 161, 182, 194, 203, 211, 248, 250, 251, 265, 291, 300, 342, 374, 386, 387, 410, 411, 420, 430, 434, 460, 462, 463, 465, 466, 467, 471, 472, 476, 479, 480, 481], "traverseproc": [28, 45, 57, 63, 75, 76], "visit": [28, 63, 76, 95, 99, 120, 181, 259, 291, 294, 311, 330, 340, 413, 459, 460, 462, 463, 466, 474, 480, 481], "simplifi": [28, 33, 42, 66, 93, 95, 104, 108, 122, 126, 133, 156, 167, 181, 195, 199, 214, 224, 248, 253, 281, 317, 335, 336, 373, 374, 376, 400, 408, 425, 433, 459, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481], "py_visit": [28, 63, 76, 99, 480], "my_travers": [28, 99], "noddi": 28, "foo": [28, 78, 79, 85, 86, 87, 88, 89, 94, 100, 101, 102, 104, 108, 114, 118, 120, 149, 153, 165, 174, 191, 194, 198, 226, 241, 245, 248, 253, 260, 264, 265, 266, 270, 281, 286, 289, 290, 291, 292, 294, 295, 297, 300, 302, 306, 309, 317, 332, 338, 342, 356, 360, 383, 384, 386, 387, 388, 403, 405, 409, 410, 411, 420, 421, 425, 428, 430, 433, 434, 439, 460, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481], "bar": [28, 51, 85, 87, 94, 100, 101, 102, 104, 118, 120, 153, 165, 174, 175, 198, 226, 241, 245, 248, 260, 265, 266, 281, 286, 289, 290, 291, 292, 294, 295, 300, 302, 306, 309, 311, 332, 338, 342, 356, 360, 367, 372, 374, 383, 384, 386, 387, 388, 405, 420, 421, 423, 425, 430, 432, 433, 434, 439, 460, 466, 481], "inquiri": [28, 45, 57, 63, 75, 76, 386], "drop": [28, 63, 68, 76, 84, 93, 94, 100, 107, 131, 158, 191, 210, 223, 248, 252, 259, 267, 281, 303, 319, 323, 339, 342, 346, 350, 362, 366, 367, 374, 386, 392, 460, 461, 462, 464, 465, 466, 468, 473, 475, 476, 481], "pygc_collect": [28, 57, 480, 481], "uncondit": [28, 113, 245, 281, 286, 291, 295, 332, 351, 386, 388, 426, 433, 453, 467, 468, 473, 474, 475, 476, 478, 480, 481], "unreach": [28, 210, 225, 384, 426, 478, 480, 481], "pygc_en": [28, 57, 470, 481], "pygc_dis": [28, 57, 470, 481], "pygc_isen": [28, 57, 470, 481], "isen": [28, 225], "pyunstable_gc_visitobject": 28, "gcvisitobjects_t": 28, "live": [28, 63, 67, 73, 84, 101, 149, 181, 205, 221, 245, 246, 248, 249, 251, 253, 281, 291, 297, 303, 338, 339, 356, 392, 398, 400, 408, 423, 426, 444, 459, 460, 461, 462, 468, 473, 481], "capabl": [28, 64, 76, 92, 93, 95, 101, 104, 124, 167, 175, 184, 191, 210, 232, 243, 246, 248, 249, 251, 253, 255, 256, 257, 270, 280, 281, 286, 290, 303, 305, 318, 373, 411, 413, 420, 428, 453, 462, 463, 464, 465, 473, 474, 475, 476, 481], "behaviour": [28, 31, 33, 49, 63, 68, 84, 85, 95, 100, 101, 104, 124, 167, 187, 211, 213, 215, 241, 253, 256, 265, 266, 267, 281, 290, 291, 294, 297, 309, 317, 318, 326, 329, 331, 335, 336, 338, 342, 346, 350, 362, 382, 387, 388, 392, 393, 398, 411, 414, 417, 426, 428, 430, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 474, 475, 477, 478, 481], "multipl": [28, 31, 33, 34, 45, 47, 49, 63, 64, 68, 71, 73, 75, 76, 84, 87, 92, 94, 95, 103, 104, 107, 108, 113, 114, 118, 119, 120, 122, 124, 133, 135, 141, 147, 149, 156, 158, 161, 165, 167, 175, 179, 181, 184, 185, 187, 191, 197, 203, 207, 209, 211, 217, 219, 223, 224, 226, 228, 232, 233, 243, 245, 248, 249, 251, 252, 253, 256, 259, 265, 266, 268, 269, 273, 274, 276, 280, 281, 282, 290, 291, 295, 297, 300, 305, 312, 317, 318, 327, 328, 329, 333, 335, 336, 338, 339, 340, 342, 345, 350, 351, 354, 356, 360, 363, 367, 373, 374, 375, 378, 382, 384, 386, 398, 400, 411, 413, 417, 425, 426, 427, 428, 429, 430, 433, 434, 439, 442, 453, 454, 459, 460, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481], "pygen_new": 29, "pygen_newwithqualnam": 29, "pygenobject": 29, "pygen_typ": 29, "pygen_check": 29, "pygen_checkexact": 29, "tp_hash": [30, 49, 63, 75, 466], "py_hash_t": [30, 49, 63, 75, 473], "py_uhash_t": 30, "pyhash_funcdef": 30, "pyhash_getfuncdef": 30, "hash_bit": [30, 350], "seed_bit": [30, 350], "seed": [30, 33, 34, 87, 291, 316, 339, 341, 350, 424, 453, 467, 473, 480, 481], "456": [30, 68, 73, 101, 184], "secur": [30, 68, 85, 101, 116, 124, 162, 172, 174, 221, 240, 241, 242, 246, 252, 254, 267, 268, 270, 281, 283, 286, 291, 297, 303, 312, 324, 329, 332, 333, 335, 342, 350, 356, 393, 403, 409, 410, 411, 412, 417, 418, 456, 460, 461, 462, 463, 465, 466, 473, 474, 477, 482], "interchang": [30, 68, 101, 115, 141, 151, 181, 182, 184, 211, 233, 265, 334, 342, 345, 367, 384, 426, 433, 460, 466, 473, 474], "algorithm": [30, 33, 42, 68, 84, 85, 87, 104, 107, 117, 124, 131, 139, 144, 147, 149, 156, 171, 180, 181, 184, 188, 191, 200, 206, 220, 223, 228, 233, 246, 252, 256, 257, 264, 267, 273, 278, 279, 306, 335, 339, 342, 350, 362, 388, 393, 420, 421, 428, 454, 460, 462, 463, 465, 467, 469, 470, 473, 474, 477, 478, 479, 480, 481], "pyimport_importmodul": [31, 57, 73, 79, 461, 466, 468, 470, 472, 481], "pyimport_import": [31, 57, 72, 466], "pyimport_importmodulenoblock": [31, 57, 466, 468, 472, 474, 481], "alia": [31, 40, 68, 85, 87, 94, 101, 103, 120, 131, 135, 151, 156, 159, 174, 176, 181, 189, 193, 195, 203, 211, 216, 226, 228, 241, 248, 252, 253, 281, 285, 290, 291, 295, 312, 317, 320, 326, 327, 331, 335, 338, 346, 349, 351, 357, 363, 382, 383, 384, 401, 403, 404, 417, 420, 421, 425, 427, 434, 454, 468, 470, 472, 475, 477, 478, 480, 481], "switch": [31, 33, 35, 61, 64, 68, 75, 84, 99, 107, 108, 109, 110, 126, 131, 135, 156, 191, 223, 228, 241, 243, 245, 290, 303, 317, 320, 322, 338, 342, 343, 350, 356, 382, 387, 410, 430, 439, 448, 453, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481], "pyimport_importmoduleex": [31, 474], "fromlist": [31, 119, 189, 223, 248, 481], "best": [31, 55, 64, 68, 84, 92, 95, 99, 100, 101, 103, 139, 172, 181, 184, 186, 188, 191, 192, 193, 203, 211, 221, 223, 224, 228, 232, 233, 240, 245, 246, 253, 265, 268, 281, 286, 290, 291, 303, 305, 306, 329, 333, 335, 338, 342, 350, 356, 365, 367, 373, 382, 384, 387, 401, 423, 426, 430, 454, 457, 459, 460, 464, 465, 468, 472, 473, 475, 476, 477, 480, 481], "__import__": [31, 189, 223, 248, 266, 297, 426, 430, 448, 466, 469, 474, 477, 480, 481], "top": [31, 33, 42, 68, 73, 84, 85, 92, 94, 95, 100, 101, 103, 104, 108, 113, 118, 133, 137, 140, 149, 150, 156, 165, 168, 174, 175, 177, 183, 187, 188, 189, 191, 205, 211, 223, 224, 228, 241, 245, 246, 248, 249, 253, 255, 256, 264, 274, 283, 291, 294, 297, 300, 302, 303, 306, 310, 311, 312, 322, 339, 340, 349, 350, 356, 360, 363, 367, 369, 371, 373, 374, 382, 383, 386, 387, 397, 411, 417, 418, 420, 425, 427, 430, 433, 434, 438, 448, 449, 453, 460, 461, 462, 463, 465, 466, 467, 468, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481], "packag": [31, 33, 34, 63, 64, 68, 70, 74, 77, 79, 80, 84, 85, 87, 93, 100, 101, 109, 110, 112, 141, 149, 158, 171, 174, 181, 190, 191, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 210, 223, 228, 240, 245, 248, 251, 252, 253, 259, 265, 266, 267, 274, 277, 278, 279, 281, 283, 305, 310, 311, 322, 328, 332, 333, 338, 339, 350, 352, 353, 360, 367, 373, 378, 382, 383, 384, 386, 387, 388, 390, 397, 398, 409, 412, 419, 420, 421, 423, 431, 434, 436, 443, 451, 452, 453, 454, 456, 457, 458, 460, 462, 464, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "submodul": [31, 63, 68, 87, 156, 182, 191, 223, 248, 300, 322, 378, 420, 434, 448, 453, 465, 468, 469, 475, 478, 481], "incomplet": [31, 61, 64, 68, 79, 116, 144, 155, 156, 178, 181, 245, 259, 266, 312, 326, 356, 420, 463, 464, 467, 468, 472, 474, 475, 481], "pyimport_importmodulelevelobject": [31, 57], "pyimport_importmodulelevel": [31, 57, 474], "higher": [31, 33, 56, 68, 95, 97, 100, 101, 113, 124, 138, 144, 167, 175, 184, 189, 200, 202, 222, 223, 228, 240, 252, 256, 259, 265, 266, 267, 268, 277, 279, 280, 281, 286, 291, 297, 303, 307, 323, 330, 335, 338, 339, 342, 350, 356, 357, 363, 380, 384, 393, 398, 411, 461, 462, 465, 466, 473, 474, 475, 478, 481], "absolut": [31, 33, 34, 47, 61, 63, 68, 72, 76, 84, 100, 103, 111, 124, 137, 139, 142, 149, 151, 152, 153, 184, 189, 191, 211, 223, 228, 240, 248, 249, 255, 256, 266, 267, 268, 273, 276, 290, 291, 294, 322, 329, 330, 333, 338, 342, 343, 350, 352, 356, 364, 367, 380, 382, 384, 392, 397, 403, 413, 420, 423, 428, 430, 434, 444, 448, 453, 454, 459, 460, 464, 466, 467, 468, 472, 473, 474, 475, 476, 478, 480, 481, 482], "__builtins__": [31, 146, 223, 253, 427, 448, 468, 470, 481], "instal": [31, 33, 34, 35, 42, 68, 72, 76, 79, 84, 85, 92, 97, 101, 103, 108, 109, 110, 130, 133, 142, 161, 182, 186, 190, 210, 212, 228, 233, 245, 248, 249, 252, 259, 265, 267, 274, 309, 313, 318, 331, 332, 338, 339, 342, 346, 348, 350, 352, 359, 367, 373, 380, 382, 386, 393, 397, 398, 403, 419, 424, 430, 451, 453, 454, 456, 458, 461, 462, 463, 465, 466, 467, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482], "environ": [31, 33, 34, 42, 63, 66, 68, 84, 85, 87, 93, 100, 101, 103, 107, 108, 109, 116, 124, 149, 156, 158, 161, 174, 175, 180, 184, 186, 190, 208, 212, 223, 226, 228, 233, 245, 249, 252, 264, 266, 278, 290, 293, 295, 297, 304, 306, 307, 309, 311, 313, 323, 330, 335, 336, 342, 346, 350, 353, 356, 360, 364, 367, 378, 380, 386, 387, 393, 398, 401, 403, 405, 408, 418, 426, 427, 430, 436, 446, 451, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 466, 468, 469, 470, 472, 473, 474, 475, 478, 479, 480, 481], "pyimport_reloadmodul": [31, 57, 481], "reload": [31, 85, 94, 110, 241, 245, 248, 350, 360, 380, 430, 448, 463, 468, 472, 475, 478, 481], "pyimport_addmoduleobject": [31, 57], "pyimport_addmodul": [31, 57, 73], "pyimport_execcodemodul": [31, 57], "danger": [31, 59, 61, 85, 281, 290, 291, 294, 339, 356, 432, 461, 464, 465, 470, 471, 472, 479, 480, 481], "know": [31, 33, 59, 63, 73, 76, 77, 85, 93, 95, 98, 100, 101, 103, 104, 107, 108, 115, 118, 130, 137, 149, 152, 159, 174, 176, 179, 188, 191, 193, 198, 199, 206, 241, 243, 248, 257, 264, 266, 267, 269, 270, 281, 290, 291, 328, 330, 335, 339, 342, 350, 367, 374, 380, 382, 387, 393, 398, 403, 414, 417, 420, 423, 430, 432, 434, 459, 460, 461, 462, 465, 466, 467, 472, 474, 475, 477, 481], "unknown": [31, 33, 64, 68, 94, 104, 120, 137, 139, 188, 191, 194, 197, 199, 200, 206, 209, 223, 233, 243, 274, 286, 290, 291, 302, 305, 317, 340, 350, 356, 363, 364, 380, 393, 396, 414, 439, 454, 462, 463, 467, 471, 473, 477, 478, 481], "probabl": [31, 33, 56, 73, 75, 79, 85, 92, 98, 101, 103, 104, 141, 156, 157, 174, 181, 191, 198, 211, 228, 281, 291, 295, 306, 316, 333, 335, 336, 338, 339, 341, 350, 353, 382, 387, 393, 403, 404, 413, 432, 454, 460, 461, 462, 463, 465, 466, 468, 473, 474, 481], "damag": [31, 297, 356, 384, 424], "author": [31, 73, 77, 95, 99, 100, 104, 108, 109, 124, 156, 158, 191, 211, 233, 240, 249, 250, 267, 291, 305, 338, 339, 386, 393, 417, 424, 451, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 473, 475, 476, 481], "__spec__": [31, 68, 248, 250, 322, 383, 448, 470, 472, 475, 477, 478, 481], "__loader__": [31, 45, 223, 248, 263, 322, 383, 430, 448, 470, 474, 475, 478, 481], "spec": [31, 45, 61, 68, 87, 106, 209, 234, 237, 242, 248, 253, 260, 322, 339, 343, 350, 374, 387, 388, 392, 417, 421, 429, 463, 472, 475, 476, 477, 478, 479, 480, 481], "loader": [31, 68, 87, 167, 174, 191, 248, 249, 250, 251, 263, 300, 360, 380, 383, 386, 411, 419, 421, 463, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481], "sourcefileload": [31, 248, 472, 474, 477, 481], "__file__": [31, 45, 89, 101, 112, 186, 191, 223, 233, 248, 253, 263, 300, 321, 322, 360, 380, 386, 398, 421, 426, 430, 454, 463, 475, 477, 478, 480, 481], "co_filenam": [31, 253, 379, 426, 467, 481], "applic": [31, 33, 34, 57, 63, 64, 68, 72, 73, 75, 77, 85, 95, 99, 100, 103, 104, 107, 108, 118, 124, 131, 135, 137, 138, 141, 143, 149, 155, 165, 167, 175, 181, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 206, 211, 212, 223, 224, 233, 240, 244, 260, 264, 265, 266, 267, 269, 270, 273, 274, 279, 280, 281, 290, 291, 294, 297, 303, 306, 312, 317, 323, 329, 330, 331, 335, 338, 339, 342, 344, 346, 352, 356, 360, 362, 363, 364, 366, 367, 369, 371, 373, 374, 380, 382, 385, 386, 392, 393, 397, 398, 400, 403, 405, 408, 409, 411, 412, 413, 414, 415, 420, 421, 423, 424, 425, 428, 432, 434, 453, 456, 460, 461, 462, 463, 464, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "__cached__": [31, 223, 248, 322, 430, 470, 472, 473, 475, 481], "pyimport_execcodemoduleex": [31, 57], "pyimport_execcodemodulewithpathnam": [31, 57], "modulespec": [31, 45, 68, 87, 248, 300, 322, 350, 383, 430], "pathnam": [31, 84, 140, 149, 174, 218, 221, 229, 265, 267, 277, 279, 291, 292, 294, 329, 340, 350, 356, 367, 373, 395, 420, 421, 426, 430, 453, 473, 476, 481], "pyimport_execcodemoduleobject": [31, 57, 481], "cpathnam": 31, "figur": [31, 73, 76, 92, 94, 95, 104, 107, 118, 184, 191, 290, 306, 335, 356, 460, 461, 462, 463, 464, 465, 466, 467, 474, 481], "imp": [31, 68, 468, 470, 471, 473, 474, 475, 477, 481], "source_from_cach": [31, 248, 472, 473, 475, 477], "pyimport_getmagicnumb": [31, 57, 474], "magic": [31, 68, 85, 87, 113, 165, 174, 185, 191, 198, 228, 248, 306, 339, 347, 363, 364, 384, 388, 420, 423, 424, 460, 461, 463, 475, 476, 477, 478, 481], "pyc": [31, 33, 34, 68, 86, 87, 161, 248, 272, 279, 297, 309, 330, 342, 350, 360, 380, 420, 421, 426, 430, 448, 453, 454, 459, 461, 463, 464, 466, 467, 471, 472, 475, 476, 480, 481, 482], "four": [31, 58, 64, 89, 92, 94, 104, 107, 118, 130, 156, 175, 188, 189, 205, 209, 240, 245, 253, 256, 257, 265, 266, 269, 276, 279, 290, 312, 316, 332, 335, 336, 342, 343, 345, 367, 374, 382, 387, 433, 439, 459, 466, 469, 473, 480, 481], "pyimport_getmagictag": [31, 57], "tag": [31, 61, 63, 68, 75, 97, 104, 120, 149, 188, 238, 246, 248, 267, 276, 291, 297, 312, 344, 350, 354, 366, 393, 408, 411, 415, 417, 459, 460, 465, 467, 471, 475, 476, 479, 481, 482], "3147": [31, 68, 85, 161, 248, 309, 322, 360, 430, 448, 474, 482], "keep": [31, 33, 39, 63, 73, 85, 94, 99, 101, 103, 104, 107, 118, 126, 137, 142, 149, 156, 158, 167, 174, 175, 177, 179, 184, 189, 191, 194, 209, 212, 224, 232, 241, 245, 250, 253, 256, 259, 269, 276, 290, 291, 294, 297, 303, 305, 317, 336, 342, 346, 350, 360, 367, 386, 393, 400, 408, 413, 425, 426, 430, 434, 461, 463, 464, 465, 466, 467, 473, 475, 478, 481], "mind": [31, 85, 92, 99, 101, 104, 118, 174, 184, 198, 250, 267, 281, 290, 384, 393, 411, 430, 462, 464, 473], "cache_tag": [31, 248, 350, 472, 474, 481], "authorit": [31, 108, 472, 481], "pyimport_getmoduledict": [31, 57, 481], "administr": [31, 33, 59, 100, 149, 153, 246, 285, 286, 291, 332, 335, 364, 405, 427, 459, 464, 474, 479, 480, 481], "pyimport_getmodul": [31, 57, 478, 481], "pyimport_getimport": [31, 57, 481], "finder": [31, 68, 87, 191, 248, 249, 268, 277, 300, 350, 431, 457, 459, 464, 466, 470, 472, 474, 475, 481], "pkg": [31, 248, 300, 419, 434, 453, 454, 458, 460, 461, 465, 467, 470, 471, 472, 479, 481], "__path__": [31, 68, 87, 248, 300, 310, 350, 448, 475, 477, 478, 481], "fetch": [31, 68, 93, 95, 108, 165, 173, 206, 246, 255, 259, 279, 281, 291, 297, 305, 313, 331, 335, 338, 339, 387, 388, 393, 394, 412, 417, 450, 464, 473, 474, 481], "path_importer_cach": [31, 248, 300, 350, 430, 448, 463, 471, 472, 474, 475, 476, 478, 481], "cach": [31, 34, 42, 61, 63, 64, 68, 73, 75, 84, 87, 93, 100, 104, 108, 114, 124, 137, 145, 156, 158, 161, 174, 182, 188, 189, 214, 218, 224, 228, 248, 263, 265, 281, 286, 291, 300, 309, 317, 322, 328, 338, 339, 345, 350, 358, 360, 380, 384, 386, 393, 400, 421, 423, 425, 448, 450, 451, 453, 459, 461, 463, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481], "path_hook": [31, 87, 140, 248, 300, 350, 430, 434, 448, 463, 474, 475, 481], "our": [31, 73, 76, 85, 93, 94, 101, 104, 107, 108, 132, 165, 167, 174, 194, 198, 203, 257, 290, 297, 317, 333, 336, 338, 339, 360, 384, 387, 388, 400, 405, 420, 462, 465, 466, 481], "find": [31, 33, 61, 63, 68, 72, 73, 75, 77, 93, 94, 95, 98, 100, 101, 103, 104, 107, 110, 116, 118, 139, 145, 149, 156, 158, 175, 179, 181, 188, 189, 191, 193, 194, 195, 197, 203, 205, 211, 219, 223, 224, 228, 233, 245, 248, 249, 252, 253, 264, 265, 271, 276, 278, 290, 291, 297, 300, 311, 321, 335, 339, 342, 346, 350, 352, 360, 361, 363, 365, 367, 384, 386, 387, 388, 392, 393, 400, 408, 427, 428, 430, 432, 434, 439, 440, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481], "pyimport_importfrozenmoduleobject": [31, 57, 481], "frozen": [31, 34, 68, 174, 223, 248, 281, 300, 313, 350, 380, 384, 426, 430, 453, 459, 463, 472, 475, 478, 481], "misnom": 31, "pyimport_importfrozenmodul": [31, 57, 481], "_frozen": [31, 174, 471, 481], "freez": [31, 81, 85, 224, 225, 245, 286, 451, 478, 481], "tool": [31, 33, 51, 68, 72, 79, 85, 87, 92, 93, 95, 98, 100, 101, 103, 104, 107, 110, 135, 153, 154, 167, 174, 191, 192, 202, 217, 221, 223, 224, 228, 229, 249, 252, 253, 259, 260, 297, 305, 313, 319, 329, 331, 350, 376, 378, 380, 382, 384, 386, 397, 411, 419, 420, 426, 434, 454, 455, 457, 459, 460, 461, 462, 463, 465, 466, 468, 469, 471, 473, 474, 475, 476, 477, 480, 482], "distribut": [31, 33, 66, 68, 71, 73, 75, 84, 85, 124, 184, 207, 228, 233, 248, 269, 273, 278, 281, 282, 300, 316, 338, 341, 353, 356, 367, 375, 386, 412, 419, 424, 454, 456, 459, 460, 461, 463, 465, 466, 468, 470, 473, 476, 477, 478, 479, 480, 481], "is_packag": [31, 248, 421, 471, 481], "pyimport_frozenmodul": [31, 34, 174, 481], "record": [31, 61, 68, 75, 78, 92, 93, 94, 95, 100, 101, 102, 107, 153, 158, 161, 174, 175, 176, 182, 183, 184, 195, 201, 210, 249, 253, 257, 265, 267, 269, 277, 290, 291, 293, 297, 306, 307, 338, 340, 342, 345, 360, 382, 383, 384, 386, 387, 388, 398, 420, 430, 438, 443, 460, 463, 464, 465, 466, 467, 473, 474, 475, 476, 479, 481], "play": [31, 68, 76, 174, 184, 252, 293, 316, 339, 382, 386, 402, 426, 438, 468, 481], "trick": [31, 85, 174, 223, 295, 338, 350, 384, 388, 438, 462], "collect": [31, 32, 42, 45, 50, 52, 63, 64, 67, 68, 73, 74, 75, 78, 84, 85, 87, 92, 95, 97, 100, 101, 103, 104, 110, 114, 118, 120, 123, 131, 137, 145, 149, 156, 165, 167, 168, 174, 177, 179, 180, 182, 185, 191, 192, 211, 212, 223, 224, 225, 240, 241, 249, 252, 253, 259, 262, 281, 291, 297, 303, 306, 312, 314, 328, 330, 331, 334, 335, 336, 338, 339, 342, 345, 350, 357, 358, 360, 374, 380, 382, 383, 386, 393, 400, 403, 409, 411, 425, 426, 428, 434, 439, 440, 450, 451, 454, 459, 462, 463, 464, 465, 466, 468, 469, 471, 472, 481, 482], "pyimport_appendinittab": [31, 33, 34, 45, 57, 72, 73, 481], "initfunc": 31, "pyimport_extendinittab": [31, 33, 34, 481], "extend": [31, 33, 42, 45, 61, 63, 68, 73, 74, 75, 76, 79, 80, 84, 92, 94, 101, 104, 108, 116, 118, 119, 121, 131, 141, 152, 153, 156, 158, 159, 165, 166, 167, 174, 175, 181, 188, 189, 190, 191, 194, 203, 205, 211, 223, 224, 228, 243, 245, 247, 256, 259, 260, 269, 273, 274, 276, 278, 280, 297, 300, 301, 306, 312, 318, 326, 330, 333, 335, 339, 342, 350, 356, 364, 374, 376, 386, 393, 400, 408, 411, 418, 426, 427, 428, 430, 434, 439, 440, 442, 459, 461, 464, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482], "_inittab": 31, "emb": [31, 33, 34, 66, 68, 72, 85, 161, 191, 244, 248, 367, 411, 462, 466, 467, 478, 479, 481], "conjunct": [31, 188, 190, 191, 223, 253, 266, 329, 335, 339, 384, 429, 433, 469, 475], "newtab": 31, "sentinel": [31, 37, 58, 68, 73, 75, 76, 85, 101, 179, 185, 223, 259, 267, 281, 388, 462, 474, 478, 481], "fault": [31, 68, 100, 174, 182, 183, 254, 290, 295, 320, 331, 364, 379, 465, 467, 474, 481], "insuffici": [31, 159, 184, 191, 210, 250, 281, 291, 387, 477], "high": [32, 33, 38, 42, 60, 64, 68, 73, 74, 79, 84, 85, 100, 101, 103, 108, 124, 126, 128, 131, 134, 135, 137, 147, 162, 175, 181, 184, 189, 192, 199, 224, 246, 252, 257, 258, 259, 264, 268, 281, 287, 291, 293, 297, 306, 307, 316, 317, 326, 330, 331, 335, 338, 339, 341, 350, 351, 354, 356, 364, 384, 401, 434, 462, 463, 464, 465, 466, 472, 473, 474, 475, 476, 478, 480, 481], "queri": [32, 50, 68, 84, 95, 101, 104, 107, 116, 131, 134, 149, 156, 167, 203, 217, 228, 243, 248, 249, 253, 279, 296, 303, 326, 356, 360, 367, 373, 374, 384, 392, 393, 403, 408, 417, 430, 453, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "signal": [32, 33, 34, 49, 59, 63, 68, 92, 95, 99, 101, 104, 113, 128, 130, 131, 133, 135, 138, 139, 140, 164, 174, 175, 183, 185, 186, 189, 191, 211, 240, 252, 255, 256, 258, 259, 265, 266, 273, 281, 288, 290, 291, 295, 297, 307, 317, 320, 326, 327, 329, 335, 338, 339, 343, 346, 350, 360, 363, 364, 369, 379, 384, 393, 411, 413, 417, 428, 430, 453, 460, 461, 462, 463, 464, 465, 466, 467, 470, 473, 477, 479, 481], "categori": [32, 68, 84, 100, 104, 107, 131, 211, 223, 239, 264, 267, 313, 317, 338, 342, 360, 385, 392, 433, 453, 460, 461, 465, 466, 468, 473, 478, 481], "marshal": [32, 65, 68, 85, 140, 156, 252, 260, 267, 296, 377, 417, 463, 464, 467, 476, 481], "pyhash": [32, 65, 68, 424, 454, 481], "perf": [32, 34, 65, 68, 96, 350, 453, 472, 481], "abstract": [32, 55, 63, 68, 74, 76, 78, 79, 84, 85, 87, 91, 92, 93, 124, 130, 131, 167, 174, 180, 181, 184, 206, 211, 219, 224, 242, 249, 252, 256, 262, 267, 278, 288, 291, 299, 327, 335, 339, 342, 350, 384, 423, 426, 428, 463, 465, 467, 468, 470, 473, 474, 476, 477, 478, 480, 481, 482], "configur": [32, 35, 42, 59, 63, 64, 68, 72, 73, 85, 92, 95, 99, 102, 104, 113, 116, 124, 130, 134, 165, 168, 174, 180, 184, 187, 220, 221, 233, 243, 245, 246, 248, 252, 264, 265, 267, 269, 270, 290, 291, 303, 304, 305, 312, 313, 318, 321, 329, 333, 335, 338, 339, 350, 352, 356, 359, 360, 363, 367, 371, 372, 373, 374, 386, 387, 388, 393, 397, 398, 403, 409, 410, 411, 415, 417, 424, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482], "wide": [32, 34, 59, 64, 68, 92, 95, 99, 100, 103, 107, 113, 118, 130, 139, 148, 153, 165, 174, 175, 181, 184, 191, 192, 241, 245, 253, 255, 264, 269, 280, 291, 293, 297, 300, 303, 313, 328, 339, 342, 345, 346, 356, 363, 364, 373, 408, 420, 423, 424, 454, 459, 462, 465, 466, 467, 472, 473, 474, 475, 481], "sub": [32, 45, 50, 68, 95, 99, 100, 101, 104, 116, 120, 122, 131, 174, 175, 176, 181, 188, 189, 192, 194, 199, 203, 205, 212, 229, 246, 250, 252, 259, 266, 269, 276, 289, 306, 312, 317, 328, 342, 350, 360, 373, 384, 386, 388, 403, 411, 428, 429, 441, 449, 459, 460, 462, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 481], "asynchron": [32, 63, 68, 84, 87, 123, 124, 128, 131, 133, 134, 135, 137, 159, 164, 167, 168, 185, 189, 211, 223, 252, 254, 258, 265, 281, 313, 335, 339, 346, 350, 383, 386, 387, 388, 404, 425, 434, 467, 471, 472, 473, 474, 475, 476, 478, 479, 481], "notif": [32, 67, 68, 327, 398, 403, 413, 460, 467, 472, 479, 481], "trace": [32, 34, 35, 42, 63, 68, 73, 97, 100, 102, 113, 142, 154, 155, 169, 174, 183, 189, 212, 224, 239, 246, 252, 253, 255, 291, 295, 338, 350, 360, 363, 379, 382, 424, 426, 434, 453, 454, 461, 462, 463, 467, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481], "advanc": [32, 68, 76, 85, 92, 104, 147, 165, 167, 174, 175, 184, 185, 192, 223, 232, 253, 256, 259, 268, 276, 290, 335, 339, 346, 350, 378, 382, 388, 400, 409, 410, 420, 425, 426, 432, 459, 463, 468, 473, 479, 481, 482], "pywidestringlist": [32, 68, 479], "pystatus": [32, 33, 68, 472, 479], "pypreconfig": [32, 33, 42, 59, 68, 472, 479], "preiniti": [32, 42, 59, 68, 264], "pyconfig": [32, 33, 35, 59, 66, 68, 87, 291, 350, 352, 353, 454, 467, 470, 471, 472, 479, 480, 481], "isol": [32, 33, 45, 63, 66, 68, 87, 95, 96, 112, 120, 137, 191, 245, 350, 352, 360, 386, 387, 397, 453, 459, 471, 472, 475, 477, 480, 481], "py_runmain": [32, 68, 479, 481], "py_getargcargv": [32, 68, 481], "provision": [32, 68, 87, 195, 201, 203, 206, 249, 350, 475, 476, 477, 478, 479, 481], "domain": [32, 68, 97, 100, 124, 143, 201, 206, 207, 210, 228, 233, 241, 242, 246, 264, 266, 267, 281, 285, 333, 335, 336, 339, 344, 345, 350, 380, 392, 396, 453, 463, 465, 472, 474, 475, 476, 477, 478, 481], "custom": [32, 33, 34, 59, 63, 68, 71, 73, 76, 79, 85, 99, 108, 113, 116, 117, 124, 133, 137, 153, 156, 159, 162, 179, 181, 183, 187, 191, 192, 205, 206, 211, 215, 223, 240, 243, 245, 248, 249, 252, 253, 254, 256, 260, 265, 267, 269, 278, 283, 290, 296, 318, 321, 330, 331, 332, 339, 342, 343, 350, 352, 356, 360, 363, 367, 374, 384, 386, 387, 393, 397, 398, 400, 408, 410, 411, 417, 423, 425, 428, 430, 434, 454, 456, 458, 460, 463, 464, 465, 466, 467, 468, 472, 473, 474, 476, 479, 480, 481], "pymalloc": [32, 34, 68, 350, 453, 454, 461, 466, 467, 473, 475, 477, 479, 481, 482], "tracemalloc": [32, 34, 68, 183, 186, 252, 360, 424, 453, 481], "cyclic": [32, 45, 50, 63, 68, 74, 85, 87, 268, 290, 409, 422, 426, 473, 475, 481], "garbag": [32, 42, 45, 50, 52, 63, 64, 67, 68, 73, 74, 75, 84, 85, 87, 95, 97, 101, 123, 137, 149, 157, 167, 168, 174, 177, 191, 211, 212, 252, 272, 281, 290, 291, 313, 335, 350, 358, 360, 386, 400, 409, 425, 426, 428, 450, 454, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "pyinitfrozenextens": 33, "pymem_setalloc": [33, 34, 42, 472], "pymem_setupdebughook": [33, 42, 186, 477, 481], "pyobject_setarenaalloc": [33, 42], "py_setpath": [33, 57, 352, 459, 471, 479, 481], "py_setprogramnam": [33, 34, 35, 57, 72, 73, 459, 471, 481], "py_setpythonhom": [33, 34, 57, 471, 481], "py_setstandardstreamencod": [33, 34, 471, 475, 481], "pysys_addwarnopt": [33, 57, 59, 471, 478, 481], "pysys_addxopt": [33, 57, 59, 471, 481], "pysys_resetwarnopt": [33, 57, 59, 472, 481], "py_isiniti": [33, 35, 57], "pymem_getalloc": [33, 42], "pyobject_getarenaalloc": [33, 42], "py_getbuildinfo": [33, 57, 465], "py_getcompil": [33, 57], "py_getcopyright": [33, 57], "py_getplatform": [33, 57], "py_getvers": [33, 57], "py_decodelocal": [33, 34, 57, 59, 64, 72, 73, 476, 478, 481], "pymem_rawmalloc": [33, 34, 42, 66, 475, 481], "pymem_rawrealloc": [33, 42, 66, 475], "pymem_rawcalloc": [33, 42, 476, 481], "pymem_rawfre": [33, 42, 59, 72, 73], "py_encodelocal": [33, 57, 59, 64, 476, 478, 481], "py_getpath": [33, 35, 57, 470, 472, 481], "py_getprefix": [33, 35, 57, 470, 472, 481], "py_getexecprefix": [33, 35, 57, 470, 472, 481], "py_getprogramfullpath": [33, 35, 57, 470, 472, 479, 481], "py_getpythonhom": [33, 57, 470, 472, 481], "py_getprogramnam": [33, 57, 470, 472, 479, 481], "pyeval_initthread": [33, 57, 473, 480, 481], "py_byteswarningflag": [33, 472, 478], "bb": [33, 95, 103, 158, 259, 265, 453, 478, 481], "bytes_warn": [33, 34, 350, 472, 473], "py_debugflag": [33, 472], "parser_debug": [33, 34, 472], "parser": [33, 34, 68, 73, 79, 89, 95, 101, 104, 107, 110, 116, 120, 155, 157, 158, 173, 188, 191, 192, 194, 197, 198, 199, 201, 203, 204, 206, 211, 215, 236, 252, 260, 266, 271, 283, 295, 302, 307, 317, 329, 342, 348, 393, 397, 407, 408, 409, 410, 411, 413, 415, 429, 433, 434, 439, 441, 445, 449, 453, 454, 460, 461, 463, 464, 465, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481], "expert": [33, 34, 290, 453], "pythondebug": [33, 34, 453, 454], "py_dontwritebytecodeflag": [33, 472], "write_bytecod": [33, 34, 472], "tri": [33, 34, 35, 42, 45, 49, 63, 68, 71, 73, 75, 76, 77, 78, 79, 84, 87, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 110, 112, 113, 118, 120, 124, 131, 133, 136, 137, 138, 139, 144, 147, 149, 157, 158, 164, 165, 173, 174, 175, 181, 184, 186, 188, 189, 191, 198, 201, 207, 210, 211, 223, 224, 226, 228, 243, 245, 248, 253, 256, 259, 260, 264, 265, 266, 267, 269, 274, 277, 280, 281, 290, 291, 293, 294, 295, 297, 300, 303, 306, 311, 312, 313, 317, 318, 320, 321, 328, 329, 330, 331, 333, 335, 338, 339, 342, 346, 350, 356, 357, 359, 360, 363, 365, 367, 373, 379, 382, 384, 387, 388, 393, 397, 398, 400, 401, 405, 406, 411, 417, 418, 420, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 439, 441, 444, 447, 453, 459, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "pythondontwritebytecod": [33, 34, 85, 350, 453, 466], "py_frozenflag": [33, 472], "pathconfig_warn": [33, 34, 472], "_freeze_modul": [33, 481], "frozenmain": 33, "py_hashrandomizationflag": [33, 472], "hash_se": [33, 34, 472], "use_hash_se": [33, 34, 472], "pythonhashse": [33, 34, 426, 453, 474, 481], "secret": [33, 68, 131, 172, 233, 252, 281, 290, 291, 303, 316, 325, 339, 424, 453, 460, 481], "py_ignoreenvironmentflag": [33, 472, 478, 481], "use_environ": [33, 34, 35, 472, 480], "pythonpath": [33, 34, 35, 71, 86, 149, 350, 352, 360, 430, 448, 453, 457, 459, 475, 481], "pythonhom": [33, 34, 35, 352, 360, 453, 459, 472, 477], "py_inspectflag": [33, 472], "script": [33, 34, 35, 66, 68, 72, 73, 75, 79, 85, 87, 97, 100, 101, 102, 108, 110, 118, 150, 161, 167, 186, 189, 191, 211, 220, 226, 228, 238, 242, 243, 248, 249, 252, 278, 290, 295, 306, 307, 309, 311, 322, 328, 332, 338, 350, 352, 353, 360, 367, 374, 376, 384, 386, 393, 397, 401, 418, 419, 427, 430, 432, 433, 434, 448, 451, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "enter": [33, 34, 68, 79, 84, 85, 86, 92, 95, 107, 133, 142, 149, 153, 155, 157, 167, 175, 187, 223, 245, 256, 280, 290, 291, 295, 310, 323, 333, 338, 339, 342, 350, 357, 363, 367, 373, 382, 386, 398, 425, 426, 427, 439, 441, 450, 453, 462, 463, 465, 473, 474, 475, 478, 479, 481], "stdin": [33, 34, 59, 66, 76, 85, 87, 94, 95, 99, 118, 120, 124, 128, 131, 135, 142, 149, 153, 155, 161, 174, 184, 188, 189, 191, 206, 212, 213, 216, 227, 232, 245, 246, 256, 257, 260, 281, 291, 294, 295, 307, 319, 326, 329, 342, 345, 346, 350, 356, 359, 360, 376, 385, 393, 405, 418, 425, 426, 428, 430, 434, 438, 439, 440, 441, 444, 446, 447, 448, 449, 450, 453, 454, 461, 462, 463, 464, 466, 467, 468, 470, 472, 474, 475, 476, 477, 478, 480, 481], "pythoninspect": [33, 34, 453, 463], "py_interactiveflag": [33, 472], "py_isolatedflag": [33, 472], "neither": [33, 76, 95, 98, 104, 131, 141, 142, 156, 179, 184, 189, 191, 194, 203, 207, 223, 240, 260, 265, 268, 269, 273, 281, 290, 291, 294, 297, 317, 336, 338, 339, 342, 350, 374, 378, 384, 386, 401, 423, 424, 426, 428, 453, 472, 475, 477, 478, 481], "directori": [33, 34, 51, 68, 73, 75, 79, 84, 85, 86, 89, 93, 95, 101, 107, 110, 112, 116, 135, 149, 150, 161, 165, 167, 182, 187, 188, 191, 198, 208, 210, 211, 217, 218, 221, 223, 228, 243, 245, 246, 248, 249, 250, 251, 252, 269, 277, 281, 290, 294, 295, 300, 308, 309, 310, 311, 318, 322, 329, 332, 338, 339, 340, 346, 350, 352, 353, 355, 356, 358, 360, 373, 378, 382, 386, 393, 397, 400, 401, 419, 420, 421, 423, 430, 441, 449, 453, 454, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482], "site": [33, 34, 68, 85, 95, 107, 108, 154, 165, 223, 241, 242, 248, 249, 252, 257, 265, 291, 300, 313, 333, 350, 352, 353, 356, 393, 397, 398, 412, 428, 430, 436, 448, 451, 453, 454, 459, 460, 465, 467, 468, 474, 475, 476, 481, 482], "py_legacywindowsfsencodingflag": [33, 472, 481], "legacy_windows_fs_encod": [33, 34, 59, 472], "surrogatepass": [33, 34, 156, 453, 475, 477, 481], "pythonlegacywindowsfsencod": [33, 34, 350, 453, 477], "529": [33, 64, 68, 291, 350, 453, 459, 479, 481], "py_legacywindowsstdioflag": [33, 472], "legacy_windows_stdio": [33, 34, 472], "fileio": [33, 34, 118, 223, 256, 467, 475, 481], "_windowsconsoleio": [33, 34], "pythonlegacywindowsstdio": [33, 34, 350, 453, 477], "528": [33, 34, 68, 459, 481], "py_nositeflag": [33, 472], "site_import": [33, 34, 472], "entail": [33, 34, 453], "py_nousersitedirectori": [33, 472], "user_site_directori": [33, 34, 472], "pythonnousersit": [33, 34, 332, 453, 466], "py_optimizeflag": [33, 472], "optimization_level": [33, 34, 472], "pythonoptim": [33, 34, 453], "py_quietflag": [33, 472], "quiet": [33, 34, 89, 161, 184, 188, 273, 290, 309, 350, 360, 395, 459, 464, 467, 470, 472, 473, 476, 481], "copyright": [33, 34, 69, 73, 86, 121, 166, 233, 245, 350, 411, 424, 446, 448, 453, 473, 479], "py_unbufferedstdioflag": [33, 472], "buffered_stdio": [33, 34, 472], "stdout": [33, 34, 59, 64, 66, 68, 73, 87, 100, 101, 118, 120, 124, 128, 131, 135, 137, 149, 153, 167, 174, 175, 188, 189, 191, 208, 214, 221, 223, 240, 245, 246, 256, 260, 266, 267, 281, 290, 291, 295, 298, 305, 306, 307, 319, 331, 342, 346, 350, 356, 357, 360, 376, 378, 379, 386, 387, 397, 398, 405, 411, 415, 420, 426, 444, 448, 449, 453, 454, 459, 460, 464, 465, 466, 467, 468, 473, 474, 475, 476, 477, 478, 481], "unbuff": [33, 256, 346, 350, 453, 481], "pythonunbuff": [33, 34, 350, 453, 481], "py_verboseflag": [33, 472], "verbos": [33, 34, 63, 68, 89, 98, 100, 101, 118, 158, 175, 185, 186, 191, 208, 224, 226, 266, 290, 299, 317, 329, 330, 343, 350, 355, 356, 360, 365, 380, 386, 397, 417, 426, 459, 462, 463, 464, 466, 467, 471, 472, 473, 475, 477, 478, 481], "show": [33, 34, 68, 72, 73, 76, 85, 89, 92, 93, 94, 95, 97, 99, 100, 101, 107, 108, 118, 124, 137, 149, 150, 153, 156, 158, 167, 174, 177, 184, 186, 187, 188, 191, 200, 211, 214, 223, 224, 233, 240, 241, 245, 246, 248, 259, 260, 265, 276, 281, 290, 291, 297, 305, 306, 319, 330, 332, 335, 338, 339, 341, 342, 343, 356, 367, 371, 373, 374, 376, 378, 379, 382, 386, 387, 388, 397, 398, 400, 417, 418, 419, 429, 433, 440, 449, 450, 451, 453, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481], "cleanup": [33, 34, 35, 59, 68, 95, 101, 113, 133, 138, 162, 167, 212, 291, 336, 346, 350, 358, 360, 386, 388, 400, 403, 409, 425, 426, 427, 428, 453, 460, 462, 465, 467, 468, 472, 473, 474, 479, 481], "pythonverbos": [33, 34, 453], "fundament": [33, 63, 68, 116, 192, 257, 281, 290, 297, 305, 306, 338, 383, 400, 430, 459, 460, 466, 472, 477, 481], "builtin": [33, 34, 35, 53, 63, 68, 85, 87, 93, 120, 140, 156, 158, 189, 191, 223, 228, 233, 242, 245, 248, 252, 253, 257, 259, 266, 297, 306, 313, 321, 332, 342, 350, 383, 384, 387, 388, 425, 426, 428, 430, 433, 435, 438, 448, 454, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480], "__main__": [33, 34, 35, 66, 68, 79, 84, 85, 87, 93, 100, 101, 102, 124, 142, 153, 164, 186, 188, 191, 198, 211, 226, 248, 252, 277, 281, 290, 295, 297, 306, 311, 313, 321, 322, 331, 336, 338, 340, 360, 365, 380, 382, 384, 386, 387, 388, 397, 398, 400, 405, 419, 427, 431, 435, 438, 448, 453, 461, 464, 465, 466, 467, 469, 473, 474, 475, 476, 479, 480, 481], "argv": [33, 34, 35, 66, 68, 72, 73, 101, 112, 116, 124, 134, 140, 186, 188, 191, 216, 226, 245, 290, 291, 295, 307, 322, 336, 340, 350, 354, 367, 386, 405, 441, 446, 448, 449, 453, 463, 466, 467, 468, 473, 478, 479, 481], "pysys_setargvex": [33, 57, 466, 467, 471, 473, 481], "py_finalizeex": [33, 35, 57, 59, 72, 99, 477, 481], "py_initializefromconfig": [33, 34, 42, 352, 472, 479, 481], "consol": [33, 34, 66, 68, 85, 92, 100, 101, 174, 176, 178, 191, 199, 245, 266, 291, 295, 311, 318, 346, 350, 402, 453, 459, 462, 466, 473, 474, 478, 481], "o_text": [33, 280, 291], "o_binari": [33, 34, 280, 291], "affect": [33, 45, 59, 60, 64, 68, 73, 84, 93, 94, 95, 101, 104, 137, 142, 165, 175, 181, 184, 189, 191, 200, 203, 223, 228, 241, 245, 248, 256, 264, 267, 269, 276, 291, 305, 317, 318, 319, 320, 335, 338, 339, 346, 352, 354, 356, 360, 364, 373, 374, 382, 384, 386, 387, 388, 392, 398, 400, 403, 408, 425, 426, 428, 430, 434, 453, 454, 459, 460, 461, 462, 463, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "py_initializeex": [33, 57, 99, 481], "initsig": 33, "registr": [33, 59, 159, 167, 291, 297, 327, 393, 403, 418, 466, 481], "undo": [33, 153, 175, 245, 265, 382, 466, 481], "py_newinterpret": [33, 57, 99, 481], "ideal": [33, 63, 95, 101, 103, 107, 181, 350, 398, 464, 473], "flush": [33, 100, 101, 105, 113, 124, 128, 131, 134, 147, 156, 158, 175, 212, 223, 243, 256, 265, 267, 268, 269, 276, 281, 291, 312, 320, 331, 335, 346, 350, 360, 397, 403, 411, 422, 474, 475, 477, 479, 481], "restart": [33, 101, 175, 210, 245, 266, 295, 331, 359, 364, 466, 467, 476, 478, 479, 481], "itself": [33, 42, 45, 49, 51, 61, 63, 64, 67, 68, 72, 73, 75, 76, 85, 93, 94, 95, 99, 100, 101, 104, 108, 113, 117, 118, 124, 131, 137, 142, 149, 152, 153, 161, 174, 175, 176, 179, 181, 186, 189, 191, 193, 195, 201, 203, 211, 213, 223, 224, 241, 243, 245, 246, 248, 253, 255, 257, 259, 260, 265, 266, 267, 269, 279, 280, 281, 286, 290, 291, 294, 297, 306, 312, 317, 329, 330, 335, 338, 339, 342, 343, 344, 346, 350, 353, 356, 357, 359, 360, 363, 374, 379, 382, 383, 384, 386, 387, 392, 393, 395, 397, 398, 412, 413, 414, 417, 426, 427, 428, 430, 432, 433, 434, 453, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 478, 480, 481], "loadabl": [33, 63, 99, 248, 305, 338, 454, 459, 481], "dll": [33, 57, 68, 77, 84, 174, 267, 291, 350, 367, 459, 465, 466, 470, 475, 479, 481], "unload": [33, 99, 360, 400, 481], "hunt": [33, 290, 481], "develop": [33, 34, 68, 75, 77, 78, 85, 87, 92, 99, 100, 101, 104, 107, 123, 124, 149, 159, 167, 174, 184, 185, 211, 212, 233, 248, 252, 265, 266, 267, 290, 291, 305, 311, 338, 342, 346, 350, 360, 366, 367, 373, 384, 398, 417, 420, 423, 453, 454, 455, 457, 459, 461, 462, 463, 464, 465, 467, 468, 472, 473, 474, 475, 476, 479, 480, 481, 482], "random": [33, 34, 35, 68, 73, 84, 85, 87, 92, 95, 101, 107, 116, 124, 132, 147, 156, 171, 172, 174, 191, 216, 217, 224, 245, 252, 255, 259, 281, 288, 290, 306, 317, 324, 325, 326, 339, 341, 356, 360, 382, 386, 396, 408, 422, 424, 426, 449, 453, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 474, 475, 476, 479, 481], "amount": [33, 45, 73, 76, 84, 85, 95, 124, 131, 137, 175, 184, 233, 256, 257, 268, 281, 286, 290, 291, 293, 294, 297, 303, 305, 320, 328, 330, 331, 335, 340, 342, 362, 363, 364, 367, 374, 382, 393, 409, 461, 464, 466, 473, 475, 476, 477, 478, 480, 481], "tie": [33, 184, 306, 339, 351, 425, 479, 481], "_pysys_clearaudithook": [33, 140], "py_fin": [33, 34, 57, 467, 481], "stdio_encod": [33, 34, 350], "stdio_error": [33, 34, 350], "pythonioencod": [33, 34, 291, 350, 453, 466, 475, 481], "backslashreplac": [33, 34, 107, 156, 212, 223, 256, 265, 291, 342, 350, 453, 463, 476, 478, 481], "program_nam": [33, 34], "durat": [33, 101, 124, 133, 137, 181, 269, 281, 306, 335, 336, 339, 342, 350, 359, 360, 363, 364, 386, 404, 467, 472, 473, 474, 476, 479, 481], "prefix": [33, 34, 35, 47, 58, 61, 63, 64, 68, 73, 98, 103, 104, 116, 153, 157, 161, 165, 171, 174, 175, 184, 188, 189, 201, 211, 226, 228, 233, 241, 243, 245, 254, 266, 267, 280, 291, 295, 300, 310, 312, 313, 317, 330, 332, 342, 343, 345, 350, 352, 358, 360, 362, 367, 373, 374, 378, 386, 387, 397, 398, 408, 411, 413, 417, 421, 425, 429, 433, 434, 438, 447, 448, 453, 454, 458, 459, 463, 466, 467, 472, 473, 474, 476, 477, 479, 481], "complic": [33, 63, 73, 92, 94, 95, 99, 103, 104, 107, 108, 139, 156, 167, 174, 179, 188, 191, 213, 224, 241, 290, 297, 317, 364, 426, 428, 460, 462, 463, 464, 465, 466, 467, 469, 473, 481], "usr": [33, 35, 79, 84, 89, 95, 97, 101, 107, 149, 165, 174, 198, 228, 229, 270, 290, 292, 294, 301, 317, 324, 332, 342, 346, 350, 353, 358, 364, 367, 380, 393, 419, 436, 446, 451, 453, 454, 457, 458, 459, 461, 463, 465, 470, 473, 475, 476, 481], "bin": [33, 35, 68, 72, 79, 84, 95, 101, 107, 108, 149, 162, 165, 198, 223, 243, 249, 290, 291, 294, 299, 342, 343, 353, 393, 394, 397, 419, 426, 436, 446, 448, 451, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 481], "makefil": [33, 68, 72, 73, 79, 229, 233, 256, 294, 335, 339, 353, 426, 456, 460, 461, 466, 467, 472, 474, 475, 476, 477, 481], "exec": [33, 73, 84, 110, 120, 140, 142, 155, 157, 191, 210, 211, 223, 225, 248, 291, 295, 306, 342, 346, 349, 350, 360, 367, 376, 378, 379, 380, 426, 427, 434, 435, 436, 438, 448, 454, 460, 461, 462, 464, 465, 468, 470, 475, 476, 481], "exec_prefix": [33, 34, 35, 281, 332, 350, 352, 378, 397, 448, 453, 454, 458, 472, 473], "background": [33, 68, 77, 92, 101, 124, 137, 165, 167, 175, 244, 245, 267, 281, 291, 338, 346, 360, 363, 367, 373, 374, 382, 425, 426, 450, 464, 475, 481], "plat": [33, 459, 477, 481], "subtre": [33, 411, 460], "speak": [33, 34, 68, 73, 85, 181, 342, 345, 354], "hardwar": [33, 107, 139, 175, 184, 291, 293, 320, 335, 346, 364, 403, 467, 476, 481], "softwar": [33, 68, 69, 77, 80, 95, 100, 101, 107, 149, 156, 175, 185, 190, 191, 192, 210, 226, 233, 243, 244, 245, 264, 265, 286, 291, 305, 339, 364, 382, 397, 403, 417, 424, 457, 459, 460, 461, 463, 464, 466, 467, 481, 482], "sparc": [33, 293], "machin": [33, 51, 64, 73, 84, 87, 100, 101, 131, 156, 175, 176, 181, 198, 210, 223, 228, 241, 253, 258, 266, 267, 268, 270, 281, 282, 286, 291, 294, 301, 306, 311, 331, 333, 335, 338, 339, 342, 345, 363, 418, 419, 426, 432, 454, 459, 460, 461, 462, 465, 466, 467, 469, 472, 473, 474, 478, 479, 481], "solari": [33, 68, 244, 291, 301, 304, 326, 350, 353, 364, 460, 467, 473, 474, 476, 478, 481], "consid": [33, 34, 39, 42, 49, 55, 56, 63, 64, 68, 72, 73, 75, 76, 85, 92, 93, 94, 95, 98, 99, 101, 104, 110, 118, 124, 126, 142, 149, 152, 161, 165, 174, 175, 179, 181, 182, 184, 188, 189, 191, 194, 202, 203, 206, 223, 224, 226, 228, 233, 241, 248, 250, 251, 253, 255, 257, 259, 260, 264, 265, 266, 267, 268, 269, 273, 281, 286, 290, 294, 295, 297, 306, 312, 317, 318, 326, 329, 331, 338, 339, 342, 343, 345, 350, 353, 356, 360, 362, 363, 364, 367, 383, 384, 386, 387, 392, 393, 397, 400, 408, 409, 410, 418, 419, 425, 426, 427, 428, 430, 434, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 475, 476, 477, 478, 479, 480, 481], "intel": [33, 86, 139, 293, 306, 345, 454, 457, 465, 467, 476, 477, 479, 480, 481], "linux": [33, 34, 51, 68, 71, 72, 80, 83, 84, 92, 93, 96, 97, 113, 116, 130, 174, 175, 184, 210, 212, 213, 228, 245, 255, 256, 267, 276, 281, 293, 304, 307, 320, 324, 326, 330, 331, 335, 340, 346, 350, 353, 356, 358, 360, 363, 364, 367, 381, 393, 446, 453, 454, 456, 459, 460, 461, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "major": [33, 68, 77, 93, 94, 103, 107, 108, 120, 165, 175, 181, 185, 192, 201, 204, 206, 228, 233, 241, 290, 291, 301, 303, 311, 342, 350, 353, 356, 392, 459, 460, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 479, 480, 481], "revis": [33, 68, 107, 108, 345, 406, 424, 460, 465, 466, 469, 477, 478, 481], "stori": [33, 73, 145, 444], "strategi": [33, 42, 63, 73, 76, 79, 118, 133, 156, 267, 360, 367, 386, 401, 422, 423, 430, 439, 463, 468, 473, 478, 481], "meaningless": [33, 107, 461, 462, 475, 481], "mount": [33, 291, 292, 294, 330, 467, 472, 475, 478, 481], "automount": 33, "comput": [33, 34, 49, 63, 64, 68, 72, 75, 76, 85, 87, 92, 93, 95, 98, 100, 101, 104, 107, 131, 137, 139, 144, 152, 158, 159, 176, 179, 181, 183, 184, 189, 191, 214, 223, 224, 233, 252, 253, 257, 259, 265, 267, 273, 281, 291, 292, 305, 306, 309, 316, 332, 335, 336, 339, 342, 350, 361, 363, 367, 382, 386, 393, 403, 424, 425, 426, 428, 433, 434, 438, 449, 453, 454, 457, 460, 461, 462, 463, 465, 466, 467, 469, 471, 472, 473, 475, 478, 479, 481], "delimit": [33, 59, 68, 85, 87, 104, 165, 173, 191, 199, 219, 245, 246, 269, 286, 290, 297, 317, 318, 342, 343, 346, 367, 376, 392, 423, 431, 450, 459, 463, 473, 481], "maco": [33, 34, 57, 68, 80, 81, 83, 84, 85, 97, 107, 109, 113, 116, 131, 174, 182, 213, 255, 267, 276, 281, 291, 302, 306, 307, 318, 326, 328, 330, 331, 332, 335, 338, 339, 340, 350, 353, 360, 363, 364, 366, 367, 371, 374, 381, 393, 401, 424, 437, 451, 453, 456, 457, 460, 461, 462, 463, 465, 466, 467, 470, 471, 472, 477, 478], "startup": [33, 34, 68, 186, 212, 248, 264, 266, 291, 332, 342, 350, 361, 366, 380, 430, 453, 457, 465, 466, 474, 475, 476, 478, 480, 481], "module_search_path": [33, 34, 59, 471, 481], "module_search_paths_set": [33, 34, 59, 471, 481], "knowledg": [33, 92, 181, 192, 264, 328, 466], "compon": [33, 42, 45, 64, 68, 73, 85, 93, 100, 101, 104, 107, 108, 137, 156, 158, 175, 181, 184, 192, 206, 228, 241, 243, 248, 249, 252, 253, 254, 279, 291, 294, 317, 329, 330, 342, 343, 350, 351, 353, 354, 356, 364, 367, 374, 382, 383, 384, 393, 403, 408, 413, 418, 420, 423, 426, 430, 433, 453, 459, 463, 464, 466, 467, 468, 472, 473, 475, 476, 477, 478, 481], "wchar_": 33, "0a5": 33, "py3k": [33, 87, 103, 350, 353, 468], "63103m": 33, "2008": [33, 156, 181, 221, 330, 345, 411, 424, 466, 467, 468, 473, 481], "00": [33, 89, 102, 105, 107, 181, 184, 219, 233, 265, 317, 339, 364, 382, 423, 449, 450, 453, 465, 466, 467, 473, 477, 480, 481], "53": [33, 78, 101, 102, 137, 181, 184, 273, 316, 341, 342, 364, 388, 442, 465, 481], "55": [33, 93, 95, 100, 101, 102, 137, 184, 224, 282, 316, 317, 382, 439, 440, 442, 447, 448, 453, 477], "gcc": [33, 35, 63, 174, 301, 350, 446, 453, 454, 466, 467, 469, 470, 471, 475, 477, 481], "minor": [33, 63, 66, 68, 77, 79, 84, 92, 101, 103, 108, 120, 175, 201, 204, 291, 301, 311, 350, 353, 356, 413, 454, 459, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 481], "period": [33, 85, 94, 100, 149, 175, 181, 184, 218, 224, 265, 267, 281, 292, 300, 321, 335, 336, 339, 341, 362, 374, 418, 428, 433, 459, 460, 463, 464, 465, 466, 467, 472, 473, 481], "offici": [33, 103, 156, 193, 207, 274, 293, 339, 367, 386, 409, 417, 426, 457, 459, 460, 461, 462, 465, 467, 473, 474, 476, 478, 480, 481], "lower": [33, 64, 68, 72, 84, 85, 87, 92, 101, 104, 106, 120, 124, 131, 137, 138, 144, 153, 156, 158, 161, 165, 175, 176, 178, 184, 193, 194, 198, 200, 201, 203, 209, 223, 224, 234, 243, 269, 281, 286, 291, 306, 317, 320, 323, 335, 338, 342, 350, 363, 364, 373, 375, 382, 384, 392, 393, 398, 426, 428, 434, 461, 463, 464, 465, 466, 467, 469, 473, 475, 480, 481], "suno": [33, 301, 356, 481], "sunos5": [33, 350], "darwin": [33, 301, 350, 364, 460, 466, 476, 481], "1991": [33, 69, 80, 338, 424], "1995": [33, 69, 207, 424, 460, 481], "sticht": [33, 69, 424], "mathematisch": [33, 69, 424], "centrum": [33, 69, 424], "amsterdam": [33, 364, 424], "67": [33, 102, 219, 223, 335, 341, 380, 382, 444, 466, 481], "aug": [33, 95, 181, 421, 462, 463], "1997": [33, 145, 424, 467, 473], "22": [33, 77, 101, 104, 107, 148, 158, 171, 174, 181, 189, 234, 245, 257, 259, 265, 282, 316, 335, 339, 343, 382, 421, 424, 442, 463, 472, 473, 479, 480, 481], "34": [33, 101, 137, 181, 184, 219, 224, 335, 339, 341, 428, 439, 447, 448, 473, 481], "argc": [33, 34, 66, 72, 73, 189, 481], "updatepath": [33, 466, 467], "parse_argv": [33, 34, 35, 481], "safe_path": [33, 34, 350, 471], "host": [33, 68, 84, 101, 105, 124, 134, 140, 156, 175, 176, 207, 210, 221, 223, 240, 241, 243, 245, 246, 254, 255, 267, 269, 281, 284, 285, 286, 291, 292, 294, 303, 311, 317, 333, 335, 336, 339, 342, 344, 345, 357, 360, 392, 393, 396, 405, 417, 454, 459, 460, 463, 465, 466, 467, 473, 474, 475, 476, 477, 478, 481], "condit": [33, 59, 63, 68, 73, 75, 78, 85, 87, 94, 95, 108, 122, 131, 135, 137, 138, 142, 162, 179, 184, 188, 189, 197, 211, 224, 226, 238, 246, 248, 249, 255, 256, 265, 266, 269, 270, 279, 281, 295, 307, 312, 317, 325, 326, 335, 339, 350, 351, 358, 360, 384, 386, 398, 400, 410, 412, 414, 417, 424, 425, 426, 427, 431, 443, 450, 453, 460, 461, 462, 464, 466, 467, 470, 473, 474, 475, 476, 477, 479, 480, 481, 482], "py_fatalerror": [33, 35, 42, 57, 59, 64, 480, 481], "prepend": [33, 34, 93, 101, 156, 161, 176, 200, 224, 259, 267, 269, 286, 290, 299, 310, 329, 330, 350, 354, 362, 411, 419, 453, 459, 472, 481], "orig_argv": [33, 34, 350, 470, 481], "themselv": [33, 63, 73, 75, 85, 98, 100, 104, 139, 149, 152, 156, 165, 174, 192, 206, 228, 259, 260, 273, 281, 295, 297, 317, 330, 338, 342, 360, 362, 384, 386, 409, 417, 426, 428, 430, 462, 465, 466, 467, 472, 473, 475, 476, 478, 481], "cve": [33, 342, 466, 467, 470, 471, 478, 479, 480, 481], "5983": [33, 466, 467], "achiev": [33, 45, 63, 72, 85, 95, 99, 101, 103, 118, 156, 165, 174, 224, 243, 259, 265, 281, 318, 339, 350, 360, 363, 367, 372, 388, 393, 411, 426, 433, 434, 460, 462, 463, 465, 475, 476, 481], "manual": [33, 45, 61, 68, 72, 73, 77, 79, 84, 85, 92, 93, 95, 99, 101, 103, 107, 110, 118, 124, 130, 131, 137, 162, 174, 175, 183, 191, 195, 204, 213, 223, 265, 269, 281, 290, 291, 300, 302, 311, 318, 326, 335, 338, 339, 342, 354, 356, 359, 364, 366, 373, 384, 387, 408, 411, 419, 422, 426, 432, 449, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 472, 474, 475, 476, 478, 479, 481], "pop": [33, 35, 80, 84, 85, 101, 119, 158, 159, 184, 189, 192, 201, 234, 259, 269, 291, 303, 329, 342, 373, 374, 382, 386, 397, 426, 433, 440, 450, 462, 463, 464, 465, 466, 473, 475, 476, 481], "pysys_setargv": [33, 57, 466, 467, 471, 481], "pyrun_simplestr": [33, 34, 66, 72, 79, 86, 466], "home": [33, 34, 68, 85, 86, 92, 101, 104, 149, 153, 165, 175, 212, 232, 245, 249, 269, 270, 291, 292, 294, 295, 304, 308, 312, 313, 318, 329, 332, 346, 352, 360, 367, 373, 382, 397, 432, 436, 451, 454, 459, 466, 472, 473, 474, 476, 479, 481], "simplest": [33, 63, 72, 73, 76, 95, 98, 99, 100, 104, 108, 118, 156, 167, 184, 191, 198, 265, 297, 317, 339, 363, 384, 386, 426, 428, 453, 460, 462, 463], "simultan": [33, 63, 101, 103, 135, 136, 147, 184, 245, 256, 259, 269, 279, 328, 336, 338, 360, 363, 373, 434, 459, 466, 476, 479, 481], "twice": [33, 34, 77, 95, 101, 103, 107, 144, 161, 165, 181, 186, 212, 253, 273, 317, 338, 376, 398, 420, 453, 460, 462, 463, 464, 466, 467, 477, 479, 481], "concurr": [33, 68, 84, 87, 112, 121, 122, 124, 127, 128, 131, 132, 135, 168, 224, 252, 269, 281, 294, 297, 309, 318, 328, 338, 339, 346, 350, 363, 411, 441, 467, 471, 472, 479, 481, 482], "setswitchinterv": [33, 84, 350, 360, 448, 473, 480, 481], "potenti": [33, 34, 63, 85, 95, 99, 101, 103, 124, 165, 171, 181, 221, 223, 246, 248, 251, 253, 259, 265, 266, 267, 281, 291, 297, 303, 336, 339, 342, 350, 362, 383, 384, 386, 392, 419, 426, 430, 453, 459, 461, 462, 466, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481], "meantim": [33, 481], "bookkeep": [33, 68, 175, 288, 472], "pythreadst": [33, 57, 470, 471, 472, 475, 480, 481], "pythreadstate_get": [33, 57, 481], "reacquir": [33, 174, 363], "py_end_allow_thread": [33, 57, 73, 479, 481], "hidden": [33, 85, 177, 189, 245, 295, 306, 336, 374, 382, 472, 474, 478, 479, 480, 481], "close": [33, 51, 63, 66, 68, 76, 78, 79, 85, 95, 99, 100, 101, 105, 107, 115, 118, 124, 128, 130, 131, 133, 134, 135, 137, 149, 151, 152, 153, 155, 156, 159, 165, 167, 168, 175, 182, 186, 188, 189, 197, 205, 206, 211, 212, 216, 221, 223, 232, 233, 238, 240, 241, 245, 246, 256, 265, 267, 268, 269, 273, 276, 279, 281, 282, 286, 290, 291, 293, 299, 306, 307, 312, 318, 326, 327, 328, 329, 331, 333, 335, 336, 338, 339, 342, 346, 347, 350, 356, 357, 358, 360, 363, 364, 367, 371, 373, 374, 376, 382, 384, 386, 387, 388, 393, 397, 399, 403, 405, 411, 414, 415, 417, 418, 419, 420, 426, 428, 429, 433, 441, 444, 450, 453, 460, 464, 465, 466, 467, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481], "expand": [33, 58, 63, 75, 94, 104, 107, 165, 184, 191, 228, 245, 253, 257, 259, 266, 281, 290, 294, 312, 317, 342, 353, 362, 364, 367, 374, 392, 403, 408, 410, 411, 413, 418, 428, 459, 462, 463, 466, 473, 474, 475, 476, 477, 478, 479, 480, 481], "_save": 33, "pyeval_savethread": [33, 57, 473], "pyeval_restorethread": [33, 57, 473, 479, 481], "compress": [33, 68, 95, 98, 101, 115, 117, 131, 156, 165, 198, 216, 232, 233, 252, 257, 259, 274, 279, 293, 297, 330, 334, 339, 340, 347, 356, 399, 419, 420, 422, 449, 462, 463, 465, 467, 469, 473, 474, 475, 476, 477, 478, 479, 481], "cryptograph": [33, 233, 291, 339, 411, 477], "zlib": [33, 68, 84, 104, 117, 156, 232, 233, 252, 330, 360, 420, 449, 462, 463, 465, 470, 471, 480, 481], "hashlib": [33, 68, 84, 171, 172, 235, 252, 325, 338, 424, 454, 466, 467, 468, 481], "dedic": [33, 68, 101, 165, 191, 233, 339, 342, 360, 384, 481], "aforement": [33, 474], "pygilstate_ensur": [33, 57, 479, 481], "pygilstate_releas": [33, 57], "idiom": [33, 73, 85, 103, 110, 112, 118, 191, 223, 281, 329, 339, 350, 384, 400, 463, 468, 473, 474, 480, 481], "pygilstate_st": [33, 57], "gstate": 33, "action": [33, 42, 55, 68, 73, 75, 76, 89, 92, 104, 113, 116, 142, 153, 158, 167, 175, 188, 198, 213, 226, 240, 246, 279, 281, 291, 295, 299, 306, 307, 323, 326, 331, 336, 338, 342, 350, 356, 357, 359, 363, 374, 382, 386, 387, 393, 397, 398, 424, 426, 439, 453, 460, 461, 463, 464, 465, 466, 467, 469, 473, 475, 480, 481], "callsomefunct": 33, "beyond": [33, 68, 74, 92, 98, 100, 104, 116, 181, 184, 195, 201, 253, 260, 266, 269, 280, 291, 317, 335, 338, 339, 342, 345, 403, 425, 432, 461, 472, 474, 481], "pygilstate_": 33, "mix": [33, 42, 68, 101, 103, 114, 165, 184, 202, 203, 204, 205, 216, 223, 226, 257, 273, 281, 291, 293, 307, 336, 342, 353, 360, 384, 392, 425, 426, 433, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 481], "unsupport": [33, 34, 68, 89, 108, 113, 118, 124, 165, 181, 191, 223, 228, 256, 281, 282, 293, 297, 302, 335, 339, 346, 363, 384, 392, 393, 403, 420, 430, 441, 459, 460, 464, 466, 473, 477, 480, 481], "face": [33, 107, 124, 147, 245, 267, 300, 392, 423, 460, 466, 468, 474, 475, 476, 481], "impact": [33, 68, 75, 165, 248, 291, 305, 332, 338, 339, 345, 346, 360, 384, 481], "fact": [33, 64, 73, 85, 95, 100, 104, 108, 124, 165, 174, 184, 191, 204, 221, 223, 248, 277, 290, 297, 306, 342, 356, 367, 382, 384, 393, 419, 426, 428, 430, 432, 459, 460, 461, 466, 472, 474, 475, 476, 481], "solv": [33, 84, 85, 95, 104, 245, 281, 328, 345, 356, 384, 387, 388, 425, 462, 463, 465, 469, 473, 475, 479, 481], "afterward": [33, 72, 93, 174, 181, 184, 259, 291, 326, 338, 350, 357, 419, 426, 462, 463, 466, 481], "pthread_atfork": 33, "accomplish": [33, 85, 103, 118, 175, 246, 328, 408, 425, 481], "deadlock": [33, 135, 164, 210, 212, 265, 281, 291, 314, 336, 346, 350, 363, 426, 466, 473, 474, 481], "defunct": 33, "pyos_afterfork_child": [33, 57, 59, 291, 472, 478, 479, 481], "necessari": [33, 49, 61, 63, 64, 72, 73, 76, 77, 84, 85, 93, 94, 95, 98, 99, 100, 101, 103, 104, 110, 113, 118, 131, 137, 141, 152, 153, 156, 159, 165, 167, 175, 182, 184, 191, 192, 193, 194, 203, 204, 205, 206, 207, 211, 223, 224, 240, 241, 245, 246, 248, 259, 264, 265, 268, 269, 270, 273, 276, 281, 286, 290, 291, 297, 300, 306, 330, 333, 335, 338, 339, 342, 344, 345, 346, 351, 353, 354, 360, 362, 363, 372, 374, 382, 386, 400, 403, 406, 408, 410, 413, 417, 420, 426, 427, 428, 429, 434, 459, 462, 463, 465, 466, 467, 469, 472, 474, 475, 476, 477, 479, 481], "go": [33, 42, 73, 75, 76, 78, 79, 85, 92, 94, 95, 100, 101, 103, 104, 108, 113, 131, 137, 149, 175, 187, 191, 198, 245, 248, 311, 317, 338, 339, 346, 350, 353, 357, 363, 364, 378, 392, 393, 425, 444, 455, 460, 461, 462, 463, 465, 467, 468, 481], "belong": [33, 42, 58, 63, 73, 85, 94, 99, 137, 191, 241, 257, 270, 279, 290, 291, 312, 336, 338, 342, 374, 383, 398, 408, 414, 425, 426, 467, 474, 481], "pyinterpreterst": [33, 34, 57, 63, 470, 479, 480, 481], "natur": [33, 85, 94, 104, 107, 124, 152, 156, 174, 184, 191, 192, 228, 259, 273, 276, 306, 328, 335, 374, 400, 401, 411, 428, 433, 460, 464, 466, 467, 468, 469, 473, 477, 478, 481], "cooper": [33, 87, 114, 137, 201, 223, 339, 350, 367, 424, 478, 481], "interp": [33, 367, 481], "didn": [33, 76, 79, 85, 103, 104, 107, 167, 242, 290, 317, 333, 350, 388, 426, 460, 461, 462, 464, 465, 466, 467, 475, 478, 480, 481], "pyeval_threadsiniti": [33, 57, 464, 480, 481], "tstate": [33, 471, 472, 480, 481], "ensu": [33, 473], "_py_isfin": [33, 479], "unwant": [33, 85, 356, 478, 481], "needn": [33, 317, 345, 478], "pythreadstate_swap": [33, 57], "swap": [33, 72, 156, 158, 174, 189, 259, 281, 320, 335, 345, 360, 426, 434, 471, 478, 481], "readi": [33, 64, 80, 92, 100, 101, 103, 130, 131, 134, 142, 168, 174, 184, 188, 240, 243, 256, 267, 281, 326, 327, 335, 339, 364, 379, 414, 415, 460, 463, 473, 474, 476, 481], "uniqu": [33, 68, 73, 75, 93, 95, 97, 100, 103, 107, 113, 118, 158, 174, 181, 182, 188, 201, 203, 207, 209, 210, 223, 226, 234, 253, 257, 259, 260, 269, 279, 291, 297, 303, 312, 338, 339, 342, 351, 353, 363, 371, 374, 384, 386, 387, 392, 396, 424, 425, 426, 430, 438, 440, 454, 459, 464, 465, 467, 469, 472, 473, 478, 480, 481], "henc": [33, 73, 101, 167, 189, 191, 245, 248, 251, 267, 281, 290, 299, 306, 320, 329, 342, 345, 346, 363, 398, 425, 426, 428, 464, 475, 478, 481], "gilstat": [33, 481], "everi": [33, 42, 49, 58, 68, 73, 75, 77, 85, 93, 95, 99, 100, 101, 104, 107, 108, 110, 124, 130, 137, 138, 141, 144, 156, 165, 168, 174, 175, 181, 182, 184, 185, 188, 189, 191, 192, 194, 203, 209, 212, 223, 228, 241, 243, 245, 249, 253, 257, 259, 260, 265, 267, 276, 281, 290, 291, 293, 300, 312, 317, 330, 331, 332, 335, 336, 338, 342, 346, 354, 362, 363, 374, 382, 384, 386, 387, 393, 398, 405, 406, 408, 411, 417, 423, 425, 426, 430, 432, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 475, 476, 477, 479, 481], "pygilstate_getthisthreadst": [33, 57, 481], "auto": [33, 68, 93, 108, 181, 209, 245, 318, 329, 335, 382, 387, 388, 454, 458, 460, 467, 470, 473, 477, 478, 481], "diagnost": [33, 42, 68, 75, 100, 384, 387, 417, 419, 456, 473, 477], "pygilstate_check": 33, "sensit": [33, 165, 218, 246, 267, 274, 294, 350, 384, 386, 398, 453, 461, 463, 464, 465, 466, 472, 475, 481], "brace": [33, 156, 279, 317, 342, 343, 396, 428, 433, 477, 478, 481], "discuss": [33, 72, 73, 85, 95, 99, 101, 104, 107, 108, 179, 188, 201, 206, 228, 245, 256, 266, 273, 286, 291, 317, 328, 331, 339, 374, 384, 388, 393, 408, 417, 424, 425, 427, 428, 430, 433, 460, 461, 462, 465, 466, 467, 469, 471, 472, 475, 477, 480, 481], "py_block_thread": [33, 57], "py_unblock_thread": [33, 57], "pyinterpreterstate_new": [33, 57, 140, 481], "serial": [33, 41, 42, 68, 101, 165, 180, 192, 194, 195, 199, 201, 203, 204, 205, 206, 260, 265, 267, 281, 282, 297, 302, 328, 331, 333, 338, 345, 350, 411, 444, 460, 466, 467, 469, 471, 473, 474, 475, 480, 481], "pyinterpreterstate_clear": [33, 57, 140], "pyinterpreterstate_delet": [33, 57], "pythreadstate_new": [33, 57, 481], "pythreadstate_clear": [33, 57, 481], "on_delet": [33, 481], "pythreadstate_delet": [33, 57, 481], "pythreadstate_deletecurr": [33, 480, 481], "uint64_t": 33, "pythreadstate_getid": [33, 57, 480, 481], "pythreadstate_getinterpret": [33, 57, 480, 481], "pythreadstate_entertrac": [33, 471, 481], "suspend": [33, 95, 137, 175, 253, 312, 331, 350, 359, 363, 364, 425, 426, 428, 462, 463, 465, 476, 478, 481], "resum": [33, 95, 131, 137, 167, 175, 176, 189, 253, 281, 291, 294, 295, 297, 312, 351, 359, 363, 425, 426, 428, 462, 463, 464, 465, 471, 481], "pythreadstate_leavetrac": [33, 471, 481], "pyeval_settrac": [33, 462, 481], "pyeval_setprofil": [33, 462, 481], "pyinterpreterstate_get": [33, 57, 480, 481], "int64_t": 33, "pyinterpreterstate_getid": [33, 57, 478], "pyinterpreterstate_getdict": [33, 57, 481], "pymodule_getst": [33, 45, 57, 61, 99, 480, 481], "_pyframeevalfunct": [33, 471, 481], "throwflag": [33, 66, 481], "throw": [33, 66, 77, 94, 95, 100, 110, 126, 137, 159, 175, 189, 245, 291, 351, 360, 384, 392, 426, 428, 429, 465, 472, 474, 477, 480, 481], "_pyinterpreterstate_getevalframefunc": [33, 481], "_pyinterpreterstate_setevalframefunc": [33, 481], "eval_fram": [33, 480], "pythreadstate_getdict": [33, 57, 481], "okay": [33, 94, 118, 165, 264, 384], "pythreadstate_setasyncexc": [33, 57, 478, 481], "naiv": [33, 68, 104, 180, 201, 207, 233, 288, 338, 474, 481], "misus": [33, 45, 103, 338, 462, 481], "pyeval_acquirethread": [33, 57, 479, 481], "pyeval_releasethread": [33, 57], "pyeval_acquirelock": [33, 57, 473, 479, 481], "pyeval_releaselock": [33, 57, 473], "perhap": [33, 63, 72, 73, 76, 79, 84, 94, 99, 100, 101, 104, 108, 118, 149, 152, 175, 179, 191, 216, 241, 264, 266, 281, 291, 297, 332, 335, 392, 409, 426, 428, 429, 460, 461, 462, 464, 465, 466, 470, 472, 479, 481], "pyinterpreterstate_main": [33, 481], "pyinterpreterconfig": [33, 472, 481], "py_newinterpreterfromconfig": [33, 472, 481], "use_main_obmalloc": 33, "check_multi_interp_extens": [33, 472], "pyinterpreterconfig_own_gil": [33, 472, 481], "allow_fork": 33, "unrestrict": [33, 59, 424], "subprocess": [33, 68, 101, 121, 128, 129, 130, 140, 162, 164, 167, 206, 208, 246, 252, 255, 281, 291, 299, 325, 329, 335, 336, 360, 366, 380, 382, 397, 398, 453, 458, 463, 466, 467, 470, 473, 479, 480, 481, 482], "allow_exec": 33, "execv": [33, 255, 290, 291, 304, 474, 481], "allow_thread": 33, "allow_daemon_thread": 33, "daemon": [33, 100, 101, 267, 281, 314, 333, 335, 336, 363, 364, 400, 463, 466, 470, 474, 478, 480, 481], "init": [33, 45, 63, 68, 73, 86, 140, 174, 201, 248, 274, 291, 294, 306, 313, 361, 373, 384, 465, 466, 481], "489": [33, 45, 68, 71, 73, 248, 480, 481], "py_mod_multiple_interpret": [33, 45, 481], "pyinterpreterconfig_default_gil": [33, 481], "pyinterpreterconfig_shared_gil": [33, 481], "tstate_p": 33, "config": [33, 34, 68, 72, 79, 85, 100, 101, 116, 165, 245, 252, 264, 265, 267, 290, 330, 350, 353, 367, 370, 387, 388, 405, 450, 454, 458, 463, 467, 470, 471, 472, 473, 475, 477, 478, 479, 481], "almost": [33, 64, 72, 75, 76, 84, 85, 92, 101, 104, 107, 110, 118, 152, 155, 175, 184, 249, 256, 264, 270, 273, 281, 286, 290, 317, 342, 346, 367, 384, 386, 387, 426, 432, 454, 459, 461, 463, 466, 468, 472, 474, 480, 481], "total": [33, 34, 35, 59, 73, 78, 85, 89, 95, 101, 115, 124, 131, 132, 137, 158, 181, 184, 188, 189, 191, 194, 203, 223, 224, 228, 257, 259, 270, 291, 306, 317, 330, 335, 338, 339, 342, 343, 356, 364, 374, 380, 384, 386, 393, 426, 428, 433, 442, 453, 467, 471, 472, 473, 474, 475, 476, 477, 479, 481], "unsuccess": [33, 481], "likewis": [33, 55, 85, 94, 110, 118, 184, 188, 206, 207, 265, 269, 336, 382, 413, 432, 433, 473, 474, 481], "briefli": [33, 77, 107, 184, 465, 481], "pymodule_fromdefandspec": [33, 45, 476], "squirrel": [33, 306], "across": [33, 42, 61, 63, 68, 85, 99, 103, 118, 165, 167, 174, 181, 189, 191, 207, 253, 258, 259, 264, 265, 266, 267, 281, 297, 318, 326, 328, 342, 350, 363, 367, 374, 376, 382, 428, 433, 463, 464, 466, 467, 472, 473, 477, 478, 479, 481], "initmodul": 33, "essenti": [33, 73, 85, 93, 131, 165, 213, 223, 248, 266, 267, 273, 286, 290, 291, 294, 322, 328, 336, 342, 350, 386, 409, 420, 431, 460, 462, 467, 468, 474, 475, 480, 481], "unisol": 33, "py_endinterpret": [33, 57, 99, 481], "haven": [33, 104, 107, 137, 149, 184, 387, 466, 467, 472, 481], "benefit": [33, 85, 95, 101, 184, 266, 297, 339, 342, 350, 360, 374, 384, 400, 459, 462, 463, 464, 467, 473, 474, 478, 479, 481], "truli": [33, 73, 84, 85, 99, 113, 137, 179, 269, 362, 393, 467, 468, 481], "advantag": [33, 51, 73, 75, 85, 95, 100, 101, 184, 195, 248, 297, 306, 322, 329, 342, 373, 386, 400, 409, 411, 413, 460, 463, 464, 469, 472, 473, 474, 475, 476, 479, 481], "cpu": [33, 84, 102, 105, 107, 120, 123, 124, 128, 137, 156, 162, 164, 233, 234, 260, 268, 291, 320, 335, 342, 356, 364, 365, 380, 407, 454, 463, 470, 472, 474, 478, 479, 480, 481], "encourag": [33, 58, 73, 77, 103, 211, 290, 326, 327, 329, 351, 384, 403, 409, 413, 432, 454, 460, 461, 468, 479, 481], "approach": [33, 68, 73, 74, 76, 79, 85, 95, 100, 101, 103, 107, 108, 113, 149, 156, 167, 184, 188, 191, 223, 273, 281, 291, 331, 336, 338, 342, 346, 363, 367, 382, 384, 386, 388, 393, 411, 417, 426, 428, 459, 460, 461, 465, 466, 467, 469, 473, 474, 476, 477, 478, 481, 482], "554": [33, 158, 481], "vigil": 33, "especi": [33, 63, 72, 73, 76, 84, 85, 98, 103, 107, 124, 165, 167, 181, 184, 191, 196, 203, 245, 260, 266, 286, 291, 295, 306, 309, 311, 312, 331, 339, 340, 346, 350, 360, 382, 400, 408, 425, 430, 432, 460, 462, 463, 466, 467, 468, 473, 474, 475, 476, 477, 479, 481], "safeti": [33, 68, 73, 94, 116, 137, 198, 253, 281, 290, 322, 338, 467, 469, 473, 481], "spite": 33, "come": [33, 64, 71, 75, 84, 85, 92, 93, 100, 101, 103, 107, 108, 149, 156, 159, 167, 175, 179, 184, 191, 207, 224, 233, 242, 248, 290, 293, 297, 317, 318, 332, 336, 338, 339, 342, 353, 367, 374, 384, 393, 397, 408, 413, 425, 426, 430, 432, 433, 439, 457, 459, 460, 461, 462, 463, 464, 466, 475, 478, 479, 480, 481], "consequ": [33, 42, 63, 73, 85, 159, 165, 189, 253, 281, 291, 294, 331, 335, 342, 350, 426, 428, 432, 465, 467, 468, 472, 473, 474, 475, 476, 478, 481], "race": [33, 87, 138, 184, 224, 248, 291, 325, 335, 358, 400, 472, 473, 474, 480, 481], "hard": [33, 42, 72, 73, 76, 92, 93, 95, 99, 101, 103, 104, 161, 165, 173, 174, 175, 181, 182, 188, 191, 200, 223, 265, 266, 290, 291, 294, 295, 306, 317, 320, 328, 338, 339, 346, 356, 360, 373, 384, 388, 459, 460, 473, 475, 478, 479, 481], "asid": [33, 181, 223, 245, 306, 356, 388, 426, 428, 473, 478, 479], "challeng": [33, 281, 333, 398, 473, 478, 481], "communic": [33, 68, 101, 124, 131, 135, 191, 210, 240, 243, 245, 252, 255, 267, 281, 291, 297, 303, 307, 331, 335, 336, 339, 345, 346, 363, 374, 384, 417, 424, 460, 464, 465, 466, 476, 478, 479, 481], "break": [33, 63, 64, 68, 75, 76, 78, 84, 92, 94, 95, 101, 103, 104, 120, 126, 130, 134, 137, 142, 149, 156, 167, 168, 174, 175, 188, 191, 198, 200, 206, 245, 248, 253, 259, 269, 281, 290, 295, 297, 305, 312, 317, 319, 324, 331, 333, 335, 339, 342, 343, 346, 350, 357, 359, 360, 362, 363, 382, 386, 392, 397, 398, 405, 409, 425, 426, 427, 428, 429, 431, 433, 438, 441, 443, 460, 461, 462, 463, 465, 466, 467, 469, 473, 474, 475, 476, 478, 479, 481], "stdlib": [33, 34, 35, 68, 73, 99, 101, 209, 233, 245, 353, 454, 465, 471, 473, 474, 476, 481], "mitig": [33, 68, 133, 242, 288, 342, 356, 469, 470, 477, 478, 479, 480, 481], "effort": [33, 79, 101, 104, 224, 273, 305, 460, 462, 463, 464, 466, 467, 469, 473, 478, 481], "insul": 33, "perfect": [33, 95, 149, 194, 241, 245, 290, 339, 341, 428, 459, 481], "malici": [33, 107, 266, 297, 312, 346, 350, 356, 409, 410, 411, 412, 417, 418, 453, 466, 481], "namespac": [33, 45, 61, 68, 73, 78, 79, 85, 87, 89, 93, 95, 100, 112, 116, 155, 158, 166, 179, 189, 191, 205, 220, 223, 224, 228, 245, 246, 248, 249, 253, 265, 266, 271, 281, 291, 295, 297, 300, 312, 322, 329, 335, 342, 349, 350, 351, 364, 380, 383, 384, 386, 387, 388, 396, 398, 408, 409, 410, 413, 414, 425, 427, 434, 435, 443, 448, 453, 460, 461, 462, 463, 465, 467, 468, 472, 473, 475, 476, 477, 478, 479, 481, 482], "reachabl": [33, 191, 290, 291, 294, 384, 426, 480, 481], "delic": [33, 63], "biject": [33, 107], "assumpt": [33, 63, 73, 76, 99, 138, 159, 179, 181, 462, 466, 473, 477, 478, 481], "broken": [33, 99, 101, 105, 107, 110, 136, 188, 205, 210, 253, 264, 281, 291, 294, 303, 331, 342, 350, 360, 362, 363, 367, 386, 387, 392, 433, 453, 465, 469, 472, 474, 475, 479, 480, 481], "presenc": [33, 35, 63, 73, 75, 110, 156, 159, 184, 189, 216, 241, 248, 290, 294, 306, 339, 346, 350, 376, 384, 386, 425, 426, 428, 462, 463, 468, 470, 477, 478, 479, 480, 481], "furthermor": [33, 84, 118, 156, 189, 253, 266, 267, 269, 322, 342, 384, 425, 459, 472, 475], "ctype": [33, 68, 73, 116, 140, 162, 194, 198, 203, 212, 252, 264, 291, 300, 342, 350, 384, 467, 472, 474, 477, 481], "py_addpendingcal": [33, 57, 467, 480, 481], "schedul": [33, 68, 80, 84, 113, 116, 123, 162, 250, 252, 253, 320, 331, 350, 364, 374, 428, 462, 465, 466, 468, 472, 473, 474, 475, 476, 477, 478, 480, 481], "queu": [33, 124, 153, 175, 267, 293, 335, 359, 466], "met": [33, 63, 75, 93, 94, 95, 100, 188, 339, 424, 465, 479, 481], "boundari": [33, 94, 104, 151, 181, 191, 194, 197, 203, 204, 209, 211, 281, 297, 317, 342, 345, 360, 413, 433, 466, 471, 481], "subinterpret": [33, 45, 63, 138, 248, 291, 342, 346, 354, 360, 471, 472, 479, 480, 481], "quick": [33, 50, 68, 75, 84, 85, 95, 101, 103, 104, 108, 116, 188, 211, 214, 215, 216, 220, 267, 288, 317, 331, 350, 367, 373, 386, 461, 462, 463, 464, 465, 466, 468, 469, 472, 473, 475, 481], "busi": [33, 85, 135, 210, 267, 336, 346, 367, 404, 413, 424, 439], "suitabl": [33, 63, 64, 73, 85, 95, 100, 101, 107, 122, 144, 156, 167, 171, 174, 181, 188, 194, 202, 206, 207, 233, 242, 248, 251, 257, 259, 264, 265, 266, 267, 269, 274, 281, 286, 291, 297, 306, 321, 322, 331, 333, 335, 336, 342, 350, 356, 360, 363, 364, 378, 386, 398, 408, 411, 419, 420, 426, 453, 459, 462, 463, 464, 466, 467, 473, 477, 478, 479, 481], "pygilst": 33, "coverag": [33, 85, 103, 350, 378, 468, 470, 472, 475, 481], "overhead": [33, 35, 75, 101, 130, 137, 186, 250, 259, 268, 291, 306, 338, 340, 342, 350, 351, 365, 380, 382, 384, 400, 426, 430, 460, 461, 462, 463, 465, 469, 471, 472, 473, 474, 477, 478, 479, 480, 481], "py_tracefunc": 33, "pertain": [33, 63, 73, 291, 350, 373, 424, 468, 481], "pytrace_cal": 33, "pytrace_except": 33, "pytrace_lin": 33, "pytrace_return": 33, "pytrace_c_cal": 33, "pytrace_c_except": 33, "pytrace_c_return": 33, "pytrace_opcod": 33, "transfer": [33, 68, 72, 73, 92, 108, 134, 141, 167, 189, 193, 194, 195, 196, 199, 200, 201, 204, 205, 206, 221, 233, 239, 240, 242, 269, 274, 281, 286, 291, 297, 333, 345, 393, 395, 417, 424, 428, 430, 466, 467, 473, 474, 477, 479, 481], "unwind": [33, 75, 102, 133, 167, 253, 351, 426, 481], "f_trace_lin": [33, 350, 426, 471, 478, 481], "opcod": [33, 68, 188, 262, 297, 298, 350, 426, 463, 464, 466, 467, 470, 472, 475, 477, 478, 479, 480, 481], "f_trace_opcod": [33, 350, 426, 471, 478, 481], "monitor": [33, 68, 100, 101, 124, 130, 135, 184, 252, 267, 306, 313, 327, 336, 350, 397, 464, 466, 477, 478, 481], "setprofil": [33, 140, 281, 350, 363, 448, 462, 470, 481], "pyeval_setprofileallthread": [33, 472, 481], "settrac": [33, 140, 142, 281, 350, 363, 448, 462, 470, 481], "pyeval_settraceallthread": [33, 472, 481], "pyinterpreterstate_head": [33, 462], "head": [33, 63, 101, 104, 134, 148, 149, 153, 176, 198, 238, 239, 240, 243, 286, 292, 306, 316, 331, 332, 336, 339, 374, 382, 393, 411, 460, 462, 474, 481], "pyinterpreterstate_next": [33, 462], "pyinterpreterstate_threadhead": [33, 462], "pythreadstate_next": [33, 462], "offer": [33, 63, 73, 84, 91, 92, 93, 94, 95, 98, 100, 101, 107, 155, 159, 184, 214, 223, 233, 256, 259, 265, 266, 267, 269, 281, 295, 317, 318, 322, 330, 335, 338, 342, 346, 352, 363, 364, 387, 393, 403, 406, 414, 424, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 475, 479, 480, 481], "pthread": [33, 113, 350, 363, 454, 473, 481], "pythread": 33, "behalf": [33, 124, 331, 424, 481], "introduc": [33, 34, 45, 73, 85, 95, 99, 100, 101, 104, 124, 137, 181, 186, 211, 233, 241, 248, 249, 267, 269, 273, 281, 290, 297, 303, 306, 339, 342, 345, 349, 350, 367, 373, 374, 382, 383, 384, 392, 412, 423, 425, 426, 427, 428, 430, 432, 433, 434, 453, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "supersed": [33, 59, 248, 251, 286, 293, 339, 424, 460, 467, 474, 478, 481], "py_tss_t": [33, 478], "539": [33, 68, 481], "py_limited_api": [33, 56, 57, 59, 61, 470, 471, 473, 478, 480, 481], "py_tss_needs_init": 33, "pythread_tss_alloc": [33, 57, 472], "pythread_tss_fre": [33, 57, 472], "pythread_tss_delet": [33, 57, 472], "unassign": [33, 93, 344, 481], "dangl": [33, 63, 73, 77, 87, 291, 330, 342, 360, 425, 481], "moreov": [33, 34, 223, 269, 382, 384, 467, 468, 481], "pythread_tss_set": [33, 57, 472], "pythread_tss_get": [33, 57, 472], "pythread_tss_cr": [33, 57], "pythread_tss_is_cr": [33, 57], "repeat": [33, 54, 58, 63, 68, 79, 95, 108, 110, 118, 153, 159, 174, 175, 181, 188, 195, 212, 223, 233, 245, 259, 264, 274, 281, 283, 290, 293, 295, 300, 306, 316, 317, 335, 338, 339, 342, 343, 345, 363, 365, 378, 379, 382, 384, 386, 393, 403, 404, 425, 426, 453, 462, 463, 464, 466, 467, 473, 474, 475, 476, 477, 481], "forget": [33, 72, 73, 99, 101, 137, 184, 360, 374, 428, 429, 440, 464, 465, 466, 470, 472, 473, 479, 481], "distinct": [33, 42, 45, 63, 85, 92, 103, 104, 107, 139, 167, 179, 181, 184, 191, 224, 259, 266, 268, 290, 297, 306, 332, 338, 339, 342, 345, 350, 367, 384, 430, 433, 460, 462, 466, 473, 474, 477, 478, 480, 481], "pythread_create_key": [33, 57, 472, 481], "ops": [33, 100, 120, 339], "pythread_delete_key": [33, 57, 472], "pythread_set_key_valu": [33, 57, 472, 475], "pythread_get_key_valu": [33, 57, 472], "pythread_delete_key_valu": [33, 57, 472], "pythread_reinittl": [33, 57, 472], "py_preiniti": [34, 42, 59, 472, 479], "kind": [34, 63, 64, 68, 73, 76, 79, 85, 87, 98, 99, 101, 103, 107, 118, 120, 131, 149, 174, 191, 211, 248, 249, 253, 256, 279, 281, 291, 294, 297, 299, 317, 326, 338, 339, 342, 344, 350, 363, 367, 371, 384, 386, 393, 398, 411, 412, 413, 424, 425, 426, 428, 429, 430, 438, 439, 454, 459, 462, 463, 464, 466, 468, 472, 473, 474, 475, 476, 477, 478, 479, 481], "lc_ctype": [34, 59, 87, 107, 264, 291, 342, 453, 477, 478, 481], "unchang": [34, 42, 93, 101, 104, 110, 142, 149, 153, 165, 174, 175, 184, 206, 228, 253, 256, 259, 264, 267, 269, 291, 300, 317, 335, 338, 342, 343, 356, 367, 382, 383, 384, 392, 425, 426, 428, 433, 459, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 477, 478, 481], "587": [34, 68, 101, 339, 481], "pyconfig_initpythonconfig": [34, 479], "pyconfig_setbytesargv": [34, 479], "pystatus_except": [34, 472, 479], "goto": [34, 35, 68, 153, 382, 454, 469, 471, 473, 481], "pyconfig_clear": [34, 479, 481], "pystatus_isexit": [34, 479], "exitcod": [34, 281, 291, 346, 360, 481], "py_exitstatusexcept": [34, 479], "pywidestringlist_append": [34, 479], "pywidestringlist_insert": [34, 479], "err_msg": [34, 338, 350, 360], "pystatus_ok": [34, 479], "pystatus_error": [34, 479], "pystatus_nomemori": [34, 479], "pystatus_exit": [34, 479], "pystatus_iserror": [34, 479], "wherea": [34, 73, 85, 101, 124, 135, 165, 260, 265, 281, 317, 327, 350, 367, 387, 400, 430, 459, 468, 480, 481], "preconfigur": [34, 387], "pypreconfig_initpythonconfig": [34, 479], "preconfig": [34, 479], "pypreconfig_initisolatedconfig": [34, 479], "pymem_allocator_not_set": 34, "pymem_allocator_default": 34, "pymem_allocator_debug": 34, "pymem_allocator_malloc": 34, "pymem_allocator_malloc_debug": 34, "pymem_allocator_pymalloc": 34, "pymem_allocator_pymalloc_debug": 34, "configure_local": 34, "coerce_c_local": 34, "coerce_c_locale_warn": 34, "coerc": [34, 64, 98, 165, 184, 193, 194, 203, 264, 343, 453, 460, 468, 478, 481], "dev_mod": [34, 186, 350, 481], "utf8_mod": [34, 291, 350, 472], "filesystem_encod": [34, 59, 87, 291, 350, 472], "filesystem_error": [34, 59, 87, 291, 350, 472], "ifdef": [34, 73, 454, 460, 481], "py_preinitializefromarg": [34, 479], "py_preinitializefrombytesarg": [34, 479], "pars": [34, 59, 64, 65, 66, 68, 73, 79, 84, 85, 98, 101, 104, 108, 110, 116, 120, 131, 134, 149, 153, 155, 157, 165, 181, 191, 192, 194, 197, 198, 199, 201, 203, 204, 206, 207, 215, 220, 223, 226, 228, 238, 240, 241, 242, 243, 246, 248, 252, 254, 257, 260, 262, 266, 267, 269, 271, 274, 283, 284, 291, 306, 338, 342, 343, 346, 353, 364, 376, 380, 390, 393, 394, 397, 398, 408, 409, 410, 412, 413, 414, 415, 417, 418, 428, 429, 433, 434, 441, 444, 448, 453, 460, 461, 462, 463, 464, 465, 466, 472, 474, 475, 476, 477, 481, 482], "utf8": [34, 58, 120, 149, 156, 201, 203, 205, 206, 246, 291, 303, 312, 333, 350, 409, 411, 453, 459, 476, 478, 481], "pythonutf8": [34, 291, 350, 453, 459, 478, 481], "_pyruntim": [34, 480, 481], "pre": [34, 35, 73, 100, 101, 104, 109, 184, 189, 201, 206, 224, 243, 248, 256, 259, 266, 290, 322, 329, 336, 338, 350, 351, 356, 379, 384, 385, 387, 393, 397, 425, 434, 453, 454, 457, 459, 460, 463, 464, 465, 467, 472, 473, 475, 476, 477, 478, 480, 481], "pyconfig_initisolatedconfig": [34, 479], "pyconfig_setstr": [34, 479], "config_str": 34, "pyconfig_setbytesstr": [34, 59, 479], "pyconfig_setargv": [34, 479], "pyconfig_setwidestringlist": [34, 481], "pyconfig_read": [34, 59, 87, 291, 350, 471, 479, 481], "stripp": [34, 481], "tune": [34, 224, 241, 290, 320, 339, 460, 463, 472, 481], "strip": [34, 85, 95, 104, 118, 156, 165, 168, 175, 176, 181, 188, 191, 198, 206, 207, 223, 226, 243, 245, 266, 267, 282, 306, 324, 329, 333, 336, 341, 342, 346, 354, 356, 360, 379, 380, 384, 392, 398, 411, 420, 440, 441, 460, 463, 468, 469, 470, 473, 476, 477, 478, 479, 480, 481], "unsaf": [34, 63, 75, 85, 147, 165, 186, 281, 291, 307, 329, 338, 350, 356, 386, 387, 393, 396, 453, 463, 470, 472, 476, 478, 481], "py": [34, 35, 51, 68, 73, 76, 79, 85, 86, 87, 89, 94, 95, 97, 100, 101, 102, 107, 109, 110, 111, 114, 115, 118, 120, 123, 124, 125, 127, 129, 131, 132, 133, 134, 135, 136, 137, 141, 142, 145, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 173, 174, 176, 179, 181, 182, 184, 186, 187, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 209, 212, 214, 216, 218, 219, 221, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 274, 277, 279, 282, 284, 286, 287, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 352, 353, 355, 356, 357, 358, 360, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 386, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 428, 430, 436, 446, 447, 448, 449, 450, 451, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "symbol": [34, 66, 68, 71, 73, 77, 79, 85, 92, 94, 101, 102, 107, 116, 155, 157, 174, 175, 184, 191, 243, 252, 264, 267, 270, 291, 294, 298, 317, 320, 330, 331, 335, 338, 340, 342, 349, 350, 352, 355, 356, 357, 359, 360, 367, 371, 374, 382, 385, 392, 403, 408, 413, 426, 429, 432, 434, 439, 453, 459, 460, 462, 464, 465, 467, 469, 470, 472, 473, 477, 479, 480, 481], "link": [34, 35, 63, 66, 68, 71, 73, 74, 77, 78, 79, 84, 85, 86, 87, 100, 101, 116, 140, 159, 161, 176, 181, 198, 210, 233, 238, 241, 243, 255, 257, 259, 264, 265, 291, 294, 326, 330, 340, 346, 350, 352, 355, 356, 360, 367, 373, 374, 397, 400, 401, 403, 411, 412, 424, 426, 430, 453, 454, 460, 462, 463, 464, 466, 467, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481], "resolv": [34, 68, 75, 85, 100, 101, 118, 124, 126, 137, 165, 174, 181, 189, 191, 248, 249, 250, 253, 257, 265, 266, 290, 291, 294, 300, 306, 312, 330, 335, 346, 350, 383, 384, 386, 387, 409, 410, 411, 413, 414, 415, 427, 453, 459, 462, 474, 475, 476, 477, 478, 479, 481], "pythonsafepath": [34, 325, 350, 453, 471, 481], "base_exec_prefix": [34, 332, 350, 397, 448], "base_execut": 34, "_base_execut": [34, 481], "__pyvenv_launcher__": [34, 481], "base_prefix": [34, 228, 332, 350, 397, 448], "configure_c_stdio": 34, "warn_default_encod": [34, 256, 350, 453, 470, 481], "encodingwarn": [34, 68, 211, 256, 453, 481], "textiowrapp": [34, 118, 147, 186, 216, 223, 232, 248, 251, 256, 268, 346, 358, 420, 466, 470, 474, 475, 477, 478, 481], "code_debug_rang": 34, "caret": [34, 104, 175, 176, 191, 317, 379, 481], "pythonnodebugrang": [34, 426, 453, 471], "no_debug_rang": [34, 426, 453, 471], "check_hash_pycs_mod": 34, "check_sourc": 34, "552": [34, 68, 248, 309, 471, 481], "determinist": [34, 68, 101, 104, 167, 183, 186, 248, 253, 335, 338, 357, 411, 473, 478, 480, 481], "dev": [34, 68, 79, 80, 97, 101, 124, 186, 227, 267, 269, 270, 291, 292, 293, 305, 331, 346, 350, 353, 436, 453, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 476, 481], "pythondevmod": [34, 186, 453, 478], "dump_ref": 34, "dump": [34, 42, 68, 73, 94, 100, 101, 120, 140, 149, 170, 173, 183, 186, 252, 260, 264, 267, 272, 282, 284, 291, 295, 297, 302, 306, 331, 338, 340, 379, 380, 411, 417, 444, 453, 454, 460, 461, 462, 463, 466, 467, 469, 474, 475, 476, 477, 480, 481], "aliv": [34, 63, 85, 174, 224, 281, 303, 342, 360, 363, 400, 425, 426, 450, 453, 461, 467, 468, 473, 475, 481], "pythondumpref": [34, 63, 453, 454, 479, 481], "py_trace_ref": [34, 35, 63, 454, 470, 479, 480, 481], "faulthandl": [34, 68, 174, 183, 186, 252, 295, 331, 360, 379, 453, 481], "pythonfaulthandl": [34, 186, 212, 453, 474], "getfilesystemencod": [34, 66, 87, 107, 118, 291, 350, 356, 419, 448, 477, 481], "android": [34, 64, 87, 264, 301, 350, 360, 477, 478, 479, 481], "vxwork": [34, 64, 87, 171, 264, 291, 299, 320, 470, 481], "nl_langinfo": [34, 264, 462, 481], "codeset": [34, 156, 228, 264, 462, 471, 479, 481], "announc": [34, 80, 107, 291, 474], "mbstowc": 34, "latin1": [34, 134, 156, 297, 312, 465, 474, 477, 480, 481], "ansi_x3": 34, "1968": 34, "getfilesystemencodeerror": [34, 87, 350, 448, 477], "surrogateescap": [34, 59, 64, 107, 156, 199, 206, 216, 223, 291, 335, 338, 350, 356, 453, 473, 476, 477, 478, 481], "chosen": [34, 45, 73, 94, 100, 104, 184, 223, 233, 266, 281, 282, 290, 297, 335, 339, 345, 350, 373, 413, 426, 449, 453, 459, 463, 464, 468, 481], "import_tim": 34, "importtim": [34, 453, 478, 481], "pythonprofileimporttim": [34, 453, 478, 481], "install_signal_handl": [34, 470, 481], "repl": [34, 112, 121, 189, 317, 350, 453, 470, 479, 481], "int_max_str_digit": [34, 342, 350, 453, 481], "4300": [34, 342, 470, 471, 478, 479, 480], "int_info": [34, 342, 350, 448, 454, 469], "default_max_str_digit": [34, 342, 350], "640": [34, 342, 382], "str_digits_check_threshold": [34, 342, 350], "pythonintmaxstrdigit": [34, 342, 350, 453, 481], "prompt": [34, 66, 68, 79, 85, 110, 118, 140, 153, 155, 164, 171, 174, 187, 189, 191, 198, 205, 223, 227, 245, 246, 252, 281, 295, 311, 317, 318, 333, 339, 342, 346, 350, 359, 363, 366, 379, 382, 393, 397, 430, 434, 439, 442, 447, 453, 459, 463, 466, 470, 473, 475, 477, 478, 479, 480, 481], "malloc_stat": 34, "statist": [34, 42, 68, 93, 183, 224, 252, 273, 286, 288, 306, 316, 330, 339, 350, 378, 449, 453, 454, 460, 461, 465, 467, 471, 473, 474, 481], "pythonmallocstat": [34, 42, 453, 481], "platlibdir": [34, 350, 352, 453, 454, 480, 481], "pythonplatlibdir": [34, 352, 453, 481], "lib": [34, 35, 72, 77, 79, 84, 86, 89, 95, 97, 110, 111, 114, 115, 118, 120, 121, 124, 125, 127, 129, 131, 132, 133, 134, 135, 136, 137, 141, 142, 145, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 173, 174, 175, 176, 179, 181, 182, 184, 187, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 216, 218, 219, 221, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 274, 277, 279, 281, 282, 284, 286, 287, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 311, 314, 315, 316, 317, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 352, 353, 355, 356, 357, 358, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 428, 436, 448, 450, 451, 453, 454, 458, 459, 460, 461, 462, 463, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481], "dlls": [34, 68, 74, 116, 291, 460, 465, 479, 481], "layout": [34, 42, 61, 63, 68, 76, 99, 100, 101, 156, 187, 211, 265, 269, 339, 345, 353, 366, 367, 371, 396, 426, 430, 443, 459, 466, 472, 474, 475, 481], "virtual": [34, 68, 73, 85, 87, 101, 103, 109, 114, 159, 174, 175, 177, 190, 223, 224, 240, 249, 252, 253, 278, 291, 331, 335, 338, 339, 350, 353, 356, 366, 383, 393, 425, 426, 427, 430, 438, 451, 456, 460, 466, 472, 473, 474, 475, 477, 478, 479, 481], "pythonpath_env": 34, "delim": 34, "pathsep": [34, 291, 332, 378, 401, 423, 453, 454], "peephol": [34, 464, 465, 473, 478, 481], "__debug__": [34, 66, 166, 186, 223, 248, 434, 448, 453, 463, 470, 481], "assert": [34, 35, 49, 66, 68, 101, 106, 110, 114, 120, 137, 141, 166, 179, 181, 182, 185, 186, 189, 191, 211, 223, 226, 253, 281, 290, 295, 297, 317, 338, 342, 360, 383, 384, 386, 387, 398, 400, 409, 423, 424, 425, 428, 429, 431, 433, 448, 453, 454, 463, 464, 466, 469, 473, 475, 476, 479, 480, 481], "py_debug": [34, 35, 360, 454, 470, 479, 481], "log": [34, 59, 68, 93, 95, 96, 107, 116, 123, 124, 137, 145, 149, 150, 152, 162, 164, 167, 186, 191, 212, 221, 228, 234, 243, 252, 256, 273, 286, 291, 303, 325, 330, 333, 339, 342, 346, 350, 354, 356, 360, 384, 386, 398, 418, 426, 443, 449, 453, 459, 460, 461, 462, 464, 465, 466, 469, 470, 480, 481, 482], "pythonexecut": [34, 453], "with_next_framework": 34, "python3": [34, 57, 72, 89, 97, 101, 109, 110, 198, 206, 294, 332, 342, 352, 353, 380, 397, 419, 436, 446, 451, 453, 454, 458, 459, 467, 470, 472, 473, 475, 477, 479, 480, 481], "pycache_prefix": [34, 161, 350, 448, 453, 479, 481], "pythonpycacheprefix": [34, 350, 453, 479, 481], "run_command": [34, 140, 453], "run_filenam": 34, "skip_source_first_lin": 34, "run_modul": [34, 140, 322, 453, 481], "show_ref_count": 34, "showrefcount": [34, 453, 454, 475, 481], "py_ref_debug": [34, 454], "no_sit": [34, 350, 473], "invert": [34, 93, 94, 95, 120, 156, 184, 189, 209, 289, 342, 426, 428, 429, 471, 481], "cmd": [34, 68, 86, 101, 118, 124, 135, 140, 142, 175, 213, 220, 221, 252, 291, 295, 299, 306, 330, 333, 346, 378, 397, 453, 472, 473, 481], "dos": [34, 78, 175, 286, 290, 453, 460, 462, 473, 475, 481], "hack": [34, 84, 95, 99, 191, 329, 393, 453, 460, 461, 462, 481], "pythontracemalloc": [34, 380, 453, 481], "perf_profil": 34, "trampolin": [34, 350, 472, 481], "pythonperfsupport": [34, 102, 453, 472], "warnopt": [34, 59, 350, 360, 398, 448, 472, 478, 481], "filter": [34, 59, 68, 85, 95, 100, 110, 116, 117, 139, 158, 175, 183, 186, 187, 188, 211, 214, 216, 218, 223, 259, 266, 310, 313, 326, 330, 335, 360, 386, 387, 397, 419, 423, 428, 440, 448, 453, 454, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 477, 478, 479, 480, 481], "lowest": [34, 42, 100, 184, 189, 219, 234, 276, 339, 342, 346, 363, 428, 460, 465, 477], "highest": [34, 79, 93, 94, 100, 131, 165, 265, 276, 297, 298, 326, 331, 338, 339, 342, 350, 364, 428, 466, 474, 481], "prioriti": [34, 68, 93, 122, 140, 165, 234, 248, 259, 260, 267, 291, 297, 314, 320, 323, 326, 339, 342, 346, 354, 363, 373, 426, 428, 462, 463, 466, 473, 474, 475, 477, 479, 481], "revers": [34, 38, 68, 73, 80, 92, 93, 95, 106, 107, 119, 138, 139, 156, 158, 159, 167, 175, 179, 181, 184, 189, 209, 212, 223, 234, 253, 257, 259, 281, 287, 291, 306, 312, 317, 329, 338, 342, 376, 380, 383, 384, 386, 392, 400, 426, 438, 440, 448, 460, 463, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 481, 482], "pythonwarn": [34, 186, 398, 453, 467, 473, 478, 481], "dont_write_bytecod": [34, 350, 448, 466, 473], "xoption": [34, 59, 453, 471, 481], "_xoption": [34, 59, 350, 448, 453], "show_alloc_count": [34, 477, 480, 481], "init_python": 34, "my_program": 34, "pysys_getobject": [34, 57, 59, 99, 471], "my_execut": 34, "unspecifi": [34, 95, 103, 124, 147, 174, 191, 257, 268, 273, 285, 291, 294, 297, 312, 335, 364, 374, 384], "coercion": [34, 68, 223, 291, 343, 426, 453, 454, 465, 467, 481, 482], "538": [34, 68, 264, 453, 454, 481], "540": [34, 68, 264, 291, 481], "pythoncoerceclocal": [34, 291, 453, 454, 478, 481], "softwarepythonpythoncorex": 34, "ypythonpath": 34, "hkey_current_us": [34, 403, 459], "hkey_local_machin": [34, 403, 459], "unset": [34, 59, 63, 189, 269, 291, 293, 342, 350, 360, 430, 466, 467, 478, 481], "overridden": [34, 85, 93, 94, 101, 118, 142, 153, 159, 165, 181, 206, 209, 223, 228, 241, 242, 243, 248, 253, 265, 267, 290, 291, 295, 305, 311, 322, 336, 338, 339, 342, 346, 350, 356, 363, 374, 384, 386, 393, 397, 398, 426, 428, 430, 441, 453, 466, 467, 474, 475, 479, 480, 481], "py_main": [34, 57, 66, 459, 478, 481], "pyvenv": [34, 332, 352, 397, 459, 474, 475, 477, 479, 481], "cfg": [34, 85, 165, 266, 332, 352, 382, 397, 459, 466, 474, 476, 477, 481], "_pth": [34, 68, 278, 459, 477, 478, 481], "pybuilddir": [34, 481], "txt": [34, 35, 68, 78, 95, 101, 107, 118, 158, 164, 167, 186, 191, 206, 216, 218, 223, 228, 229, 232, 233, 241, 245, 249, 252, 254, 256, 276, 286, 290, 291, 294, 297, 330, 342, 346, 350, 356, 367, 385, 390, 397, 411, 419, 420, 433, 438, 441, 449, 450, 451, 454, 459, 460, 466, 467, 469, 473, 474, 475, 476, 477, 479, 481], "432": [34, 478, 481], "bare": [34, 100, 101, 120, 165, 201, 290, 333, 429, 457, 459, 465, 468, 471, 479, 481], "importlib": [34, 68, 85, 87, 97, 101, 103, 110, 223, 245, 252, 253, 266, 278, 300, 309, 322, 350, 360, 380, 383, 420, 421, 426, 431, 434, 448, 459, 469, 471, 473, 479, 481, 482], "_init_main": 34, "_py_initializemain": 34, "move": [34, 84, 85, 91, 92, 93, 98, 101, 108, 110, 118, 140, 153, 174, 175, 177, 179, 181, 194, 203, 204, 216, 245, 259, 267, 269, 276, 291, 295, 309, 330, 360, 364, 369, 373, 374, 382, 386, 388, 392, 393, 411, 449, 460, 461, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "mayb": [34, 73, 94, 95, 269, 398, 429, 432, 470], "meta_path": [34, 87, 140, 248, 249, 300, 350, 430, 434, 448, 459, 463, 474, 477, 481], "motiv": [34, 93, 356, 426, 428, 461, 463, 464, 474, 479, 481], "anytim": [34, 149, 342, 367], "res": [34, 42, 45, 79, 104, 137, 240, 281, 317, 335, 338, 481], "put": [34, 49, 58, 68, 73, 75, 76, 79, 84, 85, 92, 93, 94, 95, 99, 101, 104, 132, 136, 149, 156, 165, 174, 189, 191, 199, 201, 206, 213, 228, 230, 239, 240, 245, 248, 266, 279, 281, 293, 297, 298, 314, 331, 332, 333, 335, 339, 342, 353, 362, 363, 367, 388, 393, 423, 430, 439, 447, 459, 461, 462, 463, 464, 465, 466, 467, 473, 476, 481], "cookbook": [35, 68, 74, 85, 96, 100, 108, 266, 267, 273, 365, 452, 473, 481], "stdio": [35, 72, 73, 102, 291, 466, 471, 481], "_pi": [35, 479, 481], "pythonvers": 35, "version_info": [35, 80, 99, 103, 111, 120, 338, 350, 353, 448, 460, 467, 469, 471, 472, 473, 474, 481], "pythonx": [35, 72, 332, 342, 350, 397, 481], "py_return_non": [35, 46, 73, 464], "pymodinit_func": [35, 73, 76, 454, 463, 481], "pyinit": [35, 71], "linkag": [35, 68, 74, 301], "pyinit_": [35, 71, 454, 481], "pymoduledef": [35, 45, 57, 61, 71, 72, 73, 76, 99, 480, 481], "spam_modul": [35, 73], "pymoduledef_head_init": [35, 45, 72, 73, 76], "m_name": [35, 45, 76], "spam": [35, 45, 73, 77, 101, 104, 108, 118, 168, 173, 174, 216, 223, 224, 228, 240, 241, 243, 248, 253, 256, 266, 294, 305, 311, 317, 319, 328, 332, 338, 342, 346, 356, 379, 383, 384, 387, 388, 393, 411, 420, 426, 428, 430, 438, 439, 441, 444, 447, 448, 460, 466, 476, 481], "pyinit_spam": [35, 73], "py_ab": 35, "py_always_inlin": [35, 481], "inlin": [35, 52, 58, 60, 64, 68, 87, 165, 188, 189, 194, 195, 201, 203, 235, 306, 317, 377, 386, 454, 463, 465, 470, 471, 473, 477, 479, 481], "msc": [35, 86, 481], "py_charmask": 35, "128": [35, 64, 87, 98, 101, 107, 139, 158, 175, 184, 224, 233, 257, 282, 291, 338, 339, 382, 396, 433, 447, 465, 472, 476, 481], "127": [35, 58, 64, 101, 105, 107, 124, 131, 134, 168, 243, 245, 257, 281, 291, 336, 339, 342, 346, 350, 360, 380, 465, 476, 481], "255": [35, 64, 68, 87, 92, 98, 107, 111, 156, 158, 175, 189, 223, 233, 257, 342, 345, 382, 428, 471, 474, 476, 478, 481, 482], "py_deprec": [35, 479, 481], "pyapi_func": [35, 454, 463, 479, 481], "py_oldfunct": [35, 479], "msvc": [35, 63, 77, 86, 174, 464, 479, 481], "py_getenv": 35, "getenv": [35, 291, 304], "py_max": 35, "py_member_s": 35, "py_min": 35, "py_no_inlin": [35, 481], "lto": [35, 454, 471, 481], "pgo": [35, 360, 454, 466, 477, 480, 481], "33720": [35, 481], "py_stringifi": 35, "123": [35, 73, 99, 101, 103, 104, 120, 184, 219, 223, 259, 266, 335, 342, 345, 428, 438, 444, 460, 462, 466, 467, 469, 473], "py_unreach": [35, 478, 481], "__builtin_unreach": [35, 481], "_py_no_return": 35, "py_unus": [35, 58, 76, 481], "pydoc_strvar": [35, 45, 99, 454, 481], "pop_doc": 35, "rightmost": [35, 145, 156, 158, 175, 184, 259, 291, 342, 428, 464], "deque_method": 35, "pycfunct": [35, 44, 57, 58, 73, 75, 76, 99, 464, 481], "deque_pop": 35, "meth_noarg": [35, 58, 76, 462, 463, 481], "pydoc_str": [35, 58, 63, 76, 481], "pysqlite_row_method": 35, "pysqlite_row_key": 35, "row": [35, 68, 73, 85, 173, 223, 259, 296, 367, 374, 376, 382, 433, 440, 465, 469, 473, 476, 477, 481], "pylist_check": [35, 38, 79], "incref": [35, 63, 481], "sizeof": [35, 42, 63, 76, 174, 301, 345, 350, 387, 481], "pyobject_": [35, 45, 63, 465], "pynumber_": 35, "pysequence_": 35, "pymapping_": 35, "py_xdecref": [35, 45, 52, 63, 72, 73, 76, 471, 479, 481], "pylist_setitem": [35, 38, 57, 73], "pytuple_setitem": [35, 55, 57, 60, 72, 73], "pytuple_new": [35, 57, 60, 72], "1l": [35, 339, 462, 463, 466, 467, 481], "2l": [35, 460], "pysequence_setitem": [35, 38, 54, 57, 63, 481], "pyobject_setitem": [35, 40, 49, 57, 63, 465, 481], "iis": [35, 405], "set_al": [35, 224], "pyobject_length": [35, 49, 57], "pylong_fromssize_t": [35, 39, 57], "pysequence_getitem": [35, 54, 57, 63, 79, 481], "plumag": [35, 73, 439], "pylist_getitem": [35, 38, 57, 73, 79, 481], "sum_list": 35, "pylist_s": [35, 38, 57, 79, 465], "pylong_check": [35, 39, 63], "fit": [35, 73, 98, 118, 174, 175, 176, 184, 189, 191, 193, 213, 248, 257, 267, 290, 305, 306, 335, 345, 362, 367, 382, 386, 393, 398, 408, 419, 424, 463, 464, 467, 472, 473, 474, 475, 480, 481], "bail": [35, 481], "sum_sequ": 35, "pysequence_length": [35, 54, 57, 79], "ownership": [35, 68, 99, 101, 124, 134, 255, 281, 363, 424, 466, 474, 481], "353": [35, 68, 470, 481, 482], "py_ssize_t_max": [35, 47, 56, 481], "incr_item": 35, "const_on": 35, "incremented_item": 35, "0l": [35, 73, 345], "pynumber_add": [35, 47, 57], "shell": [35, 68, 73, 76, 79, 80, 85, 86, 87, 92, 95, 101, 109, 122, 124, 128, 135, 149, 153, 162, 165, 175, 191, 218, 220, 229, 252, 253, 260, 270, 282, 286, 290, 291, 292, 307, 311, 338, 348, 350, 352, 360, 366, 367, 382, 386, 397, 398, 403, 436, 437, 445, 446, 447, 448, 449, 451, 453, 454, 457, 458, 459, 460, 462, 464, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481], "fallback": [35, 68, 124, 161, 166, 182, 215, 228, 297, 330, 350, 356, 360, 374, 404, 426, 428, 430, 472, 473, 479, 481], "getpath": [35, 481], "specialbuild": [35, 454], "meant": [35, 49, 61, 100, 101, 131, 137, 139, 156, 211, 228, 248, 306, 335, 360, 367, 384, 393, 420, 429, 459, 465, 466, 467, 470, 473, 474, 475, 476, 478, 479, 481], "pydebug": [35, 350, 454, 463, 470, 475, 481], "_debug": 35, "doubli": [35, 63, 85, 467], "pyiter_check": [36, 57, 63, 481], "pyiter_next": [36, 57, 63], "pyaiter_check": [36, 57, 481], "asynciter": [36, 49, 159, 342, 384, 476, 481], "pyobject_getit": [36, 49, 55, 57, 63], "pysendresult": [36, 63], "pyiter_send": [36, 57, 63, 470, 481], "enum": [36, 42, 68, 96, 118, 161, 180, 239, 252, 253, 260, 306, 309, 317, 331, 339, 342, 383, 426, 439, 474, 481], "presult": 36, "pygen_return": 36, "pygen_next": 36, "pygen_error": 36, "__getitem__": [37, 40, 54, 63, 64, 68, 80, 87, 97, 101, 106, 114, 158, 159, 174, 194, 201, 203, 209, 216, 223, 269, 281, 289, 317, 342, 343, 384, 387, 388, 405, 408, 410, 411, 425, 428, 450, 462, 463, 464, 468, 471, 472, 473, 477, 479, 481], "pyseqiter_typ": [37, 57], "pyseqiter_new": [37, 57], "pyseqiter_check": 37, "seq": [37, 64, 85, 158, 189, 218, 223, 259, 289, 316, 342, 460, 464, 471, 473], "subscript": [37, 63, 68, 87, 174, 189, 211, 245, 262, 342, 384, 426, 434, 447, 453, 463, 466, 470, 471, 472, 480, 481], "pycalliter_typ": [37, 57], "pycalliter_new": [37, 57], "pycalliter_check": 37, "pylist_typ": [38, 57, 76], "pylist_checkexact": 38, "pylist_get_s": 38, "pylist_get_item": [38, 57], "pylist_set_item": [38, 470, 481], "pylist_insert": [38, 57], "pylist_append": [38, 57, 481], "pylist_getslic": [38, 57], "pylist_setslic": [38, 57], "itemlist": 38, "pylist_sort": [38, 57], "sort": [38, 68, 76, 77, 80, 84, 87, 89, 95, 108, 110, 118, 145, 149, 158, 165, 171, 174, 182, 184, 188, 191, 206, 223, 224, 230, 234, 246, 249, 253, 257, 259, 260, 264, 269, 281, 289, 290, 291, 294, 302, 305, 306, 316, 317, 326, 333, 338, 341, 342, 356, 360, 380, 382, 386, 393, 408, 411, 420, 426, 428, 438, 439, 440, 448, 450, 459, 462, 463, 464, 465, 466, 467, 468, 469, 473, 475, 476, 478, 479, 480, 481], "pylist_revers": [38, 57], "pylist_astupl": [38, 57], "pylong_a": 39, "distinguish": [39, 63, 68, 73, 120, 152, 159, 175, 185, 189, 191, 195, 223, 241, 253, 266, 273, 312, 339, 353, 374, 384, 398, 426, 428, 430, 459, 461, 462, 467, 474, 475, 481], "pylongobject": [39, 57, 472, 481], "pylong_typ": [39, 57, 481], "pylong_checkexact": 39, "256": [39, 42, 64, 87, 98, 156, 171, 175, 184, 223, 233, 268, 324, 339, 342, 356, 426, 447, 464, 465, 479, 480, 481], "pylong_fromunsignedlong": [39, 57, 481], "pylong_fromsize_t": [39, 57, 481], "pylong_fromlonglong": [39, 57, 481], "pylong_fromunsignedlonglong": [39, 57, 481], "pylong_fromdoubl": [39, 57, 480, 481], "pylong_fromstr": [39, 57, 481], "radix": [39, 184, 223, 264, 350, 433, 481], "decim": [39, 59, 64, 68, 78, 85, 104, 107, 152, 156, 165, 176, 181, 219, 223, 224, 252, 257, 259, 260, 264, 266, 273, 288, 290, 306, 317, 341, 342, 343, 350, 363, 364, 376, 377, 385, 386, 417, 424, 426, 428, 433, 442, 443, 447, 453, 454, 460, 465, 466, 467, 469, 470, 471, 479, 480, 481, 482], "whitespac": [39, 64, 68, 85, 94, 95, 104, 107, 110, 118, 124, 135, 141, 144, 153, 165, 176, 184, 188, 191, 197, 200, 201, 206, 219, 243, 245, 253, 260, 264, 295, 312, 317, 329, 342, 343, 345, 346, 362, 364, 379, 398, 408, 411, 413, 453, 460, 463, 466, 467, 469, 473, 474, 475, 478, 481], "underscor": [39, 68, 71, 85, 94, 101, 144, 149, 156, 174, 184, 194, 203, 219, 223, 269, 305, 317, 329, 342, 343, 350, 352, 367, 387, 420, 425, 426, 427, 428, 432, 433, 434, 466, 468, 469, 472, 481], "digit": [39, 59, 64, 85, 99, 104, 107, 115, 139, 141, 144, 152, 156, 158, 171, 176, 181, 184, 191, 219, 223, 233, 242, 257, 264, 266, 273, 286, 291, 317, 319, 324, 338, 339, 342, 343, 350, 360, 364, 367, 376, 385, 386, 392, 393, 396, 411, 422, 424, 433, 442, 447, 454, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481], "to_byt": [39, 342, 481], "from_byt": [39, 342, 481], "pylong_fromunicodeobject": [39, 470], "pylong_fromvoidptr": [39, 57], "pylong_asvoidptr": [39, 57], "__int__": [39, 63, 219, 223, 384, 387, 426, 465, 467, 470, 471, 478, 479, 481], "pylong_aslongandoverflow": [39, 57, 467, 473], "long_min": 39, "pylong_aslonglong": [39, 57], "pylong_aslonglongandoverflow": [39, 57, 467, 473], "llong_max": 39, "llong_min": 39, "pylong_asssize_t": [39, 57], "pylong": [39, 469, 481], "pylong_asunsignedlong": [39, 57], "pylong_assize_t": [39, 57], "pylong_asunsignedlonglong": [39, 57, 469], "pylong_asunsignedlongmask": [39, 57], "reduct": [39, 68, 170, 296, 342, 472, 474, 481], "modulo": [39, 101, 184, 211, 223, 289, 331, 342, 374, 426, 428, 444, 463, 467, 473, 479, 481], "pylong_asunsignedlonglongmask": [39, 57, 481], "ullong_max": 39, "pylong_asdoubl": [39, 57, 481], "assur": [39, 76, 85, 152, 224, 273, 281, 376, 426, 467, 469, 473, 481], "usabl": [39, 54, 56, 59, 63, 64, 76, 85, 98, 103, 124, 149, 156, 174, 175, 207, 223, 243, 248, 257, 266, 274, 281, 291, 335, 339, 342, 346, 408, 426, 428, 430, 462, 463, 464, 465, 472, 473, 477, 478, 481], "pyunstable_long_iscompact": [39, 472, 481], "compact": [39, 42, 85, 104, 107, 149, 153, 188, 195, 196, 260, 297, 305, 345, 379, 428, 463, 472, 474, 475, 477, 481], "critic": [39, 75, 87, 100, 101, 124, 189, 248, 265, 266, 267, 290, 404, 430, 449, 450, 463, 465, 466, 469, 471, 473, 476, 481], "fast": [39, 58, 64, 68, 94, 99, 139, 168, 182, 184, 189, 223, 232, 248, 252, 253, 256, 259, 267, 271, 297, 306, 330, 342, 367, 382, 384, 411, 426, 440, 460, 464, 465, 467, 473, 474, 475, 476, 477, 478, 480, 481], "pyunstable_long_compactvalu": [39, 472, 481], "speedup": [39, 297, 424, 429, 461, 465, 466, 467, 469, 472, 473, 474, 475, 479, 481], "neglig": [39, 342, 424], "pyobject_delitem": [40, 49, 57, 63, 463], "pymapping_check": [40, 57, 63], "pymapping_s": [40, 57, 63, 481], "pymapping_length": [40, 57], "pymapping_getitemstr": [40, 57], "pymapping_setitemstr": [40, 57, 481], "pymapping_delitem": 40, "pymapping_delitemstr": 40, "pymapping_haskey": [40, 57], "pymapping_haskeystr": [40, 57], "pymapping_valu": [40, 57, 478, 481], "pymapping_item": [40, 57, 478, 481], "unmarshal": [41, 417, 463, 465, 477, 481], "py_marshal_vers": [41, 471, 481], "pymarshal_writelongtofil": [41, 471, 481], "pymarshal_writeobjecttofil": [41, 471, 481], "pymarshal_writeobjecttostr": [41, 471, 481], "pymarshal_readlongfromfil": 41, "pymarshal_readshortfromfil": 41, "pymarshal_readobjectfromfil": 41, "pymarshal_readlastobjectfromfil": 41, "aggress": [41, 342, 387, 465, 481], "pymarshal_readobjectfromstr": [41, 471, 481], "deal": [42, 63, 64, 68, 72, 103, 104, 107, 118, 123, 155, 156, 192, 194, 195, 203, 223, 256, 264, 280, 281, 290, 297, 316, 323, 335, 364, 382, 388, 392, 411, 424, 429, 460, 462, 463, 464, 465, 468, 474, 476, 481], "aspect": [42, 72, 73, 94, 101, 104, 108, 179, 181, 191, 248, 266, 291, 333, 392, 426, 473, 477], "segment": [42, 48, 152, 174, 182, 191, 212, 213, 218, 281, 291, 294, 331, 364, 392, 397, 465, 467, 473, 474, 481], "prealloc": 42, "room": [42, 55, 341, 387, 432, 444, 468, 481], "polici": [42, 68, 101, 121, 124, 129, 133, 192, 194, 198, 199, 201, 203, 204, 205, 211, 223, 241, 283, 291, 333, 336, 339, 454, 459, 461, 464, 467, 472, 475, 476, 477, 481], "adapt": [42, 68, 85, 101, 139, 174, 184, 189, 223, 228, 265, 295, 296, 330, 335, 339, 367, 382, 460, 461, 465, 467, 469, 471, 472, 477, 481], "peculiar": [42, 124, 253, 291], "speed": [42, 64, 73, 93, 100, 104, 144, 159, 175, 182, 184, 188, 214, 224, 232, 248, 256, 259, 293, 295, 297, 328, 339, 341, 350, 359, 382, 426, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "tradeoff": [42, 481], "deleg": [42, 63, 68, 100, 101, 223, 224, 232, 265, 266, 267, 273, 297, 322, 383, 386, 388, 426, 428, 430, 468, 471, 473, 477, 479, 480, 481, 482], "corrupt": [42, 59, 93, 107, 144, 175, 182, 210, 213, 241, 268, 269, 281, 297, 328, 338, 342, 356, 459, 478, 479, 481], "writer": [42, 68, 73, 76, 107, 124, 134, 147, 156, 168, 173, 191, 244, 249, 256, 291, 317, 409, 411, 414, 453, 463, 472, 476, 478, 481], "calloc": [42, 476, 481], "bufsiz": [42, 73, 118, 124, 293, 335, 346, 356, 409, 410, 422, 464, 479, 481], "ed": [42, 63, 73, 92, 165, 175, 191, 268, 291, 317, 330, 338, 470, 473, 480, 481], "exclus": [42, 47, 63, 68, 104, 116, 147, 175, 184, 213, 256, 260, 267, 268, 269, 289, 290, 291, 317, 338, 341, 342, 356, 378, 380, 401, 420, 424, 426, 428, 466, 474, 475, 476, 479, 480, 481], "accur": [42, 103, 174, 205, 243, 273, 290, 306, 350, 356, 364, 367, 380, 420, 464, 466, 467, 472, 473, 475, 477, 478, 479, 481], "footprint": [42, 92, 454, 474, 477, 479, 481], "whole": [42, 79, 98, 104, 118, 139, 156, 165, 167, 175, 181, 205, 206, 233, 240, 257, 259, 265, 276, 290, 291, 303, 305, 317, 326, 335, 338, 342, 362, 373, 386, 408, 411, 424, 425, 433, 453, 460, 467, 475, 479, 481], "procedur": [42, 72, 80, 95, 119, 149, 156, 174, 306, 333, 344, 360, 382, 416, 417, 434, 439, 461, 462, 465, 473], "pythonmalloc": [42, 68, 186, 453, 454, 481], "shutdown": [42, 87, 99, 101, 105, 124, 133, 134, 138, 164, 210, 211, 225, 246, 265, 267, 281, 282, 331, 335, 336, 339, 363, 400, 403, 426, 428, 453, 466, 473, 475, 476, 478, 480, 481], "pymemallocatordomain": 42, "hint": [42, 68, 79, 87, 88, 103, 117, 156, 165, 200, 228, 239, 241, 244, 245, 256, 260, 342, 382, 383, 384, 425, 426, 434, 471, 477, 478, 481, 482], "practic": [42, 63, 68, 74, 76, 84, 92, 95, 98, 100, 101, 103, 108, 118, 172, 175, 176, 184, 191, 192, 197, 221, 223, 233, 240, 246, 249, 250, 253, 281, 286, 303, 333, 338, 339, 342, 356, 364, 367, 384, 392, 409, 423, 424, 426, 428, 461, 462, 463, 468, 473, 475, 478, 481], "pyobject_malloc": [42, 57, 463, 465, 475, 477, 481], "pymem_malloc": [42, 57, 64, 66, 463, 465, 475, 477, 481], "nelem": 42, "elsiz": 42, "model": [42, 60, 68, 84, 85, 93, 124, 167, 181, 184, 192, 194, 203, 223, 252, 271, 281, 291, 316, 333, 339, 341, 363, 366, 382, 393, 409, 410, 413, 425, 426, 431, 459, 460, 462, 463, 464, 465, 471, 472, 473, 475, 476, 477, 478, 479, 481, 482], "ansi": [42, 68, 87, 118, 143, 174, 264, 291, 350, 364, 459, 460, 472, 474, 477, 479, 481], "pymem_calloc": [42, 57, 476, 481], "pymem_realloc": [42, 57, 66, 463, 465, 475], "pymem_new": [42, 64, 461], "pymem_res": 42, "lose": [42, 94, 104, 165, 181, 184, 211, 241, 259, 267, 269, 316, 317, 338, 346, 460, 467, 473, 481], "pymem_del": [42, 461], "intercept": [42, 101, 137, 341, 350, 477, 481], "pyobject_calloc": [42, 57, 476, 481], "pyobject_realloc": [42, 57, 463, 465, 481], "pyobject_fre": [42, 57, 63, 463, 465, 477, 481], "pymalloc_debug": [42, 453, 481], "malloc_debug": [42, 453], "legend": 42, "pymemallocatorex": [42, 476], "new_siz": [42, 471], "pymemalloc": [42, 476], "pymem_domain_raw": [42, 453], "pymem_domain_mem": [42, 453, 477, 481], "pymem_domain_obj": [42, 453, 477], "reinstal": [42, 459], "contract": [42, 245, 342, 424], "impos": [42, 193, 260, 291, 294, 297, 319, 320, 342, 384, 432, 453], "substitut": [42, 68, 85, 87, 100, 101, 104, 110, 130, 141, 156, 162, 165, 176, 184, 191, 248, 259, 270, 290, 291, 306, 317, 318, 319, 338, 342, 343, 357, 376, 384, 401, 424, 425, 426, 428, 434, 445, 450, 459, 463, 465, 466, 467, 472, 473, 475, 476, 481, 482], "setup": [42, 68, 73, 76, 79, 92, 101, 108, 167, 191, 245, 294, 336, 339, 353, 360, 365, 382, 386, 387, 388, 451, 453, 454, 459, 460, 461, 462, 463, 465, 466, 467, 471, 472, 473, 474, 477, 479, 481], "recogniz": [42, 159, 184, 481], "pattern": [42, 63, 68, 76, 85, 93, 100, 107, 140, 142, 161, 167, 176, 187, 188, 189, 217, 220, 224, 245, 246, 252, 259, 262, 265, 273, 279, 281, 286, 290, 291, 294, 295, 306, 317, 330, 342, 343, 360, 367, 369, 380, 384, 386, 387, 388, 400, 427, 428, 429, 433, 439, 454, 459, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481], "0xcd": [42, 481], "pymem_cleanbyt": 42, "0xdd": [42, 481], "pymem_deadbyt": 42, "surround": [42, 79, 95, 104, 165, 188, 223, 242, 245, 264, 343, 346, 372, 397, 425, 427, 428, 429, 433, 448, 454, 460, 465, 466, 467, 468, 469, 472, 477, 481], "0xfd": [42, 481], "pymem_forbiddenbyt": 42, "underflow": [42, 184, 186, 454, 477, 481], "treatment": [42, 49, 101, 192, 281, 392, 460, 468], "ask": [42, 87, 92, 101, 159, 192, 231, 233, 241, 245, 256, 267, 290, 295, 330, 337, 339, 342, 371, 384, 393, 410, 411, 412, 420, 428, 430, 434, 459, 464, 465, 466, 467, 468, 481], "easier": [42, 76, 84, 87, 92, 95, 99, 103, 104, 113, 159, 167, 191, 204, 248, 250, 257, 267, 291, 306, 311, 317, 342, 351, 356, 360, 372, 386, 388, 392, 432, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 476, 477, 481], "excess": [42, 85, 110, 131, 144, 174, 184, 240, 265, 319, 364, 425, 428, 481], "overwritten": [42, 101, 241, 267, 269, 306, 330, 350, 384, 425, 467, 474, 481], "pymem_debug_serialno": [42, 481], "bad": [42, 68, 72, 73, 100, 103, 108, 118, 185, 188, 191, 199, 210, 211, 233, 245, 264, 266, 269, 281, 290, 306, 331, 382, 384, 395, 420, 434, 439, 441, 462, 466, 468, 470, 475, 477, 481], "excel": [42, 107, 173, 191, 198, 382, 457, 463, 464, 468], "breakpoint": [42, 68, 79, 85, 140, 142, 145, 183, 223, 245, 295, 350, 351, 453, 465, 473, 481], "captur": [42, 68, 92, 95, 101, 120, 167, 174, 181, 191, 263, 265, 291, 317, 335, 339, 343, 346, 350, 356, 360, 379, 384, 398, 427, 464, 471, 474, 475, 476, 478, 481], "instant": [42, 68, 92, 183, 291, 382], "bumpserialno": 42, "obmalloc": [42, 461, 463, 465, 475, 480, 481], "intact": [42, 101, 165, 181, 201, 203, 206, 216, 267, 464], "ve": [42, 76, 94, 95, 98, 101, 104, 107, 112, 137, 150, 249, 269, 290, 338, 367, 460, 461, 462, 463, 464, 466, 467, 469, 475, 481], "provok": 42, "0xcb": [42, 477, 481], "0xdb": [42, 477, 481], "0xfb": [42, 477, 481], "crt": [42, 68, 280, 339, 467, 475, 481], "512": [42, 129, 171, 233, 291, 326, 356, 422, 444, 465, 472, 473, 477, 479, 481], "fix": [42, 55, 61, 63, 68, 77, 79, 84, 85, 92, 93, 95, 103, 104, 110, 118, 124, 149, 157, 159, 174, 175, 180, 181, 186, 191, 199, 223, 241, 245, 252, 259, 281, 286, 288, 291, 297, 317, 338, 342, 343, 345, 346, 363, 370, 384, 387, 406, 425, 453, 460, 462, 464, 465, 466, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "kib": [42, 113, 134, 268, 291, 330, 363, 380, 479, 481], "mib": [42, 233, 268, 281, 330, 471, 479, 481], "virtualalloc": [42, 475], "virtualfre": 42, "mmap": [42, 68, 140, 211, 252, 258, 460, 466, 471, 473, 476, 477, 481], "munmap": 42, "pyobjectarenaalloc": 42, "pytracemalloc_track": [42, 478], "uintptr_t": 42, "pytracemalloc_untrack": [42, 478], "untrack": [42, 76, 469, 481], "rewritten": [42, 133, 191, 192, 233, 281, 434, 460, 461, 462, 463, 466, 467, 469, 473, 474, 475, 477, 478, 479, 481], "inde": [42, 76, 135, 193, 339], "reduc": [42, 56, 75, 85, 95, 110, 124, 131, 175, 181, 184, 224, 233, 245, 259, 291, 297, 306, 326, 339, 342, 360, 363, 400, 411, 419, 433, 454, 459, 460, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "label": [42, 68, 78, 94, 95, 156, 187, 189, 245, 269, 279, 290, 316, 329, 339, 343, 366, 367, 373, 384, 459, 462, 463, 473, 475, 478, 481], "buf1": 42, "buf2": 42, "buf3": 42, "aim": [42, 72, 75, 98, 103, 107, 268, 279, 350, 384, 411, 459, 462, 464, 465, 475, 479], "explain": [42, 45, 63, 73, 75, 76, 77, 85, 92, 95, 98, 100, 101, 103, 104, 107, 108, 112, 149, 174, 191, 211, 223, 233, 241, 243, 245, 253, 259, 290, 295, 342, 367, 374, 386, 387, 428, 453, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "pymemoryview_fromobject": [43, 57], "discret": [43, 259, 336, 341, 479], "pybuf_read": 43, "pymemoryview_frommemori": [43, 57, 474], "pymemoryview_getcontigu": [43, 57], "buffertyp": 43, "ortran": 43, "pymemoryview_check": 43, "pymemoryview_get_buff": 43, "mview": 43, "pymemoryview_get_bas": 43, "pymethod_new": 44, "pyinstancemethod_typ": 44, "pyinstancemethod_check": 44, "pyinstancemethod_new": 44, "pyinstancemethod_funct": 44, "im": [44, 85, 92, 342], "pyinstancemethod_get_funct": 44, "pymethod_typ": [44, 93], "methodtyp": [44, 93, 383, 481], "pymethod_check": 44, "pymethod_funct": 44, "pymethod_get_funct": 44, "pymethod_self": 44, "pymethod_get_self": 44, "pymodule_typ": [45, 57], "moduletyp": [45, 248, 250, 383, 426, 430, 463, 472, 476, 481], "pymodule_check": 45, "pymodule_checkexact": 45, "pymodule_newobject": [45, 57], "__doc__": [45, 63, 75, 80, 84, 87, 93, 94, 155, 158, 188, 191, 209, 223, 224, 253, 287, 311, 318, 321, 383, 425, 426, 433, 438, 439, 448, 461, 462, 463, 468, 470, 473, 475, 476, 480, 481], "__package__": [45, 223, 248, 322, 383, 430, 448, 466, 470, 472, 474, 475, 477, 481], "pymodule_new": [45, 57], "pymodule_getdict": [45, 57], "__dict__": [45, 49, 61, 63, 85, 88, 93, 99, 101, 114, 142, 146, 191, 223, 224, 248, 253, 265, 267, 295, 297, 306, 342, 383, 417, 425, 426, 430, 438, 461, 462, 467, 468, 470, 472, 476, 477, 481], "pymodule_": 45, "pymodule_getnameobject": [45, 57], "pymodule_getnam": [45, 57], "m_size": [45, 76, 99, 480, 481], "pymodule_getdef": [45, 57], "pymodule_getfilenameobject": [45, 57, 472], "pymodule_getfilenam": [45, 57, 472], "unencod": [45, 107, 156, 463, 468, 473, 481], "pymoduledef_bas": [45, 57], "m_base": [45, 76], "m_doc": [45, 76], "m_free": [45, 99, 480, 481], "3121": [45, 468, 481], "m_method": [45, 481], "pymoduledef_slot": 45, "m_slot": 45, "m_reload": 45, "m_travers": [45, 99, 480, 481], "py_mod_exec": [45, 480, 481], "m_clear": [45, 99, 480, 481], "collector": [45, 50, 63, 68, 73, 76, 85, 87, 95, 99, 212, 252, 281, 290, 313, 350, 360, 400, 409, 426, 454, 460, 462, 465, 466, 467, 469, 470, 472, 474, 475, 478, 480, 481], "pymodule_create2": [45, 57], "module_api_vers": 45, "python_api_vers": [45, 463], "pymodule_addobjectref": [45, 57, 76, 470, 481], "split": [45, 64, 68, 78, 84, 85, 101, 106, 118, 139, 153, 156, 165, 184, 188, 189, 194, 198, 200, 206, 211, 226, 228, 246, 259, 279, 289, 290, 291, 292, 295, 301, 305, 316, 317, 319, 329, 333, 338, 339, 342, 343, 346, 362, 376, 384, 386, 387, 392, 397, 405, 413, 433, 438, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481], "__new__": [45, 61, 63, 68, 76, 80, 85, 93, 119, 140, 201, 209, 211, 223, 272, 276, 294, 297, 335, 380, 383, 387, 426, 472, 475, 477, 479, 481], "__init__": [45, 61, 63, 68, 76, 78, 79, 80, 85, 87, 93, 100, 101, 105, 106, 112, 118, 126, 131, 137, 146, 158, 159, 165, 167, 170, 173, 174, 181, 182, 188, 192, 209, 211, 212, 223, 224, 236, 239, 243, 248, 249, 250, 251, 259, 260, 265, 266, 267, 279, 281, 294, 297, 300, 306, 313, 318, 331, 338, 343, 356, 360, 363, 367, 380, 383, 384, 386, 387, 388, 397, 400, 405, 408, 412, 420, 426, 430, 438, 439, 448, 450, 460, 461, 462, 463, 465, 466, 470, 471, 472, 474, 477, 479, 481], "pyinit_modulenam": [45, 71], "pymoduledef_init": [45, 57], "py_mod_cr": 45, "create_modul": [45, 248, 421, 430, 470, 476, 477, 481], "451": [45, 68, 87, 158, 239, 248, 300, 322, 350, 430, 470, 472, 476, 481], "loop": [45, 64, 66, 68, 73, 92, 95, 100, 101, 104, 121, 122, 123, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 155, 157, 174, 175, 182, 184, 187, 189, 194, 203, 216, 223, 230, 255, 259, 267, 281, 295, 306, 307, 317, 330, 331, 335, 336, 339, 342, 346, 350, 360, 363, 365, 367, 379, 382, 386, 387, 410, 411, 418, 425, 426, 427, 428, 429, 433, 434, 438, 439, 454, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "hierarchi": [45, 68, 85, 97, 100, 101, 184, 223, 248, 252, 253, 265, 266, 288, 297, 300, 327, 331, 338, 367, 373, 374, 384, 386, 408, 411, 426, 430, 434, 463, 465, 468, 481, 482], "symlink": [45, 140, 161, 255, 290, 291, 294, 309, 330, 356, 397, 448, 457, 458, 464, 466, 470, 473, 474, 475, 479, 481], "exec_modul": [45, 99, 248, 421, 430, 470, 472, 475, 476, 477, 481], "py_mod_multiple_interpreters_not_support": 45, "py_mod_multiple_interpreters_support": 45, "py_mod_per_interpreter_gil_support": [45, 481], "hood": [45, 100, 101, 104, 360, 387, 388, 465, 466, 473], "pymodule_execdef": [45, 57, 476], "pymodule_fromdefandspec2": [45, 57, 476], "pymodule_setdocstr": [45, 57], "pymodule_addfunct": [45, 57], "lack": [45, 46, 85, 98, 211, 214, 245, 248, 281, 291, 333, 339, 345, 420, 427, 428, 459, 460, 461, 466, 468, 475, 476, 478, 481], "add_spam": 45, "pymodule_addobject": [45, 57, 73, 76, 460, 470, 481], "easi": [45, 63, 68, 73, 84, 85, 92, 98, 99, 101, 104, 118, 135, 149, 165, 167, 181, 184, 189, 191, 192, 202, 206, 224, 226, 266, 290, 291, 297, 316, 329, 335, 339, 342, 356, 362, 386, 388, 409, 426, 428, 461, 462, 464, 465, 466, 467, 473, 474, 475, 476, 477, 478, 481, 482], "stole": 45, "pymodule_addintconst": [45, 57, 460], "pymodule_addstringconst": [45, 57, 460], "pymodule_addintmacro": [45, 466], "af_inet": [45, 101, 105, 124, 281, 335, 336, 339, 360, 466, 481], "pymodule_addstringmacro": [45, 466], "pymodule_addtyp": [45, 57, 480, 481], "tp_name": [45, 61, 63, 75, 76, 481], "pystate_findmodul": [45, 57], "pystate_addmodul": [45, 57, 481], "beforehand": [45, 430], "unnecessari": [45, 73, 85, 100, 118, 131, 269, 281, 282, 286, 342, 350, 380, 384, 388, 392, 408, 434, 461, 462, 464, 467, 472, 476, 479, 481], "harmless": [45, 73, 191, 374, 424, 481], "pystate_removemodul": [45, 57], "suffici": [46, 63, 73, 98, 99, 100, 113, 156, 181, 182, 184, 191, 273, 291, 310, 339, 342, 363, 386, 388, 401, 413, 430, 434, 459, 473, 474, 477, 478, 481], "pynone_check": 46, "pynumber_check": [47, 57, 479], "o1": [47, 49, 54, 78, 179], "o2": [47, 49, 54, 78, 179, 304, 400], "pynumber_subtract": [47, 55, 57], "subtract": [47, 139, 158, 181, 184, 257, 268, 273, 306, 382, 417, 428, 460, 463, 466, 467, 473, 478, 481], "pynumber_multipli": [47, 57], "multipli": [47, 72, 76, 139, 174, 181, 184, 197, 259, 267, 306, 316, 342, 343, 350, 417, 428, 460, 463, 464, 466, 473, 481], "pynumber_matrixmultipli": [47, 57, 476], "matrix": [47, 68, 85, 223, 259, 382, 400, 424, 428, 440, 461, 479, 481], "pynumber_floordivid": [47, 57], "floor": [47, 85, 87, 103, 164, 181, 184, 191, 219, 223, 273, 287, 342, 382, 426, 428, 447, 462, 466, 479, 480, 481], "divid": [47, 84, 92, 104, 139, 165, 181, 184, 189, 191, 192, 223, 245, 273, 282, 306, 351, 373, 417, 433, 441, 466, 473, 474, 475, 479, 481], "pynumber_truedivid": [47, 57], "approxim": [47, 64, 68, 85, 152, 156, 175, 179, 184, 188, 191, 200, 211, 219, 245, 273, 278, 281, 341, 345, 346, 360, 379, 382, 386, 426, 428, 430, 444, 459, 466, 467, 478, 481], "mathemat": [47, 68, 95, 104, 181, 184, 252, 259, 273, 288, 342, 426, 428, 464, 466, 476, 481], "pynumber_remaind": [47, 57], "remaind": [47, 75, 104, 153, 181, 184, 206, 259, 266, 273, 290, 317, 342, 364, 367, 428, 447, 466, 478, 481], "pynumber_divmod": [47, 57], "divmod": [47, 85, 181, 184, 223, 287, 342, 426, 428, 442, 448, 479, 481], "pynumber_pow": [47, 57], "o3": [47, 72], "pow": [47, 85, 89, 120, 164, 167, 223, 259, 273, 281, 287, 289, 342, 418, 426, 428, 429, 448, 462, 471, 473, 479, 481], "pynumber_neg": [47, 57], "pynumber_posit": [47, 57], "pynumber_absolut": [47, 57], "abs": [47, 63, 95, 152, 181, 184, 223, 273, 287, 289, 342, 379, 380, 382, 384, 426, 428, 438, 440, 448, 471, 478, 481], "pynumber_invert": [47, 57], "bitwis": [47, 58, 68, 92, 94, 95, 104, 175, 176, 191, 209, 213, 280, 291, 317, 327, 335, 338, 351, 404, 426, 429, 431, 463, 466, 467, 472, 477, 481], "pynumber_lshift": [47, 57], "shift": [47, 68, 175, 176, 181, 184, 189, 245, 281, 291, 342, 374, 426, 431, 460, 462, 464, 466, 467, 471, 474, 481], "pynumber_rshift": [47, 57], "pynumber_and": [47, 55, 57], "pynumber_xor": [47, 55, 57], "pynumber_or": [47, 55, 57], "pynumber_inplaceadd": [47, 57], "pynumber_inplacesubtract": [47, 55, 57], "pynumber_inplacemultipli": [47, 57], "pynumber_inplacematrixmultipli": [47, 57, 476], "pynumber_inplacefloordivid": [47, 57], "pynumber_inplacetruedivid": [47, 57], "pynumber_inplaceremaind": [47, 57], "pynumber_inplacepow": [47, 57], "pynumber_inplacelshift": [47, 57], "pynumber_inplacershift": [47, 57], "pynumber_inplaceand": [47, 55, 57], "pynumber_inplacexor": [47, 55, 57], "pynumber_inplaceor": [47, 55, 57], "pynumber_long": [47, 57, 469, 479], "pynumber_float": [47, 57, 479], "pynumber_index": [47, 57, 79, 465, 470, 481], "pynumber_tobas": [47, 57, 481], "marker": [47, 97, 107, 115, 147, 156, 168, 189, 191, 223, 253, 256, 268, 295, 297, 338, 339, 375, 384, 398, 454, 474, 477, 478, 481], "pynumber_asssize_t": [47, 57], "clip": [47, 56, 175, 434], "py_ssize_t_min": [47, 56], "pyindex_check": [47, 57, 480, 481], "nb_index": [47, 63, 465], "tp_as_numb": [47, 63, 75, 480, 481], "pyobject_ascharbuff": [48, 57, 481], "buffer_len": 48, "pyobject_asreadbuff": [48, 57, 481], "pyobject_checkreadbuff": [48, 57, 481], "pyobject_aswritebuff": [48, 57, 481], "py_notimpl": [49, 63, 64, 75, 461], "notimpl": [49, 68, 94, 114, 166, 211, 224, 248, 287, 297, 383, 387, 428, 448, 467, 468, 470, 475, 480, 481], "py_return_notimpl": 49, "pyobject_print": [49, 55, 73, 481], "fp": [49, 59, 66, 78, 95, 118, 149, 184, 186, 194, 198, 199, 202, 205, 221, 228, 240, 260, 274, 291, 302, 353, 358, 377, 380, 391, 393, 424, 464, 481], "pyobject_hasattr": [49, 57], "attr_nam": [49, 360, 462], "hasattr": [49, 87, 93, 101, 108, 223, 224, 253, 281, 318, 342, 350, 356, 365, 384, 386, 387, 425, 426, 430, 448, 463, 466, 472, 473, 475, 478, 481], "__getattr__": [49, 58, 63, 75, 85, 93, 140, 174, 214, 223, 253, 297, 321, 342, 383, 387, 426, 428, 445, 462, 466, 472, 473, 474, 475, 478, 481], "__getattribute__": [49, 63, 80, 87, 93, 223, 253, 297, 426, 428, 462, 466, 473, 478, 481], "pyobject_getattr": [49, 57, 61, 63], "pyobject_hasattrstr": [49, 57, 481], "pyobject_getattrstr": [49, 57, 72, 73, 79, 471], "pyobject_genericgetattr": [49, 57, 63, 93], "getter": [49, 50, 57, 68, 76, 93, 114, 165, 223, 224, 342, 363, 393, 466, 472, 475, 476, 481], "tp_getattro": [49, 63, 75, 481], "mro": [49, 61, 68, 85, 87, 114, 179, 195, 342, 383, 438, 478, 481], "outlin": [49, 100, 101, 137, 165, 219, 242, 382, 426, 481], "pyobject_setattr": [49, 57, 63, 481], "favour": [49, 54, 248, 253, 465, 474, 477, 478, 480, 481], "pyobject_delattr": 49, "plan": [49, 103, 131, 297, 382, 384, 401, 460, 464, 465, 466, 467, 468, 473, 475, 481], "pyobject_setattrstr": [49, 57, 79, 481], "pyobject_delattrstr": 49, "pyobject_genericsetattr": [49, 57, 63], "setter": [49, 50, 57, 68, 76, 93, 114, 223, 224, 342, 363, 387, 393, 466, 475, 481], "tp_setattro": [49, 63, 75], "del": [49, 54, 58, 68, 73, 76, 85, 88, 93, 99, 120, 142, 158, 176, 189, 194, 203, 223, 225, 228, 234, 245, 253, 269, 281, 282, 289, 290, 291, 294, 297, 328, 342, 387, 400, 425, 426, 427, 428, 429, 430, 431, 433, 438, 439, 443, 450, 460, 461, 463, 465, 466, 467, 473, 481], "pyobject_genericgetdict": [49, 57, 63, 481], "pyobject_genericsetdict": [49, 57], "_pyobject_getdictptr": 49, "pyobject_richcompar": [49, 57, 63, 75], "opid": 49, "py_lt": [49, 63, 64, 75], "py_l": [49, 63, 64, 75], "py_eq": [49, 63, 64, 75], "py_n": [49, 63, 64, 75], "py_gt": [49, 63, 64, 75], "py_g": [49, 63, 64, 75], "pyobject_richcomparebool": [49, 55, 57, 75, 481], "pyobject_format": [49, 57, 189], "format_spec": [49, 120, 219, 223, 343, 426, 433, 466, 481], "pyobject_repr": [49, 55, 57, 63, 64, 475, 476, 481], "pyobject_ascii": [49, 57], "pyobject_str": [49, 57, 63, 64, 475], "pyobject_byt": [49, 57], "pyobject_issubclass": [49, 57, 61, 476, 481], "cls": [49, 58, 61, 63, 85, 93, 94, 114, 120, 159, 179, 189, 201, 209, 211, 223, 224, 253, 260, 294, 297, 338, 360, 380, 383, 384, 386, 425, 426, 429, 434, 441, 462, 464, 471, 473, 477, 478, 481], "against": [49, 72, 73, 75, 76, 85, 94, 101, 103, 104, 110, 118, 124, 134, 139, 171, 174, 179, 188, 189, 191, 233, 249, 253, 276, 290, 291, 303, 305, 306, 309, 312, 317, 322, 329, 331, 339, 340, 342, 356, 360, 363, 367, 373, 382, 383, 384, 386, 387, 388, 398, 409, 410, 411, 412, 417, 418, 419, 424, 425, 426, 430, 453, 454, 460, 461, 462, 463, 464, 465, 472, 473, 475, 476, 477, 478, 479, 481], "__subclasscheck__": [49, 61, 114, 387, 426, 481], "3119": [49, 68, 114, 159, 426, 468, 482], "__mro__": [49, 63, 85, 93, 114, 195, 223, 342, 384, 426], "__bases__": [49, 63, 76, 201, 223, 297, 342, 383, 426, 463, 481], "pyobject_isinst": [49, 57, 63, 476, 481], "inst": [49, 93, 434, 441], "__instancecheck__": [49, 387, 426, 481], "__class__": [49, 80, 85, 87, 93, 94, 99, 181, 209, 223, 248, 297, 342, 387, 398, 426, 438, 462, 463, 466, 477, 481], "pyobject_hash": [49, 55, 57, 63, 471, 472], "pyobject_hashnotimpl": [49, 57, 63, 466], "pyobject_istru": [49, 55, 57, 481], "pyobject_not": [49, 57, 481], "pyobject_typ": [49, 57], "realli": [49, 63, 72, 75, 77, 85, 92, 95, 104, 107, 181, 189, 198, 201, 203, 269, 281, 286, 291, 326, 342, 350, 363, 364, 382, 385, 411, 426, 433, 434, 439, 460, 461, 462, 463, 464, 465, 468, 472, 477, 481], "py_typ": [49, 58, 61, 63, 75, 76, 99, 466, 471, 479, 480, 481], "pyobject_typecheck": [49, 75, 481], "pyobject_s": [49, 57, 63, 481], "pyobject_lengthhint": [49, 475], "defaultvalu": [49, 266], "estim": [49, 68, 184, 259, 286, 288, 316, 360, 426, 481], "__length_hint__": [49, 289, 426, 475, 481], "length_hint": [49, 289, 426, 475], "pyobject_dir": [49, 57], "dir": [49, 68, 78, 80, 85, 94, 110, 112, 161, 182, 187, 208, 209, 221, 223, 264, 290, 291, 292, 294, 321, 342, 346, 356, 358, 367, 378, 387, 397, 420, 426, 443, 449, 454, 463, 466, 470, 471, 472, 473, 474, 481], "pyobject_getait": [49, 57, 481], "aiter": [49, 223, 426, 470, 477, 481], "pyobject_gettypedata": [49, 57, 61, 472, 481], "pytype_spec": [49, 57, 61, 63, 99, 472, 481], "basics": [49, 58, 61, 472, 481], "pytype_gettypedatas": [49, 57, 472], "memset": [49, 174, 481], "pyobject_getitemdata": [49, 472], "py_tpflags_items_at_end": [49, 61, 63, 472, 481], "tp": [50, 68, 335, 360, 382, 384, 481], "visibl": [51, 60, 68, 73, 85, 92, 95, 101, 124, 126, 137, 156, 165, 175, 177, 188, 194, 203, 220, 245, 253, 259, 269, 335, 351, 374, 387, 393, 398, 427, 461, 464, 465, 472, 473, 474, 478, 479, 481], "tmp": [51, 76, 101, 107, 167, 221, 243, 269, 330, 358, 430, 454, 460, 463, 464, 465, 466, 467, 473, 479], "fli": [51, 68, 75, 184, 223, 244, 425, 437], "pyunstable_perfmapstate_init": [51, 481], "pid": [51, 97, 124, 130, 135, 140, 165, 276, 281, 291, 297, 307, 320, 335, 346, 360, 465, 467, 480, 481], "pyunstable_writeperfmapentri": [51, 481], "code_addr": 51, "code_s": 51, "entry_nam": 51, "7f3529fcf759": 51, "pyunstable_perfmapstate_fini": [51, 481], "shut": [51, 72, 101, 124, 243, 326, 331, 335, 336, 350, 382, 405, 450, 453, 463, 467, 476, 480, 481], "down": [51, 72, 76, 85, 95, 100, 101, 103, 124, 137, 149, 158, 175, 177, 189, 191, 210, 243, 245, 265, 273, 281, 291, 294, 295, 306, 307, 317, 326, 331, 335, 336, 339, 350, 351, 369, 374, 382, 386, 392, 405, 450, 453, 460, 462, 463, 467, 472, 476, 477, 478, 479, 480, 481], "shouldn": [51, 64, 76, 99, 104, 131, 265, 270, 300, 350, 386, 393, 461, 462, 464, 465, 466, 469, 477, 481], "scenario": [51, 100, 101, 184, 186, 265, 266, 318, 386, 387, 393, 430, 454, 475, 477, 481], "fork": [51, 59, 68, 73, 84, 101, 138, 140, 164, 211, 225, 255, 276, 281, 291, 307, 326, 330, 336, 339, 346, 393, 463, 467, 472, 475, 478, 479, 481], "py_refcnt": [52, 58, 76, 466, 470, 481], "py_set_refcnt": [52, 470, 481], "refcnt": [52, 470], "py_newref": [52, 57, 76, 87, 470, 481], "py_xincref": [52, 73, 471, 479, 481], "py_xnewref": [52, 57, 470, 481], "attr": [52, 63, 68, 79, 92, 120, 175, 189, 238, 242, 249, 253, 271, 279, 289, 290, 297, 312, 358, 360, 367, 386, 387, 411, 413, 414, 415, 425, 426, 429, 434, 460, 461, 464, 471, 474, 481], "py_clear": [52, 63, 73, 75, 76, 464, 472, 481], "py_setref": [52, 76, 472, 481], "dst": [52, 140, 174, 181, 291, 330, 338, 364, 474, 481], "py_xsetref": [52, 76, 472, 481], "pyeval_getbuiltin": [53, 57], "pyeval_getloc": [53, 57], "pyeval_getglob": [53, 57], "pyeval_getfuncnam": [53, 57], "pyeval_getfuncdesc": [53, 57], "pysequence_check": [54, 57, 63], "pysequence_s": [54, 57, 63, 481], "pysequence_concat": [54, 57, 63], "pysequence_repeat": [54, 57, 63], "pysequence_inplaceconcat": [54, 57, 63], "pysequence_inplacerepeat": [54, 57, 63], "th": [54, 148, 189, 194, 223, 264, 281, 341, 342, 364, 382, 408, 426, 460, 463, 465], "pysequence_getslic": [54, 57, 63], "i1": [54, 188, 276, 417, 464], "i2": [54, 188, 276, 417, 464], "assign": [54, 61, 63, 68, 73, 75, 76, 79, 85, 87, 93, 94, 95, 107, 110, 113, 118, 120, 124, 137, 156, 165, 168, 174, 175, 179, 184, 189, 194, 200, 201, 203, 206, 209, 210, 211, 223, 224, 241, 248, 265, 269, 276, 281, 290, 291, 294, 295, 297, 312, 317, 328, 329, 335, 338, 339, 342, 345, 349, 350, 360, 362, 363, 374, 379, 384, 385, 386, 387, 398, 409, 411, 420, 423, 425, 426, 427, 429, 430, 431, 433, 438, 439, 440, 447, 454, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 474, 476, 477, 478, 480, 481, 482], "pysequence_delitem": [54, 57, 481], "pysequence_setslic": [54, 57, 63], "pysequence_delslic": [54, 57, 63], "pysequence_count": [54, 57], "occurr": [54, 64, 85, 104, 138, 158, 165, 175, 184, 194, 203, 226, 269, 290, 317, 326, 342, 356, 398, 411, 426, 427, 428, 429, 432, 433, 434, 462, 464, 465, 468, 473, 481], "pysequence_contain": [54, 57, 63], "pysequence_index": [54, 57], "pysequence_list": [54, 57], "pysequence_tupl": [54, 57, 481], "pysequence_fast": [54, 57], "pysequence_fast_get_s": 54, "faster": [54, 63, 68, 84, 85, 93, 104, 124, 137, 174, 175, 184, 205, 224, 232, 233, 245, 259, 281, 291, 306, 339, 342, 382, 387, 424, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481], "pysequence_fast_get_item": 54, "pysequence_fast_item": 54, "reloc": [54, 466, 481], "pysequence_item": 54, "frozenset": [55, 68, 87, 120, 180, 223, 252, 272, 297, 350, 384, 386, 400, 425, 426, 428, 448, 464, 465, 466, 471, 473, 480, 481], "pysetobject": 55, "medium": [55, 94, 176, 184, 424, 464, 465, 481], "pyset_typ": [55, 57], "pyfrozenset_typ": [55, 57], "pyset_check": 55, "pyfrozenset_check": 55, "pyanyset_check": 55, "pyset_checkexact": [55, 470, 481], "pyanyset_checkexact": 55, "pyfrozenset_checkexact": 55, "pyset_new": [55, 57, 465], "pyfrozenset_new": [55, 57, 465], "pyset_s": [55, 57, 465], "anyset": 55, "pyset_get_s": 55, "pyset_contain": [55, 57, 465], "__contains__": [55, 58, 63, 80, 85, 87, 94, 97, 159, 194, 203, 209, 259, 269, 289, 342, 387, 405, 414, 426, 428, 460, 463, 464, 466, 481], "unhash": [55, 78, 179, 342, 386, 426, 428, 470, 480, 481], "pyset_add": [55, 57, 465], "grow": [55, 60, 85, 101, 191, 224, 267, 318, 374, 460, 464, 466, 467, 473, 481], "pyset_discard": [55, 57, 465], "miss": [55, 103, 104, 158, 168, 174, 179, 184, 194, 197, 203, 209, 224, 233, 245, 248, 249, 253, 259, 265, 274, 277, 290, 291, 294, 335, 339, 341, 346, 350, 351, 360, 364, 365, 373, 378, 384, 387, 392, 393, 423, 425, 426, 428, 429, 430, 439, 460, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "pyset_pop": [55, 57], "pyset_clear": [55, 57], "pyslice_typ": [56, 57], "pyslice_check": 56, "pyslice_new": [56, 57], "step": [56, 63, 68, 72, 73, 77, 84, 85, 93, 95, 99, 103, 104, 108, 110, 118, 120, 139, 142, 149, 153, 156, 167, 174, 183, 184, 189, 191, 223, 228, 240, 245, 248, 259, 265, 273, 279, 281, 290, 291, 295, 316, 317, 336, 338, 342, 350, 356, 374, 382, 397, 412, 419, 425, 426, 428, 434, 439, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 481], "pyslice_getindic": [56, 57], "treat": [56, 58, 59, 61, 63, 64, 66, 68, 84, 94, 95, 98, 99, 103, 104, 118, 137, 139, 152, 156, 165, 175, 179, 181, 184, 186, 188, 191, 192, 201, 203, 214, 219, 224, 241, 243, 257, 259, 265, 266, 269, 273, 290, 294, 317, 329, 333, 338, 342, 343, 346, 351, 356, 360, 362, 367, 374, 384, 386, 392, 393, 398, 410, 411, 425, 426, 427, 428, 433, 434, 459, 460, 462, 465, 466, 467, 468, 474, 477, 479, 480, 481], "pysliceobject": 56, "pyslice_getindicesex": [56, 57, 472, 478, 481], "slicelength": 56, "manner": [56, 73, 85, 92, 101, 165, 243, 266, 268, 290, 305, 309, 311, 317, 319, 346, 384, 386, 398, 413, 425, 426, 430, 454, 463, 465, 466, 481], "pyslice_unpack": [56, 57, 472, 478, 481], "pyslice_adjustindic": [56, 57, 472, 478, 481], "0x03050400": [56, 478, 481], "0x03060000": [56, 478, 481], "0x03060100": [56, 478, 481], "extract": [56, 68, 72, 74, 75, 89, 94, 95, 98, 99, 117, 118, 175, 181, 188, 189, 191, 195, 196, 198, 212, 223, 228, 240, 241, 249, 250, 253, 259, 291, 295, 310, 311, 317, 328, 330, 333, 342, 350, 379, 392, 426, 459, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481], "boost": [56, 79, 224, 464, 481], "py_ellipsi": [56, 429], "387": [57, 211], "pyunstabl": 57, "_py_internalst": 57, "hardcod": [57, 174, 255, 265, 267, 458, 475, 481], "0x030a0000": 57, "0x03020000": 57, "stabl": [57, 58, 61, 68, 99, 223, 234, 250, 274, 290, 342, 350, 423, 463, 464, 467, 472, 475, 476, 477, 479, 480, 481, 482], "python39": 57, "abi3": [57, 474], "mymodul": [57, 79, 100, 228, 387, 388, 398, 467, 473], "prereleas": [57, 481], "pybaseobject_typ": [57, 63], "pybytearrayiter_typ": 57, "pybytesiter_typ": 57, "pybytes_decodeescap": [57, 481], "pybytes_repr": [57, 481], "pycfunctionwithkeyword": [57, 58], "pycfunction_cal": [57, 481], "pycfunction_getflag": 57, "pycfunction_getfunct": 57, "pycfunction_getself": 57, "pycfunction_new": [57, 58, 481], "pycfunction_newex": [57, 58, 481], "pycfunction_typ": 57, "pycmethod_new": [57, 58, 481], "pycapsule_typ": 57, "pyclassmethoddescr_typ": 57, "pydictitems_typ": 57, "pydictiteritem_typ": 57, "pydictiterkey_typ": 57, "pydictitervalue_typ": 57, "pydictkeys_typ": 57, "pydictproxy_typ": 57, "pydictreviteritem_typ": 57, "pydictreviterkey_typ": 57, "pydictrevitervalue_typ": 57, "pydictvalues_typ": 57, "pyellipsis_typ": 57, "pyenum_typ": 57, "pyerr_display": [57, 470, 472, 481], "pyerr_programtext": 57, "pyeval_callfunct": [57, 480, 481], "pyeval_callmethod": [57, 480, 481], "pyeval_callobjectwithkeyword": [57, 480, 481], "pyeval_evalcod": [57, 66, 102, 470, 481], "pyeval_evalcodeex": [57, 66, 481], "pyeval_evalfram": [57, 66], "pyeval_evalframeex": [57, 66, 475, 481], "pyexc_baseexceptiongroup": 57, "pyexc_encodingwarn": 57, "pyexceptionclass_nam": [57, 479, 481], "pyfilter_typ": 57, "pygetsetdescr_typ": 57, "pylistiter_typ": 57, "pylistreviter_typ": 57, "pylongrangeiter_typ": 57, "pylong_getinfo": 57, "pymap_typ": 57, "pymemberdescr_typ": 57, "pymember_geton": [57, 58, 93, 472], "pymember_seton": [57, 58, 472], "pymemoryview_typ": 57, "pymethoddescr_typ": 57, "pymoduledef_typ": 57, "pyos_afterfork": [57, 59, 472, 478, 481], "pyos_afterfork_par": [57, 59, 291, 478, 481], "pyos_beforefork": [57, 59, 291, 478, 481], "pyos_fspath": [57, 59, 477, 481], "pyos_inputhook": [57, 66, 472, 481], "pyos_interruptoccur": [57, 481], "pyos_getsig": [57, 59, 460], "pyos_mystricmp": [57, 481], "pyos_mystrnicmp": [57, 481], "pyos_setsig": [57, 59, 460, 481], "pyos_sighandler_t": [57, 59], "ob_refcnt": [57, 63, 470, 481], "ob_typ": [57, 63, 76, 471, 481], "pyobject_clearweakref": [57, 63, 67, 75, 472], "pyobject_delitemstr": [57, 463], "pyobject_selfit": 57, "pyrangeiter_typ": 57, "pyrange_typ": [57, 465], "pyreversed_typ": 57, "pysequence_in": 57, "pysetiter_typ": 57, "pystructsequence_desc": [57, 60, 478, 481], "pystructsequence_field": [57, 60, 478, 481], "pystructsequence_getitem": [57, 60], "pystructsequence_new": [57, 60], "pystructsequence_newtyp": [57, 60, 481], "pystructsequence_setitem": [57, 60], "pystructsequence_unnamedfield": [57, 60, 480, 481], "pysuper_typ": 57, "pysys_addwarnoptionunicod": [57, 59, 471, 478, 481], "pysys_formatstderr": [57, 59], "pysys_formatstdout": [57, 59], "pysys_getxopt": [57, 59], "pysys_haswarnopt": [57, 471, 481], "pysys_setobject": [57, 59], "pysys_setpath": [57, 59, 471, 481], "pysys_writestderr": [57, 59], "pysys_writestdout": [57, 59], "pythread_getinfo": 57, "pythread_acquire_lock": [57, 481], "pythread_acquire_lock_tim": [57, 481], "pythread_allocate_lock": 57, "pythread_exit_thread": [57, 481], "pythread_free_lock": 57, "pythread_get_stacks": 57, "pythread_get_thread_id": [57, 478, 481], "pythread_get_thread_native_id": [57, 481], "pythread_init_thread": 57, "pythread_release_lock": [57, 481], "pythread_set_stacks": 57, "pythread_start_new_thread": [57, 478, 481], "pytraceback_her": [57, 481], "pytraceback_print": [57, 477, 481], "pytraceback_typ": 57, "pytupleiter_typ": 57, "pytuple_getitem": [57, 60, 73, 79], "pytuple_getslic": [57, 60], "pytuple_pack": [57, 60, 79, 464], "pytuple_s": [57, 60, 79], "pytuple_typ": [57, 60], "pytype_clearcach": [57, 61], "pytype_frommetaclass": [57, 61, 63, 472, 481], "pytype_frommoduleandspec": [57, 61, 63, 99, 470, 472, 480, 481], "pytype_genericalloc": [57, 61, 63, 479], "pytype_genericnew": [57, 61, 63, 76], "pytype_getflag": [57, 61, 481], "pytype_getmodul": [57, 61, 99, 480, 481], "pytype_getmodulest": [57, 61, 99, 480, 481], "pytype_getnam": [57, 61, 471, 481], "pytype_getqualnam": [57, 61, 471, 481], "pytype_getslot": [57, 61, 470, 475, 481], "pytype_issubtyp": [57, 61], "pytype_modifi": [57, 61, 63, 481], "pytype_slot": [57, 58, 61], "pytype_typ": [57, 61, 63, 472, 481], "pyunicodeiter_typ": 57, "pyunicode_append": 57, "pyunicode_appendanddel": 57, "pyunicode_asasciistr": [57, 64, 474], "pyunicode_ascharmapstr": [57, 64], "pyunicode_asdecodedobject": [57, 472, 477, 481], "pyunicode_asdecodedunicod": [57, 472, 477, 481], "pyunicode_asencodedobject": [57, 472, 474, 477, 481], "pyunicode_asencodedstr": [57, 64, 481], "pyunicode_asencodedunicod": [57, 472, 477, 481], "pyunicode_aslatin1str": [57, 64, 474], "pyunicode_asmbcsstr": [57, 64, 474], "pyunicode_asrawunicodeescapestr": [57, 64, 474], "pyunicode_asucs4": [57, 64, 474], "pyunicode_asucs4copi": [57, 64, 470, 474], "pyunicode_asutf16str": [57, 64], "pyunicode_asutf32str": [57, 64], "pyunicode_asutf8ands": [57, 64, 470, 478, 481], "pyunicode_asutf8str": [57, 64, 474], "pyunicode_asunicodeescapestr": [57, 64, 474], "pyunicode_aswidechar": [57, 64, 481], "pyunicode_aswidecharstr": [57, 64, 470, 474, 478, 481], "pyunicode_buildencodingmap": [57, 481], "pyunicode_compar": [57, 64, 470, 474], "pyunicode_comparewithasciistr": [57, 64, 473, 481], "pyunicode_concat": [57, 64, 474], "pyunicode_contain": [57, 64], "pyunicode_count": [57, 64], "pyunicode_decod": [57, 64, 481], "pyunicode_decodeascii": [57, 64], "pyunicode_decodecharmap": [57, 64], "pyunicode_decodecodepagest": 57, "pyunicode_decodefsdefault": [57, 64, 72, 481], "pyunicode_decodefsdefaultands": [57, 59, 64], "pyunicode_decodelatin1": [57, 64], "pyunicode_decodelocal": [57, 64], "pyunicode_decodelocaleands": [57, 59, 64, 478], "pyunicode_decodembc": [57, 64], "pyunicode_decodembcsst": [57, 64], "pyunicode_decoderawunicodeescap": [57, 64], "pyunicode_decodeutf16": [57, 64], "pyunicode_decodeutf16st": [57, 64], "pyunicode_decodeutf32": [57, 64], "pyunicode_decodeutf32st": [57, 64], "pyunicode_decodeutf7": [57, 64], "pyunicode_decodeutf7st": [57, 64], "pyunicode_decodeutf8": [57, 64], "pyunicode_decodeutf8st": [57, 64, 481], "pyunicode_decodeunicodeescap": [57, 64], "pyunicode_encodecodepag": [57, 64, 474, 481], "pyunicode_encodefsdefault": [57, 59, 64, 481], "pyunicode_encodelocal": [57, 59, 64, 478, 481], "pyunicode_fsdecod": [57, 64, 472, 477, 481], "pyunicode_find": [57, 64], "pyunicode_findchar": [57, 64, 470, 474, 478, 481], "pyunicode_format": [57, 64], "pyunicode_fromencodedobject": [57, 64], "pyunicode_fromformatv": [57, 59, 64, 472, 481], "pyunicode_fromobject": [57, 64], "pyunicode_fromordin": 57, "pyunicode_fromstringands": [57, 64, 470, 481], "pyunicode_fromwidechar": [57, 64, 474], "pyunicode_getdefaultencod": 57, "pyunicode_getlength": [57, 64, 470, 474], "pyunicode_internfromstr": [57, 64], "pyunicode_interninplac": [57, 64, 470, 481], "pyunicode_isidentifi": [57, 64, 481], "pyunicode_join": [57, 64, 474], "pyunicode_partit": 57, "pyunicode_rpartit": 57, "pyunicode_rsplit": 57, "pyunicode_readchar": [57, 64, 474], "pyunicode_replac": [57, 64], "pyunicode_res": 57, "pyunicode_richcompar": [57, 64], "pyunicode_split": [57, 64], "pyunicode_splitlin": [57, 64], "pyunicode_substr": [57, 64, 470, 474], "pyunicode_tailmatch": [57, 64, 470, 474, 480], "pyunicode_transl": [57, 64], "pyunicode_typ": [57, 63, 64], "pyunicode_writechar": [57, 64, 474], "ob_bas": [57, 58, 76, 481], "ob_siz": [57, 58, 63, 471, 481], "pyweakrefer": [57, 471, 481], "pyweakref_getobject": [57, 67], "pyweakref_newproxi": [57, 67], "pywrapperdescr_typ": 57, "pyzip_typ": 57, "py_atexit": [57, 59], "py_bytesmain": [57, 66, 102, 479], "py_compilestr": [57, 66, 470], "py_exit": [57, 59, 477, 481], "py_filesystemdefaultencodeerror": [57, 472, 481], "py_filesystemdefaultencod": [57, 472, 481], "py_genericalia": [57, 62, 481], "py_genericaliastyp": [57, 62, 481], "py_getrecursionlimit": 57, "py_hasfilesystemdefaultencod": [57, 472], "py_i": [57, 58, 470, 481], "py_isfals": [57, 58, 470, 481], "py_isnon": [57, 58, 470, 481], "py_istru": [57, 58, 470, 481], "py_makependingcal": 57, "py_setrecursionlimit": 57, "py_ucs4": [57, 64, 474], "py_utf8mod": [57, 472, 481], "py_intptr_t": 57, "py_uintptr_t": 57, "allocfunc": [57, 63, 75], "binaryfunc": [57, 63], "descrgetfunc": [57, 63, 75], "descrsetfunc": [57, 63, 75], "getattrfunc": [57, 63, 75], "getattrofunc": [57, 63, 75], "getiterfunc": [57, 63, 75], "hashfunc": [57, 63, 75], "initproc": [57, 63, 75, 76], "iternextfunc": [57, 63, 75], "lenfunc": [57, 63], "newfunc": [57, 63, 75, 224], "objobjargproc": [57, 63], "objobjproc": [57, 63], "releasebufferproc": [57, 63, 481], "reprfunc": [57, 63, 75], "richcmpfunc": [57, 63, 75], "setattrfunc": [57, 63, 75], "setattrofunc": [57, 63, 75], "ssizeargfunc": [57, 63], "ssizeobjargproc": [57, 63], "ssizessizeargfunc": 57, "ssizessizeobjargproc": 57, "symtabl": [57, 68, 252, 262, 467, 470, 472, 480, 481], "ternaryfunc": [57, 63, 75], "unaryfunc": [57, 63], "ultim": [58, 191, 223, 233, 290, 350, 426, 428, 430, 434, 462, 464, 481], "expans": [58, 218, 232, 245, 292, 306, 312, 346, 362, 407, 420, 464, 474, 475], "notion": [58, 181, 184, 188, 191, 223, 297, 342, 374, 408, 412, 428, 432, 473], "py_siz": [58, 466, 471, 481], "pyobject_head": [58, 63, 76, 468], "pyobject_var_head": [58, 63, 75], "py_set_typ": [58, 471, 481], "py_is_typ": [58, 481], "py_set_s": [58, 471, 481], "pyobject_head_init": [58, 63, 472], "_pyobject_extra_init": 58, "pyvarobject_head_init": [58, 63, 75, 76, 481], "shall": [58, 297, 327, 413, 424, 459, 473], "meth_keyword": [58, 73, 99, 481], "_pycfunctionfast": 58, "meth_fastcal": [58, 99, 478, 481], "narg": [58, 68, 89, 99, 101, 116, 290, 307, 338, 397, 449, 467, 473, 481], "_pycfunctionfastwithkeyword": 58, "pycmethod": [58, 61, 99, 471, 480, 481], "meth_method": [58, 99, 480, 481], "defining_class": [58, 99, 481], "ml_name": [58, 75], "ml_meth": [58, 75], "ml_flag": [58, 75], "ml_doc": [58, 75], "bitfield": [58, 111, 481], "convent": [58, 61, 63, 73, 85, 92, 93, 99, 100, 101, 107, 165, 174, 175, 176, 179, 181, 207, 226, 228, 241, 244, 264, 269, 290, 291, 293, 343, 350, 360, 362, 364, 393, 397, 426, 428, 432, 433, 450, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 475, 476, 478, 481], "fourth": [58, 95, 175, 192, 265, 305, 317, 364, 417, 462], "question": [58, 73, 79, 85, 94, 95, 100, 101, 104, 107, 139, 156, 191, 192, 233, 264, 265, 290, 338, 367, 371, 404, 440, 460, 462, 463, 465, 478, 480, 481], "superclass": [58, 61, 63, 99, 114, 153, 179, 223, 224, 260, 266, 310, 336, 384, 426, 462, 463, 465, 472, 481], "unus": [58, 63, 76, 89, 124, 147, 175, 228, 256, 257, 280, 281, 311, 330, 336, 338, 343, 356, 360, 433, 459, 462, 466, 475, 478, 480, 481], "meth_o": [58, 62, 462, 481], "meth_class": [58, 62, 463], "classmethod": [58, 87, 93, 94, 114, 158, 159, 174, 181, 184, 189, 191, 201, 209, 219, 223, 224, 248, 253, 259, 281, 294, 297, 341, 342, 356, 379, 380, 384, 386, 420, 423, 426, 448, 462, 464, 467, 470, 471, 472, 473, 474, 477, 478, 479, 481], "meth_stat": [58, 463], "staticmethod": [58, 85, 87, 93, 94, 114, 191, 209, 223, 224, 266, 356, 418, 426, 448, 462, 464, 467, 470, 473, 474, 479, 481], "meth_coexist": [58, 464], "sq_contain": [58, 63], "preclud": [58, 342, 479], "ml": [58, 95, 463], "unavail": [58, 84, 108, 191, 253, 268, 281, 291, 330, 384, 426, 481], "tp_member": [58, 63, 75, 76, 471, 481], "py_readon": [58, 75, 472], "py_t_str": 58, "py_t_object_ex": [58, 76, 472], "t_object": [58, 472, 481], "__vectorcalloffset__": [58, 61], "py_t_pyssizet": 58, "spam_type_memb": 58, "offsetof": [58, 76, 472], "spam_object": 58, "stddef": [58, 76, 472], "tp_dictoffset": [58, 61, 63, 75, 472, 481], "tp_weaklistoffset": [58, 61, 63, 75, 472, 480, 481], "__dictoffset__": 58, "__weaklistoffset__": 58, "py_tpflags_managed_dict": [58, 61, 63, 472, 481], "py_tpflags_managed_weakref": [58, 61, 63, 75, 472, 481], "structmemb": [58, 93, 472, 481], "obj_addr": 58, "py_audit_read": [58, 472], "py_relative_offset": [58, 472], "py_tp_memb": [58, 61, 481], "mandatori": [58, 76, 84, 240, 246, 248, 266, 291, 340, 463, 474, 478, 480, 481], "read_restrict": [58, 472], "write_restrict": [58, 472], "py_": [58, 61, 459, 481], "delattr": [58, 223, 438, 448], "py_t_byt": 58, "py_t_short": 58, "py_t_int": [58, 75, 76, 472], "py_t_long": 58, "py_t_longlong": 58, "py_t_ubyt": 58, "py_t_uint": 58, "py_t_ushort": 58, "py_t_ulong": 58, "py_t_ulonglong": 58, "py_t_float": 58, "py_t_doubl": [58, 75, 472], "py_t_bool": 58, "ro": [58, 85, 338], "py_t_string_inplac": 58, "py_t_char": 58, "t_int": [58, 472], "surpris": [58, 68, 84, 85, 101, 116, 181, 184, 191, 223, 245, 265, 281, 306, 341, 356, 367, 384, 423, 430, 461, 462, 465, 469, 470, 471, 472, 476, 478, 479, 480, 481], "t_none": [58, 472, 481], "tp_getset": [58, 63, 75, 76], "pathlik": [59, 64, 87, 161, 223, 250, 291, 292, 294, 342, 387, 423, 477, 481], "__fspath__": [59, 291, 294, 360, 387, 477, 481], "py_fdisinteract": 59, "deem": [59, 205, 228, 267, 342, 424, 460, 461, 465, 467, 472, 473, 474, 475, 481], "isatti": [59, 151, 223, 256, 291, 350, 444, 481], "clone": [59, 199, 203, 206, 228, 233, 235, 281, 291, 299, 333, 374, 382, 408, 432, 458, 474, 479], "parent": [59, 61, 63, 68, 85, 98, 100, 101, 112, 116, 131, 158, 175, 187, 223, 246, 248, 251, 253, 265, 276, 279, 281, 291, 294, 300, 303, 307, 310, 312, 331, 335, 336, 338, 339, 346, 350, 367, 369, 371, 374, 383, 387, 388, 393, 408, 411, 419, 426, 430, 438, 462, 463, 464, 465, 466, 470, 472, 474, 475, 477, 478, 481], "register_at_fork": [59, 291, 478, 481], "reliabl": [59, 122, 124, 130, 131, 137, 156, 159, 184, 186, 249, 281, 331, 346, 401, 413, 425, 430, 459, 463, 467, 473, 474, 475, 476, 477, 478, 481], "microsoft": [59, 68, 77, 86, 156, 165, 174, 252, 291, 348, 350, 396, 397, 405, 433, 446, 454, 456, 462, 463, 465, 466, 471, 476, 481], "visual": [59, 77, 85, 92, 103, 317, 339, 373, 382, 411, 453, 454, 459, 460, 463, 466, 476, 481], "sigact": [59, 481], "undecod": [59, 107, 156, 194, 291, 473, 481], "dc80": [59, 107, 156, 223], "dcff": [59, 107, 156, 223], "surrog": [59, 64, 156, 223, 260, 291, 338, 344, 356, 408, 474, 475, 479, 481], "error_po": 59, "0x80": [59, 107, 176, 342, 481], "0xff": [59, 156, 223, 342], "1000": [59, 85, 97, 101, 107, 147, 171, 175, 181, 219, 245, 257, 259, 273, 281, 282, 318, 327, 342, 343, 350, 367, 380, 382, 424, 438, 439, 442, 444, 447, 448, 460, 465, 466, 467, 473, 474, 479], "plus": [59, 63, 75, 84, 118, 174, 175, 176, 184, 188, 192, 206, 281, 290, 291, 303, 329, 340, 342, 350, 360, 362, 363, 375, 392, 409, 428, 432, 433, 459, 462, 463, 464, 465, 472, 474, 475, 481], "hundr": [59, 101, 191, 233], "pysys_audit": [59, 97, 140, 350, 481], "apart": [59, 76, 95, 100, 104, 165, 188, 273, 281, 290, 300, 428, 433, 459, 463, 467, 469], "unavoid": [59, 95, 181, 464, 467, 469], "pysys_addaudithook": [59, 140, 350], "py_audithookfunct": 59, "silenc": [59, 118, 223, 321, 330, 395, 467, 473, 475, 480, 481], "578": [59, 68, 140, 350, 465, 466, 481], "addaudithook": [59, 140, 350, 448], "kill": [59, 84, 113, 128, 131, 135, 138, 140, 164, 175, 245, 255, 281, 291, 331, 346, 360, 400, 405, 420, 466, 467, 468, 473, 478, 481], "120": [59, 72, 95, 153, 191, 224, 259, 350, 382, 467, 477, 479, 481], "pytuple_check": [60, 79], "pytuple_checkexact": 60, "oo": [60, 174, 350, 360, 448, 453, 469, 476, 481], "pytuple_get_s": 60, "pytuple_get_item": 60, "pytuple_set_item": [60, 470, 481], "_pytuple_res": [60, 462], "shrink": [60, 182, 464, 481], "client": [60, 68, 73, 84, 93, 100, 101, 105, 108, 124, 140, 142, 149, 156, 162, 165, 168, 192, 194, 239, 242, 243, 249, 252, 254, 257, 265, 267, 286, 291, 297, 326, 327, 335, 336, 338, 357, 360, 363, 382, 384, 392, 393, 407, 408, 415, 416, 418, 424, 439, 449, 462, 464, 466, 472, 474, 479, 481], "namedtupl": [60, 68, 87, 94, 115, 145, 180, 286, 297, 300, 301, 317, 327, 334, 338, 342, 345, 347, 350, 380, 383, 384, 399, 440, 466, 467, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481], "desc": [60, 93, 279, 286, 338, 469], "pystructsequence_inittyp": [60, 475], "pystructsequence_inittype2": [60, 475], "meta": [60, 68, 87, 110, 120, 149, 175, 176, 218, 229, 248, 249, 290, 350, 393, 426, 462, 472, 474, 475, 477, 481], "n_in_sequ": 60, "unnam": [60, 73, 94, 174, 338, 403, 428, 475, 481], "pystructsequence_get_item": 60, "pystructsequence_set_item": 60, "pytype_check": [61, 73, 481], "pytype_checkexact": [61, 481], "primarili": [61, 85, 98, 100, 137, 139, 156, 181, 192, 204, 224, 250, 253, 265, 297, 302, 342, 346, 350, 384, 386, 398, 409, 425, 427, 459, 461, 462, 464, 466, 467, 474, 476, 478, 480, 481], "pytype_getdict": [61, 63, 481], "proxi": [61, 67, 68, 162, 165, 168, 185, 211, 223, 224, 240, 246, 255, 342, 383, 386, 393, 400, 408, 417, 424, 426, 461, 466, 472, 473, 474, 476, 477, 479, 481], "tp_dict": [61, 63, 75, 466, 481], "languag": [61, 64, 68, 72, 73, 74, 80, 84, 85, 87, 93, 94, 95, 99, 101, 103, 104, 107, 108, 110, 120, 156, 165, 174, 178, 189, 194, 200, 203, 207, 215, 220, 223, 238, 244, 245, 248, 252, 264, 271, 279, 297, 305, 317, 338, 342, 343, 350, 353, 362, 367, 375, 377, 383, 384, 400, 408, 409, 417, 426, 428, 432, 433, 434, 443, 455, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "adequ": [61, 63, 76, 211, 467, 474], "pytype_addwatch": [61, 472], "pytype_watchcallback": 61, "pytype_watch": [61, 472, 481], "pytype_clearwatch": 61, "_pytype_lookup": [61, 93, 470, 481], "pytype_hasfeatur": [61, 63, 481], "pytype_is_gc": 61, "detector": [61, 73, 253, 454, 467], "issubclass": [61, 78, 87, 114, 159, 223, 342, 383, 384, 398, 426, 438, 448, 460, 466, 470, 478, 481], "nitem": [61, 63], "tp_alloc": [61, 63, 75, 76, 99, 481], "kwds": [61, 63, 75, 76, 93, 135, 142, 167, 173, 201, 209, 223, 224, 253, 281, 295, 316, 343, 360, 378, 383, 386, 426, 429, 439, 465, 479, 481], "qualifi": [61, 68, 87, 93, 189, 191, 195, 248, 253, 266, 267, 297, 333, 335, 342, 346, 384, 386, 396, 398, 411, 414, 421, 426, 430, 434, 453, 459, 465, 471, 476, 479, 481, 482], "pytype_getmodulebydef": [61, 99, 471, 481], "shortcut": [61, 68, 191, 233, 245, 296, 319, 342, 356, 383, 426, 459, 464, 466, 478, 481], "togeth": [61, 63, 68, 72, 92, 93, 95, 98, 100, 101, 103, 104, 118, 124, 131, 156, 158, 174, 191, 200, 205, 206, 216, 223, 232, 233, 241, 242, 245, 257, 259, 265, 266, 269, 291, 330, 339, 342, 351, 367, 372, 382, 384, 386, 387, 388, 393, 397, 410, 412, 424, 426, 428, 447, 464, 472, 473, 474, 480, 481], "nb_add": [61, 63, 99], "pyunstable_type_assignversiontag": [61, 481], "metaclass": [61, 68, 87, 93, 94, 110, 114, 120, 174, 209, 223, 224, 253, 342, 383, 384, 425, 466, 468, 471, 472, 473, 475, 476, 477, 478, 479, 481], "py_tpflags_heaptyp": [61, 63, 99, 470, 480], "py_tp_bas": [61, 63], "pytype_from": [61, 472, 481], "14": [61, 68, 85, 89, 95, 97, 104, 107, 119, 137, 139, 148, 156, 158, 159, 164, 174, 175, 181, 184, 189, 191, 207, 223, 234, 239, 245, 248, 251, 257, 259, 281, 291, 294, 300, 317, 320, 330, 335, 338, 341, 342, 343, 350, 356, 364, 376, 384, 396, 411, 426, 428, 430, 433, 440, 442, 444, 447, 450, 462, 464, 465, 467, 470, 471, 473, 476, 481, 482], "__init_subclass__": [61, 209, 223, 426, 471, 477, 481], "__set_name__": [61, 93, 179, 426, 472, 477, 481], "tp_doc": [61, 63, 75, 76, 470, 481], "overlap": [61, 64, 92, 104, 159, 175, 188, 257, 259, 280, 290, 294, 317, 341, 342, 382, 434, 461, 462, 481], "mistak": [61, 73, 94, 103, 104, 118, 209, 211, 265, 269, 290, 342, 364, 367, 454, 464, 465, 467, 469, 472, 481], "suggest": [61, 68, 74, 84, 85, 91, 95, 101, 104, 107, 113, 131, 184, 223, 228, 233, 248, 297, 305, 318, 338, 363, 364, 380, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 475, 477, 479, 480, 481], "pynumbermethod": [61, 63, 75, 462, 465], "pysequencemethod": [61, 63, 75], "pymappingmethod": [61, 63, 75], "pyasyncmethod": [61, 63, 75, 481], "py_tp_dealloc": 61, "py_nb_add": 61, "py_sq_length": 61, "sq_length": [61, 63, 481], "tp_vectorcal": [61, 63, 75, 481], "tp_mro": [61, 63, 75, 481], "tp_cach": [61, 63, 75], "tp_subclass": [61, 63, 75, 472, 481], "tp_weaklist": [61, 63, 75, 472], "problemat": [61, 165, 266, 281, 464, 469, 473, 478, 481], "unlimit": [61, 124, 135, 149, 200, 201, 206, 233, 245, 281, 318, 320, 342, 346, 363, 426, 433, 481], "bf_getbuff": [61, 63, 471], "pfunc": [61, 72], "py_tp_doc": 61, "genericalia": [62, 68, 383, 384, 426, 428, 470, 480, 481], "union": [62, 68, 88, 116, 158, 159, 223, 224, 250, 252, 331, 340, 344, 383, 384, 424, 426, 463, 464, 466, 467, 470, 471, 472, 476, 480, 481], "__origin__": [62, 342], "__args__": [62, 342, 470, 480, 481], "__parameters__": [62, 342, 384, 481], "lazili": [62, 164, 214, 241, 259, 342, 384, 386, 387, 425, 427, 428, 470, 471, 475, 481], "my_obj_method": 62, "__class_getitem__": [62, 68, 342, 384, 428, 471, 478, 481], "585": [62, 87, 159, 342, 383, 384, 471, 480, 481], "pytype_": 63, "fair": [63, 84, 92, 101, 107, 191, 202, 206, 279, 306, 328, 367, 386, 392, 408, 409, 454, 460, 462, 463, 465, 466, 477, 481], "examin": [63, 68, 72, 85, 100, 107, 179, 185, 253, 291, 295, 306, 329, 330, 331, 333, 342, 350, 360, 408, 461, 463, 465, 466, 481], "glanc": [63, 101, 463], "insight": 63, "tp_getattr": [63, 75], "tp_setattr": [63, 75], "__setattr__": [63, 75, 80, 85, 93, 140, 179, 297, 387, 426, 434, 462, 481], "__delattr__": [63, 75, 80, 93, 140, 179, 426, 481], "tp_as_async": [63, 75, 476], "__repr__": [63, 80, 93, 94, 106, 158, 179, 181, 193, 209, 223, 253, 281, 284, 305, 319, 338, 383, 384, 387, 417, 423, 426, 450, 462, 463, 470, 471, 473, 478, 479, 481], "tp_as_sequ": [63, 75], "tp_as_map": [63, 75], "tp_str": [63, 75], "__str__": [63, 80, 94, 100, 101, 158, 181, 193, 194, 199, 200, 201, 203, 209, 253, 265, 281, 342, 343, 383, 387, 423, 426, 441, 462, 470, 471, 479, 481], "tp_as_buff": [63, 75, 480, 481], "tp_richcompar": [63, 75, 481], "__lt__": [63, 75, 80, 94, 106, 145, 159, 166, 179, 223, 224, 289, 342, 383, 387, 426, 428, 461, 467, 468, 473, 481], "__le__": [63, 80, 94, 159, 179, 224, 289, 342, 387, 426, 461, 467, 473], "__ne__": [63, 80, 159, 193, 200, 289, 387, 417, 426, 461, 471, 481], "__gt__": [63, 80, 94, 106, 159, 179, 223, 224, 289, 342, 387, 426, 461, 467, 473], "__ge__": [63, 80, 94, 159, 179, 224, 289, 342, 387, 426, 461, 467, 473], "tp_iter": [63, 75, 342, 462], "__iter__": [63, 75, 80, 87, 94, 101, 114, 159, 209, 223, 256, 259, 269, 281, 342, 384, 386, 387, 388, 420, 425, 426, 428, 438, 462, 463, 466, 475, 477, 480, 481], "tp_iternext": [63, 75, 342, 462, 481], "__next__": [63, 75, 87, 95, 110, 159, 164, 173, 189, 211, 223, 256, 259, 281, 342, 420, 426, 428, 438, 468, 481], "tp_method": [63, 75, 76], "tp_base": [63, 75, 76, 481], "__base__": 63, "tp_descr_get": [63, 75], "__get__": [63, 87, 93, 179, 224, 253, 387, 426, 462, 477, 481], "tp_descr_set": [63, 75, 481], "__set__": [63, 87, 93, 179, 253, 387, 426, 462, 477, 481], "__delete__": [63, 87, 93, 253, 387, 426, 462, 481], "tp_free": [63, 68, 75, 76], "tp_is_gc": [63, 75], "__subclasses__": [63, 342, 387, 472, 481], "tp_del": [63, 75, 225], "tp_version_tag": [63, 75, 481], "tp_final": [63, 75, 476, 479, 481], "tp_watch": [63, 75], "angl": [63, 104, 142, 152, 156, 207, 223, 273, 382, 466, 467, 481], "am_await": 63, "__await__": [63, 87, 159, 189, 383, 426, 476, 481], "am_ait": 63, "__aiter__": [63, 87, 159, 189, 223, 387, 388, 425, 426, 476, 477, 478, 481], "am_anext": 63, "__anext__": [63, 87, 159, 189, 211, 223, 387, 425, 426, 428, 481], "am_send": 63, "sendfunc": 63, "__add__": [63, 80, 94, 99, 158, 166, 253, 287, 289, 387, 426, 428, 481], "__radd__": [63, 287, 426, 428], "nb_inplace_add": 63, "__iadd__": [63, 80, 85, 159, 289, 426, 460], "nb_subtract": 63, "__sub__": [63, 159, 289, 387, 426, 428], "__rsub__": [63, 166, 426], "nb_inplace_subtract": 63, "__isub__": [63, 159, 289, 426, 460], "nb_multipli": 63, "__mul__": [63, 80, 158, 289, 387, 426, 428, 481], "__rmul__": [63, 80, 426, 428, 481], "nb_inplace_multipli": 63, "__imul__": [63, 80, 158, 166, 289, 426, 481], "nb_remaind": 63, "__mod__": [63, 103, 289, 387, 426, 428, 470, 481], "__rmod__": [63, 158, 426, 470, 476, 481], "nb_inplace_remaind": 63, "__imod__": [63, 289, 426], "nb_divmod": 63, "__divmod__": [63, 387, 426, 470, 476, 481], "__rdivmod__": [63, 426, 470, 481], "nb_power": 63, "__pow__": [63, 289, 387, 426, 428, 470, 481], "__rpow__": [63, 426, 470, 481], "nb_inplace_pow": 63, "__ipow__": [63, 289, 426, 470, 481], "nb_negat": 63, "__neg__": [63, 289, 387, 426, 428], "nb_posit": 63, "__pos__": [63, 289, 387, 426, 428], "nb_absolut": 63, "__abs__": [63, 223, 289, 384, 426, 481], "nb_bool": [63, 468], "__bool__": [63, 94, 110, 209, 230, 289, 342, 365, 387, 403, 426, 428, 468, 481], "nb_invert": 63, "__invert__": [63, 209, 289, 387, 426, 428], "nb_lshift": 63, "__lshift__": [63, 289, 387, 426, 428], "__rlshift__": [63, 426], "nb_inplace_lshift": 63, "__ilshift__": [63, 289, 426], "nb_rshift": 63, "__rshift__": [63, 289, 387, 426, 428], "__rrshift__": [63, 426], "nb_inplace_rshift": 63, "__irshift__": [63, 289, 426], "nb_and": 63, "__and__": [63, 159, 209, 289, 387, 426, 428], "__rand__": [63, 426, 428], "nb_inplace_and": 63, "__iand__": [63, 159, 166, 289, 426], "nb_xor": 63, "__xor__": [63, 159, 209, 289, 387, 426, 428], "__rxor__": [63, 426, 428], "nb_inplace_xor": 63, "__ixor__": [63, 159, 289, 426], "nb_or": 63, "__or__": [63, 159, 209, 289, 342, 387, 426, 428], "__ror__": [63, 426, 428, 481], "nb_inplace_or": 63, "__ior__": [63, 159, 289, 426], "nb_int": 63, "nb_reserv": 63, "nb_float": 63, "nb_floor_divid": 63, "__floordiv__": [63, 103, 289, 387, 426, 428, 462, 470, 481], "nb_inplace_floor_divid": 63, "__ifloordiv__": [63, 289, 426], "nb_true_divid": 63, "__truediv__": [63, 103, 248, 251, 289, 387, 426, 428, 462, 476], "nb_inplace_true_divid": 63, "__itruediv__": [63, 289, 426], "nb_matrix_multipli": 63, "__matmul__": [63, 289, 387, 426, 476], "__rmatmul__": [63, 426, 476], "nb_inplace_matrix_multipli": 63, "__imatmul__": [63, 289, 426, 476], "mp_length": 63, "__len__": [63, 80, 87, 114, 159, 194, 203, 209, 223, 269, 281, 289, 342, 384, 387, 408, 411, 425, 426, 463, 464, 479, 481], "mp_subscript": [63, 481], "mp_ass_subscript": 63, "__setitem__": [63, 80, 158, 159, 189, 194, 203, 206, 269, 281, 289, 297, 387, 388, 405, 408, 411, 426, 434, 463, 468, 481], "__delitem__": [63, 80, 158, 159, 194, 203, 269, 289, 387, 405, 408, 411, 426, 463, 468, 481], "sq_concat": 63, "sq_repeat": 63, "sq_item": [63, 481], "sq_ass_item": 63, "sq_inplace_concat": 63, "sq_inplace_repeat": 63, "_typeobject": [63, 75], "tp_compar": [63, 75], "tp_reserv": [63, 75, 476], "suit": [63, 75, 84, 85, 87, 95, 100, 101, 103, 159, 191, 228, 281, 290, 338, 339, 356, 360, 380, 386, 398, 420, 425, 454, 459, 465, 466, 467, 468, 471, 472, 473, 475, 477, 478, 480, 481], "rich": [63, 64, 68, 75, 110, 158, 195, 223, 224, 289, 367, 373, 417, 426, 428, 430, 468, 473, 478, 480, 481, 482], "stuff": [63, 75, 79, 100, 101, 120, 167, 174, 191, 305, 387, 468], "resolut": [63, 68, 75, 76, 85, 87, 93, 99, 114, 116, 124, 181, 212, 214, 223, 224, 230, 232, 243, 253, 291, 292, 293, 297, 306, 335, 342, 364, 425, 426, 430, 438, 463, 465, 474, 475, 476, 477, 479, 480, 481], "bitset": [63, 75], "type_new": [63, 93, 481], "metatyp": [63, 253], "complain": [63, 76, 101, 167, 245, 461, 481], "foo_typ": 63, "_ob_next": 63, "_ob_prev": 63, "getobject": [63, 454, 479, 481], "act": [63, 67, 75, 85, 95, 100, 103, 142, 174, 179, 181, 189, 194, 199, 203, 206, 223, 224, 242, 246, 248, 251, 257, 265, 291, 307, 309, 338, 342, 350, 363, 373, 382, 383, 384, 424, 426, 433, 459, 460, 461, 466, 470, 474, 475, 479, 480, 481], "subpackag": [63, 87, 248, 279, 350, 386, 420, 430, 448, 460], "everyth": [63, 73, 76, 85, 92, 101, 103, 108, 118, 191, 206, 218, 223, 245, 266, 290, 291, 294, 297, 317, 330, 331, 335, 357, 367, 387, 398, 417, 432, 433, 466, 468, 472, 474, 481], "pickl": [63, 68, 76, 84, 100, 101, 140, 154, 156, 158, 164, 169, 174, 180, 181, 184, 224, 252, 260, 262, 265, 266, 267, 272, 281, 282, 296, 325, 328, 345, 377, 384, 387, 444, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 481, 482], "pydoc": [63, 68, 76, 84, 154, 185, 223, 252, 418, 461, 462, 463, 464, 467, 469, 476, 481], "meaning": [63, 104, 191, 196, 233, 248, 253, 257, 266, 269, 281, 291, 312, 317, 335, 339, 350, 380, 383, 393, 426, 432, 434, 468, 473, 475, 476, 481], "whichev": [63, 73, 75, 181, 265, 345, 386, 459, 474, 476], "align": [63, 68, 116, 143, 151, 343, 360, 374, 382, 406, 466, 467, 472, 481], "py_tpflags_basetyp": [63, 76], "permiss": [63, 84, 85, 87, 100, 101, 108, 161, 210, 211, 214, 246, 255, 291, 294, 309, 330, 331, 335, 338, 340, 353, 356, 358, 384, 393, 395, 403, 424, 459, 467, 478, 481], "foo_dealloc": [63, 479], "foo_object": 63, "tp_print": [63, 480], "inconsist": [63, 188, 211, 290, 291, 335, 387, 433, 461, 472, 477, 481], "relev": [63, 73, 75, 84, 85, 92, 95, 98, 100, 101, 120, 165, 184, 191, 192, 206, 213, 240, 243, 249, 260, 265, 266, 267, 286, 290, 291, 300, 339, 342, 346, 353, 354, 360, 386, 412, 421, 423, 459, 460, 462, 464, 472, 474, 475, 476, 477, 480, 481], "await": [63, 68, 87, 121, 122, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 159, 167, 168, 186, 189, 223, 253, 262, 342, 375, 383, 384, 386, 387, 425, 427, 429, 431, 433, 460, 463, 470, 471, 477, 478, 479, 480, 481], "eval": [63, 85, 88, 110, 119, 120, 142, 155, 157, 211, 223, 253, 266, 295, 297, 305, 325, 342, 373, 379, 427, 429, 433, 434, 435, 438, 442, 448, 460, 464, 466, 468, 469, 470, 471, 472, 473, 481], "feasibl": [63, 73, 328, 475, 481], "deduc": [63, 191, 281, 306, 352, 459, 473], "isinst": [63, 78, 85, 87, 88, 93, 94, 100, 101, 110, 114, 149, 159, 167, 179, 181, 209, 223, 248, 249, 253, 260, 287, 289, 297, 342, 383, 384, 386, 387, 388, 425, 426, 438, 448, 460, 463, 464, 466, 468, 470, 471, 472, 473, 477, 478, 481], "friend": [63, 73, 92, 101, 118, 188, 192, 290, 335, 342, 350, 386, 388, 411, 423, 460, 464, 468, 475, 478, 480, 481], "among": [63, 124, 139, 174, 179, 188, 191, 269, 281, 282, 291, 298, 326, 350, 356, 364, 367, 373, 386, 426, 433, 457, 459, 473, 479, 481], "mask": [63, 68, 174, 175, 254, 291, 320, 327, 330, 331, 335, 340, 351, 354, 367, 374, 403, 426, 464, 466, 473, 474, 480, 481], "guard": [63, 68, 99, 101, 120, 124, 249, 311, 360, 363, 383, 384, 429, 430, 439, 479, 481], "xxx": [63, 100, 101, 118, 350, 430, 454, 466, 467, 469, 474, 475, 481], "py_tpflags_default": [63, 76], "ore": [63, 176, 188, 191, 213, 291, 317, 339, 367, 404], "decref": [63, 64, 481], "java": [63, 68, 78, 80, 84, 85, 95, 101, 104, 105, 114, 116, 223, 291, 342, 363, 408, 412, 413, 426, 432, 437, 439, 442, 460, 464, 465, 466, 468, 470, 473], "py_tpflags_readi": 63, "group": [63, 68, 84, 89, 94, 98, 100, 101, 107, 116, 122, 140, 149, 156, 167, 176, 184, 185, 188, 189, 191, 201, 223, 246, 249, 252, 257, 259, 264, 269, 279, 281, 286, 291, 294, 297, 312, 317, 330, 332, 335, 337, 339, 340, 342, 343, 346, 351, 356, 363, 373, 374, 379, 380, 384, 389, 392, 398, 403, 413, 417, 426, 428, 429, 432, 433, 441, 450, 459, 460, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "bitmask": [63, 124, 191, 293, 326, 327], "py_tpflags_have_stackless_extens": 63, "py_tpflags_immutabletyp": [63, 99, 470, 471, 472, 481], "portion": [63, 87, 92, 95, 98, 104, 126, 139, 152, 177, 181, 184, 201, 207, 224, 233, 265, 266, 267, 335, 340, 374, 386, 392, 408, 414, 417, 418, 424, 430, 460, 473, 474, 476, 481], "py_tpflags_long_subclass": 63, "py_tpflags_list_subclass": 63, "py_tpflags_tuple_subclass": 63, "py_tpflags_bytes_subclass": 63, "py_tpflags_unicode_subclass": 63, "py_tpflags_dict_subclass": 63, "py_tpflags_base_exc_subclass": 63, "py_tpflags_type_subclass": 63, "ins": [63, 94, 95, 460, 462, 463, 464, 481], "py_tpflags_have_fin": [63, 472, 479], "py_tpflags_disallow_instanti": [63, 99, 470, 472, 481], "py_tpflags_map": [63, 189, 425, 481], "abc": [63, 68, 73, 78, 80, 85, 87, 88, 93, 95, 103, 104, 107, 110, 124, 131, 134, 158, 165, 168, 174, 180, 182, 185, 189, 224, 226, 240, 249, 250, 252, 256, 257, 259, 265, 266, 278, 281, 288, 297, 313, 317, 319, 328, 329, 342, 343, 350, 360, 380, 383, 420, 421, 424, 425, 426, 428, 430, 433, 438, 440, 460, 462, 463, 464, 465, 466, 467, 468, 471, 472, 477, 478, 479, 481], "py_tpflags_sequ": [63, 189, 425, 481], "634": [63, 68, 110, 425, 426, 481], "py_tpflags_valid_version_tag": [63, 481], "local_travers": 63, "_thread": [63, 68, 84, 140, 162, 252, 363, 463, 472, 474, 481], "localobject": 63, "particip": [63, 75, 76, 181, 241, 248, 297, 317, 460, 462, 465, 467], "hand": [63, 73, 75, 84, 85, 94, 95, 103, 104, 127, 174, 175, 179, 184, 194, 199, 204, 211, 223, 228, 245, 256, 267, 297, 303, 317, 336, 364, 367, 382, 384, 387, 425, 428, 432, 434, 449, 460, 461, 462, 463, 465, 466, 468, 469, 474, 479, 481], "aid": [63, 338, 459, 463, 464, 467, 473, 474, 475, 481], "anyway": [63, 76, 174, 223, 241, 245, 257, 386, 461, 462, 472, 481], "get_refer": [63, 140, 225, 463, 470, 481], "weakrefer": 63, "40217": [63, 480, 481], "doubt": [63, 84, 92, 165, 181, 465], "prove": [63, 95, 174, 259, 339, 425, 463, 468, 469], "compos": [63, 68, 171, 198, 199, 200, 201, 206, 270, 291, 333, 353, 354, 373, 380, 384, 385, 433, 474], "obvious": [63, 73, 95, 100, 101, 104, 165, 175, 184, 265, 290, 293, 297, 306, 321, 345, 346, 360, 377, 387, 388, 411, 459, 460, 464, 465, 477, 481], "rare": [63, 84, 124, 131, 175, 179, 191, 197, 211, 233, 241, 245, 265, 290, 328, 331, 335, 342, 356, 388, 408, 461, 462, 465, 466, 472, 474, 481], "good": [63, 75, 78, 79, 84, 85, 93, 94, 99, 100, 101, 103, 104, 107, 108, 118, 137, 149, 152, 153, 165, 168, 174, 175, 181, 188, 191, 196, 205, 223, 233, 248, 281, 290, 291, 293, 297, 305, 317, 339, 360, 362, 382, 384, 386, 388, 409, 417, 424, 426, 457, 460, 461, 463, 464, 466, 467, 471, 481], "local_clear": 63, "trash": [63, 269, 481], "reclam": 63, "weakref": [63, 68, 75, 85, 87, 179, 180, 211, 252, 281, 314, 342, 360, 450, 461, 462, 464, 465, 467, 471, 472, 481], "goal": [63, 75, 95, 99, 199, 223, 233, 318, 360, 411, 432, 461, 463, 465, 466, 473, 475, 476, 477], "eas": [63, 68, 328, 342, 363, 386, 434, 460, 474, 476, 478, 481], "py_return_richcompar": [63, 478, 481], "val_a": 63, "val_b": 63, "pyweakref_": 63, "confus": [63, 72, 84, 85, 92, 99, 101, 103, 104, 108, 155, 174, 184, 188, 191, 223, 257, 267, 290, 291, 297, 317, 331, 356, 367, 393, 426, 428, 433, 434, 460, 461, 462, 463, 464, 465, 467, 469, 472, 473, 475, 477, 478, 479, 481], "unari": [63, 68, 120, 184, 189, 342, 387, 426, 431, 433, 474], "overload": [63, 124, 224, 384, 393, 417, 426, 428, 461, 462, 471, 475, 481], "regard": [63, 99, 100, 167, 203, 224, 233, 267, 291, 338, 342, 346, 351, 381, 408, 411, 424, 459, 481], "reiniti": [63, 481], "unrel": [63, 73, 85, 94, 211, 269, 335, 481], "thumb": [63, 99, 103, 188, 374], "defer": [63, 68, 73, 100, 124, 158, 191, 244, 267, 276, 338, 339, 354, 461, 466, 472, 481], "presum": [63, 100, 159, 181, 269, 281, 345, 346, 392, 428, 462, 467, 468, 481], "factori": [63, 68, 87, 98, 118, 124, 126, 128, 131, 156, 167, 170, 174, 187, 191, 201, 205, 206, 224, 248, 254, 265, 266, 267, 269, 273, 281, 290, 296, 313, 330, 363, 367, 369, 384, 388, 400, 405, 408, 411, 417, 418, 426, 462, 465, 466, 469, 472, 473, 474, 476, 478, 479, 480, 481], "mixtur": [63, 201, 429, 433, 476], "_pyobject_get_weakrefs_listptr": [63, 472], "sane": [63, 175, 181, 317, 481], "trivial": [63, 68, 72, 73, 75, 84, 95, 135, 149, 192, 198, 206, 232, 281, 297, 317, 350, 463, 474, 475, 481], "local_fin": 63, "error_typ": 63, "error_valu": 63, "error_traceback": 63, "442": [63, 68, 75, 225, 480, 481], "tradit": [63, 73, 76, 93, 99, 171, 264, 269, 273, 290, 291, 297, 306, 353, 357, 360, 425, 429, 430, 454, 459, 463, 466, 473, 478, 481], "ternari": [63, 426, 428], "operand": [63, 68, 89, 120, 156, 181, 189, 191, 211, 223, 265, 288, 342, 426, 428, 434, 441, 447, 462, 467, 468, 473, 474, 481], "nb_long": 63, "augment": [63, 68, 85, 118, 120, 191, 266, 274, 329, 373, 426, 429, 433, 453, 473, 481, 482], "counter": [63, 68, 73, 76, 85, 87, 95, 138, 180, 188, 189, 198, 234, 281, 290, 291, 342, 363, 364, 384, 386, 428, 438, 462, 464, 465, 466, 467, 469, 473, 474, 479, 481], "root": [63, 93, 100, 101, 109, 110, 139, 140, 152, 158, 174, 184, 199, 203, 204, 205, 208, 233, 245, 246, 250, 259, 265, 266, 273, 281, 291, 292, 294, 300, 302, 312, 330, 337, 339, 340, 346, 350, 356, 360, 364, 367, 369, 370, 373, 374, 384, 386, 408, 411, 413, 419, 420, 421, 426, 450, 453, 454, 460, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 479, 480, 481], "react": [63, 92, 270, 367, 460, 466], "demonstr": [63, 73, 75, 92, 94, 101, 104, 105, 112, 118, 138, 147, 174, 184, 240, 242, 245, 276, 281, 290, 305, 317, 318, 338, 341, 345, 367, 378, 379, 382, 386, 411, 423, 428, 440, 459, 461, 473, 481], "tricki": [63, 85, 94, 155, 290, 367, 460, 461, 468], "tutori": [63, 68, 74, 92, 101, 108, 116, 118, 160, 175, 191, 211, 223, 224, 245, 265, 266, 267, 288, 296, 335, 342, 367, 382, 411, 425, 432, 451, 457, 462, 464, 465, 466, 473, 481], "assort": [63, 68, 74, 191, 373, 481], "topic": [63, 68, 72, 74, 76, 84, 92, 104, 153, 191, 290, 305, 311, 335, 460, 463, 469, 481], "myobject": [63, 75], "myobject_typ": 63, "mymod": 63, "my": [63, 73, 78, 94, 95, 101, 108, 149, 158, 191, 228, 246, 266, 294, 339, 342, 343, 360, 367, 444, 460, 462, 463, 464, 465, 472, 481], "myobj_new": 63, "myobj_dealloc": 63, "myobj_repr": 63, "myobj_travers": 63, "myobj_clear": 63, "myobj_hash": 63, "mystr": 63, "mystr_typ": 63, "393": [64, 68, 156, 350, 470, 480, 481, 482], "varieti": [64, 73, 75, 95, 99, 107, 118, 156, 184, 192, 223, 228, 271, 290, 291, 306, 342, 346, 367, 371, 384, 430, 464, 465, 466, 467, 475], "stay": [64, 68, 136, 350, 472, 473, 474, 477, 481], "65536": [64, 447, 481], "1114112": [64, 156], "623": [64, 316, 470, 472, 481], "py_ucs2": [64, 474], "py_ucs1": [64, 474], "narrow": [64, 317, 335, 342, 384, 454, 462, 470, 473, 474, 481], "pyasciiobject": [64, 474], "pycompactunicodeobject": [64, 474], "pyunicode_check": [64, 76], "pyunicode_checkexact": 64, "pyunicode_readi": [64, 471, 472, 474], "pyunicode_get_length": [64, 470, 474], "canon": [64, 85, 87, 94, 142, 165, 181, 184, 193, 209, 233, 290, 335, 344, 385, 411, 423, 428, 467, 476, 481], "pyunicode_1byte_data": [64, 474], "pyunicode_2byte_data": [64, 474], "pyunicode_4byte_data": [64, 474], "ucs1": [64, 481], "ucs2": [64, 481], "ucs4": [64, 462, 481], "pyunicode_kind": [64, 474], "pyunicode_1byte_kind": [64, 474], "pyunicode_2byte_kind": [64, 474], "pyunicode_4byte_kind": [64, 474], "pyunicode_wchar_kind": [64, 471, 472, 474], "pyunicod": [64, 481], "pyunicode_data": [64, 474, 481], "pyunicode_writ": [64, 474], "saniti": [64, 454, 475, 481], "pyunicode_read": [64, 474], "pyunicode_read_char": [64, 474], "pyunicode_max_char_valu": [64, 474], "py_unicode_isspac": [64, 481], "ch": [64, 92, 100, 101, 156, 175, 188, 393, 460, 481], "py_unicode_islow": 64, "lowercas": [64, 104, 107, 141, 153, 156, 165, 184, 194, 203, 233, 246, 257, 303, 317, 342, 350, 362, 433, 468, 481], "py_unicode_isupp": 64, "uppercas": [64, 85, 93, 107, 118, 146, 176, 246, 257, 279, 290, 291, 342, 343, 433, 460, 467, 468, 472, 475, 477, 481], "py_unicode_istitl": 64, "titlecas": [64, 342, 433, 481], "py_unicode_islinebreak": 64, "linebreak": 64, "py_unicode_isdecim": [64, 473], "py_unicode_isdigit": 64, "py_unicode_isnumer": 64, "py_unicode_isalpha": 64, "alphabet": [64, 85, 89, 141, 144, 171, 176, 184, 194, 197, 260, 265, 266, 269, 306, 324, 332, 342, 383, 459, 463, 464, 465, 466, 467, 470, 475, 476, 477, 478, 479, 481], "py_unicode_isalnum": 64, "alphanumer": [64, 104, 149, 176, 191, 248, 266, 270, 297, 317, 329, 342, 343, 364, 463, 481], "py_unicode_isprint": 64, "printabl": [64, 144, 156, 175, 176, 193, 194, 195, 196, 200, 201, 206, 223, 280, 315, 342, 343, 344, 426, 461, 468, 473], "nonprint": [64, 342], "databas": [64, 68, 72, 84, 93, 104, 107, 140, 156, 175, 179, 181, 207, 223, 241, 252, 259, 264, 274, 294, 296, 297, 306, 328, 337, 338, 342, 344, 361, 363, 364, 367, 373, 374, 389, 393, 423, 430, 433, 441, 461, 462, 463, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "0x20": [64, 141, 342, 426], "bear": [64, 181, 241, 248, 281, 342, 350, 481], "py_unicode_tolow": [64, 473], "py_unicode_toupp": 64, "upper": [64, 85, 92, 94, 95, 100, 101, 104, 120, 144, 146, 149, 158, 175, 188, 246, 281, 317, 335, 336, 338, 339, 342, 343, 373, 382, 386, 426, 428, 429, 434, 463, 473, 479, 481], "py_unicode_totitl": 64, "py_unicode_todecim": 64, "py_unicode_todigit": 64, "py_unicode_tonumer": 64, "py_unicode_is_surrog": 64, "0xd800": 64, "0xdfff": 64, "py_unicode_is_high_surrog": 64, "0xdbff": 64, "py_unicode_is_low_surrog": 64, "0xdc00": 64, "py_unicode_join_surrog": 64, "join": [64, 68, 77, 79, 85, 95, 101, 105, 112, 118, 124, 132, 134, 149, 152, 156, 158, 173, 184, 188, 198, 200, 201, 206, 223, 240, 241, 242, 245, 257, 259, 266, 268, 277, 281, 282, 291, 292, 294, 300, 314, 317, 318, 319, 324, 329, 330, 333, 335, 336, 340, 342, 343, 360, 362, 363, 365, 383, 384, 392, 397, 405, 408, 409, 411, 420, 423, 439, 447, 450, 460, 464, 465, 466, 472, 473, 474, 475, 476, 477, 478, 479, 481], "pyunicode_new": [64, 470, 474], "maxchar": 64, "nearest": [64, 181, 184, 219, 223, 273, 350, 427, 434, 468, 469, 481], "65535": [64, 420, 462], "1114111": [64, 350, 474], "pyunicode_fromkindanddata": [64, 474], "transform": [64, 68, 87, 93, 94, 95, 101, 103, 106, 107, 110, 120, 137, 143, 165, 181, 184, 191, 194, 195, 199, 203, 206, 209, 211, 223, 224, 253, 264, 265, 269, 297, 342, 376, 382, 383, 384, 411, 424, 425, 426, 428, 460, 461, 466, 468, 475, 476, 478, 481], "codepoint": [64, 245, 264], "width": [64, 75, 85, 92, 104, 115, 118, 139, 148, 156, 174, 175, 179, 181, 184, 223, 245, 279, 290, 291, 305, 317, 342, 343, 350, 362, 364, 367, 370, 374, 379, 382, 384, 385, 399, 426, 433, 447, 450, 460, 463, 465, 466, 467, 472, 473, 475, 477, 479, 481], "asterisk": [64, 246, 342, 384, 404, 411, 425, 428, 434, 478], "pad": [64, 68, 84, 120, 141, 144, 151, 175, 181, 184, 194, 197, 223, 232, 233, 257, 282, 335, 342, 343, 345, 347, 364, 367, 374, 393, 406, 460, 463, 466, 467, 473, 477, 481], "ll": [64, 73, 75, 76, 84, 85, 92, 93, 94, 95, 98, 100, 101, 104, 105, 107, 108, 110, 177, 191, 198, 267, 270, 290, 295, 317, 329, 338, 339, 342, 367, 382, 388, 411, 430, 432, 433, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 479, 480, 481], "intmax_t": [64, 472, 481], "uintmax_t": 64, "ssize_t": [64, 68, 174, 345, 473, 474, 482], "ptrdiff_t": [64, 472, 481], "octal": [64, 85, 104, 110, 149, 182, 257, 290, 291, 317, 342, 343, 433, 460, 461, 463, 464, 466, 468, 470, 471, 472, 473, 478, 479, 480, 481], "hexadecim": [64, 85, 99, 104, 144, 156, 176, 233, 257, 290, 317, 342, 343, 350, 433, 460, 464, 466, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481], "formatt": [64, 68, 116, 118, 266, 267, 290, 343, 463, 467, 470, 473, 475, 476, 478, 481], "lld": [64, 454, 467], "llu": [64, 467], "li": [64, 409, 476, 478, 481], "lli": [64, 382], "zi": 64, "ing": [64, 79, 104, 191, 241, 467, 471, 474, 478, 481], "pyunicode_copycharact": [64, 470, 471, 474, 481], "to_start": 64, "from_start": 64, "how_mani": 64, "memcpi": [64, 471, 481], "pyunicode_fil": [64, 471, 474, 481], "fill_char": 64, "bigger": [64, 93, 273, 330, 342, 356, 459, 479, 481], "contrast": [64, 184, 224, 245, 306, 339, 342, 345, 367, 384, 410, 426, 427, 428, 430, 462, 474, 477, 478], "substr": [64, 95, 104, 107, 165, 191, 233, 290, 317, 342, 386, 428, 447, 460, 462, 463, 464, 465, 466, 474, 476, 478, 481], "buflen": [64, 335], "copy_nul": 64, "383": [64, 156, 335, 481], "strlen": [64, 79, 105, 107], "parsetupl": 64, "wstr": [64, 470, 472], "wcslen": 64, "deviat": [64, 103, 346, 392, 473, 474, 475, 481], "simplic": [64, 75, 260, 338, 342, 460, 462, 481], "pyunicode_asutf8": [64, 474, 478, 481], "byteord": [64, 342, 345, 350, 448, 481], "bom": [64, 68, 107, 143, 260, 376, 481], "divis": [64, 66, 68, 85, 87, 101, 111, 181, 184, 211, 295, 300, 331, 338, 342, 426, 427, 428, 434, 441, 447, 463, 464, 466, 467, 471, 473, 480, 481, 482], "ufeff": 64, "ufff": 64, "odd": [64, 92, 95, 151, 184, 233, 306, 346, 433, 439, 460, 463, 464, 465, 467, 481], "ordin": [64, 94, 107, 156, 174, 175, 176, 181, 341, 342, 382, 474, 476], "unmap": [64, 374], "0xfffe": [64, 156], "translat": [64, 68, 73, 103, 104, 107, 110, 156, 174, 175, 185, 210, 211, 218, 220, 223, 243, 244, 248, 256, 260, 280, 291, 331, 335, 342, 346, 385, 411, 415, 417, 424, 425, 426, 460, 463, 464, 466, 467, 468, 469, 471, 473, 476, 478, 479, 481], "dbcs": [64, 156], "code_pag": [64, 474], "page": [64, 68, 84, 87, 92, 95, 100, 101, 108, 113, 118, 124, 131, 134, 156, 164, 167, 171, 175, 188, 213, 245, 249, 252, 264, 266, 267, 269, 276, 282, 291, 302, 311, 312, 320, 326, 331, 335, 338, 340, 345, 348, 354, 359, 360, 363, 364, 367, 373, 381, 382, 393, 401, 411, 418, 420, 424, 432, 438, 449, 451, 453, 459, 460, 462, 464, 465, 466, 467, 473, 474, 477, 478, 479, 481], "cp_acp": [64, 156, 474, 477], "we": [64, 72, 73, 75, 76, 85, 91, 93, 94, 95, 100, 101, 104, 105, 107, 108, 118, 120, 124, 127, 131, 132, 134, 137, 142, 148, 152, 153, 155, 158, 164, 165, 167, 168, 174, 181, 188, 189, 192, 194, 198, 200, 203, 206, 211, 230, 233, 240, 241, 245, 249, 259, 264, 266, 267, 281, 282, 290, 291, 297, 317, 330, 331, 336, 338, 339, 342, 343, 345, 346, 360, 367, 374, 376, 380, 382, 384, 386, 387, 388, 392, 393, 398, 400, 405, 409, 411, 417, 420, 425, 426, 428, 429, 430, 439, 441, 444, 454, 460, 462, 463, 465, 466, 467, 468, 472, 473, 474, 477, 478, 479, 480, 481], "concat": [64, 95, 289, 384, 439], "sep": [64, 85, 95, 144, 181, 184, 223, 229, 242, 245, 291, 294, 339, 342, 343, 356, 405, 425, 439, 462, 465, 466, 467, 468, 471, 481], "maxsplit": [64, 104, 317, 342], "keepend": [64, 156, 188, 198, 342], "crlf": [64, 221, 242, 243, 478, 481], "tail": [64, 94, 149, 158, 188, 259, 292, 332, 411, 465, 472, 474, 477, 481], "forward": [64, 85, 93, 95, 104, 151, 153, 174, 175, 181, 189, 198, 224, 228, 256, 269, 287, 295, 338, 339, 342, 382, 384, 400, 409, 425, 460, 461, 462, 464, 466, 469, 473, 478, 481], "replstr": 64, "maxcount": 64, "iso": [64, 148, 156, 181, 188, 193, 194, 200, 203, 237, 240, 264, 286, 312, 335, 338, 350, 364, 396, 405, 415, 417, 460, 464, 471, 473, 476, 477, 479, 481], "8859": [64, 107, 156, 188, 193, 194, 200, 203, 240, 286, 312, 338, 405, 415, 460, 473, 476], "p_unicod": 64, "clarif": [64, 430, 481], "lot": [64, 68, 73, 75, 77, 79, 84, 85, 100, 104, 107, 108, 149, 167, 168, 174, 182, 191, 198, 232, 243, 257, 265, 281, 290, 302, 306, 328, 336, 346, 372, 380, 387, 397, 460, 461, 462, 463, 464, 466, 467, 468, 475, 480, 481], "talk": [64, 85, 92, 101, 107, 339, 346, 426, 465, 476], "neutral": [64, 73, 98, 475], "portabl": [65, 73, 80, 81, 101, 107, 129, 174, 175, 213, 214, 217, 247, 248, 264, 273, 276, 291, 297, 301, 304, 335, 340, 356, 364, 401, 419, 446, 459, 460, 463, 469, 474, 478, 479, 481], "grammar": [66, 68, 95, 110, 155, 262, 343, 375, 425, 429, 432, 433, 460, 461, 465, 468, 470, 472, 480, 481], "py_eval_input": [66, 79, 429], "py_file_input": [66, 429, 470], "py_single_input": [66, 429], "incompat": [66, 80, 103, 174, 182, 211, 253, 257, 264, 265, 269, 286, 291, 297, 384, 434, 454, 460, 463, 465, 468, 472, 473, 474, 476, 478, 479, 480, 481], "pyrun_anyfil": 66, "pyrun_anyfileexflag": 66, "closeit": 66, "pyrun_anyfileflag": 66, "pycompilerflag": [66, 479], "pyrun_anyfileex": 66, "devic": [66, 68, 98, 129, 156, 175, 176, 210, 223, 245, 256, 267, 291, 294, 326, 327, 330, 331, 335, 340, 346, 350, 356, 403, 411, 453, 460, 466, 481], "pseudo": [66, 68, 94, 118, 174, 179, 189, 194, 252, 272, 284, 291, 300, 320, 324, 342, 350, 389, 430, 462, 463, 466, 472, 477, 481], "pyrun_interactiveloop": [66, 79], "pyrun_simplefil": [66, 72], "pyrun_simplefileexflag": [66, 481], "pyrun_simplestringflag": 66, "pyrun_simplefileex": 66, "fopen": [66, 188, 474], "rb": [66, 84, 87, 101, 103, 115, 124, 147, 158, 198, 206, 216, 223, 232, 233, 248, 250, 251, 256, 268, 286, 297, 300, 342, 358, 376, 377, 384, 395, 399, 405, 417, 420, 433, 444, 450, 460, 463, 470, 474, 481], "lf": [66, 176, 206, 433, 481], "pyrun_interactiveon": [66, 481], "pyrun_interactiveoneflag": 66, "ps1": [66, 155, 335, 350, 397, 436, 448, 453, 479, 481], "ps2": [66, 155, 350, 436, 448, 453, 481], "errcod": [66, 417], "pyrun_interactiveloopflag": 66, "eof": [66, 105, 124, 128, 131, 134, 135, 147, 153, 155, 166, 191, 211, 221, 223, 256, 268, 291, 307, 326, 329, 335, 338, 339, 357, 422, 453, 465, 470, 474, 481], "prototyp": [66, 68, 116, 153, 184, 338, 460, 465, 467, 481], "idl": [66, 68, 79, 80, 85, 87, 173, 174, 176, 227, 252, 332, 346, 366, 367, 382, 408, 409, 411, 457, 459, 462, 463, 482], "wait": [66, 68, 73, 85, 92, 101, 108, 113, 118, 122, 123, 124, 127, 130, 131, 132, 134, 135, 136, 164, 175, 187, 205, 206, 243, 245, 252, 253, 255, 258, 267, 280, 281, 282, 291, 293, 316, 320, 323, 327, 331, 333, 335, 336, 338, 339, 340, 346, 359, 360, 363, 371, 382, 393, 397, 401, 439, 450, 463, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "integr": [66, 68, 73, 87, 101, 113, 116, 184, 191, 219, 223, 245, 268, 273, 287, 317, 336, 338, 342, 345, 363, 367, 386, 387, 388, 428, 455, 457, 459, 460, 463, 464, 466, 468, 473, 474, 478, 479, 480, 481], "_tkinter": [66, 367, 382, 463, 471, 476, 480, 481], "pyos_readlinefunctionpoint": [66, 79, 470, 472, 475, 481], "edit": [66, 68, 85, 92, 95, 101, 104, 107, 153, 165, 175, 188, 248, 249, 260, 269, 270, 291, 317, 318, 341, 356, 366, 367, 374, 443, 453, 459, 460, 461, 463, 464, 466, 468, 473, 477, 478, 481], "pyrun_str": [66, 79, 481], "pyrun_stringflag": 66, "pyrun_fil": 66, "pyrun_fileexflag": 66, "pyrun_fileex": 66, "pyrun_fileflag": 66, "py_compilestringflag": 66, "py_compilestringexflag": 66, "py_compilestringobject": 66, "constrain": [66, 98, 120, 206, 384, 411, 425, 428, 430, 462, 465, 473, 479, 481], "kws": [66, 223, 350], "kwcount": 66, "defcount": 66, "kwdef": [66, 481], "precompil": [66, 322, 342, 453, 481], "unvarnish": 66, "thrown": [66, 95, 137, 181, 184, 266, 317, 462, 463, 474, 481], "pyeval_mergecompilerflag": 66, "cf": [66, 104, 335], "arbitrarili": [66, 165, 167, 189, 266, 291, 386, 393, 428, 464, 472, 479, 481], "__future__": [66, 68, 87, 88, 103, 110, 157, 211, 223, 252, 253, 261, 313, 384, 425, 426, 434, 462, 463, 465, 466, 468, 470, 471, 475, 476, 478, 479, 480, 481, 482], "cf_flag": [66, 479], "cf_feature_vers": [66, 479, 481], "pycf_only_ast": [66, 120, 465, 479, 481], "co_future_divis": [66, 479, 480], "238": [66, 68, 87, 111, 468, 482], "pyweakref_check": 67, "pyweakref_checkref": 67, "pyweakref_checkproxi": 67, "pyweakref_get_object": [67, 471, 481], "695": [68, 100, 384, 427, 434, 481], "701": [68, 481], "syntact": [68, 85, 167, 200, 248, 312, 338, 342, 376, 384, 392, 398, 412, 425, 427, 428, 432, 433, 434, 439, 464, 465, 468, 481], "formal": [68, 191, 223, 233, 290, 317, 342, 343, 392, 412, 419, 426, 427, 428, 432, 434, 460, 462, 469, 475, 476, 479, 480, 481], "684": [68, 481], "669": [68, 101, 158, 481], "688": [68, 159, 426, 481], "709": [68, 467, 481], "692": [68, 384, 481], "typeddict": [68, 383, 384, 470, 479, 481], "698": [68, 384, 481], "decor": [68, 87, 93, 94, 101, 138, 159, 174, 179, 185, 223, 224, 253, 313, 319, 342, 360, 384, 386, 388, 418, 425, 426, 427, 428, 429, 465, 467, 468, 471, 473, 474, 475, 478, 479, 480, 481, 482], "asyncio": [68, 84, 100, 101, 112, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 154, 162, 167, 186, 252, 258, 265, 281, 339, 346, 350, 363, 387, 388, 426, 428, 453, 481], "calendar": [68, 154, 180, 181, 252, 364, 449, 460, 463, 471, 477, 481], "csv": [68, 99, 158, 215, 252, 360, 449, 463, 465, 469, 477, 481], "dis": [68, 87, 154, 252, 253, 262, 298, 350, 477, 481], "fraction": [68, 73, 107, 181, 184, 191, 223, 224, 252, 259, 264, 273, 287, 288, 306, 316, 317, 338, 341, 342, 363, 364, 382, 428, 433, 442, 447, 462, 463, 464, 465, 467, 468, 469, 470, 476, 477, 479, 480, 481], "itertool": [68, 87, 110, 158, 222, 223, 224, 234, 245, 248, 252, 273, 277, 289, 316, 341, 463, 464, 465, 466, 467, 468, 469, 481], "math": [68, 87, 95, 152, 164, 184, 191, 210, 219, 223, 252, 259, 281, 287, 288, 316, 341, 342, 345, 350, 382, 424, 426, 428, 440, 442, 444, 449, 454, 463, 464, 466, 467, 469, 481], "pathlib": [68, 118, 140, 161, 217, 229, 248, 249, 250, 251, 252, 291, 292, 414, 420, 481], "pdb": [68, 85, 112, 140, 142, 154, 183, 191, 212, 223, 252, 350, 379, 380, 453, 459, 463, 465, 466, 469, 471, 481], "shutil": [68, 84, 101, 108, 117, 140, 164, 217, 223, 232, 252, 291, 294, 346, 356, 360, 400, 449, 463, 466, 467, 470, 478, 480, 481], "sqlite3": [68, 84, 93, 140, 154, 158, 252, 296, 297, 454, 466, 467, 479, 481], "tempfil": [68, 108, 140, 198, 217, 223, 252, 281, 291, 325, 360, 393, 400, 466, 468, 481], "tkinter": [68, 80, 252, 366, 382, 457, 460, 463, 466, 467, 468, 469, 481], "unicodedata": [68, 104, 107, 252, 342, 361, 428, 433, 460, 465, 466, 467, 470, 473, 474, 481], "unittest": [68, 78, 84, 110, 154, 185, 252, 360, 380, 398, 449, 463, 469, 480, 481], "uuid": [68, 154, 252, 254, 279, 335, 465, 471, 479, 481], "demo": [68, 89, 101, 220, 245, 409, 418, 449, 463, 466, 473, 482], "13": [68, 95, 97, 101, 102, 107, 110, 115, 137, 139, 148, 149, 150, 151, 156, 158, 171, 174, 181, 191, 209, 224, 234, 239, 247, 257, 259, 264, 270, 276, 279, 285, 292, 293, 299, 320, 330, 334, 337, 338, 341, 342, 343, 347, 350, 357, 358, 376, 384, 395, 401, 406, 427, 439, 442, 444, 447, 448, 462, 463, 464, 465, 466, 467, 471, 473, 475, 476, 478, 479, 480, 481, 482], "15": [68, 78, 85, 92, 95, 97, 100, 101, 106, 107, 129, 148, 156, 158, 165, 179, 181, 191, 201, 209, 213, 221, 234, 239, 245, 256, 257, 259, 264, 265, 286, 291, 297, 316, 317, 320, 338, 339, 341, 342, 343, 346, 350, 364, 365, 376, 379, 385, 422, 423, 433, 444, 454, 461, 463, 464, 465, 466, 467, 469, 470, 471, 473, 476, 477, 478, 479, 480, 481], "asynchat": [68, 424, 466, 471, 475, 481], "asyncor": [68, 424, 464, 466, 471, 481], "configpars": [68, 112, 215, 252, 266, 329, 460, 464, 467, 468, 469, 471, 475, 478, 481], "distutil": [68, 71, 77, 109, 249, 461, 465, 466, 467, 471, 473, 479, 481, 482], "ensurepip": [68, 109, 140, 154, 190, 252, 397, 454, 470, 481], "ftplib": [68, 140, 154, 156, 252, 254, 393, 461, 463, 466, 467, 473, 475, 476, 477, 478, 479, 481], "gzip": [68, 80, 87, 101, 117, 147, 154, 156, 198, 216, 252, 274, 330, 356, 360, 407, 424, 449, 460, 463, 467, 469, 470, 475, 477, 481], "smtpd": [68, 471, 477, 480, 481], "ssl": [68, 94, 108, 124, 131, 134, 221, 240, 246, 252, 258, 267, 286, 291, 303, 325, 333, 335, 384, 393, 405, 417, 424, 454, 458, 460, 463, 464, 467, 480, 481], "webbrows": [68, 140, 154, 198, 252, 254, 460, 465, 471, 481], "etre": [68, 252, 271, 407, 409, 449, 465, 467, 473, 477, 479, 480, 481], "elementtre": [68, 252, 271, 407, 409, 449, 475, 477, 479, 480, 481], "zipimport": [68, 174, 250, 252, 278, 300, 430, 463, 465, 469, 481], "port": [68, 91, 92, 101, 103, 105, 108, 124, 134, 140, 165, 221, 240, 241, 243, 245, 246, 255, 266, 267, 281, 286, 291, 303, 311, 331, 333, 335, 336, 338, 339, 340, 357, 360, 392, 393, 405, 417, 418, 461, 462, 481, 482], "657": [68, 481], "654": [68, 481], "678": [68, 472, 481], "exe": [68, 86, 102, 104, 245, 267, 281, 291, 292, 330, 332, 346, 397, 420, 436, 444, 446, 454, 459, 462, 467, 473, 477, 478, 481], "launcher": [68, 397, 419, 446, 456, 457, 467, 474, 475, 477, 478, 481], "646": [68, 156, 384, 481], "variad": [68, 116, 384, 439, 481], "655": [68, 384, 481], "673": [68, 101, 384, 481], "675": [68, 223, 384, 481], "681": [68, 384, 481], "563": [68, 111, 286, 384, 425, 434, 481], "contextlib": [68, 78, 185, 252, 313, 338, 342, 380, 467, 468, 469, 479, 481], "dataclass": [68, 158, 209, 234, 252, 305, 306, 313, 314, 338, 342, 384, 438, 439, 481], "fcntl": [68, 140, 252, 335, 389, 462, 463, 464, 466, 481], "functool": [68, 85, 87, 88, 93, 106, 110, 124, 127, 145, 158, 218, 222, 223, 249, 252, 253, 259, 342, 426, 465, 466, 467, 468, 469, 481], "idlelib": [68, 154, 366, 367, 463, 481], "sysconfig": [68, 72, 102, 154, 252, 291, 313, 380, 397, 423, 470, 475, 481], "venv": [68, 87, 101, 109, 112, 154, 190, 249, 252, 353, 451, 459, 472, 474, 478, 481], "zipfil": [68, 117, 154, 252, 322, 325, 330, 356, 398, 419, 430, 449, 450, 453, 460, 465, 466, 467, 469, 481], "cheaper": [68, 379, 478], "lazi": [68, 88, 95, 133, 223, 278, 339, 342, 350, 357, 384, 403, 425, 434, 465, 470, 472, 476, 478, 481], "659": [68, 481], "faq": [68, 78, 85, 86, 223, 233, 253, 288, 303, 342, 392, 427, 452, 465, 467, 475, 481], "jit": [68, 472, 477, 481], "notabl": [68, 99, 135, 189, 264, 281, 331, 338, 351, 398, 423, 461, 463, 464, 465, 466, 467, 469, 482], "tarfil": [68, 112, 117, 154, 252, 330, 449, 463, 464, 465, 466, 467, 472, 477, 478, 481], "openssl": [68, 233, 235, 339, 360, 454, 456, 460, 465, 466, 467, 470, 472, 473, 475, 476, 477, 478, 480, 481], "wildcard": [68, 120, 187, 218, 229, 286, 329, 346, 386, 433, 439, 441, 443, 478, 479, 481], "604": [68, 88, 342, 384, 481], "612": [68, 100, 384, 466, 481], "613": [68, 384, 481], "typealia": [68, 120, 384, 481], "647": [68, 384, 481], "argpars": [68, 85, 96, 101, 116, 158, 188, 198, 226, 252, 290, 307, 397, 449, 472, 481, 482], "base64": [68, 144, 154, 156, 193, 194, 195, 196, 197, 200, 201, 204, 206, 233, 246, 249, 252, 283, 315, 324, 325, 333, 339, 380, 393, 395, 417, 462, 464, 480, 481], "bdb": [68, 165, 183, 252, 295, 454, 467, 479, 481], "bisect": [68, 180, 252, 450, 464, 481], "curs": [68, 96, 116, 252, 460, 461, 464, 466, 481], "__slots__": [68, 87, 158, 179, 223, 224, 253, 297, 383, 400, 462, 467, 479, 481], "doctest": [68, 78, 84, 110, 154, 174, 185, 252, 360, 376, 379, 380, 386, 449, 461, 463, 465, 467, 469, 473, 474, 481], "fileinput": [68, 154, 217, 223, 252, 291, 350, 465, 471, 473, 479, 481], "glob": [68, 101, 140, 142, 191, 217, 218, 252, 279, 292, 294, 295, 330, 346, 449, 466, 467, 471, 472, 473, 477, 481], "hmac": [68, 171, 172, 233, 252, 267, 281, 297, 324, 335, 462, 467, 479, 481], "metadata": [68, 84, 97, 108, 109, 179, 224, 228, 248, 252, 253, 278, 286, 291, 292, 309, 330, 340, 356, 384, 417, 420, 426, 430, 439, 451, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "linecach": [68, 217, 252, 380, 481], "pprint": [68, 93, 145, 180, 188, 252, 295, 297, 339, 450, 461, 469, 473, 481], "py_compil": [68, 85, 154, 161, 252, 262, 467, 472, 473, 475, 481], "pyclbr": [68, 154, 252, 262, 481], "shelv": [68, 84, 182, 252, 272, 296, 297, 325, 342, 460, 463, 473, 481], "urllib": [68, 84, 96, 110, 134, 140, 149, 164, 167, 221, 224, 239, 240, 241, 252, 254, 267, 291, 305, 307, 380, 387, 397, 449, 460, 463, 465, 466, 468, 481], "652": [68, 481], "summari": [68, 84, 191, 249, 290, 300, 305, 320, 378, 379, 424, 451, 459, 461, 462, 463, 464, 473, 481, 482], "highlight": [68, 80, 92, 175, 188, 245, 386, 392, 455, 460, 467, 470, 471, 473, 481, 482], "zoneinfo": [68, 180, 181, 252, 364, 454, 481], "graphlib": [68, 180, 252, 481], "ast": [68, 154, 182, 223, 252, 262, 349, 375, 376, 465, 470, 471, 472, 474, 478, 481], "compileal": [68, 85, 154, 252, 262, 309, 350, 448, 454, 459, 472, 473, 477, 481], "http": [68, 80, 84, 100, 101, 105, 108, 131, 140, 141, 148, 149, 154, 156, 164, 167, 181, 198, 206, 207, 238, 252, 254, 267, 311, 312, 325, 331, 335, 336, 339, 360, 380, 391, 392, 393, 394, 407, 411, 413, 416, 417, 418, 422, 424, 426, 430, 449, 450, 451, 452, 453, 460, 462, 463, 464, 465, 466, 468, 472, 479, 481], "imaplib": [68, 104, 140, 192, 252, 254, 303, 462, 463, 464, 467, 469, 472, 477, 481], "ipaddress": [68, 96, 252, 254, 479, 481], "multiprocess": [68, 84, 100, 105, 123, 124, 162, 164, 245, 252, 267, 314, 325, 339, 360, 363, 396, 405, 467, 468, 472, 481, 482], "nntplib": [68, 140, 192, 199, 252, 348, 460, 464, 467, 469, 471, 472, 473, 481], "poplib": [68, 140, 154, 192, 252, 254, 449, 464, 472, 474, 477, 481], "smtplib": [68, 84, 101, 140, 192, 198, 199, 206, 252, 254, 267, 339, 449, 462, 466, 472, 473, 477, 481], "sur": [68, 481], "appl": [68, 93, 174, 188, 215, 245, 252, 267, 289, 345, 440, 449, 457, 463, 466, 467, 469, 477, 481], "silicon": [68, 457, 481], "mac": [68, 223, 233, 301, 330, 339, 374, 396, 454, 456, 468, 470, 472, 473, 475, 477, 478, 481], "parallel": [68, 84, 87, 95, 99, 101, 122, 124, 127, 132, 135, 161, 162, 167, 205, 223, 230, 233, 252, 259, 350, 382, 386, 401, 411, 441, 453, 460, 467, 473, 474, 475, 476, 480, 481], "band": [68, 296, 326, 481], "cprofil": [68, 154, 183, 465, 481], "gettext": [68, 89, 101, 244, 252, 264, 409, 433, 449, 460, 464, 471, 481], "json": [68, 100, 101, 118, 149, 154, 165, 249, 252, 256, 266, 267, 283, 296, 305, 345, 443, 449, 467, 469, 470, 473, 474, 475, 480, 481], "plistlib": [68, 215, 252, 477, 478, 480, 481], "shlex": [68, 112, 124, 135, 165, 220, 252, 295, 346, 472, 480, 481], "xmlrpc": [68, 252, 254, 281, 297, 407, 424, 449, 462, 468, 475, 481], "postpon": [68, 111, 175, 248, 384, 425, 426, 471, 481], "553": [68, 481], "562": [68, 426, 481], "564": [68, 481], "nanosecond": [68, 291, 364, 403, 465, 474, 479, 480, 481], "565": [68, 211], "560": [68, 383, 426, 481], "545": 68, "binascii": [68, 99, 141, 156, 252, 283, 395, 424, 467, 471, 475, 480, 481], "crypt": [68, 172, 252, 308, 348, 424, 471, 472, 477, 481], "dbm": [68, 84, 252, 296, 297, 328, 426, 454, 467, 468, 479, 481], "server": [68, 84, 85, 92, 95, 100, 105, 108, 134, 149, 154, 165, 168, 174, 190, 192, 196, 198, 206, 221, 224, 233, 239, 240, 241, 242, 245, 246, 252, 254, 255, 257, 265, 266, 267, 281, 286, 291, 292, 294, 303, 311, 316, 325, 326, 327, 331, 333, 335, 338, 350, 353, 354, 357, 360, 363, 367, 380, 384, 391, 393, 405, 416, 424, 449, 450, 459, 461, 462, 463, 464, 465, 466, 467, 472, 474, 475, 476, 477, 479, 480, 481, 482], "mimetyp": [68, 154, 195, 198, 252, 270, 283, 380, 405, 462, 466, 467, 477, 481], "msilib": [68, 252, 348, 465, 466, 471, 472, 481], "queue": [68, 84, 100, 101, 105, 121, 124, 134, 158, 162, 175, 180, 210, 230, 252, 259, 266, 267, 291, 316, 320, 323, 326, 335, 336, 342, 357, 359, 363, 367, 411, 443, 450, 460, 463, 464, 465, 466, 468, 473, 476, 479, 480, 481], "socketserv": [68, 101, 239, 243, 252, 254, 335, 418, 466, 467, 468, 481], "mock": [68, 185, 252, 380, 386, 471, 474, 475, 479, 480, 481], "uu": [68, 144, 156, 395, 424, 462, 471, 472, 481], "zipapp": [68, 112, 154, 190, 252, 481], "aifc": [68, 204, 252, 334, 347, 348, 399, 460, 471, 472, 480, 481], "macpath": [68, 479, 481], "sunau": [68, 252, 348, 471, 472, 480, 481], "wave": [68, 151, 252, 275, 347, 460, 477, 480, 481], "498": [68, 87, 433, 475, 481], "526": [68, 87, 101, 120, 179, 384, 425, 434, 470, 478, 479, 481], "515": [68, 219, 343, 471, 481], "525": [68, 87, 159, 253, 350, 428, 481], "530": [68, 428, 481], "487": [68, 481], "enhanc": [68, 80, 87, 92, 95, 101, 173, 224, 243, 266, 281, 339, 346, 360, 374, 382, 384, 424, 428, 433, 460, 461, 462, 464, 465, 468, 469, 473, 474, 475, 476, 481, 482], "519": [68, 87, 380, 481], "495": [68, 423, 481], "520": 68, "468": [68, 158, 481], "dtrace": [68, 96, 454, 481], "systemtap": [68, 96, 454, 481], "probe": [68, 97, 475, 481], "cmath": [68, 87, 252, 273, 288, 342, 464, 466, 475, 481], "email": [68, 87, 100, 141, 144, 149, 233, 240, 241, 243, 249, 252, 266, 267, 269, 270, 283, 291, 317, 333, 339, 350, 364, 393, 424, 430, 449, 451, 462, 464, 465, 466, 467, 472, 481], "pickletool": [68, 154, 252, 262, 297, 380, 466, 481], "rlcomplet": [68, 112, 252, 318, 332, 361, 465, 466, 481], "telnetlib": [68, 140, 252, 348, 466, 471, 472, 481], "timeit": [68, 85, 154, 167, 183, 252, 306, 449, 453, 463, 464, 466, 481], "robotpars": [68, 252, 254, 390, 460, 468, 481], "winreg": [68, 140, 252, 402, 448, 468, 481], "winsound": [68, 77, 252, 402, 481], "grp": [68, 252, 308, 337, 346, 389, 463, 480, 481], "regen": [68, 454, 481], "492": [68, 87, 159, 253, 425, 426, 428, 477, 481], "465": [68, 333, 481], "infix": 68, "448": [68, 428, 481], "461": [68, 342], "percent": [68, 84, 341, 343, 375, 392, 424, 459, 466, 468, 473, 481], "484": [68, 87, 120, 342, 384, 425, 426, 434, 439, 470, 471, 472, 477, 478, 479, 481], "471": [68, 158, 481], "scandir": [68, 140, 229, 291, 294, 477, 478, 479, 481], "better": [68, 72, 73, 75, 76, 84, 85, 93, 95, 99, 101, 103, 104, 112, 118, 124, 136, 139, 157, 174, 188, 191, 213, 224, 226, 232, 245, 259, 264, 269, 281, 290, 291, 303, 306, 326, 345, 346, 363, 364, 367, 374, 382, 384, 386, 387, 388, 395, 411, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481], "475": [68, 211, 223, 291, 326, 327, 331, 335, 364, 481], "retri": [68, 104, 108, 211, 267, 291, 326, 327, 331, 335, 339, 346, 371, 393, 427, 439, 462, 463, 467, 471, 481], "479": [68, 111, 211, 477, 478, 481], "485": [68, 152, 273, 481], "486": [68, 212, 474, 481], "awar": [68, 77, 98, 99, 103, 104, 106, 137, 165, 177, 180, 192, 194, 198, 200, 201, 203, 204, 207, 224, 228, 246, 264, 270, 291, 294, 338, 339, 343, 350, 364, 367, 398, 411, 414, 453, 454, 459, 460, 462, 463, 464, 468, 469, 472, 473, 474, 477, 478, 481], "488": [68, 248, 309, 360, 453, 481], "elimin": [68, 93, 100, 103, 184, 188, 248, 249, 259, 269, 382, 426, 454, 464, 474, 479, 481], "pyo": [68, 161, 248, 380, 463, 466, 467, 475, 481], "bz2": [68, 117, 156, 174, 216, 252, 268, 294, 330, 356, 360, 420, 449, 463, 467, 469, 470, 475, 480, 481], "cgi": [68, 108, 243, 252, 325, 326, 348, 393, 394, 405, 418, 460, 466, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481], "difflib": [68, 143, 154, 191, 214, 252, 361, 461, 462, 464, 465, 466, 467, 475, 481], "heapq": [68, 87, 180, 223, 224, 252, 314, 316, 450, 463, 464, 465, 466, 481], "imghdr": [68, 252, 334, 348, 471, 472, 481], "lzma": [68, 117, 147, 252, 330, 356, 360, 407, 420, 449, 470, 475, 481], "selector": [68, 95, 123, 124, 129, 252, 258, 259, 326, 331, 336, 339, 359, 366, 393, 467, 469, 478, 481], "sndhdr": [68, 252, 348, 471, 472, 481], "bio": [68, 286, 481], "negoti": [68, 239, 339, 466, 474, 481], "wsgiref": [68, 252, 254, 471, 473, 477, 479, 481], "sax": [68, 252, 271, 407, 408, 409, 410, 449, 460, 461, 470, 477, 478, 479, 481], "453": [68, 208], "bootstrap": [68, 109, 140, 190, 252, 316, 332, 397, 472, 481], "pip": [68, 76, 103, 112, 190, 249, 252, 259, 397, 419, 443, 453, 459, 470, 472, 481], "446": [68, 467], "audioop": [68, 252, 348, 465, 471, 472, 480, 481], "colorsi": [68, 252, 275, 481], "filecmp": [68, 154, 188, 217, 252, 460, 481], "html": [68, 71, 78, 79, 80, 95, 100, 104, 108, 124, 134, 148, 149, 150, 156, 160, 188, 198, 203, 240, 241, 243, 245, 252, 259, 271, 291, 311, 338, 339, 367, 378, 392, 393, 394, 405, 409, 410, 411, 415, 417, 418, 422, 424, 426, 433, 450, 453, 454, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 476, 478, 479, 480, 481, 482], "pti": [68, 140, 252, 291, 339, 389, 472, 481], "stat": [68, 87, 107, 183, 188, 214, 217, 232, 248, 252, 256, 267, 286, 291, 292, 294, 303, 330, 339, 356, 380, 384, 430, 462, 463, 465, 466, 470, 472, 473, 476, 477, 478, 479, 481], "textwrap": [68, 118, 252, 361, 450, 463, 466, 481], "445": 68, "436": [68, 317], "clinic": [68, 477, 479, 481], "476": [68, 380, 481], "certif": [68, 124, 131, 134, 221, 240, 246, 267, 303, 360, 393, 417, 466, 472, 478, 481], "verif": [68, 117, 266, 338, 339, 342, 392, 473, 481], "405": [68, 108, 239, 397, 482], "420": [68, 87, 248, 430, 481, 482], "3118": [68, 342, 468, 479, 481, 482], "flexibl": [68, 73, 84, 93, 98, 100, 101, 104, 110, 131, 149, 167, 174, 188, 191, 194, 203, 206, 228, 265, 266, 281, 290, 293, 297, 338, 342, 346, 356, 364, 384, 387, 398, 409, 411, 426, 460, 461, 463, 465, 467, 468, 473, 476, 480, 482], "397": [68, 330, 459, 476, 481, 482], "rework": [68, 211, 286, 461, 462, 463, 465, 467, 473, 477, 481, 482], "380": [68, 351, 428, 482], "subgener": [68, 428, 482], "409": [68, 108, 239, 482], "414": [68, 108, 184, 239, 341, 380, 433, 463, 481, 482], "3155": [68, 87, 482], "412": [68, 108, 224, 239, 482], "362": [68, 87, 97, 253, 482], "421": [68, 239, 350, 481, 482], "simplenamespac": [68, 158, 305, 383, 397, 480, 481], "finer": [68, 74, 100, 124, 265, 291, 472, 478, 479, 481, 482], "grain": [68, 84, 100, 101, 175, 191, 265, 291, 316, 350, 393, 426, 472, 481, 482], "framework": [68, 84, 101, 121, 124, 131, 153, 165, 168, 174, 185, 191, 220, 245, 252, 254, 332, 333, 339, 342, 350, 386, 393, 418, 426, 441, 454, 457, 462, 463, 466, 467, 468, 473, 475, 476, 478, 479, 480, 481, 482], "sched": [68, 162, 252, 466, 481], "384": [68, 181, 465, 470, 472, 480, 481, 482], "389": [68, 482], "391": [68, 482], "3148": [68, 164, 482], "repositori": [68, 248, 423, 458, 460, 461, 465, 467, 481, 482], "3149": [68, 350, 481, 482], "3333": [68, 405, 482], "web": [68, 84, 85, 95, 103, 105, 107, 108, 149, 224, 233, 242, 243, 245, 252, 254, 255, 267, 270, 311, 338, 339, 392, 393, 405, 408, 418, 424, 430, 459, 460, 461, 462, 463, 464, 465, 466, 467, 475, 481, 482], "gateway": [68, 108, 149, 465, 482], "v1": [68, 335, 345, 481, 482], "ftp": [68, 80, 108, 252, 254, 267, 284, 392, 393, 458, 460, 461, 466, 467, 474, 477, 478, 479, 480, 481], "popen": [68, 101, 124, 131, 135, 140, 149, 162, 206, 246, 291, 299, 304, 326, 335, 358, 360, 397, 426, 464, 466, 474, 475, 477, 478, 479, 481], "nntp": [68, 192, 252, 348, 392, 464, 474, 480, 481], "mailbox": [68, 85, 192, 199, 246, 252, 283, 303, 465, 467, 477, 480, 481], "turtledemo": [68, 154, 220, 245, 481], "372": [68, 482], "378": [68, 343, 380, 482], "thousand": [68, 107, 233, 264, 305, 306, 317, 343, 439, 477, 478, 481, 482], "stumbl": [68, 482], "vs": [68, 185, 306, 361, 425, 481], "3101": [68, 343, 482], "miscellan": [68, 116, 117, 153, 162, 189, 192, 215, 283, 366, 456, 481, 482], "3106": [68, 482], "3137": [68, 482], "ttk": [68, 252, 366, 367, 373, 469, 477, 478, 479, 481], "theme": [68, 245, 252, 366, 367, 463, 466, 469, 477, 478, 481], "widget": [68, 81, 92, 93, 101, 116, 167, 179, 187, 245, 252, 290, 366, 369, 382, 386, 460, 463, 464, 469, 473, 477, 481], "tk": [68, 245, 252, 369, 370, 382, 437, 457, 459, 460, 461, 466, 469, 470, 471, 473, 474, 476, 477, 478, 480, 481], "freebsd": [68, 92, 113, 131, 210, 213, 276, 291, 293, 307, 320, 326, 335, 350, 360, 363, 364, 456, 465, 471, 475, 478, 480, 481], "mainten": [68, 433, 459, 472, 473, 474, 475, 478, 479, 480, 481, 482], "434": [68, 245], "branch": [68, 152, 189, 268, 317, 351, 360, 373, 378, 460, 465, 466, 480, 481], "466": 68, "network": [68, 100, 105, 107, 108, 131, 134, 139, 182, 210, 245, 247, 252, 254, 255, 267, 281, 286, 291, 297, 320, 326, 333, 339, 345, 353, 356, 360, 392, 393, 396, 403, 412, 418, 430, 461, 462, 463, 466, 474, 476, 478, 479, 481], "477": [68, 472, 481], "backport": [68, 103, 184, 245, 249, 250, 356, 384, 387, 420, 466, 476, 477, 478, 479, 480, 481], "493": [68, 97], "migrat": [68, 91, 249, 250, 253, 384, 398, 408, 434, 465, 466, 469, 472, 474, 475, 481], "roundup": 68, "343": [68, 87, 111, 167, 425, 426, 444, 447, 468, 482], "366": [68, 94, 97, 181, 248, 322, 364, 430, 468, 474, 482], "370": [68, 332, 453, 468, 481, 482], "371": [68, 468, 482], "3105": [68, 111, 468, 482], "3110": [68, 468, 482], "3112": [68, 111, 468, 482], "3116": [68, 87, 468, 469, 482], "3127": [68, 468, 482], "3129": [68, 425, 468, 482], "3141": [68, 114, 287, 468, 482], "future_builtin": [68, 110], "javascript": [68, 165, 238, 242, 255, 260, 297, 439, 444, 470, 481], "notat": [68, 78, 87, 95, 98, 101, 104, 107, 165, 184, 223, 257, 260, 276, 291, 297, 312, 335, 342, 343, 346, 361, 367, 387, 408, 411, 413, 425, 426, 428, 429, 431, 433, 438, 444, 453, 463, 464, 465, 468, 473, 479, 480, 481], "irix": [68, 468, 481], "308": [68, 224, 239, 428, 481, 482], "309": [68, 482], "314": [68, 85, 482], "328": [68, 111, 223, 248, 430, 468, 474, 482], "338": [68, 322, 430, 453, 482], "341": [68, 101, 482], "unifi": [68, 156, 188, 191, 297, 385, 475, 481, 482], "342": [68, 95, 159, 365, 428, 482], "352": [68, 466, 468, 471, 481, 482], "357": [68, 482], "218": [68, 224, 482], "237": [68, 342, 468, 482], "289": [68, 95, 224, 306, 482], "292": [68, 101, 265, 343, 482], "318": [68, 425, 482], "322": [68, 482], "324": [68, 85, 346, 482], "327": [68, 471, 482], "whi": [68, 73, 75, 92, 93, 94, 95, 98, 100, 103, 107, 149, 165, 174, 191, 199, 233, 248, 251, 259, 269, 281, 290, 291, 297, 343, 353, 386, 387, 388, 426, 459, 462, 465, 467, 472, 478, 481], "331": [68, 482], "cookielib": [68, 467, 468], "datatyp": [68, 75, 85, 174, 184, 215, 260, 297, 464, 466, 467, 469, 473, 482], "263": [68, 107, 248, 376, 465, 481, 482], "273": [68, 156, 268, 282, 421, 482], "zip": [68, 85, 87, 95, 101, 110, 112, 117, 144, 156, 158, 164, 190, 223, 248, 249, 250, 251, 252, 259, 273, 278, 325, 330, 338, 342, 343, 352, 356, 360, 407, 430, 438, 440, 448, 450, 451, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 473, 476, 477, 478, 481, 482], "archiv": [68, 84, 101, 103, 117, 190, 217, 249, 252, 269, 278, 340, 352, 360, 397, 424, 449, 454, 460, 461, 465, 466, 467, 469, 472, 473, 475, 478, 479, 481, 482], "277": [68, 482], "nt": [68, 100, 108, 158, 267, 291, 301, 312, 313, 350, 397, 409, 411, 460, 473, 479, 481, 482], "278": [68, 87, 482], "univers": [68, 87, 94, 181, 223, 233, 246, 248, 256, 342, 356, 364, 386, 392, 396, 420, 454, 464, 465, 466, 471, 475, 477, 478, 479, 480, 481, 482], "279": [68, 224, 482], "282": [68, 265, 330, 482], "285": [68, 87, 438, 482], "293": [68, 380, 482], "301": [68, 101, 108, 239, 393, 481, 482], "302": [68, 87, 108, 223, 239, 240, 243, 248, 263, 300, 322, 350, 393, 421, 430, 465, 466, 469, 474, 481, 482], "305": [68, 108, 173, 239, 482], "307": [68, 108, 239, 297, 393, 482], "optpars": [68, 89, 116, 252, 348, 464, 465, 467, 473, 477, 481], "252": [68, 98, 426, 481, 482], "253": [68, 98, 482], "diamond": [68, 94, 175, 223, 426], "234": [68, 184, 343, 450, 469, 476, 482], "227": [68, 111, 482], "scope": [68, 78, 85, 87, 94, 98, 100, 101, 111, 142, 158, 189, 253, 257, 295, 305, 312, 318, 329, 335, 339, 349, 350, 367, 384, 397, 409, 411, 413, 425, 426, 428, 430, 434, 443, 448, 460, 466, 468, 472, 473, 474, 477, 478, 479, 480, 481, 482], "236": [68, 111, 434, 482], "207": [68, 239, 306, 482], "230": [68, 221, 473, 477, 482], "229": [68, 482], "205": [68, 108, 239, 243, 286, 400, 481, 482], "232": [68, 482], "235": [68, 248, 481, 482], "insensit": [68, 104, 107, 156, 165, 194, 203, 242, 243, 248, 274, 294, 317, 332, 338, 343, 344, 356, 360, 398, 453, 459, 464, 466, 478, 481, 482], "217": [68, 380, 482], "208": [68, 239, 482], "241": [68, 482], "sax2": [68, 252, 271, 407, 409, 413], "dom": [68, 252, 255, 271, 407, 413, 449, 461, 463, 465, 471, 477, 478, 479, 481], "relationship": [68, 93, 131, 159, 181, 191, 296, 341, 342, 350, 367, 378, 400, 408, 424, 426, 465, 481], "pyxml": [68, 461], "changelog": [68, 305, 467, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482], "candid": [68, 80, 93, 111, 203, 228, 350, 426, 465, 466, 467, 475, 482], "lambda": [68, 87, 101, 106, 120, 124, 131, 142, 145, 158, 165, 179, 188, 224, 233, 253, 259, 281, 297, 316, 338, 342, 356, 362, 365, 383, 386, 387, 388, 397, 418, 425, 426, 429, 431, 433, 440, 443, 460, 461, 462, 464, 465, 466, 468, 469, 475, 476, 480, 481], "templat": [68, 73, 85, 100, 158, 199, 265, 317, 342, 343, 366, 371, 382, 443, 444, 462, 464, 466, 467, 471, 473, 474, 477, 478, 481], "histori": [68, 80, 101, 107, 138, 153, 181, 245, 269, 295, 332, 361, 363, 422, 443, 453, 475, 476, 477, 481], "openbsd": [68, 113, 221, 276, 291, 335, 363, 364, 456, 476, 478, 481], "webassembl": [68, 121, 149, 161, 164, 171, 208, 221, 227, 240, 243, 246, 276, 281, 285, 286, 291, 303, 326, 327, 331, 333, 335, 336, 337, 339, 346, 350, 357, 363, 393, 397, 401, 417, 418, 423, 456, 471, 481], "linker": [68, 72, 77, 174, 456, 471, 481], "cross": [68, 72, 76, 101, 139, 181, 210, 242, 245, 291, 297, 335, 356, 408, 423, 424, 433, 456, 457, 460, 461, 462, 463, 466, 467, 469, 473, 474, 475, 476, 477, 479, 481], "max_path": [68, 456, 477, 481], "nuget": [68, 456, 478, 481], "embedd": [68, 242, 281, 456, 479, 481], "bundl": [68, 85, 167, 199, 205, 221, 246, 303, 339, 366, 367, 419, 454, 456, 463, 467, 472, 473, 475, 476, 478, 481], "excursus": [68, 446, 456], "shebang": [68, 165, 397, 419, 446, 456, 458, 474, 477, 481], "ini": [68, 215, 329, 456, 473, 481], "dri": [68, 282, 290, 456], "pywin32": [68, 85, 456, 481], "cx_freez": [68, 85, 281, 456], "gui": [68, 83, 85, 95, 107, 245, 290, 338, 340, 350, 366, 367, 386, 437, 456, 466, 474, 481], "ide": [68, 80, 85, 87, 355, 384, 434, 449, 456, 459, 460, 462], "lexic": [68, 220, 238, 252, 253, 294, 355, 376, 413, 426, 428, 431, 432, 478, 481], "blank": [68, 84, 85, 95, 118, 149, 153, 165, 173, 175, 184, 188, 191, 194, 203, 205, 206, 240, 243, 245, 266, 295, 332, 339, 342, 352, 382, 392, 411, 434, 464, 476, 478, 481], "indent": [68, 97, 104, 110, 118, 120, 165, 167, 191, 202, 211, 253, 260, 305, 319, 362, 365, 366, 373, 375, 376, 388, 409, 411, 425, 429, 445, 460, 470, 472, 473, 474, 475, 480, 481], "imaginari": [68, 152, 181, 342, 343, 350, 382, 425, 426, 428, 466, 467, 473], "bodi": [68, 84, 85, 108, 110, 120, 133, 134, 137, 141, 167, 181, 187, 189, 193, 194, 195, 197, 198, 199, 203, 205, 206, 223, 238, 240, 243, 246, 253, 269, 270, 286, 331, 333, 338, 342, 360, 384, 386, 388, 391, 393, 400, 411, 425, 427, 428, 429, 434, 464, 465, 466, 472, 473, 474, 475, 476, 477, 478, 479, 481], "versus": [68, 181, 191, 248, 251, 265, 428, 473, 479, 481], "consider": [68, 73, 85, 99, 100, 116, 124, 162, 175, 179, 191, 211, 221, 240, 246, 254, 269, 283, 286, 303, 333, 338, 393, 408, 431, 460, 463, 464, 465, 467, 472, 474, 478, 481], "arithmet": [68, 181, 211, 219, 223, 252, 254, 273, 288, 317, 342, 350, 417, 423, 425, 426, 429, 431, 449, 463, 464, 465, 473, 474, 476, 479, 481], "power": [68, 85, 89, 93, 94, 139, 165, 171, 174, 184, 223, 233, 259, 288, 290, 291, 295, 297, 317, 335, 342, 351, 356, 382, 387, 388, 411, 424, 425, 429, 431, 447, 463, 464, 466, 467, 468, 473, 474, 479, 481], "membership": [68, 92, 94, 98, 149, 176, 231, 291, 342, 426, 440, 464, 473, 481], "preced": [68, 93, 100, 101, 104, 151, 165, 176, 181, 188, 189, 191, 192, 200, 205, 224, 245, 253, 264, 265, 266, 274, 301, 306, 317, 332, 335, 338, 342, 343, 345, 346, 350, 351, 364, 367, 374, 382, 398, 408, 411, 417, 418, 420, 425, 426, 427, 429, 431, 432, 433, 434, 453, 454, 459, 461, 462, 474, 478, 481], "nonloc": [68, 85, 87, 120, 158, 223, 253, 349, 425, 427, 429, 431, 433, 438, 439, 468, 477, 481], "overview": [68, 74, 98, 107, 257, 278, 286, 290, 305, 306, 313, 459, 460, 461, 462, 463, 465, 466, 467, 468, 472, 473, 476, 478], "irrefut": 68, "scanf": [68, 361], "phonebook": [68, 361], "mung": [68, 361], "adverb": [68, 361], "sequencematch": [68, 361, 461, 465, 466, 475, 481], "ndiff": [68, 191, 361, 461, 462], "stringprep": [68, 156, 252, 361, 463], "internet": [68, 98, 108, 141, 192, 233, 238, 241, 245, 252, 270, 333, 335, 336, 339, 360, 361, 364, 392, 393, 424, 439, 459, 460, 461, 463, 470, 473, 475, 481], "gnu": [68, 72, 97, 226, 232, 244, 252, 264, 290, 291, 296, 328, 330, 356, 361, 424, 426, 433, 436, 445, 446, 453, 454, 458, 460, 463, 464, 466, 467, 472, 476, 478, 479, 481], "stateless": [68, 139, 143, 145], "streamreaderwrit": [68, 143], "streamrecod": [68, 107, 143, 481], "idna": [68, 143, 201, 385, 392, 463, 481], "internation": [68, 89, 107, 143, 192, 244, 252, 280, 283, 333, 339, 344, 364, 433, 460, 463, 464, 476, 478, 481], "codepag": [68, 118, 143, 350, 472, 481], "utf_8_sig": [68, 143], "strftime": [68, 100, 101, 137, 180, 264, 265, 267, 269, 364, 417, 449, 450, 463, 465, 466, 473, 474, 477, 481], "strptime": [68, 180, 265, 364, 417, 462, 463, 465, 473, 481], "iana": [68, 180, 181, 239, 252, 257, 274, 312, 339, 409, 411, 480, 481], "chainmap": [68, 180, 342, 384, 472, 474, 475, 478, 481], "dequ": [68, 180, 259, 314, 342, 384, 400, 425, 428, 440, 450, 464, 465, 466, 467, 471, 473, 476, 477, 481], "defaultdict": [68, 87, 180, 342, 384, 465, 473, 481], "ordereddict": [68, 87, 165, 173, 180, 253, 342, 384, 467, 469, 471, 473, 476, 477, 479, 480, 481], "userdict": [68, 180, 461, 463, 466, 481], "userlist": [68, 180, 462, 481], "userstr": [68, 180, 460, 476, 480, 481], "recip": [68, 85, 94, 101, 108, 145, 158, 180, 188, 198, 222, 248, 273, 288, 291, 296, 313, 328, 342, 350, 411, 452, 472, 473, 481], "deep": [68, 101, 180, 248, 252, 297, 305, 329, 350, 356, 408, 481], "pretti": [68, 76, 92, 107, 120, 165, 180, 183, 188, 248, 252, 253, 260, 267, 290, 295, 306, 376, 387, 409, 411, 417, 428, 460, 461, 462, 465, 466, 468, 480, 481], "printer": [68, 104, 180, 245, 252, 367, 376, 403], "prettyprint": [68, 180, 475, 481], "__dunder__": [68, 180], "_sunder_": [68, 180], "graph": [68, 180, 252, 266, 290, 297, 351, 382, 462, 475, 480, 481], "logarithm": [68, 184, 288, 293, 342, 463, 466, 469, 473, 474], "trigonometr": [68, 288, 464], "angular": [68, 288, 432], "hyperbol": [68, 188, 288, 466], "polar": [68, 288, 466, 481], "coordin": [68, 85, 92, 94, 101, 174, 175, 177, 181, 269, 273, 279, 288, 338, 343, 364, 367, 374, 376, 382, 460, 466, 472, 476, 481], "classif": [68, 264, 288, 290, 433], "off": [68, 84, 92, 95, 100, 101, 103, 104, 108, 110, 118, 153, 165, 174, 175, 181, 188, 189, 198, 206, 207, 214, 223, 230, 241, 245, 259, 265, 266, 267, 273, 288, 290, 299, 303, 306, 313, 329, 333, 342, 359, 360, 364, 374, 382, 386, 387, 393, 418, 426, 430, 433, 434, 446, 453, 460, 461, 462, 463, 464, 465, 466, 468, 473, 475, 476, 477, 479, 480, 481], "ration": [68, 181, 184, 252, 287, 288, 342, 426, 466, 467, 468, 473, 481], "reproduc": [68, 85, 108, 199, 232, 288, 346, 360, 393, 415, 424, 454, 473, 478, 479, 481], "spread": [68, 288, 367, 466], "normaldist": [68, 288, 479, 481], "mont": [68, 288], "carlo": [68, 288, 471], "bayesian": [68, 288], "classifi": [68, 103, 249, 288, 305, 463, 467, 481], "kernel": [68, 92, 113, 124, 130, 255, 259, 276, 288, 291, 326, 330, 331, 335, 339, 350, 353, 363, 460, 465, 470, 474, 475, 477, 479, 481], "densiti": [68, 288], "dircmp": [68, 217, 460, 465, 475, 481], "fnmatch": [68, 217, 229, 252, 294, 346, 380, 386, 481], "copytre": [68, 84, 140, 217, 466, 467, 473, 479, 481], "rmtree": [68, 84, 140, 217, 291, 294, 360, 400, 471, 472, 474, 478, 479, 481], "base_dir": [68, 140, 217], "persist": [68, 182, 239, 243, 245, 252, 266, 267, 272, 279, 318, 424, 473, 475, 481], "unpickl": [68, 76, 94, 101, 181, 265, 267, 281, 282, 296, 298, 423, 463, 466, 467, 469, 481], "dispatch": [68, 78, 84, 85, 87, 100, 101, 142, 153, 175, 195, 224, 243, 296, 306, 319, 386, 417, 469, 471, 473, 475, 479, 481], "copyreg": [68, 169, 252, 277, 296, 297, 468, 481], "ndbm": [68, 296, 328, 426, 454, 479, 481], "dumb": [68, 296, 357, 476, 477, 478, 479, 481], "sqlite": [68, 252, 296, 441, 449, 454, 465, 467, 470, 471, 472, 473, 474, 475, 478, 481], "connect": [68, 92, 93, 98, 101, 105, 108, 116, 122, 134, 140, 149, 158, 162, 167, 205, 210, 211, 221, 239, 240, 241, 243, 245, 246, 264, 265, 267, 286, 290, 291, 296, 297, 303, 307, 325, 326, 330, 331, 333, 336, 339, 345, 346, 350, 357, 360, 363, 367, 373, 382, 384, 388, 393, 395, 403, 409, 412, 414, 417, 424, 428, 447, 453, 454, 459, 460, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "cursor": [68, 92, 153, 158, 173, 175, 245, 296, 297, 318, 367, 373, 374, 388, 465, 466, 469, 473, 477, 479, 480, 481], "blob": [68, 296, 339, 388, 471, 481], "prepareprotocol": [68, 296, 481], "guid": [68, 70, 74, 91, 92, 99, 103, 107, 109, 181, 184, 188, 223, 249, 291, 293, 296, 397, 451, 454, 457, 458, 466, 467, 472, 473, 475, 481], "placehold": [68, 93, 101, 189, 228, 234, 265, 267, 296, 319, 343, 356, 362, 392, 397, 403, 434, 450, 465, 471, 472, 473, 475, 478, 481], "sql": [68, 95, 107, 173, 259, 279, 290, 296, 384, 449, 465, 469, 471, 474, 481], "uri": [68, 101, 108, 240, 241, 294, 296, 312, 339, 382, 392, 393, 405, 408, 411, 413, 414, 416, 417, 470, 472, 474, 475, 481], "transact": [68, 95, 240, 241, 279, 296, 316, 363, 463, 465, 466, 472, 473, 476, 477, 481], "autocommit": [68, 296, 472, 481], "isolation_level": [68, 296, 481], "bzip2": [68, 117, 216, 252, 330, 356, 420, 471, 473, 474, 481], "shot": [68, 117, 167, 326, 478], "decompress": [68, 117, 147, 156, 216, 232, 407, 422, 449, 465, 473, 474, 476, 477, 481], "pyzipfil": [68, 117, 475], "zipinfo": [68, 117, 466, 477, 481], "pitfal": [68, 104, 117, 471, 481], "tar": [68, 80, 117, 252, 274, 290, 294, 330, 397, 424, 451, 458, 460, 463, 464, 465, 466, 467, 470, 471, 472, 473, 479, 480, 481], "tarinfo": [68, 117, 467, 473], "dialect": [68, 215, 338, 463, 465, 473, 481], "interpol": [68, 215, 342, 428, 444, 473, 476, 477, 481], "rawconfigpars": [68, 215, 266, 467, 471, 475, 481], "tomllib": [68, 165, 215, 252, 471, 481], "toml": [68, 76, 165, 215, 252, 256, 470, 471, 481], "netrc": [68, 215, 221, 252, 286, 462, 475, 476, 481], "plist": [68, 215, 252, 270, 457, 466, 475, 478, 479, 481], "digest": [68, 172, 194, 202, 203, 235, 252, 281, 303, 339, 393, 465, 467, 468, 473, 474, 475, 478, 479, 480, 481], "shake": [68, 172, 454, 471, 477, 480, 481], "blake2": [68, 172, 454, 471, 477, 480, 481], "person": [68, 93, 95, 172, 245, 338, 339, 353, 424, 459, 460, 462, 466], "credit": [68, 86, 121, 166, 172, 245, 259, 350, 425, 446, 448, 479, 481], "reentranc": [68, 116, 167, 314, 481], "clock": [68, 85, 116, 124, 129, 137, 181, 306, 320, 382, 466, 474, 476, 477, 478, 479, 481], "add_argu": [68, 89, 101, 116, 158, 188, 198, 226, 307, 397, 449, 467, 473, 481], "argumentpars": [68, 89, 101, 116, 158, 188, 198, 226, 307, 397, 449, 467, 472, 473, 476, 478, 481], "prog": [68, 89, 101, 116, 290, 317, 397, 449, 473], "epilog": [68, 116, 203, 290, 465, 473], "formatter_class": [68, 101, 116], "prefix_char": [68, 116], "fromfile_prefix_char": [68, 116, 472, 481], "argument_default": [68, 116], "allow_abbrev": [68, 116, 476, 481], "conflict_handl": [68, 116, 290], "add_help": [68, 116], "exit_on_error": [68, 116, 481], "metavar": [68, 101, 116, 198, 290, 397, 467, 472, 473, 481], "parse_arg": [68, 89, 101, 116, 158, 188, 198, 226, 290, 307, 397, 449, 463, 467, 473], "abbrevi": [68, 107, 116, 175, 181, 184, 264, 290, 295, 306, 346, 364, 379, 411, 453, 475, 476, 477, 481], "filetyp": [68, 116, 187, 334, 467, 475, 481], "intermix": [68, 116, 226, 478, 481], "upgrad": [68, 108, 109, 116, 134, 208, 240, 245, 397, 451, 454, 459, 462, 463, 467, 473, 475, 477, 478, 479, 481], "getopt": [68, 89, 116, 188, 252, 290, 463, 467, 481], "logger": [68, 116, 123, 167, 266, 267, 281, 330, 354, 384, 386, 463, 467, 469, 473, 474, 475, 476, 478, 479, 480, 481], "logrecord": [68, 100, 116, 267, 386, 463, 475, 481], "loggeradapt": [68, 116, 467, 481], "schema": [68, 93, 116, 279, 338, 467, 481], "queuehandl": [68, 100, 116, 481], "queuelisten": [68, 116, 476, 481], "streamhandl": [68, 100, 101, 116, 265, 266, 473, 478, 481], "filehandl": [68, 100, 101, 108, 116, 254, 265, 266, 466, 481], "nullhandl": [68, 100, 116, 469], "watchedfilehandl": [68, 100, 116, 466, 477], "baserotatinghandl": [68, 100, 116, 464], "rotatingfilehandl": [68, 100, 101, 116, 266, 464, 466, 467], "timedrotatingfilehandl": [68, 100, 116, 464, 466, 475, 481], "sockethandl": [68, 100, 101, 116, 266, 471, 475], "datagramhandl": [68, 100, 116, 266, 475], "sysloghandl": [68, 100, 116, 266, 354, 467, 471, 474, 481], "nteventloghandl": [68, 100, 116, 266], "smtphandler": [68, 100, 101, 116, 266, 481], "memoryhandl": [68, 100, 101, 116, 266, 481], "httphandler": [68, 100, 101, 108, 116, 254, 266, 476, 481], "getpass": [68, 116, 171, 246, 252, 280, 291, 303, 357, 359, 466, 481], "textpad": [68, 92, 116, 252, 466, 481], "textbox": [68, 92, 116, 466, 481], "panel": [68, 83, 116, 175, 252, 404, 461, 481], "foreign": [68, 116, 165, 252, 330, 338, 356, 481], "rlock": [68, 162, 167, 281, 466, 470, 473, 476, 481], "semaphor": [68, 84, 97, 113, 122, 162, 210, 281, 291, 350, 360, 450, 466, 473, 474, 479, 480, 481], "timer": [68, 92, 97, 162, 183, 210, 212, 281, 326, 331, 364, 365, 367, 374, 382, 449, 462, 463, 466, 474, 476, 477, 478, 481], "barrier": [68, 122, 162, 281, 382, 471, 473, 481], "exchang": [68, 72, 124, 162, 174, 210, 233, 276, 291, 339, 345, 356, 363, 466, 467, 473, 474, 481], "synchron": [68, 113, 121, 137, 162, 167, 176, 182, 184, 210, 224, 248, 256, 276, 291, 328, 331, 336, 339, 360, 363, 367, 426, 450, 466, 472, 473, 476, 478, 481], "pool": [68, 73, 84, 122, 128, 162, 164, 221, 259, 282, 291, 316, 461, 463, 466, 467, 473, 474, 475, 477, 481], "worker": [68, 101, 132, 161, 162, 164, 230, 314, 363, 465, 466, 467, 476, 480, 481], "pipe": [68, 87, 101, 104, 105, 123, 128, 129, 131, 135, 162, 188, 206, 210, 211, 213, 252, 256, 291, 326, 327, 330, 331, 340, 346, 348, 350, 356, 360, 397, 453, 464, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481], "primit": [68, 75, 84, 85, 113, 121, 122, 134, 162, 174, 175, 185, 256, 297, 306, 317, 326, 327, 331, 339, 363, 450, 470, 474, 475, 478, 481], "sharedctyp": [68, 162, 476, 481], "remot": [68, 100, 101, 119, 124, 131, 162, 168, 210, 240, 243, 246, 264, 265, 266, 267, 335, 339, 353, 357, 373, 393, 401, 403, 412, 416, 417, 462, 473, 476, 477, 478, 479, 480, 481], "listen": [68, 84, 105, 124, 162, 243, 266, 267, 286, 311, 327, 333, 335, 336, 339, 360, 382, 405, 417, 463, 466, 467, 475, 476, 481], "authent": [68, 162, 221, 233, 239, 246, 265, 267, 284, 286, 303, 333, 339, 393, 417, 422, 462, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481], "guidelin": [68, 75, 99, 162, 245, 360, 371, 460, 461, 465, 481], "spawn": [68, 101, 122, 128, 130, 135, 136, 140, 162, 164, 255, 291, 307, 336, 360, 363, 472, 475, 479, 480, 481], "forkserv": [68, 162, 472, 475, 481], "shared_memori": [68, 162, 252, 350, 479, 481], "executor": [68, 101, 123, 124, 133, 162, 473, 476, 480, 481], "threadpoolexecutor": [68, 84, 123, 124, 162, 281, 363, 471, 473, 476, 477, 478, 479, 480, 481], "processpoolexecutor": [68, 84, 123, 124, 162, 281, 363, 473, 476, 478, 479, 480, 481], "sh": [68, 84, 101, 162, 299, 307, 329, 454, 460, 481], "pipelin": [68, 162, 252, 348, 460, 481], "popen2": [68, 162, 464, 466], "popen3": [68, 162], "vfork": [68, 162, 481], "posix_spawn": [68, 140, 162, 291, 479, 481], "simplequeu": [68, 162, 267, 281, 342, 478, 480, 481], "interprocess": [68, 131, 252, 281, 335], "runner": [68, 101, 121, 122, 191, 386, 398, 464, 467, 471, 481], "keyboard": [68, 81, 86, 92, 175, 245, 331, 346, 374, 382, 386, 439, 466, 481], "task": [68, 73, 85, 87, 95, 99, 100, 104, 107, 113, 121, 123, 125, 127, 128, 132, 133, 134, 136, 165, 167, 168, 199, 205, 234, 245, 257, 265, 267, 269, 281, 291, 297, 306, 314, 320, 336, 346, 363, 386, 392, 418, 428, 450, 454, 460, 462, 466, 467, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481], "cancel": [68, 122, 123, 124, 127, 132, 133, 136, 139, 149, 164, 167, 175, 176, 187, 210, 212, 279, 312, 323, 331, 363, 369, 371, 373, 374, 382, 386, 425, 428, 471, 473, 478, 479, 480, 481], "sleep": [68, 84, 95, 101, 121, 122, 123, 124, 127, 131, 132, 133, 135, 136, 164, 165, 175, 255, 281, 320, 323, 331, 338, 346, 360, 364, 466, 470, 471, 474, 476, 477, 478, 479, 481], "eager": [68, 357, 425, 472, 478, 481], "shield": [68, 122, 479, 481], "timeout": [68, 101, 105, 108, 113, 122, 124, 127, 132, 133, 135, 136, 164, 167, 175, 183, 221, 240, 246, 266, 267, 281, 286, 295, 303, 314, 326, 327, 331, 333, 336, 338, 339, 346, 357, 360, 363, 364, 379, 384, 393, 454, 463, 466, 467, 470, 471, 473, 474, 476, 479, 480, 481], "tcp": [68, 80, 84, 100, 101, 105, 122, 124, 128, 221, 255, 267, 281, 333, 335, 336, 339, 360, 466, 467, 477, 478, 481], "echo": [68, 89, 92, 112, 124, 128, 135, 139, 168, 175, 227, 245, 260, 280, 291, 297, 327, 329, 335, 346, 359, 381, 386, 428, 448, 466, 481], "boundedsemaphor": [68, 122, 281, 363, 474, 479, 481], "lifo": [68, 122, 158, 314, 342, 386], "tls": [68, 128, 134, 221, 240, 252, 258, 267, 291, 303, 325, 333, 335, 360, 454, 458, 462, 466, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479, 481], "dns": [68, 101, 126, 128, 156, 257, 267, 335, 339, 396, 476, 481], "hello": [68, 73, 75, 79, 85, 86, 101, 110, 112, 119, 127, 131, 133, 134, 135, 137, 144, 149, 174, 182, 224, 228, 233, 238, 276, 281, 286, 289, 297, 299, 302, 335, 336, 338, 339, 342, 358, 360, 362, 363, 366, 376, 384, 386, 387, 405, 433, 438, 440, 441, 444, 459, 473, 475, 476, 479, 480, 481], "world": [68, 73, 79, 85, 92, 98, 101, 112, 127, 131, 134, 137, 144, 149, 167, 174, 181, 224, 228, 233, 246, 255, 276, 281, 289, 290, 297, 299, 308, 323, 335, 336, 338, 339, 342, 358, 360, 362, 363, 366, 376, 382, 386, 387, 405, 408, 424, 433, 438, 441, 444, 468, 476, 477, 481], "call_soon": [68, 123, 127, 128, 131, 134, 384, 478, 481], "call_lat": [68, 128, 478, 481], "sigterm": [68, 131, 135, 281, 331, 346, 466, 481], "transport": [68, 121, 124, 127, 128, 134, 135, 168, 192, 196, 199, 204, 210, 333, 339, 416, 417, 462, 476, 477, 478, 481], "datagram": [68, 124, 128, 267, 336, 339, 450, 471, 481], "udp": [68, 100, 124, 128, 267, 335, 336, 360, 467, 471, 477, 478, 479, 480, 481], "subprocess_exec": [68, 124, 128, 129, 130, 135, 481], "subprocessprotocol": [68, 124], "multithread": [68, 124, 135, 137, 233, 264, 281, 346, 357, 405, 463, 472, 480, 481], "ca": [68, 92, 104, 160, 259, 393, 424, 466, 467, 475, 481], "session": [68, 85, 93, 100, 101, 124, 153, 167, 191, 211, 240, 241, 281, 291, 295, 303, 307, 318, 327, 333, 350, 393, 434, 448, 453, 459, 464, 472, 474, 475, 477, 479, 481], "cipher": [68, 131, 165, 171, 233, 454, 467, 473, 474, 476, 477, 478, 481], "poll": [68, 84, 124, 130, 135, 281, 291, 327, 331, 336, 339, 340, 346, 464, 466, 473, 474, 476, 480, 481], "edg": [68, 103, 174, 175, 191, 199, 223, 230, 360, 362, 382, 474, 475, 481], "epol": [68, 327, 466, 475, 476, 480, 481], "kqueue": [68, 320, 327, 466, 476, 481], "kevent": 68, "multiplex": [68, 252, 258, 326, 339, 475], "sigpip": [68, 346], "madv_": 68, "map_": 68, "mime": [68, 87, 104, 141, 144, 149, 156, 194, 198, 200, 201, 202, 203, 205, 206, 243, 252, 270, 283, 350, 405, 430, 449, 462, 464, 467, 470, 473, 475, 476, 477, 478, 481], "feedpars": [68, 192, 197, 283, 464, 481], "defect": [68, 192, 194, 201, 203, 205, 206, 283, 464, 474, 478, 481], "headerregistri": [68, 192, 197, 198, 203, 206, 283, 481], "contentmanag": [68, 192, 204, 283, 475, 481], "compat32": [68, 192, 193, 196, 199, 200, 203, 204, 205, 206, 207, 283, 474, 476, 477, 481], "scratch": [68, 101, 126, 187, 192, 196, 199, 205, 283, 339, 397, 408, 474, 475, 481], "charset": [68, 149, 181, 188, 192, 194, 195, 200, 203, 204, 206, 207, 228, 246, 283, 339, 393, 405, 473, 476, 481], "complianc": [68, 184, 192, 201, 206, 283, 286, 408, 474, 475, 481], "interoper": [68, 94, 101, 124, 139, 206, 243, 257, 283, 297, 316, 339, 342, 420, 426, 444, 469, 473, 475, 481], "mbox": [68, 194, 199, 283, 465, 481], "mh": [68, 283, 465], "babyl": [68, 283], "mmdf": [68, 283, 481], "maildirmessag": [68, 283], "mboxmessag": [68, 203, 283], "mhmessag": [68, 283], "babylmessag": [68, 283], "mmdfmessag": [68, 283], "base16": [68, 252, 283, 464], "base32": [68, 252, 283, 464, 470, 481], "base85": [68, 252, 283, 475, 481], "quopri": [68, 144, 154, 156, 252, 283], "markup": [68, 215, 252, 312, 408, 417, 466, 473, 474, 481], "xhtml": [68, 108, 236, 237, 252, 271, 312, 393, 408, 409, 411, 473], "htmlparser": [68, 271, 468, 470, 474, 475, 476, 480, 481], "entiti": [68, 87, 104, 108, 236, 238, 240, 252, 266, 271, 312, 393, 407, 408, 409, 410, 412, 413, 414, 415, 424, 463, 474, 477, 478, 479, 481], "defusedxml": [68, 271], "pull": [68, 73, 181, 184, 271, 326, 382, 387, 410, 423, 460, 464, 467, 475, 478, 481], "xpath": [68, 271, 407, 480, 481], "xinclud": [68, 271, 481], "qname": [68, 271, 408, 413, 414], "treebuild": [68, 271, 473, 479, 481], "xmlparser": [68, 271, 467, 475, 479, 481], "xmlpullpars": [68, 271, 475, 481], "domimplement": [68, 271], "node": [68, 230, 233, 257, 262, 271, 291, 292, 294, 301, 335, 339, 350, 374, 375, 396, 409, 410, 411, 413, 450, 454, 460, 463, 465, 466, 467, 470, 473, 477, 478, 479, 480, 481], "nodelist": [68, 271, 409, 426], "documenttyp": [68, 271], "namednodemap": [68, 271], "cdatasect": [68, 271], "processinginstruct": [68, 271, 411, 413, 465], "minidom": [68, 252, 271, 407, 408, 410, 460, 461, 463, 477, 478, 479, 481], "pulldom": [68, 252, 271, 407, 471, 479, 481], "domeventstream": [68, 271, 471, 479, 481], "saxexcept": [68, 271], "contenthandl": [68, 271, 410, 412, 414, 415, 460], "dtdhandler": [68, 271, 414], "entityresolv": [68, 271, 414], "errorhandl": [68, 271, 412, 414, 453, 466], "lexicalhandl": [68, 271, 464, 470, 481], "saxutil": [68, 252, 271, 412], "xmlreader": [68, 252, 271, 410, 412, 413, 415, 476], "incrementalpars": [68, 271], "inputsourc": [68, 271, 412, 413, 415, 476, 481], "attributesn": [68, 271, 412, 413], "expat": [68, 252, 271, 302, 407, 411, 413, 454, 460, 461, 463, 465, 467, 473, 481], "expaterror": [68, 271, 473], "browser": [68, 95, 107, 108, 149, 150, 188, 242, 243, 245, 252, 254, 255, 262, 270, 306, 311, 350, 392, 393, 438, 454, 460, 461, 463, 464, 465, 466, 472, 473, 474, 477, 478, 481], "wsgi": [68, 252, 254, 465, 471, 473, 481], "simple_serv": [68, 254, 465, 477, 481], "url": [68, 85, 134, 140, 141, 148, 149, 164, 165, 221, 239, 240, 241, 243, 245, 249, 252, 254, 267, 274, 311, 324, 342, 360, 391, 394, 396, 397, 401, 405, 411, 414, 415, 417, 418, 424, 430, 460, 463, 464, 465, 466, 467, 470, 473, 475, 476, 477, 478, 479, 480, 481], "openerdirector": [68, 108, 254, 475], "basehandl": [68, 254, 387, 405, 481], "httpredirecthandl": [68, 108, 254], "httpcookieprocessor": [68, 241, 254, 464], "proxyhandl": [68, 108, 254, 481], "httppasswordmgr": [68, 108, 254, 481], "httppasswordmgrwithpriorauth": [68, 254, 476, 481], "abstractbasicauthhandl": [68, 254, 387, 481], "httpbasicauthhandl": [68, 108, 254], "proxybasicauthhandl": [68, 254], "abstractdigestauthhandl": [68, 254, 387, 481], "httpdigestauthhandl": [68, 254], "proxydigestauthhandl": [68, 254], "httpshandler": [68, 254, 473], "datahandl": [68, 108, 254, 475], "ftphandler": [68, 108, 254], "cacheftphandl": [68, 254, 481], "unknownhandl": [68, 108, 254], "httperrorprocessor": [68, 108, 254], "robot": [68, 252, 254, 382, 390, 460, 481], "httpconnect": [68, 254, 417, 466, 467, 473, 475, 476, 477, 478, 481], "httprespons": [68, 254, 393, 467, 474, 481], "httpmessag": [68, 108, 243, 254], "ftp_tls": [68, 254, 467, 472, 473, 474, 480, 481], "pop3": [68, 252, 254, 474, 475, 476, 480, 481], "imap4": [68, 252, 254, 303, 473, 476, 477, 479, 480, 481], "smtp": [68, 80, 84, 100, 101, 192, 198, 199, 201, 206, 252, 254, 267, 339, 449, 460, 462, 466, 473, 474, 475, 476, 480, 481], "rfc": [68, 100, 101, 104, 108, 124, 141, 144, 156, 173, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 221, 228, 233, 235, 239, 240, 241, 242, 243, 246, 252, 254, 257, 260, 264, 267, 269, 270, 286, 303, 315, 325, 333, 335, 339, 344, 345, 357, 364, 391, 392, 393, 405, 406, 417, 449, 460, 462, 464, 465, 466, 467, 470, 473, 474, 476, 477, 478, 479, 480, 481], "4122": [68, 252, 254, 465], "tcpserver": [68, 101, 243, 254, 265, 418, 467, 481], "udpserv": [68, 254], "mixin": [68, 94, 159, 167, 209, 254, 256, 393, 481], "cooki": [68, 108, 113, 233, 239, 252, 254, 256, 339, 363, 376, 393, 464, 466, 467, 468, 476, 478, 481], "morsel": [68, 254, 466, 476, 478, 481], "cookiejar": [68, 239, 242, 252, 254, 393, 481], "filecookiejar": [68, 254, 481], "cookiepolici": [68, 254], "defaultcookiepolici": [68, 254, 481], "rpc": [68, 80, 245, 252, 254, 260, 272, 416, 424, 462, 463, 464, 465, 466, 467, 477, 481], "serverproxi": [68, 254, 418, 476, 479, 481], "protocolerror": [68, 254], "multical": [68, 254, 418], "simplexmlrpcserv": [68, 254, 417, 462, 464, 465, 466, 467, 468], "cgixmlrpcrequesthandl": [68, 254, 464], "docxmlrpcserv": [68, 254, 463, 465, 466, 468, 481], "doccgixmlrpcrequesthandl": [68, 254], "ipv4": [68, 98, 105, 124, 243, 252, 254, 335, 339, 466, 474, 477, 478, 479, 480, 481], "ipv6": [68, 98, 124, 243, 252, 254, 335, 339, 360, 392, 454, 462, 466, 467, 469, 473, 474, 476, 479, 480, 481], "ip": [68, 80, 100, 101, 124, 145, 241, 243, 254, 265, 267, 335, 336, 339, 357, 360, 392, 393, 460, 466, 473, 474, 476, 477, 478, 479, 480, 481], "net": [68, 81, 84, 108, 181, 192, 233, 241, 254, 291, 317, 326, 422, 424, 432, 459, 460, 461, 462, 463, 464, 465, 466, 468, 474, 481], "wav": [68, 139, 204, 252, 275, 334, 404, 448], "wave_read": [68, 275], "wave_writ": [68, 275], "multilingu": [68, 244, 245, 252, 481], "servic": [68, 101, 108, 223, 244, 252, 253, 260, 265, 267, 280, 281, 291, 301, 319, 326, 333, 335, 336, 339, 342, 356, 364, 407, 417, 424, 426, 453, 459, 460, 464, 467, 470, 471, 474, 478, 479, 480, 481], "nulltransl": [68, 244, 471], "gnutransl": [68, 244], "catalog": [68, 244, 460, 461, 463, 481], "tip": [68, 223, 244, 245, 460, 467, 481], "turtl": [68, 153, 220, 245, 252, 367, 466, 468, 471, 472, 473, 481], "graphic": [68, 92, 107, 156, 171, 175, 220, 247, 252, 367, 373, 386, 401, 466], "pen": [68, 220], "turtlescreen": [68, 220], "screen": [68, 85, 92, 95, 97, 107, 153, 175, 177, 220, 245, 318, 346, 367, 373, 374, 376, 460, 462, 463, 466, 473, 476, 480, 481], "rawturtl": [68, 220, 472, 481], "motion": [68, 175, 220, 369], "measur": [68, 92, 93, 103, 131, 137, 139, 152, 184, 188, 220, 224, 297, 306, 320, 332, 336, 364, 367, 370, 380, 439, 460, 463, 464, 465, 466, 467, 472, 474, 475, 478, 479, 480, 481], "draw": [68, 92, 153, 175, 220, 245, 316, 374, 466, 481], "color": [68, 87, 94, 101, 153, 158, 160, 175, 187, 209, 220, 238, 329, 366, 367, 368, 373, 374, 376, 403, 426, 439, 440, 470, 471, 473, 477, 478, 481], "anim": [68, 94, 220, 228, 374, 444, 466, 476], "explan": [68, 104, 108, 165, 181, 188, 220, 243, 264, 269, 281, 291, 295, 299, 302, 317, 335, 342, 350, 364, 367, 393, 460, 461, 462, 463, 464, 465, 466, 473, 481], "tcl": [68, 81, 245, 252, 366, 373, 374, 450, 457, 459, 460, 463, 466, 467, 470, 471, 473, 476, 477, 479, 480, 481], "architectur": [68, 211, 270, 277, 301, 331, 345, 353, 366, 408, 419, 426, 454, 458, 459, 463, 464, 466, 474, 476, 479, 480, 481], "life": [68, 87, 103, 165, 224, 297, 338, 356, 366, 408, 420, 439, 459, 460, 466, 479, 481], "concept": [68, 92, 95, 98, 99, 100, 103, 107, 137, 165, 184, 192, 242, 248, 256, 259, 281, 299, 307, 338, 342, 356, 363, 366, 382, 384, 388, 410, 411, 425, 430, 462, 463, 468, 474, 475, 476, 481], "handi": [68, 85, 92, 93, 94, 103, 104, 165, 174, 188, 290, 342, 366, 387, 460, 464], "packer": [68, 366], "coupl": [68, 75, 85, 101, 118, 124, 203, 206, 207, 265, 281, 290, 331, 366, 387, 393, 459, 475, 477, 478, 481], "colorchoos": [68, 252, 366, 367, 481], "font": [68, 101, 107, 165, 210, 245, 252, 362, 366, 367, 371, 373, 374, 382, 470, 477, 478, 480, 481], "dialog": [68, 77, 92, 245, 252, 279, 290, 360, 366, 367, 368, 371, 373, 382, 459, 475, 476, 477, 478, 479, 480, 481], "simpledialog": [68, 366, 367, 481], "filedialog": [68, 366, 367], "commondialog": [68, 366, 367, 368], "messagebox": [68, 174, 187, 252, 366, 367, 481], "scrolledtext": [68, 252, 366, 367], "scroll": [68, 92, 153, 175, 245, 252, 366, 367, 374, 481], "dnd": [68, 252, 366, 367], "drag": [68, 252, 366, 367, 373, 374, 382, 457, 481], "scrollabl": [68, 245, 366, 373], "combobox": [68, 366, 373], "spinbox": [68, 366, 373, 478, 479, 481], "notebook": [68, 366, 373, 479, 481], "progressbar": [68, 366], "sizegrip": [68, 366], "treeview": [68, 366, 479, 481], "tix": [68, 81, 252, 366, 367, 463, 477, 481], "hierarch": [68, 100, 243, 265, 266, 366, 367, 374, 392, 410, 411, 418, 430], "listbox": [68, 366, 374, 481], "tabular": [68, 366], "geometri": [68, 366, 367, 372, 374, 481], "menu": [68, 92, 366, 367, 373, 382, 426, 457, 459, 465, 469, 473, 477, 478, 479, 480, 481], "editor": [68, 72, 104, 107, 248, 366, 433, 455, 457, 460, 466, 475, 476, 477, 478, 479, 481], "menus": [68, 366, 367, 481], "calltip": [68, 366, 481], "newtyp": [68, 185, 477, 481], "nomin": [68, 120, 185, 481], "timelin": [68, 185], "onlin": [68, 103, 185, 252, 367, 382, 397, 412, 462, 466], "recogn": [68, 73, 85, 93, 98, 104, 118, 153, 156, 165, 175, 185, 189, 194, 201, 216, 226, 233, 247, 248, 260, 264, 274, 280, 290, 291, 295, 297, 317, 329, 334, 343, 360, 364, 367, 375, 384, 392, 393, 414, 433, 434, 459, 460, 468, 473, 474, 475, 476, 481], "doctestfind": [68, 185, 464, 481], "doctestpars": [68, 185], "doctestrunn": [68, 185, 464], "outputcheck": [68, 185, 464], "soapbox": [68, 185], "discoveri": [68, 185, 191, 278, 333, 417, 473, 475, 476, 481], "organ": [68, 84, 95, 99, 100, 101, 104, 185, 191, 339, 424, 430, 463, 480, 481], "subtest": [68, 185, 475, 481], "load_test": [68, 185, 191, 360, 476, 481], "fixtur": [68, 185, 467], "setupclass": [68, 185, 467, 479, 481], "teardownclass": [68, 185, 467, 481], "setupmodul": [68, 185, 467, 479, 481], "teardownmodul": [68, 185, 467, 481], "patcher": [68, 185, 388, 481], "test_prefix": [68, 185], "magicmock": [68, 185, 476, 481], "create_autospec": [68, 185, 481], "filter_dir": [68, 185], "mock_open": [68, 185, 388, 475, 481], "autospecc": [68, 185, 481], "seal": [68, 185, 213, 473, 478, 481], "side_effect": [68, 185, 387, 477, 481], "cope": [68, 185, 464, 481], "2to3": [68, 87, 185, 252, 466, 467, 468, 471, 472, 473, 481], "fixer": [68, 185, 481], "lib2to3": [68, 87, 185, 471, 472, 480, 481], "regress": [68, 78, 85, 185, 191, 252, 260, 341, 467, 475, 476, 479, 481], "socket_help": [68, 185, 252], "script_help": [68, 185, 252, 481], "bytecode_help": [68, 185, 252, 481], "threading_help": [68, 185, 252], "os_help": [68, 185, 252, 481], "import_help": [68, 185, 252, 481], "warnings_help": [68, 185, 252, 481], "introduct": [68, 76, 92, 95, 98, 118, 131, 183, 191, 257, 281, 335, 339, 388, 457, 460, 461, 462, 464, 475, 477, 481], "programmat": [68, 72, 165, 167, 183, 206, 264, 266, 278, 290, 297, 307, 318, 350, 376, 393, 467, 474, 475, 481], "peak": [68, 139, 183, 465, 480], "domainfilt": [68, 183, 477], "snapshot": [68, 183, 255, 340, 475], "statisticdiff": [68, 183], "envbuild": [68, 190, 475, 481], "standalon": [68, 167, 190, 191, 250, 312, 382, 386, 409, 425, 457, 466, 481], "ancillari": [68, 313, 335, 481], "stop_iter": [68, 313], "posix_us": [68, 313, 473, 481], "nt_user": [68, 313, 473], "osx_framework_us": [68, 313], "posix_hom": [68, 313, 473], "posix_prefix": [68, 313, 473, 481], "idiomat": [68, 110, 313, 384, 481], "post": [68, 94, 95, 100, 101, 108, 141, 149, 174, 191, 192, 239, 240, 243, 267, 286, 293, 295, 313, 339, 350, 367, 392, 393, 397, 418, 438, 454, 460, 462, 466, 472, 473, 474, 477, 478, 479, 481], "__enter__": [68, 87, 101, 189, 256, 281, 313, 331, 342, 356, 384, 386, 387, 403, 425, 426, 465, 466, 467, 471, 474, 477, 481], "reusabl": [68, 112, 313, 384, 475], "reentrant": [68, 256, 313, 314, 363, 475, 481], "atexit": [68, 78, 84, 110, 164, 252, 265, 313, 318, 400, 460, 464, 470, 481], "tracebackexcept": [68, 313, 471, 476, 481], "stacksummari": [68, 313, 471, 476, 481], "framesummari": [68, 313, 476, 481], "sitecustom": [68, 313, 352, 436, 467, 475, 481], "usercustom": [68, 313, 352, 436, 475, 481], "codeop": [68, 79, 178, 252, 481], "pkgutil": [68, 252, 278, 465, 466, 470, 471, 472, 474, 477, 478, 481], "modulefind": [68, 252, 278, 481], "runpi": [68, 112, 154, 252, 278, 380, 453, 465, 466, 467, 469, 470, 475, 481], "import_modul": [68, 85, 101, 223, 266, 278, 322, 360, 426, 430, 434, 467, 472, 474, 481], "tabnanni": [68, 86, 154, 252, 262, 460, 481], "ms": [68, 97, 156, 174, 175, 252, 290, 291, 346, 373, 459, 460, 478, 481], "msvcrt": [68, 77, 86, 140, 174, 252, 402, 466, 467, 481], "vc": [68, 174, 252, 402, 481], "hkey_": [68, 402], "sound": [68, 72, 84, 115, 139, 175, 221, 252, 293, 334, 353, 402, 448, 463, 466], "pwd": [68, 171, 221, 227, 231, 252, 291, 292, 337, 346, 389, 420, 463, 480, 481], "termio": [68, 213, 252, 381, 389, 480, 481], "tti": [68, 175, 227, 252, 256, 291, 389, 435, 436, 446, 453, 466, 481], "ioctl": [68, 119, 140, 252, 293, 335, 389, 464, 466, 477, 481], "syslog": [68, 100, 140, 252, 267, 389, 467, 472, 474, 481], "aiff": [68, 151, 204, 252, 334, 348, 448, 481], "solut": [68, 73, 84, 85, 93, 94, 95, 99, 101, 103, 104, 107, 130, 179, 184, 245, 297, 331, 336, 341, 353, 382, 388, 424, 430, 459, 460, 462, 463, 464, 465, 466, 467, 469, 473, 479, 481], "cgitb": [68, 149, 252, 348, 471, 472, 481], "iff": [68, 188, 191, 252, 348], "mailcap": [68, 252, 348, 470, 471, 472, 481], "cab": [68, 465, 481], "precomput": [68, 145, 481], "nis": [68, 231, 252, 348, 465, 471, 472, 481], "sun": [68, 107, 139, 148, 181, 243, 247, 252, 272, 293, 341, 348, 364, 406, 424, 471, 481], "yellow": [68, 92, 94, 145, 158, 175, 252, 348, 382, 450, 464, 472], "terminolog": [68, 98, 199, 243, 364, 374, 408, 461, 462, 465, 466], "conflict": [68, 73, 101, 104, 108, 118, 165, 211, 228, 239, 350, 382, 384, 403, 411, 424, 453, 459, 473, 475, 478, 481], "ossaudiodev": [68, 252, 348, 463, 471, 472, 476, 481], "oss": [68, 252, 346, 348, 463, 474, 481], "audio": [68, 115, 139, 151, 204, 334, 360, 404, 460, 481], "mixer": 68, "spwd": [68, 231, 252, 308, 348, 465, 471, 472, 477, 481], "shadow": [68, 85, 86, 171, 231, 252, 253, 308, 348, 356, 448, 465, 475, 480, 481], "au": [68, 204, 252, 293, 334, 339, 348, 448], "au_read": 68, "au_writ": [68, 475], "telnet": [68, 140, 168, 252, 348, 392, 466, 477, 481], "xdrlib": [68, 119, 252, 348, 471, 472, 481], "uuencod": [68, 141, 144, 156, 252, 348], "xdr": [68, 119, 252, 297, 348], "intermezzo": [68, 74], "ice": [68, 282], "setuptool": [68, 74, 76, 77, 249, 300, 305, 353, 397, 451, 459, 467, 470, 472, 475, 477, 481], "app": [68, 74, 101, 245, 267, 350, 367, 397, 405, 459, 466, 467, 473, 481], "pure": [68, 74, 84, 85, 95, 99, 101, 103, 167, 174, 181, 184, 221, 223, 228, 233, 259, 294, 306, 331, 350, 353, 354, 360, 425, 426, 440, 453, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 479, 481], "caution": [68, 73, 85, 126, 188, 266, 290, 291, 294, 346, 411, 465, 481], "tss": [68, 478, 481], "arena": [68, 429, 453, 465, 480, 481], "transit": [68, 94, 98, 99, 108, 181, 224, 259, 266, 328, 336, 393, 423, 428, 462, 464, 465, 467, 474, 481], "howto": [68, 85, 92, 96, 104, 118, 338, 417, 460, 462, 467, 468, 473, 481], "primer": 68, "thought": [68, 95, 99, 281, 460, 462, 463, 468, 476], "technic": [68, 95, 110, 165, 181, 189, 211, 250, 260, 290, 291, 317, 342, 398, 425, 430, 457, 459, 460, 467, 478, 481], "super": [68, 85, 87, 94, 101, 104, 114, 118, 130, 158, 167, 179, 189, 201, 211, 223, 248, 281, 294, 297, 310, 320, 367, 380, 382, 388, 393, 397, 400, 426, 438, 448, 462, 466, 468, 470, 472, 475, 477, 481], "orm": 68, "intenum": [68, 209, 239, 331, 335, 339, 342, 477, 481], "strenum": [68, 209, 239, 470, 471, 481], "intflag": [68, 209, 253, 317, 339, 342, 477, 481], "_private__nam": 68, "minutia": 68, "aka": [68, 191, 353, 420, 426, 459, 478, 481], "orderedenum": 68, "duplicatefreeenum": 68, "planet": [68, 341, 465], "timeperiod": [68, 209], "enumtyp": [68, 209, 471], "provabl": [68, 459, 481], "modular": [68, 84, 100, 171, 223, 474, 479, 481], "combinator": [68, 259, 316, 469, 479], "acknowledg": [68, 134, 165, 176, 356, 424], "flow": [68, 73, 95, 128, 131, 175, 176, 184, 346, 351, 357, 384, 425, 427, 428, 460, 462, 463, 465, 466, 476, 481], "destin": [68, 100, 107, 175, 187, 206, 210, 240, 265, 266, 267, 269, 276, 290, 291, 330, 335, 342, 354, 356, 397, 464, 466, 470, 471, 472, 474, 475, 479, 480, 481], "contextu": [68, 188, 265], "impart": [68, 265], "deploy": [68, 84, 100, 141, 200, 291, 346, 367, 423, 457, 459, 473, 479, 480, 481], "gunicorn": 68, "uwsgi": [68, 346], "rotat": [68, 100, 158, 184, 267, 382, 464, 466, 467, 481], "zeromq": 68, "namer": [68, 267, 481], "elabor": [68, 104, 424, 433, 460, 463, 481], "dictconfig": [68, 100, 266, 267, 467, 473, 481], "throughout": [68, 73, 93, 100, 110, 184, 248, 432, 460, 462, 463, 465, 466, 467, 473, 476, 481], "gmt": [68, 100, 181, 207, 243, 265, 339, 364], "cli": [68, 232, 249, 338, 360, 453, 475, 478, 481], "starter": 68, "qt": [68, 457], "rfc5424": 68, "backslash": [68, 156, 157, 191, 207, 223, 245, 256, 281, 291, 317, 346, 433, 444, 463, 464, 468, 472, 477, 478, 481], "plagu": [68, 475], "metacharact": [68, 270, 317, 346, 464], "lookahead": [68, 317, 425, 429, 464], "greedi": [68, 156, 317, 357], "feedback": [68, 228, 382, 424, 464], "ipc": [68, 121, 128, 131, 255, 335], "undecor": [68, 101, 224, 342], "urlerror": [68, 391, 393, 466, 481], "httperror": [68, 224, 391, 393, 475, 481], "geturl": [68, 240, 392, 393, 481], "tapset": 68, "__annotations__": [68, 87, 93, 179, 189, 223, 224, 253, 384, 425, 426, 434, 439, 468, 470, 473, 475, 476, 477, 479, 480, 481], "opt": [68, 72, 165, 188, 226, 248, 290, 297, 304, 336, 430, 448, 453, 454, 463, 466, 467, 472, 473, 475, 476, 478, 481], "lossless": [68, 184, 188, 376, 426, 472, 473, 481], "__builtin_new": 68, "__pure_virtu": 68, "pyd": [68, 71, 84, 267, 352, 421, 465, 473, 476, 479, 481], "keypress": [68, 92, 280, 466], "l1": [68, 84, 156, 374], "psf": [68, 80, 294], "beopen": [68, 69], "cnri": [68, 460], "cwi": [68, 80, 238, 335, 392], "bsd": [68, 84, 92, 105, 131, 175, 213, 320, 326, 331, 335, 340, 364, 436, 454, 460, 462, 466, 475, 481], "mersenn": [68, 316, 463], "twister": [68, 316, 463], "uudecod": 68, "test_epol": [68, 481], "siphash24": [68, 454, 471, 481], "strtod": 68, "dtoa": [68, 454, 467, 481], "libffi": [68, 467, 471, 478, 481], "cfuhash": 68, "libmpdec": [68, 184, 454, 474, 481], "w3c": [68, 108, 238, 240, 393, 408, 409, 413, 426, 461, 470, 477, 478, 479, 480, 481], "c14n": [68, 411, 479, 481], "2001": [69, 98, 101, 207, 257, 330, 356, 364, 411, 420, 424, 461, 462, 463, 466, 473, 479, 481], "2023": [69, 101, 424, 472, 481], "foundat": [69, 80, 95, 167, 339, 367, 424, 459, 463, 464, 466, 474], "2000": [69, 85, 100, 148, 156, 221, 267, 282, 364, 382, 424, 439, 442, 460, 463, 466, 473, 474, 475, 481], "corpor": [69, 424], "nation": [69, 424], "research": [69, 95, 424, 481], "project": [70, 75, 76, 77, 84, 86, 91, 101, 103, 110, 149, 165, 181, 191, 221, 228, 233, 248, 249, 259, 290, 305, 312, 384, 386, 387, 397, 419, 420, 423, 424, 432, 454, 457, 459, 460, 463, 466, 467, 468, 471, 472, 473, 474, 475, 477, 480, 481], "pyinitu_": 71, "punycod": [71, 156, 463, 481], "hyphen": [71, 118, 156, 226, 290, 317, 362, 384, 396, 453, 459, 463, 481], "initfunc_nam": 71, "u_": 71, "newer": [71, 75, 100, 103, 115, 191, 241, 245, 255, 266, 267, 286, 291, 295, 297, 310, 312, 326, 338, 342, 364, 367, 384, 406, 420, 454, 457, 459, 472, 475, 476, 477, 478, 479, 480, 481], "readthedoc": [71, 249, 405, 465], "en": [71, 95, 107, 108, 158, 228, 233, 238, 286, 393, 458, 459, 465, 473, 474, 481], "latest": [71, 85, 149, 181, 184, 224, 245, 397, 420, 459, 465, 467, 469, 472, 473, 474, 475, 477, 481], "learn": [71, 73, 75, 77, 79, 84, 87, 92, 93, 95, 103, 104, 107, 149, 174, 184, 191, 245, 273, 297, 329, 338, 367, 382, 409, 462, 463, 465, 466, 467, 473, 477, 478, 481], "enrich": [72, 481], "tailor": [72, 244, 338, 342, 360, 472], "occasion": [72, 84, 101, 118, 167, 175, 184, 188, 199, 203, 228, 245, 269, 273, 290, 291, 363, 434, 460, 465, 466, 473, 481], "identif": [72, 135, 281, 344, 363, 481], "great": [72, 94, 100, 189, 241, 317, 346, 387, 400, 460, 461, 462, 463, 465, 466, 467, 468, 472, 474, 476, 479, 481], "fprintf": [72, 73], "ctime": [72, 181, 291, 292, 340, 364, 463], "today": [72, 94, 107, 165, 181, 209, 286, 293, 338, 388, 417, 433, 449, 461, 463, 464, 466, 479], "troubl": [72, 98, 108, 211, 459, 464], "piec": [72, 87, 95, 104, 131, 139, 144, 149, 167, 177, 188, 189, 191, 200, 241, 268, 290, 339, 356, 367, 384, 412, 427, 433, 462, 465, 475, 480, 481], "cumbersom": [72, 99, 184, 367], "say": [72, 73, 75, 77, 85, 93, 98, 101, 103, 104, 107, 131, 137, 181, 191, 200, 224, 228, 241, 245, 249, 264, 265, 266, 267, 269, 281, 346, 353, 393, 411, 419, 426, 430, 432, 444, 461, 462, 463, 465, 466, 467, 471, 473, 475, 481], "cost": [72, 85, 165, 181, 186, 188, 224, 233, 241, 248, 291, 342, 365, 367, 379, 388, 420, 426, 460, 463, 466, 467, 471, 475, 481], "despit": [72, 85, 101, 233, 260, 294, 323, 346, 384, 430, 466, 481], "accommod": [72, 101, 199, 248, 367, 464, 481], "vice": [72, 84, 139, 174, 248, 265, 291, 317, 342, 374, 378, 384, 411, 466, 472, 475, 481], "versa": [72, 84, 139, 174, 248, 265, 291, 317, 342, 374, 378, 384, 411, 466, 472, 475, 481], "understood": [72, 149, 241, 266, 281, 291, 295, 329, 342, 395, 419, 424, 426, 481], "pname": 72, "pmodul": [72, 73, 481], "parg": 72, "pythonfil": 72, "atoi": [72, 264], "proceed": [72, 76, 108, 184, 193, 203, 259, 269, 281, 291, 306, 339, 363, 371, 425, 428, 481], "subroutin": [72, 87, 95, 465], "glue": [72, 462, 464], "numarg": 72, "emb_numarg": 72, "embmethod": 72, "embmodul": 72, "pyinit_emb": 72, "recompil": [72, 79, 161, 248, 460, 463, 467, 473, 476, 477], "cflag": [72, 102, 304, 359, 454, 463, 481], "wsign": 72, "dndebug": 72, "fwrapv": 72, "wall": [72, 181, 306, 466, 472, 481], "ldflag": [72, 454, 463, 481], "x86_64": [72, 353, 454, 476, 479, 481], "lpython3": [72, 479, 481], "lpthread": 72, "ldl": 72, "lutil": 72, "lm": [72, 342, 433], "welcom": [72, 92, 153, 281, 286, 382, 424, 465, 473, 481], "get_makefile_filenam": [72, 353], "get_config_var": [72, 291, 353, 423, 467, 473, 475, 481], "linkforshar": [72, 481], "xlinker": 72, "incorpor": [73, 100, 104, 184, 265, 339, 392, 411, 424, 463, 465, 466, 467, 473, 479, 481], "cffi": [73, 74, 91, 184, 481], "favorit": [73, 107, 440], "food": [73, 87, 297, 444], "monti": [73, 165, 191, 223, 260, 291, 294, 338, 341, 342, 356, 420, 437, 452, 464, 466, 473], "fan": 73, "ls": [73, 89, 101, 135, 175, 329, 346, 356, 357, 476], "spammodul": 73, "spammifi": 73, "notic": [73, 76, 99, 100, 101, 104, 108, 110, 130, 131, 156, 165, 171, 182, 184, 200, 216, 248, 256, 267, 281, 330, 335, 338, 353, 360, 367, 382, 384, 424, 426, 428, 459, 461, 463, 467, 473, 474, 478, 479, 481], "spam_system": 73, "sts": [73, 84, 346, 464], "saw": 73, "predefin": [73, 85, 100, 104, 110, 153, 156, 174, 175, 245, 265, 279, 343, 367, 371, 401, 403, 426, 481], "pyerr_": 73, "fine": [73, 78, 84, 85, 99, 101, 107, 108, 165, 174, 175, 191, 199, 224, 241, 290, 291, 316, 331, 339, 350, 367, 384, 387, 393, 426, 459, 460, 461, 463, 465, 472, 481], "lost": [73, 94, 100, 101, 107, 131, 175, 181, 184, 199, 224, 245, 260, 265, 267, 281, 306, 330, 331, 333, 336, 424, 425, 442, 460, 462, 473, 474, 475, 480, 481], "pretend": [73, 103, 105, 175, 426, 462, 479], "went": [73, 142, 211, 293, 333, 411, 460, 462, 465, 466, 480], "predeclar": 73, "cours": [73, 76, 94, 95, 100, 101, 174, 184, 191, 198, 200, 205, 233, 265, 266, 281, 290, 291, 329, 336, 339, 367, 382, 387, 408, 417, 424, 426, 453, 460, 461, 463, 468, 473, 474, 475], "choos": [73, 75, 85, 89, 95, 101, 103, 104, 107, 118, 156, 161, 191, 203, 223, 224, 233, 243, 248, 265, 273, 290, 293, 297, 306, 316, 338, 339, 345, 350, 351, 363, 367, 373, 411, 424, 430, 457, 459, 462, 463, 467, 473, 474, 475, 478, 481], "wise": [73, 94, 179, 184, 266, 462, 478], "couldn": [73, 104, 108, 188, 256, 291, 331, 338, 384, 388, 421, 461, 462, 465, 467, 472, 477, 481], "satisfi": [73, 108, 179, 219, 232, 253, 256, 266, 273, 363, 426, 430, 473], "spamerror": 73, "retain": [73, 118, 165, 167, 175, 184, 188, 194, 203, 206, 211, 245, 248, 253, 259, 265, 269, 291, 329, 338, 339, 382, 392, 417, 424, 426, 428, 433, 474, 475, 477, 479, 481], "unintend": [73, 85, 184, 281, 356, 471, 481], "sampl": [73, 75, 84, 93, 94, 95, 101, 102, 104, 115, 139, 153, 173, 174, 191, 245, 277, 293, 297, 305, 306, 316, 317, 334, 341, 347, 356, 365, 374, 393, 399, 411, 425, 439, 449, 459, 461, 462, 463, 466, 467, 471, 473, 475, 477, 478, 479, 481], "going": [73, 75, 76, 79, 84, 93, 95, 103, 104, 115, 124, 135, 142, 149, 184, 194, 198, 277, 290, 291, 306, 332, 339, 356, 360, 363, 387, 388, 405, 411, 417, 426, 459, 460, 462, 466, 481], "got": [73, 108, 124, 134, 136, 191, 265, 281, 333, 338, 384, 393, 428, 439, 447, 453, 465, 469, 472, 479, 481], "genuin": [73, 191, 213, 467, 473], "seen": [73, 75, 84, 85, 94, 95, 101, 153, 189, 228, 233, 253, 259, 267, 269, 290, 303, 329, 351, 367, 398, 400, 411, 413, 453, 463, 466, 469, 472, 475, 478, 481], "promis": [73, 94, 253, 473, 481], "spammethod": 73, "obsolet": [73, 92, 149, 211, 241, 260, 265, 312, 342, 364, 387, 398, 401, 406, 417, 460, 461, 462, 465, 467, 472, 473, 475, 476, 477, 481], "spam_doc": 73, "pyinit_nam": 73, "satisfactorili": 73, "pyimport_inittab": [73, 481], "interven": [73, 101, 188, 191, 202, 474], "exercis": [73, 84, 100, 101, 158, 185, 265, 290, 306, 360, 424, 466, 481], "substanti": [73, 241, 259, 312, 408, 424, 462, 464, 469, 473, 474, 475, 477, 481], "xxmodul": 73, "perman": [73, 108, 246, 393, 450, 459, 476, 480, 481], "rebuild": [73, 161, 473, 481], "luckili": [73, 386], "toplevel": [73, 158, 184, 223, 367, 373, 374, 411, 481], "subdirectori": [73, 76, 84, 85, 101, 161, 198, 214, 245, 248, 250, 251, 269, 291, 294, 300, 332, 353, 378, 386, 397, 419, 420, 421, 459, 460, 461, 463, 466, 467, 476, 478, 479, 480, 481], "lx11": 73, "far": [73, 76, 85, 104, 167, 181, 184, 188, 233, 241, 256, 273, 281, 290, 291, 317, 329, 330, 336, 357, 364, 373, 386, 393, 432, 460, 461, 462, 463, 464, 466, 481], "concentr": [73, 104, 108, 233, 367, 466], "imagin": [73, 104, 112, 297, 382, 387, 388], "fortun": [73, 76, 92, 149, 468], "dwell": 73, "somehow": [73, 281, 356, 466, 467], "wherev": [73, 79, 92, 94, 101, 104, 107, 175, 245, 367, 395, 424, 462, 465], "my_callback": [73, 75, 290], "my_set_callback": 73, "temp": [73, 281, 328, 338, 358, 409, 419, 428, 454, 459, 481], "set_callback": 73, "dispos": [73, 386, 397], "rememb": [73, 85, 92, 95, 100, 101, 104, 157, 191, 245, 259, 281, 317, 338, 360, 367, 374, 393, 400, 408, 410, 434, 439, 457, 459, 460, 461, 465, 466, 467, 469, 473, 474], "boilerpl": [73, 76, 99, 287, 360, 430, 476, 481], "arglist": 73, "eventcod": 73, "placement": [73, 144, 367, 411, 472, 481], "overwrit": [73, 100, 101, 110, 147, 161, 175, 179, 194, 198, 203, 256, 265, 267, 268, 291, 318, 328, 342, 356, 393, 419, 420, 425, 426, 439, 459, 463, 466, 467, 469, 472, 473, 474, 475, 481], "whoop": [73, 101], "lls": 73, "ii": [73, 79, 158, 174, 339, 424, 425], "si": [73, 176, 346], "wb": [73, 87, 101, 115, 118, 147, 198, 206, 221, 232, 268, 276, 297, 307, 318, 347, 384, 395, 399, 417, 419, 420, 460, 469, 473], "100000": [73, 223, 306, 365, 380, 463], "bottom": [73, 84, 95, 99, 118, 174, 175, 177, 189, 256, 265, 291, 294, 295, 367, 374, 382, 384, 387, 426, 433, 459, 460, 462, 463, 481], "rectangl": [73, 92, 175, 179], "400": [73, 101, 108, 115, 153, 221, 239, 281, 286, 333, 367, 382, 439, 450, 470], "300": [73, 92, 101, 108, 153, 239, 245, 382, 393, 425, 450, 473, 481], "myfunct": [73, 79, 167], "2j": [73, 97, 223, 260, 481], "kwlist": [73, 76, 188, 261], "geoff": [73, 481], "philbrick": 73, "hks": 73, "keywdarg_parrot": 73, "keywd": 73, "voltag": [73, 223, 439], "stiff": [73, 439], "voom": [73, 439], "norwegian": [73, 156, 439], "blue": [73, 92, 94, 101, 104, 106, 145, 153, 158, 175, 209, 259, 316, 341, 342, 367, 374, 382, 400, 439, 440, 450, 463, 464, 469, 470, 472, 473, 477, 481], "sss": [73, 75, 181], "parrot": [73, 223, 240, 305, 439, 466], "wouldn": [73, 84, 103, 104, 265, 330, 360, 386, 387, 425, 439, 460, 461, 462, 463, 464, 466, 481], "volt": [73, 439], "love": [73, 101, 145, 173, 242, 439, 469, 475], "keywdarg_method": 73, "skit": [73, 191], "keywdargmodul": 73, "keywdarg": 73, "pyinit_keywdarg": 73, "counterpart": [73, 101, 175, 189, 223, 259, 265, 286, 335, 342, 359, 425, 467, 469, 471, 473, 478, 481], "iii": [73, 424], "789": [73, 184, 466], "ss": [73, 107, 181, 246, 342, 364, 470, 474], "hell": 73, "forgotten": [73, 107, 123], "occupi": [73, 107, 115, 281, 320, 374, 475], "reus": [73, 76, 80, 124, 126, 136, 156, 164, 167, 174, 182, 191, 212, 224, 248, 291, 317, 335, 336, 339, 345, 356, 360, 362, 363, 400, 425, 430, 433, 465, 472, 473, 477, 478, 479, 480, 481], "unusu": [73, 92, 101, 181, 211, 248, 293, 306, 320, 346, 353, 392, 428, 477, 478, 479, 480, 481], "prematur": [73, 100, 240, 269, 468, 481], "undetect": [73, 269, 363], "modern": [73, 103, 124, 137, 141, 175, 176, 192, 233, 256, 330, 335, 356, 367, 404, 460, 464, 466, 467, 473, 474, 477, 478, 479, 480, 481], "plenti": 73, "appar": [73, 92, 149, 331, 406, 460, 464, 481], "heavi": [73, 108, 165, 467, 474, 478, 481], "principl": [73, 85, 184, 387, 457, 474], "somewher": [73, 84, 85, 101, 243, 245, 290, 300, 312, 342, 408, 439, 459, 466, 470], "sometim": [73, 79, 84, 85, 92, 93, 94, 95, 98, 99, 101, 103, 104, 107, 108, 110, 118, 133, 137, 149, 156, 165, 167, 174, 175, 184, 186, 188, 191, 201, 211, 223, 224, 233, 245, 253, 257, 259, 266, 269, 286, 290, 291, 297, 306, 317, 339, 340, 364, 367, 382, 384, 387, 388, 393, 411, 426, 428, 432, 434, 460, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 480, 481], "claim": [73, 103, 188, 197, 339, 392, 424, 481], "disadvantag": [73, 76, 84, 85, 104, 130, 156, 184, 339, 462, 469], "worri": [73, 75, 92, 100, 103, 107, 149, 181, 192, 290, 317, 345, 386, 462, 467, 474], "reclaim": [73, 75, 248, 384, 400], "term": [73, 93, 95, 103, 137, 175, 184, 207, 211, 219, 233, 241, 248, 260, 265, 290, 297, 306, 342, 343, 360, 364, 367, 383, 397, 400, 412, 424, 425, 429, 430, 464, 466, 467, 469, 472, 474, 475, 477, 479, 481], "nobodi": [73, 149, 233, 243, 333, 481], "owner": [73, 93, 97, 101, 179, 210, 281, 291, 294, 330, 340, 356, 424, 426, 450, 477, 481], "seem": [73, 76, 79, 95, 100, 104, 118, 191, 214, 269, 277, 291, 306, 338, 428, 430, 460, 461, 462, 463, 465, 481], "popular": [73, 93, 101, 188, 191, 224, 246, 269, 345, 378, 432, 459, 473, 474, 479], "pictur": [73, 165, 198, 462, 464], "bet": 73, "therebi": [73, 85, 195, 201, 382, 475, 481], "no_bug": 73, "someon": [73, 85, 181, 333, 393, 411, 466, 467, 472, 481], "spent": [73, 137, 306, 320, 331, 465, 466], "his": [73, 84, 228, 433, 460, 462, 466, 467, 475, 477, 481], "redund": [73, 268, 317, 342, 384, 422, 434, 462, 467, 481], "slowli": [73, 101], "ever": [73, 85, 93, 94, 175, 197, 199, 248, 259, 280, 281, 339, 346, 382, 384, 459, 462, 463, 465, 466, 467, 468, 475, 481], "enclos": [73, 87, 104, 158, 175, 223, 240, 246, 253, 260, 286, 295, 317, 329, 360, 363, 384, 386, 408, 425, 427, 428, 432, 433, 434, 438, 447, 461, 462, 465, 471, 472, 473, 479, 481], "__cplusplus": 73, "recent": [73, 76, 84, 85, 89, 93, 94, 95, 98, 99, 101, 107, 112, 118, 123, 130, 142, 149, 158, 165, 167, 174, 184, 186, 191, 209, 212, 223, 224, 232, 245, 246, 253, 257, 265, 267, 281, 282, 291, 293, 294, 295, 297, 305, 312, 317, 333, 335, 338, 339, 342, 343, 345, 346, 350, 360, 373, 379, 380, 382, 385, 386, 387, 388, 392, 398, 400, 420, 425, 426, 427, 428, 434, 438, 439, 440, 441, 444, 447, 450, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "sight": [73, 139], "aix": [73, 113, 291, 304, 350, 363, 479, 480, 481], "unic": [73, 293], "wish": [73, 75, 92, 95, 100, 104, 108, 118, 144, 156, 165, 181, 191, 201, 206, 232, 248, 249, 250, 251, 257, 260, 265, 267, 269, 276, 290, 317, 333, 340, 346, 353, 374, 383, 397, 398, 400, 426, 461, 464, 465, 466, 467, 475, 481], "clash": [73, 94, 101, 174, 245, 265, 266, 269, 428, 433, 466, 476, 479, 480, 481], "publish": [73, 101, 104, 184, 188, 190, 338, 360, 418, 424, 459, 461, 467, 473, 480, 481], "degre": [73, 153, 175, 273, 342, 382, 426, 463, 479, 481], "certainti": [73, 403], "burden": [73, 467, 468, 472, 474, 476], "pyspam_system": 73, "realiti": [73, 181, 290, 335, 393, 425], "plain": [73, 85, 94, 101, 108, 124, 149, 150, 158, 171, 181, 194, 195, 198, 202, 203, 204, 211, 240, 253, 265, 291, 333, 339, 340, 344, 374, 384, 393, 405, 419, 420, 424, 425, 433, 462, 468, 473, 475, 476, 477, 481], "pyspam_api": 73, "pyspam_api_point": 73, "c_api_object": 73, "pyspam_system_num": 73, "_c_api": 73, "disappear": [73, 75, 100, 137, 382, 462, 464, 481], "bulk": [73, 184, 475], "ifndef": [73, 481], "py_spammodule_h": 73, "endif": [73, 238, 317, 454, 470, 471, 479, 480], "pyspam_system_return": 73, "pyspam_system_proto": 73, "import_spam": 73, "pyinit_cli": 73, "clientmodul": 73, "mention": [73, 75, 76, 77, 95, 98, 101, 103, 104, 107, 165, 174, 175, 189, 191, 211, 212, 213, 223, 260, 266, 269, 281, 290, 291, 329, 332, 336, 352, 360, 425, 426, 430, 432, 433, 434, 460, 468, 472, 474, 475, 478, 480, 481], "metaphor": [73, 248, 250, 251, 373], "cython": [74, 78, 79, 85, 91, 475, 481], "swig": [74, 79, 86], "numba": 74, "baggag": 75, "easiest": [75, 76, 79, 84, 85, 118, 184, 191, 241, 245, 290, 291, 387], "dealt": [75, 155, 290], "newdatatype_dealloc": 75, "newdatatypeobject": 75, "obj_underlyingdatatypeptr": 75, "other_obj": 75, "unwound": [75, 265, 317, 426], "mislead": [75, 107, 150, 181, 393, 409, 462, 473, 481], "my_dealloc": [75, 99], "cbresult": 75, "err_typ": 75, "err_valu": 75, "err_traceback": 75, "textual": [75, 76, 85, 103, 107, 118, 174, 199, 265, 286, 312, 317, 342, 356, 374, 408, 409, 428, 434, 438, 462, 477, 481], "newdatatype_repr": 75, "ified_newdatatyp": 75, "human": [75, 100, 101, 107, 115, 188, 189, 196, 228, 241, 243, 265, 286, 297, 301, 331, 333, 340, 347, 350, 375, 385, 412, 428, 451, 462, 469, 474, 475, 481], "consumpt": [75, 253, 297, 320, 330, 350, 473, 474, 481], "newdatatype_str": 75, "stringified_newdatatyp": 75, "sens": [75, 85, 94, 98, 100, 101, 110, 118, 181, 184, 188, 203, 204, 224, 245, 257, 269, 281, 290, 291, 306, 331, 336, 338, 342, 350, 382, 392, 401, 424, 426, 430, 459, 468, 473, 475, 476, 478, 481], "flavor": [75, 191, 233, 259, 291, 340, 342, 425, 428, 454, 481], "newdatatype_getattr": 75, "100s": 75, "400s": 75, "newdatatype_setattr": 75, "newdatatype_richcmp": 75, "obj1": [75, 464], "obj2": [75, 464], "size1": 75, "size2": 75, "newdatatyp": 75, "unfil": [75, 428, 481], "newdatatype_hash": 75, "some_s": 75, "32767": [75, 345], "some_numb": 75, "toy": [75, 297], "newdatatype_cal": 75, "arg3": [75, 85, 97, 114], "slight": [75, 79, 85, 95, 100, 101, 108, 167, 184, 194, 213, 228, 241, 249, 256, 290, 291, 295, 305, 306, 339, 342, 382, 388, 392, 430, 434, 460, 462, 463, 464, 465, 466, 467, 473, 475, 476, 478, 480, 481], "incur": [75, 184, 259, 424, 473], "trivialtyp": 75, "breviti": [75, 290], "trivial_dealloc": 75, "trivialobject": 75, "tp_": 75, "some_object": [75, 85, 253, 387], "mytyp": [75, 290, 471], "myth": 75, "download": [75, 80, 85, 101, 294, 305, 373, 393, 397, 426, 438, 451, 459, 465, 466, 467, 473, 474, 478, 479, 481], "www": [75, 79, 95, 105, 107, 108, 149, 156, 160, 164, 167, 181, 182, 198, 233, 238, 240, 241, 259, 312, 316, 317, 338, 339, 342, 350, 385, 392, 393, 394, 401, 409, 411, 422, 424, 426, 433, 438, 443, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 476, 478, 481], "gentl": [76, 93, 98, 118, 462], "cover": [76, 85, 92, 94, 99, 100, 101, 104, 107, 131, 167, 189, 191, 192, 206, 241, 266, 281, 290, 317, 333, 335, 342, 346, 367, 378, 382, 384, 386, 392, 408, 425, 432, 453, 460, 461, 462, 465, 468, 472, 474, 475, 481], "customobject": 76, "customtyp": 76, "custommodul": 76, "pyinit_custom": 76, "hope": [76, 98, 100, 101, 211, 327, 384, 459, 460, 461, 474, 475, 477, 479], "familiar": [76, 92, 95, 98, 101, 104, 155, 192, 226, 291, 338, 430, 461, 462, 463, 466, 481], "wari": [76, 352], "accid": [76, 118, 466, 467, 468, 479, 481], "ob_fval": 76, "pick": [76, 85, 101, 108, 139, 158, 243, 249, 273, 290, 295, 380, 386, 419, 460, 465, 481], "us": [76, 94, 95, 156, 159, 176, 181, 193, 194, 200, 204, 207, 221, 264, 282, 297, 316, 317, 330, 339, 364, 384, 387, 388, 392, 393, 405, 411, 424, 426, 458, 459, 465, 481], "mycustom": 76, "backend": [76, 156, 175, 182, 338, 350, 360, 388, 454], "build_meta": 76, "pyproject": [76, 377, 481], "ext_modul": [76, 460], "fire": [76, 101, 118, 137, 331, 472, 481], "uninterest": [76, 188], "custom2": 76, "custom_dealloc": 76, "custom_new": 76, "custom_init": 76, "ooi": 76, "custom_memb": 76, "custom_nam": 76, "custom_method": 76, "pyinit_custom2": 76, "midway": 76, "polymorph": [76, 87, 415], "oppos": [76, 92, 104, 124, 155, 199, 206, 245, 335, 393, 430, 466, 476, 481], "ourselv": [76, 94, 384, 481], "anyon": [76, 103, 339, 353, 360, 424, 461, 467, 475], "tempt": [76, 101, 103, 104], "riski": [76, 191, 481], "paranoid": 76, "uui": 76, "custom_getfirst": 76, "custom_setfirst": 76, "custom_getlast": 76, "custom_setlast": 76, "custom_getsett": 76, "custom3": 76, "pyinit_custom3": 76, "aren": [76, 84, 85, 92, 93, 94, 95, 98, 104, 107, 110, 137, 152, 165, 174, 199, 215, 253, 257, 266, 267, 290, 336, 339, 345, 350, 367, 375, 387, 388, 417, 460, 461, 462, 463, 464, 465, 466, 467, 474, 475, 481], "did": [76, 84, 85, 101, 104, 108, 137, 165, 189, 191, 200, 241, 243, 281, 282, 290, 291, 312, 317, 327, 339, 346, 350, 380, 381, 384, 386, 413, 420, 426, 429, 440, 460, 461, 462, 470, 472, 473, 474, 475, 478, 479, 481], "unneed": [76, 409, 467, 475, 480, 481], "some_attribut": [76, 387], "custom_travers": 76, "custom_clear": 76, "custom4": 76, "pyinit_custom4": 76, "subobject": [76, 85], "vret": 76, "autom": [76, 84, 103, 286, 363, 461, 467, 475, 479, 481], "nevertheless": [76, 101, 137, 156, 195, 211, 290, 356, 411, 468], "prone": [76, 149, 181, 191, 297, 306, 342, 472, 476, 481], "micro": [76, 85, 350, 460, 467, 469, 478, 481], "expens": [76, 85, 100, 179, 186, 188, 224, 264, 287, 306, 330, 336, 339, 350, 430, 453, 464, 472, 474, 475, 477, 478, 479, 481], "robust": [76, 137, 149, 182, 253, 306, 331, 400, 467, 473, 475, 476, 481], "reimplement": [76, 386, 462, 475, 476, 477, 478, 481], "difficult": [76, 84, 92, 95, 100, 103, 104, 107, 118, 266, 297, 393, 411, 460, 461, 462, 463, 464, 467, 473, 479, 481], "sublist": [76, 373, 460, 473], "sublistobject": 76, "sublist_incr": 76, "sublist_method": 76, "sublist_init": 76, "sublisttyp": 76, "sublistmodul": 76, "pyinit_sublist": 76, "resembl": [76, 94, 175, 223, 241, 291, 295, 329, 453, 462, 466, 467, 479, 481], "explanatori": [77, 191, 312, 386, 481], "materi": [77, 95, 104, 175, 188, 232, 335, 339, 373, 424, 464, 467, 481], "xy": [77, 259, 332, 353, 384], "studi": [77, 85, 95, 191, 382, 463, 466], "paradigm": [77, 95], "goe": [77, 93, 99, 104, 118, 131, 165, 167, 175, 176, 191, 228, 241, 245, 266, 273, 281, 290, 312, 350, 379, 384, 425, 462, 473, 474], "reassur": 77, "pythonxi": [77, 459, 479], "ni": [77, 305, 392, 444, 465], "cl": [77, 295, 466], "thank": [77, 95, 99, 104, 107, 153, 198, 233, 281, 338, 360, 384, 387, 460, 461, 462, 463, 464, 465, 466, 467, 473, 474, 477, 478, 481], "_declspec": 77, "dllexport": [77, 86], "initspam": 77, "nigetspamdata": 77, "studio": [77, 85, 454, 459, 466, 476, 481], "100k": 77, "rid": [77, 461, 481], "xx": [77, 118, 243, 291, 317, 328, 392, 459, 481], "guido": [78, 80, 85, 87, 93, 188, 277, 342, 384, 424, 440, 448, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481], "van": [78, 80, 85, 87, 158, 181, 421, 424, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481], "rossum": [78, 80, 85, 87, 421, 424, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481], "20": [78, 85, 89, 92, 93, 95, 97, 100, 101, 104, 107, 132, 137, 148, 153, 174, 179, 181, 184, 191, 207, 209, 219, 233, 234, 245, 253, 257, 259, 265, 281, 291, 294, 306, 316, 317, 319, 320, 335, 339, 341, 342, 350, 356, 364, 365, 382, 384, 392, 394, 424, 433, 438, 447, 449, 453, 454, 460, 464, 465, 466, 467, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481], "30": [78, 84, 85, 92, 93, 95, 97, 100, 101, 124, 134, 148, 153, 158, 181, 184, 191, 234, 257, 259, 265, 267, 291, 314, 316, 319, 335, 341, 342, 343, 360, 363, 364, 365, 382, 421, 438, 439, 449, 450, 454, 463, 464, 465, 467, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481], "19999999999999996": 78, "0011001100110011001100110011001100110011001100110011": 78, "1999999999999999555910790149937383830547332763671875": 78, "eight": [78, 107, 175, 257, 353, 367, 433, 460, 463, 464, 479, 481], "modula": [78, 80, 272, 438], "m_": 78, "baseclass": 78, "methodnam": [78, 281, 386, 417, 438, 439], "200": [78, 85, 108, 153, 175, 184, 188, 221, 239, 240, 243, 335, 339, 342, 367, 382, 386, 393, 405, 425, 444, 450, 463, 477, 479, 481], "572": [78, 425, 428, 472, 479, 481], "mail": [78, 80, 84, 95, 99, 101, 103, 104, 141, 192, 193, 194, 196, 198, 200, 203, 215, 246, 267, 269, 270, 286, 291, 333, 339, 354, 386, 424, 450, 452, 457, 460, 461, 462, 463, 464, 465, 466, 473, 476, 481], "pipermail": [78, 452, 461, 463], "3000": [78, 87, 111, 383, 384, 425, 426, 466, 468], "2006": [78, 95, 181, 265, 312, 409, 411, 420, 424, 465, 480], "novemb": [78, 148, 181, 433, 481], "004643": 78, "mydict": [78, 85, 384, 464], "getvalu": [78, 79, 85, 149, 167, 194, 232, 256, 260, 297, 306, 360, 387, 414, 419, 473, 476], "elif": [78, 85, 89, 92, 95, 101, 108, 120, 181, 188, 198, 226, 248, 287, 317, 338, 340, 342, 350, 356, 425, 426, 429, 430, 433, 439, 465, 474, 481], "function_1": [78, 97], "function_2": [78, 97], "method_1": 78, "myvisitor": 78, "visit_a": 78, "method_nam": [78, 79], "visit_": [78, 120], "stackless": [78, 432], "nuitka": [78, 85], "jython": [78, 84, 87, 94, 301, 360, 405, 432, 447, 453, 461, 464, 466, 472, 473, 475, 481], "pypi": [78, 84, 89, 100, 103, 149, 186, 301, 305, 339, 350, 387, 397, 407, 423, 432, 447, 452, 457, 463, 465, 467, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481], "very_long_list_of_fil": 78, "boehm": 78, "purifi": [78, 454], "pascal": [78, 80, 85, 95, 345, 438, 439, 440, 463, 467], "listdir": [78, 93, 107, 140, 198, 211, 218, 228, 243, 291, 294, 330, 340, 397, 463, 464, 467, 468, 474, 478, 481], "lisp": [78, 85, 95, 462], "539294296": 78, "1142331976": 78, "listwrapp": 78, "the_list": 78, "98767": 78, "555": 78, "el": [78, 141, 357, 392, 411, 429], "9999999": 78, "1001": [78, 156, 343], "7777777": 78, "333": [78, 85, 440, 442, 465], "mutablemap": [78, 87, 159, 165, 182, 328, 342, 384, 426, 466, 468, 474], "stub": [78, 153, 255, 256, 291, 350, 384, 387, 481], "driven": [78, 85, 167, 274, 367, 382, 386, 408, 410, 460, 473, 481], "1970": [78, 80, 145, 148, 181, 337, 364, 481], "spaghetti": 78, "mydir": 78, "delphi": 78, "21": [78, 95, 97, 101, 107, 148, 181, 184, 188, 201, 221, 224, 233, 234, 317, 339, 341, 364, 376, 380, 439, 447, 448, 453, 462, 463, 465, 466, 473, 474, 477, 479, 480, 481], "42": [78, 85, 94, 100, 118, 120, 123, 127, 137, 158, 167, 168, 174, 184, 191, 223, 224, 253, 266, 281, 282, 290, 294, 295, 316, 341, 342, 343, 365, 379, 382, 384, 386, 387, 418, 425, 427, 438, 439, 444, 447, 464, 465, 466, 473, 474, 477, 479, 480, 481], "63": [78, 316, 338, 350, 481], "idea": [78, 79, 84, 85, 92, 93, 94, 99, 100, 101, 118, 181, 188, 191, 259, 264, 293, 305, 353, 374, 382, 426, 460, 462, 463, 464, 467, 468, 469, 473, 477, 481], "2016": [78, 181, 339, 444, 451, 459, 477, 478, 481], "040070": 78, "fee": [78, 223, 424], "fie": 78, "fum": [78, 223], "fiefoo": 78, "pyrex": 79, "sip": [79, 392], "cxx": [79, 353, 454, 481], "weav": 79, "pythonrun": [79, 465, 481], "al": [79, 95, 179, 335, 339, 344, 374, 466, 477, 481], "pymap": 79, "arg_format": 79, "seek": [79, 84, 85, 107, 115, 147, 151, 173, 210, 213, 216, 256, 276, 291, 297, 338, 356, 358, 360, 420, 422, 444, 460, 466, 469, 481], "print_error": [79, 473], "stringio": [79, 85, 87, 167, 194, 205, 256, 260, 306, 342, 350, 360, 387, 405, 409, 466, 467, 468, 473, 475, 476, 481], "stdoutcatch": 79, "textiobas": [79, 223, 240, 256, 358, 367, 426, 466, 467, 468, 471, 481], "attrnam": [79, 265, 408], "realiz": [79, 103, 206, 295, 465, 466, 481], "ugli": [79, 112, 188, 367, 460, 463], "hackeri": 79, "worth": [79, 101, 115, 147, 191, 259, 266, 267, 281, 382, 432, 433, 457, 460, 461, 462, 465, 476, 481], "gdb": [79, 85, 467, 481], "gdbinit": [79, 467, 481], "br": [79, 175, 433, 468, 469, 473, 474, 481], "_pyimport_loaddynamicmodul": 79, "myscript": [79, 295, 306, 436, 453], "50": [79, 84, 85, 95, 100, 101, 103, 137, 153, 158, 181, 184, 245, 265, 277, 306, 316, 317, 335, 341, 350, 364, 365, 374, 382, 386, 388, 410, 411, 424, 447, 448, 449, 466, 467, 471, 473, 476, 477, 478, 479, 480, 481], "python2": [79, 109, 110, 342, 353, 419, 459, 461, 466, 475, 481], "red": [79, 80, 92, 94, 100, 101, 104, 106, 145, 148, 158, 175, 209, 228, 238, 259, 316, 341, 342, 367, 374, 382, 400, 424, 439, 450, 463, 464, 469, 470, 471, 472, 477, 481], "hat": [79, 80, 228, 424, 449], "devel": [79, 97, 286, 481], "rpm": [79, 460, 463], "debian": [79, 221, 458, 460, 461, 478, 481], "apt": [79, 97, 477, 481], "tripl": [79, 87, 104, 107, 175, 188, 286, 291, 294, 317, 326, 342, 362, 382, 425, 426, 433, 472, 481], "myreadlin": 79, "relink": 79, "linkcc": [79, 454], "bpl": 79, "amoeba": 80, "bourn": [80, 299], "1989": [80, 181, 466], "usenet": [80, 84, 100], "imap": [80, 110, 192, 246, 281, 303, 392, 463, 464, 479, 481], "bugfix": [80, 89, 460, 461, 462, 463, 465, 466, 467, 469, 472, 473, 475, 476, 477, 478, 479, 480, 481], "bn": 80, "rcn": [80, 93], "0an": 80, "0bn": 80, "0rcn": 80, "a0": 80, "4a0": 80, "pdf": [80, 100, 107, 233, 316, 341, 350, 479, 481], "newsgroup": [80, 286, 464], "comp": [80, 84, 85, 100, 147, 286, 452, 461, 462, 465, 474, 475], "lang": [80, 84, 85, 100, 107, 228, 264, 338, 393, 452, 461, 462, 463, 465, 468], "communiti": [80, 85, 245, 457, 460, 461, 465, 466, 473, 478], "rss": [80, 462], "git": [80, 141, 346, 397, 475, 479, 481], "jelk": 80, "boer": 80, "283": [80, 181], "303": [80, 108, 239, 393], "wiki": [80, 81, 84, 85, 95, 158, 233, 338, 339, 350, 366, 457, 464, 465, 467, 473, 474, 481], "moin": [80, 84, 457, 464], "pythonbook": 80, "bbc": [80, 164, 437, 476], "18": [80, 89, 95, 97, 107, 148, 181, 184, 191, 221, 224, 234, 294, 316, 317, 330, 339, 341, 342, 345, 350, 374, 444, 449, 463, 464, 467, 470, 471, 472, 473, 478, 479, 480, 481], "602": [80, 480], "mailman": [80, 462, 464, 471, 480, 481], "zope": [80, 424, 461, 462, 473], "googl": [80, 83, 84, 100, 108, 401, 417, 465, 466, 467, 472, 474, 479, 481], "yahoo": [80, 182, 465, 466], "lucasfilm": 80, "ltd": [80, 339, 424], "propos": [80, 87, 151, 173, 224, 265, 339, 342, 346, 400, 408, 425, 428, 430, 433, 434, 460, 461, 463, 464, 465, 466, 467, 473, 477, 479, 481], "pygam": 80, "__dir__": [80, 94, 209, 223, 253, 387, 426, 466, 475, 478, 481], "__format__": [80, 181, 209, 219, 223, 257, 343, 387, 426, 433, 466, 467, 471, 474, 475, 478, 481], "__reduce__": [80, 209, 297, 387, 465, 479, 481], "__reduce_ex__": [80, 94, 297, 387, 481], "__reversed__": [80, 87, 158, 159, 209, 223, 387, 426, 477], "__sizeof__": [80, 350, 387, 466, 481], "__subclasshook__": [80, 114, 159, 481], "__": [80, 85, 101, 287, 360, 433], "emac": [80, 86, 92, 107, 153, 175, 269, 329, 433, 466], "edu": [80, 95, 393, 424, 462, 463, 481], "sig": [80, 99, 107, 109, 124, 140, 156, 233, 253, 291, 331, 376, 457, 460, 461, 463, 467, 476], "tcl_librari": 81, "tk_librari": 81, "sam": [81, 292, 424, 460, 471, 481], "sourceforg": [81, 181, 424, 460, 461, 463, 466, 481], "tkappinit": 81, "tclsam_init": 81, "libtclsam": 81, "libtksam": 81, "xt": [81, 147, 232, 268], "xtaddinput": 81, "mainloop": [81, 245, 367, 374, 382, 481], "focus": [81, 85, 99, 108, 181, 187, 206, 245, 356, 367, 374, 382, 392, 465, 467, 472, 473, 474, 475, 477, 481], "takefocus": [81, 374], "hp": [83, 464, 481], "compaq": 83, "engin": [84, 95, 98, 104, 184, 264, 317, 338, 367, 374, 411, 413, 460, 462, 464, 466, 467, 476, 481], "mathmodul": 84, "sl": [84, 282, 481], "builtin_module_nam": [84, 248, 350, 448], "chmod": [84, 101, 140, 149, 291, 294, 330, 340, 356, 436, 458, 470, 474, 481], "scriptfil": 84, "755": [84, 101], "env": [84, 101, 107, 140, 165, 198, 291, 294, 342, 346, 393, 397, 419, 436, 446, 451, 453, 458, 459, 463, 464, 471, 479, 481], "alex": [84, 463, 466, 467, 470, 471, 472, 476, 477, 479, 480, 481], "rezinski": 84, "ncurs": [84, 92, 175, 460, 461, 464, 470, 479, 481], "sysv": [84, 460, 461], "colour": [84, 92, 104, 120, 460, 481], "mous": [84, 92, 175, 346, 369, 374, 382, 460, 466, 481], "ose": [84, 256, 335, 460, 478, 481], "fancier": [84, 118, 188, 464, 465, 467], "smalltalk": [84, 95, 158, 386, 438, 461], "delight": 84, "main_log": 84, "tractabl": 84, "ters": [84, 301, 382, 459], "pleasant": [84, 460, 461, 465], "fun": [84, 165, 224, 382, 384, 386, 471, 477], "flaw": [84, 387, 462, 473, 481], "self_test": 84, "fake": [84, 290, 426, 481], "epydoc": 84, "soon": [84, 92, 103, 104, 107, 134, 137, 191, 226, 230, 259, 281, 291, 295, 342, 360, 382, 384, 409, 425, 426, 463, 465, 472, 475, 480, 481], "thread_task": 84, "sequenti": [84, 101, 123, 161, 216, 233, 281, 297, 306, 342, 360, 426, 450, 481], "001": [84, 181, 223, 259, 269, 306, 364, 433], "guess": [84, 156, 165, 182, 191, 198, 204, 207, 243, 248, 253, 264, 274, 306, 393, 405, 432, 454, 463, 473, 481], "job": [84, 92, 100, 101, 104, 107, 118, 126, 157, 199, 205, 228, 281, 291, 297, 343, 346, 373, 393, 430, 460, 466, 473, 481], "realist": [84, 346, 387, 409, 464, 465], "current_thread": [84, 281, 336, 363, 470, 481], "130283832797456": 84, "130283824404752": 84, "130283816012048": 84, "130283807619344": 84, "130283799226640": 84, "consult": [84, 85, 92, 95, 100, 104, 152, 165, 174, 181, 228, 265, 266, 269, 291, 293, 317, 320, 330, 333, 335, 338, 340, 350, 364, 430, 459, 460, 462, 463, 464, 465, 466, 467, 468, 472, 480, 481], "theori": [84, 317, 424, 475, 476], "account": [84, 104, 156, 158, 161, 165, 181, 184, 188, 189, 200, 207, 221, 223, 233, 242, 264, 265, 266, 284, 291, 294, 305, 337, 345, 350, 356, 357, 360, 397, 465, 469, 473, 475, 476, 477, 479, 480, 481], "pvm": 84, "l2": [84, 156, 374], "d1": [84, 467, 480], "d2": [84, 467, 480], "mass": [84, 94, 181, 460], "mutex": [84, 113, 122, 136, 338, 350, 481], "hindranc": 84, "multiprocessor": [84, 282, 301], "insist": [84, 307, 367], "greg": [84, 460, 462, 463, 464, 465, 474, 476, 479, 481], "stein": [84, 460, 481], "adam": [84, 466, 467, 470, 472, 473, 474, 477, 478, 479, 480, 481], "olsen": [84, 466, 467], "experi": [84, 94, 95, 100, 104, 124, 174, 228, 291, 306, 338, 367, 382, 386, 408, 459, 460, 461, 462, 466, 467, 469, 476, 479, 481], "safethread": 84, "unfortun": [84, 92, 95, 99, 101, 103, 104, 108, 149, 156, 281, 303, 306, 328, 335, 339, 356, 367, 388, 459, 461, 464, 466, 469, 477, 480], "exhibit": [84, 245, 256, 291, 342], "sharp": [84, 156], "slower": [84, 85, 104, 156, 224, 245, 256, 268, 281, 328, 382, 463, 464, 466, 468, 472, 478, 479, 480, 481], "compens": [84, 306, 477, 481], "creativ": [84, 233, 334], "judici": [84, 179, 466], "tremend": 84, "3rd": [84, 317, 332, 384, 444, 474, 481], "rate": [84, 115, 139, 287, 293, 306, 341, 347, 394, 477, 481], "gain": [84, 101, 142, 165, 248, 256, 297, 350, 393, 430, 432, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481], "unlink": [84, 211, 281, 282, 291, 294, 326, 358, 360, 374, 397, 408, 409, 474, 481], "rmdir": [84, 140, 291, 294, 360, 474], "mkdir": [84, 140, 198, 291, 294, 420, 449, 471, 474, 476, 481], "makedir": [84, 291, 294, 476, 478, 481], "removedir": [84, 291], "old_path": 84, "new_path": 84, "ftruncat": [84, 291, 476, 481], "copyfil": [84, 140, 330, 449, 467, 475, 479, 481], "ntfs": [84, 481], "volum": [84, 140, 158, 259, 291, 293, 420, 464, 472, 475, 481], "hfs": 84, "copy2": [84, 330, 473, 474, 476, 479, 481], "hhl": 84, "letter": [84, 92, 104, 107, 141, 156, 175, 176, 184, 188, 191, 226, 264, 265, 290, 294, 295, 299, 317, 339, 342, 343, 362, 374, 385, 392, 393, 420, 428, 433, 440, 447, 460, 462, 464, 465, 466, 467, 468, 472, 474, 476, 477, 478, 481], "homogen": [84, 342, 345, 406], "osx": [84, 174, 475, 478, 481], "ironpython": [84, 87, 94, 301, 432, 466, 481], "pyseri": 84, "mitch": 84, "chapman": [84, 464, 479, 481], "selm": 84, "34a04430": 84, "cf9": 84, "ohioe": 84, "arrang": [84, 95, 100, 101, 124, 130, 131, 137, 191, 234, 253, 266, 281, 339, 363, 367, 371, 373, 374, 481], "paul": [84, 312, 459, 460, 461, 462, 463, 465, 466, 467, 471, 472, 474, 475, 476, 478, 479, 480, 481], "boddi": [84, 459], "webprogram": 84, "cameron": [84, 145], "laird": 84, "technolog": [84, 92, 424], "20210224183619": 84, "phaseit": 84, "claird": 84, "web_python": 84, "me": [84, 198, 224, 238, 286, 343, 360, 388, 451, 459, 466, 471, 472], "qs": [84, 392], "josephin": 84, "mi": [84, 147, 465, 479, 480, 481], "req": [84, 108, 339, 387, 393, 473], "urlopen": [84, 108, 164, 167, 224, 241, 305, 391, 392, 393, 449, 465, 466, 467, 473, 474, 475, 476, 481], "hdrs": [84, 391, 393], "urlencod": [84, 108, 149, 240, 267, 392, 393, 473, 476, 481], "guy": 84, "steel": [84, 481], "2c": [84, 367, 481], "sender": [84, 101, 198, 201, 206, 269, 333], "fromaddr": [84, 101, 266, 267, 333, 339], "toaddr": [84, 101, 266, 267, 333], "localhost": [84, 101, 105, 108, 198, 240, 243, 245, 266, 267, 281, 303, 311, 327, 333, 336, 357, 393, 417, 418, 449, 481], "sendmail": [84, 101, 104, 199, 206, 317, 333, 449, 473, 476], "sbin": [84, 174, 317], "einprogress": [84, 210, 211], "progress": [84, 104, 149, 191, 210, 281, 291, 329, 338, 339, 356, 373, 374, 397, 398, 459, 460, 462, 467, 481], "connect_ex": [84, 335, 460], "eisconn": [84, 210], "twist": [84, 388, 424, 481], "disk": [84, 95, 100, 107, 167, 182, 192, 198, 206, 211, 232, 241, 245, 256, 263, 265, 267, 269, 276, 279, 286, 291, 293, 296, 297, 320, 328, 330, 338, 346, 350, 356, 380, 403, 411, 420, 426, 463, 465, 466, 468, 474, 481], "gdbm": [84, 182, 454, 468, 481], "lightweight": [84, 214, 224, 338, 379, 397, 459, 460, 465, 466, 476, 477], "databaseprogram": 84, "randrang": [84, 316, 449, 464, 470, 472, 473, 481], "uniform": [84, 108, 132, 188, 253, 316, 392, 396, 417, 473, 481], "normalvari": [84, 316, 481], "sdev": 84, "shuffl": [84, 316, 317, 471, 473, 480, 481], "idle3": 85, "pythonwin": [85, 174, 459, 460], "activepython": [85, 459], "eric": [85, 92, 173, 175, 294, 322, 411, 440, 460, 461, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "pyqt": [85, 457], "scintilla": 85, "trepan3k": 85, "wing": 85, "komodo": 85, "pycharm": [85, 477], "pylint": [85, 103], "pyflak": [85, 481], "mypi": [85, 103, 384, 426, 471, 476, 477, 481], "pyre": 85, "pytyp": [85, 103, 477], "pyinstal": [85, 281], "pyoxid": 85, "py2app": [85, 457], "py2ex": [85, 281, 481], "foobar": [85, 118, 218, 223, 266, 290, 317, 342, 388, 481], "remind": [85, 342, 439, 468, 481], "superfici": 85, "moment": [85, 103, 107, 181, 211, 256, 281, 291, 430, 477, 481], "clutter": [85, 101, 473], "defeat": [85, 104, 398, 426, 481], "everywher": [85, 360, 481], "mod": [85, 101, 120, 223, 248, 277, 289, 378, 419, 429, 434, 466, 479, 481], "basi": [85, 100, 101, 156, 174, 241, 260, 265, 269, 306, 350, 351, 356, 420, 424, 430, 434, 459, 462, 463, 478, 481], "harder": [85, 191, 290, 342, 388, 472, 481], "linter": [85, 120, 384], "dateutil": [85, 181, 481], "gordon": [85, 105, 460, 463, 481], "mcmillan": [85, 105, 463], "2nd": [85, 259, 317, 367, 481], "grab": [85, 100, 101, 363, 459, 481], "1st": [85, 181, 259], "techniqu": [85, 95, 101, 107, 149, 159, 191, 199, 224, 291, 306, 317, 338, 352, 359, 373, 384, 388, 430, 473, 479, 481], "gone": [85, 98, 108, 239, 387, 460, 461, 463, 466, 468, 473, 479, 481], "bite": [85, 104, 290, 388], "neophyt": 85, "memoiz": [85, 137, 224, 461, 477, 481], "_cach": [85, 281, 461], "matter": [85, 93, 94, 101, 107, 161, 191, 206, 245, 248, 251, 264, 290, 291, 294, 336, 338, 342, 350, 359, 374, 384, 386, 387, 398, 426, 429, 459, 460, 462, 464, 465, 466, 467, 475, 481], "tast": 85, "3c": [85, 367], "somevar": 85, "mistaken": [85, 438, 460, 473, 475, 481], "diagnos": [85, 100, 174, 245, 265, 386], "a_list": [85, 379], "some_tupl": 85, "some_int": 85, "calle": [85, 351, 378], "se": [85, 241, 357, 367], "func1": [85, 384], "99": [85, 92, 105, 145, 174, 181, 184, 259, 264, 266, 317, 341, 342, 364, 464, 467, 468, 473], "100": [85, 92, 101, 107, 108, 115, 123, 124, 134, 145, 153, 179, 181, 184, 188, 199, 206, 212, 223, 239, 243, 259, 264, 273, 281, 282, 293, 316, 327, 335, 341, 342, 343, 356, 364, 365, 374, 382, 386, 393, 403, 405, 417, 425, 428, 439, 442, 444, 447, 448, 449, 450, 460, 463, 465, 466, 467, 470, 471, 473, 475, 476, 479, 481], "clearest": [85, 463], "changeabl": 85, "func2": 85, "func3": 85, "setattr": [85, 87, 93, 118, 179, 223, 248, 290, 400, 438, 448, 460, 481], "func4": 85, "linear": [85, 130, 139, 159, 167, 188, 259, 326, 341, 342, 347, 382, 438, 463, 475, 479, 481], "tax": [85, 317, 447, 463], "10e6": 85, "exponenti": [85, 184, 267, 342, 360, 407, 428, 463, 464, 466, 481], "inc": [85, 339, 406, 424, 460, 466], "dec": [85, 86, 95, 181, 219, 221, 449, 462, 463, 481], "deepcopi": [85, 158, 169, 179, 317, 388, 422, 467, 472, 477, 478, 481], "newdict": 85, "olddict": 85, "new_l": 85, "0x16d07cc": 85, "arguabl": [85, 339], "deliber": [85, 118, 290, 303, 332, 342, 383, 386, 424, 453, 475], "benefici": [85, 101, 137, 424, 476], "on_tru": 85, "on_fals": 85, "ulf": 85, "bartelt": 85, "prime": [85, 164, 191, 206, 223, 259, 281, 342, 350, 364, 439, 449, 473, 477, 479, 481], "fibonacci": [85, 224, 439, 447, 448, 471], "mandelbrot": 85, "ru": [85, 216, 463], "iu": [85, 463], "sx": 85, "sy": 85, "yc": 85, "xc": [85, 350], "chr": [85, 107, 223, 238, 312, 385, 426, 448, 465, 467], "80": [85, 103, 105, 134, 145, 153, 156, 165, 206, 240, 241, 245, 259, 305, 306, 330, 335, 336, 341, 382, 386, 392, 393, 450, 464, 471, 473, 476, 477, 481], "___": 85, "______": 85, "__________": 85, "_________________": 85, "axi": [85, 152, 273, 374, 439, 470], "____________________________": 85, "sole": [85, 94, 103, 159, 184, 253, 281, 338, 342, 362, 383, 384, 400, 424, 426, 428, 467, 474, 475, 476, 478, 481], "invari": [85, 94, 95, 184, 194, 297, 384, 428, 430, 481], "div": [85, 120, 184, 238, 410, 429], "0o10": [85, 223], "0xa5": 85, "165": [85, 265, 341], "0xb2": 85, "178": 85, "ago": [85, 462, 481], "190": [85, 341, 462], "144": [85, 224, 259, 439, 447, 448, 479], "0144": 85, "0x144": 85, "rm": [85, 89, 294, 329, 481], "rf": [85, 329, 433, 481], "eras": [85, 92, 101, 175, 342, 357], "09": [85, 101, 152, 207, 265, 273, 330, 339, 446, 481], "oct": [85, 95, 101, 181, 209, 221, 223, 339, 342, 343, 350, 365, 426, 448, 462, 466, 468, 481], "fanci": [85, 92, 101, 463, 467, 481], "04d": [85, 224], "3f": [85, 158, 444, 473, 479], "assembl": [85, 95, 107, 189, 280, 338, 346, 367, 426, 432, 465, 481], "sio": 85, "yello": 85, "tounicod": [85, 119, 156], "paren": [85, 110, 120, 173, 245, 429, 465, 481], "get_input": 85, "do_foo": [85, 153], "do_bar": [85, 153], "foo_inst": 85, "do_": [85, 153, 243], "opnam": [85, 189, 360, 475], "myfunc": [85, 101, 189, 317, 418], "fname": [85, 107, 167, 188, 266, 380, 475], "rstrip": [85, 131, 134, 135, 186, 245, 282, 342, 449, 463, 481], "untermin": [85, 481], "workaround": [85, 179, 191, 282, 295, 339, 342, 388, 400, 420, 471, 472, 474, 479, 481], "tough": 85, "dive": 85, "hot": [85, 245, 306], "spot": [85, 293, 362], "benchmark": [85, 224, 306, 453, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 479, 480, 481], "sophist": [85, 131, 153, 167, 184, 265, 343, 411, 462, 465], "said": [85, 92, 93, 165, 211, 281, 425, 426, 433, 447, 461, 462, 477, 481], "toward": [85, 144, 184, 191, 194, 203, 216, 219, 220, 223, 265, 273, 342, 350, 362, 364, 382, 426, 461, 463, 465, 466, 475, 480, 481], "sprinkl": [85, 432], "moder": [85, 95, 104, 286, 290, 303, 317, 462, 463], "tend": [85, 99, 147, 188, 224, 303, 306, 469], "outweigh": 85, "detriment": 85, "confid": [85, 103, 149, 316], "skill": [85, 382], "ineffici": [85, 256, 291, 351, 380, 472, 476, 481], "quadrat": [85, 159, 188, 342, 407, 467, 470, 481], "accumul": [85, 92, 95, 118, 184, 224, 259, 290, 297, 306, 316, 329, 378, 386, 461, 473, 474, 479, 481], "my_str": [85, 472], "my_bytes_object": 85, "cheap": [85, 174, 297, 481], "penultim": 85, "activest": [85, 452, 457, 460, 473], "52560": 85, "reorder": [85, 94, 124, 411, 481], "mylist": [85, 179, 319, 473], "variat": [85, 93, 94, 104, 181, 191, 269, 291, 303, 346, 352, 426, 459, 465, 481], "keep_funct": 85, "keep_condit": 85, "fastest": [85, 232, 281, 317, 382, 449, 466, 473, 479], "con": [85, 338, 481], "lisp_list": 85, "analogu": [85, 281], "car": 85, "cdr": 85, "replic": [85, 95, 206, 281, 459, 464, 467, 481], "eleg": [85, 165, 464, 473], "suffic": [85, 223, 293], "exemplar": 85, "wrote": [85, 95, 336, 424, 460, 462, 464, 475, 481], "randal": [85, 106], "schwartz": [85, 106, 466], "metric": [85, 370, 481], "isort": 85, "list1": 85, "list2": 85, "embodi": [85, 205, 408], "refin": [85, 478, 481], "mboxmailbox": 85, "maildirmailbox": 85, "outlookmailbox": 85, "mere": [85, 167, 181, 191, 223, 282, 290, 331, 346, 350, 382, 424, 425, 468], "class1": [85, 387, 388, 462], "class2": [85, 387, 388, 462], "upperout": 85, "outfil": [85, 118, 138, 260, 290, 299, 378, 450, 469, 473, 481], "_outfil": 85, "redefin": [85, 142, 159, 248, 336, 426, 463, 466, 481], "trickier": [85, 290], "rough": [85, 93, 101, 107, 200, 224, 241, 250, 259, 273, 279, 281, 290, 291, 300, 342, 360, 363, 383, 426, 434, 460, 466, 467, 478, 480, 481], "incident": [85, 211, 249, 383, 424, 481], "basealia": 85, "getcount": [85, 289, 480], "rebind": [85, 225, 434, 464, 481], "tight": [85, 100, 133, 428, 432, 481], "answer": [85, 89, 93, 94, 131, 152, 191, 224, 233, 266, 269, 306, 343, 364, 371, 440, 444, 460, 464, 468, 481], "cout": 85, "mangl": [85, 194, 223, 319, 428, 433, 434, 438, 475, 481], "_classname__spam": [85, 438], "privaci": [85, 339], "bother": [85, 92, 101, 103, 107, 281, 461, 462, 472], "children": [85, 100, 102, 130, 265, 281, 291, 294, 310, 312, 320, 360, 367, 374, 382, 386, 388, 408, 409, 410, 411, 420, 460, 467, 478, 481], "vanish": [85, 156, 384], "inconveni": [85, 241, 253, 388, 411], "wors": [85, 104, 124, 181, 186, 472, 474, 475, 481], "patholog": [85, 481], "illustr": [85, 99, 100, 101, 108, 118, 137, 167, 171, 181, 191, 206, 241, 248, 266, 329, 331, 338, 342, 346, 357, 367, 386, 393, 425, 428, 464, 474], "13901272": 85, "13891296": 85, "inadvis": 85, "500": [85, 108, 153, 181, 184, 212, 221, 239, 286, 341, 342, 396, 405, 448, 450, 463, 465, 470, 481], "thon": [85, 447], "english": [85, 101, 107, 290, 338, 362, 364, 382, 432, 433, 467, 468, 476, 481], "_sentinel": 85, "late": [85, 92, 103, 188, 460, 481], "firstofmonthd": 85, "namedint": 85, "xlat": 85, "ten": [85, 93, 101, 158, 175, 184, 306, 316, 345, 463], "titlestr": [85, 382], "isalnum": [85, 176, 317, 342], "2012": [85, 92, 107, 221, 474, 480, 481], "blog": [85, 388, 465], "rock": [85, 107, 118], "princip": [85, 241, 339, 469, 473], "cached_properti": [85, 93, 224, 342, 472, 479, 481], "lru_cach": [85, 158, 218, 224, 259, 473, 474, 476, 479, 481], "maxsiz": [85, 93, 110, 132, 158, 218, 223, 224, 259, 281, 301, 314, 342, 350, 360, 367, 426, 448, 468, 473, 479, 481], "age": [85, 93, 106, 158, 224, 241, 242, 338, 339, 449, 462, 463, 464, 467, 473], "weather": 85, "govern": [85, 101, 179, 184, 192, 392, 417, 424, 473], "websit": [85, 108, 182, 393, 432, 457, 473, 481], "station_id": 85, "_station_id": 85, "current_temperatur": 85, "longitud": [85, 343], "latitud": [85, 343], "station": 85, "historic_rainfal": 85, "mm": [85, 181, 246, 276, 342, 364], "rainfal": 85, "change_st": 85, "cm": [85, 137, 167, 360, 386], "__pycache__": [85, 248, 294, 309, 350, 448, 453, 471, 473, 479, 481], "middl": [85, 92, 124, 167, 197, 295, 316, 319, 362, 382, 414, 465, 467, 477, 481], "xyz": [85, 118, 265, 266, 342, 386, 473, 481], "cfile": [85, 309], "bar_var": 85, "foo_var": 85, "jim": [85, 95, 101, 306, 432, 460, 464, 466, 473, 477, 481], "roskind": [85, 306], "strang": [85, 113, 362, 392, 426, 459, 461, 465, 466], "matthia": [85, 467, 470, 472, 474, 477, 478, 479, 481], "urlich": 85, "modnam": [85, 438, 448, 465, 472, 477], "fool": [85, 460, 464], "proof": [85, 95, 201, 281, 460, 479, 481], "paradox": [85, 463], "0x7352a0": 85, "0x4198d0": 85, "yournam": 86, "v3": [86, 335, 481], "d48eceb": 86, "19": [86, 89, 95, 100, 101, 104, 107, 137, 148, 158, 174, 181, 184, 191, 207, 221, 234, 259, 291, 339, 341, 342, 343, 421, 463, 464, 465, 466, 467, 470, 473, 479, 480, 481], "2017": [86, 292, 339, 433, 454, 481], "06": [86, 101, 181, 243, 265, 330, 447, 465, 477, 481], "04": [86, 89, 92, 181, 343, 345, 364, 423, 446, 465, 467, 470, 477, 478, 481], "45": [86, 95, 144, 158, 165, 184, 265, 281, 316, 335, 382, 384, 463, 464, 465, 470, 479, 480, 481], "1900": [86, 181, 364, 433, 466, 473], "licens": [86, 121, 166, 245, 249, 269, 305, 350, 424, 446, 448, 451, 462, 479, 481], "hellohellohello": 86, "desktop": [86, 107, 401, 459], "pathext": [86, 330, 397, 459, 472, 475, 481], "mcafe": 86, "pyinit_foo": 86, "__declspec": 86, "nn": 86, "33": [86, 145, 158, 174, 176, 259, 281, 282, 317, 350, 387, 442, 448, 449, 462, 463, 464, 473, 479, 480, 481], "loadlibraryex": [86, 174, 479], "getprocaddress": 86, "leo": [86, 147], "initleo": 86, "initleoc": 86, "initmyappc": 86, "myapp": [86, 100, 101, 165, 233, 367, 419, 476], "pythonnn": 86, "_resultobj": 86, "typemap": [86, 267], "wxpythonwindow": 86, "kbhit": [86, 280], "hit": [86, 92, 142, 151, 174, 211, 224, 245, 295, 339, 357, 367, 378, 387, 465, 473, 481], "getch": [86, 92, 175, 280], "duck": [87, 342, 384, 466, 475, 481], "__aenter__": [87, 167, 189, 386, 387, 388, 425, 426, 481], "__aexit__": [87, 137, 167, 189, 386, 387, 388, 425, 426, 481], "bdfl": 87, "benevol": [87, 460], "bytesio": [87, 194, 205, 232, 233, 256, 269, 297, 342, 358, 376, 419, 423, 466, 468, 473, 476, 481], "gzipfil": [87, 232, 356, 467, 469, 470, 472, 473, 476, 480, 481], "argument1": 87, "argument2": 87, "argumentn": 87, "1j": [87, 152, 223, 260, 387, 481], "__exit__": [87, 101, 167, 189, 256, 281, 331, 342, 356, 360, 386, 387, 403, 425, 426, 465, 466, 467, 477, 481], "multidimension": [87, 342], "perl": [87, 95, 104, 106, 241, 317, 437, 442, 450, 460, 464, 465, 481], "dictview": [87, 342, 479, 481], "eafp": [87, 291], "forgiv": [87, 460, 481], "lbyl": 87, "75": [87, 92, 101, 188, 191, 281, 341, 382, 447, 449, 463, 464, 466, 467, 472, 477, 478, 479, 480, 481], "sum_two_numb": [87, 120], "_featur": [87, 111, 223], "8192": [87, 105, 221, 223, 240, 405], "81": [87, 102, 259, 281, 316, 341, 376, 440, 444, 447, 449, 479], "singledispatch": [87, 224, 471, 475, 478, 481], "443": [87, 134, 240, 339, 475], "parameter": [87, 175, 191, 338, 342, 383, 384, 426, 470, 480, 481], "483": [87, 384, 476], "intens": [87, 175, 268, 291, 474, 481], "collat": [87, 264, 338, 471, 481], "strxfrm": [87, 106, 264], "nsmallest": [87, 223, 224, 234, 464, 465], "nlargest": [87, 223, 224, 234, 464, 465, 481], "groupbi": [87, 95, 224, 259, 289, 464, 469, 481], "attrgett": [87, 95, 106, 145, 289, 464, 465, 466, 473, 476, 481], "itemgett": [87, 106, 145, 259, 289, 464, 465, 476, 479, 481], "methodcal": [87, 106, 289, 466, 476, 481], "leap": [87, 100, 104, 181, 364], "setlocal": [87, 256, 264, 414, 450, 471, 476, 481], "new_local": 87, "cp1252": [87, 156, 446], "getencod": [87, 92, 107, 156, 173, 175, 223, 256, 264, 414, 459, 471, 481], "04x": [87, 107], "load_modul": [87, 248, 421, 430, 463, 470, 472, 475, 477, 481], "metapathfind": [87, 248, 249, 350, 470, 471, 474, 475, 478, 481], "organiz": [87, 339, 426], "localtim": [87, 100, 181, 201, 207, 246, 265, 364, 461, 462, 472, 474, 481], "float_info": [87, 273, 342, 448, 466, 481], "1024": [87, 107, 173, 184, 213, 233, 266, 307, 335, 336, 339, 342, 380, 433, 449, 481], "max_exp": [87, 350], "islic": [87, 95, 158, 223, 259, 465, 478, 481], "posonly1": 87, "posonly2": 87, "positional_or_keyword": [87, 253], "kw_only1": 87, "kw_only2": 87, "pathentryfind": [87, 248, 421, 430, 470, 471, 474, 475, 478], "fspath": [87, 232, 291, 294, 477, 481], "fsencod": [87, 291, 294, 350, 360, 473, 477, 481], "411": [87, 108, 239, 265, 350, 380, 481], "getrefcount": [87, 350, 448], "abracadabra": [87, 93, 158, 281, 342, 343, 440, 464], "variable_nam": 87, "checker": [87, 103, 118, 175, 181, 191, 290, 342, 384, 425, 426, 464, 465, 470, 471, 472, 476, 477, 479, 480, 481], "0000": [87, 98, 107, 156, 181, 201, 207, 257, 342, 364, 426, 460, 473, 474, 481], "10ffff": [87, 156, 426, 474, 481], "datastream": 87, "unescap": [87, 104, 188, 236, 237, 286, 317, 392, 415, 433, 475, 480, 481], "remove_gray_shad": 87, "refactor": [87, 95, 110, 386, 387, 388, 464, 475, 476, 477, 478, 481], "get_type_hint": [87, 384, 471, 478, 480, 481], "macintosh": [87, 156, 433, 460, 463], "splitlin": [87, 153, 188, 198, 206, 342, 362, 379, 466, 473, 475, 481], "zen": [87, 112], "larri": [88, 341, 467, 469, 470, 474, 475, 479, 480, 481], "hast": [88, 467, 469, 470, 474, 475, 479, 480, 481], "get_annot": [88, 253, 470, 481], "un": [88, 198, 201, 253, 286, 434, 447, 475, 481], "stringiz": [88, 253, 470, 481], "ann": 88, "exot": [88, 99, 260, 462], "malform": [88, 156, 184, 197, 223, 240, 256, 269, 464, 466, 473, 481], "update_wrapp": [88, 93, 224, 253, 465, 475, 481], "__wrapped__": [88, 93, 223, 224, 253, 470, 471, 473, 475, 476, 481], "__globals__": [88, 253, 426, 468, 470, 481], "type_check": [88, 248, 290, 384, 477, 481], "fn": [88, 101, 107, 164, 198, 265, 397, 405, 419, 420, 468, 476, 479], "tshepang": 89, "mbambo": 89, "devguid": [89, 475], "ctypes_configur": 89, "dotview": 89, "lib_pypi": 89, "drwxr": [89, 221], "xr": [89, 221, 330, 473], "wena": 89, "4096": [89, 105, 107, 113, 158, 171, 221, 223, 233, 335, 342, 363, 473], "feb": [89, 95, 181, 462], "51": [89, 101, 102, 316, 382, 440, 466, 470], "rwxr": [89, 330], "535": 89, "05": [89, 101, 132, 152, 181, 259, 273, 317, 339, 345, 364, 450, 465, 466, 477, 481], "rw": [89, 94, 101, 221, 293, 330, 338, 346, 473, 476, 477, 478], "741": [89, 481], "01": [89, 101, 105, 144, 181, 184, 207, 223, 233, 238, 265, 330, 335, 337, 339, 342, 364, 406, 420, 423, 428, 449, 459, 461, 463, 464, 465, 473, 474, 477, 478, 481], "cftuvsux": 89, "cp": [89, 93, 156, 290, 291, 467, 476], "store_tru": [89, 118, 188, 226, 290, 307, 397, 467, 473, 481], "vv": [89, 118, 453, 469, 477, 481], "vvv": [89, 118, 393], "vvvv": 89, "nonetyp": [89, 166, 191, 224, 282, 317, 383, 384, 470, 471, 481], "greedili": 89, "add_mutually_exclusive_group": [89, 118, 481], "vq": 89, "po": [89, 228, 467, 471], "babel": [89, 228], "pybabel": [89, 228], "book": [91, 95, 103, 104, 152, 158, 181, 269, 317, 338, 367, 473, 481], "reader": [91, 98, 104, 107, 124, 134, 147, 156, 158, 168, 173, 194, 198, 200, 203, 223, 240, 248, 251, 256, 269, 270, 281, 286, 290, 297, 331, 335, 345, 385, 397, 408, 411, 412, 413, 414, 415, 426, 432, 453, 463, 465, 468, 470, 476, 481], "py3c": 91, "opinion": [91, 460, 465], "kuchl": [92, 95, 104, 107, 175, 460, 461, 462, 463, 464, 465, 466, 467, 475], "raymond": [92, 93, 95, 106, 175, 345, 425, 460, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "paint": [92, 175, 382, 462], "vt100s": [92, 175], "quirk": [92, 342, 432, 470, 475, 481], "nich": 92, "valuabl": [92, 112, 228, 335, 379, 474], "button": [92, 101, 149, 175, 187, 245, 279, 367, 371, 373, 374, 382, 424, 459, 477, 478, 479, 481], "checkbox": [92, 149, 279, 459], "urwid": 92, "commerci": [92, 293, 424, 466], "carri": [92, 93, 100, 156, 182, 184, 189, 263, 265, 273, 281, 290, 316, 338, 342, 386, 408, 424, 427, 433, 434, 465, 466, 467, 476, 479, 481], "proprietari": 92, "unicurs": 92, "biggest": [92, 103, 380, 468, 473, 474], "addstr": [92, 175, 481], "mvaddstr": 92, "mvwaddstr": 92, "initscr": [92, 175], "stdscr": [92, 175, 466], "noecho": [92, 175], "cbreak": [92, 175, 381, 481], "multibyt": [92, 175, 206, 342, 474, 481], "key_left": [92, 175], "keypad": [92, 175], "nocbreak": [92, 175], "endwin": [92, 175], "mess": [92, 118, 290, 462], "die": [92, 210, 326, 400, 479, 481], "buggi": [92, 460, 462, 472, 474, 475, 481], "uncaught": [92, 150, 338, 350, 363, 428, 461, 479, 481], "refresh": [92, 158, 175, 286, 367, 374, 465, 480, 481], "getkey": [92, 175, 481], "funni": [92, 139], "rectangular": [92, 152, 382], "redraw": 92, "newwin": [92, 175], "begin_x": [92, 175], "begin_i": [92, 175], "height": [92, 175, 179, 245, 279, 291, 317, 341, 367, 374, 382, 384, 447, 465, 481], "40": [92, 93, 95, 100, 153, 158, 181, 191, 245, 265, 306, 316, 317, 319, 330, 341, 364, 373, 382, 422, 439, 449, 450, 470, 475, 478, 479, 480, 481], "col": [92, 175, 245, 259, 343, 476, 481], "slow": [92, 101, 124, 182, 233, 245, 256, 259, 267, 281, 328, 336, 342, 351, 360, 382, 384, 420, 421, 460, 461, 463, 464, 466, 480, 481], "baud": [92, 481], "flurri": [92, 460], "paus": [92, 95, 131, 135, 175, 293, 295, 331, 428, 464, 465, 481], "redrawn": [92, 175, 382], "subsect": [92, 104, 124, 245, 342, 428, 481], "newpad": [92, 175], "addch": [92, 175, 481], "ord": [92, 107, 118, 120, 174, 176, 223, 338, 342, 387, 426, 428, 448, 460, 466], "26": [92, 94, 100, 102, 148, 181, 234, 257, 281, 316, 330, 339, 364, 365, 376, 392, 421, 424, 463, 464, 467, 473, 477, 479, 480, 481], "ordinari": [92, 100, 104, 149, 167, 191, 223, 232, 317, 328, 331, 338, 341, 356, 387, 400, 411, 430, 433, 434, 460, 474, 481], "annoy": [92, 107, 149, 265, 387, 460, 462, 463, 466, 468, 474, 479, 481], "flicker": [92, 175, 481], "noutrefresh": [92, 175], "doupdat": [92, 175, 177], "twisti": 92, "maze": 92, "subt": [92, 194, 203, 430], "waddstr": [92, 474], "hide": [92, 107, 177, 191, 192, 214, 245, 256, 290, 346, 360, 374, 382, 384, 398, 425, 459, 463, 467, 472, 473, 480, 481], "boldfac": [92, 466], "underlin": [92, 175, 370, 374], "bytestr": [92, 159, 291, 335, 342, 384, 411, 422, 466, 472, 481], "acs_plminus": [92, 175], "acs_ulcorn": [92, 175], "box": [92, 101, 175, 245, 269, 367, 371, 373, 374, 384, 428, 477, 478, 479, 481], "border": [92, 175, 367, 374, 392], "flash": [92, 175, 481], "distract": [92, 290, 481], "blink": [92, 175, 479, 480, 481], "curs_set": [92, 175], "invis": [92, 156, 175, 177, 382, 467, 469, 481], "leaveok": [92, 175], "synonym": [92, 101, 107, 113, 175, 290, 297, 340, 367, 408, 433, 466, 481], "video": [92, 175, 259, 270, 273, 466], "viewer": [92, 245, 267, 382, 481], "safest": [92, 174, 269, 481], "stick": [92, 107, 268, 281, 360, 374, 382, 462, 463, 466], "a_blink": [92, 175], "a_bold": [92, 175, 466], "bright": 92, "bold": [92, 148, 175, 367, 370], "a_dim": [92, 175], "a_revers": [92, 175], "a_standout": [92, 175], "a_underlin": [92, 175], "xterm": [92, 175, 481], "start_color": [92, 175], "has_color": [92, 175], "american": [92, 181], "spell": [92, 156, 181, 201, 223, 265, 306, 342, 374, 433, 434, 463, 468, 474, 481], "canadian": [92, 156], "british": 92, "resign": 92, "misspel": [92, 93, 165, 387, 481], "sake": [92, 101, 126, 203, 291, 329, 430, 463, 481], "foreground": [92, 175, 245, 374, 450], "color_pair": [92, 175, 481], "init_pair": [92, 175, 470], "wire": [92, 100, 156, 175, 265, 266, 267, 339, 344, 387, 417, 476], "black": [92, 94, 101, 107, 145, 158, 175, 209, 245, 316, 374, 382, 450, 463, 464, 470, 471, 472, 475, 479], "green": [92, 94, 120, 158, 175, 209, 238, 316, 341, 382, 400, 439, 450, 463, 464, 469, 470, 473, 477, 481], "magenta": [92, 94, 175, 450], "cyan": [92, 94, 175, 450], "color_black": [92, 175], "color_r": [92, 175], "color_whit": [92, 175], "alert": [92, 238, 267, 339, 384, 398, 478, 481], "rgb": [92, 94, 160, 175, 204, 247, 290, 367, 382, 475, 481], "purpl": [92, 94, 101, 209], "unabl": [92, 95, 100, 101, 108, 253, 265, 269, 291, 326, 338, 346, 350, 362, 441, 459, 465, 481], "can_change_color": [92, 175], "lucki": [92, 174], "talent": 92, "man": [92, 124, 171, 269, 291, 311, 320, 326, 331, 335, 340, 364, 367, 373, 381, 467, 481], "key_up": [92, 175], "nodelay": [92, 175], "err": [92, 175, 211, 226, 267, 312, 346, 386, 417, 424, 441, 474], "halfdelay": [92, 175], "tenth": [92, 139, 175, 207], "key_ppag": [92, 175], "key_hom": [92, 175], "printdocu": 92, "getstr": [92, 175, 279, 466, 481], "backspac": [92, 104, 175, 176, 245, 317, 433, 446, 481], "keybind": [92, 175, 245, 318], "gather": [92, 118, 122, 132, 135, 137, 175, 291, 306, 335, 378, 386, 454, 471, 476, 478, 479, 481], "editwin": 92, "struck": 92, "brows": [92, 108, 311, 374, 466, 481], "vendor": [92, 233, 301, 458, 459, 481], "acs_": 92, "submit": [92, 101, 108, 137, 149, 164, 245, 281, 424, 460, 467, 473, 476, 477, 478, 479, 481], "lengthi": [92, 95, 104, 259, 460, 461, 462, 463, 464, 473, 481], "swear": 92, "pycon": [92, 107, 339, 465], "2013": [92, 101, 107, 181, 292, 339, 424, 481], "hetting": [93, 95, 106, 425, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "peopl": [93, 95, 98, 103, 107, 175, 184, 188, 191, 228, 233, 290, 411, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 474, 477, 479, 481], "curious": [93, 149, 481], "objtyp": 93, "directorys": 93, "dirnam": [93, 221, 269, 291, 292, 294, 300, 360, 386, 398, 454, 478], "song": [93, 472], "game": [93, 118, 382, 465, 466], "twenti": 93, "chess": [93, 95, 107, 462, 463], "reveal": [93, 181, 384, 466, 473, 481], "_age": 93, "basicconfig": [93, 100, 101, 123, 167, 265, 464, 473, 474, 479, 481], "loggedageaccess": 93, "birthday": [93, 449, 470], "mari": [93, 335, 439], "dave": [93, 106, 463, 464, 467, 473, 481], "david": [93, 95, 97, 107, 228, 424, 459, 460, 461, 462, 463, 464, 466, 467, 469, 471, 473, 474, 475, 476, 477, 479, 481], "hardwir": [93, 167, 306], "loggedaccess": 93, "public_nam": 93, "private_nam": 93, "_name": [93, 174, 179, 194, 203, 481], "pete": 93, "peter": [93, 98, 112, 228, 316, 365, 460, 461, 462, 463, 464, 465, 466, 471, 474, 475, 476, 477, 480, 481], "kate": 93, "catherin": 93, "some_class": 93, "descriptor_nam": 93, "notori": [93, 400], "meet": [93, 95, 101, 138, 167, 184, 188, 191, 297, 342, 393, 424, 426, 460, 464], "abstractmethod": [93, 114, 224, 248, 249, 251, 287, 291, 327, 466, 474], "oneof": 93, "predic": [93, 95, 136, 253, 259, 362, 363, 411, 463, 466, 473, 478, 480, 481], "minvalu": 93, "maxvalu": 93, "minsiz": 93, "isupp": [93, 176, 259, 324, 342, 386], "wood": [93, 118], "metal": 93, "plastic": 93, "quantiti": [93, 184, 273, 291, 317, 339, 463, 467, 473], "metl": 93, "summar": [93, 103, 107, 184, 191, 257, 328, 384, 386, 425, 428, 430, 464, 473], "toolset": [93, 259, 290, 466, 481], "deeper": [93, 108, 165, 181, 191, 305, 350], "behind": [93, 174, 191, 307, 323, 353, 356, 382, 393, 426, 459, 461, 464, 481], "everyday": [93, 223], "find_name_in_mro": 93, "object_getattribut": 93, "cls_var": 93, "descr_get": 93, "bypass": [93, 156, 224, 233, 291, 343, 350, 352, 387, 423, 426, 428, 430, 472, 481], "getattr_hook": 93, "slot_tp_getattr_hook": 93, "type_getattro": [93, 481], "super_getattro": 93, "set_nam": [93, 124, 137, 479, 481], "skeleton": 93, "conn": [93, 124, 158, 164, 167, 240, 281, 297, 327, 335, 339, 363, 465, 473, 476], "fetchon": [93, 297, 338, 465, 473], "commit": [93, 118, 279, 286, 303, 338, 346, 369, 429, 465, 466, 467, 475, 477, 481], "movi": [93, 145, 338, 384, 471, 472], "director": [93, 145, 393], "music": [93, 158], "artist": 93, "genr": 93, "entertain": [93, 149], "star": [93, 120, 189, 356, 375, 425, 429, 432, 434, 470, 471, 481], "war": [93, 471], "georg": [93, 107, 259, 444, 465, 466, 467, 469, 470, 473, 474, 476, 477, 481], "luca": [93, 233, 475, 476, 481], "jaw": [93, 145], "1975": [93, 145, 260, 338, 341, 447, 479], "steven": [93, 461, 465, 467, 472, 473, 475, 476, 477, 479, 481], "spielberg": [93, 145], "countri": [93, 241, 264, 339, 342, 411, 464], "road": [93, 242], "john": [93, 106, 108, 158, 173, 188, 367, 411, 438, 439, 440, 461, 464, 465, 466, 467, 470, 471, 474, 477, 481], "denver": [93, 481], "abram": 93, "excit": [93, 460, 462], "prepackag": 93, "succinct": [93, 259, 384], "fget": [93, 223, 383], "fset": [93, 223, 383], "fdel": [93, 223, 383], "getx": [93, 223], "__x": 93, "setx": [93, 223, 382, 459], "delx": [93, 223], "descrobject": 93, "prop": [93, 459, 472, 481], "intervent": [93, 367, 423], "spreadsheet": [93, 463], "b10": 93, "recalcul": [93, 265, 423], "recalc": 93, "_valu": [93, 194, 203], "seamless": 93, "classobject": [93, 471, 481], "__func__": [93, 110, 253, 342, 426, 438, 466, 467], "__self__": [93, 253, 342, 426, 438, 466, 481], "func_descr_get": 93, "funcobject": [93, 471, 481], "0x00c45070": 93, "0x00b18c90": 93, "wonder": [93, 149, 173, 306, 432, 460, 463, 473], "recap": 93, "chart": [93, 107], "experiment": [93, 245, 269, 367, 369, 408, 432, 454, 463, 468, 469, 471, 472, 473, 478, 479, 481], "averag": [93, 139, 259, 291, 306, 316, 342, 346, 374, 380, 432, 449, 468, 475, 479, 481], "median": [93, 316, 341, 449, 475, 481], "conceptu": [93, 95, 100, 118, 139, 192, 194, 198, 203, 248, 251, 343, 384, 398, 430, 478], "erf": [93, 273, 467, 473, 478, 481], "dataset": [93, 165, 224, 464, 479, 481], "9332": 93, "unexcit": 93, "pystaticmethod_typ": 93, "fromkey": [93, 158, 342, 383, 463, 471, 473, 481], "dict_fromkey": 93, "dictobject": [93, 465, 481], "pyclassmethod_typ": 93, "vehicl": 93, "id_numb": 93, "id_nubm": 93, "vye483814lqex": 93, "_dept": 93, "dept": [93, 438, 469, 473], "botani": 93, "watney": 93, "pirat": 93, "mar": [93, 94, 95, 181, 341, 432, 439, 462, 466], "48": [93, 233, 341, 342, 380, 396, 470, 481], "152": 93, "flyweight": 93, "35": [93, 95, 184, 223, 316, 341, 401, 433, 463, 464, 465, 466, 472, 473, 477, 479, 480, 481], "m1": [93, 259, 345, 471], "pi": [93, 152, 174, 175, 184, 219, 273, 295, 316, 382, 411, 440, 442, 444, 449, 473, 474, 479], "100_000": [93, 341], "faith": [93, 206, 343, 350], "_slotvalu": 93, "clsname": 93, "descr_new": 93, "member_get": 93, "member_set": 93, "member_delet": 93, "member_repr": 93, "mcls": [93, 380], "pytypereadi": 93, "add_method": 93, "slot_nam": 93, "object_new": 93, "empty_slot": 93, "_pyobject_genericsetattrwithdict": 93, "pp": [93, 295, 305, 316, 479, 481], "0x7fb5d302f9d0": 93, "slot_valu": 93, "xz": [93, 268, 330, 356, 384, 473, 474, 476, 481], "week": [94, 181, 264, 364, 460, 472, 479, 481], "weekday": [94, 148, 181, 209, 267, 364, 479, 481], "monday": [94, 148, 181, 209, 264, 267, 364, 481], "tuesday": [94, 148, 181, 209, 267, 449], "wednesday": [94, 148, 181, 209], "thursday": [94, 148, 181, 209], "friday": [94, 148, 209], "saturday": [94, 148, 181, 209], "sunday": [94, 148, 181, 209, 264, 267, 364, 467, 481], "upper_cas": [94, 481], "isoweekday": [94, 181, 209], "from_dat": 94, "plot": [94, 464], "chore": [94, 460], "first_week_day": 94, "weekend": 94, "96": [94, 98, 257, 342, 380, 477, 478, 479, 480, 481], "chores_for_ethan": 94, "feed": [94, 156, 175, 176, 205, 206, 233, 238, 259, 281, 342, 387, 405, 411, 414, 465, 473, 481], "cat": [94, 101, 104, 158, 228, 285, 346, 439, 449, 451, 473, 476], "dish": [94, 342], "show_chor": 94, "circl": [94, 153, 273, 382, 466], "alias_for_squar": 94, "unimport": 94, "_generate_next_value_": [94, 209, 481], "autonam": 94, "north": [94, 181, 374, 382, 467, 469, 481], "south": [94, 156, 317, 374, 382, 466, 469], "east": [94, 181, 364, 374, 382, 385, 438, 464], "west": [94, 181, 364, 374, 382, 438, 469], "__members__": [94, 209, 462, 468], "recreat": [94, 156, 188, 296, 335, 392, 397, 400, 426, 474, 478, 481], "vast": [94, 328, 479, 480, 481], "mood": 94, "funki": [94, 165], "happi": [94, 124, 463, 479, 481], "favorite_mood": 94, "_ignore_": [94, 209, 478, 481], "enumnam": 94, "morecolor": 94, "pink": [94, 382], "some_behavior": 94, "sad": [94, 468, 481], "creaturedatamixin": 94, "leg": 94, "creatur": 94, "beetl": 94, "dog": [94, 104, 158, 317, 438, 473, 476], "test_enum": 94, "fruit": [94, 305, 426, 440], "tomato": [94, 338], "picklabl": [94, 164, 253, 281, 297, 476, 481], "myenum": 94, "pickle_by_enum_nam": 94, "ant": [94, 147], "bee": 94, "closer": [94, 329, 330, 388, 398, 467, 468, 476, 481], "somedata": [94, 233, 302], "newenumnam": 94, "chartreus": 94, "sea_green": 94, "rosemari": 94, "flagboundari": [94, 209, 471], "perm": [94, 221, 273, 433, 471, 478, 479, 481], "rwx": [94, 330], "floatenum": 94, "_value_": [94, 209], "px": [94, 273], "km": [94, 341], "vx": 94, "vy": 94, "member_nam": [94, 470], "_name_": [94, 209], "_missing_": [94, 209, 481], "_order_": [94, 209, 481], "sync": [94, 175, 182, 253, 281, 291, 293, 328, 367, 472, 474, 479, 481], "enumclass": [94, 481], "earth": [94, 338, 341, 439], "jupit": [94, 341], "mercuri": [94, 341, 473, 475, 481], "neptun": [94, 341], "saturn": [94, 341], "uranus": [94, 341], "venus": [94, 341, 439], "radius": [94, 153, 273, 338, 382], "surface_grav": 94, "compris": [94, 286, 300, 346, 428, 433, 434, 466], "eject": [94, 209], "_convert_": [94, 481], "some_enum_var": 94, "__getnewargs__": [94, 158, 297, 387, 463, 476, 481], "signifi": [94, 103, 179, 243, 338, 342, 426, 433, 472], "renumb": [94, 246, 426], "autonumb": 94, "swatch": 94, "panton": 94, "auburn": 94, "3497": 94, "1246": 94, "bleached_cor": 94, "grade": [94, 106, 145, 223, 341, 342, 382, 463, 481], "grene": 94, "303e": 94, "4397e6": 94, "869e": 94, "0518e6": 94, "976e": 94, "37814e6": 94, "421e": 94, "3972e6": 94, "9e": 94, "27": [94, 148, 181, 234, 255, 291, 317, 335, 339, 341, 365, 376, 433, 444, 447, 460, 463, 469, 470, 473, 474, 478, 479, 480, 481], "1492e7": 94, "688e": 94, "0268e7": 94, "686e": 94, "5559e7": 94, "024e": 94, "4746e7": 94, "kilogram": 94, "meter": [94, 373], "gravit": [94, 382], "m3": [94, 364, 471], "kg": 94, "67300e": 94, "6378140": 94, "802652743337129": 94, "367": 94, "day_": 94, "day_0": 94, "day_1": [94, 264], "day_365": 94, "365": [94, 181, 339, 341, 364], "day_366": 94, "tour": [95, 462, 463], "subclaus": 95, "ocaml": 95, "haskel": [95, 259, 439, 460, 463], "emphas": [95, 191, 282, 371, 425, 481], "discourag": [95, 104, 137, 156, 179, 192, 223, 248, 286, 317, 332, 342, 351, 356, 360, 426, 462, 465, 481], "puriti": [95, 392], "opposit": [95, 104, 107, 207, 317, 382, 426, 460, 466, 468, 481], "constraint": [95, 120, 184, 189, 265, 291, 297, 305, 342, 384, 392, 425, 427, 429, 430, 465, 466, 468, 472, 481], "theoret": [95, 184], "conclud": [95, 100, 104], "rigor": 95, "aros": 95, "onward": [95, 101, 184, 219, 253, 331, 338, 342, 481], "impract": 95, "enorm": 95, "daili": [95, 462, 481], "proven": [95, 191, 382, 463], "believ": [95, 290, 463], "synthes": [95, 191, 384], "largest": [95, 99, 165, 181, 184, 273, 320, 342, 350, 360, 460, 461, 462, 463, 464, 465, 466, 474, 481], "smallest": [95, 107, 181, 184, 273, 342, 350, 360, 367, 380, 450, 463, 464, 465, 466, 481], "jan": [95, 181, 339, 346, 403, 462, 467, 470, 471, 473, 476, 477, 478, 479, 480, 481], "apr": [95, 453, 462, 465], "jun": [95, 221, 364, 462], "jul": [95, 221, 462, 473], "nov": [95, 181, 207, 221, 243, 339, 364, 462, 477], "itali": 95, "rome": 95, "franc": 95, "pari": [95, 104, 423, 447], "washington": [95, 246], "dc": [95, 259, 291, 411, 465], "subset": [95, 103, 156, 165, 175, 233, 245, 246, 248, 251, 255, 260, 267, 269, 293, 297, 312, 326, 330, 335, 342, 356, 363, 371, 408, 411, 413, 420, 428, 463, 465, 467, 476, 478, 481], "listcomp": [95, 120, 429, 440], "genexp": [95, 429], "concis": [95, 98, 165, 290, 338, 426, 460, 464, 473, 477, 481], "line_list": 95, "stripped_it": 95, "stripped_list": 95, "expr": [95, 120, 142, 338, 386, 427, 428, 434, 460, 464, 468, 479, 480, 481], "sequence1": [95, 460], "condition1": 95, "expr2": [95, 428, 460], "sequence2": [95, 460], "condition2": 95, "expr3": [95, 428], "sequence3": 95, "condition3": 95, "exprn": [95, 460], "sequencen": [95, 460], "conditionn": 95, "obj_tot": 95, "list_all_object": [95, 464], "expr1": [95, 428, 460], "seq1": [95, 289, 460], "doubtless": [95, 461, 462, 463], "weren": [95, 104, 233, 461, 462, 463, 464, 465, 467], "generate_int": [95, 462, 463], "gen": [95, 253, 259, 428, 462, 463, 473, 476, 481], "messier": [95, 104, 462, 463, 467], "test_gener": [95, 462, 463, 481], "inord": [95, 462, 463], "queen": [95, 316, 317, 462, 463], "nxn": [95, 462, 463], "board": [95, 99, 175, 462, 463], "threaten": [95, 462, 463], "knight": [95, 107, 305, 424, 440, 444, 462, 463, 479], "rout": [95, 108, 210, 383, 450, 462, 463, 467, 475], "chessboard": [95, 462, 463], "messi": [95, 463, 467], "becam": [95, 147, 211, 291, 333, 350, 364, 384, 460, 466, 467, 476, 479, 480, 481], "cumul": [95, 216, 224, 273, 306, 341, 378, 380, 453, 465, 473, 475, 476, 481], "itera": 95, "iterb": 95, "sentenc": [95, 224, 317, 362, 462, 463, 466, 481], "fragment": [95, 139, 312, 342, 392, 393, 410, 411, 465, 467, 473, 474, 481], "is_even": [95, 417], "verb": [95, 291], "10000": [95, 306, 331, 365, 382, 463, 474, 481], "rand_list": 95, "769": 95, "7953": 95, "9828": 95, "6431": 95, "8442": 95, "9878": 95, "6213": 95, "2207": 95, "shortest": [95, 193, 223, 259, 460, 465, 467, 468, 469, 473], "broad": [95, 181, 290, 392, 462, 465, 467, 474, 481], "interv": [95, 100, 175, 181, 245, 267, 291, 306, 316, 331, 341, 350, 360, 363, 364, 374, 382, 464, 466, 473, 477, 479, 481], "elem": [95, 145, 158, 223, 224, 259, 342, 411, 440, 465, 467, 471, 473], "endless": [95, 259, 460, 462, 464, 465, 481], "tee": [95, 175, 259, 464, 481], "ne": [95, 110, 289, 367], "starmap": [95, 223, 259, 273, 281, 474], "rubi": [95, 341, 450], "filterfals": [95, 110, 223, 259, 341], "takewhil": [95, 259], "less_than_10": 95, "dropwhil": [95, 259], "permut": [95, 259, 316, 433, 460, 466, 469, 479, 481], "aba": 95, "came": [95, 100, 101, 191, 200, 281, 461, 462, 463, 464, 465, 481], "combinations_with_replac": [95, 158, 259, 316, 467, 469, 481], "relax": [95, 181, 242, 473, 480, 481], "key_func": 95, "city_list": 95, "decatur": 95, "huntsvill": 95, "selma": 95, "anchorag": 95, "ak": 95, "nome": 95, "flagstaff": 95, "az": 95, "phoenix": 95, "tucson": 95, "get_stat": [95, 225, 475, 481], "city_st": 95, "kwarg1": [95, 465], "value1": [95, 165, 465, 480], "kwarg2": [95, 465], "value2": [95, 165, 465, 480], "server_log": [95, 465], "initial_valu": [95, 256], "abbc": 95, "mul": [95, 110, 139, 184, 259, 273, 281, 289, 418], "clearer": [95, 191, 290, 342, 460, 461, 462, 463, 464, 466, 478, 481], "floordiv": [95, 120, 289, 429], "not_": [95, 289], "and_": [95, 289], "or_": [95, 289], "eq": [95, 120, 179, 289, 384, 429, 481], "lt": [95, 120, 289, 342, 382, 415, 429, 433, 461, 473], "gt": [95, 120, 236, 237, 238, 289, 415, 429, 473, 474], "ge": [95, 289], "is_": [95, 289], "is_not": [95, 289], "stripped_lin": 95, "existing_fil": 95, "file_list": 95, "anonym": [95, 174, 221, 266, 276, 291, 382, 425, 428, 460, 473, 481], "adder": 95, "print_assign": 95, "multiway": 95, "disentangl": 95, "heck": 95, "essenc": 95, "disagre": [95, 376, 460], "assist": [95, 107, 262, 276, 383, 397, 424, 426, 462, 463, 464, 465, 466, 467, 478, 481], "draft": [95, 107, 149, 269, 294, 408, 460, 461, 462, 463, 464, 465, 466, 467, 477, 478, 481], "articl": [95, 107, 224, 233, 259, 269, 286, 382, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480], "ian": [95, 405, 471], "bick": [95, 405], "nick": [95, 98, 107, 322, 426, 462, 464, 465, 466, 467, 469, 473, 474, 475, 476, 477, 478, 481], "coghlan": [95, 98, 107, 322, 464, 465, 466, 467, 469, 473, 474, 475, 476, 477, 478, 481], "efford": 95, "jewett": [95, 464, 466], "mike": [95, 462, 464, 465, 466, 471, 481], "krell": 95, "leandro": 95, "lameiro": 95, "jussi": 95, "salmela": 95, "collin": [95, 466, 467, 476, 481], "winter": [95, 223, 466, 467], "blake": [95, 233], "winton": 95, "june": [95, 148, 406, 469, 478], "juli": [95, 148, 188, 424, 433, 462, 463, 467, 481], "typo": [95, 149, 384, 387, 428, 462, 481], "tutor": 95, "harold": [95, 343], "abelson": 95, "gerald": 95, "jay": [95, 461, 473, 481], "sussman": 95, "mitpress": 95, "mit": [95, 249, 305, 424, 481], "sicp": 95, "classic": [95, 165, 182, 201, 228, 269, 367, 382, 388, 447, 462, 463, 465, 467, 468, 473, 481], "textbook": [95, 104, 317, 465, 466], "scienc": [95, 104, 341, 363, 476], "defmacro": 95, "rambl": 95, "wikipedia": [95, 107, 158, 233, 269, 345, 382, 465, 473, 474, 481], "functional_program": 95, "partial_appl": 95, "curri": 95, "gnosi": 95, "cx": [95, 259, 463], "tpip": 95, "mertz": 95, "ibm": [95, 156, 175, 184, 345, 420, 463, 465, 474, 481], "developerwork": 95, "malcolm": [97, 317, 467, 473, 477, 481], "ukasz": [97, 286, 473, 475, 476, 477, 478, 479, 480, 481], "langa": [97, 286, 473, 475, 476, 477, 478, 479, 480, 481], "yum": 97, "sdt": 97, "sudo": [97, 101], "29564": [97, 481], "python18035": 97, "_pyeval_evalframedefault": [97, 102, 481], "29565": 97, "dtrace_function_entri": 97, "29566": [97, 481], "29567": 97, "dtrace_function_return": 97, "29568": [97, 481], "29569": 97, "29570": 97, "29571": [97, 481], "maybe_dtrace_lin": 97, "stapsdt": 97, "readelf": [97, 481], "grep": [97, 101, 102, 245, 346, 460, 481], "0000000000000000": 97, "00308d78": 97, "libpython3": [97, 481], "3dm": 97, "00365b68": 97, "0x00000254": 97, "0x00000020": [97, 174], "0x00000010": 97, "nt_gnu_abi_tag": 97, "0x00000274": 97, "0x00000024": 97, "0x00000014": 97, "nt_gnu_build_id": 97, "bitstr": 97, "df924a2b08a7e89f6e11251d4602022977af2670": 97, "0x002d6c30": 97, "0x00000144": 97, "0x00000031": 97, "nt_stapsdt": 97, "gc__start": 97, "0x00000000004371c3": 97, "0x0000000000630ce2": 97, "0x00000000008d6bf6": 97, "ebx": 97, "0x00000030": 97, "gc__done": 97, "0x00000000004374e1": 97, "0x00000000008d6bf8": 97, "rax": 97, "0x00000045": 97, "function__entri": 97, "0x000000000053db6c": 97, "0x00000000008d6be8": 97, "rbp": 97, "r12": 97, "eax": 97, "0x00000046": 97, "function__return": 97, "0x000000000053dba8": 97, "0x00000000008d6bea": 97, "copyinstr": 97, "timestamp": [97, 101, 124, 158, 161, 181, 201, 207, 232, 243, 291, 309, 333, 338, 339, 356, 364, 378, 420, 430, 453, 463, 467, 474, 476, 478, 481], "probenam": 97, "basenam": [97, 101, 118, 182, 191, 290, 292, 294, 367, 373, 397, 420, 481], "arg0": [97, 291, 351], "call_stack": 97, "156641360502280": 97, "156641360518804": 97, "156641360532797": 97, "function_3": 97, "156641360546807": 97, "156641360563367": 97, "156641360578365": 97, "156641360591757": 97, "156641360605556": 97, "156641360617482": 97, "156641360629814": 97, "156641360642285": 97, "156641360656770": 97, "156641360669707": 97, "156641360687853": 97, "function_4": 97, "156641360700719": 97, "156641360719640": 97, "function_5": 97, "156641360732567": 97, "156641360747370": 97, "user_str": 97, "thread_ind": 97, "stap": 97, "stp": 97, "11408": 97, "8274": 97, "_abcol": 97, "11414": 97, "425": [97, 239, 480, 481], "11418": 97, "490": 97, "11424": 97, "11428": 97, "426": [97, 239], "11433": 97, "libpython": [97, 454, 470, 471, 479, 481], "6dm": 97, "import__find__load__start": [97, 478], "import__find__load__don": [97, 478], "find_and_load": 97, "frameptr": 97, "arg4": 97, "fn_call": 97, "033": [97, 175, 481], "1h": [97, 467], "6s": [97, 101, 188], "80s": 97, "30s": 97, "foreach": 97, "6d": [97, 101], "moodi": [98, 474, 475, 476], "ip_address": [98, 140, 257, 335], "192": [98, 101, 241, 257, 265, 343], "ipv4address": [98, 257, 476, 481], "db8": [98, 257], "ipv6address": [98, 257, 476, 480, 481], "3221225985": [98, 257], "42540766411282592856903984951653826561": 98, "ip_network": [98, 257], "ipv4network": [98, 257, 476, 478, 481], "ipv6network": [98, 257, 476, 478, 481], "3221225984": 98, "42540766411282592856903984951653826560": 98, "firewal": [98, 245, 281, 461, 474], "router": [98, 257, 335], "hybrid": [98, 181, 475], "ip_interfac": [98, 257, 481], "ipv4interfac": [98, 257, 481], "ipv6interfac": [98, 257, 481], "ipv": [98, 481], "intuit": [98, 99, 100, 104, 149, 184, 188, 259, 373, 428, 460, 461, 462, 475], "addr4": 98, "addr6": [98, 476], "host4": 98, "host6": 98, "net4": 98, "num_address": [98, 257], "net6": 98, "4294967296": [98, 257, 468], "254": [98, 481], "netmask": [98, 257, 476, 481], "hostmask": [98, 257], "ffff": [98, 257, 460, 474], "explod": [98, 257, 460, 462, 481], "0db8": 98, "0001": [98, 181, 433, 478, 481], "explos": [98, 411], "lend": [98, 462], "agnost": [98, 342, 384], "addressvalueerror": [98, 257], "netmaskvalueerror": [98, 257], "168": [98, 101, 241, 257, 265, 343], "octet": [98, 198, 204, 257, 303, 343, 392, 481], "concern": [98, 100, 124, 131, 156, 165, 267, 297, 312, 339, 360, 388, 424, 461, 462, 467, 477, 478, 479, 480, 481], "safer": [99, 191, 297, 463, 464, 472, 481], "evolv": [99, 255, 266, 430], "granular": [99, 101, 248, 291, 350, 481], "old_binascii": 99, "stringent": [99, 475], "unhexlifi": [99, 144, 481], "qwertyuiop": 99, "boo": 99, "circuit": [99, 342, 440], "led": [99, 165, 291, 461, 474, 477, 481], "field_size_limit": [99, 173, 465, 481], "price": [99, 158, 219, 317, 410, 447, 464, 465, 476, 479, 481], "xxlimit": [99, 481], "my_struct": 99, "pay": [99, 101, 104, 191, 459, 472, 475], "myattribut": 99, "rewrit": [99, 103, 198, 216, 291, 376, 460, 463, 465, 467, 468, 476, 479, 481], "unintent": [99, 101, 265, 346, 473, 481], "pickleabl": [99, 267, 481], "blueprint": 99, "py_tp_travers": 99, "grew": [99, 469, 473], "awkward": [99, 467, 479], "0x03090000": [99, 480], "tedious": [99, 107, 126, 149, 382, 387, 460, 465, 479], "roadblock": 99, "get_defining_class": 99, "get_type_of_self": 99, "example_method": 99, "example_method_doc": 99, "my_method": 99, "module_def": 99, "span": [99, 104, 120, 165, 191, 218, 238, 276, 317, 342, 343, 425, 465, 466, 472, 474, 476, 477, 481], "capi": [99, 467], "iron": 99, "vinay": [100, 101, 463, 464, 466, 467, 469, 473, 474, 475, 476, 477, 478, 479, 480], "sajip": [100, 101, 463, 464, 466, 467, 469, 473, 474, 475, 476, 477, 478, 479, 480], "vinay_sajip": [100, 101], "dove": [100, 101], "investig": [100, 342], "confirm": [100, 187, 265, 295, 384, 393, 398, 459, 481], "serious": [100, 124, 191, 211, 233, 265, 387], "told": [100, 384, 397, 426, 463], "resund": 100, "malm": 100, "threshold": [100, 101, 265, 342, 465], "loglevel": 100, "numeric_level": 100, "afresh": [100, 167, 265], "filemod": [100, 101, 265, 340, 356, 474, 479, 481], "mylib": [100, 386], "do_someth": [100, 101, 149, 339, 386, 428], "explor": [100, 108, 165, 189, 238, 245, 291, 382, 397, 411, 426, 459, 466, 473, 481], "levelnam": [100, 101, 265, 266, 267, 281, 464, 467, 473], "asctim": [100, 101, 265, 266, 307, 364, 461, 467, 473], "2010": [100, 101, 107, 265, 330, 343, 350, 388, 467, 473], "41": [100, 259, 305, 316, 317, 341, 417, 449, 466, 480, 481], "iso8601": [100, 417], "3339": 100, "datefmt": [100, 101, 265, 266], "46": [100, 158, 316, 342, 450, 470, 479, 480, 481], "am": [100, 101, 181, 264, 297, 364, 432], "invest": 100, "favourit": 100, "beverag": 100, "hereaft": [100, 306, 353], "getlogg": [100, 101, 123, 265, 386, 463, 467, 469, 480, 481], "diagram": [100, 191, 223, 336, 462], "threefold": 100, "setlevel": [100, 101, 123, 265, 281, 463, 481], "addhandl": [100, 101, 265, 469], "removehandl": [100, 101, 265, 386, 467], "addfilt": [100, 101, 265], "removefilt": [100, 265], "paragraph": [100, 137, 195, 245, 260, 290, 291, 339, 342, 362, 411, 418, 424, 426, 460, 463, 481], "baz": [100, 101, 102, 118, 165, 245, 248, 260, 265, 266, 281, 291, 309, 360, 383, 386, 387, 388, 405, 430, 434], "bam": [100, 265], "descend": [100, 106, 161, 194, 203, 253, 265, 281, 294, 306, 340, 367, 374, 386, 408, 409, 411, 465, 467, 481], "ancestor": [100, 101, 175, 265, 266, 281, 294, 374, 387, 411, 426, 463, 481], "setformatt": [100, 101, 265, 267], "deconfigur": 100, "establish": [100, 124, 191, 245, 246, 267, 281, 297, 300, 303, 317, 326, 333, 339, 357, 393, 403, 425, 426, 427, 467, 473, 481], "fmt": [100, 101, 181, 199, 257, 265, 293, 302, 360, 450, 466, 481], "millisecond": [100, 124, 175, 181, 245, 265, 326, 374, 382, 404, 473, 477, 480, 481], "tack": 100, "gmtime": [100, 101, 148, 181, 207, 265, 269, 364, 462, 473, 474, 481], "fileconfig": [100, 101, 266, 467, 475, 478, 481], "simple_exampl": [100, 101], "simple_logging_modul": 100, "2005": [100, 101, 181, 269, 424, 464, 465, 466, 481], "03": [100, 101, 181, 184, 265, 339, 343, 364, 449, 463, 465, 481], "618": [100, 259, 470, 481], "620": [100, 464], "697": [100, 472, 481], "773": 100, "conf": [100, 101, 104, 294, 450, 463, 473, 481], "simpleexampl": [100, 101], "consolehandl": 100, "simpleformatt": 100, "logger_root": [100, 266], "logger_simpleexampl": 100, "handler_consolehandl": 100, "formatter_simpleformatt": 100, "simple_logging_config": 100, "38": [100, 101, 188, 223, 265, 335, 380, 463, 470, 479, 480, 481], "977": [100, 286], "979": 100, "56": [100, 102, 181, 184, 223, 256, 281, 335, 341, 440, 442, 473, 476, 481], "054": 100, "055": 100, "130": [100, 257, 341, 467], "noncod": 100, "disable_existing_logg": [100, 101, 266], "mypackag": 100, "myhandl": [100, 101, 266], "superset": [100, 304, 342, 428, 460, 463, 481], "yaml": [100, 118, 249, 260, 266, 467, 470, 473], "ext": [100, 101, 156, 189, 198, 266, 274, 292, 295, 450, 463, 464, 473, 481], "resort": [100, 182, 264, 265, 462], "lastresort": [100, 265, 473], "raiseexcept": [100, 101, 265, 267, 473], "absenc": [100, 108, 113, 253, 263, 265, 317, 339, 363, 426, 481], "organis": [100, 101, 265], "orgnam": 100, "advis": [100, 167, 174, 246, 281, 286, 291, 363, 398, 423, 424, 426, 428, 473, 479, 481], "prerog": 100, "audienc": [100, 305, 398, 432, 463, 468], "interfer": [100, 130, 165, 224, 264, 295, 481], "deliv": [100, 108, 131, 181, 223, 326, 331, 333, 374, 388, 428, 466, 481], "notset": [100, 265, 266, 281], "desk": 100, "staff": [100, 330, 356], "convinc": [100, 264], "xp": [100, 267, 463, 476], "criteria": [100, 246, 265, 306], "reopen": [100, 267, 297, 338, 357, 467, 477, 481], "batch": [100, 104, 124, 259, 297, 346, 459, 472, 476, 481], "bufferingformatt": [100, 265], "provis": [100, 300, 339, 424, 428], "trailer": [100, 291, 422, 429, 481], "swallow": [100, 101, 137, 450, 460, 467, 473, 479, 481], "misconfigur": [100, 245, 481], "handleerror": [100, 265, 267], "altogeth": [100, 101, 149, 211, 420, 426, 473], "isenabledfor": [100, 101, 265, 467, 481], "expensive_func1": 100, "expensive_func2": 100, "deepli": [100, 360, 387, 433, 460, 466, 481], "recomput": [100, 326, 327, 331, 364, 475, 481], "_srcfile": 100, "_getfram": [100, 140, 350, 448, 461, 471, 481], "logthread": 100, "getpid": [100, 124, 281, 291, 481], "logprocess": 100, "logmultiprocess": 100, "logasynciotask": 100, "past": [101, 118, 181, 191, 214, 245, 253, 291, 297, 312, 343, 346, 364, 405, 473, 475, 476, 479, 480, 481], "somelogg": 101, "auxiliary_modul": 101, "spam_appl": 101, "fh": 101, "auxiliari": [101, 259, 371, 473, 481], "some_funct": [101, 387, 388], "module_logg": 101, "47": [101, 181, 207, 259, 316, 317, 422, 440, 449, 466, 470, 481], "663": 101, "665": 101, "668": [101, 330], "670": [101, 471], "671": 101, "672": [101, 219], "hi": [101, 145, 174, 302, 342, 367, 384, 481], "relativecr": [101, 265], "threadnam": [101, 265], "mainthread": [101, 481], "505": [101, 108, 239], "1007": 101, "1507": [101, 466], "1508": 101, "2258": 101, "2512": 101, "3009": 101, "3013": 101, "3515": 101, "3761": 101, "4017": 101, "4513": 101, "4518": 101, "interspers": [101, 290], "quota": [101, 210, 246], "dormant": 101, "12s": 101, "8s": [101, 265, 266, 467, 473], "jackdaw": 101, "quartz": 101, "logger1": 101, "area1": 101, "logger2": 101, "area2": 101, "zephyr": 101, "blow": [101, 149, 290, 473, 481], "vex": [101, 461], "daft": 101, "jump": [101, 189, 191, 245, 268, 295, 351, 382, 426, 439, 463, 465, 468, 471, 472, 477, 478, 481], "zebra": [101, 158, 297], "jail": 101, "zesti": 101, "vixen": 101, "quack": [101, 466], "five": [101, 184, 267, 269, 290, 291, 317, 336, 338, 339, 350, 392, 413, 460, 466, 474, 479, 481], "wizard": [101, 462], "warnings_and_below": 101, "filter_mak": 101, "levelno": [101, 265], "9999": [101, 102, 131, 148, 181, 245, 336, 473, 478, 481], "stoplisten": [101, 266], "data_to_send": 101, "sock_stream": [101, 105, 124, 267, 335, 336, 339, 360, 467, 478], "culprit": 101, "sluggish": 101, "poor": [101, 147, 303, 306, 317, 461, 462, 481], "infrastructur": [101, 156, 339, 398, 466, 467, 475, 478, 481], "capac": [101, 175, 267, 291, 341, 363, 465, 467], "precaut": 101, "eat": [101, 273, 481], "que": 101, "queue_handl": 101, "respect_handler_level": [101, 267, 476, 481], "rootlogg": 101, "default_tcp_logging_port": [101, 266], "unformat": [101, 260, 317], "logrecordstreamhandl": 101, "streamrequesthandl": [101, 336, 477, 481], "recv": [101, 105, 124, 281, 325, 327, 331, 335, 336, 339, 360, 367, 467, 476, 481], "slen": 101, "makelogrecord": [101, 265, 267], "handlelogrecord": 101, "lognam": [101, 227, 291], "wast": [101, 107, 468, 481], "bandwidth": [101, 107, 341, 439, 467, 470], "logrecordsocketreceiv": 101, "threadingtcpserv": [101, 336], "allow_reuse_address": [101, 336, 418, 466], "serve_until_stop": 101, "rd": [101, 339, 342], "wr": [101, 461, 481], "handle_request": [101, 168, 331, 336, 405, 418, 467], "5d": 101, "15s": [101, 265, 266, 467, 473], "69": [101, 364, 411, 470], "makepickl": [101, 267], "supervisor": 101, "gist": 101, "bone": [101, 457], "bash": [101, 153, 294, 329, 397, 445, 451, 481], "ensure_app": 101, "log_listen": 101, "webapp": 101, "unzip": [101, 223, 419, 421, 463, 481], "bottl": [101, 174, 466], "supervisorctl": 101, "tweak": [101, 290, 388, 461, 464, 477, 481], "usernam": [101, 108, 149, 171, 198, 201, 221, 227, 246, 267, 291, 292, 303, 333, 392, 393, 473, 474, 476, 481], "customadapt": 101, "connid": 101, "some_conn_id": 101, "threadloc": 101, "contextfilt": 101, "inject": [101, 124, 135, 265, 270, 329, 338, 346, 356, 384, 453, 465, 470, 476, 481], "sheila": 101, "ips": [101, 481], "231": 101, "5s": 101, "a1": [101, 226, 481], "a2": [101, 226, 317], "lvl": 101, "lvlname": 101, "getlevelnam": [101, 265], "webapplib": 101, "11s": 101, "appnam": [101, 267], "9s": 101, "4s": 101, "ctx_request": 101, "ctx_appnam": 101, "injectingfilt": 101, "num_request": 101, "process_request": [101, 336], "splitext": [101, 198, 292, 294, 356, 450, 466, 477, 481], "adhf": 101, "argumentdefaultshelpformatt": [101, 118, 481], "ap": 101, "aa": [101, 158, 259, 317, 440, 467], "app1": 101, "app2": 101, "49": [101, 243, 259, 265, 281, 380, 440, 444, 447, 470, 479, 480, 481], "wc": 101, "153": 101, "147": [101, 479], "600": [101, 181, 477, 481], "issue3770": 101, "listener_configur": 101, "mptest": 101, "processnam": [101, 265, 281], "10s": [101, 345], "listener_process": 101, "print_exc": [101, 365, 379, 481], "worker_configur": 101, "worker_process": 101, "current_process": [101, 281], "orchestr": 101, "put_nowait": [101, 132, 267, 281, 314], "logger_thread": 101, "qh": 101, "ham": [101, 158, 168, 188, 223, 253, 277, 319, 428, 430, 439, 476], "egg": [101, 158, 173, 188, 216, 223, 224, 249, 256, 294, 305, 317, 319, 328, 342, 346, 356, 379, 383, 384, 387, 388, 393, 411, 420, 430, 439, 441, 444, 447, 460, 481], "mplog": 101, "foofil": 101, "wp": 101, "lp": [101, 268, 471], "max_work": [101, 124, 164, 473, 481], "log_filenam": 101, "logging_rotatingfile_exampl": 101, "my_logg": 101, "mylogg": [101, 265], "maxbyt": [101, 266, 267, 467], "backupcount": [101, 266, 267, 467], "logfil": [101, 149], "backup": [101, 110, 216, 267, 338, 356, 466, 473, 478, 481], "bf": [101, 317, 449], "df": [101, 467], "924": 101, "494": [101, 477], "833": 101, "recal": [101, 245], "bracemessag": 101, "dollarmessag": 101, "unwieldi": 101, "palat": 101, "brethren": 101, "2f": [101, 132, 219, 343, 392, 442, 466, 467, 469, 481], "penalti": [101, 179, 214, 460, 473], "trip": [101, 147, 241, 376, 466, 468, 469, 471, 481], "sugar": [101, 167, 223, 242, 248, 259, 338, 439, 468], "styleadapt": 101, "stacklevel": [101, 256, 265, 398, 465, 481], "makerecord": [101, 265], "setloggerclass": [101, 265], "setlogrecordfactori": [101, 265], "interrog": [101, 203], "getlogrecordfactori": [101, 265], "old_factori": [101, 265], "record_factori": [101, 265], "custom_attribut": [101, 265], "0xdecafbad": [101, 265], "born": [101, 342], "zmq": 101, "pyzmq": 101, "sock": [101, 104, 105, 124, 131, 134, 240, 306, 327, 335, 336, 339, 360, 473, 476, 478, 481], "pub": [101, 122, 221, 330, 458], "push": [101, 155, 158, 167, 175, 177, 184, 189, 211, 280, 281, 329, 363, 411, 433, 434, 439, 460, 466, 474, 481], "5556": 101, "zeromqsockethandl": [101, 481], "enqueu": [101, 267, 281, 481], "send_json": 101, "socktyp": [101, 267, 335, 360, 467], "subscrib": [101, 246, 384, 426, 481], "zeromqsocketlisten": [101, 481], "setsockopt_str": 101, "dequeu": [101, 267, 481], "recv_json": 101, "django": [101, 158, 295, 300, 387, 467, 474], "specialfilt": 101, "mail_admin": 101, "adminemailhandl": 101, "myproject": [101, 386], "runnabl": [101, 124, 481], "gz": [101, 216, 232, 274, 294, 330, 356, 397, 422, 424, 451, 458, 460, 465, 472, 473, 481], "f_in": [101, 232], "f_out": [101, 232], "copyfileobj": [101, 108, 232, 330, 479, 481], "rh": 101, "six": [101, 103, 181, 223, 224, 297, 316, 317, 338, 374, 392, 420, 466, 473, 475, 478, 479, 481], "zcat": 101, "02": [101, 102, 181, 184, 265, 281, 330, 364, 421, 449, 460, 462, 463, 464, 473, 477, 481], "767": [101, 404], "996": 101, "997": 101, "998": 101, "stop_ev": 101, "initialis": [101, 241, 267, 322, 350, 387, 426, 453, 475, 477, 481], "heterogen": [101, 342, 468, 481], "bunch": [101, 126, 198, 205, 290, 460, 461, 462, 463, 466, 481], "config_initi": 101, "config_work": 101, "config_listen": 101, "hang": [101, 108, 133, 281, 326, 331, 360, 463, 473, 481], "5424": [101, 267], "compliant": [101, 110, 124, 144, 181, 192, 193, 194, 196, 199, 200, 201, 205, 206, 207, 213, 233, 260, 269, 309, 329, 338, 364, 392, 405, 424, 428, 462, 465, 467, 472, 474, 477, 478, 481], "ufeffunicod": 101, "feff": [101, 107, 156], "xef": [101, 144, 392, 433], "xbb": [101, 433], "xbf": [101, 433], "readili": [101, 256, 281, 357, 475, 481], "parseabl": [101, 301, 329], "serialis": [101, 156, 322, 411, 481], "structuredmessag": 101, "fnum": 101, "specialis": [101, 108, 338, 342, 384, 429, 481], "jsonencod": [101, 260, 477, 481], "unicode_escap": [101, 156], "set_valu": 101, "snowman": [101, 472], "u2603": 101, "chown": [101, 140, 291, 330, 474, 481], "owned_file_handl": 101, "creator": [101, 281, 291, 330, 409, 420, 421, 426, 432, 481], "puls": 101, "chowntest": 101, "resid": [101, 198, 228, 269, 291, 311, 320, 340, 430, 460, 481], "orthogon": 101, "getmessag": [101, 265, 412], "cater": [101, 191, 266, 267], "myfilt": [101, 473], "param": [101, 137, 149, 194, 195, 201, 203, 207, 240, 253, 279, 291, 303, 338, 386, 392, 393, 397, 417, 418, 429, 467, 473, 480, 481], "noshow": 101, "onelineexceptionformatt": 101, "formatexcept": [101, 265], "exc_text": [101, 265, 267, 481], "configure_log": 101, "2015": [101, 181, 324, 424, 454, 476, 481], "07": [101, 181, 265, 269, 317, 343, 364, 376, 423, 465, 466, 477, 480, 481], "logtest7": 101, "nzerodivisionerror": 101, "simplist": [101, 387], "render": [101, 107, 124, 187, 196, 199, 336, 374, 379, 409, 426, 459, 463, 466, 467, 479, 481], "audibl": [101, 175], "speech": [101, 293], "tts": 101, "frequenc": [101, 115, 364, 404, 413, 466], "swamp": 101, "spoken": 101, "espeak": 101, "ttshandler": 101, "femal": [101, 341], "voic": [101, 334, 462], "s150": 101, "ven": 101, "f3": [101, 118], "goodby": [101, 138, 221, 297, 367, 441], "parameteris": [101, 384, 471], "log_if_error": 101, "target_handl": 101, "flush_level": 101, "flushlevel": [101, 267], "write_lin": 101, "decorated_foo": 101, "bufferinghandl": [101, 267], "har": [101, 153, 386, 473, 475, 481], "bufferingsmtphandl": 101, "mailhost": [101, 266, 267], "password": [101, 108, 171, 221, 227, 231, 233, 246, 267, 281, 284, 286, 291, 303, 308, 324, 333, 337, 339, 357, 359, 392, 393, 417, 420, 465, 466, 467, 474, 475, 476, 477, 481], "mailport": 101, "starttl": [101, 246, 267, 286, 333, 339, 466, 473, 474, 481], "login": [101, 171, 221, 246, 284, 286, 291, 333, 337, 357, 393, 473, 481], "nto": [101, 333], "nsubject": 101, "addresse": [101, 267], "102": [101, 184, 239, 259, 341, 467, 473, 479, 480], "eleven": 101, "eleventh": 101, "utcformatt": 101, "console1": 101, "console2": 101, "501": [101, 108, 239, 243, 291, 473], "sat": [101, 148, 181, 339, 341], "revert": [101, 168, 240, 241, 322, 356, 360, 453, 467, 474, 477, 481], "loggingcontext": 101, "old_level": 101, "ev": [101, 339], "logctx": 101, "generalis": 101, "subcommand": [101, 118, 467, 473], "scriptnam": 101, "subpars": [101, 118, 473, 478, 481], "add_subpars": [101, 118, 473, 478, 481], "start_cmd": 101, "add_pars": [101, 118, 473], "stop_cmd": 101, "restart_cmd": 101, "log_level": 101, "plural": [101, 228, 467, 478, 481], "rfind": [101, 276, 342, 466, 473, 474, 476, 481], "ui": [101, 405, 459, 460, 481], "pyside2": 101, "pyqt5": 101, "qthandler": 101, "qthread": 101, "qtcore": 101, "qtgui": 101, "qtwidget": 101, "pyqtsign": 101, "pyqtslot": 101, "qobject": 101, "slotfunc": 101, "ctname": 101, "currentthread": [101, 188, 363, 470, 481], "objectnam": 101, "kick": 101, "qthreadnam": 101, "isinterruptionrequest": 101, "1f": [101, 316, 380, 481], "qwidget": 101, "orang": [101, 158, 289, 382, 440, 469, 481], "textedit": 101, "te": 101, "qplaintextedit": 101, "monospac": [101, 245, 362], "qfont": 101, "nosuchfont": 101, "setstylehint": 101, "setfont": 101, "setreadon": 101, "pb": [101, 268], "qpushbutton": 101, "work_button": 101, "log_button": 101, "clear_button": 101, "update_status": 101, "fs": [101, 164, 176, 291, 341, 481], "abouttoquit": 101, "force_quit": 101, "lay": [101, 213], "qvboxlayout": 101, "addwidget": 101, "setfixeds": 101, "900": [101, 447], "click": [101, 149, 175, 187, 245, 291, 356, 371, 382, 424, 457, 459, 474, 477, 478, 479, 481], "manual_upd": 101, "clear_display": 101, "start_thread": [101, 360, 481], "seten": 101, "worker_thread": 101, "setobjectnam": 101, "workerthread": 101, "movetothread": 101, "kill_thread": 101, "requestinterrupt": 101, "isrun": 101, "appendhtml": 101, "qapplic": 101, "exec_": 101, "2009": [101, 181, 317, 338, 388, 424, 461, 467, 469], "3164": 101, "hail": 101, "2003": [101, 181, 265, 411, 421, 449, 463, 466, 481], "widespread": [101, 200, 432, 461, 473], "sysloghandler5424": 101, "tz_offset": 101, "msgid": [101, 198, 207], "isoformat": [101, 181, 188, 338, 423, 463, 477, 478, 481], "has_offset": 101, "hrs": 101, "hostnam": [101, 108, 124, 134, 140, 149, 156, 182, 207, 221, 240, 246, 257, 267, 281, 286, 291, 303, 311, 333, 335, 339, 392, 393, 417, 447, 460, 463, 467, 472, 473, 474, 475, 478, 481], "gethostnam": [101, 105, 140, 291, 335, 481], "procid": 101, "sdata": 101, "structured_data": 101, "sd": 101, "sdid": 101, "dv": [101, 360], "specir": 101, "12345": [101, 174, 223, 438, 440, 463, 469, 477, 481], "bozz": [101, 266], "fizz": 101, "buzz": 101, "54321": [101, 440], "rab": 101, "zab": 101, "zzif": 101, "loggerwrit": 101, "info_fp": 101, "debug_fp": 101, "merci": [101, 426], "slghtli": 101, "bufferingloggerwrit": 101, "52": [101, 102, 104, 137, 181, 273, 316, 317, 339, 341, 343, 380, 440, 442, 464, 467, 481], "unhelp": [101, 460, 481], "garbl": [101, 481], "circumv": 101, "pointless": [101, 481], "decomposit": [101, 385, 481], "pablo": [102, 467, 470, 471, 472, 476, 478, 479, 480, 481], "galindo": [102, 470, 471, 472, 478, 479, 480, 481], "interpos": 102, "have_perf_trampolin": 102, "1000000": [102, 165, 181, 219, 223, 281, 306, 365, 439, 467, 477, 481], "my_script": 102, "91": [102, 341], "08": [102, 181, 207, 243, 265, 339, 364, 423, 480, 481], "_start": 102, "90": [102, 103, 145, 153, 259, 281, 316, 341, 382, 479], "71": [102, 380, 472, 481], "__libc_start_main": 102, "88": [102, 181, 341, 380, 476], "pymain_run_python": [102, 481], "constprop": 102, "_pyrun_anyfileobject": 102, "_pyrun_simplefileobject": 102, "run_mod": 102, "54": [102, 137, 316, 330, 341, 421, 463, 470, 471], "65": [102, 286, 316, 330, 341, 342, 447, 460, 466, 467, 476, 481], "_pyeval_vector": [102, 481], "_pylong_add": 102, "97": [102, 107, 120, 223, 276, 342, 467, 473], "_pyobject_malloc": [102, 481], "_py_eval_evalframedefault": 102, "58": [102, 156, 316, 341, 343, 481], "89": [102, 145, 184, 224, 335, 341, 439, 447, 448, 469, 473], "86": [102, 171, 219, 341, 343, 380, 382], "43": [102, 158, 171, 181, 221, 339, 342, 365, 439, 473, 479, 480, 481], "62": [102, 184, 236, 238, 380], "77": [102, 145, 184, 380, 382, 473], "activate_stack_trampolin": [102, 350, 472, 481], "deactivate_stack_trampolin": [102, 350, 472, 481], "do_profiled_stuff": 102, "non_profiled_stuff": 102, "fno": [102, 454, 470, 481], "mno": 102, "leaf": [102, 233, 291, 375, 384, 481], "dwarf": [102, 341, 426], "brett": [103, 306, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481], "cannon": [103, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480], "2020": [103, 342, 423, 424, 467, 470, 471, 478, 479, 480, 481], "guidanc": [103, 383, 467, 472, 481], "caniusepython3": 103, "tox": 103, "factor": [103, 107, 139, 159, 191, 233, 259, 290, 312, 342, 384, 386, 428, 429, 439, 462, 467, 474, 478, 480, 481], "cleaner": [103, 342, 460, 469, 474, 476, 481], "worst": [103, 104, 174, 186, 188, 426, 430, 453, 464, 477, 478, 481], "trove": [103, 463], "oldest": [103, 137, 225, 267, 363, 380, 400, 467, 473, 478, 479, 481], "feel": [103, 187, 290, 374, 388, 439, 462, 463, 466, 470], "implic": [103, 248, 281, 297, 392, 428, 481], "cheat": [103, 384], "sheet": [103, 148, 382, 384, 481], "pariti": [103, 481], "conserv": [103, 461, 464], "diff": [103, 110, 141, 188, 191, 386, 461, 464, 467, 473, 481], "2002": [103, 107, 181, 257, 424, 462, 463], "confluenc": 103, "brittl": 103, "pose": [103, 124, 460, 464], "difficulti": [103, 281, 460, 463], "isdecim": [103, 342, 343], "isnumer": [103, 342], "outdat": [103, 174, 248, 367, 466, 472, 473, 478, 481], "x00": [103, 174, 233, 256, 257, 282, 317, 335, 342, 345, 396, 481], "indexbyt": 103, "inevit": 103, "importlib2": 103, "absolute_import": [103, 111, 434, 465], "print_funct": [103, 110, 111, 434, 466], "werror": [103, 453, 454, 481], "lint": [103, 405, 472, 481], "analyz": [103, 277, 297, 317, 329, 339, 380, 384, 424, 433, 465, 466, 467, 473, 481], "discov": [103, 181, 194, 203, 242, 360, 386, 413, 461, 462, 463, 467, 473, 475, 481], "amk": [104, 317, 463, 466, 467], "regex": [104, 161, 218, 264, 300, 317, 357, 386, 461, 465, 466, 473, 475, 478, 481], "tex": 104, "automata": 104, "devot": 104, "akm": 104, "complement": [104, 317, 342, 382, 426, 474, 478, 480, 481], "elsewher": [104, 137, 155, 165, 270, 281, 322, 384, 392, 408, 425, 430, 433, 472, 475, 481], "za": [104, 107, 171, 317, 342, 433, 462], "z0": [104, 107, 171, 317, 343, 433], "9_": [104, 107, 317, 433], "dotal": [104, 317], "ct": [104, 105], "caaat": 104, "repetit": [104, 118, 147, 233, 259, 268, 273, 317, 342, 379, 386, 388, 398, 426, 428, 432, 462, 481], "fewer": [104, 245, 259, 317, 338, 374, 430, 463, 465, 468, 475, 477, 478, 479, 481], "bcd": [104, 259], "abcbd": 104, "abcb": 104, "bc": [104, 158, 245, 259, 342, 460], "quantifi": [104, 259, 312, 317, 471, 481], "brew": 104, "homebrew": 104, "ab": [104, 147, 158, 188, 232, 259, 268, 290, 307, 317, 342, 415, 424, 433, 440, 460, 463], "slash": [104, 219, 223, 253, 257, 290, 291, 294, 311, 356, 375, 392, 420, 421, 459, 481], "reductionist": 104, "bent": 104, "shorter": [104, 200, 223, 233, 259, 290, 345, 428, 460, 461, 464, 466, 467, 472, 473, 481], "ignorecas": [104, 317, 343, 481], "bloat": 104, "latex": [104, 466, 480], "stage": [104, 363, 393, 398, 408, 460, 480, 481], "findal": [104, 158, 317, 411, 449, 475, 481], "findit": [104, 277, 317, 462, 481], "tempo": 104, "clarifi": [104, 342, 387, 465, 466, 473, 475, 481], "drummer": 104, "drum": 104, "piper": 104, "lord": 104, "cook": [104, 175, 357, 481], "callable_iter": 104, "fromag": 104, "thu": [104, 148, 364], "1998": [104, 109, 316, 424], "multilin": [104, 156, 165, 245, 317, 333, 386, 472, 473, 480, 481], "0130": [104, 317], "capit": [104, 107, 184, 317, 342, 343, 384, 385, 425, 428, 460, 478, 480, 481], "0131": [104, 317], "dotless": [104, 317], "017f": [104, 317], "212a": [104, 317], "kelvin": [104, 317], "pam": [104, 481], "french": [104, 107, 364, 476, 478], "unreli": [104, 175, 317, 481], "cultur": [104, 228, 264, 317], "charref": 104, "9a": [104, 317], "fa": [104, 317], "crow": 104, "servo": 104, "cro": 104, "ervo": 104, "etern": [104, 137], "recit": 104, "bclass": 104, "declassifi": 104, "subtleti": [104, 181, 241], "collis": [104, 233, 287, 328, 459, 470, 475, 479, 480, 481], "front": [104, 167, 199, 206, 245, 259, 300, 388, 398, 421, 426, 428, 453, 460, 463, 465, 467, 481], "x08class": 104, "x08": [104, 345, 396], "dissect": [104, 461, 462], "subgroup": [104, 189, 211, 317, 473, 479, 481], "822": [104, 107, 198, 200, 228, 240, 333, 364, 462], "agent": [104, 108, 269, 270, 333, 350, 393, 394, 462, 466], "thunderbird": 104, "x11": [104, 367, 374, 393, 401, 481], "20061227": 104, "ababababab": 104, "upward": [104, 175, 297, 382, 387], "parenthesi": [104, 110, 120, 245, 425, 429, 464, 481], "abcd": [104, 107, 158, 188, 259, 463, 466, 470], "backrefer": [104, 317, 481], "spring": [104, 181, 223], "keystrok": [104, 153, 175, 331, 460, 467], "chose": [104, 248, 291, 432, 465], "subexpress": [104, 481], "punctuat": [104, 107, 329, 343, 433, 477], "groupdict": [104, 317, 481], "jane": [104, 106], "internald": [104, 246], "mon": [104, 148, 181, 207, 209, 463], "sec": [104, 364, 365, 476, 481], "zonen": 104, "zoneh": 104, "zonem": 104, "news": [104, 182, 192, 224, 267, 286, 392, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 476, 481, 482], "rc": [104, 174, 206, 294, 346, 353, 360, 397, 409], "autoexec": 104, "bat": [104, 294, 317, 360, 397, 481], "cut": [104, 152, 223, 245, 341, 364, 464, 466, 481], "subn": [104, 317, 467, 469, 472, 476, 481], "sweet": [104, 259], "p2": [104, 174, 259, 282, 346, 425, 439, 464, 470, 471, 476], "leftmost": [104, 145, 158, 188, 191, 224, 233, 317, 428, 464, 478, 479], "shoe": 104, "adjac": [104, 181, 188, 250, 268, 280, 317, 386, 408, 433, 459, 475, 478, 481], "abxd": [104, 317, 478], "carriag": [104, 176, 205, 206, 256, 317, 329, 342, 362, 405, 417, 433, 463, 465], "hexrepl": 104, "65490": 104, "49152": 104, "0xffd2": 104, "0xc000": 104, "bbbb": 104, "deed": 104, "swordfish": 104, "sdeedfish": 104, "bword": 104, "superstit": 104, "insuper": 104, "resist": [104, 233, 330, 461, 467, 474, 481], "temptat": [104, 386, 461], "backtrack": [104, 317, 481], "balanc": [104, 158, 475], "pain": [104, 264, 460, 465, 481], "dirti": 104, "terribl": 104, "neat": [104, 167, 462, 467], "pat": [104, 187, 218, 476], "unclear": [104, 472], "jeffrey": [104, 317, 339, 466, 467, 470, 471, 473, 481], "friedl": [104, 317], "master": [104, 107, 187, 191, 290, 291, 293, 297, 307, 317, 367, 368, 371, 372, 374, 382, 466, 481], "reilli": [104, 317, 365, 452, 462, 476, 481], "flavour": [104, 107, 248, 294, 356, 388, 465, 481], "inet": [105, 335, 481], "scoket": 105, "berkeley": [105, 182, 468], "serversocket": 105, "snmp": 105, "clientsocket": 105, "client_thread": 105, "peer": [105, 131, 210, 211, 286, 326, 339, 481], "eot": [105, 176], "mysocket": [105, 260], "clariti": [105, 290, 364, 425, 473, 481], "mysend": 105, "totals": 105, "msglen": [105, 335], "myrec": 105, "bytes_recd": 105, "2048": [105, 339, 403, 481], "x86": [105, 174, 298, 345, 454, 459, 466, 471, 478, 481], "amd64": [105, 301, 345, 353, 481], "arm": [105, 476, 481], "risc": [105, 481], "ntohl": [105, 335], "htonl": [105, 335], "ntoh": [105, 335, 470, 478, 481], "hton": [105, 335, 470, 478, 481], "setblock": [105, 291, 327, 335, 339, 481], "o_nonblock": [105, 291, 474, 476, 481], "o_ndelay": [105, 213, 291], "tcp_nodelay": [105, 124, 467, 477, 478, 481], "ready_to_read": 105, "ready_to_writ": 105, "in_error": 105, "potential_read": 105, "potential_writ": 105, "potential_err": 105, "outbound": 105, "andrew": [106, 107, 175, 424, 460, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481], "dalk": [106, 424, 462, 463, 465], "student_tupl": 106, "student": [106, 112, 173, 224, 345, 382, 384, 438, 459, 471, 473], "student_object": 106, "secondari": [106, 124, 245, 259, 306, 350, 467, 468, 481], "multisort": 106, "xs": 106, "timsort": [106, 473], "lexicograph": [106, 259, 342, 428, 440, 465], "schwartzian": 106, "cmp": [106, 214, 223, 342, 460, 461, 464, 468, 481], "strcoll": [106, 224, 264, 473], "cmp_to_key": [106, 223, 224, 342, 467, 473], "standard_way": 106, "double_revers": 106, "newgrad": 106, "japanes": [107, 156, 264, 464, 478], "hebrew": [107, 156], "russian": [107, 156], "emoji": [107, 473, 479, 481], "roman": [107, 370, 385, 463, 481], "0x10ffff": [107, 223, 350, 474], "million": [107, 341, 439], "265e": 107, "0x265e": 107, "0061": 107, "0062": 107, "0063": 107, "007b": 107, "cur": [107, 269, 279, 338, 343, 385, 428, 433, 466, 467, 477, 481], "2167": 107, "2168": 107, "nine": [107, 184, 353, 475, 481], "265f": 107, "pawn": 107, "1f600": 107, "grin": 107, "1f609": 107, "wink": 107, "paper": [107, 118, 152, 335, 382, 463, 481], "glyph": [107, 206, 245], "diagon": [107, 439, 470], "stroke": [107, 462], "horizont": [107, 175, 176, 373, 374, 382, 433], "toolkit": [107, 259, 367, 437, 457, 460], "114": [107, 120, 223], "111": [107, 223, 259, 341, 343, 459], "0x50": 107, "79": [107, 380, 439], "74": [107, 341, 450, 479, 480], "68": [107, 184, 223, 316, 364, 411, 479], "6f": 107, "6e": [107, 219], "0x00": [107, 176, 189], "ram": [107, 184, 465, 481], "gigabyt": [107, 481], "intoler": 107, "strcpi": 107, "resynchron": [107, 474], "consortium": [107, 408], "glossari": [107, 179, 481], "chronolog": [107, 124, 477], "computerphil": 107, "youtub": [107, 259], "channel": [107, 115, 131, 139, 174, 199, 210, 266, 281, 293, 334, 335, 339, 347, 462, 474, 477, 478, 479, 480, 481], "tom": [107, 377, 462, 465, 470, 473, 475, 481], "scott": [107, 463, 465, 479, 481], "jukka": [107, 476], "korpela": 107, "introductori": [107, 335, 382, 465], "joel": [107, 477, 481], "spolski": 107, "rudiment": 107, "fichier": 107, "trouv": 107, "pertoir": 107, "greek": [107, 156], "u0394": 107, "u00000394": 107, "xnn": 107, "x80abc": 107, "ufffdabc": 107, "iso_8859_1": 107, "57344": 107, "ue000": 107, "xmlcharrefreplac": [107, 156, 223, 256, 342, 463, 481], "unnnn": 107, "namereplac": [107, 156, 223, 256, 476, 481], "40960": 107, "1972": [107, 338, 463, 464, 465], "xea": 107, "x80": [107, 298, 462], "x80abcd": 107, "xde": 107, "xb4": 107, "ua000": 107, "ua000abcd": 107, "u07b4": 107, "yi": 107, "syllabl": 107, "comfort": [107, 191], "xac": 107, "u1234": [107, 156, 260], "u20ac": [107, 468, 476], "u00008000": 107, "172": [107, 474], "4660": 107, "8364": [107, 223], "32768": [107, 218, 339, 345, 422, 481], "dose": 107, "accent": [107, 329], "inspir": [107, 165, 198, 259, 424, 425, 460, 461, 463, 466, 473, 474, 481], "fifth": [107, 175, 245, 342, 364, 481], "bidirect": [107, 124, 131, 281, 342, 344, 385, 460, 481], "233": [107, 224, 439, 447, 448], "0x0bf2": 107, "3972": [107, 467], "6000": [107, 233, 281], "13231": 107, "00e9": 107, "acut": 107, "0bf2": 107, "tamil": 107, "0f84": 107, "mn": [107, 433], "tibetan": 107, "halanta": 107, "1770": 107, "lo": [107, 145, 342, 384, 433, 469], "tagbanwa": 107, "sa": [107, 148, 181, 335], "33af": 107, "rad": [107, 463], "subcategori": 107, "nonspac": [107, 433], "00ea": 107, "0065": 107, "0302": 107, "circumflex": [107, 375], "casefold": [107, 118, 141, 158, 259, 342, 474, 476, 479, 481], "german": [107, 156, 264, 342, 382, 475, 481], "00df": 107, "street": [107, 118, 317], "rzenichstra": 107, "rzenichstrass": 107, "inequ": [107, 184, 193, 200, 386, 428, 466, 473], "compare_str": 107, "nfd": [107, 385], "single_char": 107, "multiple_char": 107, "strs": [107, 384], "nfc": [107, 385, 479], "nfkc": [107, 344, 385, 392, 433, 481], "nfkd": [107, 385], "caseless": [107, 342, 474], "compare_caseless": 107, "nd": [107, 223, 245, 253, 317, 342, 433], "57": [107, 463, 479, 480, 481], "thai": [107, 156, 424], "arab": [107, 156, 184, 342, 460, 467, 473], "u0e55": 107, "u0e57": 107, "pragmat": 107, "ned": [107, 467, 473, 475, 479, 480, 481], "batcheld": [107, 481], "marc": [107, 228, 338, 460, 461, 462, 463, 465, 474, 481], "andr": [107, 228, 338, 460, 461, 462, 463, 465, 481], "lemburg": [107, 228, 338, 460, 461, 462, 463, 465], "gave": [107, 386, 467, 473, 481], "slide": [107, 409], "europython": 107, "transmiss": [107, 176, 206, 267], "gib": [107, 268, 304, 356, 360, 420, 460, 463, 465, 481], "u4500": 107, "blah": [107, 268, 290], "autodetect": [107, 302, 356, 393, 461, 465], "converg": 107, "u4500abc": 107, "xe4": 107, "x94": [107, 233], "occas": [107, 108, 295, 311, 331, 345, 360, 465, 475], "vulner": [107, 124, 135, 191, 297, 329, 338, 346, 384, 465, 481], "untrust": [107, 188, 266, 281, 297, 310, 312, 328, 330, 356, 409, 410, 411, 412, 417, 418, 420, 463, 466, 481], "attack": [107, 124, 171, 223, 233, 242, 260, 266, 330, 338, 342, 356, 384, 407, 465, 466, 467, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481], "clever": [107, 149, 297, 343, 462], "bytestream": 107, "transpar": [107, 118, 147, 156, 174, 175, 189, 200, 201, 216, 239, 245, 256, 268, 297, 356, 374, 382, 459, 461, 463, 464, 474, 475, 477, 478, 481], "new_f": 107, "getdecod": [107, 156], "getread": [107, 156], "getwrit": [107, 156], "beazley": [107, 462, 473], "gut": [107, 149, 481], "benjamin": [107, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481], "peterson": [107, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "alexand": [107, 466, 467, 469, 472, 473, 476, 477, 478, 481], "belopolski": [107, 466, 467, 469, 472, 473, 476, 477, 478, 481], "brandl": [107, 465, 466, 467, 469, 473, 474, 476, 477, 481], "ezio": [107, 467, 473, 474, 475, 476], "melotti": [107, 467, 473, 474, 475, 476], "ric": [107, 471, 474, 475, 479, 481], "araujo": [107, 471, 474, 475, 479, 481], "nichola": [107, 463, 470], "bastin": [107, 464], "marius": [107, 460], "gedmina": 107, "kent": [107, 339, 360, 386, 461, 465, 466], "johnson": [107, 465, 466, 481], "ken": [107, 367, 470, 471, 472, 477, 478, 479, 480, 481], "krugler": 107, "martin": [107, 228, 286, 460, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 477, 479, 481], "von": [107, 228, 316, 426, 460, 462, 463, 464, 465, 466, 467, 473, 474, 475, 479], "wis": [107, 228, 286, 460, 462, 463, 464, 465, 466, 467, 473, 474, 475, 479], "terri": [107, 440, 470, 471, 476, 477, 478, 479, 480, 481], "reedi": [107, 463, 470, 471, 476, 477, 478, 479, 480, 481], "serhiy": [107, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481], "storchaka": [107, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481], "eryk": [107, 471, 481], "chad": [107, 463, 465, 466, 481], "whitacr": 107, "graham": [107, 440, 466, 471, 481], "wideman": 107, "michael": [108, 439, 440, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 479, 480, 481], "foord": [108, 467, 473], "hypertext": [108, 238, 239, 271, 408], "2616": [108, 240, 391, 393, 405, 473], "namedtemporaryfil": [108, 198, 358, 466, 472, 481], "tmp_file": 108, "the_pag": 108, "transmit": [108, 124, 131, 139, 240, 286, 333, 335, 359, 417, 464, 479], "someserv": 108, "northampton": 108, "upload": [108, 149, 461, 465, 467, 476, 478, 480, 481], "submiss": [108, 149, 281, 312, 424, 460], "hundredweight": 108, "tin": [108, 269, 481], "door": [108, 118, 340], "somebodi": 108, "url_valu": 108, "full_url": [108, 393, 475], "dislik": [108, 387], "user_ag": 108, "win64": [108, 460, 476, 481], "x64": [108, 466], "pretend_serv": 108, "getaddrinfo": [108, 124, 128, 140, 335, 424, 476, 477, 478, 481], "fulfil": [108, 239, 243, 461, 463, 473], "404": [108, 149, 239, 240, 243, 260, 393, 405, 417, 418, 439, 470, 476], "403": [108, 239, 243, 439, 470], "401": [108, 239, 393, 439, 470, 476, 481], "299": [108, 221, 239], "599": [108, 221, 239, 286], "basehttprequesthandl": [108, 240, 243, 391, 405, 473, 474, 481], "shortmessag": [108, 243], "longmessag": [108, 243, 386, 467, 481], "101": [108, 118, 239, 259, 316, 341, 343, 380, 387, 442, 459, 467, 473], "obey": [108, 329, 342, 346, 363, 426, 466], "201": [108, 239, 259, 367, 460], "202": [108, 181, 233, 239], "203": [108, 239], "204": [108, 239, 243, 382], "206": [108, 239], "304": [108, 239, 243, 478], "unauthor": [108, 239], "402": [108, 239, 380], "payment": [108, 259], "charg": [108, 248, 424], "406": [108, 239], "407": [108, 239], "408": [108, 239], "410": [108, 239], "precondit": [108, 339, 462, 473], "413": [108, 239, 481], "415": [108, 239], "media": [108, 151, 279, 291, 317, 424], "416": [108, 239, 380], "417": [108, 239, 243], "502": [108, 239, 464], "503": [108, 239], "504": [108, 239, 342], "respond": [108, 240, 243, 245, 267, 311, 335, 339, 350, 367, 387, 405, 417, 418, 467, 481], "fish": [108, 297, 387, 388, 397, 451, 475, 481], "doctyp": [108, 238, 240, 312, 393, 408, 411, 473, 479, 481], "dtd": [108, 238, 312, 393, 407, 412, 413, 414, 477, 478, 479, 481], "w3": [108, 238, 312, 393, 409, 411, 424, 481], "tr": [108, 175, 238, 299, 312, 393, 409, 411, 424, 481], "xhtml1": [108, 393], "someurl": 108, "brief": [108, 118, 191, 203, 223, 224, 266, 290, 300, 306, 317, 320, 342, 346, 378, 424, 460, 462, 464, 465, 468, 473, 481], "lift": [108, 351, 382, 472, 477, 478, 479], "add_handl": [108, 393], "some_handler_inst": 108, "build_open": [108, 241, 393], "install_open": [108, 393], "realm": [108, 206, 393, 481], "cpanel": 108, "httppasswordmgrwithdefaultrealm": [108, 393], "add_password": [108, 393], "password_mgr": [108, 393], "knew": [108, 468], "top_level_url": 108, "a_url": 108, "http_proxi": [108, 393, 481], "httpdefaulterrorhandl": [108, 393], "8080": [108, 240, 241, 335, 393, 417], "userinfo": [108, 393], "joe": [108, 149, 232, 382, 393, 476, 479, 481], "proxy_support": 108, "request_method": [108, 393, 405, 481], "getproxi": [108, 393, 481], "setdefaulttimeout": [108, 335], "voidspac": [108, 467], "uk": [108, 164, 241, 342, 364, 467, 481], "review": [108, 141, 167, 233, 338, 463, 468, 477, 479, 481], "lee": [108, 464, 465, 467, 471, 473, 478, 481], "snif": 108, "sensibl": [108, 118, 124, 165, 181, 233, 253, 290, 363, 387, 392, 428, 464, 467, 477, 478, 481], "msie": [108, 242], "sv1": 108, "clr": 108, "4322": 108, "ie": [108, 203, 216, 238, 241, 246, 276, 290, 393, 417, 476, 481], "aspn": [108, 273], "virtualenv": [109, 397, 459, 474, 481], "somepackag": 109, "wheel": [109, 188, 249, 316, 454, 470, 471, 472, 479, 480, 481], "greet": [110, 303, 333, 338, 384, 476], "raw_input": [110, 155, 468], "has_key": [110, 175, 460, 461, 462, 463, 468, 481], "beneath": [110, 371, 411, 481], "py3": [110, 451, 469, 473, 481], "mycod": 110, "failunlessequ": [110, 471, 472], "assertequ": [110, 360, 386, 387, 388, 449, 467, 471, 472, 473, 475, 479, 481], "failifequ": [110, 471, 472], "assertnotequ": [110, 386, 471, 472, 473], "failunless": [110, 471, 472], "asserttru": [110, 386, 467, 471, 472, 473], "assert_": [110, 471, 472, 473, 481], "failif": [110, 471, 472], "assertfals": [110, 386, 467, 471, 472], "failunlessrais": [110, 471, 472], "cal": [110, 148, 393, 394], "assertrais": [110, 386, 449, 467, 469, 471, 472, 474, 481], "failunlessalmostequ": [110, 471, 472], "assertalmostequ": [110, 386, 467, 471, 472, 473, 481], "failifalmostequ": [110, 471, 472], "assertnotalmostequ": [110, 386, 467, 471, 472, 473, 481], "basestr": [110, 463, 468, 475], "iteritem": [110, 269, 462, 463, 464, 468, 481], "iterkey": [110, 269, 462, 463, 464, 466, 468, 481], "itervalu": [110, 269, 462, 463, 464, 468, 481], "viewitem": [110, 467], "viewkey": [110, 467], "viewvalu": [110, 467], "execfil": [110, 463, 464, 468, 481], "exitfunc": [110, 460, 464, 468], "funcattr": 110, "my_funct": [110, 439], "func_closur": [110, 468], "__closure__": [110, 426, 468, 481], "new_featur": 110, "getcwdu": [110, 463], "getcwd": [110, 291, 292, 294, 360, 405, 449, 478, 481], "someclass": [110, 297, 384, 387, 388, 460], "some_iter": 110, "imports2": 110, "itertools_import": 110, "ifilt": [110, 463], "izip": [110, 464], "ifilterfals": 110, "__metaclass__": [110, 462, 466, 468], "methodattr": 110, "im_func": [110, 466], "__nonzero__": [110, 468], "numliter": 110, "iscal": [110, 467, 468, 481], "sequenceinclud": [110, 467, 468], "issequencetyp": 110, "ismappingtyp": 110, "isnumbertyp": 110, "irepeat": 110, "imul": [110, 289], "with_traceback": [110, 211, 434, 481], "maxint": [110, 468], "backtick": [110, 144, 395, 468, 478], "set_liter": 110, "standarderror": [110, 466, 468], "sys_exc": 110, "exc_valu": [110, 338, 350, 360, 363, 379, 426, 467, 468, 471, 481], "exc_typ": [110, 167, 331, 342, 350, 360, 363, 379, 388, 426, 468, 471, 481], "exc_traceback": [110, 350, 360, 363, 379, 468, 471, 481], "tuple_param": 110, "urllib2": [110, 393, 464, 466, 467, 468], "ws_comma": 110, "xrang": [110, 461, 462, 463, 464, 468], "xreadlin": [110, 461, 463, 464], "peg": [110, 429, 470, 471, 472, 480, 481], "617": [110, 429, 470, 471, 480, 481], "parsabl": [110, 474, 480, 481], "libcst": [110, 120, 480], "parso": [110, 120, 480], "nested_scop": [111, 434, 461, 462], "0b1": [111, 481], "0a1": [111, 481], "0a2": [111, 481], "with_stat": [111, 434, 465, 466], "unicode_liter": [111, 434, 466], "generator_stop": [111, 211, 434, 476, 481], "tbd": [111, 481], "featurenam": [111, 414], "optionalreleas": 111, "mandatoryreleas": [111, 481], "compilerflag": 111, "0a3": [111, 481], "getoptionalreleas": 111, "getmandatoryreleas": 111, "compiler_flag": [111, 223], "steer": [111, 382, 461, 464, 471, 473, 481], "council": [111, 481], "649": [111, 427], "helloworld": [112, 433], "tim": [112, 343, 365, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 475, 476, 477, 480, 481], "beauti": [112, 188], "phrase": [112, 239, 240, 246, 270, 290, 393, 428, 432, 433, 463, 466, 474, 476, 481], "bandclass": 112, "search_stud": 112, "student_nam": 112, "did_user_define_their_nam": 112, "my_nam": [112, 387], "print_user_nam": 112, "dinsdal": 112, "jabberwocki": 112, "light": [113, 174, 175, 466, 467, 469, 481], "weight": [113, 158, 174, 200, 316, 341, 343, 370, 477, 481], "locktyp": 113, "start_new_thread": [113, 140, 481], "interrupt_main": [113, 470, 481], "raise_sign": [113, 331, 481], "allocate_lock": 113, "unlock": [113, 136, 213, 269, 280, 281, 303, 360, 363, 426, 465, 481], "get_id": [113, 331, 349, 363, 364, 474], "recycl": [113, 363, 481], "get_native_id": [113, 363, 479, 481], "netbsd": [113, 291, 301, 335, 363, 364, 471, 478, 481], "dragonflybsd": [113, 335, 363, 481], "stack_siz": [113, 363, 465, 481], "768": [113, 363], "timeout_max": [113, 363], "a_lock": 113, "surviv": [113, 174, 400], "abcmeta": [114, 426, 466, 473, 474, 475, 481], "myabc": 114, "get_cache_token": [114, 475], "get_iter": 114, "myiter": [114, 384], "update_abstractmethod": [114, 481], "my_abstract_method": 114, "my_abstract_classmethod": 114, "my_abstract_staticmethod": 114, "my_abstract_properti": 114, "_get_x": 114, "_set_x": 114, "__isabstractmethod__": [114, 474], "_fget": 114, "_fset": 114, "_fdel": 114, "abstractclassmethod": [114, 473, 474], "abstractstaticmethod": [114, 473, 474], "abstractproperti": [114, 466, 474], "594": [115, 139, 149, 150, 151, 171, 247, 270, 279, 285, 286, 293, 299, 334, 337, 347, 357, 395, 406, 471, 472, 481], "mono": [115, 139, 293], "stereo": [115, 139, 293], "quadro": 115, "nchannel": [115, 139, 293, 334, 347, 399], "samples": 115, "framer": [115, 334, 347, 399], "cd": [115, 118, 188, 259, 293, 386, 415, 466], "qualiti": [115, 191, 291, 293, 303, 426, 473, 481], "44": [115, 158, 184, 282, 316, 326, 385, 470, 474, 479, 480], "44100": [115, 293], "176": 115, "seekabl": [115, 147, 256, 399, 420, 466, 481], "ahead": [115, 259, 357, 364, 401, 408, 429, 464, 481], "writeframesraw": [115, 347, 399, 475], "setnfram": [115, 347, 399], "getnchannel": [115, 347, 399], "getsampwidth": [115, 347, 399], "getframer": [115, 347, 399], "getnfram": [115, 347, 399], "getcomptyp": [115, 347, 399], "getcompnam": [115, 347, 399], "getparam": [115, 347, 399, 475], "sampwidth": [115, 334, 347, 399], "nframe": [115, 334, 347, 380, 399, 453], "comptyp": [115, 347, 399], "compnam": [115, 347, 399], "getmark": [115, 347, 399], "readfram": [115, 347, 399], "uncompress": [115, 147, 232, 268, 330, 356, 419, 420, 473, 481], "rewind": [115, 256, 347, 399], "setpo": [115, 347, 382, 399], "writefram": [115, 347, 399, 475], "setnchannel": [115, 347, 399], "setsampwidth": [115, 347, 399, 475], "setframer": [115, 347, 399], "setcomptyp": [115, 347, 399], "ulaw": [115, 334, 347], "alaw": [115, 347], "g722": 115, "setparam": [115, 347, 399], "setmark": 115, "programnam": 118, "store_const": [118, 290, 481], "append_const": [118, 290, 481], "walk": [118, 120, 140, 194, 198, 202, 203, 205, 290, 291, 294, 346, 367, 379, 406, 462, 466, 468, 472, 474, 476, 481], "helpformatt": [118, 290, 481], "myprogram": 118, "subdir": [118, 214, 269, 360, 481], "print_help": [118, 290], "parent_pars": 118, "foo_pars": 118, "bar_pars": 118, "yyy": [118, 430], "rawdescriptionhelpformatt": 118, "rawtexthelpformatt": 118, "metavartypehelpformatt": 118, "weird": 118, "dedent": [118, 245, 362, 375, 376, 425, 429, 433, 481], "nbar": 118, "convert_arg_line_to_arg": 118, "getpreferredencod": [118, 256, 264, 291, 346, 471, 472, 478, 481], "set_default": [118, 290, 481], "foonley": 118, "store_fals": [118, 290], "foon": 118, "argumenterror": [118, 174, 481], "_storeact": 118, "option_str": 118, "f1": [118, 188, 214, 266, 281, 342, 425, 438, 481], "f2": [118, 188, 214, 281, 342, 425, 481], "f4": [118, 462], "booleanoptionalact": [118, 472, 481], "format_usag": [118, 481], "fooaction": 118, "yy": 118, "infil": [118, 120, 138, 189, 260, 299, 329, 378, 450, 469, 473, 481], "_io": [118, 186, 473, 477, 481], "argumenttypeerror": 118, "nice": [118, 138, 142, 149, 167, 174, 191, 223, 268, 291, 320, 333, 336, 342, 388, 401, 426, 460, 473, 474], "distanc": [118, 152, 153, 268, 273, 341, 367, 382, 471, 479, 481], "code_point": 118, "source_fil": 118, "dest_fil": 118, "datapath": 118, "short_titl": 118, "tale": 118, "citi": [118, 339, 394, 424, 481], "downstream": [118, 423, 481], "jsondecodeerror": [118, 260, 476, 481], "scissor": 118, "frobbl": 118, "infer": [118, 159, 191, 223, 224, 266, 281, 300, 364, 379, 384, 477, 481], "foo_bar": [118, 290, 388], "xyzz": 118, "badger": 118, "inher": [118, 363, 411, 481], "cautious": [118, 269, 392], "1s": [118, 481], "bacon": [118, 158, 188, 248, 277, 342, 379, 393, 426], "bac": 118, "mmm": [118, 246], "ba": [118, 253, 259, 420, 476], "parser_class": 118, "svn": [118, 161, 353, 392, 463, 465, 466, 467, 473, 481], "checkout": [118, 459, 467, 481], "cmd1": 118, "cmd2": 118, "parser_a": 118, "parser_b": 118, "parser_foo": 118, "parser_bar": 118, "xyzyx": 118, "subparser_nam": 118, "subparser1": 118, "subparser2": 118, "dat": [118, 182, 459], "add_argument_group": [118, 481], "group1": [118, 317, 441], "group2": [118, 441], "exclusive_group": 118, "736": 118, "get_default": 118, "print_usag": [118, 290], "format_help": 118, "parse_known_arg": [118, 481], "arg_lin": 118, "myargumentpars": 118, "errorcatchingargumentpars": 118, "parse_intermixed_arg": [118, 478, 481], "parse_known_intermixed_arg": 118, "unpars": [118, 120, 197, 249, 312, 413, 480, 481], "doit": 118, "monkey": [118, 384, 387, 388, 472, 481], "optionpars": [118, 290, 463, 465], "add_opt": [118, 290, 463], "disable_interspersed_arg": [118, 290], "callback_": 118, "optionerror": [118, 290], "optionvalueerror": [118, 290], "typecod": [119, 140, 281, 383, 468, 481], "frombyt": [119, 335, 473, 480, 481], "fromunicod": 119, "buffer_info": 119, "byteswap": [119, 139, 475], "fromfil": [119, 188, 468], "fromstr": [119, 411, 473, 480, 481], "unicodestr": 119, "enc": [119, 339], "tobyt": [119, 342, 467, 473, 480, 481], "tofil": [119, 188, 468], "tostr": [119, 411, 467, 473, 475, 480, 481], "tolist": [119, 342, 462, 467, 473], "u2641": 119, "asdl": [120, 465, 470, 480, 481], "stmt": [120, 338, 365, 466, 481], "type_ignor": [120, 375], "argtyp": [120, 174, 481], "functiondef": [120, 481], "decorator_list": 120, "type_com": [120, 375, 429, 479, 481], "type_param": [120, 384, 425, 429, 434, 481], "asyncfunctiondef": [120, 481], "classdef": [120, 425, 481], "augassign": [120, 429], "annassign": 120, "orels": [120, 466], "asyncfor": [120, 481], "withitem": 120, "asyncwith": [120, 481], "match_cas": 120, "excepthandl": 120, "finalbodi": 120, "trystar": 120, "importfrom": [120, 481], "end_lineno": [120, 189, 211, 379, 429, 470, 479, 481], "end_col_offset": [120, 189, 429, 479, 481], "boolop": 120, "namedexpr": 120, "binop": [120, 466, 481], "unaryop": 120, "ifexp": 120, "elt": 120, "setcomp": [120, 429], "dictcomp": [120, 429], "generatorexp": 120, "yieldfrom": 120, "cmpop": 120, "formattedvalu": [120, 481], "joinedstr": [120, 481], "expr_context": 120, "mult": [120, 429], "matmult": [120, 429], "lshift": [120, 289, 429], "rshift": [120, 289, 429], "bitor": [120, 429], "bitxor": [120, 429], "bitand": [120, 429], "uadd": [120, 429], "usub": [120, 429], "noteq": [120, 429], "lte": [120, 429], "gte": [120, 429], "isnot": [120, 429], "notin": [120, 429], "ifs": 120, "is_async": [120, 310, 481], "posonlyarg": [120, 481], "vararg": [120, 253, 481], "kwonlyarg": [120, 253], "kw_default": 120, "asnam": 120, "context_expr": 120, "optional_var": 120, "matchvalu": [120, 481], "matchsingleton": [120, 481], "matchsequ": [120, 481], "matchmap": [120, 481], "matchclass": [120, 481], "kwd_attr": 120, "kwd_pattern": 120, "matchstar": [120, 481], "matcha": [120, 481], "matchor": [120, 481], "typeignor": [120, 481], "typevar": [120, 189, 342, 349, 383, 384, 425, 471, 472, 481], "paramspec": [120, 189, 342, 384, 425, 429, 470, 472, 481], "typevartupl": [120, 189, 342, 384, 425, 429, 471, 472, 481], "_ast": [120, 465, 473, 481], "_field": [120, 158, 384, 466, 467, 481], "source_lin": 120, "nameconst": [120, 472, 479, 481], "extslic": [120, 480, 481], "snake": [120, 158], "func_typ": [120, 429, 479], "115": [120, 259, 343, 380, 481], "sin": [120, 152, 184, 273, 426, 463], "soc": 120, "otherexcept": [120, 211], "point2d": [120, 384], "point3d": [120, 158, 384], "ts": [120, 175, 230, 382, 384, 425, 465, 472, 481], "decorator1": 120, "decorator2": 120, "3115": [120, 383, 425, 426, 468, 474], "base1": [120, 438], "base2": [120, 438], "other_func": 120, "feature_vers": [120, 375, 479, 481], "pycf_type_com": 120, "ast_obj": 120, "literal_ev": [120, 223, 466, 473, 478, 481], "node_or_str": 120, "get_docstr": [120, 481], "cleandoc": [120, 253], "get_source_seg": [120, 479, 481], "fix_missing_loc": [120, 481], "increment_lineno": [120, 481], "copy_loc": 120, "new_nod": 120, "old_nod": 120, "iter_field": 120, "fieldnam": [120, 158, 173, 466, 469, 481], "iter_child_nod": 120, "nodevisitor": [120, 466, 479, 481], "generic_visit": 120, "visit_const": [120, 479, 481], "nodetransform": [120, 466, 481], "visit_num": [120, 479, 481], "visit_str": [120, 479, 481], "visit_byt": [120, 479], "visit_nameconst": [120, 479], "visit_ellipsi": [120, 479], "rewritenam": 120, "visit_nam": 120, "new_tre": 120, "yourtransform": 120, "annotate_field": 120, "include_attribut": 120, "pycf_allow_top_level_await": [120, 223, 479, 480, 481], "asttoken": 120, "leoast": 120, "codemod": 120, "emscripten": [121, 149, 161, 164, 171, 208, 213, 221, 227, 231, 240, 243, 246, 255, 276, 281, 285, 286, 291, 303, 308, 320, 326, 327, 331, 333, 335, 336, 337, 339, 346, 350, 354, 357, 363, 393, 397, 401, 417, 418, 423, 454, 471, 481], "wasi": [121, 149, 161, 164, 171, 208, 210, 211, 213, 221, 227, 231, 240, 243, 246, 255, 276, 281, 285, 286, 291, 303, 308, 320, 326, 327, 331, 333, 335, 336, 337, 339, 346, 350, 354, 357, 363, 393, 397, 401, 417, 418, 423, 454, 471, 481], "wasm32": [121, 149, 161, 164, 171, 208, 221, 227, 240, 243, 246, 255, 276, 281, 285, 286, 291, 303, 326, 327, 331, 333, 335, 336, 337, 339, 346, 350, 357, 363, 393, 397, 401, 417, 418, 423, 454, 471, 481], "taskgroup": [122, 137, 471, 481], "create_task": [122, 123, 124, 126, 127, 128, 132, 136, 137, 471, 476, 478, 479, 481], "current_task": [122, 126, 137, 472, 478, 480, 481], "all_task": [122, 126, 137, 478, 480, 481], "wait_for": [122, 132, 135, 136, 137, 281, 363, 471, 479, 480, 481], "to_thread": [122, 137, 480, 481], "run_coroutine_threadsaf": [122, 123, 137, 470, 476, 477, 481], "as_complet": [122, 127, 137, 164, 472, 479, 481], "fifo": [122, 132, 158, 259, 281, 291, 294, 314, 327, 340, 356, 477, 478, 481], "priorityqueu": [122, 132, 314, 342, 466, 481], "lifoqueu": [122, 132, 314, 342, 466, 481], "create_subprocess_exec": [122, 124, 130, 135, 346, 479, 481], "create_subprocess_shel": [122, 124, 135, 479, 481], "open_connect": [122, 124, 131, 134, 476, 478, 481], "open_unix_connect": [122, 134], "start_serv": [122, 124, 131, 134, 168, 363, 478, 481], "start_unix_serv": [122, 124, 134], "cancellederror": [122, 125, 127, 133, 136, 137, 164, 479, 481], "brokenbarriererror": [122, 136, 363, 471, 473], "pythonasynciodebug": [123, 124, 186, 453, 481], "set_debug": [123, 124, 128, 225, 476], "threadsaf": [123, 224, 259, 265, 316, 481], "call_at": [123, 124, 128, 478], "slow_callback_dur": [123, 124], "call_soon_threadsaf": [123, 124, 128, 478, 481], "fut": [123, 127], "coro_func": 123, "run_in_executor": [123, 124, 128, 137, 480, 481], "coro": [123, 124, 126, 133, 137, 476, 481], "set_except": [123, 127, 137, 140, 164, 174, 477, 481], "321": [123, 184], "source_traceback": 123, "base_ev": [124, 350, 428, 481], "prefac": [124, 131], "get_running_loop": [124, 127, 128, 131, 134, 137, 478, 481], "get_event_loop": [124, 128, 130, 472, 476, 477, 478, 481], "get_event_loop_polici": [124, 128, 130], "set_event_loop": [124, 128, 129, 130, 133, 479, 481], "new_event_loop": [124, 128, 130, 133, 479], "timerhandl": [124, 481], "create_serv": [124, 128, 131, 134, 335, 476, 477, 478, 479, 481], "selectoreventloop": [124, 129, 130, 135, 471, 481], "proactoreventloop": [124, 129, 130, 135, 471, 479, 481], "showcas": [124, 131], "run_until_complet": [124, 128, 476, 477, 479, 481], "run_forev": [124, 128, 481], "is_run": [124, 128], "is_clos": [124, 128, 131, 134, 476, 477, 478, 481], "idempot": [124, 131, 165, 224, 472, 478, 481], "irrevers": 124, "shutdown_asyncgen": [124, 128, 350, 428, 477, 481], "aclos": [124, 159, 167, 428, 470, 480, 481], "shutdown_default_executor": [124, 133, 480, 481], "567": [124, 127, 168, 184, 343, 450, 469, 478, 481], "monoton": [124, 129, 132, 167, 188, 323, 341, 364, 438, 463, 474, 476, 481], "create_futur": [124, 126, 127, 128, 131, 476, 477, 481], "instrument": [124, 189, 224, 306, 454, 473, 477, 481], "set_task_factori": [124, 128, 137, 476, 481], "get_task_factori": [124, 128, 476, 481], "create_connect": [124, 126, 128, 131, 134, 335, 339, 466, 467, 471, 473, 476, 478, 479, 481], "protocol_factori": [124, 131], "proto": [124, 134, 298, 335, 384, 393], "local_addr": [124, 131, 134], "server_hostnam": [124, 134, 339, 473, 478, 481], "ssl_handshake_timeout": [124, 134, 478], "ssl_shutdown_timeout": [124, 134, 481], "happy_eyeballs_delay": [124, 134, 479, 481], "interleav": [124, 134, 191, 281, 467, 473, 478, 479, 481], "all_error": [124, 221, 335, 471, 481], "af_inet6": [124, 335, 481], "synopsi": [124, 311, 339, 481], "connection_mad": [124, 128, 131, 481], "sslcontext": [124, 131, 134, 221, 240, 246, 267, 286, 303, 333, 339, 393, 417, 467, 470, 472, 473, 474, 475, 476, 477, 478, 481], "create_default_context": [124, 339, 393, 467, 475, 481], "eyebal": [124, 479, 481], "8305": 124, "250": [124, 221, 306, 333, 338, 382, 467], "local_host": 124, "local_port": 124, "handshak": [124, 134, 339, 475, 476, 477, 478, 479, 481], "60": [124, 134, 145, 153, 164, 181, 184, 194, 259, 305, 316, 339, 341, 364, 379, 380, 382, 396, 433, 463, 465, 471, 473, 477, 479, 481], "dual": [124, 335, 424, 433, 481], "undesir": [124, 339, 461, 465, 481], "datatrack": 124, "ietf": [124, 233, 257, 339, 345], "rfc6555": 124, "create_datagram_endpoint": [124, 128, 131, 471, 477, 478, 479, 480, 481], "remote_addr": [124, 131], "reuse_port": [124, 134, 335], "allow_broadcast": 124, "af_unix": [124, 129, 281, 335, 336, 481], "sock_dgram": [124, 267, 335, 336, 467], "remote_host": 124, "remote_port": 124, "endpoint": [124, 131, 210, 240, 335, 382, 473, 481], "so_reuseport": [124, 335, 360, 481], "broadcast": [124, 257, 335, 481], "preexist": 124, "reuse_address": [124, 134, 471, 477, 478, 479, 480, 481], "so_reuseaddr": [124, 335, 360, 471, 477, 478, 479, 480, 481], "uid": [124, 140, 149, 243, 246, 291, 294, 302, 303, 308, 320, 330, 340, 356, 466, 467, 474, 476, 479, 481], "incom": [124, 131, 211, 243, 260, 281, 336, 339, 410, 472, 473, 481], "packet": [124, 131, 139, 257, 267, 335, 336, 417, 467, 481], "create_unix_connect": [124, 128, 129, 131, 134, 481], "af_unspec": [124, 134, 335], "ai_pass": [124, 134, 335], "backlog": [124, 134, 281, 335, 476, 481], "time_wait": [124, 335], "expir": [124, 137, 210, 241, 242, 281, 323, 327, 331, 333, 335, 337, 346, 363, 364, 393, 474, 481], "serve_forev": [124, 131, 134, 168, 243, 281, 331, 336, 405, 417, 418, 465, 466, 474, 478, 481], "create_unix_serv": [124, 128, 129, 131, 134, 478, 481], "connect_accepted_socket": [124, 128, 131, 470, 477, 481], "sendfil": [124, 125, 128, 131, 291, 330, 335, 339, 405, 474, 476, 478, 481], "sendfilenotavailableerror": [124, 125], "syscal": [124, 211, 291, 320, 330, 476, 477, 479, 481], "start_tl": [124, 128, 134, 471, 478, 481], "server_sid": [124, 339], "coder": [124, 139], "sporad": [124, 291], "add_read": [124, 128, 129, 131, 134, 481], "remove_read": [124, 128], "add_writ": [124, 128, 129, 481], "remove_writ": [124, 128], "sock_recv": [124, 128, 478, 481], "nbyte": [124, 131, 140, 280, 282, 312, 324, 335, 342], "sock_recv_into": [124, 128, 478, 481], "recv_into": [124, 335, 339, 465, 467, 481], "sock_recvfrom": [124, 128, 471, 481], "recvfrom": [124, 335, 367, 476, 481], "sock_recvfrom_into": [124, 128, 471, 481], "recvfrom_into": [124, 335, 465, 467], "sock_sendal": [124, 128, 478, 481], "sendal": [124, 335, 336, 339, 476, 481], "sock_sendto": [124, 128, 471, 481], "sendto": [124, 128, 131, 140, 335, 336, 476, 481], "sock_connect": [124, 128, 476, 481], "inet_pton": [124, 257, 335, 475, 479, 480, 481], "sock_accept": [124, 128, 478, 481], "sock_sendfil": [124, 128, 478, 481], "getnameinfo": [124, 128, 140, 335, 424, 478, 481], "sockaddr": [124, 140, 335], "connect_read_pip": [124, 128, 129, 131, 135, 481], "readtransport": [124, 131, 478, 481], "connect_write_pip": [124, 128, 129, 131, 135, 481], "writetransport": [124, 131, 481], "subprocess_shel": [124, 128, 129, 131, 135], "add_signal_handl": [124, 128, 129, 481], "uncatch": 124, "remove_signal_handl": [124, 128, 129], "blocking_io": [124, 137], "urandom": [124, 233, 281, 291, 316, 339, 464, 467, 471, 472, 475, 476, 477, 481], "cpu_bound": 124, "set_default_executor": [124, 128, 471, 479, 481], "set_exception_handl": [124, 128], "call_exception_handl": [124, 128], "get_exception_handl": [124, 128, 476, 477, 481], "default_exception_handl": [124, 128], "asyncgen": 124, "get_debug": [124, 128, 225, 476], "devnul": [124, 135, 281, 291, 331, 346, 474, 481], "universal_newlin": [124, 135, 346, 464, 478, 481], "subprocesstransport": [124, 131], "get_context": [124, 137, 164, 281, 472, 475, 481], "srv": [124, 168, 478], "wait_clos": [124, 134, 478, 481], "get_loop": [124, 127, 133, 478, 481], "client_connect": 124, "is_serv": [124, 478, 481], "trsock": [124, 481], "transportsocket": [124, 481], "ship": [124, 130, 182, 248, 251, 367, 386, 419, 457, 459, 460, 463, 467, 469, 473, 475, 476, 480, 481], "mypolici": [124, 474], "defaulteventlooppolici": [124, 130, 481], "selectselector": [124, 129, 327], "set_event_loop_polici": [124, 128, 130], "iocp": [124, 481], "msdn": [124, 291], "abstracteventloop": [124, 126, 130, 480, 481], "hello_world": 124, "reschedul": [124, 137], "display_d": [124, 137], "end_tim": [124, 137], "socketpair": [124, 131, 134, 331, 335, 464, 478, 481], "rsock": [124, 131, 134], "wsock": [124, 131, 134], "unregist": [124, 126, 138, 156, 212, 291, 326, 327, 330, 351, 367, 400, 470, 480, 481], "recept": [124, 131, 134], "ask_exit": 124, "signam": [124, 331], "3600": [124, 131, 137, 167, 181], "invalidstateerror": [125, 127, 137, 164, 481], "incompletereaderror": [125, 134, 481], "limitoverrunerror": [125, 134, 481], "baseeventloop": [126, 481], "successor": [126, 230], "_make_socket_transport": 126, "_register_task": [126, 481], "_unregister_task": [126, 481], "_enter_task": [126, 481], "_leave_task": [126, 481], "base_futur": 127, "isfutur": [127, 481], "_asyncio_future_block": 127, "ensure_futur": [127, 137, 476, 477, 481], "iscoroutin": [127, 137, 253, 472, 476, 481], "isawait": [127, 159, 253, 387, 476, 481], "wrap_futur": [127, 481], "set_result": [127, 131, 137, 164, 481], "add_done_callback": [127, 137, 164, 478, 481], "remove_done_callback": [127, 137, 481], "set_aft": 127, "excutor": 128, "get_extra_info": [128, 131, 134, 168, 479, 481], "set_protocol": [128, 131, 481], "get_protocol": [128, 131, 481], "is_read": [128, 131, 478, 481], "pause_read": [128, 131, 478, 481], "resume_read": [128, 131, 478, 481], "writelin": [128, 131, 134, 156, 188, 256, 460, 481], "can_write_eof": [128, 131, 134], "write_eof": [128, 131, 134, 339, 481], "get_write_buffer_s": [128, 131], "get_write_buffer_limit": [128, 131, 476, 481], "water": [128, 326, 476, 481], "set_write_buffer_limit": [128, 131], "get_pid": [128, 131], "get_pipe_transport": [128, 131], "get_returncod": [128, 131], "send_sign": [128, 131, 135, 346, 466, 481], "connection_lost": [128, 131, 481], "pause_writ": [128, 131], "resume_writ": [128, 131], "data_receiv": [128, 131, 481], "eof_receiv": [128, 131], "get_buff": [128, 131, 406], "buffer_upd": [128, 131], "datagram_receiv": [128, 131], "error_receiv": [128, 131], "pipe_data_receiv": [128, 131, 481], "pipe_connection_lost": [128, 131], "process_exit": [128, 131, 481], "abstracteventlooppolici": [128, 130, 472, 481], "proactor_ev": 129, "windows_ev": [129, 481], "windows_util": [129, 478, 481], "hpet": 129, "set_child_watch": [129, 130, 472, 481], "kqueueselector": [129, 327, 481], "pollselector": [129, 327, 478], "get_child_watch": [130, 472, 481], "abstractchildwatch": [130, 472, 481], "windowsselectoreventlooppolici": [130, 478, 481], "windowsproactoreventlooppolici": [130, 478, 481], "threadedchildwatch": [130, 135, 472], "multiloopchildwatch": [130, 472, 481], "safechildwatch": [130, 472, 481], "fastchildwatch": [130, 472, 481], "prohibit": [130, 191, 256, 260, 339, 428, 478, 479, 480, 481], "add_child_handl": 130, "returncod": [130, 131, 135, 346, 476, 479, 481], "remove_child_handl": 130, "attach_loop": [130, 481], "detach": [130, 140, 147, 256, 268, 291, 335, 339, 374, 400, 403, 428, 473, 474, 481], "is_act": [130, 230], "inact": [130, 135, 439, 466, 481], "sigchld": [130, 291, 331], "disrupt": [130, 472, 481], "reap": [130, 481], "waitpid": [130, 255, 291, 307, 465, 475, 476, 481], "pidfdchildwatch": [130, 472, 480, 481], "pidfd": [130, 331, 481], "goldilock": 130, "launch": [130, 184, 281, 291, 346, 350, 360, 401, 457, 459, 460, 473, 474, 475, 479, 481], "scale": [130, 316, 326, 341, 374, 384, 460, 463, 466, 477, 478, 481], "myeventlooppolici": 130, "eventloop": [130, 481], "extent": [131, 153, 233, 256, 276, 374, 382, 424, 469, 481], "basetransport": [131, 134, 479], "datagramtransport": [131, 481], "baseprotocol": 131, "bufferedprotocol": [131, 478, 479, 481], "datagramprotocol": [131, 471], "outgo": [131, 198, 335, 339, 472, 473, 474], "getsockopt": [131, 335, 339, 467, 477], "peernam": [131, 134], "getpeernam": [131, 168, 335, 339], "socknam": [131, 481], "getsocknam": [131, 134, 335, 339, 481], "sslsocket": [131, 339, 467, 470, 475, 476, 477, 478, 480, 481], "peercert": 131, "getpeercert": [131, 339, 466, 475, 481], "ssl_object": 131, "sslobject": [131, 339, 384, 476, 478, 481], "watermark": [131, 134], "opportun": [131, 137, 156, 323, 388, 459, 481], "list_of_data": 131, "addr": [131, 134, 149, 168, 257, 327, 335, 339, 360, 418, 473, 476, 481], "sigkil": [131, 135, 281, 291, 331, 346, 358, 464, 478, 481], "terminateprocess": [131, 135, 140, 281, 291, 346, 466, 467, 481], "unidirect": [131, 281], "drain": [131, 134, 136, 339, 473, 481], "reassembl": 131, "sizehint": [131, 156, 326, 481], "recipi": [131, 198, 206, 207, 333, 336, 424], "undeliver": 131, "enobuf": [131, 210, 481], "echoserverprotocol": 131, "8888": [131, 134], "echoclientprotocol": 131, "on_con_lost": 131, "myprotocol": 131, "dateprotocol": 131, "exit_futur": 131, "pipe_clos": 131, "check_for_exit": 131, "get_dat": [131, 135, 269], "qsize": [132, 281, 314], "get_nowait": [132, 259, 281, 314], "queueempti": 132, "task_don": [132, 281, 314, 465, 476, 481], "unblock": [132, 136, 281, 331, 481], "queueful": 132, "priority_numb": [132, 314], "sleep_for": 132, "slept": 132, "workload": [132, 480, 481], "total_sleep_tim": 132, "started_at": 132, "total_slept_for": 132, "return_except": [132, 137, 481], "loop_factori": [133, 472, 481], "tcp_echo_cli": 134, "client_connected_cb": [134, 481], "feed_eof": [134, 481], "readexact": [134, 477, 481], "readuntil": [134, 476, 477, 481], "at_eof": 134, "handle_echo": 134, "print_http_head": 134, "urlsplit": [134, 392, 467, 477, 481], "wait_for_data": 134, "base_subprocess": 135, "proc": [135, 238, 291, 346, 477, 481], "zzz": [135, 430], "stdout_data": [135, 346, 464], "stderr_data": [135, 346, 464], "ctrl_c_event": [135, 291, 331, 346, 467], "ctrl_break_ev": [135, 291, 331, 346, 467], "creationflag": [135, 346, 464], "create_new_process_group": [135, 346], "waiter": [136, 363, 481], "waiter_task": 136, "is_set": [136, 363, 470, 481], "codit": 136, "cond": [136, 142, 350, 384, 465], "notify_al": [136, 363, 470, 481], "sem": 136, "example_barri": 136, "housekeep": [136, 363], "n_wait": [136, 363], "0x1053bb7c8": 137, "say_aft": 137, "task1": [137, 450], "task2": [137, 450], "tg": 137, "function_that_returns_a_future_object": 137, "some_python_coroutin": 137, "leverag": [137, 250, 281, 475, 480], "mid": [137, 481], "background_task": 137, "some_coro": 137, "forev": [137, 307, 326, 461, 462, 463, 464, 474, 481], "misbehav": [137, 481], "uncancel": [137, 471, 481], "another_coro": 137, "bubbl": [137, 425, 481], "baseexceptiongroup": [137, 167, 211, 379, 425, 471, 481], "aws": 137, "aggreg": [137, 259, 338, 386, 471, 481], "stronger": [137, 481], "subtask": 137, "eager_task_factori": [137, 472, 481], "employ": [137, 149, 281, 291, 410, 430, 474], "create_eager_task_factori": [137, 472], "custom_task_constructor": 137, "aw": [137, 481], "long_running_task": 137, "deadlin": [137, 323], "overdu": 137, "new_deadlin": 137, "timeout_at": [137, 481], "yay": [137, 447], "return_when": [137, 164], "all_complet": [137, 164], "first_complet": [137, 164], "first_except": [137, 164], "earliest": [137, 181, 188, 364], "earliest_result": 137, "took": [137, 167, 306, 460, 481], "eager_start": 137, "get_stack": [137, 142, 481], "newest": 137, "print_stack": [137, 265, 379, 476, 481], "get_coro": [137, 479, 481], "get_nam": [137, 349, 479, 481], "deni": [137, 210, 336, 426, 463, 481], "cancel_m": 137, "ineffect": [137, 475], "make_request_with_timeout": 137, "make_request": 137, "make_another_request": 137, "unrelated_cod": 137, "fashion": [137, 168, 232, 260, 281, 306, 317, 335, 379, 384, 411, 425, 426, 428, 464, 467, 474, 475, 481], "suppres": 137, "_exit": [138, 211, 212, 291], "unregistr": [138, 327], "counterfil": 138, "_count": 138, "incrcount": 138, "savecount": 138, "adject": [138, 444], "donni": 138, "sector": 138, "law": [139, 233, 334, 341, 347, 364, 424, 465, 481], "dvi": 139, "adpcm": 139, "fragment1": 139, "fragment2": 139, "adpcm2lin": [139, 481], "adpcmfrag": 139, "lin2adpcm": [139, 481], "newstat": 139, "alaw2lin": 139, "avg": 139, "avgpp": 139, "bias": [139, 194, 203, 306, 316, 463, 473], "findfactor": 139, "rms": 139, "proport": [139, 165, 316, 341, 481], "findfit": 139, "findmax": 139, "energi": 139, "maxim": [139, 188, 189, 194, 233, 245, 360, 438, 479, 481], "getsampl": 139, "wherebi": [139, 149, 266, 297, 481], "ima": 139, "lin2alaw": 139, "lin2lin": 139, "newwidth": 139, "new_fram": 139, "old_width": 139, "lin2ulaw": 139, "maxpp": 139, "minmax": 139, "ratecv": [139, 481], "inrat": 139, "outrat": 139, "weighta": 139, "weightb": [139, 481], "newfrag": 139, "sqrt": [139, 152, 164, 184, 273, 341, 464, 465, 466, 473, 479, 481], "s_i": 139, "tomono": 139, "lfactor": 139, "rfactor": 139, "tostereo": 139, "ulaw2lin": 139, "recombin": [139, 474], "mul_stereo": 139, "lsampl": 139, "rsampl": 139, "toler": [139, 152, 182, 257, 273, 476, 478, 481], "loss": [139, 184, 223, 241, 256, 269, 273, 364, 393, 419, 424, 428, 462, 464, 466, 473, 477, 478, 479, 481], "predict": [139, 223, 256, 350, 411, 426, 453, 459, 473, 480, 481], "misinterpret": 139, "energet": 139, "echocancel": 139, "outputdata": 139, "inputdata": 139, "800": [139, 233, 268, 465, 467, 470, 473, 477, 481], "out_test": 139, "in_test": 139, "ipo": 139, "prefil": 139, "postfil": 139, "breakpointhook": [140, 223, 350, 448, 453, 478, 481], "run_fil": [140, 453], "run_interactivehook": [140, 350], "run_startup": [140, 453], "run_stdin": [140, 453], "addressof": [140, 174], "call_funct": [140, 174, 471, 477, 481], "func_point": 140, "cdata": [140, 174, 312, 408, 413, 414, 481], "create_string_buff": [140, 174, 465], "create_unicode_buff": [140, 174, 481], "dlopen": [140, 174, 291, 350, 454, 462, 465, 481], "dlsym": [140, 174], "get_errno": [140, 174, 466], "get_last_error": [140, 174, 466], "set_errno": [140, 174, 466], "set_last_error": [140, 174, 466], "string_at": [140, 174, 212, 474], "wstring_at": [140, 174], "code_object": [140, 223, 481], "flock": [140, 213, 269, 481], "lockf": [140, 213, 269, 291, 462, 466, 474, 481], "whenc": [140, 151, 213, 256, 276, 291, 444, 462], "sendcmd": [140, 221], "get_object": [140, 225, 470, 479, 481], "get_referr": [140, 225, 380, 470, 481], "root_dir": [140, 229, 330, 470, 472, 481], "dir_fd": [140, 223, 229, 291, 330, 470, 471, 474, 481], "get_osfhandl": [140, 280], "open_osfhandl": [140, 280], "putlin": [140, 286, 303, 481], "add_dll_directori": [140, 291, 479, 481], "chdir": [140, 167, 291, 330, 350, 449, 471, 473, 474, 480, 481], "chflag": [140, 291, 330, 340, 466, 474, 481], "gid": [140, 231, 291, 294, 308, 356, 466, 467, 474, 476, 481], "forkpti": [140, 291, 481], "fwalk": [140, 291, 474, 478, 481], "topdown": [140, 291], "onerror": [140, 291, 300, 330, 472, 478, 481], "follow_symlink": [140, 291, 294, 330, 470, 474, 481], "getxattr": [140, 291, 474], "killpg": [140, 291, 463, 481], "pgid": [140, 291], "src_dir_fd": [140, 291], "dst_dir_fd": [140, 291], "listdriv": [140, 291, 472, 481], "listmount": [140, 291, 472, 481], "listvolum": [140, 291, 472, 481], "listxattr": [140, 291, 474], "putenv": [140, 291, 304, 480, 481], "removexattr": [140, 291, 474], "setxattr": [140, 291, 474, 481], "startfil": [140, 291, 481], "cwd": [140, 221, 291, 294, 346, 360, 397, 464, 479, 481], "show_cmd": [140, 291], "unsetenv": [140, 291, 466, 480, 481], "utim": [140, 291, 330, 474, 481], "ns": [140, 291, 312, 380, 383, 396, 411, 471, 481], "followlink": [140, 291, 466], "rglob": [140, 294, 471, 472, 481], "find_class": [140, 297], "prlimit": [140, 320, 475, 481], "setrlimit": [140, 320, 360, 481], "copymod": [140, 330, 481], "copystat": [140, 330, 474, 481], "make_arch": [140, 330, 467, 472, 473, 476, 479, 481], "base_nam": [140, 330], "unpack_arch": [140, 330, 470, 471, 472, 473, 479, 480, 481], "extract_dir": [140, 330], "pthread_kil": [140, 291, 331, 474], "thread_id": [140, 331, 364, 481], "signalnum": [140, 331], "gethostbyaddr": [140, 291, 335, 481], "gethostbynam": [140, 335], "getservbynam": [140, 335, 481], "servicenam": [140, 335], "protocolnam": [140, 335], "getservbyport": [140, 335, 464, 481], "sendmsg": [140, 335, 472, 474, 476, 481], "sethostnam": [140, 335, 474], "connection_handl": [140, 338], "enable_load_extens": [140, 338, 454, 467, 470, 473, 481], "load_extens": [140, 338, 467, 470, 472, 473, 481], "_current_except": [140, 350, 472, 481], "_current_fram": [140, 350, 448, 465], "_getframemodulenam": [140, 350, 481], "excepthook": [140, 150, 350, 360, 363, 448, 461, 470, 479, 480, 481], "set_asyncgen_hooks_fin": [140, 350], "set_asyncgen_hooks_firstit": [140, 350], "closelog": [140, 354, 472], "openlog": [140, 354, 472, 481], "logopt": [140, 354], "setlogmask": [140, 354], "maskpri": [140, 354], "mkdtemp": [140, 291, 358, 360, 400, 472, 481], "fullpath": [140, 358], "mkstemp": [140, 281, 358, 481], "fullurl": [140, 393], "connectregistri": [140, 403], "computer_nam": [140, 403], "createkey": [140, 403], "sub_key": [140, 403], "deletekey": [140, 403], "deletevalu": [140, 403], "disablereflectionkey": [140, 403, 466, 467], "enablereflectionkey": [140, 403, 466, 467], "enumkey": [140, 403], "enumvalu": [140, 403], "expandenvironmentstr": [140, 403, 466], "loadkey": [140, 403], "file_nam": [140, 403], "openkey": [140, 403], "pyhkey": [140, 403], "queryinfokey": [140, 403], "queryreflectionkey": [140, 403, 466, 467], "queryvalu": [140, 403, 481], "value_nam": [140, 403], "savekey": [140, 403], "setvalu": [140, 403, 481], "_winapi": [140, 481], "createfil": 140, "desired_access": 140, "share_mod": 140, "creation_disposit": 140, "flags_and_attribut": 140, "createjunct": 140, "src_path": 140, "dst_path": 140, "createnamedpip": 140, "open_mod": 140, "pipe_mod": 140, "createpip": 140, "createprocess": [140, 346, 481], "application_nam": 140, "command_lin": [140, 346], "current_directori": 140, "openprocess": 140, "process_id": [140, 335], "exit_cod": [140, 211], "pyobj_fromptr": 140, "4648": [141, 325, 481], "ascii85": [141, 475, 481], "76": [141, 200, 341, 380, 382, 417], "2045": [141, 192, 194, 200, 201, 203, 417], "b64encod": [141, 233, 481], "altchar": 141, "b64decod": [141, 233, 474, 481], "a2b_base64": [141, 144, 481], "standard_b64encod": 141, "standard_b64decod": 141, "urlsafe_b64encod": 141, "urlsafe_b64decod": 141, "b32encod": 141, "b32decod": [141, 475, 481], "map01": 141, "oh": 141, "eye": [141, 184, 188, 465, 472, 476, 479], "b32hexencod": [141, 470, 481], "b32hexdecod": [141, 470, 481], "b16encod": 141, "b16decod": 141, "a85encod": [141, 475, 481], "foldspac": 141, "wrapcol": 141, "adob": [141, 475, 481], "btoa": 141, "a85decod": [141, 475, 481], "ignorechar": 141, "x0b": [141, 342, 396], "b85encod": [141, 475, 481], "b85decod": [141, 475], "decodebyt": [141, 156, 480, 481], "encodebyt": [141, 156, 480, 481], "zgf0ysb0bybizsblbmnvzgvk": 141, "1521": [141, 315], "multipurpos": 141, "bdbquit": 142, "bpbynumb": 142, "bplist": 142, "deletem": 142, "bpformat": 142, "bpprint": 142, "botfram": [142, 481], "stopfram": 142, "returnfram": 142, "trace_dispatch": 142, "c_call": [142, 350], "c_return": [142, 350, 351], "c_except": [142, 350], "dispatch_lin": 142, "user_lin": 142, "dispatch_cal": 142, "user_cal": 142, "dispatch_return": 142, "user_return": 142, "dispatch_except": 142, "user_except": 142, "is_skipped_lin": 142, "module_nam": [142, 248, 281, 360, 470, 478, 481], "stop_her": 142, "break_her": 142, "break_anywher": 142, "argument_list": [142, 425, 428], "return_valu": [142, 189, 387, 388, 473, 475, 477, 481], "do_clear": 142, "set_step": 142, "set_next": 142, "set_return": 142, "set_until": 142, "set_trac": [142, 191, 223, 295, 350, 453, 478, 481], "set_continu": 142, "set_quit": 142, "dispatch_": 142, "set_break": 142, "clear_break": 142, "clear_bpbynumb": 142, "clear_all_file_break": 142, "clear_all_break": 142, "get_bpbynumb": 142, "get_break": 142, "get_file_break": 142, "get_all_break": 142, "format_stack_entri": [142, 481], "frame_lineno": 142, "lprefix": 142, "runev": [142, 295], "runctx": [142, 306, 378], "runcal": [142, 295, 306, 479], "checkfuncnam": 142, "a2b_": [144, 474], "a2b_uu": 144, "b2a_uu": [144, 478, 481], "strict_mod": [144, 481], "3548": [144, 464], "b2a_base64": [144, 477, 481], "a2b_qp": [144, 481], "b2a_qp": [144, 481], "quotetab": [144, 156, 315], "istext": 144, "1522": [144, 315], "linefe": [144, 206, 329, 343, 433, 463], "crc_hqx": [144, 471, 481], "crc": [144, 420, 422, 481], "ccitt": [144, 347], "polynomi": [144, 259], "0x1021": 144, "binhex4": [144, 480, 481], "crc32": [144, 233, 422, 449, 450, 481], "checksum": [144, 335, 356, 420, 422], "010x": 144, "b2a_hex": [144, 156, 481], "bytes_per_sep": [144, 342], "hexlifi": [144, 481], "xb9": 144, "x01": [144, 256, 257, 282, 335, 345, 396], "b901ef": 144, "b9": 144, "ef": [144, 158, 259, 392, 415], "b9_01ef": 144, "b901": 144, "a2b_hex": [144, 156, 475], "hexstr": 144, "invers": [144, 152, 181, 184, 199, 207, 209, 223, 242, 257, 273, 289, 297, 329, 338, 341, 342, 364, 428, 429, 466, 472, 479, 481], "liber": [144, 191], "fromhex": [144, 342, 442, 466, 471, 477, 478, 481], "85": [144, 151, 286, 341, 476], "bisect_left": 145, "bisect_right": 145, "insort_left": [145, 481], "insort_right": 145, "insort": [145, 450, 481], "domin": [145, 241, 481], "sortedcollect": 145, "find_lt": 145, "find_l": 145, "find_gt": 145, "find_g": 145, "score": [145, 188, 338, 341, 450], "70": [145, 181, 184, 316, 341, 362, 380, 439, 449, 450, 481], "fdcba": 145, "titan": 145, "bird": 145, "1963": 145, "hitchcock": 145, "alien": [145, 363], "1986": [145, 181], "1960": 145, "by_year": 145, "romanc": 145, "hiller": 145, "_f": 146, "bz2file": [147, 268, 467, 469, 470, 474, 475, 480, 481], "bz2compressor": [147, 481], "bz2decompressor": [147, 476, 481], "compresslevel": [147, 232, 356, 420, 478, 480, 481], "xb": [147, 232, 268], "rt": [147, 223, 232, 268, 360, 382, 481], "wt": [147, 223, 232, 268, 341], "bufferediobas": [147, 223, 232, 240, 243, 256, 268, 297, 336, 358, 367, 405, 466, 467, 471, 473, 474, 476, 477, 481], "peek": [147, 158, 232, 256, 268, 400, 473, 481], "read1": [147, 232, 256, 481], "compressor": [147, 268, 481], "decompressor": [147, 268, 481], "max_length": [147, 268, 422, 476, 481], "needs_input": [147, 268], "unused_data": [147, 268, 422], "donec": 147, "rhoncus": 147, "qui": 147, "sapien": 147, "sit": [147, 373, 415], "amet": 147, "molesti": 147, "fusc": 147, "scelerisqu": 147, "vel": 147, "augu": 147, "nec": 147, "ullamcorp": 147, "nam": 147, "rutrum": 147, "pretium": 147, "placerat": 147, "aliquam": 147, "tristiqu": 147, "lorem": 147, "cursus": 147, "interdum": 147, "laoreet": 147, "ultric": 147, "purus": 147, "pulvinar": 147, "gravida": 147, "euismod": 147, "magna": 147, "varius": 147, "justo": 147, "tincidunt": 147, "feugiat": 147, "pharetra": 147, "lacus": 147, "risus": 147, "vehicula": 147, "maecena": 147, "feli": 147, "pellentesqu": 147, "semper": 147, "nunc": 147, "nibh": 147, "ac": [147, 158, 259, 424, 454, 463, 481], "elementum": 147, "dolor": 147, "luctus": 147, "curabitur": 147, "lacinia": 147, "ornar": 147, "consectetur": 147, "vestibulum": 147, "ratio": [147, 188, 219, 273, 341, 342, 382, 474, 481], "513595166163142": 147, "gen_data": 147, "chunksiz": [147, 164, 281, 301, 476, 481], "nonrandom": 147, "myfil": [147, 256, 291, 386, 420, 438, 441, 450], "setfirstweekday": 148, "gregorian": [148, 181], "dershowitz": [148, 181], "reingold": [148, 181], "calendr": [148, 181], "prolept": [148, 181], "8601": [148, 181, 188, 264, 338, 417, 471, 477, 481], "firstweekday": 148, "iterweekday": 148, "itermonthd": [148, 478, 481], "itermonthday": [148, 481], "itermonthdays2": [148, 481], "itermonthdays3": [148, 478, 481], "itermonthdays4": [148, 478, 481], "monthdatescalendar": 148, "monthdays2calendar": 148, "monthdayscalendar": 148, "yeardatescalendar": 148, "yeardays2calendar": 148, "yeardayscalendar": 148, "textcalendar": [148, 481], "formatmonth": 148, "theyear": 148, "themonth": 148, "prmonth": [148, 481], "formatyear": 148, "pryear": [148, 481], "htmlcalendar": [148, 478], "withyear": 148, "formatyearpag": 148, "css": [148, 238, 473, 478, 481], "cascad": [148, 481], "formatmonthnam": [148, 481], "cssclass": 148, "tue": [148, 181], "wed": [148, 181, 364], "fri": [148, 207, 473, 474, 481], "cssclass_noday": 148, "cssclasses_weekday_head": 148, "cssclass_month_head": 148, "cssclass_month": 148, "cssclass_year": 148, "cssclass_year_head": 148, "customhtmlc": 148, "nowrap": 148, "center": [148, 153, 175, 184, 246, 253, 342, 343, 367, 374, 382, 424, 426, 444, 464, 466, 474, 481], "ital": [148, 175, 370], "localetextcalendar": [148, 471, 481], "localehtmlcalendar": [148, 471, 481], "formatweekday": [148, 481], "lc_time": [148, 264], "isleap": 148, "leapday": 148, "y1": [148, 428, 439, 470, 472, 481], "y2": [148, 223, 439, 470, 472, 481], "weekhead": 148, "monthrang": 148, "monthcalendar": 148, "prcal": 148, "timegm": [148, 364], "day_nam": 148, "day_abbr": 148, "month_nam": [148, 433], "month_abbr": 148, "januari": [148, 151, 181, 316, 364, 424, 433, 461, 472, 481], "februari": [148, 181, 364, 433, 461, 472, 473, 481], "march": [148, 181, 342, 364, 382, 449, 460, 464, 475], "april": [148, 181, 433, 446, 460, 461], "august": [148, 465], "septemb": [148, 433, 460, 465, 474, 476], "octob": [148, 181, 460, 462, 463, 466, 472, 479, 480], "decemb": [148, 181, 433, 449, 462, 463, 468, 477], "illegalmontherror": 148, "illegalweekdayerror": 148, "mo": [148, 181, 228, 317, 342, 463, 477, 479, 481], "tu": [148, 463], "fr": [148, 228, 269, 316, 433, 463, 478], "su": [148, 481], "fieldstorag": [149, 475, 476, 478, 481], "parse_qsl": [149, 392, 466, 470, 477, 478, 479, 480, 481], "multipart": [149, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 481], "maxlen": [149, 158, 259, 384, 466, 467], "isindex": 149, "goodi": 149, "h1": [149, 233, 238, 240, 266, 418], "logdir": [149, 150], "keep_blank_valu": [149, 392], "minifieldstorag": [149, 481], "getlist": [149, 476], "fileitem": 149, "userfil": 149, "linecount": 149, "getfirst": 149, "strict_pars": [149, 392], "parse_q": [149, 392, 466, 470, 477, 478, 479, 480, 481], "parse_multipart": [149, 470, 477, 478, 479, 480, 481], "pdict": 149, "megabyt": 149, "emailmessag": [149, 192, 194, 195, 198, 199, 200, 203, 205, 206, 240, 393, 475, 477, 481], "rfcs": [149, 156, 192, 194, 199, 200, 201, 203, 206, 207, 303, 339, 463, 476, 481], "parse_head": [149, 240, 243, 481], "get_content_typ": [149, 194, 198, 203], "print_environ": 149, "print_form": 149, "print_directori": 149, "print_environ_usag": 149, "hole": [149, 291, 329, 466, 467, 470, 481], "hacker": [149, 316], "exploit": [149, 268, 291, 356, 426, 453, 475, 481], "gullibl": 149, "trust": [149, 266, 281, 297, 300, 303, 339, 346, 356, 392, 458, 459, 466, 467, 475, 477, 478, 479, 480, 481], "dash": [149, 156, 175, 194, 203, 317, 329], "0o755": 149, "0755": [149, 481], "0o644": 149, "0o666": [149, 182, 291, 294, 395], "privileg": [149, 286, 291, 335, 337, 340, 364, 403, 474, 477, 481], "everybodi": [149, 242], "cryptic": [149, 481], "yourhostnam": 149, "suspect": [149, 460, 481], "userid": [149, 267, 384, 477], "suexec": 149, "liabil": [149, 424], "excerpt": [150, 184, 479], "ea": 151, "rmff": 151, "bigendian": 151, "inclhead": 151, "getnam": [151, 356, 363, 414, 470, 481], "getsiz": [151, 291, 292, 481], "ioerror": [151, 188, 211, 213, 216, 223, 228, 241, 253, 256, 280, 281, 293, 330, 331, 421, 448, 466, 467, 468, 474], "jerri": 151, "morrison": [151, 475], "electron": [151, 339, 424], "art": [151, 152, 158, 191], "1985": [151, 338], "kahan": 152, "elementari": [152, 175, 382], "annex": [152, 273, 385, 433, 466], "lie": [152, 181, 240, 248, 267, 281, 342, 374, 384, 426, 434, 462, 463], "4142135623730951j": 152, "cartesian": [152, 259, 338, 466, 469, 476], "modulus": [152, 287, 342, 350, 466, 473, 479], "phi": [152, 273], "counterclockwis": [152, 382], "radian": [152, 184, 273, 382, 463, 479, 481], "atan2": [152, 273, 481], "141592653589793": [152, 442, 473], "rect": [152, 174, 466], "cos": [152, 184, 219, 273, 297, 449, 463, 479], "log10": [152, 184, 273, 466], "aco": [152, 273], "arc": [152, 273, 382, 466, 467, 469, 473, 481], "cosin": [152, 184, 273], "asin": [152, 273], "sine": [152, 184, 273], "atan": [152, 273, 466], "tangent": [152, 273, 382], "tan": [152, 273, 481], "acosh": [152, 273, 466, 481], "asinh": [152, 273, 466, 481], "atanh": [152, 273, 466, 481], "cosh": [152, 273], "sinh": [152, 273], "tanh": [152, 273], "isfinit": [152, 273, 473, 481], "isinf": [152, 273, 342, 466, 481], "isnan": [152, 273, 341, 342, 440, 466, 481], "isclos": [152, 273, 442, 476, 481], "rel_tol": [152, 273, 476], "1e": [152, 223, 273, 343, 345, 428, 476, 481], "abs_tol": [152, 273, 476], "tau": [152, 273, 477, 481], "infj": [152, 477, 481], "nanj": [152, 477, 481], "curv": [152, 339, 382, 474, 481], "enlighten": 152, "ado": 152, "iserl": 152, "powel": [152, 481], "eds": 152, "clarendon": 152, "1987": [152, 156, 181, 406], "pp165": 152, "211": [152, 286, 474], "completekey": [153, 295], "use_rawinput": 153, "cmdloop": 153, "intro": [153, 457, 467], "banner": [153, 155, 481], "do_help": [153, 481], "do_shel": 153, "postcmd": 153, "complete_foo": 153, "begidx": 153, "endidx": 153, "help_bar": 153, "help_": 153, "undocu": [153, 182, 224, 265, 295, 360, 386, 420, 472, 474, 475, 476, 477, 478, 480, 481], "onecmd": 153, "precmd": 153, "emptylin": 153, "nonempti": [153, 189, 317, 342, 382, 401, 426], "completedefault": 153, "complete_": 153, "displaywidth": 153, "preloop": 153, "postloop": 153, "solicit": 153, "identchar": 153, "lastcmd": 153, "cmdqueue": 153, "doc_head": 153, "misc_head": 153, "undoc_head": 153, "ruler": 153, "drawn": [153, 175, 265, 291, 382, 481], "do_forward": 153, "playback": [153, 293], "do_playback": 153, "turtleshel": 153, "do_right": 153, "do_left": 153, "do_goto": 153, "do_hom": 153, "do_circl": 153, "do_posit": 153, "do_head": [153, 243], "do_color": 153, "do_undo": 153, "do_reset": 153, "do_by": 153, "bye": [153, 168, 246, 286, 382, 474], "do_record": 153, "rose": [153, 259, 477, 481], "spiral": 153, "180": [153, 233, 341, 382, 473], "rot_13": [154, 156], "pstat": [154, 306, 449, 461, 465, 481], "interactiveinterpret": [155, 476, 481], "__console__": 155, "interactiveconsol": [155, 318], "readfunc": 155, "exitmsg": 155, "compile_command": [155, 157, 481], "runsourc": [155, 338], "showsyntaxerror": 155, "runcod": 155, "showtraceback": [155, 476, 481], "stuf": 155, "resetbuff": 155, "codecinfo": [156, 465], "getincrementalencod": [156, 474], "getincrementaldecod": 156, "wider": [156, 181, 384, 464, 475], "encodedfil": 156, "data_encod": 156, "file_encod": 156, "transcod": [156, 473], "iterencod": [156, 260], "base64_codec": 156, "iterdecod": 156, "bom_b": 156, "bom_l": 156, "bom_utf8": 156, "bom_utf16": 156, "bom_utf16_b": 156, "bom_utf16_l": 156, "bom_utf32": 156, "bom_utf32_b": 156, "bom_utf32_l": 156, "xdf": [156, 233, 302], "u266c": 156, "223": 156, "9836": 156, "strict_error": 156, "ignore_error": [156, 330, 481], "replace_error": 156, "hh": [156, 181, 246, 364, 433, 460, 481], "xxxx": [156, 291, 433, 481], "xxxxxxxx": [156, 291, 433], "backslashreplace_error": 156, "xmlcharrefreplace_error": 156, "namereplace_error": 156, "d800": 156, "dfff": 156, "register_error": [156, 223, 256, 342, 463], "error_handl": [156, 412], "lookup_error": [156, 463], "getstat": [156, 316], "setstat": [156, 316, 481], "utf_8": [156, 481], "rescan": [156, 300], "recov": [156, 188, 211, 219, 350, 395, 413, 467, 472, 473], "firstlin": [156, 186], "huge": [156, 256, 460, 475, 481], "reposit": [156, 256], "resp": [156, 264, 286, 305, 476], "frontend": 156, "adher": [156, 165, 243, 260, 267, 281, 432], "0x0": 156, "00ff": [156, 473, 474, 481], "charmap": 156, "fffe": 156, "ligatur": 156, "2060": [156, 246], "joiner": [156, 476, 481], "role": [156, 339, 411, 468, 473, 479, 481], "payload": [156, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 240, 249, 467, 481], "00000000": 156, "0000007f": 156, "0xxxxxxx": 156, "00000080": 156, "000007ff": 156, "110xxxxx": 156, "10xxxxxx": 156, "00000800": 156, "0000ffff": 156, "1110xxxx": 156, "00010000": 156, "0010ffff": 156, "11110xxx": 156, "invent": [156, 269, 363, 432, 463, 467], "notepad": [156, 433], "0xef": 156, "0xbb": 156, "0xbf": 156, "improb": 156, "diaeresi": 156, "quotat": [156, 346, 466, 481], "iso8859": 156, "utf16": 156, "utf32": 156, "euro": [156, 467, 468], "european": [156, 467], "ebcdic": [156, 475], "pc": [156, 175, 272, 404, 420, 433, 454, 459, 466, 471, 481], "big5": [156, 464], "csbig5": 156, "big5hksc": [156, 464], "hkscs": 156, "cp037": 156, "ibm037": 156, "ibm039": 156, "cp273": [156, 475], "ibm273": 156, "csibm273": 156, "cp424": 156, "he": [156, 295, 317, 363, 433, 460, 477], "ibm424": 156, "cp437": [156, 420], "437": 156, "ibm437": 156, "cp500": 156, "ibm500": 156, "western": [156, 364], "europ": [156, 164, 364, 423, 467], "cp720": [156, 467, 473], "cp737": 156, "cp775": 156, "ibm775": 156, "baltic": 156, "cp850": 156, "850": [156, 467], "ibm850": 156, "cp852": 156, "852": 156, "ibm852": 156, "central": [156, 181, 192, 203, 285, 341, 460, 461, 462, 463, 465, 473, 481], "eastern": [156, 181, 364, 477], "cp855": 156, "855": [156, 219], "ibm855": 156, "bulgarian": 156, "byelorussian": 156, "macedonian": 156, "serbian": 156, "cp856": 156, "cp857": 156, "857": 156, "ibm857": 156, "cp858": [156, 467], "858": 156, "ibm858": 156, "cp860": 156, "860": 156, "ibm860": 156, "portugues": [156, 481], "cp861": 156, "861": [156, 294], "ibm861": 156, "iceland": [156, 465], "cp862": 156, "862": 156, "ibm862": 156, "cp863": 156, "863": 156, "ibm863": 156, "cp864": 156, "ibm864": 156, "cp865": 156, "865": 156, "ibm865": 156, "danish": 156, "cp866": 156, "866": [156, 188, 479], "ibm866": 156, "cp869": 156, "869": 156, "gr": [156, 465, 470, 471, 479, 481], "ibm869": 156, "cp874": 156, "cp875": 156, "cp932": [156, 464], "932": 156, "ms932": 156, "mskanji": 156, "kanji": 156, "cp949": [156, 464], "949": 156, "ms949": 156, "uhc": 156, "cp950": [156, 464], "950": 156, "ms950": 156, "cp1006": 156, "urdu": 156, "cp1026": 156, "ibm1026": 156, "cp1125": [156, 475], "1125": 156, "ibm1125": 156, "cp866u": 156, "ruscii": 156, "cp1140": 156, "ibm1140": 156, "cp1250": [156, 165], "1250": 156, "cp1251": 156, "1251": 156, "1252": [156, 446, 450], "cp1253": 156, "1253": 156, "cp1254": 156, "1254": [156, 317], "cp1255": 156, "1255": 156, "cp1256": 156, "1256": 156, "cp1257": 156, "1257": 156, "cp1258": 156, "1258": 156, "euc_jp": 156, "eucjp": 156, "uji": 156, "jis": [156, 464], "euc_jis_2004": 156, "jisx0213": [156, 464], "eucjis2004": 156, "euc_jisx0213": 156, "eucjisx0213": 156, "euc_kr": 156, "euckr": 156, "korean": [156, 464, 478, 481], "ksc5601": 156, "ks_c": 156, "5601": 156, "ksx1001": 156, "ks_x": 156, "gb2312": [156, 385, 464, 474], "chines": [156, 464, 481], "csiso58gb231280": 156, "euc": [156, 193, 464], "cn": 156, "euccn": 156, "eucgb2312": 156, "1980": [156, 188, 420, 481], "ir": 156, "gbk": [156, 464], "936": 156, "cp936": 156, "ms936": 156, "gb18030": [156, 464, 481], "hz": [156, 464, 474, 481], "hzgb": 156, "gb": [156, 339, 407, 481], "2312": 156, "iso2022_jp": 156, "csiso2022jp": 156, "iso2022jp": 156, "2022": [156, 181, 193, 233, 446, 449, 464, 471, 481], "jp": [156, 193, 424, 464], "iso2022_jp_1": 156, "iso2022_jp_2": 156, "iso2022_jp_2004": [156, 481], "2004": [156, 181, 374, 424, 464], "iso2022_jp_3": [156, 481], "iso2022_jp_ext": 156, "iso2022_kr": 156, "csiso2022kr": 156, "iso2022kr": 156, "kr": [156, 464], "latin_1": [156, 193, 481], "cp819": 156, "iso8859_2": 156, "latin2": [156, 338], "iso8859_3": 156, "latin3": 156, "l3": 156, "esperanto": 156, "maltes": 156, "iso8859_4": 156, "latin4": 156, "l4": 156, "iso8859_5": 156, "cyril": 156, "iso8859_6": 156, "iso8859_7": 156, "greek8": 156, "iso8859_8": 156, "iso8859_9": 156, "latin5": 156, "l5": 156, "iso8859_10": 156, "latin6": 156, "l6": [156, 474], "nordic": 156, "iso8859_11": 156, "iso8859_13": 156, "latin7": 156, "l7": 156, "iso8859_14": 156, "latin8": 156, "l8": 156, "celtic": 156, "iso8859_15": 156, "latin9": 156, "l9": 156, "iso8859_16": 156, "latin10": 156, "l10": 156, "johab": [156, 464], "cp1361": 156, "ms1361": 156, "koi8_r": 156, "koi8_t": [156, 476, 481], "tajik": [156, 476], "koi8_u": 156, "kz1048": [156, 476, 481], "kz_1048": 156, "strk1048_2002": 156, "rk1048": 156, "kazakh": [156, 476], "mac_cyril": 156, "maccyril": 156, "mac_greek": 156, "macgreek": 156, "mac_iceland": 156, "maciceland": 156, "mac_latin2": [156, 481], "maclatin2": 156, "maccentraleurop": 156, "mac_centeuro": [156, 481], "mac_roman": 156, "macroman": 156, "mac_turkish": 156, "macturkish": 156, "ptcp154": 156, "csptcp154": 156, "pt154": 156, "cp154": 156, "asian": [156, 385, 464], "shift_ji": 156, "csshiftji": 156, "shiftji": 156, "sjis": 156, "s_jis": 156, "shift_jis_2004": 156, "shiftjis2004": 156, "sjis_2004": 156, "sjis2004": 156, "shift_jisx0213": 156, "shiftjisx0213": 156, "sjisx0213": 156, "s_jisx0213": 156, "utf_32": 156, "u32": 156, "utf_32_b": 156, "32be": 156, "utf_32_l": 156, "32le": 156, "utf_16": 156, "u16": 156, "utf_16_b": 156, "16be": 156, "utf_16_l": 156, "16le": 156, "utf_7": 156, "u7": 156, "u8": 156, "cp65001": [156, 474, 481], "asymmetr": 156, "3490": [156, 463], "oem": [156, 477, 481], "cp_oemcp": [156, 477], "palmo": 156, "3492": [156, 463], "raw_unicode_escap": 156, "bewar": [156, 211, 219, 260, 281, 328, 338, 339, 430, 449, 468], "unicode_intern": [156, 474, 479, 481], "base_64": 156, "bz2_codec": [156, 475], "hex_codec": [156, 475], "quopri_codec": 156, "quotedprint": 156, "quoted_print": 156, "uu_codec": [156, 481], "zlib_codec": 156, "rot13": [156, 475, 481], "caesar": 156, "cypher": 156, "encrypt": [156, 171, 231, 246, 266, 286, 303, 333, 337, 339, 420, 460, 462, 463, 467, 473, 474, 475, 481], "nameprep": [156, 344], "idn": [156, 339, 478, 481], "5891": 156, "5895": 156, "alliancefran": [156, 463], "ais": [156, 463], "nu": [156, 463], "ace": [156, 316, 317, 463], "xn": [156, 339, 463, 478], "alliancefranais": [156, 463], "npb": [156, 463], "allowunassign": 156, "toascii": 156, "usestd3asciirul": 156, "outcom": [157, 165, 384, 386, 425, 481], "commandcompil": 157, "subcontext": 158, "new_child": [158, 475, 481], "baselin": 158, "bach": 158, "rembrandt": 158, "gogh": 158, "opera": [158, 401, 465, 481], "carmen": 158, "584": [158, 291, 383, 400, 480, 481], "enthought": [158, 459], "codetool": 158, "multicontext": 158, "pylookup": 158, "guest": [158, 335, 481], "command_line_arg": 158, "flatten": [158, 194, 199, 200, 201, 203, 206, 259, 297, 342, 384, 440, 472, 475, 476, 480, 481], "deepchainmap": 158, "inner": [158, 167, 189, 233, 235, 253, 317, 338, 342, 382, 384, 411, 425, 427, 464, 467, 473, 474, 481], "eleph": 158, "lion": 158, "topmost": [158, 350, 465, 481], "talli": [158, 467, 473, 474], "cnt": 158, "hamlet": [158, 460], "most_common": [158, 467], "1143": 158, "966": 158, "762": 158, "631": 158, "546": [158, 380], "514": [158, 267, 459, 463, 471, 481], "bag": [158, 198, 425, 438], "multiset": [158, 473], "gallahad": [158, 440, 469], "sausag": [158, 223, 342], "list_of_pair": 158, "intersect": [158, 342, 382, 426, 463, 464, 466, 467, 481], "knuth": [158, 184], "donald": [158, 339, 467, 475], "cc": [158, 201, 207, 259, 269, 333, 359, 454, 463, 472, 474, 481], "deck": [158, 316], "appendleft": [158, 464], "extendleft": 158, "popleft": [158, 259, 314, 440, 450, 464], "ghi": [158, 174, 265, 329, 464], "jkl": 158, "pyshel": [158, 184, 245, 317, 477, 478, 479, 481], "moving_averag": 158, "39": [158, 181, 191, 281, 291, 364, 454, 464, 470, 474, 479, 480, 481], "roundrobin": [158, 259], "delete_nth": 158, "dup": [158, 291, 335, 481], "rot": [158, 462, 481], "roll": [158, 181, 267, 338, 360, 386, 438, 465, 466, 481], "default_factori": [158, 179, 384, 481], "__missing__": [158, 342, 387, 425, 426, 465, 473, 481], "mississippi": [158, 342], "constant_factori": 158, "ran": [158, 191, 211, 346, 386, 466, 467, 472, 481], "typenam": [158, 305, 338, 466, 481], "field_nam": [158, 343], "_1": [158, 467, 469], "_3": 158, "_sourc": [158, 478, 481], "_field_default": [158, 384, 481], "employeerecord": 158, "depart": [158, 223, 342], "paygrad": 158, "emp": 158, "_make": [158, 338, 345, 481], "employe": [158, 384, 438, 481], "companydata": 158, "fetchal": [158, 338, 465], "somenamedtupl": 158, "_asdict": [158, 466, 467, 469, 479, 481], "_replac": [158, 392, 466, 481], "partnum": 158, "inventori": [158, 179, 289], "newpric": 158, "pixel": [158, 367, 370, 374, 382, 481], "premium": 158, "hypot": [158, 273, 479, 481], "000": [158, 174, 181, 184, 233, 259, 280, 306, 459, 472, 473, 474], "714": 158, "018": 158, "hardcov": 158, "isbn": [158, 367, 452], "part_numb": 158, "lru": [158, 224, 481], "k1": [158, 400], "k2": [158, 400], "popitem": [158, 159, 165, 259, 269, 286, 342, 426, 461, 463, 467, 481], "od": [158, 467, 470, 473, 481], "move_to_end": [158, 473, 481], "acdeb": 158, "bacd": 158, "od1": [158, 467], "od2": [158, 467], "lastupdatedordereddict": 158, "timeboundedlru": 158, "maxag": 158, "multihitlrucach": 158, "maxrequest": 158, "cache_aft": 158, "uncached_key": 158, "request_count": 158, "cached_key": 158, "function_result": 158, "uncach": [158, 291, 473, 481], "initialdata": 158, "format_map": [158, 342, 473, 476, 481], "isprint": [158, 176, 342, 476, 481], "maketran": [158, 342, 469, 473, 476, 481], "_collections_abc": 159, "mutablesequ": [159, 342, 384, 468, 474, 476, 481], "isdisjoint": [159, 342, 481], "mutableset": [159, 342, 384, 481], "mappingview": [159, 342, 384, 481], "itemsview": [159, 342, 384], "keysview": [159, 342, 384], "valuesview": [159, 342, 384, 481], "asyncgener": [159, 342, 384, 477, 481], "asend": [159, 428, 480, 481], "athrow": [159, 428, 480, 481], "__buffer__": [159, 253, 426, 472, 481], "gencoro": 159, "myvar": 159, "listbasedset": 159, "favor": [159, 223, 240, 286, 291, 342, 360, 384, 393, 464, 466, 468, 472, 473, 475, 476, 477, 479, 481], "lst": [159, 295], "abcdef": [159, 174, 256, 259, 317, 467, 475], "defghi": [159, 259], "_from_iter": 159, "_hash": [159, 481], "orderedset": 159, "yiq": [160, 475], "hls": 160, "hsv": 160, "poynton": 160, "colorfaq": 160, "cambridgeincolour": 160, "htm": [160, 181, 243, 462, 463, 464, 465, 466, 467, 468], "rgb_to_yiq": 160, "yiq_to_rgb": 160, "rgb_to_hl": [160, 481], "hls_to_rgb": 160, "rgb_to_hsv": 160, "hsv_to_rgb": 160, "qq": 161, "destdir": [161, 481], "strip_prefix": 161, "prepend_prefix": 161, "coexist": 161, "cpu_count": [161, 164, 281, 291, 470, 475, 481], "uncheck": [161, 430, 453, 478, 481], "source_date_epoch": [161, 309, 478, 481], "hardlink": [161, 356, 480, 481], "dupe": [161, 480], "consolid": [161, 282, 463, 474, 477, 481], "multilevel": [161, 481], "getrecursionlimit": [161, 211, 245, 350, 448, 460, 472, 481], "compile_dir": [161, 476, 478, 481], "maxlevel": [161, 305, 319], "ddir": [161, 481], "rx": [161, 317], "invalidation_mod": [161, 309, 478, 481], "stripdir": [161, 480, 481], "prependdir": [161, 480, 481], "limit_sl_dest": [161, 480, 481], "hardlink_dup": [161, 480], "pycinvalidationmod": [161, 309], "compile_fil": [161, 476, 481], "fullnam": [161, 248, 250, 251, 300, 421, 463], "compile_path": [161, 476], "skip_curdir": 161, "323": [164, 477], "1235": 164, "cancel_futur": [164, 480, 481], "src1": [164, 473], "dest1": [164, 473], "src2": [164, 473], "dest2": [164, 473], "src3": [164, 473], "dest3": [164, 473], "src4": 164, "dest4": [164, 473], "wait_on_b": 164, "wait_on_a": 164, "wait_on_futur": 164, "thread_name_prefix": [164, 477, 481], "initarg": [164, 281, 478], "grace": [164, 317, 331, 363, 428, 467, 473, 478, 481], "brokenthreadpool": 164, "foxnew": 164, "cnn": [164, 182], "wsj": 164, "nonexist": [164, 481], "subdomain": 164, "load_url": 164, "future_to_url": 164, "mp_context": [164, 281, 478, 481], "max_tasks_per_child": [164, 481], "61": [164, 342, 364, 464, 481], "brokenprocesspool": 164, "start_method": 164, "112272535095293": 164, "112582705942171": 164, "115280095190773": 164, "115797848077099": 164, "1099726899285419": 164, "is_prim": 164, "sqrt_n": 164, "set_running_or_notify_cancel": 164, "not_don": 164, "brokenexecutor": 164, "mini": [165, 343, 433, 467, 469], "serveraliveinterv": 165, "compressionlevel": 165, "forwardx11": 165, "forg": 165, "hg": [165, 294, 339, 463, 467, 473, 481], "topsecret": 165, "50022": 165, "configfil": 165, "another_config": 165, "read_str": [165, 473, 476], "nport": 165, "48484": 165, "read_dict": [165, 473, 478, 479, 480, 481], "21212": 165, "getboolean": [165, 481], "getint": [165, 481], "getfloat": 165, "3des": [165, 339, 477, 481], "cbc": [165, 335], "monster": [165, 362], "batchmod": 165, "sectcr": 165, "14159265359": [165, 442, 444], "chorus": 165, "lumberjack": [165, 305, 379], "night": 165, "key_without_valu": 165, "harm": [165, 224, 290, 473, 481], "can_values_be_as_wel": 165, "does_that_mean_anything_speci": 165, "multiline_valu": 165, "preprocess": [165, 173, 392], "basicinterpol": [165, 471, 481], "home_dir": 165, "my_dir": 165, "my_pictur": 165, "extendedinterpol": [165, 471, 473, 481], "zc": 165, "buildout": [165, 473], "library_dir": 165, "system_dir": 165, "macports_dir": 165, "arthur": [165, 342, 479, 481], "nicknam": 165, "shed": 165, "last_nam": [165, 173, 317], "jackson": [165, 475], "twosh": 165, "python_dir": 165, "optionxform": 165, "defaultsect": 165, "section_nam": 165, "section_proxi": 165, "dict_typ": [165, 302], "section1": 165, "key1": [165, 425, 480], "key2": [165, 425, 480], "key3": [165, 480], "value3": [165, 480], "section2": 165, "keya": 165, "valuea": 165, "keyb": 165, "valueb": 165, "keyc": 165, "valuec": 165, "section3": 165, "allow_no_valu": [165, 467], "sample_config": [165, 467], "mysqld": [165, 467], "mysql": [165, 221, 467], "old_password": 165, "acid": [165, 462, 472], "innodb": 165, "space_around_delimit": 165, "comment_prefix": 165, "inline_comment_prefix": 165, "enabled_extens": 165, "another_extens": 165, "disabled_by_com": 165, "yet_another_extens": 165, "read_fil": [165, 266, 472], "empty_lines_in_valu": 165, "gotcha": 165, "she": 165, "default_sect": 165, "parser_inst": 165, "getdecim": 165, "boolean_st": 165, "nope": [165, 439], "unsuit": [165, 411, 461, 467, 481], "anotherkey": 165, "larch": 165, "optcr": 165, "downright": 165, "counterintuit": 165, "add_sect": [165, 473], "an_int": 165, "a_bool": 165, "a_float": 165, "1415": [165, 184, 466], "evil": [165, 467, 481], "nooptionerror": [165, 467], "remove_opt": [165, 290], "intrins": [165, 189, 297, 426, 469, 481], "duplicatesectionerror": [165, 473], "duplicateoptionerror": [165, 473], "has_sect": 165, "has_opt": [165, 290], "expandus": [165, 229, 241, 284, 292, 294, 318, 330, 346, 476, 479, 481], "readfp": [165, 274, 467, 471, 472, 481], "nosectionerror": 165, "fileobject": [165, 470], "remove_sect": 165, "cfgparser": 165, "max_interpolation_depth": 165, "interpolationerror": 165, "interpolationdeptherror": 165, "interpolationmissingoptionerror": [165, 481], "interpolationsyntaxerror": 165, "missingsectionheadererror": 165, "parsingerror": [165, 471, 472, 481], "footnot": 165, "notimplementedtyp": [166, 383, 470, 481], "ellipsistyp": [166, 383, 470, 481], "abstractcontextmanag": [167, 342, 384, 477, 481], "abstractasynccontextmanag": [167, 342, 384, 478, 481], "contextmanag": [167, 342, 384, 465, 466, 473, 477, 481], "managed_resourc": 167, "acquire_resourc": 167, "release_resourc": 167, "trap": [167, 184, 462, 464, 474, 481], "contextdecor": [167, 473], "asynccontextmanag": [167, 384, 388, 426, 478, 481], "get_connect": 167, "acquire_db_connect": 167, "release_db_connect": 167, "get_all_us": 167, "my_gener": 167, "nullcontext": [167, 470, 478, 481], "enter_result": 167, "ignore_except": 167, "process_fil": 167, "file_or_path": 167, "send_http": 167, "aiohttp": 167, "clientsess": 167, "somefil": [167, 202, 228, 291, 329, 378], "someotherfil": 167, "redirect_stdout": [167, 475, 476], "new_target": [167, 369], "redirect_stderr": [167, 476, 481], "relinquish": [167, 291, 363, 364], "mycontext": 167, "contextbaseclass": 167, "asynccontextdecor": [167, 470, 481], "exitstack": [167, 471, 474, 478, 479, 481], "enter_context": [167, 471, 481], "pop_al": 167, "onto": [167, 175, 189, 211, 246, 297, 305, 329, 344, 382, 384, 386, 388, 430, 460, 466, 472, 481], "close_fil": 167, "asyncexitstack": [167, 471, 478, 479, 481], "enter_async_context": [167, 471, 481], "push_async_exit": 167, "push_async_callback": [167, 479], "need_special_resourc": 167, "acquire_special_resourc": 167, "release_special_resourc": 167, "inadvert": [167, 253, 466, 475, 476, 481], "acquisit": [167, 213, 265, 363, 473, 481], "resourcemanag": 167, "check_resource_ok": 167, "_cleanup_on_error": 167, "exc_detail": 167, "cleanup_need": 167, "perform_oper": 167, "cleanup_resourc": 167, "cb": [167, 259], "track_entry_and_exit": [167, 473], "exc_tb": [167, 331, 342], "load_widget": [167, 473], "singleus": 167, "write_to_stream": 167, "innermost": [167, 191, 312, 350, 384, 428, 475, 481], "outer_stack": 167, "inner_stack": 167, "copy_context": 168, "bleed": 168, "old_valu": 168, "client_addr_var": 168, "client_addr": 168, "render_goodby": 168, "8081": 168, "memo": [169, 297, 298, 429, 477, 481], "copied_list": 169, "original_list": 169, "__copy__": [169, 472, 481], "__deepcopy__": [169, 481], "constructor_ob": 170, "dispatch_t": [170, 297, 474, 481], "pickler": [170, 297, 298, 469, 474, 479, 481], "pickle_c": 170, "passlib": 171, "des": [171, 308], "crack": [171, 188], "method_sha512": 171, "salt": [171, 233, 324, 426, 453, 473, 474, 481], "sha": [171, 233, 396, 465, 466, 470, 473, 474, 477, 481], "strongest": [171, 467], "method_sha256": 171, "method_blowfish": 171, "blowfish": [171, 478, 481], "method_md5": 171, "md5": [171, 233, 235, 246, 333, 338, 339, 396, 454, 465, 466, 467, 468, 472, 473, 475, 479, 480, 481], "method_crypt": [171, 477, 481], "weakest": 171, "method_": 171, "mksalt": [171, 474, 478, 481], "perturb": 171, "999_999_999": 171, "5000": [171, 184], "2_147_483_648": 171, "exposur": [171, 474], "compare_digest": [171, 233, 235, 324, 467, 474, 481], "compare_hash": 171, "cryptedpasswd": 171, "getpwnam": [171, 308, 346, 481], "cleartext": [171, 267], "plaintext": [171, 246, 474], "4180": [173, 481], "dictread": [173, 477, 479, 481], "dictwrit": [173, 473, 481], "csvfile": 173, "fmtparam": 173, "list_dialect": [173, 481], "quote_nonnumer": 173, "spamread": 173, "quotechar": [173, 481], "bake": [173, 317], "bean": [173, 317], "stringifi": [173, 379, 471, 481], "spamwrit": 173, "quote_minim": 173, "writerow": [173, 473, 476, 481], "register_dialect": 173, "unregister_dialect": [173, 481], "get_dialect": [173, 481], "new_limit": [173, 465], "restkey": 173, "restval": 173, "first_nam": [173, 317], "clees": [173, 411, 439, 479], "extrasact": [173, 481], "writehead": [173, 473, 481], "excel_tab": 173, "unix_dialect": [173, 473], "sniffer": [173, 335, 481], "sniff": [173, 481], "has_head": [173, 241, 393, 481], "quote_al": 173, "quote_non": 173, "quote_notnul": [173, 472, 481], "quote_str": [173, 472, 481], "doublequot": [173, 481], "escapechar": [173, 481], "linetermin": 173, "quote_": 173, "skipinitialspac": [173, 481], "csvreader": 173, "line_num": [173, 317, 465], "csvwriter": 173, "passwd": [173, 221, 294, 308, 359, 386, 393, 464, 465, 466], "someiter": 173, "unixpwd": 173, "linend": 173, "c_int": [174, 281, 465, 481], "c_long": [174, 342], "cdll": [174, 465, 479, 481], "windll": [174, 466, 481], "oledl": [174, 466, 481], "cdecl": 174, "stdcall": 174, "hresult": 174, "kernel32": [174, 350, 481], "libc": [174, 255, 291, 301, 346, 454, 465, 481], "loadlibrari": 174, "_funcptr": 174, "getmodulehandlea": 174, "myownfunct": 174, "239": 174, "_stdcallfuncptr": 174, "user32": 174, "getmodulehandl": 174, "hmodul": 174, "lpcstr": 174, "lpmodulenam": 174, "getmodulehandlew": 174, "lpcwstr": 174, "yapaxi": 174, "310": 174, "rand": [174, 339], "1804289383": 174, "0x1d000000": 174, "erron": [174, 290, 382, 423, 460, 475, 476, 478, 480, 481], "c_bool": [174, 466], "_bool": [174, 345, 466], "c_char": [174, 281], "c_wchar": 174, "c_byte": [174, 481], "c_ubyt": [174, 481], "c_short": [174, 281], "c_ushort": 174, "c_uint": 174, "c_ulong": 174, "c_longlong": 174, "__int64": 174, "c_ulonglong": 174, "c_size_t": 174, "c_ssize_t": [174, 473], "c_time_t": [174, 481], "time_t": [174, 481], "c_float": [174, 465], "c_doubl": [174, 281, 465, 481], "c_longdoubl": [174, 481], "c_char_p": [174, 465], "c_wchar_p": [174, 481], "c_void_p": 174, "140018365411392": 174, "65533": 174, "c_s": 174, "139966785747344": 174, "139966783348904": 174, "x00lo": 174, "c_buffer": 174, "beer": [174, 481], "1234": [174, 184, 257, 311, 327, 342, 376, 396, 440, 466, 470, 476, 481], "140000": [174, 343], "arm64": [174, 479, 480, 481], "inhibit": [174, 248, 312], "_as_parameter_": 174, "200000": [174, 365], "37": [174, 243, 316, 342, 343, 380, 404, 449, 464, 467, 469, 470, 471, 478, 479, 480, 481], "000000": [174, 181, 462], "from_param": [174, 481], "typecheck": [174, 384, 481], "restyp": [174, 465], "1150640792": 174, "strchr": 174, "8059983": 174, "validhandl": 174, "winerror": [174, 211, 481], "486539264": 174, "silli": [174, 290, 388], "126": [174, 257, 380, 479], "errcheck": 174, "byref": [174, 466], "sscanf": 174, "1400001049": 174, "_fields_": [174, 281, 342, 481], "upperleft": 174, "lowerright": 174, "ofs": 174, "_pack_": 174, "pragma": [174, 481], "bigendianstructur": [174, 342, 481], "littleendianstructur": [174, 481], "bigendianunion": [174, 481], "littleendianunion": [174, 481], "first_16": 174, "second_16": 174, "tenpointsarraytyp": 174, "artifici": [174, 351, 411, 426, 472, 475, 481], "mystruct": [174, 281], "point_array": 174, "arr": [174, 281, 442], "pt": 174, "teninteg": 174, "c_long_array_10": 174, "oor": 174, "scene": [174, 382, 459], "lp_c_long": 174, "null_ptr": 174, "dereferenc": [174, 400, 474, 481], "c_byte_array_4": 174, "c1": [174, 342], "c2": 174, "cfunctyp": [174, 481], "winfunctyp": [174, 481], "qsort": 174, "intarray5": 174, "ia": 174, "cmpfunc": 174, "py_cmp_func": 174, "cmp_func": 174, "in_dll": 174, "pythonapi": [174, 465], "0x30c00a0": 174, "struct_frozen": 174, "get_cod": [174, 248, 421, 475], "frozent": 174, "_pyimport_frozenbootstrap": 174, "sooner": [174, 409, 466], "_frozen_importlib": [174, 281, 481], "31764": [174, 481], "_frozen_importlib_extern": [174, 481], "41499": 174, "__hello__": [174, 481], "p1": [174, 259, 282, 346, 425, 464, 471, 476], "hm": 174, "temp0": 174, "temp1": 174, "short_array": 174, "find_librari": [174, 477, 481], "dylib": [174, 481], "ldconfig": [174, 481], "objdump": 174, "ld_library_path": [174, 477, 481], "libm": [174, 454, 481], "libbz2": 174, "agl": 174, "default_mod": 174, "use_errno": [174, 466], "use_last_error": [174, 466], "winmod": [174, 479], "dumpbin": 174, "pydll": [174, 481], "manpag": [174, 291, 335, 477, 481], "rtld_now": [174, 291, 474], "setlasterror": 174, "hijack": 174, "rtld_global": [174, 291, 350, 474, 479, 481], "rtld_local": [174, 291, 474, 479, 481], "_handl": 174, "prefabr": 174, "libraryload": 174, "dlltype": 174, "pyfunctyp": 174, "func_spec": 174, "paramflag": 174, "name_or_ordin": 174, "vtbl_index": 174, "iid": [174, 374, 481], "messageboxw": 174, "winuserapi": 174, "winapi": [174, 330, 346, 481], "hwnd": 174, "lptext": 174, "lpcaption": 174, "uint": 174, "utyp": 174, "wintyp": [174, 481], "caption": 174, "getwindowrect": 174, "lprect": 174, "obj_or_typ": 174, "init_or_s": 174, "dllcanunloadnow": 174, "_ctype": [174, 424, 467, 478, 481], "dllgetclassobject": 174, "find_msvcrt": 174, "formaterror": [174, 269], "lasterror": [174, 466], "memmov": [174, 466], "enlarg": [174, 481], "_cdata": [174, 481], "_object": 174, "from_buff": [174, 466, 481], "writeabl": [174, 223, 256, 339, 346, 481], "from_buffer_copi": [174, 466, 481], "from_address": 174, "_b_base_": 174, "_b_needsfree_": 174, "_simplecdata": 174, "c_int8": 174, "c_int16": 174, "c_int32": 174, "c_int64": 174, "c_uint8": [174, 481], "c_uint16": 174, "c_uint32": 174, "c_uint64": 174, "py_object": [174, 465, 481], "wparam": 174, "dword": 174, "pnext": 174, "_anonymous_": [174, 481], "_u": 174, "lptdesc": 174, "typedesc": 174, "lpadesc": 174, "arraydesc": 174, "hreftyp": 174, "vt": [174, 176, 384, 433], "vartyp": 174, "td": [174, 181], "vt_ptr": 174, "some_typ": 174, "_length_": [174, 481], "_type_": 174, "_pointer": 174, "facto": [175, 241, 250, 356, 392, 417], "a_norm": 175, "baudrat": 175, "beep": [175, 404, 477], "driver": [175, 191, 210, 228, 291, 293, 335, 360, 403, 404, 414, 463, 481], "color_cont": [175, 470], "color_numb": 175, "pair_numb": 175, "a_": 175, "def_prog_mod": 175, "reset_prog_mod": 175, "def_shell_mod": 175, "reset_shell_mod": 175, "delay_output": 175, "ground": 175, "erasechar": 175, "cup": 175, "cud": 175, "cud1": 175, "cuu1": 175, "cuu": 175, "vpa": 175, "cr": [175, 176, 206, 433, 478, 481], "confin": [175, 191], "bell": [175, 176, 367, 433, 465, 481], "flushinp": 175, "typeahead": 175, "getmous": 175, "key_mous": 175, "bstate": 175, "buttonn_press": 175, "buttonn_releas": 175, "buttonn_click": 175, "buttonn_double_click": 175, "buttonn_triple_click": 175, "button_shift": 175, "button_ctrl": 175, "button_alt": 175, "button5_": [175, 470, 481], "getsyx": 175, "getwin": 175, "putwin": 175, "has_extended_color_support": [175, 470, 481], "256color": [175, 481], "has_ic": 175, "has_il": 175, "region": [175, 245, 276, 280, 291, 317, 367, 374, 382, 438, 466, 469, 481], "init_color": [175, 470], "fg": [175, 259, 342, 367, 374], "bg": [175, 367, 374, 382, 481], "use_default_color": [175, 464], "is_term_res": 175, "nline": [175, 186], "ncol": 175, "resize_term": 175, "isendwin": 175, "deiniti": 175, "keynam": 175, "alt": [175, 176, 238, 245, 374, 460, 481], "killchar": 175, "longnam": [175, 356, 481], "terminfo": 175, "mouseinterv": 175, "elaps": [175, 267, 281, 291, 306, 327, 335, 363, 364, 386, 473, 481], "mousemask": 175, "availmask": 175, "oldmask": 175, "napm": 175, "pminrow": 175, "pmincol": 175, "sminrow": 175, "smincol": 175, "smaxrow": 175, "smaxcol": 175, "nl": [175, 176, 238, 335, 375, 376, 392, 424, 433, 466, 481], "nonl": 175, "vertic": [175, 176, 245, 295, 342, 343, 362, 367, 372, 373, 374, 382, 425, 432, 433], "noqiflush": 175, "intr": 175, "susp": 175, "noraw": 175, "pair_cont": [175, 470], "putp": 175, "tput": 175, "putchar": 175, "qiflush": 175, "resetti": 175, "savetti": 175, "resizeterm": 175, "sigwinch": [175, 331, 481], "get_escdelay": [175, 480, 481], "set_escdelay": [175, 480, 481], "get_tabs": [175, 480, 481], "set_tabs": [175, 480, 481], "setsyx": 175, "setupterm": 175, "termattr": 175, "termnam": 175, "tigetflag": 175, "capnam": 175, "tigetnum": 175, "tigetstr": 175, "tparm": 175, "4h": [175, 345], "breakout": 175, "unctrl": [175, 176], "ungetch": [175, 280], "update_lines_col": [175, 476, 481], "unget_wch": [175, 474, 481], "get_wch": [175, 474, 481], "ungetmous": [175, 481], "use_env": 175, "newterm": 175, "subwindow": 175, "addnstr": 175, "segfault": [175, 464, 465, 477, 478, 481], "20190511": 175, "stuck": 175, "attroff": 175, "attron": 175, "attrset": 175, "bkgd": 175, "bkgdset": 175, "rs": [175, 176], "bs": [175, 176, 433], "tl": 175, "bl": 175, "acs_vlin": 175, "acs_hlin": 175, "acs_urcorn": 175, "acs_llcorn": 175, "acs_lrcorn": 175, "vertch": 175, "horch": 175, "chgat": [175, 466], "touchlin": 175, "redisplay": [175, 318, 463], "repaint": 175, "clearok": 175, "clrtobot": 175, "clrtoeol": 175, "cursyncup": 175, "delch": 175, "deleteln": 175, "derwin": 175, "subwin": 175, "echochar": 175, "getbegyx": 175, "getbkgd": 175, "getmaxyx": 175, "getparyx": 175, "getyx": 175, "hline": 175, "idcok": 175, "idlok": 175, "immedok": 175, "degrad": [175, 473, 481], "wrefresh": 175, "inch": [175, 367], "insch": 175, "insdelln": 175, "insertln": 175, "insnstr": 175, "insstr": 175, "instr": [175, 189, 360, 475, 481], "is_linetouch": 175, "is_wintouch": 175, "movement": [175, 382, 466, 473, 481], "new_i": 175, "new_x": 175, "mvderwin": 175, "mvwin": 175, "notimeout": 175, "overlay": 175, "destwin": 175, "dminrow": 175, "dmincol": 175, "dmaxrow": 175, "dmaxcol": 175, "redrawln": 175, "beg": 175, "redrawwin": 175, "rendit": 175, "scrollok": 175, "setscrreg": 175, "standend": 175, "standout": 175, "subpad": 175, "syncdown": 175, "syncok": 175, "syncup": 175, "indefinit": [175, 181, 243, 259, 263, 267, 269, 331, 357, 467, 475, 476, 481], "touchwin": 175, "untouchwin": 175, "vline": [175, 481], "__version__": [175, 188, 243, 386, 474, 476, 480, 481], "ncurses_vers": [175, 479, 481], "a_altcharset": 175, "dim": 175, "a_invi": 175, "a_ital": [175, 481], "a_protect": 175, "a_horizont": 175, "a_left": 175, "a_low": 175, "a_right": 175, "a_top": 175, "a_vert": 175, "a_attribut": 175, "a_chartext": 175, "a_color": 175, "key_": 175, "keycap": 175, "key_min": 175, "key_break": 175, "key_down": 175, "arrow": [175, 245, 295, 373, 374, 382], "key_right": 175, "key_backspac": 175, "key_f0": 175, "key_fn": 175, "key_dl": 175, "key_il": 175, "key_dc": 175, "key_ic": 175, "key_eic": 175, "key_clear": 175, "key_eo": 175, "key_eol": 175, "key_sf": 175, "key_sr": 175, "key_npag": 175, "key_stab": 175, "key_ctab": 175, "key_catab": 175, "key_ent": 175, "key_sreset": 175, "soft": [175, 245, 261, 320, 356, 360, 425, 429, 433, 434, 470, 481], "key_reset": 175, "key_print": 175, "key_ll": 175, "key_a1": 175, "key_a3": 175, "key_b2": 175, "key_c1": 175, "key_c3": 175, "key_btab": 175, "key_beg": 175, "key_cancel": 175, "key_clos": 175, "key_command": 175, "key_copi": 175, "key_creat": 175, "key_end": 175, "key_exit": 175, "key_find": 175, "key_help": 175, "key_mark": 175, "key_messag": 175, "key_mov": 175, "key_next": 175, "key_open": 175, "key_opt": 175, "key_previ": 175, "prev": [175, 374], "key_redo": 175, "redo": [175, 245, 481], "key_refer": 175, "key_refresh": 175, "key_replac": 175, "key_restart": 175, "key_resum": 175, "key_sav": 175, "key_sbeg": 175, "key_scancel": 175, "key_scommand": 175, "key_scopi": 175, "key_screat": 175, "key_sdc": 175, "key_sdl": 175, "key_select": 175, "key_send": 175, "key_seol": 175, "key_sexit": 175, "key_sfind": 175, "key_shelp": 175, "key_shom": 175, "key_sic": 175, "key_sleft": 175, "key_smessag": 175, "key_smov": 175, "key_snext": 175, "key_sopt": 175, "key_sprevi": 175, "key_sprint": 175, "key_sredo": 175, "key_sreplac": 175, "key_sright": 175, "key_srsum": 175, "key_ssav": 175, "key_ssuspend": 175, "key_sundo": 175, "key_suspend": 175, "key_undo": 175, "key_res": 175, "key_max": 175, "key_f1": 175, "key_f2": 175, "key_f3": 175, "key_f4": 175, "twelv": [175, 374], "vt100": 175, "crude": 175, "acs": 175, "acs_bbss": 175, "acs_block": 175, "solid": [175, 474, 475], "acs_board": 175, "acs_bsb": 175, "acs_bssb": 175, "acs_bsss": 175, "acs_bte": 175, "acs_bullet": 175, "bullet": [175, 297], "acs_ckboard": 175, "stippl": 175, "acs_darrow": 175, "acs_degre": 175, "acs_diamond": 175, "acs_gequ": 175, "acs_lantern": 175, "lantern": 175, "acs_larrow": 175, "acs_lequ": 175, "acs_lte": 175, "acs_nequ": 175, "acs_pi": 175, "minus": [175, 184, 223, 273, 330, 342, 343, 345, 363, 375, 428, 434, 478, 481], "acs_plus": 175, "acs_rarrow": 175, "acs_rte": 175, "acs_s1": 175, "acs_s3": 175, "acs_s7": 175, "acs_s9": 175, "acs_sbb": 175, "acs_sbsb": 175, "acs_sbss": 175, "acs_ssbb": 175, "acs_ssb": 175, "acs_sssb": 175, "acs_ssss": 175, "crossov": 175, "acs_sterl": 175, "pound": [175, 188], "sterl": 175, "acs_tte": 175, "acs_uarrow": 175, "color_blu": 175, "color_cyan": 175, "greenish": 175, "color_green": 175, "color_magenta": 175, "purplish": 175, "color_yellow": 175, "netscap": [175, 241, 269, 401, 461, 464, 466, 472, 481], "bbedit": [175, 457], "framemak": 175, "uli": 175, "ulx": 175, "lri": 175, "lrx": 175, "stripspac": 175, "do_command": 175, "land": [175, 481], "soh": 176, "stx": 176, "etx": 176, "enq": 176, "enquiri": 176, "bel": [176, 433, 463, 464, 465, 466, 467, 473, 474], "ht": [176, 341, 382], "ff": [176, 188, 223, 317, 433], "dle": 176, "dc1": 176, "xon": 176, "dc2": 176, "dc3": 176, "xoff": 176, "dc4": 176, "nak": 176, "syn": 176, "etb": 176, "em": [176, 317], "esc": 176, "gs": 176, "sp": [176, 233, 238], "mnemon": [176, 266, 339, 374, 462], "teleprint": 176, "predat": [176, 188, 281, 392], "isalpha": [176, 342], "isdigit": [176, 324, 342], "islow": [176, 324, 342], "isascii": [176, 342, 478, 481], "isblank": [176, 481], "iscntrl": [176, 481], "0x1f": [176, 470, 472], "0x7f": [176, 342], "isgraph": 176, "ispunct": [176, 481], "isspac": [176, 342], "isxdigit": 176, "hexdigit": [176, 279, 343, 433], "isctrl": 176, "ismeta": 176, "controlnam": 176, "thirti": [176, 314], "bottom_panel": 177, "new_panel": 177, "top_panel": 177, "update_panel": 177, "set_userptr": 177, "userptr": [177, 481], "557": [179, 380, 478, 481], "inventoryitem": 179, "unit_pric": 179, "quantity_on_hand": 179, "total_cost": 179, "unsafe_hash": [179, 384, 481], "match_arg": [179, 384, 481], "kw_on": [179, 384, 470, 481], "weakref_slot": [179, 481], "dunder": [179, 433, 479, 481], "nonetheless": [179, 246], "__match_args__": [179, 425, 426, 439, 470, 481], "__weakref__": [179, 400, 426, 481], "contribut": [179, 228, 233, 306, 317, 395, 424, 430, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "class_or_inst": 179, "classvar": [179, 384, 471, 477, 481], "initvar": [179, 481], "asdict": [179, 481], "dict_factori": [179, 338, 481], "astupl": [179, 481], "tuple_factori": 179, "make_dataclass": [179, 481], "cls_name": [179, 209], "add_on": 179, "__post_init__": [179, 481], "forewarn": 179, "is_dataclass": [179, 481], "is_dataclass_inst": 179, "frozeninstanceerror": [179, 481], "databasetyp": 179, "my_databas": 179, "intconversiondescriptor": 179, "_default": 179, "datetyp": 181, "differenti": [181, 184, 318, 393, 473, 474, 477, 480, 481], "categor": [181, 290, 317, 398, 428], "polit": [181, 460], "daylight": [181, 207, 364, 423, 480], "metr": 181, "mile": 181, "est": [181, 364, 473, 477], "edt": [181, 364, 474, 477], "minyear": 181, "maxyear": [181, 481], "microsecond": [181, 320, 338, 364, 466, 481], "customiz": [181, 367, 467, 481], "utcoffset": [181, 481], "29000": [181, 481], "29156": 181, "tiebreak": 181, "t1": [181, 184, 259, 384, 397], "t2": [181, 184, 259, 384, 397], "t3": [181, 184, 290, 384], "overal": [181, 192, 266, 290, 306, 317, 343, 345, 380, 426, 442, 467, 475, 476], "quotient": [181, 184, 273, 306, 342, 428, 447], "uuuuuu": 181, "68400": 181, "total_second": [181, 467], "270": [181, 382], "accuraci": [181, 223, 259, 273, 306, 442, 464, 472, 481], "another_year": 181, "84": [181, 341, 477, 479, 481], "31536000": 181, "ten_year": 181, "3650": 181, "nine_year": 181, "3285": 181, "three_year": 181, "1095": [181, 286], "2038": [181, 364, 481], "fromordin": [181, 478], "toordin": 181, "fromisoformat": [181, 338, 471, 478, 481], "date_str": 181, "yyyi": [181, 246], "yyyyyi": 181, "dd": [181, 246, 259, 290], "ooo": [181, 433], "2019": [181, 341, 453, 479, 481], "20191204": 181, "2021": [181, 424, 466, 470, 481], "w01": 181, "fromisocalendar": [181, 479, 481], "isocalendar": [181, 479, 480, 481], "date2": 181, "date1": 181, "timetupl": 181, "struct_tim": [181, 246, 269, 364, 477], "yday": 181, "isocalendard": 181, "mktime": [181, 207, 364, 473, 481], "2007": [181, 367, 424, 466, 481], "my_birthday": 181, "time_to_birthday": 181, "730920": 181, "730920th": 181, "70th": 181, "ic": [181, 345, 466], "tz": [181, 360, 364, 423, 472, 481], "gettimeofday": [181, 364, 481], "utcnow": [181, 472, 481], "utcfromtimestamp": [181, 339, 472, 481], "formula": [181, 228, 342, 481], "2011": [181, 201, 339, 411, 424, 426, 453, 473], "20111104": 181, "04t00": 181, "23z": 181, "20111104t000523": 181, "2t00": 181, "283000": 181, "14400": 181, "datetime2": 181, "datetime1": 181, "comparand": 181, "timetz": 181, "astimezon": [181, 188, 423, 474, 477, 479, 481], "astz": 181, "dt": [181, 207, 417, 423, 480], "fromutc": [181, 481], "magnitud": [181, 184, 260, 273, 342, 343, 460, 474], "tm_isdst": [181, 364], "utctimetupl": [181, 481], "spill": 181, "timespec": [181, 477, 481], "ddthh": 181, "ffffff": [181, 382], "132263": 181, "18t15": 181, "27t00": 181, "000100": 181, "25t00": 181, "01t12": 181, "79043": 181, "79060": 181, "tt": 181, "325": [181, 184, 465], "30pm": 181, "kabul": 181, "afghanistan": 181, "1945": 181, "thereaft": [181, 245, 264, 393], "kabultz": 181, "utc_move_d": 181, "1944": 181, "pep495": 181, "tz1": 181, "dt1": 181, "dt2": 181, "dt3": 181, "midnight": [181, 267, 466, 473, 476], "obscur": [181, 191, 387, 466, 475, 476, 478, 481], "13936": [181, 476, 481], "time_str": 181, "t04": 181, "t042301": 181, "000384": 181, "01z": 181, "123456": 181, "geograph": 181, "dston": 181, "dstoff": 181, "america": [181, 423, 424, 467, 480], "york": 181, "repli": [181, 201, 243, 269, 281, 286, 333, 336, 393, 439, 481], "straddl": 181, "dtoff": 181, "dtdst": 181, "tzinfo_exampl": 181, "_time": 181, "stdoffset": 181, "dstoffset": 181, "altzon": [181, 364], "dstdiff": 181, "localtimezon": 181, "stamp": [181, 382, 463, 464, 481], "dst_diff": 181, "_isdst": 181, "first_sunday_on_or_aft": 181, "days_to_go": 181, "olson": [181, 481], "pytz": 181, "twinsun": 181, "2am": 181, "dststart_2007": 181, "dstend_2007": 181, "dststart_1987_2006": 181, "dstend_1987_2006": 181, "1967": [181, 382, 467], "dststart_1967_1986": 181, "dstend_1967_1986": 181, "us_dst_rang": 181, "dststart": 181, "dstend": 181, "1966": 181, "ustimezon": 181, "reprnam": 181, "stdname": [181, 306], "dstname": [181, 330], "gap": [181, 267, 269, 473, 481], "std_time": 181, "dst_time": 181, "cst": 181, "cdt": 181, "mountain": [181, 424], "mst": 181, "mdt": 181, "pacif": [181, 423], "pst": [181, 423, 480], "pdt": [181, 423, 480], "0500": [181, 207], "u0": [181, 477], "mimic": [181, 253, 265, 345, 379, 382, 467, 469, 481], "bring": [181, 245, 259, 330, 343, 373, 387, 475, 476, 479, 480, 481], "tzdata": [181, 423, 480, 481], "globe": 181, "civil": 181, "59pm": 181, "en_us": [181, 476, 481], "de_d": [181, 264, 476], "sonntag": 181, "montag": 181, "samstag": 181, "dez": 181, "januar": 181, "februar": 181, "dezemb": 181, "centuri": [181, 364, 473, 481], "0002": 181, "2014": [181, 235, 339, 466, 467, 475, 481], "9998": [181, 477, 481], "pm": [181, 191, 264, 295, 350, 364], "000001": 181, "hhmm": [181, 246, 364], "0400": [181, 474], "1030": 181, "063415": 181, "030712": 181, "345216": 181, "002": [181, 306, 342], "1988": [181, 188, 356, 466], "di": [181, 465], "c89": [181, 466], "01t00": 181, "0330": 181, "japan": [181, 264], "jst": 181, "gent": 181, "oracl": [182, 338, 465, 474, 481], "whichdb": [182, 468], "unread": [182, 297, 393, 469, 476, 481], "cabl": 182, "open_flag": 182, "firstkey": 182, "nextkey": 182, "reorgan": [182, 192, 461, 466, 469, 477, 479, 481], "shorten": [182, 319, 362, 473, 474, 475, 480, 481], "unwritten": [182, 481], "pag": 182, "heavili": [182, 248, 333, 425, 461, 477, 478], "dumbdbm": [182, 468], "bottleneck": [183, 224, 469], "paramount": 184, "school": [184, 345, 463], "3000000000000003": 184, "5511151231257827e": 184, "017": 184, "customari": [184, 362, 424, 453], "monetari": [184, 264, 465, 478, 481], "schoolbook": 184, "multiplicand": 184, "5600": 184, "getcontext": [184, 450, 464], "prec": [184, 450, 464, 465, 466], "142857": [184, 191], "1428571428571428571428571429": [184, 464], "modest": [184, 481], "inexact": [184, 291, 474], "prejudic": 184, "unround": 184, "coeffici": [184, 259, 341, 342, 343, 463, 475, 481], "round_ceil": [184, 464], "round_down": [184, 464], "round_floor": [184, 481], "round_half_down": 184, "round_half_even": [184, 464, 481], "round_half_up": 184, "round_up": 184, "round_05up": 184, "aris": [184, 256, 265, 266, 297, 383, 424, 428, 462, 464, 473, 479, 481], "clamp": [184, 473, 474, 481], "invalidoper": [184, 464, 466, 467, 474], "divisionbyzero": [184, 464], "subnorm": [184, 481], "floatoper": [184, 474], "sticki": [184, 340, 356, 374], "emin": [184, 474], "emax": [184, 474], "140000000000000124344978758017532527446746826171875": 184, "4142135623730951": 184, "414213562373095048801688724": 184, "1415926535": 184, "7182818285": 184, "85987": 184, "85988": 184, "1e9999999999999999999": 184, "circus": [184, 223, 437], "87": [184, 246, 341, 346], "5058": 184, "718281828459045235360287471": [184, 466], "ln": [184, 245, 466, 474, 481], "302585092994045684017991455": 184, "quantiz": [184, 474, 481], "setcontext": 184, "basiccontext": [184, 474], "extendedcontext": [184, 474], "myothercontext": 184, "142857142857142857142857142857142857142857142857142857142857": 184, "142857143": [184, 464], "143": [184, 246, 380, 382, 462], "clear_flag": 184, "355": [184, 219], "113": [184, 219, 447], "14159292": 184, "112": [184, 341, 380, 470, 479, 480, 481], "snan": [184, 467], "devan": 184, "gar": [184, 294], "fullwidth": 184, "uff10": 184, "uff19": 184, "100000000000000088817841970012523233890533447265625": [184, 469, 473], "00000": 184, "321e": 184, "seven": [184, 242, 388, 473, 481], "as_integer_ratio": [184, 219, 342, 442, 466, 477, 479, 481], "denomin": [184, 219, 287, 342, 466, 477, 479, 481], "157": [184, 477], "as_tupl": [184, 466], "decimaltupl": 184, "compare_sign": 184, "compare_tot": 184, "unequ": [184, 342, 426, 428, 464, 465, 468, 474, 481], "unaffect": [184, 330, 364, 426, 434, 453, 463, 466, 477, 481], "compare_total_mag": 184, "copy_ab": 184, "conjug": [184, 287, 342, 466], "compli": [184, 260, 269, 312, 424, 466, 481], "copy_neg": 184, "copy_sign": 184, "561702493119680037517373933e": 184, "139": [184, 380, 462], "from_float": [184, 219, 442, 467, 469, 473, 481], "0x1": [184, 342, 442, 466, 469, 470, 472], "999999999999ap": 184, "1000000000000000055511151231257827021181583404541015625": [184, 442, 467], "fma": 184, "fuse": 184, "is_canon": [184, 467], "is_finit": 184, "is_infinit": 184, "is_nan": 184, "is_norm": [184, 385, 479, 481], "is_qnan": 184, "is_sign": 184, "is_snan": 184, "is_subnorm": 184, "is_zero": 184, "logb": 184, "logical_and": 184, "logical_invert": 184, "logical_or": 184, "logical_xor": 184, "max_mag": 184, "min_mag": 184, "next_minus": 184, "next_plus": 184, "next_toward": 184, "closest": [184, 219, 223, 273, 425, 466, 467, 472, 481], "321000e": 184, "number_class": 184, "41421356": 184, "etini": 184, "remainder_near": 184, "same_quantum": 184, "scaleb": 184, "to_eng_str": [184, 464], "123e": 184, "23e": 184, "to_integr": 184, "to_integral_valu": 184, "to_integral_exact": 184, "localcontext": [184, 342, 465, 466, 481], "calculate_someth": 184, "halt": [184, 210, 290, 294, 386, 475], "defaultcontext": [184, 474], "max_prec": [184, 474], "min_emin": [184, 474], "max_emax": [184, 474], "02e": 184, "weaker": [184, 461], "999": [184, 282], "create_decim": [184, 466, 474], "23e999": 184, "23000e": 184, "clear_trap": 184, "copy_decim": 184, "4445": 184, "0023": 184, "create_decimal_from_float": 184, "etop": 184, "recount": 184, "divide_int": 184, "qnan": 184, "msd": 184, "xor": [184, 209, 289, 342, 428], "to_sci_str": [184, 464], "scientif": [184, 343, 452, 459, 466], "425000000": [184, 474], "999999999999999999": [184, 474], "min_etini": 184, "849999999": 184, "1999999999999999997": 184, "have_thread": [184, 474], "have_contextvar": [184, 454], "decimalexcept": 184, "inward": 184, "outward": 184, "stricter": [184, 460, 461, 465, 474, 476, 478, 481], "amplifi": 184, "breakdown": 184, "seminumer": 184, "11111113": 184, "11111111": [184, 342], "51111111": 184, "5111111": 184, "20000": [184, 365], "0000003": 184, "0060000": 184, "affin": [184, 481], "indetermin": [184, 350, 374, 398, 406], "854": [184, 357], "accustom": 184, "0e": 184, "1000026": 184, "interf": [184, 281, 351, 428, 475], "applicationwid": 184, "moneyfmt": 184, "curr": 184, "dp": [184, 481], "neg": [184, 224, 259, 289], "trailneg": 184, "money": [184, 346], "currenc": [184, 264, 465, 481], "1234567": [184, 219, 450, 469], "8901": [184, 480, 481], "568": 184, "123456789": 184, "141592653589793238462643383": 184, "na": [184, 324, 461, 470, 471, 472, 479, 480, 481], "da": [184, 259, 317], "389056098930650227230427461": 184, "38905609893": 184, "0j": [184, 223, 342, 417, 481], "taylor": [184, 466, 481], "8775825618903727161162815826": 184, "87758256189": 184, "4794255386042030002732879352": 184, "479425538604": 184, "twoplac": 184, "214": [184, 306], "72": [184, 245, 259, 341, 382, 464, 465, 481], "105": [184, 341], "4314": 184, "2e2": 184, "2e": [184, 481], "philosophi": [184, 194, 468], "1416": [184, 440], "00005": 184, "remove_expon": 184, "5e": [184, 345], "141592653589793115997963468544185161590576171875": 184, "spurious": [184, 331, 469, 481], "anomali": 184, "ill": [184, 302, 473, 478, 481], "104": [184, 341, 473, 479, 480], "23456789": 184, "2345678": 184, "2345": 184, "pypy3": 184, "karatsuba": [184, 463], "bignum": [184, 342, 474], "904625697166532776746648320380374280103671755200316906558262375061821325312": 184, "overalloc": [184, 342, 479, 481], "8gb": 184, "500mb": 184, "maxdigit": [184, 350], "getsizeof": [184, 350, 360, 380, 448, 466, 471, 481], "524288112": 184, "tighter": [184, 425, 464, 474], "sigsegv": [186, 212, 331, 453, 474, 481], "sigfp": [186, 212, 331, 453, 474, 481], "sigabrt": [186, 212, 291, 331, 453, 474, 481], "sigbus": [186, 212, 331, 453, 474], "sigil": [186, 212, 331, 453, 474], "iobas": [186, 188, 211, 213, 256, 376, 453, 479, 481], "readm": [186, 221, 245, 256, 294, 454, 458, 459, 460, 473, 477, 478, 481], "269": [186, 481], "unclos": [186, 245, 338, 473, 477, 481], "rst": [186, 294, 454, 458, 478, 481], "18748": [186, 479, 481], "modal": [187, 371], "askfloat": 187, "askinteg": [187, 481], "askstr": 187, "buttonbox": [187, 373], "initialdir": 187, "initialfil": 187, "defaultextens": 187, "askopenfil": 187, "asksaveasfil": 187, "savea": 187, "askopenfilenam": 187, "asksaveasfilenam": 187, "askdirectori": 187, "mustexist": 187, "cancel_command": 187, "dirs_double_ev": 187, "dirs_select_ev": 187, "files_double_ev": 187, "files_select_ev": 187, "filter_command": 187, "get_filt": 187, "get_select": 187, "dir_or_fil": 187, "curdir": [187, 214, 291, 292, 330, 367], "ok_ev": 187, "set_filt": 187, "set_select": 187, "loadfiledialog": 187, "ok_command": 187, "savefiledialog": 187, "ratcliff": 188, "obershelp": 188, "gestalt": 188, "longest": [188, 257, 259, 433, 462, 465, 476], "junk": [188, 281, 286, 346, 481], "cubic": 188, "heurist": [188, 195, 201, 223, 469, 473, 481], "autojunk": 188, "intralin": 188, "htmldiff": [188, 464, 476, 481], "intra": 188, "tabsiz": [188, 342, 362, 481], "wrapcolumn": 188, "linejunk": 188, "charjunk": 188, "is_character_junk": 188, "make_fil": [188, 476, 481], "fromlin": 188, "tolin": 188, "fromdesc": 188, "todesc": 188, "numlin": 188, "hyperlink": [188, 481], "make_t": 188, "context_diff": 188, "fromfiled": 188, "tofiled": 188, "lineterm": 188, "eggi": 188, "hamster": 188, "get_close_match": 188, "cutoff": [188, 481], "appel": 188, "ape": 188, "peach": 188, "puppi": 188, "pineappl": 188, "is_line_junk": 188, "constitut": [188, 257, 329, 392, 424, 481], "nois": [188, 290, 291, 341, 481], "ntwo": 188, "nthree": 188, "ntree": 188, "nemu": 188, "emu": 188, "unified_diff": 188, "diff_byt": [188, 476, 481], "dfunc": 188, "metzen": 188, "dr": [188, 221, 362, 473], "dobb": 188, "journal": 188, "isjunk": 188, "synch": 188, "bjunk": [188, 475], "bpopular": [188, 475], "b2j": 188, "set_seq": 188, "set_seq2": 188, "set_seq1": 188, "find_longest_match": [188, 481], "alo": 188, "ahi": 188, "blo": 188, "bhi": 188, "get_matching_block": [188, 465, 481], "abxcd": 188, "get_opcod": 188, "j1": [188, 458, 481], "j2": 188, "qabxcd": 188, "abycdf": 188, "get_grouped_opcod": 188, "cluster": [188, 223, 335, 453, 466], "quick_ratio": 188, "real_quick_ratio": 188, "tide": [188, 373], "diet": 188, "bcde": [188, 259, 467], "volatil": [188, 282, 481], "text1": 188, "text2": 188, "flat": [188, 199, 202, 367, 374, 410], "interlin": 188, "file_mtim": 188, "st_mtime": [188, 232, 291, 294, 340, 356, 463], "fromdat": 188, "todat": 188, "tf": [188, 473], "file1": [188, 388, 467], "file2": [188, 388, 467], "r1": [188, 240, 382, 392], "r2": [188, 240, 382, 392], "ndiff_output": 188, "file1_or_file2": 188, "sed": [188, 481], "gripe": 188, "spray": 188, "fcompar": 188, "f1name": 188, "f2name": 188, "qr": 188, "noisi": [188, 290, 481], "qseen": 188, "rseen": 188, "whichfil": 188, "vms": [189, 290, 474, 475], "accompani": [189, 269, 333, 335, 426, 461, 473, 481], "show_cach": [189, 481], "alist": [189, 302, 426], "disassembl": [189, 262, 298, 360, 475, 478, 481], "load_glob": [189, 479, 481], "load_fast": [189, 475, 481], "reciev": 189, "first_lin": 189, "current_offset": [189, 475], "analys": 189, "get_instruct": [189, 475, 481], "from_traceback": [189, 475], "codeobj": 189, "code_info": [189, 473], "show_cod": [189, 473, 475], "distb": [189, 475, 481], "lasti": [189, 481], "disco": 189, "findlinestart": [189, 481], "co_lin": [189, 426, 470, 481], "co_firstlineno": [189, 253, 426, 481], "co_lnotab": [189, 253, 426, 470, 472, 477, 481], "findlabel": 189, "stack_effect": [189, 475, 481], "oparg": [189, 472, 481], "argval": [189, 360], "argrepr": 189, "starts_lin": 189, "is_jump_target": 189, "nop": [189, 357, 439, 481], "pop_top": [189, 481], "end_for": 189, "end_send": [189, 472], "quicken": [189, 481], "unary_neg": 189, "unary_not": 189, "unary_invert": 189, "get_it": 189, "get_yield_from_it": [189, 481], "binary_op": [189, 471, 481], "rhs": [189, 474], "lhs": 189, "binary_subscr": [189, 481], "store_subscr": [189, 481], "delete_subscr": 189, "binary_slic": [189, 472, 481], "store_slic": [189, 472, 481], "get_await": [189, 481], "co_iterable_coroutin": [189, 253], "get_ait": 189, "get_anext": 189, "end_async_for": [189, 479, 481], "cleanup_throw": [189, 472], "before_async_with": 189, "set_add": 189, "list_append": [189, 464], "map_add": [189, 479], "return_const": [189, 472, 481], "consti": 189, "co_const": [189, 253, 426, 481], "yield_valu": [189, 481], "setup_annot": [189, 477], "pop_except": 189, "push_exc_info": [189, 471], "check_exc_match": [189, 471, 481], "check_eg_match": [189, 471, 481], "with_except_start": [189, 481], "context_manag": 189, "load_assertion_error": [189, 480], "load_build_class": 189, "__build_class__": [189, 448, 481], "before_with": [189, 471], "get_len": 189, "match_map": 189, "match_sequ": 189, "match_key": [189, 471], "store_nam": [189, 339], "namei": 189, "co_nam": [189, 253, 379, 426, 476, 481], "store_fast": [189, 481], "store_glob": 189, "delete_nam": 189, "unpack_sequ": [189, 481], "unpack_ex": 189, "leftov": [189, 290], "extended_arg": [189, 481], "store_attr": [189, 481], "delete_attr": 189, "delete_glob": 189, "load_const": [189, 473, 475, 481], "load_nam": [189, 473], "load_loc": [189, 472, 481], "load_from_dict_or_deref": [189, 472, 481], "load_from_dict_or_glob": [189, 472], "build_tupl": [189, 481], "build_list": [189, 481], "build_set": [189, 481], "build_map": [189, 481], "build_const_key_map": [189, 477, 481], "build_str": [189, 477, 481], "list_extend": [189, 481], "set_upd": [189, 481], "dict_upd": [189, 481], "dict_merg": [189, 481], "load_attr": [189, 470, 472, 481], "load_super_attr": [189, 472, 481], "compare_op": [189, 473, 480, 481], "cmp_op": 189, "is_op": [189, 480, 481], "contains_op": [189, 480, 481], "import_nam": [189, 429], "import_from": [189, 429], "jump_forward": [189, 481], "jump_backward": [189, 471, 481], "jump_backward_no_interrupt": [189, 471, 481], "pop_jump_if_tru": [189, 471, 481], "pop_jump_if_fals": [189, 471, 473, 481], "pop_jump_if_not_non": [189, 481], "pop_jump_if_non": [189, 481], "for_it": [189, 481], "var_num": 189, "load_fast_check": [189, 472, 481], "load_fast_and_clear": [189, 472], "delete_fast": 189, "make_cel": [189, 471, 481], "load_closur": [189, 481], "co_fastlocalnam": [189, 481], "load_deref": 189, "load_classderef": [189, 472, 475], "store_deref": [189, 481], "delete_deref": 189, "copy_free_var": [189, 471, 481], "raise_vararg": 189, "kw_name": [189, 471, 481], "ascend": [189, 306, 342], "call_function_ex": [189, 477, 481], "push_nul": [189, 471, 481], "load_method": [189, 472, 478, 481], "make_funct": [189, 470, 477, 481], "0x02": [189, 477], "0x08": [189, 426], "build_slic": 189, "format_valu": [189, 477, 481], "fmt_spec": 189, "match_class": [189, 471], "return_gener": [189, 471, 481], "have_argu": [189, 472], "hasarg": [189, 472], "call_intrinsic_1": [189, 472, 481], "intrinsic_1_invalid": 189, "intrinsic_print": 189, "intrinsic_import_star": 189, "intrinsic_stopiteration_error": 189, "intrinsic_async_gen_wrap": 189, "aync": 189, "intrinsic_unary_posit": 189, "intrinsic_list_to_tupl": 189, "intrinsic_typevar": 189, "intrinsic_paramspec": 189, "intrinsic_typevartupl": 189, "intrinsic_subscript_gener": 189, "intrinsic_typealia": 189, "typealiastyp": [189, 384, 425, 434, 472, 481], "call_intrinsic_2": [189, 472, 481], "intrinsic2": 189, "intrinsic_2_invalid": 189, "intrinsic_prep_reraise_star": 189, "intrinsic_typevar_with_bound": 189, "intrinsic_typevar_with_constraint": 189, "intrinsic_set_function_type_param": 189, "__type_params__": [189, 342, 384, 425, 426, 427, 481], "setup_fin": [189, 471, 481], "setup_cleanup": 189, "setup_with": [189, 471], "pop_block": [189, 471], "jump_no_interrupt": [189, 481], "undirect": 189, "min_pseudo_opcod": 189, "min_instrumented_opcod": 189, "opmap": 189, "hasconst": 189, "hasfre": 189, "hasnam": 189, "hasjrel": 189, "hasjab": 189, "hasloc": 189, "hascompar": 189, "hasexc": [189, 472], "expositori": 191, "265252859812191058636308480000000": 191, "ridicul": 191, "1e100": [191, 273, 428, 433], "1e300": 191, "testmod": [191, 449, 464, 469], "test_doctest": [191, 481], "testfil": [191, 465, 481], "giant": 191, "720": [191, 473, 479], "__test__": 191, "blanklin": [191, 464], "normalize_whitespac": 191, "trial": [191, 316, 463], "crumb": 191, "freeli": [191, 342, 424], "your_dict": 191, "rapid": [191, 306, 479, 481], "verbatim": [191, 346], "ndetail": 191, "transcript": 191, "ignore_exception_detail": [191, 467], "tild": [191, 229, 292, 375], "dont_accept_true_for_1": 191, "dont_accept_blanklin": 191, "oop": [191, 441], "comparison_flag": 191, "report_udiff": [191, 464], "report_cdiff": [191, 464], "report_ndiff": [191, 464], "mismatch": [191, 211, 214, 265, 317, 332, 339, 411, 425, 461, 463, 465, 467, 476, 481], "report_only_first_failur": 191, "fail_fast": [191, 475], "reporting_flag": 191, "register_optionflag": 191, "my_flag": 191, "directive_opt": 191, "on_or_off": 191, "directive_option_nam": 191, "hermion": 191, "harri": [191, 465], "7948648": 191, "0x00ac18f0": 191, "14285714285714285": [191, 444], "142857142857": 191, "contriv": [191, 481], "utter": [191, 468], "module_rel": 191, "optionflag": 191, "extraglob": 191, "raise_on_error": 191, "failure_count": 191, "test_count": 191, "slate": [191, 356, 430, 475, 476, 481], "mortem": [191, 295, 350, 438, 472], "exclude_empti": 191, "run_docstring_exampl": 191, "nonam": [191, 420], "compileflag": 191, "systemat": [191, 481], "my_module_with_doctest": 191, "addtest": [191, 386], "doctestsuit": [191, 386, 463, 476, 481], "testsuit": [191, 360, 386, 463, 475, 476, 481], "docfilesuit": [191, 465], "teardown": [191, 360, 386, 387, 388, 467, 481], "failureexcept": [191, 386], "tear": [191, 386], "set_unittest_reportflag": 191, "test_find": 191, "doctestcas": 191, "testcas": [191, 360, 386, 387, 388, 424, 449, 467, 469, 471, 472, 473, 474, 475, 479, 481], "docfilecas": 191, "runtest": [191, 386], "revolv": 191, "exc_msg": 191, "format_exception_on": [191, 379, 470, 481], "get_doctest": 191, "get_exampl": 191, "report_start": 191, "report_success": 191, "report_unexpected_except": 191, "report_failur": 191, "clear_glob": 191, "report_": 191, "testresult": [191, 386, 467, 469, 474, 481], "check_output": [191, 346, 467, 475, 481], "output_differ": 191, "debugrunn": 191, "cont": 191, "script_from_exampl": 191, "testsourc": 191, "post_mortem": [191, 295, 466], "debug_src": 191, "sketch": [191, 241, 439, 465, 466], "unexpectedexcept": 191, "doctestfailur": 191, "grown": [191, 326], "invalu": [191, 317], "amaz": [191, 462], "skimp": 191, "prose": 191, "attitud": 191, "coher": [191, 224], "narrat": 191, "blur": [191, 259], "_regrtest_top": 191, "2821": 192, "5322": [192, 194, 197, 199, 201, 203, 205, 206, 333], "6532": [192, 203, 205, 206, 476, 478, 481], "2046": [192, 195, 200], "2047": [192, 200, 201, 206, 207, 233, 473], "2183": [192, 194, 203, 481], "2231": [192, 194, 200, 203, 207], "subcompon": 192, "forego": [192, 424], "promot": [192, 424, 466, 481], "emailpolici": [192, 195, 201, 206, 474, 476, 481], "offic": [192, 424], "input_charset": [193, 194], "default_charset": 193, "outright": 193, "header_encod": 193, "qp": 193, "body_encod": [193, 481], "output_charset": [193, 194, 467, 471, 479], "input_codec": 193, "output_codec": 193, "get_body_encod": 193, "7bit": [193, 195, 196, 199, 201, 206, 269, 473, 474, 481], "get_output_charset": 193, "header_encode_lin": 193, "maxlength": [193, 281], "add_charset": 193, "header_enc": 193, "body_enc": 193, "add_codec": 193, "add_alia": 193, "codecnam": 193, "rfc822": [194, 195, 202, 203, 204, 205, 246, 462, 464], "envelop": [194, 199, 203, 205, 246, 269, 333, 481], "from_": [194, 269, 374, 481], "as_str": [194, 199, 200, 203, 475, 481], "unixfrom": [194, 199, 203, 475, 481], "maxheaderlen": [194, 199, 203, 475], "max_line_length": [194, 203, 206, 474, 481], "mangle_from_": [194, 199, 206, 476], "as_byt": [194, 198, 199, 203, 206, 249, 475], "bytesgener": [194, 195, 199, 203, 206, 333, 473], "__bytes__": [194, 199, 203, 342, 384, 426, 471, 475, 476, 481], "is_multipart": [194, 197, 203, 205, 481], "cte": [194, 195, 196, 201, 203, 206, 338, 481], "get_content_maintyp": [194, 198, 203], "set_unixfrom": [194, 203], "get_unixfrom": [194, 203], "set_payload": [194, 204, 481], "set_cont": [194, 195, 196, 198, 203, 205, 206, 481], "get_payload": [194, 198, 202, 204, 473, 481], "invalidbase64paddingdefect": [194, 197], "invalidbase64charactersdefect": [194, 197], "8bit": [194, 195, 196, 199, 200, 201, 205, 206, 473, 474, 481], "get_cont": [194, 195, 198, 203, 206], "iter_part": [194, 203, 205], "set_charset": 194, "get_charset": [194, 203], "2822": [194, 200, 207, 240, 243, 269, 364, 449, 462], "contravent": 194, "mymessag": [194, 203], "get_al": [194, 203, 207, 405, 481], "extant": [194, 203, 481], "roolz": [194, 203], "failobj": [194, 203], "add_head": [194, 203, 204, 387, 393, 405], "_param": [194, 203, 204, 405], "disposit": [194, 195, 201, 203, 246, 291, 331, 398, 405, 476], "bud": [194, 203, 405], "gif": [194, 203, 204, 229, 247, 367, 382, 405, 465, 481], "fu": [194, 203], "baller": [194, 203], "ppt": [194, 203], "dfballer": 194, "replace_head": [194, 203], "maintyp": [194, 195, 198, 199, 201, 202, 203], "get_default_typ": [194, 203], "mandat": [194, 203, 246, 260, 317, 364, 477], "get_content_subtyp": [194, 203], "subpart": [194, 196, 197, 199, 202, 203, 204, 205], "set_default_typ": [194, 203], "get_param": [194, 207, 481], "unquot": [194, 203, 207, 301, 392, 393, 481], "collaps": [194, 257, 362, 475, 481], "collapse_rfc2231_valu": [194, 207], "rawparam": 194, "set_param": [194, 203, 475], "requot": [194, 203], "del_param": [194, 203], "set_typ": 194, "make_": 194, "add_": [194, 195], "get_filenam": [194, 198, 203, 248, 421, 475], "get_boundari": [194, 203], "set_boundari": [194, 197, 203], "headerparseerror": [194, 197, 203], "get_content_charset": [194, 203], "get_content_disposit": [194, 203, 476], "deliveri": [194, 198, 203, 205, 269, 291, 331, 335, 481], "_structur": [194, 202, 203], "preambl": [194, 198, 203, 298, 481], "armor": [194, 203], "epilogu": [194, 203], "clear_cont": [195, 203], "typ": [195, 246, 384, 472, 481], "mimepart": [195, 203, 475], "add_get_handl": 195, "add_set_handl": 195, "typekey": 195, "raw_data_manag": [195, 206], "content_manag": [195, 203, 206, 475], "cid": [195, 198, 335], "headernam": 195, "headervalu": 195, "mimetext": [196, 204, 476, 481], "_subtyp": [196, 204], "_charset": [196, 204, 228, 481], "mimeaudio": [196, 204, 481], "mimeimag": [196, 197, 198, 204], "encode_quopri": 196, "unprint": [196, 481], "encode_base64": [196, 204], "drawback": [196, 250, 290, 478], "encode_7or8bit": 196, "encode_noop": 196, "messageerror": 197, "messageparseerror": [197, 269], "boundaryerror": 197, "multipartconversionerror": [197, 204], "add_payload": 197, "mimenonmultipart": [197, 204, 481], "messagedefect": 197, "headerdefect": [197, 201], "noboundaryinmultipartdefect": 197, "startboundarynotfounddefect": 197, "closeboundarynotfounddefect": 197, "firstheaderlineiscontinuationdefect": 197, "misplacedenvelopeheaderdefect": 197, "missingheaderbodyseparatordefect": 197, "malformedheaderdefect": 197, "multipartinvariantviolationdefect": [197, 205, 481], "invalidbase64lengthdefect": 197, "invaliddatedefect": 197, "textfil": 198, "send_messag": [198, 206, 333, 473, 476, 481], "bytespars": [198, 199, 205, 473, 481], "uncom": [198, 245, 462, 472], "messagefil": 198, "uncommon": [198, 248, 338, 465, 481], "parsestr": [198, 205, 409, 410, 412, 460, 476, 481], "someone_els": 198, "display_nam": [198, 201, 474], "reunion": 198, "pngfile": 198, "img_data": 198, "add_attach": [198, 203], "png": [198, 204, 238, 247, 367, 374], "abspath": [198, 292, 294, 397, 467, 481], "isfil": [198, 292, 294, 356, 436, 473, 479, 481], "guess_typ": [198, 243, 274, 405, 481], "msgfile": 198, "message_from_binary_fil": [198, 205, 206, 473], "sanit": [198, 454, 481], "guess_extens": [198, 274], "03d": [198, 265, 342], "make_msgid": [198, 207, 481], "ayon": 198, "asperg": 198, "pour": 198, "jeuner": 198, "pew": 198, "pepe": 198, "penelop": 198, "pussycat": 198, "fabrett": 198, "salut": 198, "cela": 198, "ressembl": 198, "yumm": 198, "roast": 198, "asparagus": 198, "epicuri": 198, "203718": 198, "asparagus_cid": 198, "add_altern": [198, 203], "href": [198, 236, 238, 240, 411, 467], "img": [198, 238], "peel": 198, "jpg": [198, 256, 292, 417, 450, 465], "add_rel": [198, 203], "jpeg": [198, 204, 247, 367, 444, 466, 481], "magic_html_pars": 198, "html_text": 198, "partfil": 198, "preview": [198, 255, 481], "useless": [198, 387, 409, 479, 481], "get_bodi": [198, 203, 205], "preferencelist": [198, 203], "ans": 198, "richest": 198, "content_typ": [198, 201], "iter_attach": [198, 203, 481], "matthew": [198, 471, 475, 481], "dixon": 198, "cowl": 198, "regener": [199, 309, 430, 454, 467, 472, 476, 477, 481], "necess": [199, 481], "smime": 199, "outfp": 199, "refold": [199, 206, 474], "rewrap": [199, 224], "manheaderlen": 199, "linesep": [199, 200, 201, 206, 223, 256, 291, 333, 346, 474, 481], "cte_typ": [199, 201, 206, 474], "craft": [199, 297, 430, 473, 481], "amessag": 199, "transfer_encod": 199, "decodedgener": [199, 477, 481], "part_info": 199, "_mangle_from_": 199, "refold_sourc": [199, 206, 474], "recoveri": [199, 246, 393, 429], "worldwid": [200, 233, 424], "slew": 200, "xf6stal": 200, "f6stal": 200, "maxlinelen": 200, "header_nam": [200, 393, 405], "continuation_w": 200, "straight": [200, 204, 223, 281, 350, 386, 400, 409, 442, 460, 468, 479, 481], "splitchar": 200, "decode_head": [200, 286, 474], "decoded_str": 200, "make_head": [200, 474], "decoded_seq": 200, "header_factori": [201, 206, 474], "basehead": [201, 203], "unstructuredhead": 201, "max_count": [201, 206], "_myattr": 201, "myattr": 201, "unstructur": 201, "datehead": 201, "wild": [201, 434, 460, 481], "format_datetim": [201, 207, 474], "addresshead": 201, "singleaddresshead": 201, "uniqueunstructuredhead": 201, "mimeversionhead": 201, "parameterizedmimehead": 201, "supplement": [201, 211, 291, 459, 466, 475, 481], "contenttypehead": 201, "contentdispositionhead": 201, "content_disposit": 201, "contenttransferencod": 201, "base_class": 201, "default_class": 201, "use_default_map": 201, "uniquedatehead": 201, "resent": [201, 207, 269, 333], "uniquesingleaddresshead": 201, "uniqueaddresshead": 201, "bcc": [201, 333], "contenttransferencodinghead": 201, "messageidhead": 201, "map_to_typ": 201, "addr_spec": [201, 474], "5321": [201, 474], "body_line_iter": 202, "typed_subpart_iter": 202, "include_default": 202, "message_from_fil": [202, 205], "addtion": 203, "6531": [203, 206, 333, 476, 481], "is_attach": [203, 481], "make_rel": 203, "make_altern": 203, "make_mix": 203, "ordinarili": [204, 329], "dice": 204, "mimebas": 204, "_maintyp": 204, "nonmultipart": [204, 481], "mimemultipart": 204, "_subpart": 204, "mimeappl": 204, "_data": [204, 224], "_encod": 204, "_audiodata": 204, "_imagedata": 204, "tiff": [204, 247, 367, 465], "pbm": [204, 247], "pgm": [204, 247, 367], "ppm": [204, 247, 367, 373], "rast": [204, 247], "xbm": [204, 247, 367, 373], "bmp": [204, 245, 247, 367, 474, 475, 478, 479, 481], "webp": [204, 247, 367, 476, 481], "exr": [204, 247], "mimemessag": 204, "_msg": 204, "thereof": [204, 266, 267, 291, 360, 363, 424, 427, 481], "_text": 204, "cloth": 205, "bytesfeedpars": [205, 473], "conduc": 205, "_factori": 205, "message_factori": [205, 206, 477], "stitch": 205, "fed": [205, 233, 281, 312, 411, 465], "bytesheaderpars": [205, 474], "headerpars": [205, 474], "_class": 205, "headerson": [205, 481], "parsebyt": 205, "message_from_byt": [205, 473], "message_from_str": [205, 474], "mybyt": 205, "edness": 205, "dispar": 206, "settabl": [206, 245, 398, 460, 462, 481], "mymsg": [206, 475], "compat_smtp": 206, "compat_strict": 206, "raise_on_defect": [206, 474], "compat_strict_smtp": 206, "commut": [206, 259, 472], "policy100": 206, "policy80": 206, "apolici": 206, "78": [206, 282, 474, 481], "disciplin": 206, "fold_binari": 206, "register_defect": 206, "handle_defect": 206, "header_max_count": 206, "header_source_pars": 206, "sourcelin": 206, "unfold": 206, "header_store_pars": 206, "header_fetch_pars": 206, "smtputf8": [206, 333, 476, 481], "stype": 206, "rejoin": 206, "refold_head": 206, "traffic": [206, 335, 339, 462, 473, 481], "somepolici": 206, "isdst": [207, 472, 481], "idstr": 207, "strengthen": [207, 481], "parseaddr": [207, 481], "constitu": [207, 249, 408], "realnam": [207, 481], "formataddr": [207, 474], "email_address": 207, "getaddress": [207, 481], "fieldvalu": 207, "tos": [207, 470, 481], "ccs": [207, 339], "resent_to": 207, "resent_cc": 207, "all_recipi": 207, "parsed": 207, "mailer": 207, "parsedate_tz": [207, 481], "greenwich": [207, 364], "parsedate_to_datetim": [207, 474], "mktime_tz": 207, "epoch": [207, 241, 246, 269, 286, 338, 356, 364, 417, 461, 481], "formatd": [207, 464, 481], "timev": [207, 481], "usegmt": 207, "decode_rfc2231": 207, "encode_rfc2231": 207, "fallback_charset": 207, "decode_param": 207, "pipx": [208, 467, 475], "altinstal": [208, 454, 458, 467, 473, 475], "default_pip": 208, "reprenum": [209, 471], "enumcheck": [209, 471], "named_flag": 209, "nonmemb": [209, 471, 481], "global_enum": [209, 471], "show_flag_valu": 209, "some_var": 209, "enummeta": [209, 426, 471, 472, 481], "powersofthre": 209, "myintenum": 209, "seventeen": 209, "1a": [209, 477], "otherstyl": 209, "something_els": 209, "_numeric_repr_": 209, "crimson": 209, "neon": 209, "0x18": 209, "strictflag": 209, "0b0": 209, "10100": 209, "00111": 209, "conformflag": 209, "ejectflag": 209, "keepflag": 209, "regexflag": [209, 317, 471, 478, 481], "errorcod": [210, 312], "eperm": [210, 211, 474, 481], "enoent": [210, 211, 326, 474, 481], "esrch": [210, 211], "eio": 210, "enxio": 210, "e2big": 210, "enoexec": 210, "ebadf": [210, 326, 477, 480, 481], "echild": [210, 211], "eagain": [210, 211, 213, 291], "enomem": [210, 481], "eacc": [210, 211, 213, 248, 474, 481], "efault": 210, "enotblk": 210, "ebusi": 210, "eexist": [210, 211, 291, 481], "exdev": [210, 291], "enodev": 210, "enotdir": [210, 211], "eisdir": [210, 211], "einval": [210, 291, 481], "enfil": 210, "emfil": [210, 481], "enotti": [210, 481], "typewrit": 210, "etxtbsi": 210, "efbig": 210, "enospc": 210, "espip": 210, "erof": 210, "emlink": 210, "epip": [210, 211, 331], "edeadlk": 210, "enametoolong": 210, "enolck": 210, "enosi": [210, 481], "enotempti": 210, "eloop": 210, "ewouldblock": [210, 211], "enomsg": 210, "eidrm": 210, "echrng": 210, "el2nsync": 210, "el3hlt": 210, "el3rst": 210, "elnrng": 210, "eunatch": 210, "enocsi": 210, "csi": 210, "el2hlt": 210, "ebad": 210, "ebadr": 210, "exful": 210, "enoano": 210, "anod": 210, "ebadrqc": 210, "ebadslt": 210, "edeadlock": 210, "ebfont": 210, "enostr": 210, "enodata": [210, 291], "etim": 210, "enosr": 210, "enonet": 210, "enopkg": 210, "eremot": 210, "enolink": 210, "eadv": 210, "advertis": [210, 286, 333, 339, 424, 466, 475, 476, 479, 481], "esrmnt": 210, "srmount": 210, "ecomm": 210, "eproto": 210, "emultihop": 210, "multihop": 210, "edotdot": 210, "rfs": 210, "ebadmsg": 210, "eoverflow": 210, "enotuniq": 210, "ebadfd": 210, "eremchg": 210, "elibacc": 210, "elibbad": 210, "elibscn": 210, "elibmax": 210, "elibexec": 210, "eilseq": 210, "erestart": 210, "estrpip": 210, "euser": 210, "enotsock": 210, "edestaddrreq": 210, "emsgsiz": 210, "eprototyp": 210, "enoprotoopt": 210, "eprotonosupport": 210, "esocktnosupport": 210, "eopnotsupp": 210, "enotsup": 210, "epfnosupport": 210, "eafnosupport": 210, "eaddrinus": 210, "eaddrnotavail": 210, "enetdown": 210, "enetunreach": [210, 481], "enetreset": 210, "econnabort": [210, 211], "econnreset": [210, 211, 481], "enotconn": [210, 475], "eshutdown": [210, 211], "etoomanyref": 210, "splice": [210, 291, 470, 481], "etimedout": [210, 211, 466, 481], "econnrefus": [210, 211], "ehostdown": 210, "ehostunreach": 210, "ealreadi": [210, 211], "estal": 210, "stale": [210, 248, 475, 481], "nfs": [210, 291, 481], "euclean": 210, "enotnam": 210, "xenix": 210, "enavail": 210, "eisnam": 210, "eremoteio": 210, "edquot": 210, "eqful": [210, 481], "enotcap": [210, 211, 481], "ecancel": 210, "eownerdead": 210, "enotrecover": 210, "recover": [210, 413], "inappropri": [211, 336, 344, 426, 481], "new_exc": 211, "original_exc": 211, "3134": [211, 468, 481], "someexcept": [211, 386, 468], "add_not": [211, 441, 471, 481], "__notes__": [211, 379, 481], "rescu": 211, "unqualifi": [211, 346, 438, 475, 481], "perror": 211, "environmenterror": [211, 448, 474], "end_offset": [211, 379, 470, 481], "abandon": [211, 367, 413, 473], "characters_written": [211, 481], "rational": [211, 233, 291, 326, 327, 331, 335, 356, 364, 400, 426, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 475, 476, 477, 479, 481], "upcom": [211, 224, 323, 481], "dubious": [211, 398, 481], "recognis": [211, 266, 300, 329, 338, 387, 426, 481], "mygroup": [211, 339], "eg": [211, 241, 246, 291, 339, 425, 481], "apport": 212, "sigaltstack": [212, 481], "catastroph": [212, 473, 481], "dump_traceback": [212, 476, 481], "all_thread": 212, "print_tb": [212, 379, 476], "uninstal": [212, 279, 380, 451, 457, 459, 475, 481], "is_en": 212, "dump_traceback_lat": [212, 476, 481], "cancel_dump_traceback_lat": 212, "watchdog": 212, "dup2": [212, 291, 331, 471, 476, 478, 481], "0x00007fb899f39700": [212, 474], "f_add_seal": 213, "f_get_seal": 213, "f_seal_": 213, "memfd_creat": [213, 291, 479, 481], "f_getpath": [213, 481], "f_ofd_getlk": [213, 480, 481], "f_ofd_setlk": [213, 480, 481], "f_ofd_setlkw": [213, 480, 481], "f_getpipe_sz": [213, 481], "f_setpipe_sz": [213, 481], "f_dup2fd": [213, 471, 481], "f_dup2fd_cloexec": [213, 471, 481], "fd_cloexec": [213, 471], "ficlon": [213, 481], "ficlonerang": [213, 481], "reflink": [213, 291], "btrfs": [213, 291], "ocfs2": 213, "xfs": [213, 291], "mutate_flag": 213, "simplif": [213, 481], "getpgrp": [213, 291], "13341": 213, "tiocgpgrp": 213, "lock_un": 213, "lock_sh": 213, "lock_ex": 213, "lock_nb": 213, "seek_set": [213, 256, 276, 291, 338, 465, 469], "seek_cur": [213, 256, 276, 291, 338, 465, 469], "seek_end": [213, 256, 276, 291, 338, 465, 469], "svr4": 213, "f_setfl": 213, "lockdata": 213, "hhllhh": 213, "f_wrlck": 213, "f_setlkw": 213, "o_shlock": [213, 291, 465, 481], "o_exlock": [213, 291, 465, 481], "trade": [214, 290, 342, 424], "clear_cach": [214, 423, 475], "cmpfile": 214, "dir1": 214, "dir2": 214, "mtime": [214, 232, 248, 291, 356, 394, 479, 481], "default_ignor": [214, 475], "pardir": [214, 291], "report_partial_closur": 214, "report_full_closur": 214, "left_list": 214, "right_list": 214, "left_on": 214, "right_on": 214, "common_dir": 214, "common_fil": 214, "common_funni": 214, "same_fil": 214, "diff_fil": 214, "funny_fil": 214, "mydircmp": 214, "print_diff_fil": 214, "dcmp": 214, "sub_dcmp": 214, "openhook": [216, 465, 481], "hook_compress": [216, 470], "inplac": [216, 481], "filelineno": 216, "isfirstlin": 216, "isstdin": 216, "nextfil": 216, "bak": 216, "fi": [216, 223], "hook_encod": [216, 477, 481], "fnmatchcas": [218, 386, 481], "normcas": [218, 292, 481], "reobj": 218, "other_fract": 219, "limit_denomin": 219, "414213": 219, "1414213": 219, "125": [219, 259, 444, 447, 466], "7e": 219, "2476979795053773": [219, 473], "2251799813685248": [219, 473], "gcd": [219, 273, 476, 480, 481], "supportsint": [219, 384, 471, 479, 481], "is_integ": [219, 342, 481], "flt": 219, "from_decim": [219, 473], "max_denomin": 219, "1415926535897932": 219, "4503599627370497": 219, "9007199254740992": 219, "__floor__": [219, 273, 387, 426, 481], "greatest": [219, 273, 342], "__ceil__": [219, 273, 387, 426, 481], "ceil": [219, 273, 287, 320, 342, 426, 466, 479, 481], "__round__": [219, 223, 384, 387, 426, 468, 481], "ndigit": [219, 223, 426, 442, 481], "40g": 219, "1428571428571428571428571428571428571429": 219, "1_234_567": 219, "141593e": 219, "old_pric": 219, "new_pric": 219, "499": [219, 221, 239, 286], "tower": [219, 382, 466, 468, 481], "959": 221, "2640": [221, 480, 481], "retrlin": 221, "1176": 221, "1063": 221, "sr": 221, "226": [221, 239], "retrbinari": 221, "retr": [221, 303], "221": 221, "acct": 221, "source_address": [221, 240, 333, 335, 467, 473, 474], "ftp1": [221, 473], "proftpd": [221, 473], "154": [221, 282, 380, 464, 473], "cento": [221, 471, 473, 478, 481], "fedora": [221, 350, 454, 458, 470, 473, 480, 481], "set_debuglevel": [221, 240, 286, 303, 333, 357, 476], "getwelcom": [221, 286, 303], "voidcmd": 221, "error_repli": 221, "blocksiz": [221, 240, 291, 356, 478, 481], "stor": 221, "transfercmd": 221, "nlst": [221, 474], "set_pasv": [221, 461], "storbinari": [221, 466, 467], "storlin": [221, 466], "eprt": 221, "passiv": [221, 253, 459, 461, 477, 478, 479, 480], "epsv": 221, "pasv": [221, 481], "ntransfercmd": 221, "mlsd": [221, 474], "3659": 221, "fromnam": 221, "tonam": 221, "error_perm": 221, "mkd": 221, "rmd": 221, "4217": 221, "prot_p": 221, "check_hostnam": [221, 240, 246, 286, 303, 333, 339, 393, 411, 472, 477, 481], "has_sni": [221, 240, 246, 286, 303, 333, 339, 393], "keyfil": [221, 246, 267, 279, 303, 333, 339, 460, 472, 477, 481], "certfil": [221, 246, 303, 333, 339, 460, 472, 477, 481], "ftps": 221, "pureftpd": 221, "6jack": 221, "antilink": 221, "blogbench": 221, "bsdcam": 221, "clockspe": 221, "djbdns": 221, "jedi": 221, "eacceler": 221, "favicon": 221, "ico": [221, 481], "francoton": 221, "fugu": 221, "libpuzzl": 221, "metalog": 221, "minidentd": 221, "udf": [221, 481], "php": [221, 417, 460, 462], "jenkin": [221, 386], "skein": [221, 233], "webdav": [221, 239], "phpaudit": 221, "phpbench": 221, "pincast": 221, "ping": [221, 460, 461, 462, 465], "posto": 221, "public_key": 221, "ftpd": 221, "qscan": 221, "qtc": 221, "shared": 221, "skycach": 221, "ucarp": 221, "ssl_version": [221, 339, 472, 481], "protocol_sslv23": [221, 339, 470, 481], "auth": [221, 246, 267, 333, 339, 463, 476, 481], "ccc": [221, 345, 374, 474], "nat": [221, 335, 474], "prot_c": 221, "error_temp": 221, "error_proto": [221, 303, 474], "anext": [223, 470, 481], "async_iter": 223, "0b11": 223, "0b1010": [223, 468], "0b1110": 223, "1110": 223, "pythonbreakpoint": [223, 350, 453, 478], "dont_inherit": [223, 475], "pycf_": 223, "__all__": [223, 245, 277, 317, 360, 434, 448, 461, 477, 481], "__initializing__": 223, "_clearcach": 223, "pack_into": [223, 345, 465, 481], "unpack_from": [223, 345, 465, 481], "perimet": 223, "season": 223, "summer": [223, 364, 465, 466], "floatvalu": 223, "digitpart": [223, 433], "floatnumb": [223, 428, 433], "003": [223, 426, 444, 453], "1e6": 223, "0x2a": [223, 343], "__trunc__": [223, 273, 387, 426, 471, 481], "010": [223, 259, 360], "denial": [223, 260, 342, 356, 407, 426, 453, 470, 471, 478, 479, 480, 481], "classinfo": 223, "mydata": [223, 363, 409, 450, 473], "process_block": 223, "iterat": 223, "keyfunc": [223, 259], "0o70": 223, "0o12": 223, "write_through": [223, 256, 474, 481], "reconfigur": [223, 256, 478, 481], "default_buffer_s": [223, 256, 346, 481], "nnn": [223, 238, 393], "untransl": [223, 256], "somedir": 223, "o_rdon": [223, 280, 281, 291], "spamspam": 223, "bufferedread": [223, 256, 356, 466, 467, 473, 481], "bufferedwrit": [223, 256, 466, 473, 481], "bufferedrandom": [223, 256, 466, 481], "rawiobas": [223, 256, 466, 474, 476, 481], "3j": [223, 287, 467], "inv_bas": 223, "forcibl": [223, 474, 475], "_x": [223, 257, 466, 477], "_voltag": 223, "displayhook": [223, 350, 448, 461], "salari": [223, 342, 438], "argn": 223, "regular_funct": 223, "fsum": [223, 273, 341, 442, 466, 481], "summat": [223, 273, 442, 472, 481], "object_or_typ": 223, "type2": [223, 384], "spice": 223, "transpos": [223, 259, 440, 464], "fo": [223, 226, 462], "manifest": [223, 360, 467, 481], "zip_longest": [223, 259, 468, 481], "x2": [223, 428, 439, 470, 472, 481], "attain": 223, "till": [223, 281, 306, 339, 357, 480, 481], "saus": 223, "_temp": 223, "pythoncaseok": [223, 453, 461, 480, 481], "user_funct": 224, "evict": 224, "3628800": 224, "479001600": 224, "sequence_of_numb": [224, 479], "stdev": [224, 341, 471, 479, 481], "unaccept": [224, 297, 335, 411, 434], "count_vowel": 224, "vowel": 224, "aeiouaeiou": 224, "cache_paramet": [224, 481], "cache_info": [224, 473], "currsiz": [224, 473], "cache_clear": [224, 473], "predictor": 224, "impur": 224, "get_pep": 224, "290": 224, "320": [224, 386], "9991": 224, "cacheinfo": [224, 473], "fib": [224, 439, 448], "377": [224, 439, 447, 448], "610": [224, 439, 447, 448], "total_ord": [224, 426, 428, 467, 473, 475, 481], "_is_valid_operand": 224, "lastnam": [224, 338, 473, 479], "firstnam": [224, 338, 473], "unrecognis": [224, 266, 474], "farg": 224, "fkeyword": 224, "newkeyword": 224, "basetwo": 224, "10010": 224, "partialmethod": [224, 342, 475, 479, 481], "_aliv": 224, "set_stat": 224, "set_dead": 224, "strength": [224, 471], "eh": [224, 471], "uniontyp": [224, 342, 383, 384, 471, 481], "fun_num": 224, "615": [224, 423, 480, 481], "0x1035a2840": 224, "0x103fe0000": 224, "dict_key": [224, 467, 481], "singledispatchmethod": [224, 479, 481], "wrapper_assign": 224, "wrapper_upd": 224, "17482": 224, "my_decor": [224, 465], "debug_leak": 225, "debug_saveal": 225, "uncollect": [225, 473, 481], "set_threshold": 225, "threshold0": 225, "threshold1": 225, "threshold2": 225, "get_count": [225, 465], "count0": 225, "count1": 225, "count2": 225, "get_threshold": 225, "lazarus": 225, "gc_ref": 225, "unfreez": [225, 478], "get_freeze_count": [225, 478], "debug_uncollect": [225, 473], "debug_stat": 225, "debug_collect": 225, "unfamiliar": [226, 265, 290, 465, 466], "shortopt": 226, "longopt": 226, "frob": [226, 388], "getopterror": 226, "gnu_getopt": [226, 463], "posixly_correct": 226, "cfoo": 226, "optlist": 226, "ho": [226, 481], "getpasswarn": 227, "getus": [227, 246, 291, 303], "lname": 227, "getlogin": [227, 291], "i18n": [228, 343, 460, 467, 481], "l10n": [228, 460], "monolingu": 228, "bindtextdomain": [228, 264], "localedir": 228, "lc_messag": [228, 264], "lc_all": [228, 264, 360, 450, 453, 471, 478, 481], "textdomain": [228, 264], "dgettext": [228, 264], "ngettext": [228, 481], "singular": [228, 481], "dngettext": 228, "pgettext": [228, 479, 481], "dpgettext": 228, "npgettext": 228, "dnpgettext": 228, "dcgettext": [228, 264], "unimpl": [228, 241], "myapplic": 228, "class_": 228, "_info": 228, "_fallback": 228, "add_fallback": 228, "_pars": 228, "albeit": [228, 384], "gnome": [228, 341, 464, 474, 481], "jame": [228, 421, 424, 460, 463, 465, 467, 471, 472, 478, 481], "henstridg": [228, 460, 467], "habit": [228, 269], "mylog": [228, 469, 473], "xgettext": [228, 481], "fran": [228, 474, 475, 476], "ois": [228, 474, 475, 476], "pinard": 228, "xpot": 228, "pygettext": [228, 476, 481], "msgfmt": [228, 467], "lang1": 228, "lang2": 228, "lang3": 228, "language1": 228, "mollusk": 228, "albatross": 228, "rat": 228, "penguin": [228, 425], "n_": 228, "teach": [228, 462, 479, 481], "markthisstringfortransl": 228, "funk": [228, 460], "juan": [228, 467], "ib": 228, "ez": 228, "palomar": 228, "barri": [228, 460, 461, 462, 464, 465, 466, 472, 473, 474, 475, 476, 477, 478, 479, 481], "warsaw": [228, 460, 461, 462, 464, 465, 466, 472, 473, 474, 475, 476, 478, 479, 481], "gustavo": [228, 462, 463, 464, 465, 481], "niemey": [228, 462, 463, 464, 465], "subshel": [229, 291], "expandvar": [229, 292, 346, 466, 481], "include_hidden": [229, 481], "altsep": [229, 245, 291, 294, 471, 481], "iglob": [229, 470, 476, 477, 481], "drive": [229, 245, 290, 291, 292, 294, 356, 360, 367, 386, 420, 424, 459, 472, 474, 475, 476, 481], "unc": [229, 291, 292, 294, 420, 481], "sharepoint": [229, 420], "quo": 229, "vadi": 229, "card": [229, 293, 316, 317, 434], "topologicalsort": [230, 480, 481], "topolog": [230, 463, 480, 481], "vertex": [230, 382], "acycl": 230, "predecessor": [230, 463, 473], "get_readi": 230, "static_ord": 230, "topological_sort": 230, "task_queu": [230, 281], "finalized_tasks_queu": 230, "cycleerror": 230, "node_group": 230, "ts2": 230, "gr_name": [231, 463], "gr_passwd": 231, "gr_gid": [231, 346, 463], "gr_mem": 231, "yp": 231, "getgrnam": [231, 346, 463, 481], "getgrgid": [231, 477, 481], "getgral": [231, 481], "gunzip": 232, "badgzipfil": [232, 479, 481], "fileobj": [232, 233, 327, 331, 356, 474, 481], "discern": 232, "slowest": [232, 360, 382, 386, 472, 481], "unseek": [232, 399, 420, 473, 475, 476, 481], "wbit": [232, 422, 481], "file_cont": [232, 268], "s_in": 232, "s_out": 232, "fip": [233, 339, 481], "sha1": [233, 454, 465, 467, 472, 473, 481], "sha224": [233, 465, 467, 473], "sha256": [233, 249, 335, 339, 454, 465, 467, 473, 481], "sha384": [233, 339, 465, 467, 473], "sha512": [233, 454, 465, 467, 473, 481], "rsa": [233, 339, 470, 481], "1321": 233, "adler32": [233, 422, 481], "hexdigest": [233, 235, 338, 465, 481], "sha3_224": [233, 477], "sha3_256": [233, 477, 481], "sha3_384": [233, 477], "sha3_512": [233, 477, 481], "shake_128": [233, 477], "shake_256": [233, 477], "blake2b": [233, 471, 477, 480, 481], "algorithms_guarante": [233, 467, 473], "algorithms_avail": [233, 467, 473, 481], "seealso": 233, "sha3": [233, 454, 471, 472, 480, 481], "keccak": [233, 471, 477, 481], "usedforsecur": [233, 325, 481], "insecur": [233, 328, 338, 339, 465, 472, 473, 481], "sha2": [233, 339, 472, 480, 481], "hacl": [233, 472, 481], "spammish": 233, "x03": [233, 282, 335, 342, 345, 396], "x1e": [233, 342], "xdd": 233, "ae": 233, "x15": [233, 345], "x93": 233, "xc5": 233, "xfe": 233, "x00o": 233, "xa5u": 233, "xfd": 233, "xf7": 233, "xbcn": 233, "x84": [233, 466], "xa6": 233, "xaf": [233, 466], "x0c": [233, 342, 396], "x95": 233, "x0fk": 233, "x06": [233, 396], "031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406": 233, "condens": [233, 266, 465, 481], "upstream": [233, 338, 479, 481], "digest_s": [233, 235, 475], "block_siz": [233, 235, 475], "incept": 233, "length_in_bit": 233, "44709d6fcb83d92a76dcb0b668c98e1b1d3dafe7": 233, "file_digest": [233, 471, 481], "socketio": 233, "mac1": 233, "digestmod": [233, 235, 475, 479, 481], "mac2": 233, "stretch": [233, 245, 374, 382, 408, 478], "brute": 233, "tunabl": [233, 291, 473], "pbkdf2_hmac": [233, 467, 470, 472, 475, 481], "hash_nam": 233, "dklen": 233, "pkcs": [233, 339, 475, 481], "pseudorandom": [233, 316], "appendix": [233, 424], "nist": [233, 463], "132": 233, "stackexchang": 233, "pbkdf2": [233, 470], "our_app_it": 233, "500_000": [233, 342], "dk": 233, "15530bba69924174860db778f2c6f8104d3aaf9d26241840c8c4a641c8d000a9": 233, "scrypt": [233, 477, 481], "maxmem": 233, "7914": 233, "7693": 233, "fanout": 233, "leaf_siz": [233, 481], "node_offset": [233, 481], "node_depth": 233, "inner_s": 233, "last_nod": 233, "salt_siz": 233, "person_s": 233, "max_key_s": 233, "max_digest_s": 233, "6ff843ba685842aa82031d3f53c48b66326df7639a63d128974c5c14f31a0f33343a8c65551134ed1ae0f2b0dd2bb495dc81039e3eeb0aa1bb0388bbeac29183": 233, "d24f26cf8de66472d58d4e1b1774b4c9158b1f4c": 233, "6fa1d8fcfd719046d762": 233, "eb6ec15daf9546254f0809": 233, "1bf21a98c78a1c376ae9": 233, "567004bf96e4a25773ebf4": 233, "indifferenti": 233, "3d363ff7401e02026f4a4687d4863c": 233, "symmetr": [233, 282, 339, 342, 426, 428, 460, 462, 463, 464, 474, 481], "tamper": [233, 297], "secret_key": 233, "auth_siz": 233, "good_sig": 233, "alic": 233, "43b3c982cf697e0c5ab22172d1ca7421": 233, "bob": [233, 281, 384, 457, 465, 466, 467, 469, 474], "0102030405060708090a0b0c0d0e0f00": 233, "e3c8102868d28b5ff85fc35dda07329970d1a01e273c37481326fe0c861c8142": 233, "signer": 233, "likelihood": [233, 341, 479], "106": [233, 259, 341, 459, 462], "salt1": 233, "salt2": 233, "h2": [233, 240, 266, 409], "summarili": 233, "files_hash_person": 233, "block_hash_person": 233, "20d9cd024d4fb086aae819a1432dd2466de12947831b75c5a30cf2676095d3b4": 233, "cf68fb5761b9c44e7878bfb2c4c9aea52264a80b75005e65619778de59f383a3": 233, "orig_key": 233, "rm5epjai72qck3rgbpw3vpnfzy5ozothi": 233, "khy6h21km": 233, "enc_key": 233, "kencrypt": 233, "mac_key": 233, "kmac": 233, "rbpb15s": 233, "z9t": 233, "agffno5wuhb77vbri6f9iv2qixu7whw": 233, "g9gthfe1yluxy1zwplyk1": 233, "nwfu0wseb0krcjhdep": 233, "h00": 233, "h01": 233, "h10": 233, "3ad2a9b37c6070e374c7a8c508fe20ca86b6ed54e286e93a0318e95e881db5aa": 233, "jean": [233, 424, 466, 467, 474], "philipp": [233, 424, 465, 470, 481], "aumasson": [233, 424], "samuel": [233, 335, 424, 463, 465, 477, 480, 481], "neve": [233, 424, 477], "zooko": [233, 424], "wilcox": 233, "hearn": 233, "christian": [233, 424, 460, 464, 466, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481], "winnerlein": 233, "finalist": 233, "henzen": 233, "willi": 233, "meier": 233, "raphael": 233, "phan": [233, 481], "chacha": 233, "daniel": [233, 463, 466, 467, 470, 471, 473, 475, 476, 477, 481], "bernstein": [233, 424, 466, 481], "pyblake2": 233, "dmitri": [233, 464, 476, 477, 481], "chestnykh": [233, 477], "heim": [233, 424, 466, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481], "neighbor": [233, 411, 462, 463], "warranti": [233, 424, 479], "cc0": 233, "creativecommon": 233, "publicdomain": 233, "alexandr": [233, 466, 467, 469, 473, 475, 481], "sokolovskiy": 233, "nvlpub": 233, "gov": [233, 241, 463], "nistpub": 233, "csrc": 233, "cryptographic_hash_funct": 233, "rfc8018": 233, "cryptographi": [233, 335], "nistspecialpublication800": 233, "heapifi": [234, 316, 450, 481], "heappush": [234, 450, 463, 466], "heappop": [234, 259, 450, 463, 466], "heappushpop": [234, 466], "heapreplac": [234, 316], "heapsort": 234, "prioritizeditem": [234, 314], "pq": [234, 317], "entry_find": 234, "add_task": 234, "remove_task": 234, "pop_task": 234, "midi": 234, "digest_con": [235, 481], "crypto_memcmp": [235, 481], "x3e": [236, 238], "html5": [237, 474, 475, 481], "name2codepoint": [237, 238], "codepoint2nam": 237, "entitydef": 237, "html4": [237, 238, 481], "whatwg": [237, 392, 470, 477, 478, 479, 480, 481], "multipag": 237, "convert_charref": [238, 475, 476, 481], "myhtmlpars": 238, "handle_starttag": 238, "handle_endtag": 238, "handle_data": 238, "getpo": 238, "get_starttag_text": 238, "handle_startendtag": 238, "handle_entityref": 238, "handle_charref": 238, "handle_com": 238, "condcom": 238, "ie9": 238, "handle_decl": 238, "decl": 238, "handle_pi": 238, "sgml": [238, 271, 415, 466], "unknown_decl": 238, "ent": 238, "startswith": [238, 291, 342, 350, 386, 397, 420, 449, 460, 463, 465, 466, 469, 474, 476, 479, 481], "logo": [238, 382, 424], "buff": 238, "ere": 238, "pan": [238, 481], "soup": 238, "httpstatus": [239, 476, 480, 481], "switching_protocol": 239, "7231": 239, "2518": 239, "103": [239, 259, 341, 342, 380, 459, 467, 473, 480, 481], "early_hint": [239, 480, 481], "8297": [239, 481], "non_authoritative_inform": 239, "no_cont": 239, "reset_cont": 239, "partial_cont": 239, "7233": 239, "multi_status": 239, "4918": 239, "already_report": 239, "5842": 239, "im_us": 239, "3229": 239, "multiple_choic": 239, "moved_perman": [239, 464], "see_oth": 239, "not_modifi": 239, "7232": [239, 467], "use_proxi": 239, "temporary_redirect": 239, "permanent_redirect": 239, "7238": 239, "bad_request": 239, "7235": 239, "payment_requir": 239, "not_found": [239, 240, 481], "method_not_allow": 239, "not_accept": 239, "proxy_authentication_requir": 239, "request_timeout": 239, "length_requir": 239, "precondition_fail": 239, "request_entity_too_larg": 239, "request_uri_too_long": 239, "unsupported_media_typ": 239, "requested_range_not_satisfi": 239, "expectation_fail": 239, "418": [239, 439, 470, 474, 480, 481], "im_a_teapot": [239, 480], "htcpcp": 239, "2324": 239, "misdirected_request": 239, "7540": 239, "422": 239, "unprocessable_ent": 239, "423": 239, "424": [239, 475], "failed_depend": 239, "too_ear": [239, 480, 481], "8470": 239, "upgrade_requir": 239, "428": [239, 294, 475], "precondition_requir": 239, "6585": 239, "429": [239, 475], "too_many_request": 239, "431": 239, "request_header_fields_too_larg": 239, "unavailable_for_legal_reason": [239, 481], "obstacl": [239, 481], "7725": 239, "internal_server_error": 239, "not_impl": 239, "bad_gateway": 239, "service_unavail": 239, "gateway_timeout": 239, "http_version_not_support": 239, "506": [239, 324, 477, 481], "variant_also_negoti": 239, "2295": 239, "507": 239, "insufficient_storag": 239, "508": 239, "loop_detect": 239, "510": 239, "not_extend": 239, "2774": 239, "511": [239, 420, 477], "network_authentication_requir": 239, "is_inform": 239, "199": 239, "is_success": [239, 481], "is_redirect": 239, "399": [239, 481], "is_client_error": 239, "is_server_error": 239, "httpmethod": [239, 481], "5789": 239, "h3": 240, "h4": 240, "httpsconnect": [240, 393, 466, 467, 473, 475, 478, 481], "unverifi": [240, 241, 393], "_create_unverified_context": [240, 467, 475], "post_handshake_auth": [240, 339, 477, 478, 479, 481], "cert_fil": [240, 393, 472, 481], "alpn": [240, 339, 393, 470, 476, 481], "set_alpn_protocol": [240, 339, 393, 476], "key_fil": [240, 393, 472, 481], "debuglevel": [240, 333, 357, 393, 476, 481], "httpexcept": 240, "notconnect": 240, "invalidurl": [240, 481], "unknownprotocol": 240, "unknowntransferencod": 240, "unimplementedfilemod": 240, "incompleteread": 240, "improperconnectionst": 240, "cannotsendrequest": 240, "cannotsendhead": 240, "responsenotreadi": 240, "badstatuslin": 240, "linetoolong": 240, "remotedisconnect": [240, 476, 481], "getrespons": [240, 476, 481], "http_port": 240, "https_port": 240, "encode_chunk": 240, "reconnect": [240, 476, 481], "set_tunnel": [240, 417, 473, 481], "tunnel": [240, 473, 481], "get_proxy_response_head": [240, 481], "putrequest": [240, 481], "skip_host": 240, "skip_accept_encod": 240, "puthead": 240, "endhead": [240, 477], "message_bodi": 240, "7230": [240, 393], "amt": 240, "gethead": 240, "getcod": [240, 393, 481], "data1": [240, 388], "data2": [240, 388], "12524": 240, "issue12524": 240, "filecont": 240, "2965": [241, 393, 481], "2109": [241, 242], "cookie2": 241, "loaderror": 241, "delayload": 241, "blocked_domain": 241, "allowed_domain": 241, "rfc2965": 241, "rfc2109_as_netscap": 241, "hide_cookie2": 241, "strict_domain": 241, "strict_rfc2965_unverifi": 241, "strict_ns_unverifi": 241, "strict_ns_domain": 241, "domainliber": 241, "strict_ns_set_initial_dollar": 241, "strict_ns_set_path": 241, "secure_protocol": [241, 481], "wss": [241, 392, 481], "websocket": [241, 255, 481], "downgrad": [241, 481], "make_cooki": [241, 481], "curl": [241, 458, 459, 481], "cookie_spec": 241, "kristol": 241, "errata": [241, 260], "unfinish": [241, 281, 481], "2964": 241, "add_cookie_head": 241, "get_full_url": [241, 393], "get_head": [241, 384, 393], "header_item": [241, 393], "add_unredirected_head": [241, 393], "origin_req_host": [241, 393], "get_origin_req_host": [241, 393, 475], "extract_cooki": 241, "set_ok": 241, "approv": [241, 286, 305, 459, 460, 467, 481], "set_polici": 241, "set_cookie_if_ok": 241, "set_cooki": 241, "clear_session_cooki": 241, "ignore_discard": 241, "ignore_expir": 241, "wipe": 241, "mozillacookiejar": [241, 481], "lynx": [241, 401, 464], "clobber": [241, 290, 481], "lwpcookiejar": [241, 481], "libwww": [241, 464], "cookie3": 241, "return_ok": 241, "domain_return_ok": 241, "path_return_ok": 241, "mycookiepolici": 241, "i_dont_want_to_store_this_cooki": 241, "tighten": [241, 460, 467, 473], "loos": [241, 363, 481], "benign": 241, "blocklist": 241, "allowlist": [241, 392], "set_blocked_domain": 241, "coyot": 241, "193": [241, 382, 468], "is_block": 241, "set_allowed_domain": 241, "is_not_allow": 241, "nz": 241, "domainstrictnodot": 241, "domainstrictnondomain": 241, "domainrfc2965match": 241, "domainstrict": 241, "acm": [241, 316], "rocket_launch": 241, "expiri": [241, 481], "is_expir": 241, "comment_url": 241, "rfc2109": 241, "port_specifi": 241, "domain_specifi": 241, "domain_initial_dot": 241, "began": [241, 248, 265, 360, 460, 461, 481], "has_nonstandard_attr": 241, "get_nonstandard_attr": 241, "set_nonstandard_attr": 241, "cj": 241, "ads": 241, "serializ": [242, 260], "2068": [242, 364], "ascii_lett": [242, 324, 343, 462, 468], "cookieerror": 242, "basecooki": 242, "simplecooki": [242, 481], "value_decod": 242, "value_encod": 242, "real_valu": 242, "coded_valu": [242, 476, 478, 481], "js_output": 242, "rawdata": 242, "http_cooki": 242, "httpon": [242, 466, 481], "samesit": [242, 481], "csrf": 242, "lax": [242, 465, 481], "isreservedkey": 242, "outputstr": 242, "fig": 242, "newton": [242, 317], "wafer": 242, "rocki": [242, 466], "chip": [242, 467], "ahoy": 242, "vienna": 242, "finger": [242, 468], "keebler": 242, "fudg": 242, "012": [242, 259, 342, 461], "oreo": 242, "doublestuff": 242, "twix": 242, "httpserver": [243, 331, 405], "server_class": [243, 405], "handler_class": [243, 405], "server_address": [243, 336, 405], "8000": [243, 293, 331, 405, 417, 418, 465, 479, 481], "httpd": [243, 274, 331, 405, 465], "requesthandlerclass": [243, 336, 405], "server_nam": [243, 405, 418], "server_port": [243, 405], "threadinghttpserv": [243, 478, 481], "threadingmixin": [243, 336, 478, 481], "client_address": [243, 336, 405], "do_spam": 243, "close_connect": 243, "handle_one_request": 243, "requestlin": 243, "3986": [243, 392, 467, 470, 476, 477, 478, 479, 480, 481], "hier": 243, "request_vers": 243, "messageclass": 243, "rfile": [243, 336], "wfile": [243, 336, 477, 481], "server_vers": 243, "basehttp": 243, "sys_vers": 243, "version_str": 243, "error_message_format": [243, 475], "send_error": [243, 475, 481], "error_content_typ": 243, "protocol_vers": [243, 246], "send_head": 243, "send_response_on": 243, "handle_expect_100": 243, "send_respons": 243, "date_time_str": 243, "end_head": [243, 474], "flush_head": [243, 474], "log_request": 243, "log_error": 243, "log_messag": [243, 481], "1994": [243, 424], "log_date_time_str": 243, "address_str": 243, "simplehttprequesthandl": [243, 331, 478, 481], "do_get": 243, "simplehttp": 243, "extensions_map": 243, "list_directori": 243, "webserv": 243, "index_pag": [243, 481], "9000": [243, 384, 428], "cgihttprequesthandl": [243, 481], "empt": 243, "cgi_directori": 243, "htbin": 243, "do_post": 243, "scrub": 243, "nefari": 243, "smart": [245, 462, 481], "namag": 245, "aqua": [245, 457, 481], "unsav": [245, 481], "undon": [245, 382, 388], "clipboard": [245, 367, 477, 478, 479, 481], "reformat": [245, 269, 290, 463, 481], "tabifi": 245, "untabifi": 245, "toggl": [245, 335, 374, 479, 480, 481], "chitespac": 245, "autosav": 245, "wake": [245, 326, 331, 363, 466, 481], "pane": [245, 373, 374, 481], "zoom": [245, 481], "momentarili": [245, 269, 481], "deiconifi": 245, "idlerc": [245, 481], "squeez": [245, 477, 478, 479, 481], "dicuss": 245, "leftarrow": 245, "rightarrow": 245, "pageup": 245, "pagedown": 245, "popup": [245, 360, 481], "100000000": 245, "attemp": 245, "uncolor": 245, "idlestartup": [245, 481], "pythonstartup": [245, 318, 332, 350, 436, 453, 475, 481], "masquerad": [245, 481], "tcpconnect": 245, "irv": [245, 440], "6543": 245, "tcplisten": 245, "antivirus": [245, 360], "taught": 245, "mis": [245, 481], "admin": 245, "zombi": [245, 281, 336, 360, 465, 474, 481], "pythonw": [245, 281, 332, 350, 457, 459, 462, 477, 478, 481], "dismiss": [245, 382, 481], "glitch": 245, "active_count": [245, 281, 363, 466, 470, 481], "__stdin__": [245, 350, 448], "__stdout__": [245, 330, 350, 448], "__stderr__": [245, 350, 360, 448], "pyw": [245, 436, 459, 462, 481], "setrecursionlimit": [245, 297, 350, 448, 460, 472, 481], "plane": [245, 273, 470, 481], "x02": [245, 257, 282, 335, 345, 396], "x07": [245, 282, 396], "x08c": 245, "loopback": [245, 257, 360], "transient": [245, 266, 338, 481], "f5": [245, 460], "mousewheel": [245, 481], "scrollbar": [245, 367, 372, 374, 382, 481], "toc": [245, 481], "dock": [245, 481], "zzdummi": [245, 481], "imap4_ssl": [246, 474, 480, 481], "imap4_stream": [246, 480, 481], "imap4rev1": 246, "1730": 246, "imap4_port": 246, "logout": [246, 476, 479, 481], "noop": [246, 281, 303, 333, 481], "d25if65hy903weo": 246, "imap4_ssl_port": 246, "ssl_context": [246, 286, 472, 481], "993": 246, "internaldate2tupl": 246, "datestr": 246, "int2ap": 246, "parseflag": 246, "flagstr": 246, "time2internald": 246, "date_tim": [246, 420], "expung": 246, "uw": 246, "message_set": 246, "authobject": [246, 333], "checkpoint": [246, 350], "new_mailbox": 246, "deleteacl": [246, 464], "acl": [246, 330], "5161": [246, 476, 481], "6855": [246, 476, 481], "message_part": 246, "getacl": [246, 462], "cyrus": [246, 481], "getannot": 246, "getquota": 246, "rfc2087": 246, "getquotaroot": 246, "folder": [246, 269, 397, 457, 459, 481], "login_cram_md5": 246, "cram": [246, 333], "lsub": 246, "myright": [246, 464], "2342": [246, 462], "message_num": 246, "proxyauth": 246, "authoris": 246, "oldmailbox": 246, "newmailbox": 246, "criterion": [246, 297, 426, 460], "msgnum": 246, "ldj": 246, "inbox": [246, 269], "setacl": [246, 462], "setannot": 246, "setquota": 246, "sort_criteria": 246, "search_criterion": 246, "flag_list": 246, "3501": 246, "gmail": [246, 481], "threading_algorithm": 246, "unsubscrib": [246, 481], "unselect": [246, 480, 481], "xatom": 246, "utf8_en": [246, 476], "sgi": 247, "imglib": 247, "87a": 247, "89a": 247, "bitmap": [247, 253, 279, 326, 367, 373, 374], "graymap": 247, "pixmap": [247, 373], "raster": 247, "jfif": [247, 481], "exif": [247, 481], "openexr": [247, 476, 481], "bass": [247, 334], "comprehend": 248, "3120": [248, 433, 468], "anchor": [248, 250, 294, 352, 367, 374, 467, 472, 475, 481], "subpkg": 248, "invalidate_cach": [248, 421, 470, 474, 478, 481], "rebound": [248, 427, 434], "redefinit": [248, 426, 481], "resourceload": [248, 478, 481], "inspectload": [248, 475, 476, 481], "executionload": 248, "fileload": [248, 474, 475], "sourceload": [248, 474, 475], "find_spec": [248, 300, 350, 421, 430, 470, 472, 475, 476, 478, 481], "educ": [248, 259, 382], "spec_from_load": [248, 470], "pathfind": [248, 430, 470, 471, 475, 478, 481], "get_resource_read": [248, 250, 251, 478, 481], "resourceread": [248, 250, 251, 472, 478, 481], "get_data": [248, 300, 393, 421, 466, 475, 481], "get_sourc": [248, 263, 421, 475, 481], "source_to_cod": [248, 475, 476, 481], "sourceless": [248, 474, 476], "path_stat": [248, 474], "path_mtim": [248, 474], "set_data": 248, "traversableresourc": [248, 251, 472, 481], "perspect": [248, 251], "artifact": [248, 250, 251, 293, 474, 481], "correl": [248, 251, 341, 470, 472, 481], "open_resourc": [248, 251], "resource_path": [248, 251], "is_resourc": [248, 250, 251, 471, 472], "priori": [248, 251], "as_fil": [248, 250, 251, 472, 481], "iterdir": [248, 250, 251, 294, 420, 481], "is_dir": [248, 251, 291, 294, 420, 477, 479, 481], "is_fil": [248, 250, 251, 291, 294, 420, 476, 479, 481], "joinpath": [248, 250, 251, 294, 420, 481], "read_byt": [248, 250, 251, 276, 294, 420, 476, 481], "read_text": [248, 249, 250, 251, 256, 294, 420, 471, 472, 476, 481], "source_suffix": [248, 472], "debug_bytecode_suffix": 248, "bytecode_suffix": [248, 472], "optimized_bytecode_suffix": 248, "extension_suffix": [248, 472], "all_suffix": [248, 253], "getmodulenam": [248, 253, 477], "builtinimport": [248, 281, 470, 471, 477, 481], "allevi": [248, 460], "frozenimport": [248, 470, 471, 475, 481], "windowsregistryfind": [248, 459, 470, 471, 477, 481], "filefind": [248, 300, 470, 471, 474, 481], "loader_detail": 248, "sourcelessfileload": [248, 474, 477], "extensionfileload": [248, 474, 475, 477], "namespaceload": [248, 475, 481], "path_find": 248, "my_namespac": 248, "loader_st": [248, 481], "submodule_search_loc": [248, 250, 430], "has_loc": [248, 430], "magic_numb": [248, 472, 475], "cache_from_sourc": [248, 472, 473, 475, 476, 477], "debug_overrid": [248, 476], "get_tag": [248, 472, 473], "decode_sourc": [248, 475], "source_byt": 248, "resolve_nam": [248, 300, 480, 481], "module_from_spec": [248, 383, 472, 476, 481], "spec_from_file_loc": [248, 472, 477], "source_hash": [248, 478, 481], "_incompatible_extension_module_restrict": [248, 481], "disable_check": [248, 481], "lazyload": [248, 476, 477, 481], "lazy_load": 248, "file_path": 248, "lazy_import": 248, "lazy_typ": 248, "spammetapathfind": 248, "spampathentryfind": 248, "absolute_nam": 248, "parent_nam": 248, "child_nam": 248, "rpartit": [248, 342, 465, 467, 473, 481], "parent_modul": 248, "pkg_resourc": [249, 250, 472, 481], "discover": [249, 310, 459, 475, 481], "dist": [249, 268, 273, 294, 382, 465, 473, 476, 479, 481], "package_distribut": 249, "importlib_metadata": [249, 470, 480, 481], "entrypoint": [249, 338, 470, 472, 481], "console_script": 249, "entry_point": [249, 481], "eps": 249, "setup_keyword": [249, 463], "egg_info": 249, "0x103528488": 249, "entry_points_select": 249, "wheel_metadata": 249, "packagemetadata": [249, 481], "566": [249, 481], "requires_python": [249, 305], "quickest": 249, "packagepath": [249, 479], "purepath": [249, 291, 294, 470, 471, 472, 480, 481], "859": 249, "_hook": 249, "pathdistribut": [249, 481], "0x101e0cef0": 249, "filehash": 249, "bykw5omccfazvcoyqwkkkemovymafor34mmkbx8r1ni": 249, "text_typ": 249, "posixpath": [249, 292, 294, 481], "gustav": 249, "always_iter": 249, "pytest": [249, 386], "cov": 249, "packages_distribut": [249, 470, 481], "pyyaml": [249, 467, 469], "jaraco": 249, "find_distribut": 249, "distributionfind": 249, "pycach": [250, 350], "akin": [250, 342, 430], "importlib_resourc": [250, 478, 480, 481], "open_binari": [250, 471, 472], "binaryio": [250, 384, 481], "open_text": [250, 471, 472], "textio": [250, 384, 481], "read_binari": [250, 471, 472, 481], "getmemb": [253, 356, 476, 481], "set_coroutine_origin_tracking_depth": [253, 350, 448, 478, 481], "__code__": [253, 342, 426, 468, 479, 481], "__defaults__": [253, 426, 468, 481], "__kwdefaults__": [253, 426, 475], "tb_frame": [253, 383, 426, 481], "tb_lasti": [253, 383, 426], "tb_lineno": [253, 379, 383, 426], "tb_next": [253, 379, 383, 426, 478, 481], "f_back": [253, 379, 426, 471, 481], "f_code": [253, 379, 426, 463, 471, 481], "f_lineno": [253, 426, 463, 470, 471, 477, 481], "f_trace": [253, 350, 426, 471, 481], "co_argcount": [253, 426, 481], "co_flag": [253, 426, 481], "co_": [253, 481], "co_posonlyargcount": [253, 426, 479, 481], "co_kwonlyargcount": [253, 426], "co_nloc": [253, 426], "co_stacks": [253, 426], "gi_fram": [253, 465, 481], "gi_run": 253, "gi_cod": [253, 466, 476, 481], "gi_yieldfrom": [253, 476, 481], "cr_await": [253, 481], "cr_frame": [253, 481], "cr_run": 253, "cr_code": 253, "cr_origin": [253, 350, 481], "getmembers_stat": [253, 471, 481], "ismodul": 253, "isclass": [253, 426], "ismethod": 253, "isfunct": 253, "isgeneratorfunct": [253, 466, 481], "isgener": [253, 466], "iscoroutinefunct": [253, 387, 472, 476, 481], "markcoroutinefunct": [253, 472, 481], "gen_coro": 253, "isasyncgenfunct": [253, 481], "agen": [253, 428], "isasyncgen": 253, "istraceback": 253, "isfram": 253, "iscod": 253, "isbuiltin": 253, "ismethodwrapp": [253, 471, 481], "methodwrappertyp": [253, 383, 471, 478, 481], "isroutin": [253, 481], "isabstract": [253, 466, 481], "ismethoddescriptor": 253, "isdatadescriptor": [253, 481], "isgetsetdescriptor": 253, "ismemberdescriptor": 253, "getdoc": [253, 426, 476, 479, 481], "getcom": [253, 311], "getfil": [253, 481], "getmodul": [253, 481], "getsourcefil": [253, 481], "getsourcelin": [253, 481], "getsourc": [253, 481], "follow_wrap": [253, 476, 481], "eval_str": 253, "__signature__": [253, 475, 481], "unwrap": [253, 339, 392, 475, 481], "return_annot": 253, "boundargu": [253, 474, 476, 480, 481], "bind_parti": 253, "omiss": [253, 312, 335, 481], "new_sig": 253, "anno": 253, "from_cal": [253, 470, 471, 476, 481], "mysignatur": 253, "implicit0": [253, 477, 481], "keyword_on": 253, "positional_on": 253, "var_posit": 253, "var_keyword": 253, "apply_default": [253, 476, 481], "getclasstre": 253, "getfullargspec": [253, 311, 471, 475, 476, 477, 481], "fullargspec": 253, "varkw": 253, "kwonlydefault": 253, "getargspec": [253, 471, 475, 476, 477, 481], "getargvalu": [253, 476], "arginfo": 253, "formatargvalu": [253, 476], "formatarg": 253, "formatvararg": 253, "formatvarkw": 253, "formatvalu": 253, "getmro": 253, "getcallarg": [253, 467, 476, 481], "getclosurevar": [253, 474], "closurevar": 253, "conting": 253, "frameinfo": [253, 471], "code_context": 253, "lifespan": 253, "handle_stackframe_without_leak": 253, "currentfram": [253, 471], "getframeinfo": [253, 471, 481], "getouterfram": [253, 471, 476, 481], "outermost": [253, 342, 363, 481], "getinnerfram": [253, 471, 476, 481], "getattr_stat": [253, 384, 472, 473, 481], "_foo": 253, "slot_descriptor": 253, "getset_descriptor": 253, "wrapper_descriptor": [253, 464], "descriptor_typ": 253, "getgeneratorst": [253, 473, 481], "gen_creat": [253, 473], "gen_run": 253, "gen_suspend": [253, 473], "gen_clos": [253, 473], "getcoroutinest": [253, 476, 481], "coro_cr": 253, "coro_run": 253, "coro_suspend": 253, "coro_clos": 253, "getasyncgenst": [253, 472, 481], "ag_run": [253, 480, 481], "ag_fram": 253, "agen_cr": 253, "agen_run": 253, "agen_suspend": 253, "agen_clos": 253, "getgeneratorloc": [253, 474], "getcoroutineloc": [253, 476, 481], "getasyncgenloc": [253, 472, 481], "co_optim": 253, "co_newloc": 253, "co_vararg": 253, "co_varkeyword": 253, "co_nest": 253, "co_gener": [253, 481], "co_coroutin": [253, 479, 481], "co_async_gener": 253, "bufferflag": [253, 426, 472], "c_contigu": [253, 342], "f_contigu": [253, 342], "any_contigu": 253, "contig_ro": 253, "strided_ro": 253, "records_ro": 253, "full_ro": 253, "glibc": [255, 257, 291, 320, 471, 475, 479, 480, 481], "sandbox": [255, 322, 350, 481], "sdk": [255, 454, 480, 481], "wasm": [255, 454, 481], "nodej": 255, "wasmtim": [255, 481], "pyodid": [255, 471, 481], "pyscript": 255, "xmlhttprequest": 255, "markdown": [256, 470], "md": 256, "long_descript": 256, "686": [256, 291], "597": [256, 470, 481], "pythonwarndefaultencod": [256, 453, 470, 481], "text_encod": [256, 481], "blksize": [256, 405], "unsupportedoper": [256, 481], "bufferedrwpair": [256, 466, 481], "readal": [256, 470, 475, 481], "readinto1": [256, 476], "seek_": 256, "seek_hol": [256, 291, 474], "seek_data": [256, 291, 474], "immin": 256, "latenc": [256, 267, 291, 439, 467, 470, 477], "initial_byt": 256, "getbuff": [256, 473, 481], "ab56ef": 256, "buffer_s": [256, 312, 466], "line_buff": 256, "nsecond": [256, 447], "incrementalnewlinedecod": [256, 481], "reconstruct": [256, 297, 305, 376, 405, 481], "subnet": [257, 474, 476, 481], "downsid": [257, 459, 474, 478], "3232235521": [257, 343], "xc0": [257, 462], "xa8": 257, "max_prefixlen": 257, "reverse_point": [257, 476, 481], "arpa": [257, 357, 476], "ip6": [257, 476], "is_multicast": [257, 481], "multicast": [257, 335, 360, 396, 481], "3171": 257, "2373": 257, "is_priv": [257, 481], "is_glob": [257, 349, 475, 481], "is_unspecifi": 257, "5735": 257, "is_reserv": [257, 294, 481], "is_loopback": 257, "3330": 257, "is_link_loc": 257, "3927": 257, "0b11000000101010000000000000000001": 257, "2001_0db8_0000_0000_0000_0000_0000_1000": 257, "_n": 257, "0x2001_0db8_0000_0000_0000_0000_0000_1000": 257, "longhand": 257, "4291": [257, 481], "0abc": 257, "0007": 257, "0def": 257, "scope_id": [257, 335, 480, 481], "4007": 257, "fe80": 257, "ff02": 257, "5678": [257, 396], "is_site_loc": 257, "3879": 257, "4193": 257, "ipv4_map": 257, "sixtofour": 257, "6to4": 257, "3056": 257, "teredo": 257, "4380": 257, "nbit": 257, "ff00": 257, "cisco": [257, 481], "network_address": 257, "broadcast_address": 257, "with_prefixlen": 257, "with_netmask": 257, "with_hostmask": 257, "prefixlen": 257, "wholli": [257, 411], "address_exclud": 257, "n1": 257, "n2": 257, "prefixlen_diff": 257, "new_prefix": 257, "supernet": [257, 476], "subnet_of": [257, 478, 481], "supernet_of": [257, 478], "compare_network": 257, "db00": 257, "anycast": 257, "v4_int_to_pack": 257, "v6_int_to_pack": 257, "summarize_address_rang": [257, 476, 481], "ipaddr": 257, "collapse_address": [257, 476, 481], "get_mixed_type_key": 257, "sortabl": [257, 267], "apl": [259, 469, 473], "sml": 259, "recast": [259, 473], "algebra": [259, 466, 481], "tabul": [259, 342, 409], "vector": [259, 273, 346, 382, 384, 407, 472, 481], "vec1": 259, "vec2": [259, 384], "p0": 259, "plast": 259, "p_n": 259, "abcdefg": [259, 289, 471, 481], "q0": 259, "q1": 259, "from_iter": [259, 466, 481], "pred": [259, 397], "pairwis": [259, 382, 470, 481], "it1": 259, "it2": 259, "itn": [259, 481], "fillvalu": [259, 319, 466, 481], "ax": 259, "ad": [259, 424, 463], "bd": 259, "addabl": 259, "110": [259, 303, 341, 343, 439], "amort": 259, "1296": 259, "loan": 259, "annual": [259, 480], "account_upd": 259, "bal": 259, "pmt": 259, "1_000": [259, 481], "960": [259, 481], "918": 259, "874": 259, "828": 259, "779": [259, 380], "728": [259, 302], "674": 259, "559": 259, "497": 259, "flattened_data": 259, "violet": [259, 382], "unflatten": 259, "013": 259, "023": 259, "uniq": [259, 464], "uniquekey": 259, "aaaabbbccdaabbb": 259, "aaaabbbccd": 259, "aaaa": [259, 317, 467], "bbb": 259, "tgtkey": 259, "currkey": 259, "currvalu": 259, "_grouper": 259, "nexti": 259, "021": 259, "210": 259, "odomet": 259, "ay": [259, 317], "bx": 259, "cy": 259, "dx": [259, 341], "dy": 259, "011": 259, "prod": [259, 273, 479, 481], "mydequ": 259, "newval": 259, "uneven": 259, "num_act": 259, "incub": 259, "sliding_window": 259, "iter_index": 259, "superior": 259, "repeatfunc": 259, "list_of_list": 259, "ncycl": 259, "all_equ": 259, "first_tru": 259, "unique_everseen": 259, "abbccad": 259, "unique_justseen": 259, "aabcadeaf": 259, "seq_index": 259, "cdef": 259, "defg": 259, "grouper": 259, "gxx": 259, "sakki": [259, 467], "partit": [259, 330, 335, 342, 465, 476, 479, 481], "is_odd": 259, "subslic": 259, "getitem": [259, 289, 388, 462], "iter_except": 259, "before_and_aft": 259, "abcdefghi": 259, "all_upp": 259, "true_iter": 259, "powerset": 259, "sum_of_squar": 259, "1400": 259, "sumprod": [259, 273, 472, 481], "reshap": 259, "matmul": [259, 289, 476, 481], "m2": [259, 462, 467, 471, 474], "matric": [259, 286, 461], "convolv": 259, "convolut": 259, "betterexplain": 259, "kuxjwb4lzsa": 259, "padded_sign": 259, "windowed_sign": 259, "polynomial_from_root": 259, "4x": [259, 290, 472, 474, 475, 477, 481], "17x": [259, 470, 481], "polynomial_ev": 259, "stabil": [259, 471, 481], "horner": 259, "polynomial_deriv": 259, "3x": [259, 475, 481], "8x": [259, 481], "siev": 259, "isqrt": [259, 273, 479, 481], "1_000_000_000_000_007": 259, "360620266859": 259, "1_000_000_000_000_403": 259, "1000000000000403": 259, "totient": 259, "coprim": [259, 342], "mathworld": 259, "wolfram": 259, "totientfunct": 259, "7159": [260, 476, 481], "4627": [260, 481], "ecma": 260, "sort_key": [260, 302, 473], "x08ar": 260, "as_complex": 260, "dct": 260, "object_hook": [260, 481], "parse_float": [260, 377], "complexencod": 260, "unord": [260, 281, 342, 426], "skipkey": [260, 302, 481], "ensure_ascii": [260, 476, 481], "check_circular": 260, "allow_nan": [260, 481], "item_separ": 260, "key_separ": 260, "parse_int": 260, "parse_const": 260, "object_pairs_hook": [260, 467, 469], "num_str": [260, 377], "jsondecod": [260, 467, 477, 481], "deseri": [260, 282, 297, 338, 423, 444, 467, 471, 475, 477, 481], "raw_decod": [260, 481], "extran": [260, 306, 367, 481], "bigobject": 260, "colno": [260, 317, 476], "forbid": [260, 297, 339, 342, 371, 467, 481], "unpair": 260, "weird_json": 260, "object_parts_hook": 260, "voluntarili": [260, 291], "mp_film": 260, "1971": [260, 338, 341], "holi": [260, 338, 343, 440], "grail": [260, 338, 401, 440, 472, 481], "2028": 260, "2029": 260, "ecmascript": [260, 408], "iskeyword": [261, 342], "issoftkeyword": 261, "softkwlist": 261, "detect_encod": [263, 376], "getlin": [263, 380, 476, 481], "module_glob": [263, 398, 481], "clearcach": 263, "checkcach": [263, 481], "lazycach": [263, 476, 481], "_local": [264, 480, 481], "localeconv": [264, 342, 450, 477, 478, 481], "lc_numer": [264, 342, 476, 477, 478, 481], "decimal_point": [264, 342, 481], "thousands_sep": [264, 342, 481], "char_max": 264, "lc_monetari": [264, 481], "int_curr_symbol": 264, "currency_symbol": [264, 450], "p_cs_preced": 264, "n_cs_preced": 264, "p_sep_by_spac": 264, "n_sep_by_spac": 264, "mon_decimal_point": 264, "frac_digit": [264, 450], "int_frac_digit": 264, "mon_thousands_sep": 264, "mon_group": 264, "positive_sign": 264, "negative_sign": 264, "p_sign_posn": 264, "n_sign_posn": 264, "d_t_fmt": 264, "d_fmt": 264, "t_fmt": 264, "t_fmt_ampm": 264, "day_2": 264, "day_3": 264, "day_4": 264, "day_5": 264, "day_6": 264, "day_7": 264, "abday_1": 264, "abday_2": 264, "abday_3": 264, "abday_4": 264, "abday_5": 264, "abday_6": 264, "abday_7": 264, "mon_1": 264, "mon_2": 264, "mon_3": 264, "mon_4": 264, "mon_5": 264, "mon_6": 264, "mon_7": 264, "mon_8": 264, "mon_9": 264, "mon_10": 264, "mon_11": 264, "mon_12": 264, "abmon_1": 264, "abmon_2": 264, "abmon_3": 264, "abmon_4": 264, "abmon_5": 264, "abmon_6": 264, "abmon_7": 264, "abmon_8": 264, "abmon_9": 264, "abmon_10": 264, "abmon_11": 264, "abmon_12": 264, "radixchar": 264, "thousep": 264, "yesexpr": 264, "noexpr": 264, "crncystr": 264, "era": [264, 465], "emperor": 264, "reign": 264, "era_d_t_fmt": 264, "era_d_fmt": 264, "era_t_fmt": 264, "alt_digit": 264, "getdefaultlocal": [264, 453, 471, 472, 481], "envvar": [264, 360, 393], "1766": 264, "getlocal": [264, 471, 481], "lc_": 264, "do_setlocal": [264, 291], "localenam": 264, "resetlocal": [264, 471, 472, 481], "string1": [264, 338, 440], "string2": [264, 338, 440], "lc_collat": 264, "format_str": [264, 343, 450, 465, 472, 476, 478, 481], "deloc": [264, 476, 481], "atof": [264, 464, 465], "ssh": [264, 286, 329, 330, 392, 481], "pyctyp": [264, 470, 481], "py_tolow": [264, 467], "loc": 264, "xe4n": 264, "umlaut": 264, "bind_textdomain_codeset": [264, 464, 471, 479], "grip": [265, 374], "geteffectivelevel": 265, "getchild": [265, 467], "getchildren": [265, 467, 473, 479, 480, 481], "stack_info": [265, 481], "clientip": 265, "fblogg": 265, "hdlr": 265, "findcal": 265, "lno": 265, "sinfo": 265, "hashandl": 265, "createlock": [265, 267], "tidi": [265, 386, 463, 465, 466, 481], "emiss": [265, 360, 481], "formattim": 265, "preparatori": 265, "formatstack": 265, "uuu": 265, "default_time_format": 265, "default_msec_format": 265, "print_except": [265, 267, 379, 470, 481], "linefmt": 265, "formathead": 265, "formatfoot": 265, "footer": [265, 339, 481], "pertin": [265, 323], "tracebacktyp": [265, 379, 383, 426, 478, 481], "msec": [265, 365, 476], "0f": [265, 473, 481], "004": 265, "896": [265, 341], "la": [265, 465, 471], "tasknam": [265, 481], "_log": 265, "entrant": [265, 481], "getloggerclass": 265, "throttl": 265, "28524": 265, "addlevelnam": 265, "getlevelnamesmap": [265, 471, 481], "reinstat": [265, 481], "gethandlerbynam": [265, 266, 481], "gethandlernam": [265, 481], "attrdict": [265, 481], "reconstitut": [265, 297], "klass": 265, "capturewarn": [265, 398], "formatwarn": [265, 398, 466, 481], "inabl": [266, 291, 424], "dictconfigur": 266, "dictconfigclass": 266, "uncustom": 266, "default_logging_config_port": 266, "decrypt": [266, 339, 420], "victim": 266, "customis": [266, 382], "allow_foo": 266, "logconfig": 266, "compel": [266, 467], "customformatterfactori": 266, "_after_": 266, "my_app": 266, "tld": 266, "support_team": 266, "dev_team": 266, "houston": 266, "mykey": 266, "config_dict": 266, "baseconfigur": 266, "qhand": 266, "queue_factori": 266, "customlisten": 266, "hand_name_1": 266, "hand_name_2": 266, "log01": 266, "logger_log01": 266, "hand01": 266, "handler_hand01": 266, "form01": 266, "formatter_form01": 266, "log02": 266, "log03": 266, "log04": 266, "log05": 266, "log06": 266, "log07": 266, "hand02": 266, "hand03": 266, "hand04": 266, "hand05": 266, "hand06": 266, "hand07": 266, "hand08": 266, "hand09": 266, "form02": 266, "form03": 266, "form04": 266, "form05": 266, "form06": 266, "form07": 266, "form08": 266, "form09": 266, "logger_pars": 266, "exemplifi": 266, "_defaultformatt": 266, "handler_hand02": 266, "handler_hand03": 266, "handler_hand04": 266, "default_udp_logging_port": 266, "handler_hand05": 266, "syslog_udp_port": [266, 267], "log_us": [266, 267, 354], "handler_hand06": 266, "handler_hand07": 266, "user1": [266, 471], "user2": [266, 471], "handler_hand08": 266, "handler_hand09": 266, "9022": 266, "typifi": 266, "customfield": 266, "setstream": [267, 279, 478, 481], "42378": [267, 481], "newsyslog": 267, "logrot": 267, "inod": [267, 291, 340, 481], "st_ino": [267, 291, 340, 472, 481], "reopenifneed": [267, 477], "precursor": 267, "rotation_filenam": 267, "rollov": [267, 358, 475, 481], "getfilestodelet": 267, "default_nam": [267, 426], "predetermin": 267, "dorollov": 267, "attim": [267, 475], "w0": 267, "w6": 267, "w1": [267, 438], "d_": 267, "makesocket": 267, "record_attr_dict": 267, "datalen": 267, "createsocket": [267, 471, 481], "retrystart": 267, "retryfactor": 267, "retrymax": 267, "rsyslog": 267, "monterey": [267, 481], "gh": [267, 282, 317, 346, 384, 454, 466, 470, 471, 472, 477, 478, 479, 480, 481], "91070": 267, "12168": 267, "append_nul": [267, 474], "12419": 267, "encodeprior": 267, "log_": 267, "log_alert": [267, 354], "crit": 267, "log_crit": [267, 354], "log_debug": [267, 354], "emerg": [267, 460], "panic": [267, 463], "log_emerg": [267, 354], "log_err": [267, 354], "log_info": [267, 354], "log_notic": [267, 354], "log_warn": [267, 354], "log_auth": [267, 354], "authpriv": 267, "log_authpriv": [267, 354], "cron": 267, "log_cron": [267, 354], "log_daemon": [267, 354], "log_ftp": 267, "kern": 267, "log_kern": [267, 354], "lpr": 267, "log_lpr": [267, 354], "log_mail": [267, 354], "log_new": [267, 354], "log_syslog": [267, 354], "uucp": 267, "log_uucp": [267, 354], "local0": 267, "log_local0": [267, 354], "local1": 267, "log_local1": 267, "local2": 267, "log_local2": 267, "local3": 267, "log_local3": 267, "local4": 267, "log_local4": 267, "local5": 267, "log_local5": 267, "local6": 267, "log_local6": 267, "local7": 267, "log_local7": [267, 354], "mapprior": 267, "hammond": [267, 459, 460, 462, 463, 474, 481], "dllname": [267, 479], "logtyp": 267, "win32servic": 267, "slimmer": 267, "geteventcategori": 267, "geteventtyp": 267, "getmessageid": 267, "credenti": [267, 286, 335, 393, 459, 476, 481], "getsubject": 267, "shouldflush": 267, "flushonclos": [267, 481], "settarget": [267, 481], "maplogrecord": 267, "enqueue_sentinel": 267, "lzmafil": [268, 475, 481], "lzmaerror": 268, "preset": [268, 295, 356, 481], "lzmadecompressor": [268, 476, 481], "lzmacompressor": [268, 481], "format_xz": 268, "format_alon": [268, 481], "format_raw": 268, "format_auto": 268, "check_non": 268, "check_crc32": 268, "check_crc64": 268, "check_sha256": 268, "preset_extrem": 268, "preset_default": 268, "memlimit": 268, "check_unknown": 268, "is_check_support": 268, "liblzma": [268, 471], "filter_lzma1": 268, "filter_lzma2": 268, "filter_delta": 268, "bcj": [268, 481], "filter_x86": 268, "filter_ia64": 268, "filter_arm": 268, "filter_armthumb": 268, "filter_powerpc": 268, "filter_sparc": 268, "dict_siz": 268, "lc": 268, "mode_fast": 268, "mode_norm": 268, "nice_len": 268, "mf": 268, "mf_hc3": 268, "mf_hc4": 268, "mf_bt2": 268, "mf_bt3": 268, "mf_bt4": 268, "start_offset": 268, "data_in": 268, "data_out": 268, "lzc": 268, "out1": 268, "out2": 268, "out3": 268, "out4": 268, "lzf": 268, "my_filt": 268, "maildir": [269, 465, 467, 481], "noteworthi": [269, 460, 461], "get_messag": 269, "get_byt": [269, 473], "get_str": [269, 473, 481], "get_fil": [269, 473], "advisori": [269, 426, 453, 460, 481], "externalclasherror": 269, "qmail": 269, "courier": [269, 367, 370, 481], "exclam": [269, 295, 343, 374, 375, 404, 433], "list_fold": 269, "get_fold": 269, "nosuchmailboxerror": 269, "add_fold": 269, "remove_fold": 269, "notemptyerror": 269, "deserv": [269, 460], "remark": [269, 382, 388, 460, 464, 481], "inventor": 269, "perceiv": 269, "shortcom": [269, 463], "mboxo": 269, "mh_sequenc": 269, "mh_profil": 269, "get_sequ": 269, "set_sequ": 269, "nmh": 269, "gpl": [269, 424, 462], "rmail": 269, "037": 269, "014": 269, "abridg": 269, "attract": [269, 466, 468], "get_label": 269, "multichannel": 269, "memorandum": 269, "newsread": 269, "insofar": [269, 434], "composit": [269, 350, 374, 385, 430, 481], "bounc": [269, 460], "get_subdir": 269, "get_flag": 269, "set_subdir": 269, "set_flag": 269, "add_flag": 269, "remove_flag": 269, "set_dat": 269, "get_info": 269, "set_info": 269, "unseen": 269, "mua": [269, 339, 478], "get_from": 269, "set_from": 269, "time_": 269, "add_sequ": 269, "remove_sequ": 269, "set_label": 269, "add_label": 269, "remove_label": 269, "get_vis": 269, "set_vis": 269, "update_vis": 269, "list_nam": 269, "list_id": 269, "mpeg": 270, "xmpeg": 270, "1524": 270, "multimedia": [270, 293], "findmatch": 270, "cap": [270, 481], "showparti": 270, "getcap": [270, 286], "tmp1223": 270, "unmarsh": [272, 471], "comb": [273, 341, 440, 471, 479, 481], "copysign": [273, 466, 481], "fab": 273, "fmod": [273, 428], "frexp": 273, "mantissa": [273, 316, 464, 466], "lcm": [273, 480, 481], "ldexp": [273, 316, 481], "modf": 273, "nextaft": [273, 472, 480, 481], "ulp": [273, 316, 350, 466, 480, 481], "halfway": [273, 468], "trunc": [273, 287, 342, 426, 466, 481], "denorm": [273, 350, 481], "epsilon": [273, 350, 466], "cbrt": [273, 341, 471, 481], "cube": [273, 341, 447, 481], "718281": 273, "exp2": [273, 471, 481], "expm1": [273, 467, 473, 481], "0000050000069649e": 273, "0000050000166668e": 273, "log1p": [273, 466, 481], "log2": [273, 473, 474], "bit_length": [273, 316, 342, 467, 469], "quadrant": 273, "euclidean": [273, 479, 481], "qx": 273, "norm": [273, 481], "hypotenus": 273, "triangl": [273, 382], "pythagorean": 273, "theorem": [273, 341, 342], "hyperbola": 273, "erfc": [273, 467, 473, 478, 481], "complementari": [273, 316, 406, 467, 473], "gamma": [273, 316, 467, 473], "lgamma": [273, 467, 473], "141592": 273, "283185": 273, "circumfer": 273, "vi": [273, 318], "hart": 273, "celebr": 273, "pie": [273, 338], "guess_all_extens": [274, 481], "knownfil": 274, "rebuilt": [274, 474, 476, 481], "read_mime_typ": [274, 481], "add_typ": 274, "suffix_map": 274, "recognit": 274, "tgz": [274, 458], "encodings_map": [274, 481], "types_map": [274, 466, 481], "common_typ": 274, "types_map_inv": 274, "read_windows_registri": 274, "access_read": 276, "access_writ": 276, "access_copi": 276, "access_default": [276, 481], "prot": 276, "tagnam": [276, 374, 408, 409, 410, 481], "allocationgranular": 276, "map_shar": 276, "prot_writ": 276, "prot_read": 276, "map_priv": 276, "lieu": [276, 424], "pages": 276, "madvis": [276, 479, 481], "advic": [276, 291, 459, 472, 481], "pagefil": 276, "write_byt": [276, 294, 476, 481], "madv_norm": 276, "madv_random": 276, "madv_sequenti": 276, "madv_willne": 276, "madv_dontne": 276, "madv_remov": 276, "madv_dontfork": 276, "madv_dofork": 276, "madv_hwpoison": 276, "madv_merg": 276, "madv_unmerg": 276, "madv_soft_offlin": 276, "madv_hugepag": 276, "madv_nohugepag": 276, "madv_dontdump": 276, "madv_dodump": 276, "madv_fre": 276, "madv_nosync": 276, "madv_autosync": 276, "madv_nocor": 276, "madv_cor": 276, "madv_protect": 276, "madv_free_reus": 276, "map_denywrit": 276, "map_execut": 276, "map_anon": 276, "map_anonym": 276, "map_popul": [276, 481], "map_stack": [276, 481], "map_aligned_sup": [276, 481], "map_conc": [276, 481], "addpackagepath": 277, "pkg_name": [277, 360, 380], "replacepackag": 277, "oldnam": 277, "newnam": [277, 450], "replace_path": 277, "run_script": 277, "oldpath": 277, "newpath": 277, "baconhamegg": 277, "globalnam": 277, "badmodul": 277, "_type": 277, "_inverted_registri": 277, "_slotnam": [277, 481], "_compil": [277, 306], "isstr": 277, "_sre": [277, 476, 481], "_optimize_unicod": 277, "_constant": [277, 342, 481], "repeat_on": 277, "makedict": 277, "at_end_lin": 277, "_expand": 277, "_parser": [277, 306], "_patternend": 277, "sre_flag_unicod": 277, "inttyp": [277, 481], "typetyp": 277, "msi": [279, 459, 465, 476, 478, 481], "cabinet": [279, 481], "fcicreat": [279, 481], "cabnam": 279, "mszip": 279, "uuidcreat": 279, "uuidtostr": 279, "opendatabas": [279, 481], "msiopendatabas": 279, "msidbopen_createdirect": 279, "msidbopen_cr": 279, "msidbopen_direct": 279, "msidbopen_readon": 279, "msidbopen_transact": 279, "msidbopen_patchfil": 279, "createrecord": 279, "msicreaterecord": 279, "init_databas": [279, 481], "productnam": 279, "productcod": 279, "productvers": 279, "manufactur": 279, "_validation_record": 279, "add_data": [279, 393, 475], "add_tabl": 279, "add_stream": 279, "_stream": 279, "gen_uuid": 279, "openview": [279, 481], "msidatabaseopenview": 279, "msidatabasecommit": 279, "getsummaryinform": 279, "msigetsummaryinform": 279, "msiclosehandl": 279, "msiviewexecut": 279, "getcolumninfo": 279, "msiviewgetcolumninfo": 279, "msicolinfo_nam": 279, "msicolinfo_typ": 279, "msiviewfetch": 279, "msiviewmodifi": 279, "msimodify_seek": 279, "msimodify_refresh": 279, "msimodify_insert": 279, "msimodify_upd": 279, "msimodify_assign": 279, "msimodify_replac": 279, "msimodify_merg": 279, "msimodify_delet": 279, "msimodify_insert_temporari": 279, "msimodify_valid": 279, "msimodify_validate_new": 279, "msimodify_validate_field": 279, "msimodify_validate_delet": 279, "msiviewclos": 279, "summaryinform": [279, 481], "getproperti": [279, 414, 481], "msisummaryinfogetproperti": 279, "pid_codepag": 279, "pid_titl": 279, "pid_subject": 279, "pid_author": 279, "pid_keyword": 279, "pid_com": 279, "pid_templ": 279, "pid_lastauthor": 279, "pid_revnumb": 279, "pid_lastprint": 279, "pid_create_dtm": 279, "pid_lastsave_dtm": 279, "pid_pagecount": 279, "pid_wordcount": 279, "pid_charcount": 279, "pid_appnam": 279, "pid_secur": 279, "getpropertycount": 279, "msisummaryinfogetpropertycount": 279, "setproperti": [279, 413, 414], "msisummaryinfosetproperti": 279, "msisummaryinfopersist": 279, "getfieldcount": 279, "msirecordgetfieldcount": 279, "getinteg": [279, 466], "setstr": 279, "msirecordsetstr": 279, "msirecordsetstream": 279, "setinteg": 279, "msirecordsetinteg": 279, "cleardata": 279, "msirecordcleardata": 279, "msierror": [279, 481], "basedir": 279, "componentflag": 279, "start_compon": [279, 481], "defaultdir": 279, "keypath": 279, "add_fil": 279, "remove_pyc": 279, "featurecompon": 279, "set_curr": 279, "dlg": 279, "controlev": 279, "eventmap": 279, "controlcondit": 279, "radiobuttongroup": 279, "radio": [279, 373, 481], "control_next": 279, "pushbutton": 279, "next_control": 279, "radiogroup": 279, "radiobutton": [279, 373, 374, 481], "adminexecutesequ": 279, "adminuisequ": 279, "advtexecutesequ": 279, "installexecutesequ": 279, "installuisequ": 279, "uitext": 279, "actiontext": 279, "lk_": 280, "lk_lock": 280, "lk_rlck": 280, "lk_nblck": 280, "lk_nbrlck": 280, "lk_unlck": 280, "setmod": 280, "o_append": [280, 291], "fdopen": [280, 291, 335, 426], "xe0": 280, "keycod": [280, 367], "getwch": [280, 466], "putch": 280, "putwch": [280, 466], "unicode_char": 280, "ungetwch": 280, "heapmin": 280, "crt_assembly_vers": [280, 467], "crtassem": [280, 467], "vc_assembly_publickeytoken": [280, 467], "libraries_assembly_name_prefix": [280, 467], "getppid": [281, 291, 481], "set_start_method": [281, 472, 475], "preload": [281, 454, 481], "33725": [281, 479, 481], "sharedmemori": [281, 282, 481], "reboot": [281, 294, 475], "mp": [281, 463], "duplex": [281, 293], "parent_conn": 281, "child_conn": 281, "liabl": [281, 400, 424], "1415927": 281, "offload": 281, "imap_unord": [281, 481], "apply_async": [281, 466], "multiple_result": 281, "patienc": 281, "poolwork": 281, "semi": [281, 290, 375, 481], "is_al": [281, 363, 466, 480, 481], "orphan": [281, 481], "authkey": [281, 282], "waitforsingleobject": [281, 481], "waitformultipleobject": [281, 481], "processerror": 281, "buffertooshort": 281, "recv_bytes_into": 281, "authenticationerror": 281, "joinablequeu": [281, 476, 481], "infinitesim": 281, "cancel_join_thread": 281, "conn1": 281, "conn2": 281, "feeder": [281, 384, 481], "sem_getvalu": [281, 481], "join_thread": [281, 360, 481], "allow_exit_without_flush": 281, "3770": 281, "active_children": 281, "cpus": [281, 291, 345, 475, 476, 481], "sched_getaffin": [281, 291, 474, 481], "parent_process": [281, 481], "freeze_support": 281, "get_all_start_method": [281, 475, 481], "get_start_method": [281, 475], "allow_non": [281, 417, 418, 463], "set_execut": [281, 481], "set_forkserver_preload": [281, 481], "send_byt": 281, "recv_byt": 281, "arr1": 281, "arr2": 281, "solitari": 281, "indistinguish": [281, 306], "unown": [281, 481], "sem_timedwait": [281, 481], "typecode_or_typ": 281, "get_lock": 281, "size_or_initi": 281, "rawarray": 281, "rawvalu": 281, "get_obj": 281, "875": 281, "375": [281, 341], "1111111111111111": 281, "515625": 281, "0625": [281, 447], "640625": 281, "syncmanag": [281, 481], "basemanag": [281, 282, 481], "shutdown_timeout": [281, 481], "get_serv": 281, "xmlrpclib": [281, 462, 463, 464, 465, 466, 467, 468, 481], "50000": [281, 365], "typeid": [281, 479], "proxytyp": [281, 400, 481], "method_to_typeid": 281, "create_method": 281, "baseproxi": [281, 481], "_callmethod": 281, "_exposed_": 281, "_method_to_typeid_": 281, "_z": 281, "mathsclass": 281, "mymanag": 281, "queuemanag": 281, "get_queu": 281, "listproxi": [281, 481], "l_outer": 281, "d_first_inn": 281, "lproxi": 281, "remoteerror": 281, "_getvalu": 281, "deregist": 281, "maxtasksperchild": [281, 467, 481], "apach": [281, 339, 417, 424, 451, 460, 477, 481], "mod_wsgi": [281, 346], "error_callback": 281, "asyncresult": 281, "chop": [281, 460, 464, 468], "map_async": [281, 466, 474], "lazier": 281, "starmap_async": [281, 474], "outstand": [281, 424], "deliver_challeng": 281, "answer_challeng": 281, "af_pip": 281, "last_accept": 281, "object_list": 281, "waitabl": [281, 291, 326, 364, 471, 481], "1729": 281, "pipenam": 281, "servernam": 281, "get_logg": 281, "log_to_stderr": [281, 481], "doom": [281, 465], "mainprocess": 281, "pymp": 281, "threadpool": [281, 481], "_bootstrap": [281, 380, 481], "collid": [281, 393, 434], "_pid": 281, "5155": 281, "5313": 281, "5331": 281, "_h": 281, "generatorproxi": 281, "get_operator_modul": 281, "foo1": [281, 317], "foo2": [281, 317], "94": [281, 316, 467], "calculatestar": 281, "pow3": 281, "imap_it": 281, "imap_unordered_it": 281, "tgot": 281, "imapiter": 281, "applyresult": 281, "number_of_process": 281, "tasks1": 281, "tasks2": 281, "done_queu": 281, "smp": 282, "sharedmemorymanag": [282, 481], "shm_a": 282, "shm_b": 282, "howdi": 282, "ndarray": 282, "np": [282, 474], "shm": [282, 481], "dtype": [282, 384], "psm_21467_46075": 282, "existing_shm": 282, "int64": 282, "888": 282, "shareablelist": [282, 481], "smm": 282, "psm_6572_7512": 282, "raw_shm": 282, "another_sl": 282, "psm_6572_12221": 282, "do_work": [282, 291], "total_result": 282, "10m": 282, "106939": 282, "nul_bug_demo": 282, "deserialized_sl": 282, "netrcparseerror": 284, "mapnam": 285, "default_domain": 285, "joy": [285, 382], "get_default_domain": 285, "nntlib": 286, "poster": 286, "3977": 286, "2980": 286, "gmane": [286, 474, 481], "committ": [286, 474], "1096": 286, "1087": 286, "1088": 286, "1089": 286, "1090": 286, "1091": 286, "1092": 286, "1093": 286, "1094": 286, "fellow": 286, "240": [286, 382], "119": [286, 341, 380, 479], "readermod": 286, "usenetrc": 286, "authinfo": 286, "nntppermanenterror": 286, "1755": [286, 474], "nntp_ssl": [286, 473, 480, 481], "nntps": 286, "4642": 286, "nntperror": [286, 481], "nntpreplyerror": 286, "nntptemporaryerror": 286, "nntpprotocolerror": 286, "nntpdataerror": 286, "nntp_version": 286, "nntp_implement": 286, "disclaim": [286, 347, 424], "newgroup": 286, "groupinfo": 286, "tor": 286, "newnew": 286, "group_pattern": [286, 425, 429], "offlin": [286, 380, 459], "grouppattern": 286, "wildmat": 286, "295": [286, 472, 481], "biopython": 286, "elid": 286, "message_spec": 286, "xover": 286, "article_numb": 286, "art_num": 286, "117216": 286, "xref": 286, "ik1hcnrpbib2libmw7z3axmi": 286, "loewi": 286, "message_id": 286, "9099": 286, "20030112190404": 286, "ge29873": 286, "metaslash": 286, "neal": [286, 463, 465, 466], "norwitz": [286, 463, 465, 466], "ihav": 286, "slave": [286, 291, 307, 367, 481], "xhdr": 286, "hdr": 286, "header_str": 286, "e9buter_en_python": 286, "buter": 286, "chjvymzdqg1ligrlig1hdhjpy2u": 286, "probl": 286, "myfoo": 287, "myintegr": 287, "do_my_adding_stuff": 287, "othertypeiknowabout": 287, "do_my_other_adding_stuff": 287, "_operator_fallback": 287, "monomorphic_oper": 287, "fallback_oper": 287, "__r": 287, "_add": 287, "__not__": 289, "inv": [289, 476], "__inv__": 289, "truediv": 289, "66": [289, 387, 440, 461, 466], "__concat__": 289, "countof": [289, 480, 481], "delitem": 289, "indexof": [289, 480, 481], "setitem": [289, 388], "tuppl": 289, "resolve_attr": 289, "cdefg": 289, "soldier": 289, "rank": [289, 341, 411, 472], "captain": [289, 477], "dotterbart": 289, "banana": [289, 342, 440, 449, 469], "pear": [289, 440, 449, 469], "iadd": 289, "iand": 289, "iconcat": 289, "__iconcat__": 289, "ifloordiv": 289, "ilshift": 289, "imod": 289, "imatmul": [289, 476], "ior": 289, "ipow": 289, "irshift": 289, "isub": 289, "itruediv": 289, "ixor": 289, "yourscript": 290, "foutfil": 290, "qfoutfil": 290, "acquaint": 290, "execl": [290, 291], "xf": [290, 438], "pf": [290, 374], "ffoo": 290, "controversi": [290, 462], "contradictori": 290, "hypothet": [290, 335, 460], "whatsoev": [290, 323, 424], "mutant": 290, "oddbal": 290, "humbl": 290, "mission": 290, "overwhelm": 290, "opt_str": 290, "jam": 290, "n42": 290, "vewwi": 290, "wabbit": 290, "novic": 290, "bland": [290, 465, 466], "clue": 290, "optiongroup": 290, "optioncontain": 290, "add_option_group": 290, "get_option_group": 290, "print_vers": 290, "get_vers": 290, "suppress_usag": 290, "option_list": 290, "standard_option_list": 290, "option_class": 290, "indentedhelpformatt": 290, "titledhelpformatt": 290, "add_help_opt": 290, "make_opt": 290, "irrelev": [290, 467, 481], "callback_arg": 290, "callback_kwarg": 290, "suppress_help": 290, "fbar": 290, "mypkg": [290, 386], "check_choic": 290, "poke": 290, "enable_interspersed_arg": 290, "get_opt": 290, "set_conflict_handl": 290, "optionconflicterror": 290, "intellig": [290, 293, 295], "whittl": 290, "set_usag": 290, "get_usag": 290, "overkil": 290, "rarg": 290, "optionvalu": 290, "record_foo_seen": 290, "saw_foo": 290, "check_ord": 290, "moon": 290, "check_moon": 290, "is_moon_ful": 290, "store_valu": 290, "hairi": 290, "intricaci": 290, "stab": 290, "vararg_callback": 290, "floatabl": 290, "vararg_attr": 290, "check_mytyp": 290, "wind": 290, "sillier": 290, "check_complex": 290, "myoption": 290, "store_act": 290, "typed_act": 290, "always_typed_act": 290, "take_act": 290, "ding": [290, 480, 481], "dong": [290, 481], "ensure_valu": 290, "optparse_pars": 290, "valv": 290, "badoptionerror": 290, "ambiguousoptionerror": 290, "threat": 291, "getuid": [291, 481], "inaccess": [291, 393, 426, 460, 463, 475, 481], "unam": [291, 301, 350, 353, 356, 473, 474, 481], "device_encod": [291, 481], "nonsens": [291, 475], "ctermid": 291, "environb": [291, 346, 473, 481], "supports_bytes_environ": [291, 473], "fchdir": [291, 476], "getenvb": [291, 473], "get_exec_path": 291, "getegid": [291, 481], "geteuid": [291, 481], "getgid": [291, 481], "getgrouplist": [291, 474, 481], "getgroup": [291, 481], "setgroup": [291, 346, 481], "macosx_deployment_target": [291, 481], "getpwuid": [291, 308, 481], "getpgid": [291, 463], "getprior": [291, 474], "prio_process": 291, "prio_pgrp": 291, "prio_us": 291, "setprior": [291, 474, 481], "prio_darwin_thread": [291, 481], "prio_darwin_process": [291, 481], "prio_darwin_bg": [291, 481], "prio_darwin_nonui": [291, 481], "getresuid": [291, 467, 481], "ruid": 291, "euid": 291, "suid": 291, "getresgid": [291, 467, 481], "rgid": 291, "egid": 291, "sgid": 291, "initgroup": [291, 467], "setegid": 291, "seteuid": 291, "setgid": [291, 356], "superus": 291, "setn": [291, 481], "nstype": 291, "reassoci": 291, "clone_new": 291, "pidfd_open": [291, 472, 480, 481], "clone_newut": 291, "clone_newpid": 291, "clone_newnet": 291, "unshar": [291, 320, 481], "setpgrp": 291, "setpgid": [291, 346], "pgrp": 291, "setregid": [291, 346], "setresgid": [291, 467], "setresuid": [291, 467], "setreuid": [291, 346], "getsid": [291, 464], "setsid": [291, 346, 481], "setuid": [291, 356], "umask": [291, 294, 346, 360, 478, 481], "sysnam": [291, 301], "nodenam": [291, 301, 408], "disassoci": 291, "clone_": 291, "clone_fil": 291, "clone_f": 291, "clone_newcgroup": 291, "clone_newipc": 291, "clone_newn": 291, "clone_newtim": 291, "clone_newus": 291, "clone_sighand": 291, "clone_sysvsem": 291, "clone_thread": 291, "clone_vm": 291, "decept": [291, 463], "closerang": [291, 466, 481], "fd_low": [291, 481], "fd_high": [291, 481], "copy_file_rang": [291, 481], "offset_src": 291, "offset_dst": 291, "procf": [291, 481], "sysf": 291, "fd2": 291, "fchmod": [291, 466, 476, 481], "fchown": [291, 466, 476], "fdatasync": [291, 476], "filedescriptor": 291, "fpathconf": [291, 481], "95": [291, 312, 316, 341, 380, 463, 466], "98": [291, 335, 342, 403, 466, 467, 473], "pathconf_nam": 291, "pathconf": [291, 474], "fstat": [291, 292, 340, 462, 474, 476, 481], "stat_result": [291, 294, 356, 463, 476, 479, 481], "fstatvf": [291, 462, 476], "statvf": [291, 462, 466, 474, 481], "fsync": [291, 476, 481], "_commit": 291, "get_block": [291, 476, 481], "set_block": [291, 476, 481], "f_lock": [291, 481], "f_tlock": 291, "f_ulock": 291, "f_test": 291, "login_tti": [291, 481], "leader": [291, 329, 481], "lseek": [291, 465, 474], "0o777": [291, 294], "o_wron": [291, 331], "o_rdwr": [291, 331], "o_creat": 291, "o_excl": [291, 358], "o_trunc": 291, "o_dsync": 291, "o_rsync": 291, "o_sync": 291, "o_noctti": 291, "o_cloexec": [291, 474, 481], "o_noinherit": 291, "o_short_liv": 291, "o_temporari": [291, 358], "o_random": 291, "o_sequenti": 291, "o_evton": [291, 470, 481], "o_fsync": [291, 470, 481], "o_symlink": [291, 470, 481], "o_nofollow_ani": [291, 470, 481], "o_async": 291, "o_direct": 291, "o_directori": 291, "o_nofollow": 291, "o_noatim": 291, "o_path": [291, 475, 481], "o_tmpfil": [291, 358, 475, 481], "openpti": [291, 307, 481], "pipe2": [291, 474], "posix_falloc": [291, 474, 476, 481], "posix_fadvis": [291, 474, 476, 481], "posix_fadv_norm": 291, "posix_fadv_sequenti": 291, "posix_fadv_random": 291, "posix_fadv_noreus": 291, "posix_fadv_willne": 291, "posix_fadv_dontne": 291, "pread": [291, 474, 476, 478, 481], "preadv": [291, 478, 481], "rwf_hipri": 291, "rwf_nowait": 291, "sysconf": [291, 335, 481], "sc_iov_max": [291, 335], "readv": [291, 474, 476, 478, 481], "pwrite": [291, 474, 476, 478], "pwritev": [291, 478, 481], "rwf_dsync": 291, "rwf_sync": 291, "rwf_append": [291, 481], "writev": [291, 474, 476, 478, 481], "out_fd": [291, 481], "in_fd": [291, 481], "sf_nodiskio": 291, "sf_mnowait": 291, "sf_sync": 291, "sf_nocach": [291, 481], "splice_f_mov": 291, "splice_f_nonblock": 291, "splice_f_mor": 291, "tcgetpgrp": 291, "tcsetpgrp": 291, "pg": 291, "ttynam": [291, 481], "get_terminal_s": [291, 330, 474, 481], "stdout_fileno": 291, "terminal_s": [291, 330], "close_fd": [291, 346, 464, 473, 478, 479, 481], "get_inherit": [291, 335, 475], "set_inherit": [291, 326, 335, 475, 481], "get_handle_inherit": [291, 475], "set_handle_inherit": [291, 346, 475], "supports_fd": [291, 474], "faccessat": 291, "supports_dir_fd": [291, 474], "supports_follow_symlink": [291, 330], "effective_id": [291, 474], "f_ok": [291, 330], "r_ok": 291, "w_ok": 291, "x_ok": [291, 330, 481], "supports_effective_id": [291, 474], "uf_nodump": [291, 340], "uf_immut": [291, 340, 466], "uf_append": [291, 340, 466], "uf_opaqu": [291, 340], "uf_nounlink": [291, 340], "uf_compress": [291, 340], "uf_hidden": [291, 340], "sf_archiv": [291, 340], "sf_immut": [291, 340], "sf_append": [291, 340], "sf_nounlink": [291, 340], "sf_snapshot": [291, 340], "s_isuid": [291, 340], "s_isgid": [291, 340], "s_enfmt": [291, 340], "s_isvtx": [291, 340], "s_iread": [291, 340], "s_iwrit": [291, 330, 340], "s_iexec": [291, 340], "s_irwxu": [291, 340], "s_irusr": [291, 340, 356], "s_iwusr": [291, 340, 356], "s_ixusr": [291, 340, 356], "s_irwxg": [291, 340], "s_irgrp": [291, 340], "s_iwgrp": [291, 340, 356], "s_ixgrp": [291, 340, 356], "s_irwxo": [291, 340], "s_iroth": [291, 340], "s_iwoth": [291, 340, 356], "s_ixoth": [291, 340, 356], "chroot": [291, 481], "getcwdb": [291, 468, 479, 481], "lchflag": [291, 466], "lchmod": [291, 294, 466, 481], "lchown": [291, 463], "xxxxxxxxxxxx": 291, "lstat": [291, 292, 294, 340, 360, 472, 474, 479, 481], "vista": [291, 481], "repars": [291, 479, 481], "junction": [291, 292, 294, 330, 472, 479, 481], "exist_ok": [291, 294, 476, 481], "21082": [291, 481], "mkfifo": [291, 474, 476, 481], "rendezv": [291, 473], "mknod": [291, 463, 474, 476, 481], "0o600": 291, "s_ifreg": [291, 340], "s_ifchr": [291, 340, 481], "s_ifblk": [291, 340], "s_ififo": [291, 340], "makedev": [291, 463, 481], "st_dev": [291, 340, 472], "st_rdev": [291, 472], "readlink": [291, 294, 474, 479, 480, 481], "realpath": [291, 292, 294, 459, 470, 479, 481], "prune": [291, 294, 481], "direntri": [291, 472, 476, 477, 481], "opendir": [291, 481], "readdir": [291, 476], "findfirstfilew": [291, 481], "findnextfilew": 291, "scandir_path": 291, "s_isdir": [291, 340], "dirent": 291, "d_type": 291, "dt_unknown": 291, "is_symlink": [291, 294, 479, 481], "islink": [291, 292, 294, 479, 481], "is_junct": [291, 294, 472, 481], "isjunct": [291, 292, 472, 481], "st_nlink": [291, 340], "st_ctime": [291, 340, 472], "st_birthtim": [291, 465, 472], "statinfo": 291, "st_mode": [291, 294, 340, 475, 479], "33188": 291, "7876932": 291, "234881026": 291, "st_uid": [291, 340], "st_gid": [291, 340], "st_size": [291, 294, 340, 462], "264": [291, 345, 462], "st_atim": [291, 340], "1297230295": 291, "1297230027": 291, "st_atime_n": 291, "st_mtime_n": 291, "st_ctime_n": 291, "st_birthtime_n": 291, "fat32": [291, 481], "st_block": [291, 481], "st_blksize": 291, "st_flag": [291, 465], "st_gen": [291, 465], "st_fstype": [291, 478, 481], "st_rsize": 291, "st_creator": 291, "st_type": 291, "st_file_attribut": [291, 340, 476, 481], "dwfileattribut": [291, 476], "by_handle_file_inform": [291, 476], "getfileinformationbyhandl": [291, 476], "file_attribute_": 291, "file_attribute_arch": [291, 340], "st_reparse_tag": [291, 340, 479], "file_attribute_reparse_point": [291, 340], "io_reparse_tag_": 291, "f_bsize": 291, "f_frsize": 291, "f_block": 291, "f_bfree": 291, "f_bavail": 291, "f_file": 291, "f_ffree": 291, "f_favail": 291, "f_flag": 291, "f_namemax": 291, "f_fsid": [291, 481], "st_rdon": 291, "st_nosuid": 291, "st_nodev": 291, "st_noexec": 291, "st_synchron": 291, "st_mandlock": 291, "st_write": 291, "st_append": 291, "st_immut": 291, "st_noatim": 291, "st_nodiratim": 291, "st_relatim": 291, "atim": 291, "target_is_directori": [291, 294, 474], "morph": [291, 294], "unprivileg": 291, "secreatesymboliclinkprivileg": 291, "unelev": 291, "atime_n": 291, "mtime_n": 291, "dirpath": [291, 294], "resumpt": [291, 351, 477, 481], "cvs": [291, 460, 461, 462, 463, 464, 465, 481], "dirfd": 291, "rootfd": 291, "mfd_cloexec": 291, "mfd_": 291, "memfd": [291, 481], "mfd_allow_s": 291, "mfd_hugetlb": 291, "mfd_huge_shift": 291, "mfd_huge_mask": 291, "mfd_huge_64kb": 291, "mfd_huge_512kb": 291, "mfd_huge_1mb": 291, "mfd_huge_2mb": 291, "mfd_huge_8mb": 291, "mfd_huge_16mb": 291, "mfd_huge_32mb": 291, "mfd_huge_256mb": 291, "mfd_huge_512mb": 291, "mfd_huge_1gb": 291, "mfd_huge_2gb": 291, "mfd_huge_16gb": 291, "mfd_huge": 291, "eventfd": [291, 470, 481], "initv": 291, "efd_cloexec": [291, 481], "efd_nonblock": [291, 481], "efd_semaphor": [291, 481], "eventfd_read": 291, "eventfd_writ": 291, "efc_cloexec": 291, "xattr_replac": 291, "xattr_creat": 291, "xattr_size_max": 291, "adddlldirectori": 291, "execlp": 291, "execvp": [291, 346], "ex_ok": 291, "exit_success": 291, "ex_usag": 291, "ex_dataerr": 291, "ex_noinput": 291, "ex_nous": 291, "ex_nohost": 291, "ex_unavail": 291, "ex_softwar": 291, "ex_oserr": 291, "ex_osfil": 291, "ex_cantcreat": 291, "ex_ioerr": 291, "ex_tempfail": 291, "retryabl": 291, "ex_protocol": 291, "ex_noperm": 291, "ex_config": 291, "ex_notfound": 291, "cygwin": [291, 350, 358, 459, 461, 463, 479, 481], "surfac": [291, 382, 472], "longstand": [291, 472, 474, 481], "pidfd_nonblock": [291, 472, 481], "waitid": [291, 474, 476, 481], "plock": 291, "waitstatus_to_exitcod": [291, 307, 480, 481], "file_act": [291, 481], "setpgroup": [291, 481], "resetid": [291, 481], "setsigmask": [291, 481], "setsigdef": [291, 481], "posix_spawnp": [291, 481], "posix_spawn_open": 291, "posix_spawn_clos": 291, "posix_spawn_dup2": 291, "new_fd": 291, "posix_spawn_file_actions_addopen": 291, "posix_spawn_file_actions_addclos": 291, "posix_spawn_file_actions_adddup2": 291, "posix_spawn_setpgroup": 291, "posix_spawn_resetid": 291, "posix_spawn_setsid": 291, "posix_spawn_setsid_np": 291, "posix_spawn_setsigmask": 291, "sigdef": 291, "posix_spawn_setsigdef": 291, "sched_param": 291, "posix_spawn_setschedparam": 291, "posix_spawn_setschedul": 291, "after_in_par": 291, "after_in_child": 291, "spawnl": 291, "spawnlp": [291, 346], "spawnv": [291, 481], "spawnvp": [291, 346], "p_nowait": [291, 346], "p_wait": [291, 346], "p_nowaito": 291, "p_detach": 291, "p_overlay": 291, "shellexecut": [291, 481], "normpath": [291, 292, 467, 481], "comspec": [291, 346, 474, 475], "children_us": 291, "children_system": 291, "getprocesstim": 291, "idtyp": 291, "p_pid": 291, "p_pgid": 291, "p_all": 291, "p_pidfd": [291, 480, 481], "wexit": 291, "wstop": 291, "wcontinu": 291, "wnohang": 291, "wnowait": 291, "siginfo_t": [291, 331, 481], "si_pid": [291, 331], "si_uid": [291, 331], "si_signo": [291, 331], "si_status": [291, 331], "si_cod": [291, 331, 480, 481], "cld_exit": 291, "wuntrac": 291, "wait3": [291, 465, 476, 481], "getrusag": [291, 320, 465, 481], "wait4": [291, 465, 476], "cld_kill": [291, 480, 481], "cld_dump": 291, "cld_trap": 291, "cld_stop": [291, 480, 481], "cld_continu": 291, "wifexit": 291, "wexitstatus": 291, "wifsign": 291, "wtermsig": 291, "wifstop": 291, "wstopsig": 291, "wcoredump": 291, "wifcontinu": 291, "sigcont": [291, 331], "ptrace": [291, 481], "sched_oth": 291, "sched_batch": 291, "sched_idl": 291, "sched_sporad": 291, "sched_fifo": 291, "sched_rr": 291, "robin": [291, 411, 440, 479, 481], "sched_reset_on_fork": 291, "sched_prior": 291, "sched_setparam": [291, 474], "sched_setschedul": [291, 474], "sched_getparam": [291, 474], "sched_get_priority_min": [291, 474], "sched_get_priority_max": [291, 474], "sched_getschedul": [291, 474], "sched_rr_get_interv": [291, 474], "quantum": 291, "sched_yield": [291, 474, 481], "sched_setaffin": [291, 474, 481], "confstr": [291, 481], "confstr_nam": 291, "undetermin": 291, "getloadavg": 291, "unobtain": 291, "sysconf_nam": [291, 481], "sc_minsigstksz": [291, 481], "extsep": 291, "defpath": [291, 330, 481], "rtld_lazi": [291, 350, 474], "rtld_nodelet": [291, 474], "rtld_noload": [291, 474], "rtld_deepbind": [291, 474], "setdlopenflag": [291, 350, 448, 462, 474], "getdlopenflag": [291, 350, 448, 462], "getrandom": [291, 476, 477, 481], "entropi": [291, 339, 477, 481], "environment": [291, 393, 453, 481], "unnecessarili": [291, 481], "grnd_random": 291, "grnd_nonblock": [291, 481], "524": [291, 477, 481], "bcryptgenrandom": [291, 471, 481], "systemrandom": [291, 316, 324], "getentropi": [291, 476, 481], "cryptgenrandom": [291, 471, 481], "ntpath": [292, 478, 481], "lexist": [292, 464, 479, 481], "isdir": [292, 294, 300, 356, 479, 481], "ismount": [292, 475, 479, 481], "commonpath": [292, 476, 481], "commonprefix": [292, 476], "userprofil": [292, 479, 481], "homepath": 292, "homedr": 292, "getatim": 292, "getmtim": 292, "getctim": 292, "isab": [292, 294], "getvolumepathnam": 292, "isdevdr": [292, 481], "std": [292, 350, 364, 465, 481], "1003": 292, "relpath": [292, 294, 466, 472, 481], "samefil": [292, 294, 475, 476, 481], "path1": 292, "path2": 292, "sameopenfil": 292, "fp1": 292, "fp2": 292, "samestat": [292, 294, 475], "stat1": 292, "stat2": 292, "splitdriv": [292, 478, 481], "splitroot": [292, 472, 481], "cshrc": [292, 457], "supports_unicode_filenam": [292, 463], "soundcard": 293, "ossaudioerror": 293, "audiodev": [293, 466], "dsp": 293, "player": [293, 317, 343, 382], "linuxaudiodev": [293, 460, 463, 466], "openmix": 293, "mixerdev": 293, "setfmt": 293, "setparamet": 293, "oss_audio_devic": 293, "writeal": 293, "sndctl_dsp_setfmt": 293, "sndctl_dsp_sync": 293, "nonblock": [293, 481], "getfmt": 293, "afmt_mu_law": 293, "afmt_a_law": 293, "afmt_ima_adpcm": 293, "afmt_u8": 293, "afmt_s16_l": 293, "afmt_s16_b": 293, "68k": 293, "powerpc": [293, 464, 465, 466, 481], "afmt_s8": 293, "afmt_u16_l": 293, "afmt_u16_b": 293, "afmt_queri": 293, "monophon": 293, "stereophon": 293, "sampler": 293, "11025": 293, "22050": 293, "96000": 293, "dvd": 293, "obufcount": 293, "obuffre": 293, "oss_mixer_devic": 293, "mixabl": 293, "sound_mixer_pcm": 293, "sound_mixer_synth": 293, "sound_mixer_": 293, "pcm": [293, 399], "sound_mixer_volum": 293, "gravi": 293, "ultrasound": 293, "stereocontrol": 293, "reccontrol": 293, "left_volum": 293, "right_volum": 293, "get_recsrc": 293, "set_recsrc": 293, "microphon": 293, "setrecsrc": 293, "sound_mixer_m": 293, "windowspath": [294, 481], "purewindowspath": [294, 481], "test_pathlib": [294, 481], "pathseg": 294, "pureposixpath": [294, 481], "lib64": [294, 350, 352, 454, 480, 481], "apache2": 294, "an_absolute_path": 294, "stem": [294, 420, 467, 471, 481], "as_posix": 294, "as_uri": 294, "is_absolut": [294, 481], "is_relative_to": [294, 481], "case_sensit": [294, 472, 481], "relative_to": [294, 472, 481], "walk_up": [294, 472, 481], "941": 294, "error_messag": 294, "subpath": [294, 421], "with_nam": [294, 481], "antoin": [294, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "751": 294, "with_stem": [294, 481], "851": 294, "with_suffix": [294, 481], "with_seg": [294, 472, 481], "mypath": 294, "session_id": 294, "798": 294, "is_mount": [294, 478, 479, 481], "is_block_devic": [294, 479, 481], "is_char_devic": [294, 479, 481], "is_fifo": [294, 479, 481], "is_socket": [294, 479, 481], "unrepresent": [294, 479, 481], "956": 294, "1327883547": 294, "852554": 294, "33277": 294, "0o444": 294, "33060": 294, "nonexistentfil": 294, "film": [294, 384], "inordin": 294, "_templat": 294, "_build": 294, "_static": [294, 481], "top_down": 294, "on_error": [294, 384], "mimick": 294, "my_binary_fil": 294, "my_text_fil": 294, "write_text": [294, 476, 481], "mylink": 294, "symlink_to": [294, 470, 479, 481], "other_path": 294, "hardlink_to": [294, 470, 479, 481], "missing_ok": [294, 481], "abnorm": [295, 350, 392, 473], "pdbrc": [295, 471, 473, 477, 480, 481], "nosigint": [295, 473], "readrc": [295, 477, 481], "elp": 295, "hel": 295, "_frame": [295, 481], "_retval": 295, "_except": 295, "reak": 295, "tbreak": 295, "ear": 295, "bpnumber": 295, "some_vari": 295, "tep": 295, "unt": 295, "il": [295, 339, 432], "eturn": 295, "ont": 295, "inu": 295, "ump": 295, "ist": 295, "longlist": 295, "rgs": 295, "whati": [295, 481], "undisplay": [295, 473, 481], "classinst": 295, "ps": [295, 306, 346, 397], "unalia": 295, "list_opt": 295, "uit": 295, "retval": [295, 351, 461], "ecosystem": 297, "tackl": [297, 460], "brought": [297, 463, 481], "3154": [297, 475, 481], "574": [297, 380, 479, 481], "conceiv": [297, 356], "highest_protocol": [297, 463], "default_protocol": [297, 328, 470, 481], "fix_import": [297, 469], "buffer_callback": 297, "therein": 297, "pickleerror": 297, "picklingerror": 297, "unpicklingerror": [297, 481], "picklebuff": [297, 481], "persistent_id": [297, 481], "persistent_load": [297, 481], "reducer_overrid": [297, 479, 481], "superflu": [297, 335, 338, 481], "referenti": 297, "elig": [297, 428, 473], "__getstate__": [297, 387, 463, 471, 481], "picklestr": [297, 298], "worthwhil": [297, 465, 474], "__setstate__": [297, 387, 463, 479, 481], "__getnewargs_ex__": [297, 481], "list_of_item": 297, "sixth": [297, 462, 479], "memorecord": 297, "dbpickler": 297, "dbunpickl": 297, "type_tag": 297, "key_id": 297, "fight": [297, 473], "italian": [297, 382], "disturb": [297, 481], "reduce_someclass": 297, "mypickl": 297, "textread": 297, "endswith": [297, 342, 397, 460, 463, 465, 466, 476, 481], "new_read": 297, "myclass": [297, 426, 438], "my_attribut": 297, "unpickled_class": 297, "massiv": [297, 464, 465, 476, 481], "eschew": 297, "reconstructor": 297, "zerocopybytearray": 297, "_reconstruct": 297, "unseri": [297, 473], "new_b": 297, "nsystem": 297, "ntr": 297, "inoffens": 297, "safe_builtin": 297, "restrictedunpickl": 297, "restricted_load": 297, "cbuiltin": [297, 469], "neval": 297, "4j": [297, 425, 433, 440, 466], "binint1": 298, "tuple2": 298, "binput": [298, 481], "indentlevel": 298, "genop": 298, "opcodeinfo": 298, "pipefil": 299, "moduleinfo": [300, 477], "module_find": 300, "ispkg": 300, "extend_path": 300, "pth": [300, 332, 350, 352, 453, 460, 477, 481], "find_load": [300, 421, 430, 470, 471, 472, 474, 475, 478, 481], "get_import": 300, "path_item": 300, "get_load": [300, 472, 481], "module_or_nam": 300, "iter_import": [300, 474], "iter_modul": [300, 474, 477, 481], "walk_packag": [300, 474, 477, 478, 481], "12915": [300, 481], "pyramid": 300, "is_64bit": 301, "system_alia": 301, "mac_ver": [301, 481], "amdk6": 301, "python_build": [301, 481], "buildno": 301, "builddat": [301, 481], "python_compil": 301, "python_branch": [301, 481], "scm": 301, "python_implement": 301, "python_revis": [301, 481], "python_vers": 301, "python_version_tupl": 301, "dega": 301, "java_v": 301, "vminfo": 301, "osinfo": 301, "vm_name": 301, "vm_releas": 301, "vm_vendor": 301, "os_nam": 301, "os_vers": 301, "os_arch": 301, "win32_ver": [301, 481], "csd": 301, "uniprocessor": 301, "win32_edit": [301, 481], "enterpris": [301, 481], "iotuap": 301, "serverstandard": 301, "nanoserv": 301, "win32_is_iot": [301, 481], "iot": [301, 481], "versioninfo": 301, "dev_stag": 301, "non_release_vers": 301, "libc_ver": [301, 481], "16384": 301, "freedesktop_os_releas": [301, 470, 481], "freedesktop": [301, 470, 474, 481], "pretty_nam": 301, "id_lik": 301, "version_id": 301, "variant_id": 301, "get_like_distro": 301, "ios": 302, "nskeyedarchiv": [302, 479], "nskeyedunarchiv": 302, "fmt_xml": [302, 475], "fmt_binari": [302, 475], "invalidfileexcept": [302, 481], "pl": 302, "astr": 302, "doodah": 302, "afloat": 302, "anint": 302, "adict": 302, "anotherstr": 302, "athirdstr": 302, "xe4ssig": 302, "ma": [302, 470, 471, 481], "atruevalu": 302, "afalsevalu": 302, "gunk": 302, "somemoredata": 302, "adat": 302, "1939": 303, "stls": [303, 475], "2595": 303, "pop3_ssl": [303, 473, 480, 481], "obsolesc": 303, "mailserv": 303, "pop3_port": 303, "pop3_ssl_port": 303, "995": [303, 477], "fetchmail": 303, "noncompli": 303, "capa": [303, 475], "2449": 303, "pass_": 303, "apop": 303, "rpop": 303, "mesg_num": 303, "dele": 303, "eudora": 303, "qpop": 303, "disconnect": [303, 333, 338, 403, 479, 481], "rset": [303, 333, 481], "signoff": 303, "howmuch": 303, "uidl": 303, "mesgnum": 303, "6856": [303, 467, 473, 476, 481], "nummessag": 303, "off_t": 304, "getconf": 304, "lfs_cflag": 304, "d_largefile64_sourc": 304, "d_file_offset_bit": 304, "sort_dict": [305, 479, 481], "underscore_numb": [305, 470, 481], "tup": [305, 382, 384], "dead": [305, 400, 438, 439, 454, 463, 468, 473, 481], "pformat": [305, 475, 481], "isread": 305, "isrecurs": 305, "saferepr": 305, "sampleproject": 305, "project_info": 305, "author_email": [305, 481], "pypa": [305, 397], "googlegroup": 305, "bugtrack_url": 305, "osi": 305, "restructur": [305, 460, 461, 466, 481], "webpag": 305, "description_content_typ": 305, "docs_url": 305, "download_url": [305, 465], "last_day": 305, "last_month": 305, "last_week": 305, "home_pag": 305, "maintainer_email": [305, 481], "package_url": 305, "project_url": 305, "homepag": 305, "release_url": 305, "requires_dist": 305, "lsprof": 306, "rosen": 306, "ted": 306, "czotter": 306, "imit": [306, 466], "ncall": [306, 481], "tottim": 306, "percal": 306, "cumtim": [306, 481], "759": 306, "937": 306, "598": 306, "_code": 306, "435": [306, 475], "_parse_sub": 306, "induc": [306, 423], "subfunct": [306, 474], "restat": 306, "output_fil": 306, "sort_ord": 306, "sort_stat": 306, "sortkey": 306, "strip_dir": 306, "print_stat": 306, "cull": 306, "print_cal": 306, "print_calle": 306, "timeunit": 306, "subcal": 306, "pr": [306, 460, 481], "sortbi": 306, "create_stat": 306, "dump_stat": 306, "coalesc": 306, "printout": [306, 481], "pcall": 306, "nfl": 306, "reverse_ord": 306, "percentag": [306, 343, 444, 466, 481], "get_stats_profil": 306, "statsprofil": [306, 481], "functionprofil": [306, 481], "tick": [306, 320, 364], "lag": 306, "calibr": 306, "probabilist": 306, "god": 306, "alarm": [306, 331, 475, 481], "8ghz": 306, "i5": 306, "process_tim": [306, 364, 365, 474, 479, 481], "04e": 306, "your_computed_bia": 306, "your_time_func": 306, "lone": [306, 333, 428, 481], "cleanest": 306, "your_integer_time_func": 306, "_lsprof": [306, 481], "perf_count": [306, 364, 365, 474, 479, 481], "thorough": [307, 335, 342, 473, 481], "master_read": 307, "stdin_read": 307, "baffl": 307, "pseudotermin": 307, "typescript": 307, "use_python": 307, "pw_name": 308, "pw_passwd": 308, "pw_uid": [308, 346], "pw_gid": 308, "pw_geco": 308, "pw_dir": 308, "pw_shell": 308, "getpwal": 308, "pycompileerror": [309, 481], "dfile": 309, "dorais": 309, "checked_hash": 309, "unchecked_hash": 309, "filen": 309, "readmodul": [310, 470, 481], "readmodule_ex": [310, 470, 481], "pagin": 311, "pager": [311, 481], "pythondoc": [311, 481], "pyexpat": [312, 407, 424, 454, 460, 463, 465, 466, 467, 481], "unauthent": [312, 409, 410, 411, 412, 417, 418, 481], "xmlparsertyp": 312, "parsercr": 312, "errorstr": 312, "namespace_separ": 312, "repertoir": [312, 333, 373, 466], "startelementhandl": 312, "endelementhandl": 312, "xmlns": [312, 393, 411, 467, 481], "elem1": [312, 465], "elem2": [312, 465], "isfin": 312, "parsefil": 312, "setbas": 312, "externalentityrefhandl": 312, "notationdeclhandl": 312, "unparsedentitydeclhandl": 312, "getbas": 312, "getinputcontext": 312, "externalentityparsercr": 312, "ordered_attribut": 312, "specified_attribut": [312, 481], "setparamentitypars": 312, "xml_param_entity_parsing_nev": 312, "xml_param_entity_parsing_unless_standalon": 312, "xml_param_entity_parsing_alway": 312, "useforeigndtd": 312, "startdoctypedeclhandl": 312, "enddoctypedeclhandl": 312, "xml_error_cant_change_feature_once_pars": 312, "buffer_text": [312, 463], "characterdatahandl": 312, "buffer_us": 312, "errorbyteindex": 312, "errorcolumnnumb": 312, "errorlinenumb": 312, "currentbyteindex": 312, "currentcolumnnumb": 312, "currentlinenumb": 312, "handlernam": 312, "xmldeclhandl": 312, "doctypenam": 312, "systemid": [312, 408, 413], "publicid": [312, 408, 413], "has_internal_subset": 312, "elementdeclhandl": 312, "attlistdeclhandl": 312, "elnam": 312, "attnam": 312, "idref": 312, "processinginstructionhandl": 312, "startcdatasectionhandl": 312, "endcdatasectionhandl": 312, "entitynam": 312, "notationnam": 312, "ndata": [312, 413], "entitydeclhandl": 312, "is_parameter_ent": 312, "startnamespacedeclhandl": 312, "endnamespacedeclhandl": 312, "commenthandl": 312, "defaulthandl": 312, "defaulthandlerexpand": 312, "notstandalonehandl": 312, "xml_error_not_standalon": 312, "xml_error_external_entity_handl": 312, "some_xml_docu": 312, "start_el": [312, 410], "end_el": [312, 410], "char_data": 312, "child1": [312, 387], "child2": [312, 387], "xml_ctype_ani": 312, "xml_ctype_choic": 312, "xml_ctype_empti": 312, "xml_ctype_mix": 312, "xml_ctype_nam": 312, "xml_ctype_seq": 312, "xml_cquant_non": 312, "xml_cquant_opt": 312, "xml_cquant_plus": 312, "xml_cquant_rep": 312, "xml_error_": 312, "constant_nam": 312, "xml_error_async_ent": 312, "xml_error_attribute_external_entity_ref": 312, "xml_error_bad_char_ref": 312, "xml_error_binary_entity_ref": 312, "xml_error_duplicate_attribut": 312, "xml_error_incorrect_encod": 312, "xml_error_invalid_token": 312, "xml_error_junk_after_doc_el": 312, "xml_error_misplaced_xml_pi": 312, "xml_error_no_el": 312, "xml_error_no_memori": 312, "xml_error_param_entity_ref": 312, "xml_error_partial_char": 312, "xml_error_recursive_entity_ref": 312, "xml_error_syntax": 312, "xml_error_tag_mismatch": 312, "xml_error_unclosed_token": 312, "xml_error_undefined_ent": 312, "xml_error_unknown_encod": 312, "xml_error_unclosed_cdata_sect": 312, "xml_error_unexpected_st": 312, "xml_error_entity_declared_in_p": 312, "xml_error_feature_requires_xml_dtd": 312, "xml_error_unbound_prefix": 312, "undeclar": 312, "xml_error_undeclaring_prefix": 312, "xml_error_incomplete_p": 312, "xml_error_xml_decl": 312, "xml_error_text_decl": 312, "xml_error_publicid": 312, "xml_error_suspend": 312, "xml_error_not_suspend": 312, "xml_error_abort": 312, "xml_error_finish": 312, "xml_error_suspend_p": 312, "xml_error_reserved_prefix_xml": 312, "xml_error_reserved_prefix_xmln": 312, "xml_error_reserved_namespace_uri": 312, "xml_error_invalid_argu": 312, "xml_error_no_buff": 312, "xml_error_amplification_limit_breach": 312, "amplif": 312, "breach": [312, 424], "rec": [312, 409, 411], "xml11": [312, 409, 411], "20060816": [312, 409, 411], "encodingdecl": [312, 409, 411], "decodestr": [315, 480, 481], "encodestr": [315, 480, 481], "mise": 316, "19937": 316, "matsumoto": [316, 424], "nishimura": [316, 424], "equidistribut": 316, "vol": 316, "randbyt": [316, 480, 481], "token_byt": [316, 324], "randint": [316, 473, 481], "getrandbit": [316, 464, 475, 481], "cum_weight": 316, "2080": 316, "10000000": 316, "binomialvari": [316, 341, 472, 481], "binomi": [316, 341, 481], "triangular": [316, 466], "betavari": 316, "expovari": [316, 472, 481], "lambd": [316, 472, 481], "gammavari": [316, 481], "gauss": [316, 481], "mu": [316, 341, 479, 481], "sigma": [316, 341, 479], "lognormvari": 316, "vonmisesvari": 316, "kappa": 316, "paretovari": [316, 481], "pareto": 316, "weibullvari": 316, "weibul": 316, "seeder": 316, "37444887175646646": 316, "1800146073117523": 316, "148957571865031": 316, "roulett": 316, "spin": [316, 481], "jack": [316, 317, 342, 395, 424, 440, 444, 462, 463, 465, 469, 481], "king": [316, 317, 460, 479, 481], "coin": 316, "settl": [316, 466], "10_000": [316, 341], "4169": 316, "quartil": [316, 341, 479], "2_500": 316, "7_500": 316, "7958": 316, "thoughtco": 316, "3126155": 316, "fmean": [316, 341, 479, 481], "73": [316, 380, 450, 464, 479, 480], "denni": [316, 470, 471, 472, 480, 481], "shasha": 316, "manda": 316, "wilson": [316, 463, 464, 476, 480, 481], "drug": 316, "placebo": 316, "observed_diff": 316, "new_diff": 316, "reshuffl": 316, "4f": 316, "hypothesi": [316, 481], "quantil": [316, 341, 479, 481], "average_arrival_interv": 316, "average_service_tim": 316, "stdev_service_tim": 316, "num_serv": 316, "arrival_tim": 316, "1_000_000": [316, 477, 481], "next_server_avail": 316, "service_dur": 316, "service_complet": 316, "jake": [316, 467, 469, 479, 481], "vanderpla": 316, "econom": 316, "norvig": 316, "random_product": 316, "random_permut": 316, "random_combin": 316, "random_combination_with_replac": 316, "05954861408025609": 316, "fullrandom": 316, "0x10_0000_0000_0000": 316, "87925541791544": 316, "allen": [316, 339, 473, 481], "downey": 316, "frie09": 317, "gentler": 317, "nfoo2": 317, "possess": [317, 342, 403, 471, 481], "aaaab": 317, "aaab": 317, "aaaaaa": 317, "ailmsux": 317, "imsx": 317, "x7f": 317, "isaac": 317, "asimov": 317, "lookbehind": [317, 476, 481], "theth": 317, "atlas": 317, "athen": 317, "attorney": 317, "typographi": 317, "noflag": [317, 481], "nicer": [317, 481], "fullmatch": [317, 475, 481], "0a3b9": 317, "foot": [317, 341, 449], "fell": [317, 439, 449, 461, 462, 463], "z_": [317, 433], "z_0": 317, "npy_": 317, "npy_myfunc": 317, "dashrepl": 317, "matchobj": 317, "pro": 317, "gram": [317, 429], "sand": 317, "unmatch": [317, 392, 476, 481], "new_str": 317, "number_of_subs_mad": 317, "legal_char": 317, "ascii_lowercas": [317, 343, 462], "abcdefghijklmnopqrstuvwxyz0123456789": 317, "digits_r": 317, "purg": 317, "endpo": 317, "ogr": 317, "doggi": 317, "og": [317, 360, 481], "groupindex": [317, 481], "groupn": 317, "physicist": 317, "reynold": 317, "a1b2c3": 317, "c3": [317, 392, 426, 463, 474], "1632": 317, "cba": 317, "remove_thi": 317, "toni": [317, 466, 481], "tiremove_thisg": 317, "tiger": 317, "lastindex": 317, "lastgroup": 317, "displaymatch": 317, "poker": [317, 382], "9tjqk": 317, "akt5q": 317, "akt5": 317, "akt": 317, "727ak": 317, "717ak": 317, "7s": 317, "717": 317, "718ak": 317, "354aa": 317, "5c": 317, "ee": [317, 342, 469], "nb": [317, 468], "nx": 317, "ross": [317, 467, 469, 474, 480, 481], "mcfluff": 317, "834": 317, "345": [317, 464, 469], "155": 317, "elm": 317, "ronald": [317, 465, 466, 467, 473, 475, 479, 480], "heathmor": 317, "892": 317, "3428": 317, "finley": 317, "avenu": [317, 424, 462], "frank": [317, 481], "burger": 317, "925": 317, "541": 317, "7625": 317, "662": 317, "dogwood": 317, "heather": 317, "albrecht": 317, "548": 317, "326": 317, "4584": 317, "919": 317, "park": 317, "telephon": 317, "hous": [317, 477], "inner_word": 317, "professor": 317, "abdolmalek": 317, "poefsrosr": 317, "aealmlobdk": 317, "pslaee": 317, "reorpt": 317, "abnsec": 317, "plmrptoy": 317, "pofsros": 317, "aodlambelk": 317, "plase": 317, "reoprt": 317, "yuor": 317, "asnebc": 317, "potlmrpi": 317, "disguis": [317, 426], "polic": 317, "ly": 317, "02d": 317, "scanner": [317, 355, 376, 475, 481], "gosub": 317, "token_specif": 317, "tok_regex": 317, "line_start": 317, "inputrc": [318, 481], "libedit": [318, 481], "editlin": [318, 454, 481], "editrc": [318, 481], "rl_complet": 318, "parse_and_bind": [318, 321, 481], "rl_parse_and_bind": 318, "read_init_fil": [318, 321, 481], "rl_read_init_fil": 318, "get_line_buff": [318, 321], "rl_line_buff": 318, "insert_text": [318, 321], "rl_insert_text": 318, "rl_redisplay": 318, "read_history_fil": 318, "read_histori": 318, "write_history_fil": 318, "write_histori": [318, 481], "append_history_fil": [318, 476, 481], "nelement": 318, "append_histori": 318, "get_history_length": [318, 481], "set_history_length": 318, "history_truncate_fil": 318, "clear_histori": 318, "get_current_history_length": [318, 463], "get_history_item": [318, 463], "history_get": 318, "remove_history_item": 318, "remove_histori": 318, "replace_history_item": 318, "replace_history_entri": 318, "add_histori": 318, "set_auto_histori": [318, 477, 481], "set_startup_hook": 318, "rl_startup_hook": 318, "set_pre_input_hook": 318, "rl_pre_input_hook": 318, "set_complet": [318, 321], "entry_func": 318, "rl_completion_match": 318, "rl_attempted_completion_funct": 318, "get_complet": 318, "get_completion_typ": 318, "rl_completion_typ": 318, "get_begidx": [318, 481], "get_endidx": [318, 481], "libreadlin": [318, 481], "set_completer_delim": [318, 481], "get_completer_delim": 318, "rl_completer_word_break_charact": 318, "set_completion_display_matches_hook": 318, "rl_completion_display_matches_hook": 318, "longest_match_length": 318, "python_histori": [318, 332, 445], "histfil": 318, "unruli": 318, "h_len": 318, "prev_h_len": 318, "new_h_len": 318, "historyconsol": 318, "init_histori": 318, "save_histori": 318, "maxtupl": 319, "maxlist": 319, "maxarray": 319, "maxdict": 319, "maxset": 319, "maxfrozenset": 319, "maxdequ": 319, "maxstr": 319, "maxlong": 319, "maxoth": 319, "arepr": 319, "repr1": 319, "repr_typ": 319, "subobj": 319, "myrepr": 319, "repr_textiowrapp": 319, "getrlimit": [320, 481], "rlim_infin": 320, "rlimit_nofil": 320, "cap_sys_resourc": 320, "rlimit_cor": [320, 360], "rlimit_cpu": [320, 481], "sigxcpu": 320, "rlimit_fs": [320, 481], "rlimit_data": 320, "rlimit_stack": 320, "rlimit_rss": 320, "rlimit_nproc": 320, "rlimit_ofil": 320, "rlimit_memlock": 320, "rlimit_vmem": 320, "rlimit_a": 320, "rlimit_msgqueu": [320, 475], "rlimit_nic": [320, 475], "rlim_cur": 320, "rlimit_rtprio": [320, 475], "rlimit_rttim": [320, 475], "spend": [320, 460, 481], "rlimit_sigpend": [320, 475], "rlimit_sbs": [320, 475], "mbuf": 320, "rlimit_swap": [320, 475], "overcommit": 320, "sysctl": [320, 481], "rlimit_npt": [320, 475], "rlimit_kqueu": [320, 481], "rusage_": 320, "rusage_self": 320, "ru_utim": 320, "ru_stim": 320, "ru_maxrss": 320, "ru_ixrss": 320, "ru_idrss": 320, "ru_isrss": 320, "ru_minflt": 320, "ru_majflt": 320, "ru_nswap": 320, "ru_inblock": 320, "ru_oublock": 320, "ru_msgsnd": 320, "ru_msgrcv": 320, "ru_nsign": 320, "ru_nvcsw": 320, "voluntari": 320, "ru_nivcsw": 320, "involuntari": 320, "getpages": 320, "rusage_children": 320, "rusage_both": 320, "rusage_thread": 320, "mod_nam": 322, "init_glob": 322, "run_nam": 322, "alter_si": 322, "run_path": [322, 453, 467, 481], "path_nam": 322, "snow": [322, 471, 472, 474, 475, 476, 477, 478, 479], "timefunc": [323, 474], "delayfunc": 323, "print_tim": 323, "print_some_tim": 323, "enterab": [323, 474], "1_650_000_000": 323, "1652342830": 323, "3640375": 323, "3642538": 323, "3643398": 323, "1652342835": 323, "3694863": 323, "3696074": 323, "1652342840": 323, "369612": 323, "3697174": 323, "soonest": [323, 474], "randbelow": [324, 481], "randbit": 324, "xebr": 324, "x17d": 324, "xae": 324, "xd4": 324, "xe3": [324, 466], "xb6": 324, "xe2": [324, 466], "xebp1": 324, "x8b": 324, "token_hex": [324, 481], "f9bf78b9a18ce6d46a0cd2b0b86df9da": 324, "token_urlsaf": 324, "drmhze6epcv0fn_81bj": 324, "token_": 324, "xkcd": 324, "passphras": 324, "mktemp": [325, 358, 393, 481], "devpol": [326, 327, 474, 475, 476, 481], "epoll_create1": 326, "epoll_cloexec": 326, "kq_filter_read": 326, "kq_ev_add": 326, "fflag": 326, "udata": 326, "rlist": 326, "wlist": 326, "xlist": 326, "parameterless": 326, "winsock": [326, 335, 481], "pipe_buf": [326, 473, 481], "eventmask": [326, 466], "pollin": 326, "pollpri": 326, "pollout": 326, "epollin": 326, "epollout": 326, "epollpri": 326, "urgent": 326, "epollerr": 326, "assoc": 326, "epollhup": 326, "epollet": 326, "epolloneshot": 326, "epollexclus": [326, 481], "epollrdhup": [326, 481], "epollrdnorm": 326, "epollrdband": 326, "epollwrnorm": 326, "epollwrband": 326, "epollmsg": 326, "fromfd": [326, 335], "maxev": 326, "scalabl": [326, 460], "fds": [326, 335, 481], "pollerr": 326, "pollhup": 326, "hung": 326, "pollrdhup": [326, 481], "pollnval": 326, "changelist": 326, "max_ev": 326, "eventlist": 326, "sektion": 326, "kq_filter_writ": 326, "kq_filter_aio": 326, "aio": 326, "kq_filter_vnod": 326, "kq_filter_proc": 326, "kq_filter_netdev": 326, "kq_filter_sign": 326, "kq_filter_tim": 326, "kq_ev_delet": 326, "kq_ev_en": 326, "permitscontrol": 326, "kq_ev_dis": 326, "disablesev": 326, "kq_ev_oneshot": 326, "kq_ev_clear": 326, "kq_ev_sysflag": 326, "kq_ev_flag1": 326, "kq_ev_eof": 326, "kq_ev_error": 326, "kq_note_lowat": 326, "kq_note_delet": 326, "kq_note_writ": 326, "kq_note_extend": 326, "kq_note_attrib": 326, "kq_note_link": 326, "kq_note_renam": 326, "kq_note_revok": 326, "revok": 326, "kq_note_exit": 326, "kq_note_fork": 326, "kq_note_exec": 326, "kq_note_pctrlmask": 326, "kq_note_pdatamask": 326, "kq_note_track": 326, "kq_note_child": 326, "note_track": 326, "kq_note_trackerr": 326, "kq_note_linkup": 326, "kq_note_linkdown": 326, "kq_note_linkinv": 326, "baseselector": [327, 481], "epollselector": [327, 478, 481], "defaultselector": [327, 331, 481], "devpollselector": [327, 476, 478], "event_read": [327, 331], "event_writ": 327, "selectorkey": 327, "get_key": [327, 481], "get_map": 327, "sel": [327, 331], "shelf": [328, 342, 473, 475], "writeback": 328, "handier": 328, "keyencod": 328, "bsddbshelf": [328, 342], "set_loc": 328, "bsddb": [328, 463, 466, 467], "pybsddb": [328, 463, 466, 467, 468], "hashopen": 328, "btopen": 328, "rnopen": 328, "dbfilenameshelf": [328, 342], "klist": 328, "minilanguag": 329, "split_command": 329, "boom": [329, 387, 388], "plug": [329, 481], "remote_command": 329, "instream": 329, "punctuation_char": [329, 477, 481], "wordchar": 329, "get_token": 329, "push_token": 329, "read_token": 329, "pushback": 329, "sourcehook": 329, "push_sourc": 329, "pop_sourc": 329, "newstream": 329, "newfil": 329, "lexer": 329, "error_lead": 329, "beginn": 329, "whitespace_split": 329, "escapedquot": 329, "donotsepar": 329, "fsrc": 330, "fdst": 330, "uncontrol": 330, "samefileerror": [330, 475, 481], "ignore_pattern": [330, 466], "copy_funct": [330, 473, 476, 481], "ignore_dangling_symlink": [330, 473, 481], "dirs_exist_ok": [330, 479, 481], "onexc": [330, 472, 481], "suscept": [330, 459, 481], "avoids_symlink_attack": 330, "excinfo": 330, "mv": [330, 474, 481], "disk_usag": [330, 474, 481], "needcurrentdirectoryforexepathw": [330, 472], "nodefaultcurrentdirectoryinexepath": 330, "python33": 330, "srcname": 330, "33671": [330, 479, 481], "userspac": [330, 474, 479], "outfd": [330, 479], "infd": [330, 479], "fcopyfil": [330, 481], "_logpath": 330, "reattempt": 330, "remove_readon": 330, "xztar": [330, 476, 481], "dry_run": [330, 360, 481], "gztar": [330, 473, 477, 481], "bztar": [330, 473], "register_archive_format": [330, 473], "pax": [330, 356, 466, 479, 481], "get_archive_format": [330, 473], "extra_arg": [330, 473], "supports_root_dir": 330, "unregister_archive_format": 330, "register_unpack_format": 330, "get_unpack_format": 330, "unregister_unpack_format": 330, "archive_nam": 330, "myarchiv": [330, 450, 473], "tarek": [330, 353, 466, 467, 473, 476, 481], "tzvf": 330, "drwx": 330, "609": 330, "authorized_key": 330, "id_dsa": 330, "1675": 330, "id_rsa": 330, "37192": 330, "known_host": 330, "please_add": 330, "do_not_add": 330, "my_arch": 330, "uninterrupt": 331, "air": 331, "sigmask": 331, "sig_block": 331, "sig_unblock": 331, "sig_setmask": 331, "getsign": [331, 481], "pthread_sigmask": [331, 474], "sigpend": [331, 474], "sigwait": [331, 474], "ctrl_": 331, "sigprocmask": 331, "sigquit": [331, 346], "sigalrm": [331, 481], "sigbreak": 331, "bus": [331, 403], "sigcld": 331, "sighup": [331, 481], "hangup": 331, "death": [331, 474], "sigstkflt": [331, 481], "coprocessor": 331, "sigusr1": 331, "sigusr2": 331, "nsig": [331, 481], "valid_sign": [331, 481], "itimer_r": 331, "itimer_virtu": 331, "sigvtalrm": 331, "itimer_prof": 331, "sigprof": 331, "itimererror": 331, "setitim": [331, 466, 481], "getitim": [331, 466], "strsignal": [331, 481], "sigwaitinfo": [331, 474, 476, 481], "sigtimedwait": [331, 474, 476, 481], "pidfd_send_sign": [331, 480, 481], "siginfo": 331, "sigstop": 331, "warn_on_full_buff": [331, 478, 481], "wakeup": [331, 474, 478, 481], "siginterrupt": [331, 466, 474, 481], "sigset": [331, 481], "si_errno": 331, "si_band": [331, 481], "ttys0": 331, "spamcontext": 331, "exc_val": [331, 342], "interrupt_read": 331, "interrupt_writ": 331, "subsubdirectori": 332, "bletch": 332, "enable_user_sit": 332, "__interactivehook__": [332, 350, 448, 453, 475], "user_sit": [332, 353], "getusersitepackag": [332, 436, 467, 473], "appdata": [332, 459, 466], "user_bas": [332, 353, 467], "getuserbas": [332, 467, 473], "pythonuserbas": [332, 453, 466], "addsitedir": 332, "sitedir": 332, "known_path": 332, "getsitepackag": [332, 467, 473], "esmtp": 333, "821": 333, "1869": 333, "local_hostnam": 333, "fqdn": 333, "helo": 333, "ehlo": [333, 474], "getfqdn": [333, 335, 481], "smtpconnecterror": 333, "smtp_ssl": [333, 466, 474, 480, 481], "lmtp": [333, 466, 474, 480, 481], "lmtp_port": 333, "smtpexcept": [333, 475], "smtpserverdisconnect": [333, 481], "smtpresponseexcept": 333, "smtp_code": 333, "smtp_error": 333, "smtpsenderrefus": 333, "smtprecipientsrefus": 333, "smtpdataerror": 333, "smtpheloerror": 333, "smtpnotsupportederror": [333, 481], "smtpauthenticationerror": 333, "docmd": 333, "helo_resp": 333, "has_extn": 333, "ehlo_resp": 333, "does_esmtp": 333, "esmtp_featur": 333, "ehlo_or_helo_if_need": 333, "vrfi": 333, "foil": 333, "spammer": 333, "initial_response_ok": [333, 481], "4954": [333, 481], "auth_cram_md5": 333, "auth_plain": 333, "auth_login": [333, 481], "from_addr": [333, 473], "to_addr": [333, 473], "mail_opt": [333, 476, 481], "rcpt_option": 333, "8bitmim": [333, 476, 481], "dsn": 333, "rcpt": 333, "smtpnotsupport": 333, "hcom": 334, "sndr": 334, "sndt": 334, "voc": 334, "8svx": 334, "sb": [334, 357], "ub": 334, "ul": [334, 409, 462], "sampling_r": 334, "bits_per_sampl": 334, "whathdr": [334, 476, 481], "sndtool": 334, "lab": [334, 424, 438, 460, 462, 463], "waveform": [334, 404], "transliter": 335, "dare": 335, "inaddr_ani": 335, "inaddr_broadcast": 335, "flowinfo": 335, "sin6_flowinfo": 335, "sin6_scope_id": 335, "sockaddr_in6": 335, "af_netlink": [335, 465], "tipc": [335, 466], "af_tipc": 335, "addr_typ": 335, "v2": [335, 345, 424, 465, 466, 481], "tipc_addr_nameseq": 335, "tipc_addr_nam": 335, "tipc_addr_id": 335, "tipc_zone_scop": 335, "tipc_cluster_scop": 335, "tipc_node_scop": 335, "af_can": [335, 481], "can0": 335, "can_isotp": [335, 481], "rx_addr": 335, "tx_addr": 335, "can_j1939": [335, 480, 481], "pgn": 335, "ecu": 335, "sysproto_control": 335, "pf_system": [335, 474], "af_bluetooth": [335, 481], "btproto_l2cap": 335, "bdaddr": 335, "psm": 335, "bluetooth": [335, 481], "btproto_rfcomm": 335, "btproto_hci": 335, "device_id": 335, "btproto_sco": 335, "af_alg": [335, 477, 481], "feat": 335, "aead": [335, 339], "skcipher": 335, "rng": 335, "aes": [335, 339, 463], "drbg_nopr_ctr_aes256": 335, "32bit": [335, 462, 481], "af_vsock": [335, 478, 481], "vsock": 335, "af_packet": [335, 481], "ifnam": 335, "pkttype": 335, "hatyp": 335, "ethernet": 335, "eth_p_al": [335, 481], "ethertype_": [335, 481], "packet_host": 335, "packet_broadcast": 335, "packet_multicast": 335, "packet_otherhost": 335, "promiscu": 335, "packet_outgo": 335, "arp": [335, 481], "af_qipcrtr": [335, 481], "qualcomm": [335, 481], "ipproto_udplit": [335, 481], "setsockopt": [335, 339, 467, 477], "udplite_send_cscov": [335, 481], "udplite_recv_cscov": [335, 481], "af_hyperv": 335, "hyper": [335, 481], "vm_id": 335, "service_id": 335, "vmid": 335, "hv_guid_zero": 335, "hv_guid_broadcast": 335, "hv_guid_wildcard": 335, "hv_guid_children": 335, "hv_guid_loopback": 335, "hv_guid_par": 335, "v6": 335, "nondeterminist": 335, "settimeout": [335, 339, 393, 463, 481], "herror": 335, "h_errno": 335, "gethostbyname_ex": [335, 481], "hstrerror": 335, "gaierror": [335, 481], "gai_strerror": 335, "eai_": 335, "af_": [335, 475], "sock_": [335, 475, 481], "addressfamili": 335, "socketkind": 335, "sock_raw": 335, "sock_rdm": 335, "sock_seqpacket": 335, "sock_cloexec": [335, 478, 481], "sock_nonblock": [335, 478, 481], "so_": 335, "somaxconn": [335, 476], "msg_": 335, "sol_": 335, "scm_": 335, "ipproto_": 335, "ipport_": 335, "inaddr_": 335, "ip_": [335, 481], "ipv6_": 335, "ai_": 335, "ni_": 335, "tcp_": [335, 481], "so_domain": [335, 477], "so_protocol": [335, 477], "so_peersec": [335, 477], "so_passsec": [335, 477], "tcp_user_timeout": [335, 477, 478, 481], "tcp_congest": [335, 477, 478, 481], "tcp_fastopen": [335, 481], "tcp_keepcnt": [335, 481], "tcp_notsent_lowat": [335, 478, 481], "tcp_keepidl": [335, 481], "tcp_keepintvl": [335, 481], "ip_recvto": [335, 470, 481], "tcp_keepal": [335, 481], "tcp_connection_info": [335, 481], "tcp_info": 335, "so_rtabl": [335, 481], "so_user_cooki": [335, 481], "so_mark": 335, "tcp_md5sig": [335, 481], "tcp_thin_linear_timeout": [335, 481], "tcp_thin_dupack": [335, 481], "tcp_repair": [335, 481], "tcp_repair_queu": [335, 481], "tcp_queue_seq": [335, 481], "tcp_repair_opt": [335, 481], "tcp_timestamp": [335, 481], "tcp_cc_info": [335, 481], "tcp_save_syn": [335, 481], "tcp_saved_syn": [335, 481], "tcp_repair_window": [335, 481], "tcp_fastopen_connect": [335, 481], "tcp_ulp": [335, 481], "tcp_md5sig_ext": [335, 481], "tcp_fastopen_key": [335, 481], "tcp_fastopen_no_cooki": [335, 481], "tcp_zerocopy_rec": [335, 481], "tcp_inq": [335, 481], "tcp_tx_delay": [335, 481], "ip_pktinfo": [335, 481], "ip_unblock_sourc": 335, "ip_block_sourc": 335, "ip_add_source_membership": 335, "ip_drop_source_membership": 335, "pf_can": [335, 474], "sol_can_": 335, "can_": 335, "can_bcm": [335, 475], "can_bcm_": 335, "bcm": [335, 481], "can_bcm_can_fd_fram": 335, "can_raw_fd_fram": [335, 476, 481], "can_raw": 335, "can_raw_join_filt": [335, 480, 481], "15765": 335, "sae": 335, "j1939": [335, 481], "af_divert": 335, "pf_divert": 335, "divert": [335, 481], "pf_packet": 335, "packet_": 335, "af_rd": 335, "pf_rds": [335, 474], "sol_rd": 335, "rds_": 335, "sio_rcval": 335, "sio_keepalive_v": 335, "sio_loopback_fast_path": [335, 477, 481], "rcvall_": 335, "wsaioctl": [335, 466], "tipc_": 335, "sol_alg": [335, 477], "alg_": [335, 477], "ioctl_vm_sockets_get_local_cid": 335, "vmaddr": 335, "so_vm": 335, "af_link": [335, 475], "has_ipv6": 335, "bdaddr_ani": 335, "bdaddr_loc": 335, "hci_filt": 335, "hci_time_stamp": 335, "hci_data_dir": 335, "scm_creds2": [335, 481], "local_cr": [335, 481], "local_creds_persist": [335, 481], "so_passcr": 335, "so_incoming_cpu": [335, 481], "hv_protocol_raw": 335, "hvsocket_connect_timeout": 335, "hvsocket_connect_timeout_max": 335, "hvsocket_connected_suspend": 335, "hvsocket_address_flag_passthru": 335, "ethertype_arp": 335, "ethertype_ip": 335, "ethertype_ipv6": 335, "ethertype_vlan": 335, "802": 335, "overrul": 335, "ipproto_mptcp": [335, 470, 481], "global_default": 335, "getdefaulttimeout": 335, "dualstack_ipv6": 335, "has_dualstack_ipv6": [335, 479, 481], "fromshar": [335, 478], "sockettyp": 335, "ai_numerichost": 335, "canonnam": 335, "ai_canonnam": 335, "ipproto_tcp": 335, "2606": 335, "2800": 335, "220": [335, 339, 439], "248": 335, "1893": 335, "25c8": 335, "1946": 335, "93": [335, 479, 480], "184": 335, "216": [335, 444, 447], "aliaslist": 335, "ipaddrlist": 335, "getprotobynam": 335, "icmp": 335, "inet_aton": [335, 479, 480, 481], "ip_str": 335, "quad": [335, 462, 481], "in_addr": 335, "inet_ntoa": 335, "packed_ip": 335, "inet_ntop": [335, 475], "address_famili": [335, 336], "in6_addr": 335, "5aef": 335, "2b": [335, 477], "cmsg_len": [335, 481], "recvmsg": [335, 474, 476], "3542": [335, 481], "cmsg_space": [335, 481], "if_nameindex": [335, 479, 481], "fb605b73": 335, "aac2": 335, "49a6": 335, "9a2f": 335, "25416aea0573": 335, "ethernet_32770": 335, "vethernet": 335, "if_nametoindex": [335, 479, 481], "if_nam": 335, "if_indextonam": [335, 479, 481], "if_index": 335, "send_fd": [335, 480, 481], "scm_right": 335, "recv_fd": [335, 480], "maxfd": 335, "optnam": [335, 477], "getblock": [335, 478, 481], "gettimeout": [335, 339], "ancbufs": 335, "ancdata": 335, "msg_flag": 335, "cmsg_level": 335, "cmsg_type": 335, "cmsg_data": 335, "unconnect": [335, 466], "sol_socket": 335, "recvmsg_into": [335, 474], "scatter": [335, 462, 463, 467], "b1": [335, 382], "b2": [335, 382], "0123456789": [335, 342, 343], "b3": 335, "lamb": [335, 439], "sendmsg_afalg": [335, 477], "iv": 335, "assoclen": 335, "optlen": [335, 477], "optval": 335, "halv": [335, 464, 467], "shut_rd": 335, "shut_wr": 335, "shut_rdwr": [335, 339, 481], "50007": 335, "af": 335, "ipproto_ip": 335, "ip_hdrincl": 335, "rcvall_on": 335, "65565": 335, "rcvall_off": 335, "can_fram": 335, "can_frame_fmt": 335, "ib3x8": 335, "can_frame_s": 335, "build_can_fram": 335, "can_id": 335, "can_dlc": 335, "ljust": [335, 342, 444, 464, 474], "dissect_can_fram": 335, "vcan0": 335, "3bsd": 335, "stuart": 335, "sechrest": 335, "leffler": 335, "supplementari": 335, "3493": 335, "bind_and_activ": [336, 418, 466], "server_bind": [336, 418, 466], "server_activ": [336, 418, 466], "baseserv": [336, 474, 481], "unixstreamserv": [336, 481], "unixdatagramserv": 336, "infrequ": [336, 481], "forkingmixin": [336, 474, 478, 481], "baserequesthandl": 336, "server_clos": [336, 405, 478, 481], "abrupt": [336, 363, 481], "daemon_thread": 336, "autonom": [336, 424], "threadingudpserv": 336, "block_on_clos": [336, 478, 481], "forkingtcpserv": 336, "forkingudpserv": 336, "forkingunixstreamserv": [336, 481], "forkingunixdatagramserv": [336, 481], "threadingunixstreamserv": 336, "threadingunixdatagramserv": 336, "datagramrequesthandl": 336, "deaf": [336, 473], "get_request": 336, "verify_request": [336, 481], "handle_error": [336, 477, 481], "handle_timeout": [336, 466, 467], "poll_interv": 336, "service_act": [336, 474], "request_queue_s": 336, "socket_typ": 336, "finish_request": 336, "mytcphandl": 336, "tcpclient": 336, "myudphandl": 336, "threadedtcprequesthandl": 336, "cur_thread": 336, "threadedtcpserv": 336, "server_thread": 336, "sp_namp": 337, "sp_pwdp": 337, "sp_lstchg": 337, "sp_min": 337, "sp_max": 337, "sp_warn": 337, "sp_inact": 337, "sp_expir": 337, "sp_flag": 337, "getspnam": [337, 477, 481], "getspal": 337, "nonstandard": [338, 454, 465], "postgresql": [338, 465], "gerhard": [338, 462, 465, 466, 467], "ring": [338, 462, 465, 466, 467], "249": [338, 465, 472, 481], "w3school": 338, "sqlite_mast": 338, "executemani": [338, 481], "hollywood": 338, "bowl": 338, "1982": [338, 341, 364], "1983": [338, 341], "brian": [338, 432, 460, 463, 464, 466, 467, 473, 474, 475, 478, 481], "1979": [338, 341], "new_con": 338, "new_cur": 338, "detect_typ": 338, "check_same_thread": 338, "cached_stat": 338, "legacy_transaction_control": 338, "operationalerror": [338, 481], "register_convert": 338, "parse_decltyp": 338, "parse_colnam": [338, 481], "programmingerror": [338, 471, 472, 481], "threadsafeti": [338, 471, 481], "complete_stat": 338, "enable_callback_traceback": 338, "evil_trac": 338, "set_trace_callback": [338, 474, 481], "register_adapt": 338, "sqlite_ok": 338, "sqlite_deni": 338, "sqlite_ignor": 338, "authorizer_callback": 338, "set_author": [338, 471, 481], "apilevel": 338, "paramstyl": 338, "qmark": 338, "sqlite_vers": 338, "sqlite_version_info": 338, "sqlite_threadsaf": 338, "pysqlit": [338, 465, 467, 473], "sqlite_dbconfig_defens": 338, "sqlite_dbconfig_dqs_ddl": 338, "sqlite_dbconfig_dqs_dml": 338, "sqlite_dbconfig_enable_fkey": 338, "sqlite_dbconfig_enable_fts3_token": 338, "sqlite_dbconfig_enable_load_extens": 338, "sqlite_dbconfig_enable_qpsg": 338, "sqlite_dbconfig_enable_trigg": 338, "sqlite_dbconfig_enable_view": 338, "sqlite_dbconfig_legacy_alter_t": 338, "sqlite_dbconfig_legacy_file_format": 338, "sqlite_dbconfig_no_ckpt_on_clos": 338, "sqlite_dbconfig_reset_databas": 338, "sqlite_dbconfig_trigger_eqp": 338, "sqlite_dbconfig_trusted_schema": 338, "sqlite_dbconfig_writable_schema": 338, "setconfig": [338, 472, 481], "getconfig": [338, 472, 481], "c3ref": 338, "c_dbconfig_defens": 338, "blobopen": [338, 471, 481], "rowid": 338, "zeroblob": 338, "rollback": [338, 465, 466, 471, 481], "executescript": [338, 481], "sql_script": 338, "create_funct": [338, 481], "notsupportederror": [338, 481], "md5sum": [338, 481], "acbd18db4cc2f85cedef654fccc4a4d8": 338, "create_aggreg": [338, 481], "n_arg": 338, "aggregate_class": 338, "mysum": 338, "create_window_funct": [338, 471, 481], "num_param": 338, "windowfunct": 338, "udfwinfunc": 338, "windowsumint": 338, "sumint": 338, "sum_i": 338, "create_col": [338, 471, 481], "collate_revers": 338, "4th": 338, "5th": 338, "set_progress_handl": [338, 481], "progress_handl": 338, "databaseerror": 338, "trace_callback": 338, "fulltext": [338, 473], "fts3": 338, "ingredi": 338, "broccoli": 338, "stew": 338, "pepper": 338, "chees": [338, 439, 452], "pumpkin": 338, "onion": 338, "garlic": 338, "celeri": 338, "flour": 338, "butter": 338, "iterdump": [338, 481], "getlimit": [338, 471, 481], "1000000000": 338, "sqlite_limit_sql_length": [338, 481], "setlimit": [338, 471, 481], "sqlite_limit_attach": 338, "sqlite_dbconfig": 338, "in_transact": 338, "uncommit": [338, 473], "row_factori": 338, "text_factori": 338, "total_chang": 338, "dml": [338, 481], "row1": 338, "row2": 338, "fetchmani": 338, "arrays": 338, "setinputs": 338, "setoutputs": 338, "lastrowid": [338, 477, 481], "rowcount": [338, 481], "blob_col": 338, "246": [338, 466, 481], "sqlite_errorcod": [338, 471], "sqlite_errornam": [338, 471], "interfaceerror": [338, 471, 481], "dataerror": [338, 481], "integrityerror": 338, "internalerror": 338, "stock": [338, 465, 473, 481], "first_appear": 338, "1957": 338, "__conform__": [338, 481], "adapt_point": 338, "convert_point": 338, "adapt_date_iso": 338, "adapt_datetime_iso": 338, "adapt_datetime_epoch": 338, "convert_d": 338, "convert_datetim": 338, "convert_timestamp": 338, "1984": 338, "varchar": 338, "nosuchdb": 338, "mem1": 338, "con1": 338, "con2": 338, "6378": 338, "namedtuple_factori": 338, "czech": 338, "ddl": [338, 477, 481], "tlsv1": [339, 475, 481], "tsl": 339, "wrap_socket": [339, 466, 467, 470, 472, 473, 478, 481], "644": [339, 470, 472, 481], "ssock": 339, "protocol_tls_cli": [339, 470, 481], "cert": [339, 458, 467, 475, 481], "load_verify_loc": [339, 393, 475, 481], "cabundl": 339, "pem": [339, 458, 475, 481], "protocol_tls_serv": [339, 470, 481], "load_cert_chain": [339, 393, 474], "certchain": 339, "8443": 339, "server_auth": [339, 475], "cafil": [339, 393, 467, 475], "capath": [339, 393, 475], "cadata": [339, 475, 481], "op_no_sslv2": [339, 470, 473, 481], "op_no_sslv3": [339, 470, 481], "rc4": [339, 481], "verify_mod": [339, 481], "cert_requir": [339, 481], "load_default_cert": [339, 475, 481], "keylog_filenam": 339, "sslkeylogfil": [339, 481], "ssl3": 339, "client_auth": [339, 475], "chacha20": [339, 477, 481], "poly1305": [339, 477, 481], "protocol_tl": [339, 470, 481], "sslerror": [339, 473], "x509": [339, 393], "certificate_verify_fail": 339, "sslzeroreturnerror": 339, "sslwantreaderror": [339, 476, 481], "sslwantwriteerror": [339, 476, 481], "sslsyscallerror": 339, "ssleoferror": [339, 481], "sslcertverificationerror": [339, 478, 481], "verify_cod": 339, "verify_messag": 339, "certificateerror": 339, "rand_byt": [339, 472, 474, 481], "prng": 339, "rand_status": [339, 481], "rand_add": [339, 481], "csprng": [339, 481], "rand_egd": [339, 470, 481], "1750": 339, "cert_time_to_second": [339, 476, 481], "cert_tim": 339, "notbefor": 339, "notaft": 339, "2018": [339, 471, 478, 481], "1515144883": 339, "5280": [339, 476, 481], "get_server_certif": [339, 470, 474, 481], "ca_cert": 339, "protocol_sslv3": [339, 470, 481], "der_cert_to_pem_cert": 339, "der_cert_byt": 339, "der": [339, 396, 466, 475, 481], "pem_cert_to_der_cert": 339, "pem_cert_str": 339, "get_default_verify_path": [339, 475], "set_default_verify_path": [339, 475, 481], "defaultverifypath": 339, "openssl_cafile_env": 339, "openssl_cafil": 339, "openssl_capath_env": 339, "openssl_capath": 339, "enum_certif": [339, 475, 481], "cert_byt": 339, "encoding_typ": 339, "509": [339, 466, 475, 481], "asn": 339, "x509_asn": 339, "pkcs_7_asn": 339, "oid": [339, 396, 400, 481], "enum_crl": [339, 475, 481], "crls": [339, 475], "cert_non": [339, 481], "cert_opt": [339, 481], "verifymod": 339, "cert_": 339, "verify_default": [339, 475], "verify_flag": [339, 475], "verify_crl_check_leaf": [339, 475], "crl": [339, 475, 481], "verify_crl_check_chain": [339, 475], "verify_x509_strict": [339, 475], "verify_allow_proxy_cert": [339, 481], "verify_x509_trusted_first": 339, "verify_x509_partial_chain": [339, 470], "cas": 339, "verifyflag": 339, "verify_": 339, "minimum_vers": [339, 470, 478, 481], "maximum_vers": [339, 470, 478, 481], "protocol_tlsv1": [339, 470], "protocol_tlsv1_1": [339, 470, 475], "protocol_tlsv1_2": [339, 470, 475, 481], "op_al": 339, "ssl_op_al": 339, "sslv2": [339, 473], "sslv3": [339, 474, 476, 481], "op_no_tlsv1": [339, 470], "op_no_tlsv1_1": [339, 470], "op_no_tlsv1_2": [339, 470], "op_no_tlsv1_3": [339, 470, 481], "op_no_renegoti": [339, 481], "renegoti": [339, 467], "hellorequest": 339, "clienthello": 339, "0h": [339, 481], "op_cipher_server_prefer": [339, 474, 481], "op_single_dh_us": [339, 481], "dh": [339, 470, 481], "secreci": [339, 481], "op_single_ecdh_us": [339, 481], "ecdh": [339, 481], "op_enable_middlebox_compat": [339, 481], "op_no_compress": [339, 474, 481], "op_": 339, "op_no_ticket": 339, "ticket": [339, 481], "op_ignore_unexpected_eof": [339, 470, 481], "op_enable_ktl": [339, 481], "op_legacy_server_connect": [339, 481], "unpatch": [339, 420, 481], "has_alpn": [339, 476], "7301": [339, 467, 473, 476], "has_never_check_common_nam": 339, "hostname_checks_common_nam": [339, 478, 481], "has_ecdh": 339, "ellipt": [339, 474, 481], "diffi": [339, 474], "hellman": [339, 474], "distributor": [339, 423, 477, 481], "6066": 339, "has_npn": 339, "set_npn_protocol": [339, 470, 474], "has_sslv2": 339, "has_sslv3": 339, "has_tlsv1": 339, "has_tlsv1_1": [339, 478], "has_tlsv1_2": 339, "has_tlsv1_3": 339, "channel_binding_typ": 339, "get_channel_bind": [339, 474], "openssl_vers": [339, 467, 473], "2k": [339, 481], "openssl_version_info": [339, 467, 473], "openssl_version_numb": [339, 467, 473], "268443839": 339, "0x100020bf": 339, "alert_description_handshake_failur": 339, "alert_description_internal_error": 339, "alert_description_": 339, "5246": 339, "set_servername_callback": [339, 475], "alertdescript": 339, "sslerrornumb": 339, "ssl_error_": 339, "tlsversion": [339, 481], "minimum_support": 339, "maximum_support": 339, "tlsv1_1": 339, "tlsv1_2": 339, "tlsv1_3": 339, "atop": [339, 465, 466], "diverg": [339, 462], "ssl_read_ex": [339, 481], "ssl_write_ex": [339, 481], "unencrypt": [339, 481], "do_handshak": [339, 475, 476], "match_hostnam": [339, 470, 472, 473, 475, 476, 478, 481], "binary_form": 339, "amongst": [339, 397], "issuer": 339, "3280": 339, "subjectaltnam": 339, "rdns": 339, "rdn": 339, "countrynam": 339, "organizationnam": 339, "startcom": 339, "organizationalunitnam": 339, "commonnam": 339, "serialnumb": 339, "95f0": 339, "571208": 339, "sle257ohy9fvq07z": 339, "stateorprovincenam": 339, "california": [339, 424], "localitynam": 339, "san": [339, 394], "francisco": [339, 394, 481], "frontier": 339, "eff": 339, "emailaddress": 339, "hostmast": 339, "x509v3": [339, 475], "crldistributionpoint": [339, 475], "caissuer": 339, "ocsp": [339, 475], "shared_ciph": [339, 476, 481], "cb_type": 339, "5929": 339, "selected_alpn_protocol": [339, 476], "selected_npn_protocol": [339, 470], "npn": [339, 470, 481], "verify_client_post_handshak": [339, 477, 478, 479, 481], "pha": 339, "certificaterequest": 339, "pythn": [339, 478], "pyth": [339, 478], "sslsession": [339, 477, 481], "session_reus": 339, "protocol_": 339, "sslv23": 339, "ecc": [339, 470, 481], "224": [339, 465, 481], "cert_store_stat": [339, 475], "revoc": [339, 475, 481], "x509_ca": 339, "get_ca_cert": [339, 475], "get_ciph": [339, 477, 481], "set_ciph": 339, "aesgcm": 339, "ecdsa": [339, 473, 481], "alg_bit": 339, "aes256": [339, 481], "gcm": 339, "kx": 339, "50380848": 339, "kea": 339, "strength_bit": 339, "aes128": 339, "50380847": 339, "spdi": 339, "agre": [339, 345, 424, 481], "sni_callback": [339, 481], "openssl_no_tlsext": 339, "server_name_callback": 339, "load_dh_param": [339, 474, 481], "dhfile": 339, "set_ecdh_curv": [339, 474, 481], "curve_nam": 339, "prime256v1": [339, 481], "vincent": [339, 471, 476, 477, 481], "bernat": 339, "do_handshake_on_connect": 339, "suppress_ragged_eof": [339, 481], "sslsocket_class": 339, "sni": [339, 472, 475, 478, 481], "wrap_bio": [339, 476, 478, 481], "sslobject_class": 339, "session_stat": 339, "ssl_sock": 339, "verisign": 339, "keylog": [339, 481], "nss": 339, "wireshark": 339, "num_ticket": [339, 481], "2197947391": 339, "op_no_ssl": [339, 481], "op_no_tl": 339, "security_level": [339, 481], "satisfact": 339, "1422": 339, "agenc": [339, 424], "buy": [339, 465], "keyout": 339, "dn": [339, 396, 481], "provinc": 339, "mystat": 339, "compani": [339, 459, 465, 466, 471, 481], "widgit": 339, "myserv": 339, "myorgan": 339, "digicert": 339, "cacert": 339, "digicertsha2extendedvalidationserverca": 339, "crl3": 339, "g1": [339, 382], "crl4": 339, "01bb6f00122b177f36cab49cea8b6b26": 339, "businesscategori": 339, "311": 339, "delawar": 339, "3359300": 339, "streetaddress": 339, "postalcod": 339, "03894": 339, "4801": 339, "nh": 339, "wolfeboro": 339, "testpypi": 339, "pythonhost": 339, "nhost": 339, "linuxfr": 339, "nginx": 339, "sameorigin": 339, "45679": [339, 481], "varnish": 339, "2188": 339, "lcy1134": 339, "lci": 339, "63072000": 339, "includesubdomain": 339, "mycertfil": 339, "mykeyfil": 339, "bindsocket": 339, "myaddr": 339, "10023": 339, "newsocket": 339, "connstream": 339, "deal_with_cli": 339, "memorybio": [339, 476, 481], "ticket_lifetime_hint": 339, "has_ticket": 339, "client_context": 339, "disjunct": [339, 429], "rekey": 339, "steve": [339, 461, 466, 472, 476, 477, 478, 479, 480, 481], "4086": 339, "schiller": 339, "dierk": 339, "eastlak": 339, "7525": [339, 481], "dtls": 339, "s_ischr": 340, "s_isblk": 340, "s_isreg": 340, "s_isfifo": 340, "s_islnk": 340, "s_issock": 340, "s_isdoor": [340, 481], "s_isport": [340, 481], "s_iswht": [340, 481], "whiteout": 340, "s_imod": 340, "s_ifmt": 340, "s_is": 340, "walktre": 340, "visitfil": 340, "rwxrwxrwx": [340, 474], "s_ifdoor": [340, 475, 481], "s_ifport": [340, 475, 481], "s_ifwht": [340, 475, 481], "s_ifsock": 340, "s_iflnk": [340, 479], "s_ifdir": 340, "v7": [340, 356], "file_attribute_compress": 340, "file_attribute_devic": 340, "file_attribute_directori": 340, "file_attribute_encrypt": 340, "file_attribute_hidden": 340, "file_attribute_integrity_stream": 340, "file_attribute_norm": 340, "file_attribute_not_content_index": 340, "file_attribute_no_scrub_data": 340, "file_attribute_offlin": 340, "file_attribute_readon": 340, "file_attribute_sparse_fil": 340, "file_attribute_system": 340, "file_attribute_temporari": 340, "file_attribute_virtu": 340, "io_reparse_tag_symlink": 340, "io_reparse_tag_mount_point": 340, "io_reparse_tag_appexeclink": [340, 481], "scipi": [341, 442, 449, 452, 459], "minitab": 341, "sas": 341, "matlab": 341, "input_data": 341, "median_low": 341, "median_high": 341, "median_group": [341, 481], "multimod": [341, 479], "geometric_mean": [341, 479, 481], "harmonic_mean": [341, 477, 481], "nomial": 341, "pstdev": [341, 481], "pvarianc": [341, 481], "varianc": [341, 384, 449, 471, 472, 475, 477, 479, 481], "covari": [341, 384, 470, 481], "pearson": [341, 470, 481], "spearman": [341, 472, 481], "linear_regress": [341, 470, 481], "statisticserror": 341, "625": [341, 442, 479], "5625": [341, 447], "outlier": 341, "tendenc": 341, "unbias": 341, "92": [341, 479, 480], "83": [341, 380, 449, 475], "reciproc": 341, "frederick": 341, "gravett": 341, "wallnau": 341, "8th": 341, "gnumer": 341, "ssmedian": 341, "aabbbbccddddeeffffgg": 341, "986893273527251": 341, "815": 341, "xbar": [341, 481], "0810874155219827": 341, "3720238095238095": [341, 449], "01875": 341, "108": [341, 380, 459], "bessel": 341, "percentil": [341, 479], "decil": [341, 479], "empir": 341, "129": 341, "109": [341, 380, 459], "121": [341, 467], "107": [341, 459], "joint": [341, 424], "kepler": 341, "orbital_period": 341, "225": [341, 382, 460], "687": [341, 481], "4331": [341, 475], "10_756": 341, "30_687": 341, "60_190": 341, "dist_from_sun": 341, "150": [341, 382, 386, 463, 467], "228": 341, "778": 341, "1_400": 341, "2_900": 341, "4_500": 341, "imperfect": [341, 362], "9882": 341, "orbit": 341, "period_squar": 341, "dist_cub": 341, "slope": 341, "films_tot": 341, "pluto": 341, "eri": 341, "makemak": 341, "haumea": 341, "cere": 341, "90_560": 341, "204_199": 341, "111_845": 341, "103_410": 341, "1_680": 341, "predicted_dist": 341, "5912": 341, "10166": 341, "6806": 341, "6459": 341, "5_906": 341, "10_152": 341, "6_796": 341, "6_450": 341, "5906": 341, "10152": 341, "6796": 341, "6450": 341, "from_sampl": [341, 479], "cdf": [341, 479], "inv_cdf": [341, 481], "zscore": [341, 481], "temperature_februari": 341, "celsius": 341, "fahrenheit": [341, 479], "birth_weight": 341, "drug_effect": 341, "1060": [341, 479, 481], "195": [341, 477], "1100": [341, 469], "1200": [341, 454], "928": 341, "1192": 341, "810": 341, "958": 341, "1011": [341, 343], "1109": 341, "1162": 341, "1224": 341, "1310": 341, "3652260728": 341, "4582495471": 341, "6582483453": 341, "4591308524824727": 341, "8035946855390597": 341, "175091447274739": 341, "750": 341, "8402": [341, 475], "8675309": 341, "8406": 341, "height_mal": 341, "height_femal": 341, "weight_mal": 341, "170": [341, 382], "weight_femal": 341, "foot_size_mal": 341, "foot_size_femal": 341, "posterior": 341, "prior_mal": 341, "prior_femal": 341, "posterior_mal": 341, "posterior_femal": 341, "posteriori": 341, "male": 341, "kde_norm": 341, "smooth": 341, "kernel_h": 341, "x_i": 341, "f_hat": 341, "xarr": 341, "yarr": 341, "unadorn": 342, "widen": [342, 481], "0b100101": [342, 467, 469], "lstrip": [342, 463, 481], "100101": 342, "bit_count": [342, 470, 481], "0b10011": 342, "x04": [342, 396, 462], "xff": [342, 474], "xfc": 342, "xe8": 342, "x10": [342, 462], "64512": 342, "16711680": 342, "little_ord": 342, "tohexstr": 342, "0x3": 342, "a7p10": 342, "3740": 342, "d380000000000p": 342, "hash_info": [342, 350, 426, 448, 473, 475], "invmod": 342, "hash_fract": 342, "hash_valu": 342, "fermat": 342, "hash_float": 342, "hash_complex": 342, "breadth": [342, 382, 450], "gg": 342, "haunt": 342, "economi": 342, "subrang": 342, "linspac": 342, "zoot": 342, "digraph": 342, "fillchar": 342, "expandtab": [342, 362], "t012": 342, "t0123": 342, "t01234": 342, "0123": 342, "01234": 342, "ideograph": 342, "007f": [342, 433], "0660": [342, 460], "superscript": 342, "kharosthi": 342, "numeric_typ": 342, "isidentifi": [342, 481], "2155": 342, "vulgar": 342, "zs": 342, "ws": [342, 392, 417], "istitl": 342, "uncas": 342, "justifi": [342, 367, 374, 466], "spacious": 342, "cmowz": 342, "removeprefix": [342, 480, 481], "testhook": 342, "basetestcas": 342, "removesuffix": [342, 480, 481], "misctest": 342, "tmpdirmixin": 342, "rindex": [342, 467, 473, 474], "rjust": [342, 444, 464, 474], "rsplit": [342, 464, 467, 473, 481], "ipz": 342, "mississ": 342, "x1c": 342, "x1d": 342, "x85": 342, "u2028": 342, "u2029": 342, "nde": [342, 473], "rkl": 342, "kl": 342, "comment_str": 342, "swapcas": [342, 481], "apostroph": [342, 469], "bill": [342, 444, 460, 466], "capword": [342, 343, 481], "zfill": [342, 444, 463], "00042": 342, "0042": 342, "sprintf": [342, 460, 462], "parenthesis": [342, 481], "somenam": 342, "1e50": 342, "ieee754": 342, "emphasis": 342, "blind": [342, 475], "2ef0": 342, "f1f2": 342, "xf0": 342, "xf1": 342, "xf2": 342, "f0f1f2": 342, "f0": 342, "f0_f1f2": 342, "uuddlrlrab": 342, "55554444": 342, "4c524c52": 342, "4142": 342, "aeiou": 342, "ths": 342, "shrt": 342, "fillbyt": 342, "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz": [342, 467], "abcabc1": 342, "abc1": 342, "abcabc": 342, "abcdefghijklmnopqrstuvwxyz": [342, 343, 467], "subview": 342, "abcefg": 342, "0x7f3ddc9f4350": 342, "bce": 342, "22222222": 342, "33333333": 342, "44444444": 342, "zbcefg": 342, "z123fg": 342, "rvalu": 342, "z1spam": 342, "ce": [342, 459, 460, 481], "bepoint": 342, "616263": 342, "toreadon": [342, 481], "byte_length": 342, "new_items": 342, "1d": [342, 481], "zyz": 342, "ayz": 342, "3d": [342, 444], "2d": [342, 444, 481], "32000": 342, "32001": 342, "32002": [342, 481], "sjoerd": [342, 444, 460, 466], "cardin": 342, "disjoint": 342, "issubset": [342, 463], "issuperset": [342, 463, 481], "symmetric_differ": [342, 463], "cbs": 342, "intersection_upd": [342, 463, 466], "difference_upd": [342, 466, 480, 481], "symmetric_difference_upd": [342, 463], "4098": [342, 440, 444], "4127": [342, 440, 444], "salad": 342, "juic": 342, "mappingproxi": 342, "synchronis": [342, 474], "send_post_request": 342, "weakkeydictionari": [342, 400, 465, 481], "weakmethod": [342, 400, 475, 481], "weakset": [342, 400, 467, 471, 481], "weakvaluedictionari": [342, 400, 450, 465, 481], "__unpacked__": [342, 481], "union_object": 342, "whoami": 342, "_namedintconst": 342, "10735": [342, 470, 471, 478, 479, 480], "set_int_max_str_digit": [342, 350, 360, 481], "5432": 342, "i_squar": 342, "7144": 342, "578966293710682886880994035146873798396722250538762761564": 342, "9252925514383915483333812743580549779436104706260696366600": 342, "571186405732": 342, "get_int_max_str_digit": [342, 350], "upper_bound": [342, 428], "68000": 342, "lower_bound": [342, 428], "4004": 342, "current_limit": 342, "ascii_uppercas": [343, 462], "0123456789abcdefabcdef": 343, "octdigit": [343, 433], "01234567": 343, "formfe": [343, 362, 433], "vformat": 343, "repack": 343, "literal_text": 343, "get_field": 343, "used_key": 343, "get_valu": 343, "check_unused_arg": 343, "used_arg": 343, "format_field": 343, "convert_field": 343, "arg_nam": 343, "attribute_nam": 343, "element_index": 343, "index_str": 343, "thou": [343, 473], "shalt": [343, 473], "quest": [343, 440], "ton": 343, "grouping_opt": 343, "000000120": 343, "682": [343, 471], "insignific": [343, 481], "significand": [343, 350], "abra": 343, "cad": 343, "24n": 343, "81w": 343, "coord": [343, 472, 481], "5j": [343, 447], "test1": [343, 425], "test2": [343, 425], "2a": [343, 481], "101010": 343, "0o52": [343, 466], "0b101010": 343, "1234567890": [343, 466], "890": 343, "02x": 343, "c0a80001": 343, "dxob": 343, "1010": [343, 479], "flufl": 343, "noun": [343, 481], "ific": 343, "safe_substitut": [343, 450, 464], "is_valid": [343, 471, 481], "get_identifi": [343, 349, 471, 481], "kung": 343, "pao": 343, "idpattern": [343, 481], "_a": 343, "braceidpattern": [343, 481], "unbrac": 343, "3454": [344, 463, 481], "mkstringprep": [344, 463], "in_table_a1": 344, "tablea": 344, "in_table_b1": 344, "tableb": 344, "map_table_b2": 344, "map_table_b3": 344, "in_table_c11": 344, "tablec": 344, "in_table_c12": 344, "in_table_c11_c12": 344, "in_table_c21": 344, "in_table_c22": 344, "in_table_c21_c22": 344, "in_table_c3": 344, "in_table_c4": 344, "in_table_c5": 344, "in_table_c6": 344, "in_table_c7": 344, "in_table_c8": 344, "in_table_c9": 344, "in_table_d1": 344, "in_table_d2": 344, "iter_unpack": [345, 475], "1700": 345, "10c": 345, "cccccccccc": 345, "0s": 345, "0c": 345, "hhhh": [345, 460], "bhl": 345, "99999": 345, "3s": 345, "x32": 345, "x12": [345, 396], "serialnum": 345, "gradelevel": 345, "10shhb": 345, "4658": 345, "ci": [345, 459, 478, 479, 481], "0x12131415": 345, "x14": 345, "x13": 345, "llh0l": 345, "lhl": 345, "llh": 345, "revisit": [345, 481], "qh6xq": 345, "qqh": 345, "qqh6x": 345, "capture_output": [346, 478, 481], "other_popen_kwarg": 346, "completedprocess": [346, 476, 481], "timeoutexpir": 346, "calledprocesserror": [346, 467, 476, 481], "crw": [346, 476], "systemroot": 346, "system32": [346, 459], "check_returncod": 346, "subprocesserror": [346, 481], "symmetri": [346, 460], "check_cal": 346, "preexec_fn": [346, 464, 479, 481], "startupinfo": [346, 464, 478, 481], "restore_sign": 346, "start_new_sess": [346, 479, 481], "pass_fd": [346, 479, 481], "extra_group": [346, 481], "pipes": [346, 481], "process_group": [346, 481], "lpapplicationnam": 346, "lpcommandlin": 346, "vike": 346, "seldom": 346, "handle_list": 346, "lpattributelist": [346, 478], "sigxfz": 346, "sigxfsz": 346, "create_new_consol": 346, "above_normal_priority_class": 346, "below_normal_priority_class": 346, "high_priority_class": 346, "idle_priority_class": 346, "normal_priority_class": 346, "realtime_priority_class": 346, "create_no_window": 346, "detached_process": 346, "create_default_error_mod": 346, "create_breakaway_from_job": 346, "ifconfig": [346, 481], "qemu": [346, 479, 481], "hadn": [346, 481], "dwflag": 346, "hstdinput": 346, "hstdoutput": 346, "hstderror": 346, "wshowwindow": 346, "startf_usestdhandl": 346, "startf_useshowwindow": 346, "ncmdshow": 346, "showwindow": 346, "sw_showdefault": 346, "sw_hide": 346, "startupinfoex": 346, "updateprocthreadattribut": 346, "error_invalid_paramet": 346, "std_input_handl": 346, "conin": 346, "std_output_handl": 346, "conout": 346, "std_error_handl": 346, "realtim": 346, "non_existent_fil": 346, "mycmd": 346, "myarg": 346, "dmesg": 346, "hda": 346, "retcod": 346, "child_stdin": 346, "child_stdout": 346, "child_stderr": 346, "child_stdout_and_stderr": 346, "popen4": 346, "somestr": 346, "capturestderr": 346, "getstatusoutput": [346, 475, 481], "getoutput": [346, 481], "_use_vfork": 346, "nnnnnn": 346, "_use_posix_spawn": 346, "knob": 346, "snd": 347, "audio_file_mag": 347, "audio_file_encoding_mulaw_8": 347, "audio_file_encoding_linear_8": 347, "audio_file_encoding_linear_16": 347, "audio_file_encoding_linear_24": 347, "audio_file_encoding_linear_32": 347, "audio_file_encoding_alaw_8": 347, "audio_file_encoding_float": 347, "audio_file_encoding_doubl": 347, "audio_file_encoding_adpcm_g721": 347, "audio_file_encoding_adpcm_g722": 347, "audio_file_encoding_adpcm_g723_3": 347, "audio_file_encoding_adpcm_g723_5": 347, "711": 347, "compile_typ": 349, "symbolt": [349, 480, 481], "get_typ": [349, 393, 475], "get_lineno": 349, "is_optim": 349, "is_nest": 349, "has_children": 349, "get_children": [349, 374], "get_symbol": 349, "get_paramet": 349, "get_loc": 349, "get_glob": 349, "get_nonloc": 349, "get_fre": 349, "get_method": [349, 393, 474], "is_referenc": 349, "is_import": 349, "is_paramet": 349, "is_nonloc": [349, 481], "is_declared_glob": [349, 467], "is_loc": 349, "is_annot": 349, "is_fre": 349, "is_assign": 349, "is_namespac": 349, "some_func": 349, "get_namespac": 349, "abiflag": [350, 448, 454, 473, 479, 481], "unobserv": 350, "__cantrace__": 350, "stdlib_module_nam": [350, 470, 481], "call_trac": [350, 448, 481], "_clear_type_cach": [350, 448], "nomenclatur": 350, "_debugmallocstat": [350, 448], "dllhandl": 350, "_emscripten_info": [350, 481], "emscripten_vers": 350, "js": [350, 454], "v14": 350, "__breakpointhook__": [350, 448, 481], "__displayhook__": [350, 448], "__excepthook__": [350, 363, 448, 470, 481], "__unraisablehook__": [350, 448], "dynload": [350, 352, 454, 481], "underdevelop": 350, "no_user_sit": [350, 473], "ignore_environ": [350, 473, 481], "hash_random": [350, 481], "division_warn": [350, 473, 474], "1999": [350, 364, 393, 424], "iec": 350, "dbl_epsilon": 350, "dig": 350, "dbl_dig": 350, "mant_dig": [350, 466], "dbl_mant_dig": 350, "dbl_max_exp": 350, "max_10_exp": 350, "dbl_max_10_exp": 350, "min_exp": 350, "dbl_min_exp": 350, "min_10_exp": 350, "dbl_min_10_exp": 350, "flt_radix": 350, "flt_round": 350, "character": 350, "14159265358979": 350, "15g": 350, "9876543211234567": 350, "16g": 350, "9876543211234568": 350, "float_repr_styl": [350, 448, 467], "getallocatedblock": [350, 448, 475], "getunicodeinterneds": [350, 472], "getandroidapilevel": [350, 478, 481], "getdefaultencod": [350, 448], "rtld_": [350, 481], "_enablelegacywindowsfsencod": [350, 453, 477], "getswitchinterv": [350, 448, 480, 481], "unidentifi": 350, "getprofil": [350, 363, 448, 466, 470, 481], "gettrac": [350, 363, 448, 466, 470, 481], "getwindowsvers": [350, 467, 477, 481], "service_pack": [350, 467], "service_pack_minor": [350, 467], "service_pack_major": [350, 467], "suite_mask": [350, 467], "product_typ": [350, 467], "platform_vers": [350, 477, 481], "ver_platform_win32_nt": 350, "ver_nt_workst": 350, "workstat": 350, "ver_nt_domain_control": 350, "ver_nt_serv": 350, "getversionex": [350, 481], "osversioninfoex": 350, "get_asyncgen_hook": [350, 448, 481], "asyncgen_hook": 350, "firstit": 350, "get_coroutine_origin_tracking_depth": [350, 448, 478, 481], "0x010502f0": 350, "bits_per_digit": [350, 454, 467, 469], "sizeof_digit": [350, 467, 469], "engag": 350, "maxunicod": [350, 448, 474], "0xffff": [350, 474, 481], "find_modul": [350, 421, 430, 463, 470, 471, 472, 474, 475, 478, 481], "freebsd8": 350, "linux2": [350, 474], "linux3": [350, 474], "aix5": 350, "aix7": [350, 479, 481], "coarser": 350, "suse": [350, 454, 480, 481], "profilefunc": 350, "timeslic": 350, "tracefunc": 350, "lnotab_not": [350, 477], "set_asyncgen_hook": [350, 428, 448, 481], "is_stack_trampoline_act": [350, 472, 481], "thread_info": [350, 448, 474, 481], "tracebacklimit": [350, 481], "api_vers": [350, 448, 463], "releaselevel": [350, 467, 469], "winver": 350, "xa": 350, "2a3": 350, "9899": 350, "jtc1": 350, "sc22": 350, "wg14": 350, "n1256": 350, "use_tool_id": 351, "tool_id": 351, "free_tool_id": 351, "get_tool": 351, "debugger_id": 351, "coverage_id": 351, "profiler_id": 351, "optimizer_id": 351, "oblig": [351, 424, 460], "c_rais": 351, "exception_handl": [351, 481], "py_resum": 351, "py_return": 351, "py_start": 351, "py_throw": [351, 481], "py_unwind": [351, 481], "py_yield": 351, "no_ev": 351, "explict": 351, "comparis": 351, "get_ev": 351, "set_ev": 351, "event_set": 351, "get_local_ev": 351, "codetyp": [351, 383, 479, 481], "set_local_ev": [351, 481], "restart_ev": 351, "register_callback": [351, 481], "instruction_offset": 351, "line_numb": 351, "destination_offset": 351, "untaken": 351, "nuanc": 352, "landmark": [352, 459, 477, 481], "majorvers": 352, "minorvers": 352, "python311": 352, "alongsid": [352, 373, 419, 424, 433, 459], "py_enable_shar": 353, "libdir": [353, 458], "ar": [353, 454, 481], "posix_venv": [353, 471, 481], "nt_venv": [353, 471, 481], "platstdlib": [353, 473], "platlib": [353, 473, 481], "purelib": [353, 397, 473], "platinclud": [353, 473], "userbas": [353, 473], "stash": 353, "trifl": 353, "mnt": 353, "get_scheme_nam": 353, "get_default_schem": [353, 481], "_get_default_schem": 353, "get_preferred_schem": [353, 471, 481], "get_path": [353, 467, 473, 481], "_get_preferred_schem": 353, "redistributor": [353, 467], "_install_schem": 353, "get_path_nam": 353, "get_python_vers": [353, 473], "get_platform": [353, 473, 481], "i586": [353, 473], "sun4u": 353, "64bit": [353, 472, 481], "intel64": [353, 481], "em64t": 353, "macosx": [353, 401, 457, 471, 472, 473, 481], "ppc": [353, 466, 473], "ppc64": [353, 481], "i386": [353, 458, 459, 476], "fat": [353, 403], "is_python_build": [353, 467], "parse_config_h": 353, "get_config_h_filenam": 353, "ac_apple_universal_build": 353, "aix_genuine_cplusplus": 353, "arflag": 353, "log_mask": 354, "pri": 354, "log_upto": 354, "log_pid": 354, "log_con": 354, "log_ndelay": 354, "log_odelay": 354, "log_nowait": 354, "log_perror": 354, "file_or_dir": 355, "filename_on": 355, "nannynag": 355, "process_token": 355, "ustar": [356, 466, 481], "longlink": 356, "10240": 356, "readerror": [356, 481], "compressionerror": 356, "tape": 356, "is_tarfil": [356, 481], "tarerror": 356, "streamerror": 356, "extracterror": 356, "errorlevel": 356, "headererror": 356, "frombuf": 356, "filtererror": 356, "absolutepatherror": 356, "outsidedestinationerror": 356, "specialfileerror": [356, 467], "absolutelinkerror": 356, "linkoutsidedestinationerror": [356, 481], "regtyp": 356, "aregtyp": 356, "lnktype": 356, "symtyp": 356, "chrtype": 356, "blktype": 356, "dirtyp": 356, "fifotyp": 356, "conttyp": 356, "gnutype_longnam": 356, "gnutype_longlink": 356, "gnutype_spars": 356, "ustar_format": 356, "gnu_format": 356, "pax_format": [356, 466], "default_format": [356, 477], "ignore_zero": [356, 481], "pax_head": 356, "extractal": [356, 420, 465, 466, 476, 481], "numeric_own": [356, 476, 481], "set_attr": 356, "extractfil": [356, 481], "extraction_filt": 356, "fully_trust": 356, "arcnam": [356, 420], "addfil": 356, "gettarinfo": 356, "fromtarfil": 356, "tobuf": 356, "linknam": 356, "gname": 356, "chksum": 356, "devmajor": [356, 481], "devminor": [356, 481], "offset_data": 356, "new_tarinfo": 356, "old_tarinfo": 356, "isreg": 356, "issym": 356, "islnk": 356, "ischr": 356, "isblk": 356, "isfifo": 356, "isdev": 356, "706": [356, 470, 471, 472, 479, 480], "tar_filt": 356, "data_filt": [356, 481], "fully_trusted_filt": 356, "crucial": [356, 430, 460], "abus": [356, 434, 473, 481], "tinker": 356, "my_tarfil": 356, "warn_the_us": 356, "statefulfilt": 356, "filter_func": 356, "file_count": 356, "brian_1979": [356, 420], "source1": [356, 420], "sourcen": [356, 420], "output_dir": [356, 420], "filternam": 356, "py_fil": 356, "quux": 356, "bsdtar": 356, "libarch": 356, "unmaintain": [356, 373, 473, 475, 477], "ancient": [356, 465, 481], "seventh": 356, "miscalcul": [356, 481], "nowaday": 356, "telopt_": 357, "iac": 357, "dont": 357, "wont": 357, "subnegoti": 357, "dm": 357, "brk": 357, "ao": 357, "ayt": 357, "ec": [357, 481], "ga": 357, "read_": 357, "tn": 357, "read_until": 357, "read_al": 357, "read_som": 357, "read_very_eag": 357, "midst": 357, "read_eag": 357, "read_lazi": 357, "read_very_lazi": 357, "read_sb_data": 357, "subopt": 357, "get_socket": 357, "mt_interact": 357, "uncompil": 357, "set_option_negotiation_callback": 357, "temporaryfil": [358, 481], "temporarydirectori": [358, 473, 481], "spooledtemporaryfil": [358, 466, 471, 474, 481], "delete_on_clos": [358, 472, 481], "max_siz": [358, 384], "spool": 358, "_file": 358, "ignore_cleanup_error": [358, 481], "gettempprefix": 358, "gettempprefixb": 358, "tmpdir": [358, 481], "gettempdir": [358, 481], "tempdir": [358, 400, 481], "gettempdirb": [358, 481], "tmpdirnam": [358, 473], "tmptjujjt": 358, "tcgetattr": [359, 381, 481], "iflag": 359, "oflag": 359, "lflag": 359, "ispe": 359, "ospe": 359, "vmin": 359, "vtime": 359, "tcsetattr": [359, 381, 481], "tcsanow": 359, "tcsadrain": 359, "tcsaflush": [359, 381], "tcsendbreak": 359, "tcdrain": 359, "tcflush": 359, "tciflush": 359, "tcoflush": 359, "tcioflush": 359, "tcflow": 359, "tcooff": 359, "tcoon": 359, "tcioff": 359, "tcion": 359, "tcgetwins": [359, 481], "ws_row": 359, "ws_col": 359, "tiocgwinsz": 359, "tiocgsiz": 359, "tcsetwins": [359, 481], "winsiz": [359, 481], "tiocswinsz": 359, "tiocssiz": 359, "regrtest": [360, 380, 463, 467, 481], "test_": [360, 420, 481], "pyunit": [360, 461], "mytestcase1": 360, "test_feature_on": 360, "test_feature_two": 360, "mytestcase2": 360, "whitebox": 360, "blackbox": 360, "improp": [360, 392, 426, 460, 472, 475, 481], "crop": 360, "anomal": 360, "testfuncacceptssequencesmixin": 360, "mysuperwhammyfunct": 360, "test_func": 360, "acceptlist": 360, "acceptstr": 360, "accepttupl": 360, "beck": [360, 386, 461], "test_main": [360, 481], "testload": [360, 386, 387, 467, 471, 472, 476, 481], "loadtestsfrommodul": [360, 386, 471, 472, 476, 481], "test_spam": 360, "uall": [360, 463], "largefil": [360, 481], "pcbuild": [360, 459, 466, 481], "testfail": 360, "resourcedeni": 360, "skiptest": [360, 386, 467, 475, 481], "is_jython": 360, "is_android": [360, 481], "unix_shel": [360, 481], "loopback_timeout": [360, 481], "internet_timeout": [360, 481], "transient_internet": 360, "short_timeout": [360, 481], "buildbot": [360, 386, 454, 481], "long_timeout": [360, 481], "pipe_max_s": 360, "sock_max_s": 360, "test_support_dir": 360, "test_home_dir": 360, "test_data_dir": 360, "max_py_ssize_t": 360, "max_memus": 360, "set_memlimit": 360, "real_max_memus": 360, "missing_c_docstr": 360, "with_doc_str": [360, 454], "have_docstr": 360, "test_http_url": [360, 481], "always_eq": 360, "never_eq": 360, "busy_retri": 360, "sleeping_retri": 360, "init_delay": 360, "max_delay": 360, "backoff": [360, 481], "is_resource_en": 360, "python_is_optim": 360, "o0": [360, 481], "with_pymalloc": 360, "_testcapi": [360, 454, 481], "sortdict": 360, "findfil": [360, 481], "get_pages": 360, "check_impl_detail": 360, "record_original_stdout": 360, "get_original_stdout": 360, "args_from_interpreter_flag": 360, "optim_args_from_interpreter_flag": 360, "captured_stdin": 360, "captured_stdout": 360, "captured_stderr": [360, 481], "disable_faulthandl": 360, "gc_collect": 360, "disable_gc": 360, "swap_attr": [360, 481], "new_val": 360, "swap_item": [360, 481], "flush_std_stream": 360, "print_warn": 360, "wait_process": [360, 481], "calcobjs": [360, 481], "calcvobjs": 360, "checksizeof": 360, "anticipate_failur": 360, "expectedfailur": [360, 386, 469, 481], "system_must_validate_cert": 360, "run_with_local": 360, "catstr": 360, "run_with_tz": 360, "requires_freebsd_vers": 360, "min_vers": 360, "requires_linux_vers": 360, "requires_mac_vers": 360, "requires_ieee_754": 360, "requires_zlib": [360, 481], "requires_gzip": 360, "requires_bz2": 360, "requires_lzma": 360, "requires_resourc": 360, "requires_docstr": 360, "requires_limited_api": 360, "cpython_on": [360, 481], "impl_detail": 360, "no_trac": 360, "refcount_test": 360, "bigmemtest": 360, "memus": 360, "_4g": 360, "bigaddrspacetest": 360, "check_syntax_error": 360, "errtext": 360, "open_urlresourc": 360, "reap_children": 360, "hog": 360, "refleak": [360, 472, 481], "get_attribut": 360, "catch_unraisable_except": [360, 481], "load_package_test": [360, 481], "pkg_dir": 360, "standard_test": [360, 386], "detect_api_mismatch": 360, "ref_api": 360, "other_api": 360, "test_inst": 360, "object_to_patch": 360, "run_in_subinterp": 360, "check_free_after_iter": 360, "missing_compiler_execut": [360, 481], "cmd_name": 360, "check__all__": [360, 481], "test_cas": [360, 386], "name_of_modul": 360, "not_export": [360, 481], "_csv": [360, 481], "misctestcas": 360, "test__all__": 360, "othertestcas": 360, "bar_const": 360, "foo_const": 360, "_bar": 360, "skip_if_broken_multiprocessing_synchron": [360, 481], "check_disallow_instanti": 360, "adjust_int_max_str_digit": 360, "max_digit": 360, "suppresscrashreport": [360, 481], "seterrormod": 360, "coredump": [360, 481], "savesign": 360, "matcher": [360, 388], "match_valu": 360, "ipv6_en": 360, "find_unused_port": [360, 481], "elicit": 360, "ephemer": [360, 400], "bind_port": 360, "s_server": 360, "so_exclusiveaddrus": 360, "bind_unix_socket": 360, "skip_unless_bind_unix_socket": [360, 481], "resource_nam": 360, "interpreter_requires_environ": 360, "skipif": [360, 386], "assert_python": 360, "pythonusersit": 360, "run_python_until_end": [360, 481], "env_var": 360, "__isol": 360, "__cleanenv": 360, "__cwd": 360, "assert_python_ok": [360, 481], "assert_python_failur": [360, 481], "spawn_python": 360, "kill_python": 360, "make_script": 360, "script_dir": 360, "script_basenam": 360, "omit_suffix": 360, "make_zip_script": 360, "zip_dir": 360, "zip_basenam": 360, "script_nam": [360, 405], "name_in_zip": 360, "make_pkg": 360, "init_sourc": 360, "make_zip_pkg": 360, "bytecodetestcas": 360, "get_disassembly_as_str": 360, "assertinbytecod": 360, "_unspecifi": 360, "assertnotinbytecod": [360, 481], "reap_thread": 360, "threading_cleanup": [360, 481], "original_valu": 360, "threading_setup": [360, 481], "wait_threads_exit": 360, "catch_threading_except": [360, 481], "fs_nonascii": 360, "savedcwd": 360, "testfn": [360, 481], "testfn_nonascii": 360, "testfn_unencod": 360, "testfn_undecod": 360, "testfn_unicod": 360, "environmentvarguard": [360, 466], "fakepath": 360, "can_symlink": 360, "can_xattr": 360, "xattr": [360, 481], "change_cwd": 360, "create_empty_fil": 360, "fd_count": [360, 481], "fs_is_case_insensit": 360, "make_bad_fd": 360, "skip_unless_symlink": 360, "skip_unless_xattr": 360, "temp_cwd": [360, 481], "tempcwd": 360, "temp_dir": 360, "temp_umask": 360, "import_fresh_modul": [360, 481], "reinsert": [360, 374, 467, 469], "py_warn": 360, "_warn": [360, 470, 481], "c_warn": 360, "required_on": 360, "modules_setup": 360, "modules_cleanup": 360, "oldmodul": 360, "make_legacy_pyc": [360, 481], "cleanimport": 360, "dirsonsyspath": 360, "ignore_warn": 360, "catch_warn": [360, 398, 466, 471, 472, 481], "simplefilt": [360, 398, 466, 467, 471, 481], "warning_help": 360, "test_suppress_warn": 360, "check_no_resource_warn": [360, 481], "check_syntax_warn": [360, 481], "check_warn": [360, 466], "regexp": [360, 473, 481], "warningcategori": 360, "warningrecord": 360, "hey": 360, "warningsrecord": 360, "textwrapp": [362, 463, 475, 481], "initial_ind": 362, "subsequent_ind": 362, "expand_tab": 362, "replace_whitespac": 362, "fix_sentence_end": 362, "break_long_word": [362, 481], "drop_whitespac": [362, 466], "break_on_hyphen": [362, 481], "max_lin": [362, 475], "thello": 362, "nworld": 362, "frankenstein": 362, "insec": 362, "camelcas": 363, "overcom": [363, 473, 481], "activecount": [363, 466, 470, 481], "main_thread": [363, 475], "settrace_all_thread": [363, 472, 481], "setprofile_all_thread": [363, 472, 481], "_threading_loc": 363, "threadgroup": 363, "setnam": [363, 470, 481], "native_id": [363, 479, 481], "tid": [363, 481], "isdaemon": [363, 466, 470, 481], "setdaemon": [363, 466, 470, 481], "awaken": 363, "cv": [363, 382], "an_item_is_avail": 363, "get_an_available_item": 363, "make_an_item_avail": 363, "notifyal": [363, 470, 481], "dutch": [363, 433], "scientist": 363, "edsger": 363, "dijkstra": 363, "awoken": 363, "maxconnect": 363, "pool_sema": 363, "connectdb": 363, "isset": [363, 470, 481], "begun": [363, 463, 464], "accept_connect": 363, "process_server_connect": 363, "make_connect": [363, 417], "process_client_connect": 363, "awri": 363, "some_lock": 363, "1969": 364, "acronym": 364, "compromis": 364, "wisdom": 364, "tm_gmtoff": [364, 477, 481], "tm_zone": [364, 477, 481], "tm": [364, 373], "1993": [364, 481], "pthread_getcpuclockid": [364, 478, 481], "clk_id": 364, "clock_getr": [364, 474], "clock_gettim": [364, 474, 480, 481], "clock_gettime_n": [364, 478, 481], "clock_settim": [364, 474], "clock_realtim": [364, 471, 481], "clock_settime_n": [364, 478, 481], "get_clock_info": [364, 474, 481], "thread_tim": [364, 478, 480, 481], "ntp": 364, "monotonic_n": [364, 478, 481], "perf_counter_n": [364, 365, 478, 481], "process_time_n": [364, 478, 481], "suspens": [364, 426, 428], "clock_nanosleep": [364, 471, 481], "nanosleep": [364, 471, 481], "tm_year": [364, 462], "tm_mon": 364, "tm_mday": 364, "tm_hour": 364, "tm_min": 364, "tm_sec": 364, "tm_wday": 364, "tm_yday": 364, "335": 364, "tm_day": 364, "time_n": [364, 478, 481], "thread_time_n": [364, 478, 481], "clock_thread_cputime_id": [364, 480, 481], "tzset": [364, 481], "meridian": 364, "julian": [364, 475, 476, 481], "05edt": 364, "m4": [364, 454, 481], "m10": 364, "aest": 364, "10aedt": 364, "tzfile": 364, "datafil": [364, 463], "australia": 364, "melbourn": 364, "egypt": 364, "eet": 364, "eest": 364, "clock_boottim": [364, 478, 481], "clock_monoton": [364, 471, 478, 481], "discontinu": [364, 481], "settimeofday": 364, "clock_highr": 364, "nonadjust": 364, "clock_monotonic_raw": 364, "clock_process_cputime_id": 364, "clock_prof": [364, 478, 481], "clock_tai": [364, 481], "ptp": 364, "clock_uptim": [364, 478, 481], "uptim": [364, 478, 481], "clock_uptime_raw": [364, 479, 481], "asleep": 364, "1123": [364, 469], "usec": [365, 476], "3018611848820001": 365, "2727368790656328": 365, "23702679807320237": 365, "19665591977536678": 365, "default_tim": 365, "autorang": [365, 477, 481], "time_taken": 365, "wallclock": 365, "nsec": 365, "5000000": 365, "0877": 365, "41440500499993504": 365, "7246671520006203": 365, "3955516149999312": 365, "40183617287970225": 365, "37027556854118704": 365, "38344867356679524": 365, "3712595970846668": 365, "37866875250654886": 365, "9138244460009446": 365, "5829014980008651": 365, "04215312199994514": 365, "08588060699912603": 365, "stupid": 365, "woefulli": 367, "tkdoc": [367, 481], "roseman": [367, 470, 480, 481], "978": 367, "1999149567": 367, "alan": [367, 465, 466, 472, 478, 481], "moor": [367, 462, 463, 466, 475, 476, 478, 481], "1788835886": 367, "lutz": 367, "0596158101": 367, "ousterhout": 367, "jone": [367, 463, 465, 475, 476], "0321336330": 367, "multitask": 367, "bridg": [367, 473], "xlib": 367, "cocoa": [367, 457, 473, 481], "gdi": 367, "screennam": [367, 373], "usetk": 367, "argv0": 367, "winfo_id": 367, "winfo_par": 367, "loadtk": 367, "frm": 367, "grid": [367, 372, 374], "lbl": 367, "btn": [367, 374, 382], "winfo_x": 367, "winfo_height": 367, "winfo_view": 367, "winfo": 367, "reenter": 367, "idiosyncrat": 367, "relief": [367, 374], "groov": 367, "placer": 367, "qualit": 367, "183": 367, "parcel": [367, 374], "ipadx": 367, "ipadi": 367, "padx": 367, "padi": 367, "textvari": [367, 374], "onvalu": 367, "offvalu": 367, "stringvar": [367, 374], "intvar": [367, 481], "doublevar": 367, "booleanvar": [367, 481], "entrythingi": 367, "print_cont": 367, "wm": 367, "icon": [367, 371, 459, 462, 463, 481], "_root": 367, "compass": 367, "sw": 367, "nw": 367, "gray25": 367, "gray50": 367, "hourglass": 367, "questhead": 367, "contrib": 367, "gumbi": 367, "print_it": 367, "rrggbb": 367, "rrrgggbbb": 367, "rrrrggggbbbb": 367, "160": [367, 380, 382, 424], "cursorfont": 367, "xc_": 367, "xc_hand2": 367, "hand2": 367, "179": 367, "centimetr": 367, "millimetr": 367, "5i": 367, "widthxheight": 367, "200x100": 367, "3i": 367, "2i": 367, "4c": 367, "43c": 367, "sunken": 367, "ridg": 367, "scrollcommand": [367, 374], "3tk": 367, "turn_r": 367, "activeforeground": 367, "send_ev": 367, "keysym": 367, "keysym_num": 367, "x_root": 367, "y_root": 367, "entryconfig": 367, "bitmapimag": 367, "photoimag": [367, 374, 479, 481], "pillow": [367, 448], "createfilehandl": [367, 481], "deletefilehandl": 367, "maxbytecount": 367, "chooser": 368, "askcolor": 368, "buttonpress": 369, "dnd_start": 369, "dnd_accept": 369, "old_target": 369, "dnd_leav": 369, "dnd_enter": 369, "dnd_commit": 369, "dnd_end": 369, "dndhandler": 369, "buttonreleas": 369, "on_mot": 369, "on_releas": 369, "slant": [370, 460], "overstrik": 370, "displayof": 370, "cget": [370, 374], "ascent": 370, "descent": 370, "linespac": 370, "nametofont": [370, 481], "showinfo": 371, "showwarn": [371, 398, 466, 481], "showerror": 371, "askquest": 371, "yesno": 371, "askokcancel": 371, "askretrycancel": 371, "askyesno": 371, "askyesnocancel": 371, "abortretryignor": 371, "okcancel": 371, "retrycancel": 371, "yesnocancel": 371, "vbar": [372, 375], "hlist": [373, 481], "fileentri": 373, "panedwindow": [373, 374, 481], "tixinspect": 373, "inspector": 373, "balloon": 373, "combo": [373, 374], "subwidget": 373, "labelentri": 373, "mega": 373, "labelfram": [373, 374], "optionmenu": [373, 481], "popupmenu": 373, "tk_popup": 373, "stdbuttonbox": 373, "motif": 373, "dirlist": 373, "dirtre": 373, "dirselectdialog": 373, "dirselectbox": 373, "exfileselectbox": 373, "tixexfileselectdialog": 373, "fileselectbox": 373, "checklist": 373, "checkbutton": [373, 374, 481], "tlist": 373, "listnotebook": 373, "tixnotebook": 373, "xpm": 373, "inputon": 373, "tixcommand": 373, "tix_configur": 373, "cnf": [373, 458], "tix_cget": 373, "tix_getbitmap": 373, "tix_addbitmapdir": 373, "tix_getimag": 373, "tix_librari": 373, "tix_filedialog": 373, "dlgclass": 373, "fileselectdialog": 373, "monochrom": 373, "tix_option_get": 373, "tix_resetopt": 373, "newschem": 373, "newfontset": 373, "newscmprio": 373, "fontset": 373, "resetopt": 373, "tix_config": 373, "anti": [374, 382, 388, 481], "menubutton": 374, "tile": [374, 382, 467], "monograph": 374, "bw": 374, "tlabel": 374, "ttkstyle": 374, "bindtag": 374, "viewabl": 374, "xscrollcommand": 374, "yscrollcommand": 374, "statespec": 374, "instat": 374, "inquir": [374, 476], "bbox": 374, "icursor": 374, "xview": 374, "exportselect": 374, "selection_get": 374, "postcommand": 374, "dropdown": 374, "comboboxselect": 374, "newindex": 374, "enable_travers": 374, "tab_id": 374, "notebooktabchang": 374, "unmanag": 374, "autoincr": [374, 481], "recur": 374, "southeast": 374, "displaycolumn": 374, "yview": 374, "selectmod": 374, "treeviewselect": 374, "treeviewopen": 374, "treeviewclos": 374, "offscreen": 374, "set_children": 374, "newchildren": 374, "minwidth": 374, "imagenam": 374, "identify_row": 374, "identify_column": 374, "identify_region": 374, "identify_el": 374, "reattach": 374, "selection_set": [374, 479, 481], "selection_add": [374, 481], "selection_remov": [374, 481], "selection_toggl": [374, 481], "tag_bind": 374, "tag_configur": 374, "tag_ha": [374, 481], "winfo_class": 374, "somewidget": 374, "confer": [374, 461, 465], "query_opt": 374, "tbutton": 374, "colored_btn": 374, "layoutspec": 374, "tmenubutton": 374, "mbtn": 374, "element_cr": [374, 481], "elementnam": 374, "etyp": [374, 379, 470], "imagespec": 374, "interior": [374, 382, 461, 462], "img1": 374, "img2": 374, "img3": 374, "themenam": 374, "element_nam": 374, "element_opt": 374, "theme_cr": 374, "theme_set": 374, "tcombobox": 374, "green2": 374, "green4": 374, "fieldbackground": 374, "green3": 374, "olivedrab1": 374, "olivedrab2": 374, "theme_nam": 374, "theme_us": 374, "themechang": [374, 481], "caviti": 374, "whichsid": 374, "nswe": 374, "sublayout": 374, "tok_nam": [375, 481], "istermin": 375, "isnontermin": 375, "iseof": 375, "endmark": [375, 376, 429], "lpar": [375, 376, 481], "rpar": [375, 376], "lsqb": 375, "rsqb": 375, "amper": 375, "lbrace": 375, "rbrace": [375, 429], "eqequ": 375, "notequ": 375, "lessequ": 375, "greaterequ": 375, "leftshift": 375, "rightshift": 375, "doublestar": 375, "plusequ": 375, "minequ": 375, "starequ": 375, "slashequ": 375, "percentequ": 375, "amperequ": 375, "vbarequ": 375, "circumflexequ": 375, "leftshiftequ": 375, "rightshiftequ": 375, "doublestarequ": 375, "doubleslash": 375, "doubleslashequ": 375, "atequ": 375, "rarrow": 375, "colonequ": 375, "soft_keyword": [375, 429], "fstring_start": [375, 429, 472], "fstring_middl": [375, 429, 472], "fstring_end": [375, 429, 472], "errortoken": [375, 472], "n_token": 375, "nt_offset": 375, "exact_typ": 376, "srow": 376, "scol": 376, "erow": 376, "ecol": 376, "generate_token": [376, 468, 472, 481], "untoken": [376, 481], "tokenerror": [376, 472, 481], "decistmt": 376, "3e": 376, "007": 376, "13th": 376, "21716034272e": 376, "217160342717258261933904529e": 376, "toknum": 376, "tokval": 376, "say_hello": 376, "tomldecodeerror": 377, "toml_str": 377, "listfunc": 378, "coverdir": 378, "trackcal": 378, "countfunc": 378, "countcal": 378, "ignoremod": 378, "ignoredir": 378, "runfunc": [378, 479], "coverageresult": [378, 481], "write_result": 378, "show_miss": 378, "tracer": [378, 382, 466, 481], "print_last": 379, "extract_tb": 379, "extract_stack": [379, 481], "format_list": [379, 481], "extracted_list": 379, "format_except": [379, 470, 481], "format_exc": 379, "format_tb": [379, 380], "format_stack": [379, 481], "clear_fram": [379, 475], "walk_stack": [379, 476], "walk_tb": [379, 476], "lookup_lin": 379, "capture_loc": [379, 481], "max_group_width": [379, 481], "max_group_depth": [379, 481], "from_except": 379, "frame_gen": 379, "from_list": 379, "format_frame_summari": [379, 471, 481], "frame_summari": 379, "run_user_cod": 379, "envdir": 379, "bright_side_of_lif": 379, "formatted_lin": 379, "another_funct": 379, "lumberstack": 379, "an_error": 379, "take_snapshot": 380, "top_stat": 380, "716": 380, "4855": 380, "39328": 380, "284": 380, "521": 380, "3199": 380, "167": 380, "368": 380, "244": 380, "2315": 380, "381": 380, "185": [380, 469], "243": [380, 461], "133": 380, "347": [380, 465], "262": 380, "1446": 380, "911": 380, "1454": 380, "2131": 380, "148": 380, "344": 380, "snapshot1": 380, "snapshot2": 380, "compare_to": 380, "8173": 380, "4428": 380, "71332": 380, "39369": [380, 481], "117": [380, 461], "940": 380, "8106": 380, "571": 380, "298": 380, "589": [380, 384, 479, 481], "1005": 380, "166": 380, "7423": 380, "1526": 380, "1334": 380, "848": 380, "1465": 380, "784": 380, "491": 380, "969": 380, "903": 380, "870": 380, "1036": 380, "934": 380, "1068": 380, "619": 380, "1581": 380, "1614": 380, "938": 380, "1728": 380, "test_pickletool": 380, "run_doctest": [380, 481], "1276": 380, "test_runn": 380, "976": 380, "display_failur": 380, "761": 380, "match_test": 380, "1563": 380, "main_in_temp_cwd": 380, "run_glob": 380, "display_top": 380, "key_typ": 380, "filter_trac": 380, "419": [380, 469], "_b85chars2": 380, "_b85char": 380, "306": 380, "_a85chars2": 380, "_a85char": 380, "class_definit": 380, "testmethod": 380, "_hexdig": 380, "_weakrefset": 380, "142": [380, 440, 444], "_b32tab2": 380, "_b32tab": 380, "6220": 380, "3602": 380, "5303": 380, "get_traced_memori": 380, "reset_peak": [380, 480], "large_sum": 380, "first_siz": 380, "first_peak": 380, "small_sum": 380, "second_s": 380, "second_peak": 380, "664": 380, "3592984": 380, "804": 380, "29704": [380, 481], "optimis": [380, 426, 481], "clear_trac": 380, "get_object_traceback": [380, 481], "get_traceback_limit": 380, "get_tracemalloc_memori": 380, "is_trac": 380, "total_nfram": [380, 481], "filename_pattern": 380, "all_fram": 380, "traceback_limit": [380, 405], "old_snapshot": 380, "size_diff": 380, "count_diff": 380, "most_recent_first": [380, 478, 481], "cfmakeraw": [381, 481], "cfmakecbreak": [381, 481], "icanon": 381, "icrnl": 381, "stti": [381, 481], "setcbreak": [381, 481], "setraw": [381, 481], "bsds": [381, 472], "walli": 382, "feurzeig": 382, "seymour": 382, "papert": 382, "cynthia": 382, "solomon": [382, 481], "learner": 382, "teacher": 382, "classroom": [382, 481], "clockwis": 382, "anew": [382, 430, 480, 481], "clearscreen": 382, "geometr": [382, 471], "fillcolor": 382, "begin_fil": 382, "end_fil": 382, "whom": [382, 424], "360": 382, "bgcolor": 382, "bk": 382, "setposit": 382, "teleport": [382, 481], "seti": 382, "sethead": 382, "seth": [382, 481], "clearstamp": 382, "xcor": 382, "ycor": 382, "pendown": 382, "pd": 382, "penup": 382, "pu": 382, "pensiz": 382, "isdown": 382, "pencolor": 382, "showturtl": 382, "st": [382, 463, 477, 478, 481], "hideturtl": 382, "isvis": 382, "resizemod": 382, "shapes": 382, "turtles": 382, "shearfactor": 382, "settiltangl": [382, 471, 472, 481], "tiltangl": [382, 471, 481], "tilt": 382, "shapetransform": 382, "get_shapepoli": 382, "onclick": 382, "onreleas": 382, "ondrag": 382, "begin_poli": 382, "end_poli": 382, "get_poli": 382, "getturtl": 382, "getpen": 382, "getscreen": 382, "setundobuff": 382, "undobufferentri": 382, "bgpic": 382, "resetscreen": 382, "screensiz": 382, "setworldcoordin": 382, "onkey": 382, "onkeyreleas": 382, "onkeypress": 382, "onscreenclick": 382, "ontim": 382, "colormod": 382, "getcanva": 382, "getshap": 382, "register_shap": 382, "addshap": 382, "window_height": 382, "window_width": 382, "textinput": [382, 481], "numinput": [382, 481], "exitonclick": 382, "337": 382, "vec2d": [382, 481], "fill_gap": 382, "polygon": 382, "travel": 382, "to_angl": 382, "inscrib": 382, "semicircl": 382, "colorstr": 382, "diamet": 382, "canva": [382, 466, 472, 479, 481], "stamp_id": 382, "stampid": 382, "astamp": 382, "unused_stamp_id": 382, "undobuff": 382, "speedstr": 382, "speedvalu": 382, "440": 382, "27876": 382, "60254": 382, "fullcircl": 382, "grad": 382, "gon": [382, 474], "gradian": 382, "5707963267948966": 382, "thick": 382, "turtleshap": 382, "pendict": 382, "nores": 382, "stretchfactor": 382, "penstat": 382, "33cc8c": 382, "brown": [382, 466, 481], "5490196078431373": 382, "140": [382, 467, 481], "32c18f": 382, "colorstring1": 382, "colorstring2": 382, "g2": 382, "285078": 382, "a0c8f0": 382, "fillstat": 382, "arial": 382, "fontnam": 382, "fontsiz": 382, "fonttyp": 382, "shapenam": 382, "rmode": 382, "outlinewidth": 382, "stretch_wid": 382, "stretch_len": 382, "perpendicular": 382, "shear": 382, "t11": 382, "t12": 382, "t21": 382, "t22": 382, "myturtl": 382, "glow": 382, "unglow": 382, "handdraw": 382, "myfavouriteshap": 382, "mick": [382, 460, 463, 465], "pet": 382, "_screen": 382, "addcompon": 382, "poly1": 382, "poly2": 382, "shapelist": 382, "myshap": 382, "800080": 382, "picnam": 382, "nopic": 382, "backgroundimag": 382, "landscap": [382, 466], "canvwidth": 382, "canvheight": 382, "canvaswidth": 382, "canvasheight": 382, "1500": [382, 481], "llx": 382, "urx": 382, "distort": 382, "octagon": 382, "acceler": [382, 460, 461, 465, 468, 474, 475, 481], "xdummi": 382, "ydummi": 382, "nim": 382, "minval": 382, "maxval": 382, "stake": 382, "cmode": 382, "turtlegraphicserror": 382, "scrolledcanva": 382, "thusli": 382, "480": 382, "turtlegraph": 382, "using_idl": 382, "_cfg": 382, "startx": 382, "leftright": 382, "starti": 382, "topbottom": 382, "200x200": 382, "titlebar": 382, "zoo": [382, 425], "rawpen": 382, "playground": 382, "type_": 382, "poli": [382, 460], "tooltip": [382, 481], "backgroundcolor": 382, "write_docstringdict": 382, "turtle_docstringdict": 382, "turtle_docstringdict_german": 382, "glingl": 382, "aon": 382, "undobuffers": 382, "exampleturtl": 382, "examplescreen": 382, "docstringdict": 382, "turtle_docstringdict_italian": 382, "bytedesign": 382, "sourcecod": 382, "chao": 382, "verhulst": 382, "colormix": 382, "forest": 382, "fractalcurv": 382, "hilbert": 382, "koch": 382, "lindenmay": 382, "ethnomathemat": 382, "indian": 382, "kolam": 382, "minimal_hanoi": 382, "hanoi": 382, "disc": 382, "nimstick": 382, "minimalist": 382, "peac": 382, "penros": [382, 481], "aperiod": 382, "kite": 382, "dart": 382, "planet_and_moon": 382, "rosett": [382, 481], "round_danc": 382, "danc": [382, 440], "sorting_anim": 382, "two_canvas": 382, "canvas": 382, "yinyang": 382, "tdemo_nim": 382, "tdemo_round_d": 382, "new_class": [383, 474, 481], "exec_bodi": 383, "prepare_class": [383, 474], "__prepare__": [383, 387, 426, 475, 477, 481], "resolve_bas": [383, 426, 478, 481], "__mro_entries__": [383, 426, 478, 481], "get_original_bas": [383, 426, 472, 481], "laid": 383, "__orig_bases__": [383, 472, 481], "listiter": 383, "lambdatyp": 383, "generatortyp": 383, "coroutinetyp": [383, 476, 481], "asyncgeneratortyp": 383, "celltyp": [383, 481], "builtinfunctiontyp": 383, "builtinmethodtyp": [383, 481], "wrapperdescriptortyp": [383, 478, 481], "methoddescriptortyp": [383, 478, 481], "classmethoddescriptortyp": [383, 478, 481], "t_origin": 383, "t_arg": 383, "getsetdescriptortyp": 383, "memberdescriptortyp": [383, 481], "dynamicclassattribut": [383, 471, 475], "gen_func": [383, 481], "typing_extens": 384, "544": [384, 479, 481], "runtime_check": [384, 470, 472, 479, 481], "586": [384, 470, 479, 480, 481], "591": [384, 479, 481], "593": [384, 480, 481], "typeguard": [384, 470, 481], "notrequir": [384, 471, 481], "literalstr": [384, 471, 481], "dataclass_transform": [384, 471, 472, 481], "new_vector": 384, "connectionopt": 384, "broadcast_messag": 384, "some_id": [384, 477], "524313": [384, 477], "get_user_nam": 384, "user_id": 384, "user_a": 384, "42351": 384, "user_b": 384, "23413": 384, "54341": 384, "some_valu": 384, "adminuserid": 384, "prouserid": 384, "get_next_item": 384, "async_queri": 384, "on_success": 384, "on_upd": 384, "batch_proc": 384, "cb_result": 384, "good_cb": 384, "bad_cb": 384, "maxitem": 384, "paramspecvari": 384, "returntyp": 384, "arg1typ": 384, "arg2typ": 384, "notify_by_email": 384, "prouser": 384, "teamus": 384, "make_new_us": 384, "user_class": 384, "new_non_team_us": 384, "basicus": 384, "loggedvar": 384, "zero_all_var": 384, "weirdtrio": 384, "oldt": 384, "contravari": 384, "oldb": 384, "oldweirdtrio": 384, "linkedlist": 384, "vec": [384, 440], "inproduct": 384, "type1": 384, "aesthet": 384, "legacy_pars": 384, "hatch": [384, 467], "hash_a": 384, "hash_b": 384, "typesaf": 384, "unpython": 384, "bucket": [384, 426], "enjoy": [384, 411, 472], "unconstrain": 384, "anystr": 384, "greet_bad": 384, "greet_prop": 384, "run_queri": [384, 471], "arbitrary_str": [384, 471], "literal_str": 384, "never_call_m": 384, "int_or_str": 384, "noreturn": [384, 481], "reveal_typ": [384, 471, 481], "return_self": 384, "subclassoffoo": 384, "returns_egg": 384, "boxofstr": 384, "make_box_of_str": 384, "with_lock": 384, "my_lock": 384, "sum_threadsaf": 384, "validate_simpl": 384, "open_help": 384, "starship": [384, 465, 477], "enterprise_d": 384, "fastconnector": 384, "__metadata__": 384, "no_type_check": [384, 471, 481], "valuerang": 384, "ann1": 384, "include_extra": [384, 480, 481], "is_str": 384, "is_str_list": 384, "typea": 384, "typeb": 384, "kt": 384, "lookup_nam": 384, "infer_vari": 384, "strsequenc": 384, "strorbytessequ": 384, "print_capit": 384, "stringsubclass": 384, "print_ab": 384, "supportsab": 384, "__covariant__": 384, "__contravariant__": 384, "__infer_variance__": 384, "__bound__": [384, 425, 427], "__constraints__": [384, 425], "move_first_element_to_last": 384, "get_shap": 384, "happili": 384, "array2": 384, "float_array_1d": 384, "int_array_2d": 384, "yup": 384, "intfunc": [384, 472], "add_log": 384, "add_two": 384, "paramspecarg": [384, 470, 481], "paramspeckwarg": [384, 470, 481], "get_origin": [384, 479, 481], "listorset": [384, 425], "notgener": 384, "__value__": [384, 427, 434, 481], "_field_typ": [384, 479, 480, 481], "first_us": 384, "__supertype__": [384, 481], "genproto": 384, "poni": 384, "closabl": 384, "checkabl": [384, 472, 481], "__total__": 384, "__required_keys__": [384, 481], "__optional_keys__": [384, 481], "supportsbyt": [384, 471, 481], "supportscomplex": [384, 471, 481], "supportsfloat": 384, "supportsindex": [384, 479, 481], "supportsround": 384, "assert_typ": [384, 471, 481], "complex_funct": 384, "assert_nev": [384, 471, 481], "eq_default": 384, "order_default": 384, "kw_only_default": 384, "frozen_default": [384, 472, 481], "field_specifi": 384, "create_model": [384, 471], "customermodel": [384, 471], "modelbas": 384, "modelmeta": 384, "__dataclass_transform__": 384, "meanwhil": 384, "get_overload": [384, 471, 481], "clear_overload": [384, 471, 481], "__final__": [384, 471, 481], "no_type_check_decor": 384, "log_status": 384, "__override__": 384, "type_check_on": [384, 481], "fetch_respons": 384, "globaln": [384, 481], "localn": [384, 481], "unsubscript": 384, "get_arg": [384, 470, 471, 479, 480, 481], "is_typeddict": [384, 470, 481], "forwardref": [384, 481], "expensive_mod": 384, "sometyp": [384, 476], "local_var": 384, "anothertyp": 384, "other_fun": 384, "count_word": 384, "keep_posit": 384, "abstractset": 384, "t_co": 384, "ct_co": 384, "add_unicode_checkmark": 384, "u2713": 384, "kt_co": 384, "vt_co": 384, "get_position_in_index": 384, "word_list": 384, "_vt_co": 384, "yieldtyp": 384, "sendtyp": 384, "echo_round": 384, "infinite_stream": 384, "38291": [384, 470, 481], "undecid": 384, "91896": [384, 472, 481], "92332": [384, 471, 472, 481], "94309": [384, 472, 481], "ucd": [385, 433, 474, 475, 481], "east_asian_width": [385, 481], "unistr": [385, 460], "00c7": [385, 428], "cedilla": [385, 428], "0043": [385, 428], "0327": [385, 428], "2160": 385, "0049": 385, "kd": 385, "kc": 385, "unidata_vers": 385, "ucd_3_2_0": [385, 465], "solidus": 385, "etter": 385, "ppercas": 385, "u0660": [385, 460], "rabic": 385, "umber": 385, "namealias": [385, 433], "namedsequ": 385, "junit": [386, 461, 481], "taxonomi": 386, "unittestgui": 386, "appveyor": 386, "teststringmethod": [386, 387], "test_upp": 386, "test_isupp": 386, "test_split": [386, 387], "000s": 386, "001s": 386, "test_module1": 386, "test_module2": 386, "test_modul": 386, "testclass": 386, "test_method": 386, "test_someth": [386, 387, 388, 478], "failfast": [386, 467, 481], "foo_test": [386, 478], "sometest": [386, 478], "bar_test": [386, 478], "test_foo": [386, 388, 478], "footest": [386, 478], "project_directori": 386, "_test": [386, 473, 481], "proj": [386, 481], "test_mypkg": 386, "functiontestcas": [386, 481], "defaultwidgetsizetestcas": 386, "test_default_widget_s": 386, "widgettestcas": 386, "test_widget_res": 386, "suffer": [386, 387, 461, 462, 463], "texttestrunn": [386, 481], "test_widget": [386, 481], "testsometh": 386, "makesometh": 386, "makesomethingdb": 386, "deletesomethingdb": 386, "mytestcas": 386, "test_noth": 386, "test_format": 386, "skipunless": [386, 469], "test_windows_support": 386, "test_maybe_skip": 386, "external_resource_avail": 386, "005s": 386, "myskippedtestcas": 386, "test_not_run": 386, "expectedfailuretestcas": 386, "test_fail": 386, "skipunlesshasattr": 386, "numberstest": [386, 475], "test_even": [386, 475], "defaulttestresult": 386, "asserti": [386, 388, 467], "assertisnot": [386, 467], "assertisnon": [386, 467, 469], "assertisnotnon": [386, 467, 469], "assertin": [386, 467], "assertnotin": [386, 467], "assertisinst": [386, 467], "assertnotisinst": [386, 467], "assertraisesregex": [386, 471, 472, 474, 481], "assertwarn": [386, 473, 474, 481], "assertwarnsregex": [386, 473, 474, 481], "addtypeequalityfunc": [386, 467], "assertmultilineequ": [386, 467], "assertlog": [386, 470, 475, 481], "assertnolog": [386, 470, 481], "the_except": 386, "error_cod": 386, "assertraisesregexp": [386, 467, 469, 471, 472], "somewarn": 386, "legacy_funct": [386, 473], "frobnic": [386, 400], "assertgreat": [386, 467], "assertgreaterequ": [386, 467], "assertless": [386, 467], "assertlessequ": [386, 467], "assertregex": [386, 471, 472, 473, 481], "assertnotregex": [386, 471, 472], "assertcountequ": [386, 473], "assertregexpmatch": [386, 467, 471, 472, 473], "assertsequenceequ": [386, 467, 469, 481], "assertlistequ": [386, 467, 469, 481], "asserttupleequ": [386, 467, 469, 481], "assertsetequ": [386, 467, 469], "assertdictequ": [386, 467, 469], "seq_typ": 386, "assertxyy": 386, "maxdiff": [386, 473], "counttestcas": 386, "shortdescript": [386, 481], "texttestresult": [386, 472, 481], "addcleanup": [386, 387, 388, 467, 479, 481], "entercontext": [386, 471, 481], "docleanup": [386, 467, 481], "addclasscleanup": [386, 479, 481], "enterclasscontext": [386, 471, 481], "doclasscleanup": [386, 481], "isolatedasynciotestcas": [386, 471, 479, 481], "asyncsetup": [386, 479], "asyncteardown": [386, 479], "addasynccleanup": 386, "enterasynccontext": [386, 471, 481], "_async_connect": 386, "asyncconnect": [386, 479], "test_respons": 386, "status_cod": [386, 479], "on_cleanup": 386, "testfunc": 386, "_removetestatindex": [386, 475], "testrunn": 386, "defaulttestload": 386, "synthet": [386, 472, 481], "loadtestsfromtestcas": [386, 471, 481], "testcaseclass": 386, "gettestcasenam": [386, 471, 472, 481], "unoffici": [386, 476], "use_load_test": [386, 472, 476, 481], "loadtestsfromnam": [386, 467], "sampletest": 386, "sampletestcas": 386, "test_on": [386, 388], "test_two": [386, 388], "test_thre": 386, "start_dir": [386, 481], "top_level_dir": 386, "testmethodprefix": 386, "loadtestsfrom": 386, "sorttestmethodsus": 386, "suiteclass": [386, 467], "testnamepattern": 386, "unexpectedsuccess": 386, "collecteddur": [386, 481], "shouldstop": 386, "testsrun": 386, "starttest": [386, 481], "stoptest": [386, 481], "tb_local": 386, "wassuccess": 386, "starttestrun": [386, 467, 481], "stoptestrun": [386, 467, 481], "adderror": [386, 481], "formatted_err": 386, "addfailur": [386, 481], "addsuccess": 386, "addskip": [386, 481], "addexpectedfailur": 386, "addunexpectedsuccess": 386, "addsubtest": [386, 481], "adddur": [386, 481], "resultclass": 386, "wd": [386, 398, 465, 467, 475, 477], "wa": 386, "_makeresult": 386, "defaulttest": [386, 475], "catchbreak": 386, "testprogram": [386, 471, 472], "testcase1": 386, "testcase2": 386, "testcase3": 386, "test_class": 386, "this_dir": 386, "package_test": 386, "basetestsuit": 386, "_errorhold": 386, "_connect": [386, 417], "createexpensiveconnectionobject": 386, "createconnect": 386, "closeconnect": 386, "addmodulecleanup": [386, 479, 481], "entermodulecontext": [386, 471, 481], "domodulecleanup": [386, 481], "installhandl": 386, "registerresult": 386, "removeresult": 386, "test_signal_handl": 386, "replay": 387, "productionclass": [387, 388], "assert_called_with": [387, 388, 481], "classname2": [387, 388], "classname1": [387, 388], "mockclass1": [387, 388], "mockclass2": [387, 388], "mock_method": [387, 388], "assert_called_once_with": [387, 388, 481], "newkey": [387, 388], "newvalu": [387, 388], "foobarbaz": 387, "wheeeeee": 387, "specc": 387, "autospec": [387, 388, 481], "mock_funct": 387, "fishi": 387, "noncallablemock": [387, 481], "noncallablemagicmock": 387, "new_cal": 387, "spec_set": [387, 388], "assret": [387, 481], "asert": [387, 481], "aseert": [387, 481], "assrt": [387, 481], "configure_mock": [387, 388, 481], "assert_cal": [387, 477, 481], "assert_called_onc": [387, 477, 481], "wow": 387, "assert_any_cal": 387, "assert_has_cal": [387, 388, 481], "any_ord": [387, 388], "mock_cal": [387, 388, 481], "assert_not_cal": [387, 476, 481], "reset_mock": [387, 477, 481], "mock_add_spec": 387, "attach_mock": [387, 388, 481], "method_cal": [387, 388], "some_mock": 387, "_get_child_mock": [387, 388], "call_count": [387, 388], "call_arg": [387, 388, 481], "w00t": 387, "call_args_list": [387, 388], "140161580456576": [387, 388], "propertymock": [387, 481], "mock_foo": [387, 388], "mockiti": 387, "this_foo": 387, "asyncmock": [387, 388, 479, 481], "async_func": 387, "asyncmockmixin": 387, "_mock_cal": 387, "exampleclass": 387, "sync_foo": 387, "async_foo": 387, "a_mock": 387, "assert_await": 387, "coroutine_mock": 387, "assert_awaited_onc": [387, 388], "assert_awaited_with": 387, "assert_awaited_once_with": 387, "assert_any_await": 387, "assert_has_await": [387, 481], "await_args_list": [387, 481], "assert_not_await": 387, "await_count": 387, "await_arg": 387, "bang": 387, "not_a_child": 387, "thing1": 387, "thing2": 387, "normal_argu": 387, "mock_class": 387, "mockclass": 387, "mock_th": 387, "mock_stdout": 387, "non_existing_attribut": 387, "class_method": 387, "in_dict": 387, "testsampl": 387, "test_sampl": 387, "patched_foo": 387, "first_patch": 387, "second_patch": 387, "test_funct": 387, "mock_exit": 387, "new_mock": [387, 388], "mytest": [387, 388], "patcher1": 387, "patcher2": 387, "stopal": [387, 481], "mock_ord": 387, "foo_on": 387, "foo_two": 387, "static_method": [387, 388], "mock1": 387, "mock2": 387, "foobl": [387, 388], "__getinitargs__": 387, "__getformat__": [387, 481], "call_list": [387, 388], "kall": [387, 464, 481], "abstracthttphandl": [387, 477, 481], "_noncallablemock__get_return_valu": 387, "_noncallablemock__get_side_effect": 387, "_noncallablemock__return_value_doc": 387, "_noncallablemock__set_return_valu": 387, "_noncallablemock__set_side_effect": 387, "my_mock": 387, "irrespect": 387, "read_data": [387, 388, 444, 481], "deplet": 387, "rewound": 387, "fidd": 387, "bibbl": 387, "assret_called_once_with": 387, "dandi": 387, "assret_called_with": 387, "has_data": [387, 393, 475], "mock_request": 387, "somethingfortest": 387, "submock": 387, "attribute1": 387, "not_submock": 387, "sample_nam": 387, "new_attribut": 387, "attribute2": 387, "mock_inst": 388, "some_method": [388, 417], "old_method": 388, "data_dict": 388, "open_side_effect": 388, "file3": 388, "file_handl": 388, "backendprovid": 388, "get_endpoint": 388, "create_cal": 388, "start_cal": 388, "mock_backend": 388, "mock_respons": 388, "mock_dat": 388, "mocksomeclass": 388, "not_a_test": 388, "fiddlier": 388, "whilst": [388, 481], "nuisanc": 388, "grob": 388, "mock_frob": 388, "copy_call_arg": 388, "copyingmock": 388, "mock_bar": 388, "mock_spam": 388, "create_patch": 388, "my_dict": 388, "mymock": 388, "has_been_cal": 388, "adaptor": 388, "blip": 388, "expected_cal": 388, "fifti": [388, 424], "some_obj": 388, "match_foo": 388, "match_wrong": 388, "pyhamcrest": 388, "hamcrest": 388, "match_equ": 388, "contenttooshorterror": [391, 393], "urlretriev": [391, 393, 397, 481], "gopher": 392, "hdl": [392, 424], "mailto": [392, 424], "mms": 392, "prospero": 392, "rsync": 392, "rtsp": 392, "rtsps": [392, 481], "rtspu": 392, "sftp": 392, "shttp": 392, "snew": 392, "wai": 392, "urlpars": [392, 397, 466, 467, 468, 473, 477, 481], "urlstr": 392, "allow_frag": 392, "netloc": [392, 467, 473], "parseresult": [392, 467, 473, 481], "1808": [392, 476, 481], "7eguido": 392, "max_num_field": [392, 481], "doseq": 392, "urlunpars": 392, "2396": [392, 467, 476, 478, 481], "c0": [392, 481], "urlunsplit": 392, "urljoin": [392, 476, 481], "urldefrag": [392, 473], "defens": [392, 481], "splitresult": [392, 481], "defragresult": [392, 473, 481], "defragresultbyt": [392, 481], "parseresultbyt": [392, 473, 481], "splitresultbyt": [392, 481], "unreserv": 392, "quote_from_byt": [392, 481], "20ni": 392, "b1o": 392, "quote_plus": [392, 473], "2fel": 392, "unquote_plus": 392, "unquote_to_byt": [392, 481], "quote_via": [392, 476, 481], "std66": 392, "2732": [392, 467, 473], "urn": [392, 396], "2368": 392, "1738": 392, "no_proxi": [393, 481], "cadefault": 393, "addinfourl": [393, 481], "fancyurlopen": [393, 481], "_proxi": [393, 481], "handler_ord": 393, "pathname2url": 393, "url2pathnam": 393, "firefox": [393, 401, 465, 472, 481], "i686": 393, "gecko": 393, "20071127": 393, "camel": [393, 466, 473], "request_host": 393, "cern": 393, "ncsa": 393, "uiuc": 393, "is_authent": [393, 481], "basicauth": 393, "passwd_mgr": 393, "update_authent": 393, "40x": 393, "unredirect": 393, "remove_head": [393, 475], "set_proxi": [393, 417, 475], "header_valu": 393, "get_host": [393, 475], "get_selector": [393, 475], "is_unverifi": [393, 475], "http_respons": 393, "http_error_404": 393, "_open": [393, 481], "http_error_": 393, "_error": 393, "_request": 393, "_respons": 393, "default_open": 393, "unknown_open": 393, "add_par": 393, "adopt": [393, 430, 461, 462, 463, 466, 480, 481], "http_error_default": 393, "redirect_request": 393, "newurl": 393, "http_error_30": 393, "http_error_301": 393, "http_error_302": 393, "http_error_303": 393, "http_error_307": 393, "http_error_308": 393, "find_user_password": [393, 481], "authuri": 393, "http_error_auth_req": 393, "authreq": 393, "http_error_401": 393, "http_error_407": 393, "http_open": 393, "https_open": 393, "file_open": 393, "data_open": 393, "2397": 393, "ftp_open": 393, "setmaxconn": 393, "https_respons": 393, "equiv": 393, "xhtm": 393, "ngot": 393, "auth_handl": 393, "pdq": 393, "mahler": 393, "8092": 393, "klem": 393, "kadidd": 393, "ehopp": 393, "proxy_handl": 393, "3128": 393, "proxy_auth_handl": 393, "contact": [393, 405, 481], "addhead": 393, "musi": [393, 394], "requestb": 393, "xrbl82xr": 393, "reporthook": 393, "local_filenam": 393, "urlcleanup": [393, 481], "open_unknown": 393, "30x": [393, 474], "maxtri": 393, "prompt_user_passwd": 393, "550": 393, "_urlopen": 393, "robotfilepars": [394, 477, 481], "robotstxt": 394, "set_url": 394, "can_fetch": [394, 481], "userag": 394, "crawl_delay": [394, 481], "crawl": [394, 477, 481], "request_r": [394, 481], "requestr": 394, "site_map": [394, 481], "sitemap": 394, "rp": 394, "rrate": 394, "lanc": [395, 424], "ellinghous": [395, 424], "jansen": [395, 424, 462, 463, 476, 481], "in_fil": 395, "out_fil": [395, 411, 481], "uuid1": [396, 465, 478, 481], "uuid3": [396, 465, 481], "uuid4": [396, 465, 481], "uuid5": [396, 465, 481], "is_saf": [396, 478, 481], "safeuuid": [396, 481], "bytes_l": 396, "time_low": 396, "time_mid": 396, "time_hi_vers": 396, "clock_seq_hi_vari": 396, "clock_seq_low": 396, "12345678": 396, "567812345678": 396, "12345678123456781234567812345678": 396, "x34": 396, "x56": [396, 460], "x78": 396, "0x12345678": 396, "0x1234": 396, "0x5678": 396, "0x12": 396, "0x34": 396, "0x567812345678": 396, "0x12345678123456781234567812345678": 396, "clock_seq": 396, "reserved_nc": 396, "rfc_4122": 396, "reserved_microsoft": 396, "reserved_futur": 396, "getnod": [396, 478, 481], "administ": [396, 460, 466, 478, 481], "namespace_dn": [396, 465], "namespace_url": 396, "namespace_oid": 396, "namespace_x500": 396, "ncs": 396, "x500": 396, "a8098c1a": [396, 465], "f86e": [396, 465], "11da": [396, 465], "bd1a": [396, 465], "00112444be1e": [396, 465], "6fa459ea": [396, 465], "ee8a": [396, 465], "3ca4": [396, 465], "894e": [396, 465], "db77e160355": [396, 465], "16fd2706": [396, 465], "8baf": [396, 465], "433b": [396, 465], "82eb": [396, 465], "8c7fada847da": [396, 465], "886313e1": [396, 465], "3b8a": [396, 465], "5372": [396, 465], "9b90": [396, 465], "0c9aee199e5d": [396, 465], "00010203": 396, "0405": 396, "0607": 396, "0809": 396, "0a0b0c0d0e0f": 396, "x05": 396, "x0e": 396, "x0f": 396, "movabl": 397, "copyabl": [397, 481], "python35": [397, 451], "myenv": 397, "dep": [397, 481], "env_dir": 397, "powershel": [397, 459, 479, 481], "executionpolici": 397, "remotesign": 397, "currentus": 397, "zsh": 397, "csh": [397, 451, 475], "tcsh": [397, 464], "virtual_env": [397, 476], "system_site_packag": 397, "with_pip": [397, 475], "upgrade_dep": 397, "builder": [397, 408, 409, 411], "ensure_directori": [397, 481], "create_configur": 397, "setup_python": 397, "setup_script": 397, "post_setup": 397, "__venv_dir__": 397, "install_script": 397, "env_nam": 397, "__venv_name__": [397, 480], "__venv_prompt__": [397, 480, 481], "inc_path": 397, "lib_path": 397, "bin_path": 397, "bin_nam": 397, "__venv_bin_name__": 397, "env_ex": 397, "__venv_python__": 397, "env_exec_cmd": 397, "upgrade_depend": [397, 481], "redirector": [397, 478, 481], "extendedenvbuild": 397, "easy_instal": [397, 472], "nodist": 397, "nopip": 397, "install_setuptool": 397, "install_pip": 397, "binpath": 397, "distpath": 397, "ez_setup": 397, "system_sit": 397, "use_symlink": 397, "warrant": [398, 468], "filterwarn": [398, 453, 461, 463, 481], "resetwarn": [398, 473], "user_n": 398, "fxn": 398, "skip_file_prefix": [398, 481], "deprecated_api": 398, "_warn_skip": 398, "one_way": 398, "r_luxury_yacht": 398, "t_wobbler_mangrov": 398, "another_way": 398, "__warningregistry__": [398, 481], "wave_format_extens": [399, 481], "ksdataformat_subtype_pcm": 399, "__callback__": [400, 475], "callableproxytyp": [400, 481], "getweakrefcount": 400, "getweakref": 400, "keyref": [400, 465], "valueref": [400, 465], "0x7fc859830220": 400, "lifecycl": [400, 467, 475], "referencetyp": [400, 481], "do_something_us": 400, "extendedref": 400, "__counter": 400, "_id2obj_dict": 400, "id2obj": 400, "kenni": [400, 475], "newobj": [400, 481], "_final": 400, "unloading_modul": 400, "autorais": [401, 465], "open_new": [401, 465], "open_new_tab": [401, 465], "epiphani": 401, "kfmclient": 401, "konqueror": [401, 465, 481], "kfm": 401, "genericbrows": 401, "elink": [401, 465], "w3m": 401, "windowsdefault": 401, "macosxosascript": [401, 481], "safari": 401, "chrome": [401, 474, 481], "chromium": [401, 474], "kde": 401, "kdedir": 401, "mosaic": [401, 472, 481], "galeon": [401, 472, 481], "skipston": [401, 472, 481], "iceap": [401, 472, 481], "neglect": 403, "closekey": 403, "hkey": 403, "computernam": 403, "createkeyex": [403, 467], "key_writ": 403, "subkey": [403, 459], "deletekeyex": [403, 467], "key_wow64_64key": 403, "wow64": 403, "setvalueex": [403, 481], "reg_expand_sz": 403, "windir": 403, "flushkey": 403, "flusher": 403, "hkey_us": 403, "se_restore_privileg": 403, "regloadkey": 403, "key_read": 403, "openkeyex": 403, "1601": 403, "queryvalueex": [403, 481], "querykey": 403, "sebackupprivileg": 403, "security_attribut": 403, "reg_sz": 403, "key_set_valu": 403, "dsiablereflectionkey": 403, "hkey_classes_root": 403, "subordin": [403, 467], "hkey_performance_data": 403, "hkey_current_config": 403, "hkey_dyn_data": 403, "key_all_access": 403, "standard_rights_requir": 403, "key_query_valu": 403, "key_create_sub_key": 403, "key_enumerate_sub_key": 403, "key_notifi": 403, "key_create_link": 403, "standard_rights_writ": 403, "standard_rights_read": 403, "key_execut": 403, "key_wow64_32key": 403, "reg_binari": [403, 481], "reg_dword": 403, "reg_dword_little_endian": 403, "reg_dword_big_endian": 403, "reg_link": 403, "reg_multi_sz": [403, 481], "reg_non": 403, "reg_qword": [403, 477, 481], "reg_qword_little_endian": 403, "reg_resource_list": 403, "reg_full_resource_descriptor": 403, "reg_resource_requirements_list": 403, "speaker": 404, "hertz": 404, "playsound": [404, 477, 481], "messagebeep": [404, 477, 481], "mb_ok": 404, "mb_iconasterisk": 404, "mb_iconexclam": 404, "mb_iconhand": 404, "mb_iconquest": 404, "snd_filenam": 404, "snd_alia": 404, "snd_nodefault": 404, "systemasterisk": 404, "systemexclam": 404, "systemhand": 404, "systemquest": 404, "snd_loop": 404, "snd_async": 404, "snd_memori": [404, 481], "snd_purg": 404, "snd_nostop": 404, "snd_nowait": 404, "systemdefault": 404, "wsgienviron": 405, "guess_schem": 405, "url_schem": 405, "fastcgi": 405, "request_uri": 405, "include_queri": 405, "application_uri": 405, "path_info": 405, "query_str": [405, 471], "shift_path_info": 405, "setup_testing_default": 405, "http_host": 405, "make_serv": [405, 465], "simple_app": 405, "start_respons": [405, 473, 481], "ret": 405, "is_hop_by_hop": 405, "hop": 405, "filewrapp": [405, 471, 479, 481], "filelik": 405, "wsgiserv": [405, 481], "wsgirequesthandl": [405, 481], "demo_app": 405, "set_app": 405, "get_app": 405, "get_environ": 405, "base_environ": 405, "get_stderr": 405, "middlewar": 405, "validator_app": 405, "cgihandl": 405, "basecgihandl": 405, "run_onc": 405, "iiscgihandl": 405, "allowpathinfo": 405, "metabas": 405, "allowpathinfoforscriptmap": 405, "path_transl": 405, "iis7": 405, "simplehandl": [405, 460], "scgi": 405, "get_stdin": 405, "add_cgi_var": 405, "_write": 405, "_flush": 405, "inputstream": [405, 481], "errorstream": 405, "wsgi_multithread": 405, "wsgi_multiprocess": 405, "wsgi_run_onc": 405, "os_environ": 405, "server_softwar": 405, "origin_serv": 405, "get_schem": 405, "setup_environ": 405, "wsgi_file_wrapp": 405, "log_except": 405, "error_output": 405, "error_status": 405, "error_head": 405, "error_bodi": 405, "file_wrapp": [405, 481], "http_version": 405, "read_environ": [405, 473], "startrespons": 405, "wsgiapplic": 405, "hello_world_app": 405, "mime_typ": 405, "1014": 406, "microsystem": [406, 424], "1832": 406, "pack_typ": 406, "pack_uint": 406, "pack_int": 406, "pack_enum": 406, "pack_bool": 406, "pack_uhyp": 406, "pack_hyp": 406, "pack_float": 406, "pack_doubl": 406, "pack_fstr": 406, "pack_fopaqu": 406, "pack_str": 406, "pack_opaqu": 406, "pack_byt": 406, "pack_list": 406, "pack_item": 406, "pack_farray": 406, "pack_array": 406, "get_posit": 406, "set_posit": 406, "unpack_typ": 406, "unpack_float": 406, "unpack_doubl": 406, "unpack_fstr": 406, "unpack_fopaqu": 406, "unpack_str": 406, "unpack_opaqu": 406, "unpack_byt": 406, "unpack_list": 406, "unpack_item": 406, "unpack_farray": 406, "unpack_array": 406, "conversionerror": [406, 481], "billion": [407, 481], "laugh": [407, 474, 481], "blowup": 407, "bomb": [407, 420, 481], "expat_vers": 407, "parseerror": [407, 411, 467, 473, 481], "luck": 408, "getdomimplement": [408, 409], "omg": [408, 409], "registerdomimplement": 408, "python_dom": 408, "hasfeatur": 408, "empty_namespac": 408, "namespaceuri": [408, 414], "xml_namespac": 408, "xmlns_namespac": 408, "xhtml_namespac": 408, "nodetyp": [408, 409], "createdocu": [408, 409], "qualifiednam": 408, "createdocumenttyp": 408, "element_nod": 408, "attribute_nod": 408, "text_nod": [408, 409], "cdata_section_nod": 408, "entity_nod": 408, "processing_instruction_nod": [408, 409], "comment_nod": 408, "document_nod": 408, "document_type_nod": 408, "notation_nod": 408, "parentnod": 408, "previouss": 408, "nextsibl": 408, "childnod": [408, 409, 460], "firstchild": 408, "lastchild": 408, "localnam": [408, 413, 414, 481], "nodevalu": 408, "hasattribut": 408, "haschildnod": 408, "issamenod": 408, "uncontroversi": 408, "appendchild": [408, 409, 460], "newchild": 408, "insertbefor": [408, 460], "refchild": 408, "removechild": [408, 460], "oldchild": 408, "replacechild": 408, "clonenod": [408, 481], "getelementsbytagnam": [408, 409, 460], "getelementsbytagnamen": 408, "internalsubset": 408, "documentel": [408, 409, 460], "createel": 408, "createelementn": 408, "createtextnod": [408, 409], "createcom": 408, "createprocessinginstruct": 408, "createattribut": 408, "setattributenod": 408, "createattributen": 408, "hasattributen": 408, "getattribut": [408, 410, 426], "getattributenod": 408, "getattributen": 408, "getattributenoden": 408, "removeattribut": 408, "notfounderr": 408, "removeattributenod": [408, 481], "oldattr": 408, "removeattributen": 408, "setattribut": 408, "newattr": [408, 462], "inuseattributeerr": 408, "setattributenoden": 408, "setattributen": 408, "domexcept": [408, 409], "domstringsizeerr": 408, "hierarchyrequesterr": 408, "indexsizeerr": 408, "invalidaccesserr": 408, "invalidcharactererr": 408, "invalidmodificationerr": 408, "invalidstateerr": 408, "namespaceerr": 408, "removenameditem": 408, "notsupportederr": 408, "nodataallowederr": 408, "nomodificationallowederr": 408, "syntaxerr": 408, "wrongdocumenterr": 408, "domstring_size_err": 408, "hierarchy_request_err": 408, "index_size_err": 408, "inuse_attribute_err": 408, "invalid_access_err": 408, "invalid_character_err": 408, "invalid_modification_err": 408, "invalid_state_err": 408, "namespace_err": 408, "not_found_err": 408, "not_supported_err": 408, "no_data_allowed_err": 408, "no_modification_allowed_err": 408, "syntax_err": 408, "wrong_document_err": 408, "domstr": [408, 409], "somevalu": 408, "anothervalu": 408, "_get_somevalu": 408, "_get_anothervalu": 408, "_set_anothervalu": 408, "corba": 408, "profici": 409, "dom1": 409, "datasourc": 409, "dom2": 409, "dom3": 409, "myxml": 409, "filename_or_fil": 409, "grasp": 409, "impl": [409, 481], "newdoc": 409, "some_tag": 409, "top_el": 409, "writexml": [409, 479], "addind": 409, "newl": 409, "subnod": 409, "prologu": 409, "toxml": [409, 410, 460, 463, 479], "toprettyxml": [409, 463, 479], "slideshow": 409, "handleslideshow": 409, "handleslideshowtitl": 409, "handletoc": 409, "handleslid": 409, "handleslidetitl": 409, "handlepoint": 409, "_get_foo": 409, "_set_foo": 409, "domtimestamp": 409, "entityrefer": 409, "make_pars": [410, 412, 414, 460, 481], "feature_external_g": [410, 412, 413], "setfeatur": [410, 412, 414], "sales_item": 410, "expandnod": 410, "start_docu": 410, "end_docu": 410, "processing_instruct": 410, "ignorable_whitespac": 410, "documentfactori": 410, "sax2dom": 410, "stream_or_str": 410, "default_bufs": 410, "getev": 410, "celementtre": [411, 465, 473, 474, 481], "liechtenstein": 411, "gdppc": 411, "141100": 411, "austria": 411, "switzerland": 411, "singapor": 411, "59900": 411, "malaysia": 411, "panama": 411, "13600": 411, "costa": 411, "rica": 411, "colombia": 411, "country_data": 411, "getroot": [411, 465], "country_data_as_str": 411, "attrib": [411, 465, 481], "read_ev": 411, "mytag": 411, "sometext": 411, "0x7fa66db2be58": 411, "iterpars": [411, 475, 481], "new_rank": 411, "subel": [411, 473], "sometag": 411, "fiction": 411, "actor": [411, 439, 479], "lancelot": [411, 440], "archi": 411, "leach": 411, "sir": [411, 439, 469, 479], "gunther": 411, "clement": [411, 477, 481], "xml_text": 411, "real_person": 411, "countrydata": 411, "grand": 411, "dublin": 411, "purl": 411, "grandchildren": [411, 481], "canonic": [411, 479, 481], "xml_data": 411, "from_fil": [411, 420, 423, 477, 481], "normalis": [411, 481], "freedom": [411, 434], "c14n_output": 411, "inputfil": 411, "with_com": 411, "strip_text": 411, "rewrite_prefix": 411, "qname_aware_tag": 411, "qname_aware_attr": 411, "exclude_attr": 411, "exclude_tag": 411, "fromstringlist": [411, 473], "isel": 411, "register_namespac": [411, 467, 473], "xml_declar": [411, 467, 481], "default_namespac": [411, 467, 481], "short_empty_el": [411, 415, 475], "tostringlist": [411, 473, 475, 481], "xmlid": 411, "elementinclud": [411, 465], "xi": 411, "xpointer": 411, "para": 411, "default_load": 411, "base_url": 411, "max_depth": 411, "itertext": [411, 467, 473, 481], "unprefix": [411, 481], "findtext": [411, 481], "iterfind": [411, 473], "makeel": 411, "convey": 411, "perceptu": 411, "reorder_attribut": 411, "_setroot": 411, "0xb77e6fac": 411, "0xb77ec26c": 411, "0xb77ec2ac": 411, "0xb77ec1cc": 411, "text_or_uri": 411, "element_factori": 411, "comment_factori": 411, "pi_factori": 411, "insert_com": 411, "insert_pi": 411, "pis": 411, "pubid": 411, "start_n": [411, 479, 481], "end_n": [411, 479, 481], "c14nwritertarget": 411, "attrs_dict": 411, "maxdepth": 411, "examplexml": 411, "parser_list": [412, 481], "create_pars": [412, 414], "filename_or_stream": 412, "saxparseexcept": [412, 413], "saxnotrecognizedexcept": [412, 414], "confront": [412, 463], "saxnotsupportedexcept": [412, 414], "focal": 412, "getexcept": 412, "feature_namespac": 413, "feature_namespace_prefix": 413, "feature_string_intern": 413, "feature_valid": 413, "feature_external_p": 413, "all_featur": 413, "property_lexical_handl": 413, "property_declaration_handl": 413, "sax2lib": 413, "declhandl": 413, "property_dom_nod": 413, "property_xml_str": 413, "all_properti": 413, "setdocumentloc": 413, "documenthandl": [413, 414], "startdocu": 413, "enddocu": 413, "unrecover": [413, 481], "startprefixmap": 413, "endprefixmap": 413, "startel": [413, 414, 460], "endel": [413, 460], "startelementn": [413, 414], "endelementn": 413, "ignorablewhitespac": 413, "skippedent": 413, "notationdecl": 413, "unparsedentitydecl": 413, "resolveent": [413, 414], "fatalerror": 413, "startdtd": [413, 464], "public_id": 413, "system_id": [413, 414], "enddtd": 413, "startcdata": 413, "endcdata": 413, "attributesimpl": 414, "attributesnsimpl": 414, "getcontenthandl": 414, "setcontenthandl": [414, 460], "getdtdhandl": 414, "setdtdhandl": 414, "getentityresolv": 414, "setentityresolv": 414, "geterrorhandl": 414, "seterrorhandl": 414, "getfeatur": 414, "propertynam": 414, "formed": 414, "getcolumnnumb": 414, "getlinenumb": 414, "getpublicid": 414, "getsystemid": 414, "setpublicid": 414, "setsystemid": 414, "setencod": 414, "setbytestream": 414, "bytefil": 414, "getbytestream": 414, "setcharacterstream": 414, "charfil": 414, "getcharacterstream": 414, "getlength": 414, "gettyp": [414, 465], "getvaluebyqnam": 414, "getnamebyqnam": 414, "getqnamebynam": 414, "getqnam": 414, "amp": [415, 473], "quoteattr": 415, "xmlgener": 415, "xmlfilterbas": 415, "prepare_input_sourc": 415, "use_datetim": [417, 465], "use_builtin_typ": [417, 418, 480], "safetransport": [417, 481], "ontosi": 417, "i4": 417, "i8": [417, 466], "biginteg": 417, "2147483648": 417, "2147483647": [417, 433, 465], "nil": [417, 463], "bigdecim": 417, "listmethod": [417, 418], "methodsignatur": [417, 418], "methodhelp": [417, 418], "register_funct": [417, 418, 478, 481], "python_logo": 417, "fetched_python_logo": 417, "faultcod": [417, 481], "faultstr": 417, "errmsg": 417, "boxcar": 417, "register_multicall_funct": [417, 418], "methodrespons": 417, "betti": 417, "userland": 417, "getstatenam": 417, "proxiedtransport": 417, "proxy_head": 417, "requesthandl": 418, "simplexmlrpcrequesthandl": [418, 464, 467], "logrequest": 418, "register_inst": 418, "allow_dotted_nam": 418, "_dispatch": 418, "intrud": 418, "register_introspection_funct": 418, "rpc_path": [418, 465], "rpc2": [418, 465], "adder_funct": 418, "exampleservic": 418, "getdata": 418, "currenttim": 418, "getcurrenttim": 418, "nkeyboard": 418, "request_text": 418, "docxmlrpcrequesthandl": 418, "set_server_titl": 418, "server_titl": 418, "set_server_nam": 418, "set_server_document": 418, "server_document": 418, "pyz": [419, 476, 481], "mainfn": 419, "deflat": [419, 422, 481], "create_arch": [419, 478, 481], "get_interpret": 419, "old_arch": 419, "new_arch": 419, "virtu": [419, 481], "pyzw": [419, 481], "pkzip": [420, 421, 460], "zip64": [420, 465, 481], "badzipfil": [420, 481], "largezipfil": 420, "getinfo": 420, "infolist": 420, "is_zipfil": [420, 467, 481], "zip_stor": [420, 481], "zip_defl": [420, 450], "zip_bzip2": 420, "zip_lzma": 420, "phil": [420, 421, 466, 481], "katz": [420, 421], "allowzip64": [420, 475, 481], "strict_timestamp": [420, 481], "metadata_encod": [420, 481], "2107": [420, 481], "myzip": 420, "namelist": 420, "force_zip64": [420, 481], "zipextfil": [420, 473, 481], "file_s": [420, 462], "appreci": [420, 424], "printdir": 420, "setpassword": 420, "testzip": 420, "compress_typ": [420, 467], "writestr": [420, 467], "zinfo_or_arcnam": 420, "zinfo_or_directori": 420, "grandchild": 420, "zipp": [420, 481], "writepi": [420, 475], "filterfunc": [420, 475], "zf": 420, "myprog": 420, "notest": 420, "testal": [420, 466], "bogus": [420, 467, 481], "create_system": 420, "create_vers": 420, "extract_vers": 420, "flag_bit": [420, 481], "internal_attr": 420, "external_attr": [420, 481], "header_offset": 420, "compress_s": 420, "ahlstrom": [421, 460, 463], "zipimporterror": 421, "archivepath": 421, "8467": [421, 463], "jwzthread": [421, 463], "adler": [422, 424], "max_wbit": 422, "z_best_spe": 422, "z_best_compress": 422, "z_no_compress": 422, "z_default_compress": 422, "compressobj": [422, 481], "memlevel": 422, "def_mem_level": 422, "z_default_strategi": 422, "zdict": [422, 481], "z_filter": 422, "z_huffman_on": 422, "z_rle": 422, "z_fix": 422, "def_buf_s": 422, "decompressobj": 422, "z_no_flush": 422, "z_partial_flush": 422, "z_sync_flush": 422, "z_full_flush": 422, "z_block": 422, "z_finish": 422, "unconsumed_tail": 422, "zlib_vers": 422, "zlib_runtime_vers": [422, 474, 481], "los_angel": [423, 480], "dt_add": 423, "dt_utc": 423, "zoneinfonotfounderror": 423, "tzpath": [423, 454, 481], "reset_tzpath": 423, "pythontzpath": 423, "invalidtzpathwarn": [423, 481], "fobj": [423, 436], "no_cach": 423, "only_key": 423, "new_york": 423, "asia": 423, "tokyo": 423, "cldr": 423, "kwajalein": 423, "01t03": 423, "europe_berlin_pkl": 423, "berlin": 423, "europe_berlin_pkl_nc": 423, "available_timezon": [423, 481], "posixrul": 423, "cautionari": [423, 464], "1990": 424, "reston": 424, "pythonlab": [424, 460, 462], "opensourc": 424, "agreement": [424, 460, 479], "license": 424, "herebi": 424, "nonexclus": 424, "royalti": 424, "herein": 424, "merchant": 424, "infring": 424, "consequenti": 424, "partnership": 424, "ventur": 424, "trademark": 424, "endors": [424, 481], "saratoga": 424, "santa": 424, "clara": 424, "95051": 424, "1895": 424, "preston": [424, 478], "20191": [424, 481], "1013": 424, "feder": 424, "intellectu": 424, "commonwealth": 424, "virginia": 424, "notwithstand": [424, 460], "netherland": 424, "profit": 424, "tortious": 424, "_random": [424, 481], "sci": 424, "hiroshima": 424, "mat": [424, 467, 480, 481], "mt": 424, "mt2002": 424, "emt19937ar": 424, "mt19937": 424, "takuji": 424, "makoto": [424, 481], "init_genrand": 424, "init_by_array": 424, "init_key": 424, "key_length": 424, "redistribut": [424, 481], "contributor": [424, 468, 481], "holder": [424, 467, 481], "exemplari": 424, "procur": 424, "tort": 424, "emt": 424, "1996": 424, "rush": [424, 460], "timothi": 424, "malley": [424, 463], "timo": [424, 481], "alum": 424, "industri": 424, "whielacronx": 424, "mojam": 424, "montanaro": [424, 460, 463, 464, 465, 466], "bioreason": 424, "automatrix": 424, "cathedr": 424, "republ": 424, "laboratori": 424, "sublicens": 424, "sell": [424, 465], "furnish": 424, "noninfring": 424, "doug": [424, 481], "marek": 424, "majkowski": 424, "dan": [424, 464, 465, 473, 474, 475, 476, 480, 481], "popcount": 424, "majek": 424, "csiphash": 424, "supercop": 424, "crypto_auth": 424, "djb": 424, "little2": 424, "131002": 424, "siphash": [424, 475, 481], "gay": [424, 467, 469, 470, 475, 477, 478, 481], "20220517033456": 424, "netlib": 424, "lucent": 424, "reproduct": 424, "licensor": 424, "authorship": 424, "editori": [424, 460], "verbal": 424, "conspicu": 424, "perpetu": [424, 475], "irrevoc": 424, "patent": 424, "institut": 424, "litig": 424, "counterclaim": 424, "lawsuit": 424, "alleg": 424, "contributori": 424, "promin": [424, 468, 481], "addendum": 424, "constru": 424, "grossli": 424, "goodwil": 424, "stoppag": 424, "malfunct": 424, "indemn": 424, "indemnifi": 424, "defend": [424, 481], "clark": [424, 474, 481], "loup": 424, "gailli": 424, "misrepres": 424, "jloup": 424, "madler": 424, "alumni": 424, "caltech": 424, "owen": 424, "_decim": [424, 454, 474, 481], "stefan": [424, 467, 471, 474, 475, 476, 477, 478, 479, 480, 481], "krah": [424, 467, 474, 477, 481], "xmltestdata": 424, "c14n2": 424, "ercim": 424, "keio": 424, "beihang": 424, "sox": 424, "g771": 424, "revenu": 424, "2550": 424, "garcia": [424, 471, 472, 481], "94043": 424, "uvloop": [424, 476, 477, 481], "magicstack": [424, 481], "incarn": 425, "if_stmt": [425, 429], "while_stmt": [425, 429], "for_stmt": [425, 429], "try_stmt": [425, 429], "with_stmt": [425, 429], "match_stmt": [425, 429], "funcdef": 425, "async_with_stmt": 425, "async_for_stmt": 425, "async_funcdef": 425, "stmt_list": [425, 435], "compound_stmt": [425, 429, 435], "simple_stmt": [425, 429], "assignment_express": [425, 428, 429], "target_list": [425, 428, 434], "starred_list": [425, 428], "try1_stmt": 425, "try2_stmt": 425, "try3_stmt": 425, "with_stmt_cont": 425, "with_item": [425, 429], "hit_except": 425, "subject_expr": [425, 429], "case_block": [425, 429], "star_named_express": [425, 429], "named_express": [425, 429], "subpattern": [425, 439, 481], "prerequisit": [425, 468, 481], "636": [425, 439, 470], "ebnf": [425, 429], "open_sequence_pattern": [425, 429], "as_pattern": [425, 429], "or_pattern": [425, 429], "literal_pattern": [425, 429], "capture_pattern": [425, 429], "wildcard_pattern": [425, 429], "value_pattern": [425, 429], "sequence_pattern": [425, 429], "mapping_pattern": [425, 429], "class_pattern": [425, 429], "closed_pattern": [425, 429], "signed_numb": [425, 429], "name_or_attr": [425, 429], "name1": [425, 465], "name2": [425, 465], "maybe_sequence_pattern": [425, 429], "maybe_star_pattern": [425, 429], "star_pattern": [425, 429], "p3": 425, "items_pattern": [425, 429], "key_value_pattern": [425, 429], "double_star_pattern": [425, 429], "pattern_argu": 425, "positional_pattern": [425, 429], "keyword_pattern": [425, 429], "parameter_list": [425, 428], "defparamet": 425, "parameter_list_no_poson": 425, "parameter_list_stararg": 425, "614": [425, 480, 481], "whats_on_the_telli": 425, "570": [425, 479, 481], "3107": [425, 439, 468, 476, 478], "param1": 425, "param2": 425, "do_stuff": 425, "some_coroutin": 425, "suite2": 425, "aenter": 425, "aexit": 425, "amax": 425, "overly_gener": 425, "simpletypevar": 425, "typevarwithbound": 425, "typevarwithconstraint": 425, "simpletypevartupl": 425, "simpleparamspec": 425, "type_params_of_func": 425, "liberti": 425, "some_default": 425, "default_of_arg": 425, "bound_of_t": 425, "type_params_of_bag": 425, "type_params_of_listorset": 425, "value_of_listorset": 425, "neumann": 426, "illus": [426, 473], "affix": [426, 481], "cell_cont": 426, "codeobject": [426, 471, 481], "0x2000": 426, "0x10": 426, "0x1000": 426, "co_posit": [426, 471], "precari": 426, "parentclass": 426, "ocert": [426, 453], "asymmetri": 426, "verbosemodul": 426, "__objclass__": 426, "unlist": 426, "philosoph": 426, "australianphilosoph": 426, "bruce": [426, 481], "mysubclass": 426, "__classcell__": [426, 477, 479, 481], "3135": [426, 467, 468], "boundless": 426, "class_of_obj": 426, "breakfast": 426, "__rtruediv__": 426, "__rfloordiv__": [426, 470, 481], "a_tupl": 426, "__release_buffer__": [426, 481], "unbind": [427, 481], "simpleexpr": 427, "repair": [427, 459, 481], "offend": [427, 461], "bnf": [428, 432, 461], "othernam": [428, 460], "enclosur": 428, "parenth_form": 428, "list_display": 428, "dict_display": 428, "set_display": 428, "generator_express": 428, "yield_atom": 428, "__spam": [428, 438], "_ham__spam": 428, "stringliter": 428, "bytesliter": 428, "imagnumb": 428, "starred_express": [428, 429, 434], "unparenthes": [428, 480, 481], "comp_for": 428, "or_test": 428, "comp_it": 428, "comp_if": 428, "dict_item_list": 428, "dict_comprehens": 428, "dict_item": 428, "or_expr": [428, 433], "prevail": [428, 481], "yield_express": [428, 433, 434], "expression_list": [428, 434, 435], "yield_from": [428, 471, 481], "subiter": [428, 474], "attributeref": [428, 434], "slice_list": 428, "slice_item": 428, "proper_slic": 428, "positional_argu": 428, "starred_and_keyword": 428, "keywords_argu": 428, "positional_item": 428, "keyword_item": 428, "x1": [428, 439, 470, 472, 481], "x3": 428, "x4": 428, "ym": 428, "await_expr": 428, "u_expr": 428, "m_expr": 428, "a_expr": 428, "shift_expr": [428, 429], "and_expr": 428, "xor_expr": 428, "comp_oper": 428, "op1": 428, "op2": 428, "opn": 428, "reflex": 428, "and_test": 428, "not_test": 428, "walrus": [428, 479, 481], "conditional_express": [428, 433], "lambda_expr": 428, "starred_item": 428, "expr4": 428, "expr5": 428, "roundoff": 428, "0041": 428, "precompos": 428, "u00c7": 428, "u0043": 428, "u0327": 428, "_pypegen_pars": 429, "reserved_keyword": 429, "n_keyword_list": 429, "start_rul": 429, "file_rul": 429, "interactive_rul": 429, "eval_rul": 429, "py_func_type_input": 429, "func_type_rul": 429, "grammat": [429, 481], "invalid_": 429, "rule_nam": 429, "return_typ": 429, "e1": [429, 473], "e2": 429, "first_alt": 429, "second_alt": 429, "mod_ti": [429, 470, 481], "_pypegen_make_modul": 429, "statement_newlin": 429, "_pyast_interact": 429, "_pyast_express": 429, "type_express": 429, "_pyast_functiontyp": 429, "asdl_stmt_seq": 429, "_pypegen_seq_flatten": 429, "_pypegen_singleton_seq": 429, "stmt_ti": 429, "_pyast_pass": 429, "_pypegen_interactive_exit": 429, "type_alia": 429, "star_express": 429, "_pyast_expr": 429, "return_stmt": [429, 434], "import_stmt": [429, 434], "raise_stmt": [429, 434], "del_stmt": [429, 434], "yield_stmt": [429, 434], "assert_stmt": [429, 434], "_pyast_break": 429, "_pyast_continu": 429, "global_stmt": [429, 434], "nonlocal_stmt": [429, 434], "function_def": 429, "class_def": 429, "annotated_rh": 429, "yield_expr": 429, "check_vers": 429, "_pyast_annassign": 429, "expr_ti": 429, "_pypegen_set_expr_context": 429, "single_target": 429, "single_subscript_attribute_target": 429, "asdl_expr_seq": 429, "star_target": 429, "tc": 429, "_pyast_assign": 429, "new_type_com": 429, "_pyast_augassign": 429, "invalid_assign": 429, "augoper": 429, "_pypegen_augoper": 429, "_pyast_return": 429, "_pyast_rais": 429, "_pyast_glob": 429, "asdl_identifier_seq": 429, "_pypegen_map_names_to_id": 429, "_pyast_nonloc": 429, "del_target": 429, "_pyast_delet": 429, "invalid_del_stmt": 429, "_pyast_assert": 429, "invalid_import": 429, "dotted_as_nam": 429, "_pyast_import": 429, "dotted_nam": 429, "import_from_target": 429, "_pyast_importfrom": 429, "_pypegen_seq_count_dot": 429, "asdl_alias_seq": 429, "import_from_as_nam": 429, "alias_ti": 429, "_pypegen_alias_for_star": 429, "invalid_import_from_target": 429, "_pyast_alia": 429, "_pypegen_join_names_with_dot": 429, "invalid_block": 429, "class_def_raw": 429, "_pypegen_class_def_decor": 429, "invalid_class_def_raw": 429, "_pyast_classdef": 429, "function_def_raw": 429, "_pypegen_function_def_decor": 429, "invalid_def_raw": 429, "func_type_com": 429, "_pyast_functiondef": 429, "arguments_ti": 429, "_pypegen_empty_argu": 429, "_pyast_asyncfunctiondef": 429, "invalid_paramet": 429, "slash_no_default": 429, "asdl_arg_seq": 429, "param_no_default": 429, "param_with_default": 429, "star_etc": 429, "_pypegen_make_argu": 429, "slash_with_default": 429, "slashwithdefault": 429, "_pypegen_slash_with_default": 429, "staretc": 429, "invalid_star_etc": 429, "param_maybe_default": 429, "_pypegen_star_etc": 429, "param_no_default_star_annot": 429, "arg_ti": 429, "invalid_kwd": 429, "_pypegen_add_type_comment_to_arg": 429, "param_star_annot": 429, "namedefaultpair": 429, "_pypegen_name_default_pair": 429, "_pyast_arg": 429, "star_annot": 429, "invalid_default": 429, "invalid_if_stmt": 429, "elif_stmt": 429, "_pyast_if": 429, "else_block": 429, "invalid_elif_stmt": 429, "invalid_else_stmt": 429, "invalid_while_stmt": 429, "_pyast_whil": 429, "invalid_for_stmt": 429, "_pyast_for": 429, "_pyast_asyncfor": 429, "invalid_for_target": 429, "invalid_with_stmt_ind": 429, "asdl_withitem_seq": 429, "_pyast_with": 429, "_pyast_asyncwith": 429, "invalid_with_stmt": 429, "withitem_ti": 429, "_pyast_withitem": 429, "invalid_with_item": 429, "invalid_try_stmt": 429, "finally_block": 429, "_pyast_tri": 429, "asdl_excepthandler_seq": 429, "except_block": 429, "except_star_block": 429, "_pyast_trystar": 429, "excepthandler_ti": 429, "invalid_except_stmt_ind": 429, "_pyast_excepthandl": 429, "invalid_except_stmt": 429, "invalid_except_star_stmt_ind": 429, "invalid_finally_stmt": 429, "asdl_match_case_seq": 429, "_pyast_match": 429, "invalid_match_stmt": 429, "_pyast_tupl": 429, "_pypegen_seq_insert_in_front": 429, "match_case_ti": 429, "invalid_case_block": 429, "_pyast_match_cas": 429, "pattern_ti": 429, "asdl_pattern_seq": 429, "_pyast_matchsequ": 429, "pattern_capture_target": 429, "_pyast_matcha": 429, "invalid_as_pattern": 429, "asdl_seq_len": 429, "asdl_seq_get": 429, "_pyast_matchor": 429, "_pyast_matchvalu": 429, "complex_numb": 429, "_pyast_matchsingleton": 429, "literal_expr": 429, "_pyast_const": 429, "signed_real_numb": 429, "imaginary_numb": 429, "_pyast_binop": 429, "_pyast_unaryop": 429, "real_numb": 429, "_pypegen_ensure_r": 429, "_pypegen_ensure_imaginari": 429, "_pyast_attribut": 429, "asdl_seq": 429, "_pyast_matchstar": 429, "_pyast_matchmap": 429, "_pypegen_get_pattern_key": 429, "_pypegen_get_pattern": 429, "keypatternpair": 429, "_pypegen_key_pattern_pair": 429, "_pyast_matchclass": 429, "invalid_class_pattern": 429, "_pyast_typealia": 429, "asdl_type_param_seq": 429, "type_param_seq": 429, "type_param_ti": 429, "type_param_bound": 429, "_pyast_typevar": 429, "raise_syntax_error_starting_from": 429, "tuple_kind": 429, "_pyast_typevartupl": 429, "_pyast_paramspec": 429, "invalid_express": 429, "invalid_legacy_express": 429, "_pyast_ifexp": 429, "lambdef": 429, "_pyast_yieldfrom": 429, "_pyast_yield": 429, "bitwise_or": 429, "_pyast_star": 429, "_pyast_namedexpr": 429, "invalid_named_express": 429, "_pyast_boolop": 429, "compare_op_bitwise_or_pair": 429, "_pyast_compar": 429, "asdl_int_seq": 429, "_pypegen_get_cmpop": 429, "_pypegen_get_expr": 429, "cmpopexprpair": 429, "eq_bitwise_or": 429, "noteq_bitwise_or": 429, "lte_bitwise_or": 429, "lt_bitwise_or": 429, "gte_bitwise_or": 429, "gt_bitwise_or": 429, "notin_bitwise_or": 429, "in_bitwise_or": 429, "isnot_bitwise_or": 429, "is_bitwise_or": 429, "_pypegen_cmpop_expr_pair": 429, "tok": 429, "_pypegen_check_barry_as_flufl": 429, "bitwise_xor": 429, "bitwise_and": 429, "await_primari": 429, "_pyast_await": 429, "_pyast_cal": 429, "_pyast_subscript": 429, "_pyast_slic": 429, "invalid_group": 429, "lambda_param": 429, "_pyast_lambda": 429, "invalid_lambda_paramet": 429, "lambda_paramet": 429, "lambda_slash_no_default": 429, "lambda_param_no_default": 429, "lambda_param_with_default": 429, "lambda_star_etc": 429, "lambda_slash_with_default": 429, "invalid_lambda_star_etc": 429, "lambda_param_maybe_default": 429, "lambda_kwd": 429, "invalid_lambda_kwd": 429, "fstring_replacement_field": 429, "_pypegen_constant_from_token": 429, "debug_expr": 429, "fstring_convers": 429, "fstring_full_format_spec": 429, "_pypegen_formatted_valu": 429, "invalid_replacement_field": 429, "resulttokenwithmetadata": 429, "conv_token": 429, "conv": [429, 450, 476], "_pypegen_check_fstring_convers": 429, "fstring_format_spec": 429, "_pypegen_setup_full_format_spec": 429, "_pypegen_decoded_constant_from_token": 429, "fstring": [429, 481], "_pypegen_joined_str": 429, "_pypegen_constant_from_str": 429, "_pypegen_concatenate_str": 429, "_pyast_list": 429, "_pyast_set": 429, "double_starred_kvpair": 429, "_pyast_dict": 429, "_pypegen_get_key": 429, "_pypegen_get_valu": 429, "invalid_double_starred_kvpair": 429, "keyvaluepair": 429, "_pypegen_key_value_pair": 429, "kvpair": 429, "for_if_claus": 429, "asdl_comprehension_seq": 429, "comprehension_ti": 429, "_pyast_comprehens": 429, "_pyast_listcomp": 429, "invalid_comprehens": 429, "_pyast_setcomp": 429, "_pyast_generatorexp": 429, "_pyast_dictcomp": 429, "invalid_dict_comprehens": 429, "invalid_argu": 429, "_pypegen_collect_call_seq": 429, "_pypegen_dummy_nam": 429, "check_null_allow": 429, "_pypegen_seq_extract_starred_expr": 429, "asdl_keyword_seq": 429, "_pypegen_seq_delete_starred_expr": 429, "kwarg_or_star": 429, "kwarg_or_double_star": 429, "_pypegen_join_sequ": 429, "invalid_starred_express": 429, "keywordorstar": 429, "invalid_kwarg": 429, "_pypegen_keyword_or_star": 429, "keyword_ti": 429, "_pyast_keyword": 429, "star_targets_list_seq": 429, "star_targets_tuple_seq": 429, "target_with_star_atom": 429, "t_primari": 429, "t_lookahead": 429, "star_atom": 429, "del_t_atom": 429, "_pypegen_seq_append_to_end": 429, "invalid_double_type_com": 429, "raise_syntax_error_known_loc": 429, "raise_syntax_error_known_rang": 429, "_pypegen_get_last_comprehension_item": 429, "pypegen_last_item": 429, "_pypegen_nonparen_genexp_in_cal": 429, "_pypegen_arguments_parsing_error": 429, "_without_invalid": 429, "expression_without_invalid": 429, "_pypegen_check_legacy_stmt": 429, "kf": 429, "dsfsdf": 429, "forgot": [429, 470, 472], "_pypegen_get_expr_nam": 429, "invalid_ann_assign_target": 429, "raise_syntax_error_invalid_target": 429, "raise_indentation_error": 429, "invalid_parameters_help": 429, "raise_syntax_error": 429, "invalid_lambda_parameters_help": 429, "for_target": 429, "invalid_class_argument_pattern": 429, "pypegen_first_item": 429, "invalid_kvpair": 429, "raise_error_known_loc": 429, "raise_syntax_error_on_next_token": 429, "invalid_conversion_charact": 429, "immateri": 430, "reinitialis": 430, "rerun": [430, 468, 481], "mpf": 430, "_init_module_attr": 430, "atyp": 430, "module_repr": [430, 470, 471, 472, 475, 481], "searchabl": [430, 481], "subpackage1": 430, "modulex": 430, "moduley": 430, "subpackage2": 430, "modulez": 430, "modulea": 430, "volunt": [432, 466], "lloyd": 432, "hugunin": 432, "backus": 432, "naur": 432, "lc_letter": 432, "vim": [433, 457, 475], "fileencod": 433, "bram": [433, 462], "moolenaar": 433, "2100": 433, "maart": 433, "mei": 433, "juni": 433, "augustus": 433, "oktob": 433, "unwis": 433, "uax": 433, "3131": [433, 468, 481], "xid_start": 433, "xid_continu": 433, "other_id_start": 433, "id_start": 433, "mc": [433, 481], "other_id_continu": 433, "id_continu": 433, "connector": 433, "proplist": 433, "normat": 433, "derivedcoreproperti": 433, "breakag": [433, 460, 461, 463, 472, 478, 481], "stringprefix": 433, "shortstr": 433, "longstr": 433, "shortstringitem": 433, "longstringitem": 433, "shortstringchar": 433, "stringescapeseq": 433, "longstringchar": 433, "bytesprefix": 433, "shortbyt": 433, "longbyt": 433, "shortbytesitem": 433, "longbytesitem": 433, "shortbyteschar": 433, "bytesescapeseq": 433, "longbyteschar": 433, "ur": [433, 468, 481], "reintroduc": [433, 481], "codebas": [433, 475, 476, 481], "0o377": [433, 471, 472, 481], "mistyp": 433, "literal_char": 433, "replacement_field": 433, "f_express": 433, "abc5": 433, "34567": [433, 477], "0x400": 433, "mill": 433, "decinteg": 433, "bininteg": 433, "octinteg": 433, "hexinteg": 433, "nonzerodigit": 433, "bindigit": 433, "0o177": 433, "0b100110111": 433, "79228162514264337593543950336": 433, "0xdeadbeef": 433, "100_000_000_000": 433, "0b_1110_0101": 433, "pointfloat": 433, "exponentfloat": 433, "077e010": 433, "77e10": 433, "14e": 433, "0e0": 433, "14_15_93": 433, "14j": 433, "10j": 433, "001j": 433, "1e100j": 433, "14_15_93j": 433, "expression_stmt": 434, "assignment_stmt": 434, "augmented_assignment_stmt": 434, "annotated_assignment_stmt": 434, "pass_stmt": 434, "break_stmt": 434, "continue_stmt": 434, "future_stmt": 434, "type_stmt": 434, "3132": [434, 468], "augtarget": 434, "augop": 434, "expression1": 434, "expression2": 434, "tracebackobj": 434, "relative_modul": 434, "fbb": 434, "subpkg2": 434, "subpkg1": 434, "3104": [434, 468], "value_of_point": 434, "pythonrc": 436, "startup_fil": 436, "awk": [437, 460], "smalltak": 438, "pyhon": [438, 448], "the_answ": 438, "scope_test": 438, "do_loc": 438, "do_nonloc": 438, "do_glob": 438, "realpart": 438, "imagpart": 438, "canin": 438, "fido": 438, "buddi": 438, "add_trick": 438, "warehous": [438, 473], "w2": 438, "addtwic": 438, "derivedclassnam": 438, "baseclassnam": 438, "base3": 438, "_spam": 438, "items_list": 438, "__updat": 438, "mappingsubclass": 438, "_mapping__upd": 438, "_mappingsubclass__upd": 438, "str_iter": 438, "0x10c90e650": 438, "rev": 438, "0x00a1db50": 438, "golf": 438, "xvec": 438, "yvec": 438, "260": [438, 459, 467, 477], "unique_word": 438, "valedictorian": 438, "gpa": 438, "graduat": [438, 476, 479], "defenestr": 439, "han": [439, 463, 470, 481], "onor": 439, "active_us": 439, "myemptyclass": 439, "initlog": 439, "rust": 439, "http_error": [439, 470], "teapot": [439, 470, 481], "where_i": 439, "grass": [439, 470], "987": [439, 447, 448], "1597": 439, "10042ed0": 439, "fib2": [439, 448], "f100": 439, "ask_ok": 439, "ye": [439, 471, 481], "vooooom": 439, "bereft": 439, "daisi": 439, "cheeseshop": 439, "sorri": 439, "limburg": 439, "runni": 439, "shopkeep": 439, "palin": 439, "shop": [439, 452], "pos1": 439, "pos2": 439, "pos_or_kwd": 439, "kwd1": 439, "kwd2": 439, "standard_arg": 439, "pos_only_arg": 439, "kwd_only_arg": 439, "combined_exampl": 439, "pos_on": 439, "kwd_on": 439, "write_multiple_item": 439, "bleedin": 439, "demis": 439, "make_incrementor": 439, "uppercamelcas": 439, "lowercase_with_underscor": 439, "kiwi": 440, "tangerin": 440, "grape": 440, "7j": 440, "freshfruit": 440, "loganberri": 440, "passion": 440, "weapon": 440, "14159": [440, 442], "comprehes": 440, "3x4": 440, "transposed_row": 440, "88888": 440, "basket": 440, "crabgrass": 440, "alacazam": [440, 464], "tel": 440, "sape": 440, "4139": 440, "brave": 440, "tic": 440, "tac": 440, "toe": 440, "raw_data": 440, "filtered_data": 440, "string3": 440, "trondheim": 440, "hammer": [440, 460], "non_nul": 440, "this_fail": 441, "hither": 441, "flew": 441, "bool_return": 441, "0001100110011001100110011001100110011001100110011": 442, "3602879701896397": 442, "10000000000000001": 442, "12g": [442, 460], "peril": 442, "3537115888337719": 442, "1125899906842624": 442, "921f9f01b866ep": 442, "10430216751806065": 442, "266310978": 442, "67179024": 442, "143401161448607": 442, "143401161400469": 442, "266262841": 442, "31058735": 442, "003244936839808227": 442, "042173697819788e": 442, "042178034628478e": 442, "0051575902860057365": 442, "7205759403792794": 442, "17f": 442, "36028797018963968": 442, "referendum": 444, "yes_vot": 444, "42_572_654": 444, "no_vot": 444, "43_132_495": 444, "vote": [444, 460, 465, 473], "42572654": 444, "40000": [444, 481], "dcab": 444, "7678": 444, "phone": [444, 473], "10d": 444, "eel": 444, "hovercraft": 444, "roach": [444, 477, 479, 481], "horribl": 444, "manfr": 444, "8637678": 444, "4d": 444, "729": 444, "00012": 444, "workfil": 444, "0123456789abcdef": 444, "6th": [444, 481], "korn": 445, "ipython": [445, 466, 470], "bpython": 445, "the_world_is_flat": 446, "666666666666667": 447, "rabbit": 447, "ame": [447, 477], "thingi": 447, "ium": 447, "unununium": 447, "tho": 447, "supercalifragilisticexpialidoci": [447, 450], "fibo": 448, "itemnam": 448, "yuck": 448, "ufs": 448, "_framework": 448, "_git": [448, 481], "_home": 448, "callstat": [448, 478, 480, 481], "wavread": 448, "wavwrit": 448, "aiffread": 448, "aiffwrit": 448, "auread": 448, "auwrit": 448, "vocod": 448, "karaok": 448, "echofilt": 448, "atten": 448, "subitem": 448, "subsubitem": 448, "specific_submodul": 448, "urround": 448, "python312": [449, 450], "accesslog": 449, "installdir": [449, 454], "tea": 449, "70710678118654757": 449, "17970987693706186": 449, "6071428571428572": 449, "worldtimeapi": 449, "01t01": 449, "689215": 449, "soothsay": 449, "jcaesar": 449, "1964": 449, "14368": 449, "witch": 449, "wrist": 449, "226805979": 449, "57535828626024577": 449, "54962537085770791": 449, "teststatisticalfunct": 449, "test_averag": 449, "batteri": 449, "sqllite3": 449, "english_unit": 450, "villag": 450, "folk": 450, "nottingham": 450, "ditch": 450, "fund": [450, 460, 465], "nottinghamfolk": 450, "unladen": [450, 473], "photofil": 450, "img_1074": 450, "img_1076": 450, "img_1077": 450, "batchrenam": 450, "seqnum": 450, "ashley_": 450, "ashley_0": 450, "ashley_1": 450, "ashley_2": 450, "iiihh": 450, "comp_siz": 450, "uncomp_s": 450, "filenames": 450, "decoupl": [450, 476, 478], "asynczip": 450, "4000": 450, "700": 450, "22222": 450, "26932": [450, 481], "task3": 450, "task4": 450, "unsearch": 450, "starting_nod": 450, "breadth_first_search": 450, "gen_mov": 450, "is_goal": 450, "lua": 450, "rearrang": [450, 460, 463, 465, 467, 480, 481], "09999999999999995": 450, "142857142857142857142857142857142857": 450, "nova": 451, "136kb": 451, "py2": [451, 473, 481], "whl": 451, "kenneth": 451, "reitz": 451, "kennethreitz": 451, "akuchl": 451, "596": [452, 480], "00797": 452, "pyvideo": 452, "bbdehiioqssuvvwx": 453, "0b2": [453, 481], "0c076caaa8": 453, "20161005": 453, "wdefault": [453, 467, 473, 481], "walway": [453, 463], "wmodul": 453, "wonc": 453, "wignor": 453, "wi": 453, "frozen_modul": [453, 481], "importlib_bootstrap": 453, "importlib_bootstrap_extern": 453, "showalloccount": [453, 477, 480, 481], "oldpars": [453, 480, 481], "qualif": [453, 475], "selftest": 453, "4294967295": [453, 477], "encodingnam": 453, "pythondumprefsfil": [453, 481], "c11": [454, 471, 474, 481], "stdint": [454, 481], "acloc": [454, 472, 481], "ubuntu": [454, 471, 478, 481], "autoreconf": 454, "ivf": 454, "autoconf": [454, 472, 481], "_sqlite": [454, 481], "pylong_bits_in_digit": [454, 471, 481], "dbmlibord": [454, 467], "py_coerce_c_local": 454, "freelist": [454, 471, 481], "_bundl": [454, 470, 481], "pystat": [454, 481], "py_stat": 454, "summarize_stat": 454, "memf": 454, "noderawf": 454, "eprefix": 454, "bolt": [454, 472, 481], "profile_task": [454, 480, 481], "clang": [454, 472, 475, 477, 481], "llvm": [454, 477, 481], "profdata": [454, 481], "interposit": [454, 470, 481], "testtimeout": [454, 481], "gold": 454, "thinlto": [454, 471, 472, 481], "fdata": 454, "bolt_instrument_flag": [454, 481], "bolt_apply_flag": [454, 481], "gprof": [454, 464], "fstrict": 454, "gettotalrefcount": [454, 481], "__lltrace__": [454, 481], "_pyobject_assert": 454, "ndebug": 454, "py_safe_downcast": 454, "valgrind": [454, 467, 473, 477, 481], "addresssanit": [454, 481], "asan": [454, 481], "memorysanit": 454, "msan": [454, 481], "undefinedbehaviorsanit": 454, "ubsan": [454, 481], "libpythonmajor": [454, 470, 481], "lib1": 454, "mpdec": 454, "with_editlin": 454, "have_libreadlin": 454, "rpath": [454, 458, 470, 481], "fnv": [454, 475], "siphash13": [454, 471, 481], "universalsdk": [454, 465, 480, 481], "sdkdir": 454, "arch": [454, 466, 481], "universal2": [454, 457, 479, 480, 481], "config_sit": [454, 481], "aarch64": [454, 481], "ac_cv_buggy_getaddrinfo": 454, "ac_cv_file__dev_ptmx": 454, "ac_cv_file__dev_ptc": 454, "makesetup": [454, 471, 481], "buildbottest": 454, "distclean": [454, 481], "py_build_core_builtin": 454, "_asyncio": [454, 481], "py_build_core_modul": [454, 481], "pyapi_data": [454, 463, 481], "py_exported_symbol": 454, "py_imported_symbol": 454, "configure_cppflag": 454, "cppflag": [454, 463, 481], "include_dir": [454, 460], "basecppflag": 454, "py_cppflag": 454, "srcdir": [454, 473, 481], "cflags_nodist": [454, 481], "65320": 454, "harden": [454, 481], "heighten": 454, "compileall_opt": [454, 472, 481], "j0": [454, 472, 481], "extra_cflag": 454, "configure_cflag": 454, "configure_cflags_nodist": 454, "basecflag": 454, "cflags_alias": 454, "ccshare": 454, "fpic": [454, 481], "cflagsforshar": 454, "py_cflag": [454, 481], "py_cflags_nodist": [454, 481], "py_stdmodule_cflag": [454, 481], "py_core_cflag": 454, "dpy_build_cor": [454, 481], "py_builtin_module_cflag": 454, "dpy_build_core_builtin": 454, "_testemb": [454, 481], "configure_ldflag": 454, "stomp": 454, "ldflags_nodist": 454, "configure_ldflags_nodist": 454, "lib_dir": 454, "lrt": 454, "ldshare": [454, 481], "py_ldflag": 454, "bldshare": 454, "py_core_ldflag": 454, "py_ldflags_nodist": 454, "savag": 457, "bobsavag": 457, "invit": [457, 475], "nano": 457, "barebon": 457, "textmat": [457, 475], "macrom": 457, "macvim": 457, "aquamac": 457, "qa1067": 457, "hashcollis": 457, "hkn": 457, "idle_intro": 457, "pyobjc": 457, "wxpython": 457, "riverbankcomput": 457, "pysid": 457, "pythonmac": 457, "macpython": [457, 462], "maint": 458, "opensus": 458, "portal": 458, "fedoraproject": 458, "packaging_tutorial_gnu_hello": 458, "slackbook": 458, "slackwar": 458, "pkg_add": 458, "1p2": 458, "pki": 458, "install_sw": 458, "xzf": 458, "pushd": 458, "openssldir": 458, "j8": 458, "popd": 458, "team": [459, 460, 461, 462, 467, 475, 480, 481], "longpathsen": 459, "currentcontrolset": 459, "installallus": 459, "targetdir": [459, 481], "defaultalluserstargetdir": 459, "programfil": 459, "defaultjustformetargetdir": 459, "localappdata": 459, "defaultcustomtargetdir": 459, "associatefil": 459, "prependpath": [459, 471], "appendpath": [459, 471], "include_doc": 459, "include_debug": 459, "include_dev": 459, "include_ex": 459, "include_launch": 459, "installlauncherallus": 459, "include_lib": 459, "include_pip": 459, "include_symbol": 459, "include_tcltk": 459, "include_test": 459, "include_tool": 459, "launcheron": 459, "simpleinstal": 459, "simpleinstalldescript": 459, "elev": [459, 481], "unattend": [459, 481], "pythonsoftwarefound": 459, "8_qbz5n2kfra8p0": 459, "localcach": 459, "windowsapp": 459, "package_nam": 459, "vfs": 459, "systemx86": 459, "test_fil": 459, "hklm": 459, "msix": 459, "uwp": 459, "nugetclidl": 459, "excludevers": 459, "outputdirectori": 459, "pythonx86": 459, "msbuild": [459, 481], "python37": 459, "ucrtbas": [459, 481], "profession": [459, 469], "anaconda": 459, "panda": 459, "conda": 459, "canopi": 459, "winpython": 459, "prebuilt": 459, "my_python_lib": 459, "procthread": 459, "set_1": 459, "wsl": [459, 481], "pythoncor": [459, 471, 481], "insenit": 459, "oneith": 459, "pylauncher_no_search_path": 459, "xpython": 459, "py_python": 459, "py_python3": 459, "pylauncher_debug": 459, "pylauncher_dryrun": 459, "pylauncher_allow_instal": [459, 481], "pylauncher_always_instal": 459, "rc_bad_venv_cfg": 459, "rc_create_process": 459, "rc_instal": 459, "rc_internal_error": 459, "rc_no_commandlin": 459, "rc_no_python": 459, "rc_no_venv_cfg": 459, "hive": 459, "hkcu": 459, "apploc": 459, "mfc": 459, "golden": [459, 475], "ongo": [459, 478], "mosh": [460, 461, 462, 464], "zadka": [460, 461, 462, 464], "steadi": 460, "paid": 460, "contractu": 460, "evolut": [460, 461], "6final": 460, "0beta1": 460, "fourfold": 460, "schneider": [460, 481], "kamp": 460, "checkin": 460, "submitt": 460, "ka": [460, 461, 462, 465], "yee": [460, 461, 462, 465], "scraper": 460, "indiffer": 460, "him": 460, "consensus": 460, "dissent": 460, "lockstep": 460, "elementwis": [460, 461], "objectwis": 460, "536": 460, "countless": 460, "stormi": 460, "01ff": 460, "777": [460, 476], "setdefaultencod": 460, "unichr": [460, 462, 465], "encode_func": 460, "decode_func": 460, "stream_read": 460, "stream_writ": 460, "ustr": 460, "file_obj": [460, 463], "u2000ab": 460, "utf8_encod": 460, "utf8_decod": 460, "utf8_streamread": 460, "utf8_streamwrit": 460, "sre": [460, 462], "workhors": 460, "ewe": [460, 474], "argu": [460, 462, 467], "lengthier": [460, 461], "thoma": [460, 461, 464, 465, 466, 467, 470, 471, 472, 475, 476, 477, 478, 481], "wouter": [460, 461, 464, 465, 466, 467, 476, 479, 481], "strop": 460, "hlinuxtnam": 460, "joke": [460, 481], "jpython": 460, "realis": 460, "myself": 460, "afford": 460, "tobi": [460, 481], "kelsey": 460, "tiedemann": 460, "neil": [460, 461, 462, 463, 465, 467, 473, 476, 477, 478, 479, 481], "schemenau": [460, 461, 462, 463, 465, 467, 476, 479], "overrod": [460, 481], "tismer": [460, 475], "rewrot": [460, 463, 481], "jeremi": [460, 461, 462, 463, 464, 465, 466, 467, 481], "hylton": [460, 461, 462, 463, 464, 465, 466, 467], "isomorph": 460, "trashcan": [460, 471, 480, 481], "__cmp__": [460, 461, 463, 466, 467, 468], "itanium": [460, 476], "trent": [460, 463, 465, 475], "pythonc": 460, "dyld": [460, 481], "wart": [460, 468], "291": 460, "1beta1": 460, "runaway": 460, "gpf": 460, "find_recursionlimit": 460, "listobject": 460, "no_strict_list_append": 460, "0alpha1": 460, "gvr": [460, 462, 463, 464, 467, 477], "reaction": [460, 461], "x123456": 460, "3l": 460, "abcabcabc": 460, "4l": 460, "18446744073709551616": [460, 467], "subtlest": 460, "longval": 460, "17g": [460, 469], "0999999999999996": 460, "fulton": [460, 464, 477, 481], "extensionclass": 460, "myextensionclass": 460, "importdl": 460, "reorganis": 460, "dynload_": 460, "pyport": [460, 481], "vladimir": [460, 461, 463, 470, 472, 479, 481], "marangozov": [460, 461, 463], "pymem": [460, 465], "objimpl": 460, "gusi": 460, "unthread": 460, "yakov": 460, "markovitch": 460, "charl": [460, 467, 472, 474, 475, 476, 477, 478, 481], "waldman": 460, "affair": 460, "arduous": 460, "ritual": 460, "shepherd": [460, 463], "ward": [460, 462, 463, 464, 465, 476, 481], "tarbal": [460, 481], "py_modul": 460, "module1": 460, "module2": 460, "expat_extens": 460, "define_macro": 460, "xml_ns": 460, "xmltok": 460, "xmlpars": 460, "xmlrole": 460, "sdist": [460, 461, 465, 467, 477, 478, 481], "bdist_rpm": [460, 481], "bdist_wininst": [460, 470, 479, 480, 481], "xmllib": 460, "mullend": [460, 466], "tag1": 460, "perslist": 460, "persona": 460, "claudius": 460, "denmark": 460, "son": 460, "nephew": 460, "20th": 460, "4dom": 460, "fourthought": 460, "xmlproc": 460, "lar": [460, 463, 464, 465, 466, 467, 473, 474], "garshol": 460, "sgmlop": 460, "gallew": 460, "httplib": [460, 463, 464, 466, 467, 468, 481], "create_lin": 460, "create_polygon": 460, "oliv": [460, 481], "andrich": 460, "hewlett": 460, "packard": 460, "cmpcach": 460, "macmillan": 460, "twin": 460, "sunaudiodev": [460, 466], "bosch": 460, "prescod": [460, 461, 462, 465], "spider": 460, "fetchabl": 460, "browsercontrol": 460, "_winreg": [460, 466, 467, 468], "tutt": 460, "imputil": [460, 463, 467], "ihook": [460, 463, 466, 467], "vanilla": 460, "stdwin": 460, "packmail": 460, "whatsound": 460, "zmod": 460, "bolen": [460, 462], "gregg": 460, "hauser": 460, "detlef": [460, 463], "lannert": [460, 463], "aahz": [460, 464, 465], "maruch": 460, "tobia": 460, "polzin": 460, "russ": 460, "schmidt": 460, "sizabl": [461, 462], "pace": [461, 466], "clumsier": [461, 462], "list_attribut": [461, 462], "unknow": [461, 462], "gradual": [461, 462], "compulsori": [461, 462, 463], "crunch": 461, "tp_richcmp": 461, "ascher": 461, "spare": 461, "toolbox": [461, 462, 463], "aycock": 461, "spark": [461, 481], "135143996": 461, "py_tpflags_checktyp": 461, "complaint": 461, "middleton": 461, "vault": 461, "parnassus": 461, "retir": [461, 481], "wayback": 461, "catalogu": 461, "bdist_": 461, "sean": [461, 463, 464, 465, 467, 481], "reifschneid": [461, 463, 464, 465, 467], "bonus": 461, "addict": 461, "purcel": 461, "gellekum": 461, "ninth": 461, "edward": [461, 462, 464, 465], "136": 461, "underestim": [461, 462, 463, 464, 465, 466], "afoul": [461, 463], "getc": 461, "jeff": [461, 463, 475, 477, 481], "epler": 461, "fuller": 461, "preliminari": [461, 478, 481], "ben": [461, 465, 471, 476, 481], "wolfson": 461, "vestigi": [461, 481], "ancestri": 461, "shrunk": [461, 481], "340k": 461, "majewski": 461, "jason": [461, 463, 466, 472, 475, 479, 480, 481], "tishler": [461, 463, 481], "risco": [461, 468], "dietmar": 461, "schwertberg": 461, "unixwar": 461, "billi": 461, "alli": 461, "graem": 461, "goodger": [461, 462, 464], "grave": 461, "hudson": [461, 462, 463, 465, 481], "irregular": 462, "dark": [462, 481], "safeguard": 462, "esoter": [462, 465], "lockablefil": 462, "posixfil": [462, 466], "__methods__": [462, 468, 481], "inaccur": [462, 464, 481], "defstat": 462, "novel": [462, 463, 465], "eiffel": 462, "postcondit": 462, "eiffelmethod": 462, "pre_f": 462, "post_f": 462, "zodb": 462, "get_par": 462, "__coerce__": [462, 467], "get_siz": 462, "set_siz": 462, "new_attr": 462, "whet": 462, "appetit": 462, "corp": 462, "0x8116870": 462, "0x8117f90": [462, 463], "www2": [462, 463], "cs": [462, 463], "arizona": [462, 463], "ipd266": [462, 463], "harbor": [462, 463], "magnus": [462, 463], "hetland": [462, 463], "crew": [462, 463, 465], "1234567890123": 462, "1234567890123l": 462, "18446744073709551616l": 462, "herald": 462, "erupt": 462, "storm": 462, "sarcast": 462, "110000": 462, "261": [462, 481], "x9c": 462, "xc9": 462, "xc1": 462, "nand": 462, "666": 462, "5r92": 462, "qe": 462, "ee8v4": 462, "v8": 462, "f5d": 462, "6yd86yt": 462, "f5r": 462, "f5r8f": 462, "s92p": 462, "86yd": 462, "5t": 462, "71i": 462, "5x": [462, 472, 477, 478, 481], "sheesh": 462, "furrfu": 462, "__unicode__": [462, 467], "headlin": 462, "oreillynet": 462, "meerkat": 462, "getchannel": 462, "freshmeat": 462, "4549": 462, "3dgamer": 462, "52719": 462, "xsl": 462, "html2fo": 462, "2104": 462, "memberst_mtim": 462, "mathewson": 462, "ichiro": 462, "itojun": 462, "hagino": 462, "bigcharset": 462, "2487": 462, "pier": [462, 463], "lauder": [462, 463], "anthoni": [462, 464, 465, 478, 479, 480, 481], "baxter": [462, 464, 465], "michel": [462, 463, 474, 475, 476, 477, 478, 479, 480, 481], "pelleti": 462, "rfc2822": [462, 481], "grunt": 462, "generator": 462, "itamar": [462, 472], "shtull": 462, "traur": 462, "implementor": [462, 467, 477], "py_tpflags_gc": 462, "pyobject_gc_init": 462, "pyobject_gc_fini": 462, "pygc_head_s": 462, "pyobject_as_gc": 462, "pyobject_from_gc": 462, "untyp": 462, "vsprintf": 462, "overrun": [462, 467, 481], "527": 462, "683": [462, 472, 481], "82": 462, "blown": 462, "osa": 462, "quicktim": 462, "cleanfutur": 462, "gpled": 462, "ftpmirror": 462, "romberg": 462, "pyrange_new": [462, 465], "sneakili": 462, "rhythm": 462, "borland": [462, 481], "stephen": [462, 471, 481], "hansen": [462, 480, 481], "generous": 462, "installermast": 462, "0a": 462, "stolk": 462, "bremmer": 462, "keith": 462, "brigg": 462, "carel": [462, 481], "felling": 462, "mclay": 462, "donnel": 462, "joona": 462, "paalasma": 462, "jen": [462, 481], "reinhardt": 462, "welbourn": 462, "polish": [463, 481], "berkeleydb": [463, 466, 467, 481], "immutableset": [463, 464], "union_upd": 463, "ungain": 463, "martelli": [463, 466], "suzuki": 463, "hisao": 463, "nyman": 463, "inadequ": 463, "hodgson": 463, "irrit": 463, "__builtin__": [463, 468, 469], "walter": [463, 464, 465, 466, 479], "rwald": [463, 464, 465, 479], "heart": [463, 472], "quixot": 463, "richard": [463, 465, 466, 474, 475, 481], "toss": 463, "sundri": 463, "kevin": [463, 464, 466, 467, 472, 473, 481], "alti": 463, "cole": [463, 464, 473, 481], "mcnamara": [463, 465], "cliff": [463, 467], "cpickl": [463, 465, 467, 468], "fanciest": 463, "__safe_for_unpickling__": 463, "rip": 463, "dcba": 463, "innocu": 463, "welter": 463, "fakeseq": 463, "calc_item": 463, "underw": [463, 464, 465, 466], "dylan": 463, "simionato": 463, "029035": 463, "pedroni": [463, 465], "setcheckinterv": [463, 480, 481], "getcheckinterv": [463, 480, 481], "_socket": [463, 481], "u4000": 463, "u4001abc": 463, "simon": [463, 481], "brun": 463, "0045": 463, "goofi": 463, "0goofi": 463, "oren": [463, 472, 474, 478, 481], "tirosh": [463, 474], "christoph": [463, 476, 481], "craig": [463, 481], "set_lineno": 463, "idiosyncrasi": [463, 481], "hotspot": 463, "pyston": [463, 464, 465, 468, 481], "orendorff": [463, 466], "bsddb185": 463, "db2pickl": 463, "pickle2db": 463, "bsddb3": [463, 468], "sampmodul": 463, "samp": 463, "cpp": [463, 481], "robert": [463, 465, 466, 467, 476, 478, 481], "weber": [463, 476, 481], "strand": [463, 464], "xlinux": 463, "dad": 463, "priorityqu": 463, "connor": [463, 475, 477, 481], "idlefork": 463, "tino": 463, "deg": 463, "loadavg": 463, "geert": [463, 476, 481], "otkidach": 463, "stat_float_tim": [463, 465, 474, 478, 481], "1034791200": 463, "6335014": 463, "fitzroy": 463, "dale": [463, 474], "sn": 463, "nos": 463, "3407": 463, "3805": 463, "1505": 463, "7023": 463, "2401": 463, "2267": 463, "9733": 463, "8083": 463, "9195": 463, "rexec": 463, "bastion": 463, "rotor": [463, 464], "gilfix": 463, "collabor": 463, "exc_clear": [463, 468], "gust": [463, 464, 465, 466, 467, 473, 474], "whit": 463, "defi": 463, "auguri": 463, "sparrow": 463, "tis": [463, 464, 481], "companion": 463, "dummy_thread": [463, 478, 480, 481], "timer1": 463, "timer2": 463, "laptop": 463, "36831796169281006": 463, "37441694736480713": 463, "35304892063140869": 463, "17574405670166016": 463, "18193507194519043": 463, "17565798759460449": 463, "031107": 463, "tcl_obj": [463, 481], "wantobject": [463, 481], "tkapp": [463, 481], "dictmixin": 463, "seqdict": 463, "lookalik": 463, "keylist": [463, 464], "valuelist": 463, "quinlan": [463, 464, 467, 473], "3491": [463, 481], "30t21": 463, "994956": 463, "827738": 463, "optik": [463, 464, 465], "0x400cad4c": 463, "0x400cad2c": 463, "iinput": 463, "llength": 463, "undistinguish": 463, "pymemcompat": 463, "libpython2": 463, "ondrej": 463, "palkovski": 463, "dl_export": 463, "dl_import": 463, "pyarg_noarg": 463, "pystring_new": 463, "test_bufio": 463, "emx": 463, "macintyr": [463, 465], "weaklink": [463, 479, 480, 481], "atheo": [463, 481], "hurd": [463, 481], "openvm": 463, "mist": 463, "nifti": 463, "richi": 463, "hindl": 463, "0xffffffff": [463, 477, 481], "0xffffffffl": 463, "get_distutil_opt": 463, "bauer": 463, "chermsid": 463, "fraser": 463, "kelli": [463, 474, 475], "gerber": 463, "chris": [463, 465, 466, 474, 476, 477, 481], "lambert": [463, 475], "lalo": 463, "netzer": 463, "nowak": 463, "francesco": 463, "ricciardi": 463, "suzi": 463, "radic": 464, "481": 464, "arbcd": 464, "wxi": 464, "unif": 464, "8589934592": 464, "svensson": 464, "get_all_link": 464, "jiwon": [464, 474], "seo": [464, 474], "hye": [464, 465], "shik": [464, 465], "untrain": 464, "deco": 464, "0x402ef0d4": 464, "require_int": 464, "_deco": 464, "brain": 464, "bend": 464, "func_nam": [464, 468], "smith": [464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "979728": 464, "russel": 464, "pythondecoratorlibrari": 464, "dpkg": 464, "deb": 464, "unawar": 464, "0001100110011": 464, "inaccuraci": [464, 467], "1000000000000001": [464, 469], "magnifi": 464, "dodg": 464, "12f": 464, "100000000000": 464, "7956": 464, "64739884393063583815028902": 464, "1275": 464, "9184": 464, "123456789012": 464, "351364": 464, "18288201344": 464, "18288201344j": 464, "1828820134592177245001": 464, "facundo": [464, 466], "batista": [464, 466], "lahey": 464, "speleotrov": 464, "cowlishaw": 464, "rexx": 464, "resolve_dotted_attribut": 464, "dima": 464, "dorfman": 464, "gtk": [464, 466], "pyos_ascii_strtod": [464, 467, 469], "pyos_ascii_atof": [464, 467, 469], "pyos_ascii_formatd": 464, "buf_len": 464, "glib": 464, "relicens": 464, "donat": 464, "rei": 464, "carneiro": 464, "colormap": 464, "overflowwarn": 464, "method_descriptor": 464, "armin": [464, 465, 466, 467, 469, 473, 474, 475, 481], "rigo": [464, 465, 466, 481], "vasiliev": 464, "cjkcodec": [464, 481], "prc": 464, "roc": 464, "roman8": [464, 481], "iso_8859": 464, "pctp": 464, "belmont": [464, 470, 471, 481], "rg": 464, "lehmann": 464, "gass": 464, "tenfold": 464, "eland": 464, "yves": [464, 471], "dionn": 464, "arnaud": [464, 474], "mazin": 464, "key_val": 464, "0x402c2080": 464, "0x402c2090": 464, "bookmark": 464, "rgen": [464, 481], "erhard": 464, "extractor": 464, "cryptoapi": 464, "trevor": 464, "perrin": [464, 470], "beni": 464, "cherniavski": 464, "raynor": 464, "hector": 464, "urtubia": 464, "30000": 464, "sidestep": 464, "unlucki": [464, 481], "mpz": 464, "jar": 464, "loper": 464, "ambiti": 464, "objn": 464, "py_is_nan": 464, "tsc": 464, "pentium": 464, "misnam": [464, 473], "tracebackobject": 464, "pytracebackobject": 464, "dircach": [464, 466], "koray": 464, "dyck": 464, "hurt": 464, "hamish": 464, "lawson": 464, "sadruddin": 464, "rejeb": 464, "356": 465, "458": 465, "true_valu": 465, "false_valu": 465, "voter": 465, "true_v": 465, "false_v": 465, "rarer": 465, "pygtk": 465, "open_item": 465, "open_func": 465, "item_path": 465, "popup_menu": 465, "pypackag": 465, "numarray": 465, "oldpackag": 465, "gpg": 465, "unclean": [465, 481], "holger": 465, "krekel": 465, "tidier": 465, "pylib": 465, "pycheck": 465, "exception1": 465, "exception2": 465, "hackish": 465, "trivia": 465, "phillip": [465, 466, 469, 473, 477, 481], "ebi": [465, 466, 469, 473], "288": 465, "20160321211320": 465, "sidh": 465, "000178": 465, "sugalski": 465, "db_connect": [465, 466], "databaseconnect": [465, 466], "flawless": [465, 466], "db_transact": [465, 466], "mgr1": [465, 466], "mgr2": [465, 466], "version2": 465, "whatsnew": [465, 481], "lp64_wp": 465, "unreason": [465, 481], "travi": [465, 466, 467, 481], "oliph": [465, 466, 467], "zerodict": 465, "is_image_fil": 465, "lynn": 465, "bethard": [465, 467, 473, 476, 481], "puzzl": 465, "newbi": [465, 467], "needforspe": 465, "sprint": [465, 466], "reykjavik": 465, "ewt": 465, "llc": 465, "ccp": 465, "mcintyr": [465, 466], "ippolito": [465, 466, 467, 469], "diederich": [465, 469], "immisch": 465, "nel": 465, "mezzo": 465, "cammin": 465, "nostra": 465, "vita": 465, "ritrovai": 465, "una": 465, "selva": 465, "oscura": 465, "che": 465, "diritta": 465, "smarrita": 465, "init_lett": 465, "hotshot": 465, "josh": [465, 466, 476, 477, 479, 480, 481], "spoerri": 465, "bjorn": [465, 481], "tillenius": 465, "sweep": 465, "gregori": [465, 466, 467, 469, 470, 471, 472, 475, 477, 478, 479, 481], "schroeder": [465, 481], "antti": 465, "louko": 465, "diego": [465, 479, 481], "petten": 465, "goir": 465, "pybench": [465, 481], "regsub": 465, "statcach": 465, "tzpars": 465, "whrandom": 465, "kiendl": 465, "biondi": 465, "netlink": 465, "linuxjourn": 465, "7356": 465, "group_mask": 465, "getfamili": 465, "getproto": 465, "ih3": 465, "187": 465, "blai": 465, "subvers": [465, 466, 467, 473, 478, 481], "trunk": [465, 466], "45313": 465, "45315": 465, "45355": 465, "45356m": 465, "iterkeyref": 465, "itervalueref": 465, "oleg": [465, 472, 481], "broytmann": 465, "oussoren": [465, 466, 467, 473, 475, 479, 480], "atle": [465, 481], "heller": [465, 466, 467], "dl": [465, 466, 481], "strfri": 465, "71828": 465, "1783957616": 465, "20180410025338": 465, "theller": 465, "elementpath": [465, 478], "20201124024954": 465, "effbot": [465, 467], "textnod": 465, "rss10": 465, "svg": 465, "10px": 465, "320px": 465, "tran": 465, "qti": 465, "rhat": 465, "msoft": 465, "140000000000001": 465, "wsgi_app": 465, "20160331090247": 465, "supervis": 465, "market": 465, "for_loop": 465, "339": 465, "pyparser_astfromstr": [465, 470, 481], "pyparser_astfromfil": [465, 470, 481], "pyast_compil": [465, 470, 481], "ehresman": [465, 481], "kurt": 465, "kaiser": [465, 481], "evan": [465, 480, 481], "256k": 465, "py_loc": 465, "py_local_inlin": 465, "py_local_aggress": 465, "pyerr_warn": 465, "lll": [465, 481], "2573": 465, "pymem_": 465, "_malloc": 465, "_free": 465, "ralf": [465, 466], "gross": [465, 481], "kunstlev": 465, "iain": 465, "pryor": 465, "rovner": 465, "weikart": 465, "361": 466, "redesign": [466, 467, 475], "259": [466, 481], "py3kwarn": 466, "py_py3kwarningflag": 466, "3100": 466, "committe": 466, "jira": 466, "launchpad": 466, "trac": 466, "upfront": 466, "stellenbosch": 466, "africa": 466, "1980s": 466, "1990s": [466, 481], "ream": 466, "toolchain": [466, 477, 481], "dozen": [466, 473, 481], "python26": 466, "39916800": 466, "51090942171709440000": 466, "8222838654177922817725562880000000": 466, "33452526613163807108170062053440751665152000000000": 466, "mgr": 466, "15511187532873822802242430164693032110632597200169861120000": 466, "jess": [466, 469, 476, 477, 478, 481], "noller": [466, 469], "oudkerk": [466, 474, 475, 481], "last_login": 466, "npython": 466, "6a1": 466, "61261m": 466, "5367": 466, "mp4": 466, "banquet": 466, "invoic": 466, "750000e": 466, "6564": 466, "talin": 466, "u751f": 466, "u3080": 466, "u304": 466, "u3000": 466, "u3054": 466, "u3081": 466, "u305f": 466, "u307": 466, "pystringobject": 466, "u21ef": 466, "u3244": 466, "x87": 466, "x89": 466, "u31ef": 466, "ttys": 466, "cstringio": [466, 468], "stutzbach": [466, 467, 473], "verdon": 466, "doerwald": 466, "lownd": 466, "pybuf_lock": 466, "carl": [466, 467, 472, 473, 474, 479, 480, 481], "bank": 466, "vagu": 466, "printabletyp": 466, "drawabl": 466, "draw_doubl": 466, "aranguren": 466, "0o21": 466, "0b101111": 466, "052": 466, "173": 466, "0b10101101": 466, "1101": 466, "0b1101": 466, "patrick": [466, 470, 481], "maupin": 466, "undergo": 466, "yasskin": [466, 467, 473], "guil": 466, "r5rs": 466, "66666666666666663": 466, "40000000000000002": 466, "7074029114692207l": 466, "2251799813685248l": 466, "6004799503160661l": 466, "18014398509481984l": 466, "andi": [466, 469, 481], "chu": [466, 469], "1739468": [466, 469, 476], "2196": 466, "ud": 466, "1686487": 466, "amauri": [466, 467, 469, 473, 481], "forgeot": [466, 467, 469, 473, 481], "3473": 466, "2719": 466, "abc123": 466, "cdf246": 466, "1635": 466, "1640": 466, "3008": 466, "e000000000000p": 466, "5555555555555p": 466, "niceti": 466, "dickinson": [466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "2235": 466, "austin": 466, "1537": 466, "1473257": 466, "1444529": 466, "cplx": 466, "1491866": 466, "bengt": 466, "richter": 466, "1193128": 466, "1591665": 466, "im_self": 466, "1631171": 466, "jacob": [466, 471, 472, 481], "1700288": 466, "py_tpflags_have_version_tag": [466, 481], "1878": 466, "pitrou": [466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "1819": 466, "jvm": 466, "josiah": [466, 474], "carlson": [466, 474], "1736190": 466, "jes": [466, 467, 474, 477, 478, 481], "cea": [466, 467, 474, 477, 478, 481], "avi": [466, 467, 474, 477, 478, 481], "jcea": [466, 467, 468], "programacion": [466, 468], "dbshelv": 466, "barn": [466, 478, 481], "fiori": 466, "nubi": 466, "1817": 466, "600362": 466, "1381": 466, "var_typ": 466, "amplitud": 466, "dq": 466, "arvin": 466, "schnell": 466, "1638033": 466, "fabian": 466, "kreutz": 466, "insert_mod": 466, "1158": 466, "7182818": 466, "9999999895305022877376682436": 466, "1221598": 466, "1739906": 466, "1001604": 466, "iter1": 466, "iter2": 466, "getmoduleinfo": [466, 477, 481], "getarg": [466, 481], "izip_longest": 466, "2n": [466, 481], "2138": 466, "brouwer": 466, "2819": 466, "711019": 466, "lenton": 466, "wine": [466, 481], "petrosyan": 466, "inst_nam": 466, "_helper": 466, "levinson": 466, "1663329": 466, "horcicka": 466, "1181": 466, "1273829": 466, "1115886": 466, "barran": 466, "1339796": 466, "957650": 466, "1393667": 466, "1106316": 466, "exception_hierarchi": 466, "2439": 466, "achim": 466, "gaedk": 466, "1137": 466, "shawn": 466, "ligocki": 466, "1727780": 466, "wladmir": 466, "laan": 466, "1681432": 466, "hoyt": [466, 476, 481], "schmitt": 466, "846388": 466, "3487": 466, "lorenz": [466, 481], "2250": 466, "1861": 466, "pollobj": 466, "1657": 466, "ziad": [466, 467, 473, 476, 481], "2663": 466, "woken": 466, "1583": 466, "guilherm": [466, 467, 469, 475, 477, 478, 481], "polo": [466, 467, 469, 475, 477, 478, 481], "2240": 466, "2033": 466, "leif": 466, "hedstrom": 466, "957003": 466, "3207": 466, "fenner": 466, "829951": 466, "alberto": [466, 474], "bertog": 466, "1646": 466, "pomran": 466, "pedro": 466, "werneck": 466, "742598": 466, "1193577": 466, "remahl": 466, "1534": 466, "schuppeni": 466, "2898": 466, "1648": 466, "damien": [466, 475], "miller": [466, 475], "1537850": 466, "dustin": [466, 481], "mitchel": [466, 471, 481], "test_support": [466, 468], "transientresourc": 466, "sf": 466, "3781": 466, "wrec": 466, "dwayn": 466, "bailey": 466, "1581073": 466, "2871": 466, "erik": [466, 471, 472, 478, 481], "demain": 466, "1533909": 466, "2906": 466, "gregor": 466, "lingl": 466, "1513695": 466, "ftpwrapper": [466, 481], "3811": 466, "1599845": 466, "_send_traceback_head": 466, "1330538": 466, "riku": 466, "lindblad": 466, "2985": 466, "251": 466, "sysmodul": 466, "467924": 466, "horler": 466, "1775025": 466, "alexey": [466, 475, 476, 481], "borzenkov": 466, "1734346": 466, "ronach": [466, 467, 469, 473, 474, 475], "abcdefghijklm": 466, "stararg": [466, 481], "iterable1": 466, "__hex__": [466, 468], "__oct__": [466, 468], "in_json": 466, "simplejson": [466, 467], "data_struct": 466, "lastaccess": 466, "plist_str": 466, "writeplisttostr": 466, "new_struct": 466, "readplistfromstr": 466, "writeplist": [466, 475], "readplist": [466, 475, 478, 481], "1649190": 466, "outset": 466, "1798": 466, "janssen": 466, "bgenloc": 466, "buildtool": 466, "bundlebuild": [466, 481], "fpformat": 466, "gensuitemodul": 466, "imageop": 466, "imgfil": 466, "mhlib": 466, "mimetool": 466, "multifil": 466, "toaiff": 466, "gopherlib": [466, 468], "mimewrit": 466, "mimifi": 466, "rgbimg": 466, "trojan": [466, 467], "hors": [466, 467], "50003": 466, "duncan": 466, "grisbi": 466, "pyfile_incusecount": 466, "pyfile_decusecount": 466, "1675423": 466, "1629": 466, "1530959": 466, "free_list": [466, 481], "numfre": 466, "_maxfreelist": 466, "patchcheck": [466, 481], "nt4": 466, "sp4": 466, "1753245": 466, "flori": 466, "bruynoogh": 466, "2125": 466, "macf": 466, "macostool": 466, "1490190": 466, "_builtinsuit": 466, "aepack": 466, "aetool": 466, "aetyp": 466, "applesingl": 466, "appletrawmain": 466, "appletrunn": 466, "argvemul": 466, "audio_mac": 466, "autogil": 466, "carbon": [466, 473], "cfmfile": 466, "codewarrior": 466, "colorpick": 466, "easydialog": 466, "findertool": 466, "icglu": 466, "icopen": 466, "macerror": 466, "macresourc": 466, "miniaefram": 466, "nav": [466, 481], "osaterminolog": 466, "pimp": 466, "pixmapwrapp": 466, "stdsuit": 466, "systemev": 466, "terminalcommand": 466, "cddb": 466, "cdplayer": 466, "fl": 466, "flp": 466, "fm": 466, "glws": 466, "gl": 466, "panelpars": 466, "readcd": 466, "sv": 466, "torgb": 466, "videoread": 466, "1683368": 466, "conversionsyntax": 466, "1706815": 466, "dict1": 466, "dict2": 466, "ralph": 466, "corderoy": 466, "lambach": 466, "michlmayr": 466, "warner": 466, "373": 467, "7319": 467, "reenabl": 467, "qwarn": 467, "744": 467, "073": [467, 481], "551": 467, "616": [467, 480, 481], "is_verbos": 467, "bore": 467, "1mb": 467, "configdict": 467, "netlog": 467, "netlogg": 467, "vk": 467, "revamp": [467, 473], "vassalotti": [467, 469, 473, 475, 481], "0x37f850": 467, "0x37f080": 467, "122": [467, 477], "mb": [467, 481], "2335": 467, "aaa": 467, "aaaaa": 467, "2333": 467, "codereview": 467, "appspot": [467, 469, 473], "53094": [467, 469, 473], "icc": [467, 469, 481], "suncc": 467, "7117": 467, "295147905179352891391": 467, "9514790517935283e": 467, "65535l": 467, "9514790517935289e": 467, "3166": 467, "1811": 467, "meador": [467, 474, 481], "5211": 467, "5237": [467, 469], "1588": 467, "7988": 467, "3382": 467, "7994": [467, 475], "124": [467, 469, 473, 475], "johansson": [467, 469], "victor": [467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "stinner": [467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "3439": [467, 469], "7902": 467, "1583863": 467, "4759": 467, "5982": 467, "7604": 467, "belchenko": 467, "1616979": [467, 473], "8016": 467, "kaliszewski": 467, "4764": 467, "5677": 467, "lingard": 467, "7362": 467, "8268": 467, "7140": 467, "curtin": [467, 473, 474, 475, 478], "survivor": 467, "4074": 467, "4688": [467, 469], "long_info": 467, "4258": [467, 469, 479], "5260": 467, "5512": 467, "1087418": 467, "5176": 467, "4715": 467, "gawain": [467, 473], "bolton": [467, 473], "6713": [467, 473], "florent": [467, 473], "xicluna": [467, 473], "7462": [467, 473], "7622": [467, 473], "mcguir": [467, 469], "5084": [467, 469], "5670": 467, "maru": 467, "senthil": [467, 470, 473, 475, 476, 477, 478, 479, 480, 481], "kumaran": [467, 470, 473, 475, 476, 477, 478, 479, 480, 481], "5142": 467, "7703": 467, "2devel9": 467, "8156": 467, "hagen": [467, 481], "rstenau": [467, 481], "3860": 467, "1696199": [467, 469], "field1": 467, "field2": 467, "_2": [467, 469], "1818": [467, 469], "8729": 467, "kindahl": 467, "7005": 467, "3924": 467, "1515": 467, "4606": 467, "klose": [467, 474, 477], "8142": 467, "5788": 467, "strive": 467, "4796": 467, "2531": [467, 473], "8257": [467, 473], "6595": 467, "jos": [467, 481], "conti": 467, "7633": 467, "6857": 467, "7279": 467, "anatoli": [467, 481], "techtonik": [467, 481], "7585": 467, "8688": 467, "lennart": [467, 481], "regebro": [467, 481], "7490": 467, "murray": [467, 473, 475, 476, 477, 481], "1368247": 467, "5812": 467, "8294": [467, 473], "oversight": [467, 474, 476, 478, 481], "giampaolo": [467, 472, 473, 474, 476, 478, 479, 481], "rodola": [467, 472, 473, 476, 478, 479, 481], "2054": 467, "mouzo": 467, "6845": 467, "5479": 467, "nir": [467, 473, 474, 478, 481], "7471": [467, 473], "jacqu": 467, "frechet": 467, "4272": 467, "tadek": 467, "pietraszek": 467, "2846": [467, 473], "chenet": [467, 473], "7418": [467, 473], "kristj": [467, 473, 475], "valur": [467, 473, 475], "nsson": [467, 473, 475], "4879": 467, "eldon": 467, "ziegler": 467, "derek": [467, 469], "morr": [467, 469], "1655": [467, 469], "_pyio": [467, 469, 472, 481], "4991": 467, "chambon": 467, "6939": 467, "5032": 467, "4816": 467, "4136": [467, 469], "5381": 467, "1607951": 467, "6896": 467, "nirina": 467, "raseliarison": 467, "3366": 467, "lekma": 467, "5585": 467, "cazabon": 467, "6963": 467, "1664": [467, 469], "6508": 467, "calderon": [467, 474], "7333": 467, "zsolt": [467, 481], "cserna": [467, 481], "7242": 467, "matt": [467, 475, 476, 481], "giuca": 467, "5827": 467, "3426": [467, 481], "laban": [467, 469], "4739": [467, 469], "6816": 467, "3002": 467, "francoi": 467, "natali": [467, 474, 475, 476], "8354": 467, "6693": [467, 473], "8104": 467, "nagl": [467, 481], "disable_nagle_algorithm": 467, "6192": 467, "6267": 467, "7133": 467, "ssl_mode_auto_retri": 467, "8222": 467, "8322": [467, 473], "beda": 467, "kosata": 467, "8484": [467, 473], "8321": [467, 473], "bbhhiillqq": 467, "1523": 467, "8300": 467, "disk0s2": 467, "52g": 467, "49g": 467, "0g": [467, 481], "1068268": 467, "8451": 467, "4285": [467, 469], "7766": 467, "unnot": 467, "7357": 467, "lesher": [467, 481], "1674032": 467, "unihan": 467, "ander": [467, 470, 478, 481], "chrigstr": 467, "1571184": 467, "8024": 467, "2987": [467, 473], "1080": 467, "200c": 467, "417a": 467, "ampersand": 467, "stylesheet": [467, 481], "style1": 467, "muller": 467, "2746": 467, "encode_threshold": 467, "5511": 467, "kuba": 467, "wieczorek": 467, "4710": 467, "7610": [467, 473], "gabriel": [467, 471, 481], "genellina": 467, "4756": 467, "6003": 467, "anydbm": [467, 468], "file_util": [467, 481], "distutils2": 467, "tck": 467, "tcl8": 467, "tkcmd": 467, "ttk_intro": 467, "screenshot": 467, "2983": [467, 469], "franklin": 467, "walzer": [467, 473, 481], "2618": 467, "unittest2": 467, "nose": 467, "6001": 467, "impati": 467, "dyer": 467, "8074": 467, "1034053": 467, "5663": 467, "4444": 467, "5679": 467, "2578": 467, "7031": 467, "assertnotregexpmatch": [467, 471, 472], "8038": 467, "assertitemsequ": 467, "assertdictcontainssubset": [467, 469, 472, 473, 481], "roddi": 467, "6866": 467, "fern": 467, "ndez": 467, "3379": 467, "5728": 467, "20210619163128": 467, "shtml": 467, "getiter": [467, 473, 479, 480, 481], "childless": 467, "20200703234532": 467, "6472": [467, 473], "bt": [467, 481], "8032": 467, "3632": 467, "4293": 467, "7033": [467, 473], "horsen": 467, "7528": 467, "7767": [467, 473], "5753": [467, 473], "py_isalnum": 467, "py_isalpha": 467, "py_isdigit": 467, "py_islow": 467, "py_isspac": 467, "py_isupp": 467, "py_isxdigit": 467, "py_toupp": 467, "5793": 467, "pyeval_callobject": [467, 473, 480, 481], "8276": [467, 473], "pystring_fromformat": 467, "pystring_fromformatv": 467, "7228": 467, "1590864": 467, "_shutdown": [467, 481], "1722344": 467, "t_string_inplac": 467, "3102": [467, 468], "arfrev": [467, 473, 481], "freht": [467, 473, 481], "taifersar": [467, 473, 481], "arahesi": [467, 473, 481], "7609": 467, "2422": [467, 473], "6491": 467, "x87_double_round": 467, "2937": 467, "ldcxxshare": 467, "1222585": 467, "clinton": 467, "roy": [467, 481], "3585": 467, "6094": 467, "ucnhash_capi": [467, 470, 481], "pycobject": [467, 469, 473], "vtabl": 467, "pycobject_asvoidptr": 467, "5630": [467, 469], "cournapeau": 467, "4365": 467, "7347": 467, "_beginthreadex": 467, "3582": 467, "miki": [467, 473], "tebeka": [467, 473], "1220212": 467, "hirokazu": [467, 474, 481], "yamamoto": [467, 474, 478, 481], "5913": 467, "4969": 467, "4865": 467, "28440": [467, 481], "so_setfib": 467, "kyle": [467, 470, 477, 478, 479, 480, 481], "vanderbeek": 467, "8235": 467, "iobench": 467, "ccbench": 467, "throughput": [467, 478, 481], "5464": 467, "ziga": 467, "seilnacht": 467, "1180193": 467, "randse": 467, "6152": [467, 476], "7312": 467, "piotr": 467, "arowski": 467, "8233": 467, "1533": 467, "5920": 467, "6101": 467, "7853": 467, "leander": 467, "anand": [467, 473], "pillai": [467, 473], "7150": 467, "7348": 467, "5080": 467, "exempt": 467, "pythonshowrefcount": 467, "31733": 467, "count_alloc": [467, 477, 480, 481], "pythonshowalloccount": 467, "31692": 467, "gaynor": [467, 470, 476, 481], "21306": 467, "1g": [467, 481], "zachari": [467, 475, 476, 478, 481], "ware": [467, 475, 476, 478, 481], "21462": 467, "21304": 467, "21671": 467, "0224": 467, "tls1": 467, "reid": [467, 473], "21308": 467, "21305": 467, "21307": 467, "stufft": [467, 475], "deili": [467, 473, 475, 479, 480], "pythonhttpsverifi": 467, "_https_verify_certif": 467, "autotool": [467, 476, 477], "pregener": [467, 476, 477, 481], "23404": [467, 476, 477, 481], "philip": [467, 472, 473, 477, 481], "jenvey": [467, 473], "ryan": [467, 474, 475, 477, 478, 481], "lovett": 467, "hugh": 467, "secker": 467, "walker": 467, "cruft": 468, "wealth": 468, "softspac": [468, 481], "retrain": 468, "corollari": 468, "incompar": 468, "0720": 468, "0o720": 468, "loud": 468, "unixi": 468, "3138": 468, "some_sequ": 468, "274": 468, "vindic": 468, "3109": 468, "crutch": 468, "item1": 468, "item2": 468, "3113": 468, "b_c": 468, "3108": 468, "beo": 468, "instabl": 468, "copy_reg": 468, "markupbas": 468, "_markupbas": [468, 470, 481], "dbhash": 468, "htmlentitydef": 468, "basehttpserv": 468, "cgihttpserv": [468, 481], "simplehttpserv": [468, 481], "acquire_lock": [468, 472], "release_lock": [468, 472], "jumpahead": 468, "tmpnam": 468, "tempnam": 468, "tmpfile": 468, "scoop": 468, "secondaryexcept": 468, "primary_except": 468, "__getslice__": 468, "__setslice__": 468, "__delslice__": 468, "3114": 468, "func_x": 468, "__x__": 468, "wit": [468, 481], "func_cod": 468, "func_default": 468, "func_dict": 468, "func_doc": 468, "func_glob": 468, "3111": 468, "tru64": 468, "3123": 468, "pynumber_coerc": 468, "pynumber_coerceex": 468, "pymember_get": 468, "pymember_set": 468, "nb_nonzero": 468, "with_cycle_gc": 468, "contort": 468, "unsort": [469, 481], "8901234": 469, "12j": 469, "600000": 469, "901": 469, "120000j": 469, "underway": 469, "camelot": 469, "5675": [469, 473], "mattia": [469, 473], "ndstr": [469, 473], "4707": 469, "199999999999ap": 469, "smarter": [469, 473, 481], "1580": 469, "dickinso": 469, "namesak": 469, "lv": 469, "ov": 469, "oe": 469, "_0": 469, "query_field": 469, "userqueri": 469, "sale": [469, 473], "4384": 469, "vajda": 469, "4195": 469, "4201": 469, "5228": 469, "testgizmo": 469, "test_gizmo_on_window": 469, "test_gimzo_without_required_librari": 469, "builtout": 469, "test_division_by_zero": 469, "confound": 469, "remap": 469, "c__builtin__": 469, "nset": 469, "np0": 469, "lp1": 469, "nl1l": 469, "nal2l": 469, "nal3l": 469, "natp2": 469, "nrp3": 469, "6137": 469, "sunpro": 469, "4753": 469, "4868": 469, "roger": [469, 480, 481], "serwi": [469, 481], "5150": [469, 473], "lisandro": 469, "dalcrin": 469, "5175": 469, "pynumber_int": 469, "4910": 469, "5914": 469, "7182818284590451": 469, "718281828459045": 469, "salgado": [470, 471, 476, 479, 480, 481], "635": 470, "12782": 470, "632": [470, 472, 481], "624": [470, 471, 481], "ctxmanag": 470, "ctxmanager1": 470, "ctxmanager2": 470, "example1": 470, "example2": 470, "ctxmanager3": 470, "example3": 470, "lysandro": [470, 472, 480, 481], "nikolaou": [470, 472, 480, 481], "40334": [470, 480, 481], "some_other_cod": 470, "eol": [470, 481], "42864": [470, 481], "batuhan": [470, 471, 472, 479, 480, 481], "taskaya": [470, 471, 472, 479, 480, 481], "40176": [470, 481], "43914": [470, 481], "rocket": 470, "event_horizon": 470, "42997": [470, 481], "43017": [470, 481], "43822": [470, 481], "build_dyson_spher": 470, "notenoughscienceerror": 470, "notenoughresourceserror": 470, "43149": [470, 481], "43823": [470, 481], "44305": [470, 481], "43797": [470, 481], "all_black_hol": 470, "revel": 470, "41064": [470, 481], "lel": 470, "namedtoplo": 470, "38530": [470, 481], "schwarzschild_black_hol": 470, "schwarschild_black_hol": 470, "pattern_1": 470, "action_1": 470, "pattern_2": 470, "action_2": 470, "pattern_3": 470, "action_3": 470, "action_wildcard": 470, "scala": 470, "elixir": 470, "imper": 470, "test_vari": 470, "maggi": [470, 479], "moss": 470, "prado": 470, "41428": [470, 481], "yurii": [470, 471, 480, 481], "karaba": [470, 471, 480, 481], "44490": [470, 481], "jin": [470, 471, 472, 477, 478, 479, 480, 481], "41559": [470, 481], "jell": [470, 471, 472, 477, 478, 481], "zijlstra": [470, 471, 472, 477, 478, 481], "43783": 470, "mendoza": [470, 471], "unannot": 470, "strcach": 470, "log_prefix": 470, "mikhail": 470, "golubev": 470, "41923": [470, 481], "43766": [470, 481], "traut": [470, 471, 472, 481], "nikla": [470, 471, 481], "fieka": [470, 481], "29882": [470, 481], "sweeney": [470, 471, 472, 480, 481], "40890": [470, 481], "37999": [470, 481], "shkop": [470, 481], "38302": [470, 481], "shannon": [470, 471, 472, 474, 478, 479, 480, 481], "42990": [470, 481], "joshua": [470, 476, 481], "bronson": [470, 479, 481], "pope": [470, 481], "justin": [470, 474, 481], "wang": [470, 472, 478, 481], "31861": [470, 481], "43682": [470, 481], "42737": [470, 481], "43901": [470, 481], "42725": [470, 481], "43475": [470, 481], "donghe": [470, 471, 472, 479, 480, 481], "45000": [470, 481], "nholm": [470, 471, 479], "41332": [470, 481], "9694": [470, 481], "lorentsen": [470, 478, 481], "zackeri": [470, 471, 479, 480, 481], "spytz": [470, 471, 479, 480, 481], "31956": [470, 481], "clearbreakpoint": 470, "irit": [470, 471, 472, 481], "katriel": [470, 471, 472, 481], "24160": [470, 481], "4356": [470, 481], "hai": [470, 471], "shi": [470, 471], "41842": [470, 481], "42195": [470, 480, 481], "joongi": [470, 481], "kim": [470, 481], "41229": [470, 481], "gringauz": 470, "41543": [470, 481], "kintscher": [470, 481], "petter": [470, 479, 481], "jansson": 470, "36982": [470, 481], "39273": [470, 481], "42269": [470, 481], "43532": [470, 481], "bdist_wheel": [470, 471, 479, 480, 481], "42802": [470, 481], "42133": [470, 481], "normalize_encod": [470, 480, 481], "39337": [470, 481], "enum_nam": 470, "ethan": [470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481], "furman": [470, 472, 474, 475, 476, 477, 478, 481], "40066": [470, 481], "41816": [470, 481], "inada": [470, 471, 472, 476, 477, 478, 479, 480, 481], "naoki": [470, 471, 472, 476, 477, 478, 479, 480, 481], "43712": [470, 481], "5758": 470, "44466": [470, 481], "43439": [470, 481], "38144": [470, 481], "43669": [470, 481], "38820": [470, 481], "43880": [470, 481], "40645": [470, 481], "hilton": [470, 471, 472, 480, 481], "43008": [470, 480, 481], "40468": [470, 480, 481], "33962": [470, 480, 481], "tal": [470, 476, 477, 478, 479, 481], "einat": [470, 476, 477, 478, 479, 481], "37903": [470, 481], "37892": [470, 481], "44010": [470, 481], "pyi": [470, 471, 480, 481], "waygood": [470, 471, 472, 480, 481], "45447": [470, 471, 480, 481], "95191": [470, 471, 481], "from_funct": [470, 471, 476, 481], "43817": [470, 481], "38200": [470, 481], "rtos": [470, 481], "peix": [470, 481], "xin": [470, 481], "41440": [470, 481], "eventfd2": 470, "41001": [470, 481], "41625": [470, 481], "43106": [470, 481], "barney": [470, 472, 481], "gale": [470, 472, 481], "43757": 470, "35498": [470, 481], "yaroslav": [470, 481], "pankovych": [470, 481], "21041": [470, 481], "link_to": [470, 471, 479, 481], "39950": [470, 481], "39906": [470, 481], "28468": [470, 481], "sblondon": 470, "42914": [470, 481], "lewi": [470, 481], "gaul": [470, 481], "43080": [470, 481], "schevchenko": [470, 481], "38731": [470, 481], "avir": [470, 481], "srivastava": [470, 481], "38307": [470, 481], "34204": [470, 481], "tymoteusz": [470, 481], "wo": [470, 481], "ko": [470, 477, 478, 481], "38490": [470, 481], "42413": [470, 481], "mptcp": [470, 481], "rui": 470, "cunha": 470, "43571": [470, 481], "dscp": [470, 481], "ecn": [470, 481], "sauthoff": 470, "44077": [470, 481], "43794": [470, 481], "43788": [470, 481], "43791": [470, 481], "43799": [470, 481], "43920": [470, 481], "43789": [470, 481], "43811": [470, 481], "hynek": [470, 474, 475, 481], "schlawack": [470, 474, 475, 481], "43998": [470, 481], "31870": [470, 481], "42333": [470, 481], "l0x": 470, "40849": [470, 481], "erlend": [470, 471, 472, 481], "aasland": [470, 471, 472, 481], "43762": [470, 481], "23427": [470, 481], "42955": [470, 481], "43356": [470, 481], "mario": [470, 478, 481], "corchero": [470, 478, 481], "42251": [470, 481], "42308": [470, 481], "bussonni": [470, 478, 479, 481], "26389": [470, 481], "bas": 470, "beek": 470, "41810": [470, 481], "42345": [470, 480, 481], "41792": [470, 481], "38908": [470, 481], "sebastian": [470, 471, 481], "rittau": [470, 471], "kit": [470, 481], "yan": [470, 481], "choi": [470, 481], "39385": [470, 481], "goldschmidt": [470, 477, 478, 479, 480, 481], "42967": [470, 477, 478, 479, 480, 481], "_unsafe_url_bytes_to_remov": [470, 477, 478, 479, 480], "88048": [470, 477, 478, 480], "jonathan": [470, 474, 476, 479, 481], "gossag": 470, "35018": [470, 481], "42131": [470, 481], "desmond": [470, 481], "cheong": [470, 481], "14678": [470, 481], "41334": [470, 481], "41006": [470, 481], "41718": 470, "yuri": [470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481], "selivanov": [470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481], "42093": [470, 481], "42927": [470, 481], "micropython": [470, 481], "38980": [470, 481], "_compress": [470, 481], "decompressread": [470, 481], "09x": 470, "20x": [470, 472], "32x": 470, "11x": 470, "18x": 470, "lin": [470, 471, 481], "41486": [470, 481], "42202": [470, 481], "str1": [470, 481], "str2": [470, 481], "crochemor": 470, "41972": [470, 481], "dino": [470, 477, 480, 481], "viehland": [470, 477, 480, 481], "43452": [470, 481], "jeroen": [470, 477, 479, 480, 481], "demey": [470, 477, 479, 480, 481], "43575": [470, 481], "43287": [470, 481], "41922": [470, 481], "41873": [470, 481], "41870": [470, 481], "43785": [470, 481], "0in": [470, 472], "1or": [470, 472], "0if": [470, 472], "1els": [470, 472], "0x1for": [470, 472], "43833": [470, 481], "37319": 470, "26131": [470, 481], "zimport": 470, "42134": [470, 481], "43672": [470, 481], "42135": [470, 481], "set_package_wrapp": [470, 471], "set_loader_wrapp": [470, 471], "module_for_load": [470, 471, 472, 475, 481], "impimport": [470, 471, 472, 481], "impload": [470, 471, 472, 481], "43720": [470, 481], "42137": [470, 481], "frozenload": [470, 471], "builtinload": [470, 471], "42136": [470, 481], "optimizedunicod": [470, 471, 472, 481], "42264": [470, 481], "enable_shared_cach": [470, 471, 472, 481], "24464": [470, 481], "87889": 470, "41139": [470, 481], "sslsslcontext": 470, "protocol_sslv2": 470, "rand_pseudo_byt": [470, 472, 474, 481], "pythonthreaddebug": [470, 471, 481], "44584": [470, 481], "41974": [470, 481], "parserbas": [470, 481], "berker": [470, 475, 476, 477, 478, 479, 481], "peksag": [470, 475, 476, 477, 478, 479, 481], "31844": [470, 481], "_pyunicode_name_capi": [470, 481], "42157": [470, 481], "graminit": 470, "pyparser_simpleparsestringflag": [470, 480], "pyparser_simpleparsestringflagsfilenam": [470, 480], "pyparser_simpleparsefileflag": [470, 480], "pynode_compil": [470, 480], "42299": [470, 481], "pymodule_getwarningsmodul": 470, "42599": 470, "37324": [470, 481], "svetlov": [470, 471, 475, 478, 479, 480, 481], "stanley": [470, 477, 478, 479, 480, 481], "42392": [470, 481], "42639": [470, 481], "42393": [470, 481], "_node": [470, 481], "io_modul": 470, "import_importmodul": 470, "source_bytes_object": 470, "source_buf": 470, "wordcod": [470, 477, 481], "36020": [470, 481], "sergey": [470, 471, 480, 481], "fedoseev": [470, 480, 481], "40744": [470, 481], "40810": [470, 481], "xavier": [470, 475, 477, 478, 481], "petazzoni": [470, 481], "27640": [470, 481], "42856": [470, 481], "43103": [470, 481], "tcltk": [470, 471, 473, 480, 481], "manoli": 470, "stamatogiannaki": 470, "42603": [470, 481], "43466": [470, 481], "petr": [470, 471, 472, 476, 478, 479, 480, 481], "viktorin": [470, 471, 472, 476, 479, 480, 481], "43795": [470, 481], "40792": [470, 481], "30155": [470, 481], "matveev": [470, 472, 479, 481], "41756": [470, 481], "41784": [470, 481], "1635741": [470, 481], "42262": [470, 481], "42423": [470, 481], "41832": [470, 481], "41073": [470, 481], "43277": [470, 481], "36465": [470, 479, 481], "43688": [470, 481], "43753": [470, 481], "43916": [470, 481], "43908": [470, 471, 481], "40943": [470, 481], "new_refcnt": 470, "0x030900a4": [470, 471], "39573": [470, 471, 481], "40839": [470, 481], "pyunicode_fromunicod": [470, 471, 472, 474, 480, 481], "36346": [470, 480, 481], "42260": [470, 481], "30459": [470, 481], "odictobject": [470, 481], "parser_interfac": [470, 481], "picklebufobject": [470, 481], "pyarena": [470, 481], "pyfp": [470, 480, 481], "pytim": [470, 481], "sim": 470, "35134": [470, 471, 479, 481], "py_frozenmain": [470, 481], "26241": 470, "pyunicode_internimmort": [470, 471, 472, 481], "41692": [470, 481], "py_unicode_str": [470, 481], "41123": [470, 471, 481], "py_unicode_strlen": [470, 474], "py_unicode_strcat": [470, 474], "py_unicode_strcpi": [470, 474], "py_unicode_strncpi": [470, 474], "py_unicode_strcmp": [470, 474], "py_unicode_strncmp": [470, 474], "py_unicode_strchr": [470, 474], "py_unicode_strrchr": [470, 474], "pyunicode_getmax": [470, 474, 481], "41103": [470, 481], "pylong_fromunicod": [470, 481], "pyunicode_asunicodecopi": [470, 474, 481], "_py_checkrecursionlimit": [470, 480, 481], "ceval": [470, 481], "recursion_limit": [470, 471, 481], "41834": [470, 481], "py_allow_recurs": [470, 481], "py_end_allow_recurs": [470, 481], "recursion_rit": 470, "41936": [470, 481], "pyos_initinterrupt": [470, 481], "41713": [470, 481], "pyast_valid": [470, 481], "43244": [470, 481], "pyst_getscop": [470, 481], "pysymtable_build": [470, 481], "pysymtable_buildobject": [470, 481], "pysymtable_fre": [470, 481], "py_symtablestr": [470, 481], "py_symtablestringobject": [470, 481], "43868": [470, 481], "winbas": [470, 481], "_mod": [470, 481], "pyast_compileex": [470, 481], "pyast_compileobject": [470, 481], "pyfuture_fromast": [470, 481], "pyfuture_fromastobject": [470, 481], "pyparser_astfromfileobject": [470, 481], "pyparser_astfromfilenam": [470, 481], "pyparser_astfromstringobject": [470, 481], "pyarena_new": [470, 481], "pyarena_fre": [470, 481], "pyarena_malloc": [470, 481], "pyarena_addpyobject": [470, 481], "use_trac": [470, 471], "43760": [470, 471, 481], "98966": 470, "25x": 471, "680": [471, 481], "manhattan_dist": 471, "point_1": 471, "point_2": 471, "magic_arithmet": 471, "add_count": 471, "query_us": 471, "query_count": 471, "ammar": [471, 477, 478, 479, 481], "askar": [471, 477, 478, 479, 481], "43950": [471, 481], "45292": [471, 481], "45607": [471, 481], "zac": [471, 481], "hatfield": [471, 481], "dodd": [471, 481], "otherpython": 471, "tensorflow": 471, "rahtz": 471, "43224": [471, 481], "pradeep": 471, "kumar": [471, 472, 481], "srinivasan": 471, "sile": 471, "panther": 471, "foster": [471, 481], "47087": [471, 481], "mylock": 471, "myint": 471, "balf": [471, 472, 481], "46534": [471, 481], "table_nam": 471, "47088": [471, 481], "bleaney": 471, "91860": [471, 481], "bont": [471, 472], "counsil": 471, "46725": 471, "33346": [471, 481], "12022": [471, 481], "44471": [471, 481], "70766": 471, "26579": [471, 481], "57684": [471, 481], "90153": 471, "grainger": [471, 481], "91181": 471, "24234": [471, 481], "29410": [471, 481], "45711": [471, 481], "_pyerr_stackitem": [471, 481], "bastian": 471, "neuburg": 471, "44934": [471, 481], "46142": [471, 481], "tane": 471, "hukkinen": 471, "40059": [471, 481], "42012": [471, 481], "90908": 471, "90927": 471, "91218": 471, "duprat": 471, "87518": 471, "34975": [471, 481], "46805": [471, 481], "filip": [471, 474, 475, 479, 481], "25625": [471, 481], "44674": [471, 481], "kabir": [471, 481], "kwatra": [471, 481], "91973": 471, "ganssl": [471, 472, 478, 479, 480, 481], "80010": [471, 481], "aflag": 471, "kirpichev": [471, 481], "44258": [471, 481], "some_fract": 471, "44547": [471, 481], "46014": [471, 481], "libb2": [471, 481], "47095": [471, 481], "_sha3": [471, 481], "tiny_sha3": [471, 481], "47098": [471, 481], "89313": 471, "weipeng": [471, 479, 481], "hong": [471, 479, 481], "30533": [471, 481], "hakan": [471, 481], "elik": [471, 481], "29418": [471, 481], "88116": [471, 481], "andrei": [471, 481], "kulakovin": 471, "88024": 471, "kiril": 471, "pinchuk": 471, "88457": 471, "gideon": 471, "45917": [471, 481], "ajith": 471, "ramachandran": 471, "44357": [471, 481], "44339": [471, 481], "46917": [471, 481], "antoni": [471, 481], "44019": [471, 481], "44611": [471, 481], "eisuk": [471, 481], "kawasima": 471, "22276": [471, 481], "33392": 471, "433030": [471, 481], "46245": [471, 481], "klausner": 471, "30512": [471, 481], "29980": 471, "44491": [471, 481], "44688": [471, 481], "aviv": [471, 477, 479, 481], "palivoda": [471, 477, 479, 481], "shahaf": [471, 476, 481], "16379": [471, 481], "24139": [471, 481], "45243": [471, 481], "45613": [471, 481], "45828": [471, 481], "44092": [471, 481], "41930": [471, 481], "34916": 471, "24905": [471, 481], "keho": 471, "90465": 471, "46328": [471, 481], "miro": [471, 481], "hron": [471, 481], "45413": [471, 481], "carey": [471, 481], "metcalf": [471, 481], "70363": 471, "sem_clockwait": [471, 481], "41710": [471, 481], "sz": [471, 481], "ke": [471, 481], "21302": [471, 481], "45429": [471, 481], "info_patchlevel": [471, 481], "91827": [471, 481], "44569": [471, 481], "33809": [471, 481], "90633": [471, 481], "90572": 471, "90638": 471, "samodya": 471, "abeysiriwardan": 471, "89026": 471, "43923": 471, "shantanu": [471, 472, 481], "jain": [471, 472, 481], "91154": 471, "90500": 471, "89263": 471, "adrian": [471, 472, 478, 481], "badarasco": 471, "88970": 471, "91137": 471, "_type_check": 471, "beauregard": [471, 481], "90802": 471, "rosenstein": 471, "85542": 471, "nikita": [471, 472, 481], "sobolev": [471, 472, 481], "90353": 471, "90711": 471, "90729": 471, "45190": [471, 481], "45046": [471, 481], "47074": 471, "turnbul": [471, 481], "28080": [471, 481], "ezeh": 471, "49083": 471, "miguel": [471, 481], "brito": [471, 481], "88261": 471, "28307": [471, 481], "90564": 471, "behnel": [471, 475, 476, 478, 479, 481], "68264": 471, "91165": 471, "272": [471, 481], "46845": [471, 481], "msoxzw": 471, "91487": [471, 481], "37295": [471, 481], "90415": 471, "44987": [471, 481], "pyperform": [471, 481], "aditya": [471, 472, 481], "44590": [471, 481], "45256": [471, 481], "superinstruct": [471, 481], "brunthal": 471, "brandt": [471, 472, 480, 481], "bucher": [471, 472, 480, 481], "45947": [471, 481], "45340": [471, 481], "40116": [471, 481], "40222": [471, 481], "91404": [471, 481], "bloomberg": 471, "async_gen_wrap": [471, 481], "prep_reraise_star": [471, 481], "binary_": [471, 481], "inplace_": [471, 481], "call_function_kw": [471, 477, 481], "call_method": [471, 478, 481], "precal": [471, 472, 481], "dup_top": [471, 481], "dup_top_two": [471, 481], "rot_two": [471, 481], "rot_thre": [471, 481], "rot_four": [471, 479, 481], "rot_n": [471, 481], "jump_if_not_exc_match": [471, 480, 481], "jump_absolut": [471, 481], "pop_jump_backward_if_": 471, "pop_jump_forward_if_": 471, "not_non": 471, "setup_async_with": 471, "jump_if_true_or_pop": [471, 472, 481], "jump_if_false_or_pop": [471, 472, 481], "89874": [471, 472], "copy_dict_without_key": 471, "gen_start": [471, 481], "19072": [471, 481], "89519": [471, 472, 481], "81548": [471, 481], "44977": [471, 481], "47061": [471, 481], "68966": [471, 481], "hugo": [471, 472, 475, 480, 481], "kemenad": [471, 472, 480, 481], "47022": [471, 481], "40360": [471, 480, 481], "sre_compil": [471, 481], "sre_const": [471, 476, 481], "sre_pars": [471, 481], "47152": [471, 481], "safeconfigpars": [471, 472, 473, 481], "45173": [471, 481], "legacyinterpol": [471, 472, 481], "46607": [471, 481], "90817": [471, 472, 481], "91760": [471, 472, 481], "92728": [471, 481], "45837": [471, 481], "jingchen": [471, 481], "90224": 471, "42255": [471, 481], "findtestcas": [471, 472, 481], "makesuit": [471, 472, 481], "5846": [471, 481], "usageexit": [471, 472, 481], "dam": 471, "zio": 471, "67048": [471, 472], "illia": [471, 481], "volochii": [471, 481], "43216": [471, 481], "corowrapp": [471, 481], "45129": [471, 481], "binhex": [471, 480, 481], "a2b_hqx": [471, 480, 481], "b2a_hqx": [471, 480, 481], "rlecode_hqx": [471, 480, 481], "rldecode_hqx": 471, "45085": [471, 481], "bdist_msi": [471, 480, 481], "45124": [471, 481], "45132": [471, 481], "lgettext": [471, 479, 481], "ldgettext": [471, 479], "lngettext": [471, 479], "ldngettext": [471, 479], "set_output_charset": [471, 479], "44235": [471, 481], "formatargspec": [471, 476, 481], "from_builtin": [471, 476, 481], "45320": [471, 481], "46483": [471, 481], "mailmanproxi": [471, 480, 481], "35800": [471, 480, 481], "tkapptyp": [471, 480, 481], "38371": [471, 480, 481], "23882": [471, 481], "__set_format__": [471, 481], "__setformat__": [471, 481], "46852": [471, 481], "experimental_isolated_subinterpret": [471, 481], "pynch": [471, 481], "37330": [471, 481], "93351": [471, 481], "43234": [471, 481], "46659": [471, 481], "sriniva": [471, 478, 481], "reddi": [471, 478, 481], "thatiparthi": [471, 478, 481], "41137": [471, 481], "40465": [471, 480, 481], "47066": [471, 481], "35859": [471, 481], "84461": [471, 481], "90473": [471, 481], "95085": [471, 481], "46656": [471, 481], "45440": [471, 481], "46640": [471, 481], "py_no_nan": [471, 481], "46996": [471, 481], "libnsl": [471, 481], "libsqlite3": 471, "libcrypt": [471, 481], "egeberg": 471, "45847": [471, 481], "45747": [471, 481], "45763": [471, 481], "gilbert": 471, "45433": [471, 481], "holman": [471, 481], "44340": [471, 481], "45522": [471, 481], "45548": [471, 481], "45570": [471, 481], "45571": [471, 481], "43974": [471, 481], "tcltk_cflag": 471, "tcltk_lib": 471, "rhel": [471, 478, 481], "ltk8": 471, "ltkstub8": 471, "ltcl8": 471, "rhel7": 471, "sizeof_void_p": 471, "45569": [471, 481], "42035": [471, 481], "tornetta": [471, 481], "43931": [471, 481], "45459": [471, 481], "46613": [471, 481], "46906": [471, 481], "46343": [471, 481], "89653": 471, "46608": [471, 481], "exception_t": 471, "46841": [471, 481], "92154": [471, 481], "94936": [471, 481], "py_trashcan_safe_begin": [471, 480, 481], "py_trashcan_safe_end": [471, 480, 481], "py_trashcan_begin": [471, 480, 481], "py_trashcan_end": [471, 480, 481], "mytype_dealloc": 471, "0x03080000": [471, 479], "cpy_trashcan_begin": 471, "cpy_trashcan_end": 471, "44263": [471, 481], "new_typ": 471, "_py_set_typ": 471, "_py_set_s": 471, "0x030b0000": [471, 481], "45434": [471, 481], "cellobject": [471, 481], "genobject": [471, 481], "longintrepr": [471, 481], "pyunicode_check_intern": [471, 481], "46007": [471, 481], "93937": [471, 481], "f_blockstack": 471, "f_gen": 471, "f_iblock": 471, "f_stackdepth": 471, "f_state": [471, 481], "f_frame": 471, "f_localsplus": 471, "localsplus": 471, "f_valuestack": 471, "pyframe_fasttolocalswitherror": [471, 481], "pyframe_localstofast": [471, 481], "0x030900b1": 471, "pythoncap_compat": 471, "40429": [471, 481], "recursion_depth": [471, 480, 481], "recursion_remain": 471, "stackcheck_count": 471, "0x030b00a2": 471, "0x030a00a1": 471, "cframe": 471, "c_tracefunc": 471, "c_profilefunc": 471, "pythoncap": 471, "_py_setprogramfullpath": [471, 481], "88279": [471, 481], "ob_shash": [471, 472, 481], "46864": [471, 481], "pyunicode_as_data": [471, 472, 474, 481], "pyunicode_as_unicod": [471, 472, 474, 481], "pyunicode_asunicodeands": [471, 472, 474, 480, 481], "pyunicode_asunicod": [471, 472, 474, 480, 481], "pyunicode_get_data_s": [471, 472, 474, 481], "pyunicode_get_s": [471, 472, 474, 481], "pyunicode_gets": [471, 472, 474], "pyunicode_is_compact": 471, "pyunicode_is_readi": 471, "pyunicode_wstr_length": [471, 480, 481], "_pyunicode_asunicod": [471, 480], "pyframe_blocksetup": 471, "pyframe_blockpop": 471, "py_adjust_erange1": [471, 481], "py_adjust_erange2": [471, 481], "py_overflow": [471, 481], "py_set_erange_if_overflow": [471, 481], "py_set_errno_on_math_error": [471, 481], "45412": [471, 481], "py_unicode_copi": [471, 474, 480, 481], "py_unicode_fil": [471, 474, 480, 481], "pystrhex": [471, 481], "py_force_doubl": [471, 481], "py_is_infin": [471, 481], "45474": [471, 481], "pyheaptype_get_memb": [471, 481], "40170": [471, 480, 481], "have_py_set_53bit_precis": [471, 481], "pyunicode_encod": [471, 474, 481], "pyunicode_encodeascii": [471, 474], "pyunicode_encodelatin1": [471, 474, 481], "pyunicode_encodeutf7": [471, 474, 481], "pyunicode_encodeutf8": [471, 474, 481], "pyunicode_encodeutf16": [471, 474, 481], "pyunicode_encodeutf32": [471, 474, 481], "pyunicode_encodeunicodeescap": [471, 474, 481], "pyunicode_encoderawunicodeescap": [471, 474, 481], "pyunicode_encodecharmap": [471, 474, 481], "pyunicode_translatecharmap": [471, 474, 481], "pyunicode_encodedecim": [471, 474, 481], "pyunicode_transformdecimaltoascii": [471, 474, 481], "44029": [471, 481], "turner": [472, 481], "693": 472, "ergonom": 472, "95299": [472, 481], "labeledtupl": 472, "hashablesequ": 472, "intorstrsequ": 472, "103764": 472, "eden": 472, "alkalin": 472, "ascension": 472, "playlist": 472, "sky": 472, "cristi": 472, "maureira": 472, "frede": 472, "marta": [472, 481], "mez": [472, 481], "102856": [472, 481], "anticip": [472, 477, 481], "_xxsubinterpretersmodul": 472, "104210": 472, "103082": [472, 481], "102500": [472, 481], "meyer": [472, 474, 479, 480, 481], "98254": [472, 481], "99139": [472, 481], "blech": 472, "somethin": 472, "98931": [472, 481], "91058": [472, 481], "franek": 472, "magiera": 472, "103629": [472, 481], "get_color": 472, "goodchild": 472, "badchild": 472, "get_colour": 472, "troxler": [472, 481], "101561": [472, 481], "96670": [472, 481], "98401": [472, 481], "some_it": [472, 481], "100581": 472, "77757": [472, 481], "103590": [472, 481], "breaker": [472, 481], "97922": [472, 481], "60203": 472, "90751": [472, 481], "bradshaw": [472, 481], "furkan": [472, 481], "onder": [472, 481], "101264": 472, "neumaier": 472, "100425": [472, 481], "87995": [472, 481], "96123": 472, "98658": [472, 481], "91166": [472, 481], "2x": [472, 474, 477, 481], "bower": [472, 481], "102853": 472, "104140": 472, "104138": 472, "98024": 472, "94597": [472, 481], "99388": [472, 481], "6x": [472, 481], "pranav": 472, "thulasiram": 472, "bhat": 472, "100344": [472, 481], "102748": [472, 481], "78530": [472, 481], "princ": 472, "roshan": 472, "103636": [472, 481], "94216": [472, 481], "100161": 472, "coomb": [472, 475, 479, 480], "97930": [472, 481], "100598": 472, "carlton": 472, "gibson": 472, "99247": 472, "krennwalln": [472, 481], "79940": [472, 481], "103193": [472, 481], "98363": [472, 481], "100485": [472, 481], "goergen": 472, "94906": [472, 481], "93312": [472, 481], "machalow": 472, "99547": [472, 481], "dower": [472, 476, 477, 478, 479, 480], "102519": [472, 481], "99726": [472, 481], "triad": 472, "101000": [472, 481], "stanislav": 472, "zmiev": 472, "90385": [472, 481], "domenico": 472, "ragusa": 472, "84538": 472, "tian": [472, 481], "gao": [472, 481], "103693": [472, 481], "81620": [472, 481], "100234": [472, 481], "74696": [472, 481], "triplet": [472, 481], "102828": [472, 481], "103179": 472, "77617": [472, 481], "83638": [472, 481], "103015": [472, 481], "103489": [472, 481], "95861": [472, 481], "102778": [472, 481], "103176": [472, 481], "evgeni": [472, 480, 481], "zorin": 472, "58451": 472, "93503": [472, 481], "create_": 472, "94473": [472, 481], "101827": 472, "102433": [472, 481], "hasx": 472, "fourteen": 472, "74690": [472, 481], "badaracco": [472, 481], "103699": [472, 481], "99957": [472, 481], "96734": [472, 481], "test_thread": [472, 481], "210s": 472, "test_timeout": [472, 481], "barriertest": 472, "003s": 472, "test_default_timeout": 472, "518s": 472, "eventtest": 472, "158": 472, "869s": 472, "48330": [472, 481], "chhina": 472, "88597": [472, 481], "wstr_length": 472, "92536": [472, 481], "modzelewski": 472, "90536": [472, 481], "101525": 472, "91524": [472, 481], "103793": [472, 481], "103497": 472, "93429": [472, 481], "102859": [472, 481], "92925": 472, "94163": [472, 481], "99005": [472, 481], "101799": [472, 481], "90997": [472, 481], "101441": 472, "93143": [472, 481], "wenyang": 472, "101632": [472, 481], "97681": [472, 481], "97669": [472, 481], "92248": [472, 481], "90953": 472, "100160": [472, 481], "103857": [472, 481], "william": [472, 475, 481], "72346": [472, 481], "93963": [472, 481], "101588": [472, 481], "84559": 472, "97850": [472, 481], "master_open": [472, 481], "slave_open": [472, 481], "soumendra": [472, 481], "ganguli": [472, 481], "85984": [472, 481], "90016": [472, 481], "101698": 472, "83122": 472, "ofey": [472, 481], "chan": [472, 481], "65961": [472, 481], "ceas": [472, 481], "hoffmann": [472, 481], "103487": 472, "101866": 472, "84540": 472, "90765": 472, "50096": 472, "86421": 472, "106531": 472, "57281": 472, "87999": [472, 481], "96580": 472, "89336": [472, 481], "92584": [472, 481], "pradyun": 472, "gedam": 472, "95083": 472, "94172": [472, 481], "94196": [472, 481], "94199": [472, 481], "set_packag": [472, 475, 481], "set_load": [472, 475, 481], "98040": [472, 481], "nullimport": [472, 474], "get_mag": [472, 475], "get_suffix": 472, "new_modul": 472, "load_sourc": 472, "init_builtin": 472, "load_compil": 472, "load_dynam": [472, 481], "load_packag": [472, 481], "lock_held": 472, "search_error": 472, "py_sourc": 472, "c_extens": 472, "py_resourc": 472, "pkg_directori": 472, "c_builtin": 472, "py_frozen": 472, "py_coderesourc": 472, "imp_hook": 472, "openwrapp": [472, 481], "94169": [472, 481], "94226": [472, 481], "aiosmtpd": [472, 481], "iarygin": [472, 481], "93243": [472, 481], "92548": 472, "cwe": [472, 481], "isident": 472, "teyit": 472, "modernis": 472, "_texttestresult": [472, 481], "89325": [472, 481], "firebird": [472, 481], "102871": [472, 481], "94383": [472, 481], "94379": [472, 481], "suspici": [472, 481], "rstlint": [472, 481], "julien": [472, 478], "palard": [472, 478], "98179": 472, "99482": [472, 481], "_use_broken_old_ctypes_structure_semantics_": [472, 481], "99285": 472, "1e25": 472, "86388": [472, 481], "94352": [472, 481], "98393": [472, 481], "99127": [472, 481], "_is_main_interpret": 472, "112826": 472, "93939": [472, 481], "va_start": [472, 481], "93207": [472, 481], "89536": 472, "99289": [472, 481], "loongarch": [472, 481], "loongarch64": [472, 481], "gnusf": [472, 481], "gnuf32": [472, 481], "zhang": [472, 477, 478, 479, 481], "90656": [472, 481], "python_for_regen": [472, 481], "89886": [472, 481], "pyunstable_": 472, "101101": 472, "103509": [472, 481], "wenzel": 472, "jakob": 472, "93012": [472, 481], "93274": [472, 481], "98586": [472, 481], "frost": 472, "92257": 472, "91052": [472, 481], "91051": [472, 481], "91054": [472, 481], "91248": [472, 481], "101578": [472, 481], "_pyerr_chainexceptions1": [472, 481], "_pyerr_chainexcept": [472, 481], "102755": [472, 481], "_py_immortal_refcnt": 472, "_py_isimmort": [472, 481], "py_build_cor": [472, 481], "sstate_interned_immort": [472, 481], "sstate_interned_immortal_stat": 472, "eddi": [472, 479], "elizondo": [472, 479], "84436": [472, 481], "104110": 472, "105387": [472, 481], "98836": [472, 481], "95781": [472, 481], "georgi": [472, 481], "95504": [472, 481], "95589": [472, 481], "_pyobject_visitmanageddict": [472, 481], "_pyobject_clearmanageddict": [472, 481], "98724": [472, 481], "_py_reftot": 472, "_py_getglobalreftot": 472, "104668": [472, 481], "pylong_": 472, "ericsnowcurr": 472, "699": [472, 481], "ma_version_tag": [472, 481], "ramvikram": 472, "101193": 472, "77782": [472, 481], "95388": [472, 481], "t_doubl": 472, "47146": [472, 481], "braun": [472, 481], "102192": [472, 481], "py_unicode_wid": 472, "92651": [472, 481], "85858": [472, 481], "392": 473, "sneezi": 473, "sleepi": 473, "skycaptain": 473, "manage_cloud": 473, "helm": 473, "parser_l": 473, "missil": 473, "torpedo": 473, "parser_m": 473, "vessel": 473, "console_prior": 473, "694": 473, "compet": 473, "pronounc": 473, "commonplac": 473, "unladen10": 473, "py32": 473, "pyload": [473, 475], "pypycload": [473, 475], "pyshar": 473, "32m": 473, "33md": 473, "soabi": [473, 481], "32mu": 473, "ext_suffix": [473, 475, 481], "salient": 473, "pathway": [473, 481], "0o24": 473, "7094": 473, "shl": 473, "project_nam": 473, "lowercaseddict": 473, "lcd": 473, "placeholderdict": 473, "6081": 473, "marcin": 473, "wojdyr": 473, "1772833": 473, "9666": 473, "9337": 473, "abcdefgh": [473, 475], "9757": 473, "4617": 473, "8413": 473, "10093": 473, "477863": 473, "9213": 473, "2690": 473, "10889": 473, "10518": 473, "aggrav": 473, "9425": 473, "undergon": 473, "4661": 473, "10321": 473, "get_phone_numb": 473, "phonenumb": 473, "phonelist": 473, "user_request": 473, "4805": 473, "980": 473, "baker": 473, "498245": 473, "577479": 473, "10586": 473, "10593": 473, "terrenc": 473, "9567": 473, "3445": 473, "8814": 473, "prob_dist": 473, "satur": 473, "renew": 473, "resequenc": 473, "simsalabim": 473, "get_vot": 473, "ballot": 473, "conduct_elect": 473, "all_polls_clos": 473, "lockbox": 473, "seal_ballot": 473, "elect": 473, "deposit": 473, "8777": 473, "923754": 473, "accept2dyear": [473, 474], "guesswork": 473, "1289118": 473, "5094": 473, "6641": 473, "2706": 473, "1777412": 473, "8013": 473, "10827": 473, "013671875": 473, "013765762467652909": 473, "gaussian": 473, "682689492137086": 473, "31731050786291404": 473, "gamma_funct": 473, "801": 473, "4551": 473, "950730698041": 473, "temperatur": 473, "from_fahrenheit": 473, "from_celsius": 473, "urban": [473, 475, 481], "5867": 473, "rec_len": 473, "loc_start": 473, "loc_len": 473, "change_loc": 473, "record_numb": 473, "byte_stream": 473, "g3805": 473, "storeroom": 473, "chassi": 473, "x7899": 473, "cog": 473, "l6988": 473, "sprocket": 473, "showroom": 473, "5506": 473, "9826": 473, "9840": 473, "susan": [473, 481], "salesl": 473, "talbot": 473, "5975": 473, "abraham": [473, 481], "1537721": 473, "duti": 473, "9110": 473, "8188": 473, "2305843009213693951": 473, "314159": 473, "1000003": 473, "8540": [473, 474], "log1": 473, "rodol": [473, 474, 479], "4972": [473, 476], "8046": 473, "1286": 473, "8806": 473, "7461": 473, "10554": 473, "bastien": [473, 475], "sabl": 473, "9862": 473, "3488": 473, "9962": 473, "1675951": 473, "redact": 473, "902": 473, "general_quest": 473, "3514": 473, "prion": 473, "py_todo": 473, "1399": 473, "semaphore_not": 473, "md2": 473, "dsawithsha": 473, "mdc2": 473, "md4": 473, "ripemd160": 473, "dsa": 473, "dsaencrypt": 473, "0x101739a10": 473, "sehensw": 473, "rdigkeiten": 473, "xc3": 473, "xbcrdigkeiten": 473, "bzip": 473, "in_transit": 473, "shashwat": 473, "8845": 473, "8524": 473, "9794": 473, "2818": 473, "8850": 473, "1589": 473, "5639": 473, "4870": 473, "dysfunct": 473, "9360": 473, "vant": 473, "1926": 473, "9003": 473, "lorenzo": [473, 475], "catucci": [473, 475], "4471": 473, "10980": 473, "10620": 473, "my_proj_dir": 473, "9754": 473, "test_anagram": 473, "volumin": 473, "ups": [473, 481], "9424": 473, "misimpl": 473, "optic": 473, "9025": 473, "8807": 473, "handle_accept": 473, "6706": 473, "schedulenau": 473, "5178": 473, "rodolfo": 473, "eckhardt": 473, "10220": 473, "0x1022bd788": 473, "pydoc3": 473, "ron": 473, "newloc": 473, "nofre": 473, "_randbelow": 473, "binary_modulo": 473, "binary_multipli": [473, 481], "binary_add": [473, 475, 481], "binary_floor_divid": 473, "9147": 473, "ray": [473, 475, 481], "9523": 473, "raymondhetting": 473, "os2": 473, "os2_hom": 473, "python32": 473, "bindir": 473, "binlibdest": 473, "includepi": 473, "libdest": 473, "platbas": 473, "projectbas": 473, "py_version_nodot": 473, "py_version_short": 473, "antonio": 473, "cuni": 473, "ilya": [473, 478, 481], "sandler": 473, "pluggabl": [473, 475, 477], "ambv": 473, "zope9": 473, "plone": 473, "zope9instal": 473, "zope9inst": 473, "beef": 473, "cafe": 473, "5417": 473, "aff": 473, "8fa3": 473, "telenovela": 473, "elisa": 473, "bfd": 473, "f3nde": 473, "mahn": 473, "5468": 473, "9873": 473, "concert": 473, "steffen": 473, "daod": 473, "nurpmeso": 473, "9124": 473, "10199": 473, "7316": 473, "torsten": [473, 474, 481], "landschoff": [473, 474, 481], "850728": 473, "kleckner": 473, "8844": 473, "6690": 473, "9410": 473, "3873": 473, "9915": 473, "7451": 473, "10314": 473, "10x": [473, 474, 475, 478, 481], "15x": [473, 480, 481], "3001": 473, "stringlib": 473, "differenc": [473, 481], "andress": 473, "bennett": 473, "8685": 473, "1569291": 473, "3709": [473, 474], "schaaf": [473, 474], "sped": [473, 476, 479, 480, 481], "10160": 473, "christo": 473, "georgiou": 473, "7113": 473, "mobil": 473, "kannada": 473, "0cf1": 473, "0cf2": 473, "tai": 473, "lue": 473, "19da": 473, "disqualifi": 473, "cheatsheet": 473, "jog": 473, "adjunct": 473, "9528": 473, "7962": 473, "aquatk": 473, "6075": 473, "changeset": [473, 475, 481], "385": 473, "workflow": [473, 481], "10679": 473, "bupjo": 473, "5127": 473, "9203": 473, "wctype": 473, "9210": 473, "9778": 473, "py_va_copi": 473, "va_copi": 473, "2443": 473, "8837": 473, "buildscript": [473, 481], "8990": 473, "setfilesystemencod": 473, "6shhbbb": 473, "gif87a": 473, "10783": 473, "10711": 473, "10272": 473, "398": 474, "segreg": 474, "13411": 474, "10181": 474, "u0010ffff": 474, "udbff": 474, "udfff": 474, "13054": 474, "becker": 474, "3561": 474, "gather_t": 474, "acc": [474, 481], "renaud": [474, 481], "blanch": [474, 481], "zbigniew": [474, 481], "drzejewski": [474, 481], "szmek": [474, 481], "_extra_attribut": 474, "0x7f46b9fe31e0": 474, "amend": [474, 481], "2377": 474, "13959": 474, "14605": 474, "14646": 474, "growth": [474, 481], "delin": 474, "12753": 474, "13201": 474, "petri": [474, 481], "lehtinen": 474, "12170": 474, "12380": 474, "10516": 474, "11388": 474, "13748": 474, "gruszczi": [474, 475, 479, 481], "ski": [474, 475, 479, 481], "13521": 474, "clumsi": 474, "9260": 474, "4966": 474, "3144": 474, "nadeem": [474, 475], "vawda": [474, 475], "yvind": 474, "karlsen": [474, 481], "6715": 474, "darren": 474, "11610": 474, "10868": 474, "1172711": 474, "ywjj": 474, "catalin": [474, 481], "iacob": [474, 481], "13641": 474, "13637": 474, "5863": 474, "pbzip2": 474, "1625": 474, "13216": 474, "65001": [474, 481], "cp_utf8": [474, 481], "chcp": [474, 481], "cjk": [474, 481], "12016": 474, "u52ff": 474, "u65bd": 474, "u65bc": 474, "u4eba": 474, "u3002": 474, "npj": 474, "l6hk": 474, "hk": 474, "12100": 474, "11089": 474, "11297": 474, "11085": 474, "13121": 474, "13585": 474, "10924": 474, "ncursesw": [474, 481], "waddwstr": 474, "igo": 474, "serna": 474, "6755": 474, "15006": 474, "7652": 474, "100x": 474, "bytereef": 474, "mpdecim": [474, 481], "quickstart": 474, "02s": 474, "345s": 474, "120x": 474, "telco": 474, "19s": 474, "68s": 474, "psycopg": 474, "57s": 474, "29s": 474, "12x": 474, "watchexp": [474, 481], "465484": 474, "72000": 474, "89ric": 474, "pal": 474, "salli": 474, "bonzo": 474, "bonz": 474, "ought": 474, "8594": 474, "12139": 474, "11072": 474, "13227": 474, "15061": 474, "13295": 474, "kuhn": 474, "13464": 474, "htmlparseerror": 474, "15114": [474, 475, 476, 481], "14538": 474, "13993": 474, "13960": 474, "13358": 474, "1745761": 474, "755670": 474, "13357": 474, "12629": 474, "1200313": 474, "670664": 474, "13273": 474, "12888": 474, "7311": 474, "11113": 474, "15156": 474, "sijin": 474, "joseph": [474, 477, 481], "8808": 474, "13062": 474, "15153": 474, "townshend": 474, "12760": 474, "11888": 474, "12021": 474, "12328": 474, "4892": 474, "6064": 474, "12708": 474, "9795": 474, "lagerwal": 474, "10882": 474, "4761": 474, "10755": 474, "14626": 474, "supports_follows_symlink": 474, "10784": 474, "8828": 474, "14127": 474, "13609": 474, "12720": 474, "9344": 474, "dlfcn": [474, 477, 481], "13226": 474, "14210": 474, "14166": 474, "3665": 474, "13449": 474, "8684": 474, "delayfunct": 474, "13245": 474, "6397": 474, "12442": 474, "sandro": 474, "tosi": 474, "12191": 474, "15238": 474, "12715": 474, "niehof": 474, "9993": 474, "4489": 474, "8407": 474, "1870": 474, "elho": 474, "trevino": 474, "juhana": 474, "jauhiainen": 474, "orr": [474, 475, 479, 480, 481], "boswel": 474, "8739": 474, "paulo": [474, 481], "scardin": 474, "11281": 474, "11289": 474, "kasun": 474, "herath": 474, "8809": 474, "watson": 474, "6560": 474, "heiko": 474, "wundram": 474, "lwn": 474, "253425": 474, "socketcan": [474, 481], "10141": 474, "fuch": [474, 479, 481], "tiago": 474, "alv": 474, "reliable_datagram_socket": 474, "rds": [474, 481], "goderbau": 474, "13777": 474, "10866": 474, "warkentin": 474, "11109": 474, "11688": 474, "12049": 474, "11183": 474, "simpkin": 474, "12803": 474, "13626": 474, "13627": 474, "scram": 474, "jacek": [474, 477, 481], "konieczni": 474, "12551": 474, "13634": 474, "colin": [474, 481], "14204": 474, "14837": 474, "11811": 474, "13635": 474, "14807": 474, "3163": 474, "8513": 474, "5870": 474, "11223": 474, "5689": 474, "9957": 474, "13857": 474, "10968": 474, "clock_": 474, "10278": 474, "14386": 474, "14588": 474, "winston": 474, "ewert": 474, "10775": 474, "1673007": 474, "xdg": [474, 481], "gvfs": [474, 481], "calmett": 474, "13620": 474, "14493": 474, "12646": 474, "12306": 474, "14624": 474, "14738": 474, "15026": 474, "osf": 474, "9856": 474, "11377": 474, "13374": 474, "13988": 474, "py_unicode_match": [474, 480, 481], "pyunicode_encodembc": [474, 481], "12326": 474, "13847": 474, "14180": 474, "1079": 474, "1690608": 474, "11291": 474, "assertsameel": 474, "_clamp": 474, "sslfakefil": 474, "13550": 474, "smalltabl": 474, "pymemoryviewobject": [474, 476], "memoryobject": [474, 476], "xxxmodul": 474, "14040": 474, "10998": 474, "11591": 474, "rdmurray": 475, "bitdanc": 475, "16499": 475, "16475": 475, "3156": 475, "450": 475, "454": 475, "8713": 475, "18891": 475, "18214": 475, "unvers": 475, "pip3": 475, "hex_decod": 475, "bz2_encod": 475, "68656c6c6f": 475, "7475": 475, "17827": 475, "17828": 475, "19619": 475, "stone": 475, "everyon": 475, "berman": 475, "18111": 475, "18416": 475, "kang": [475, 481], "hao": 475, "12892": 475, "bierenfeld": 475, "1097797": 475, "ukrainian": [475, 478], "19668": 475, "15958": 475, "16772": 475, "17934": 475, "claudiu": [475, 476, 481], "popa": [475, 476, 481], "18690": 475, "19078": 475, "16148": 475, "declin": 475, "eli": [475, 477, 479, 481], "benderski": 475, "aprano": [475, 477, 479], "16832": 475, "bruno": [475, 476, 481], "dupui": 475, "16049": 475, "17818": 475, "storchacha": 475, "16486": 475, "8311": 475, "maystr": 475, "11175": 475, "12866": 475, "19641": 475, "16685": 475, "17839": 475, "a85": 475, "17618": 475, "16613": 475, "fcc": 475, "ntsc": 475, "lander": [475, 478], "14323": 475, "15806": 475, "piraeus": 475, "19266": 475, "inflex": [475, 476], "15805": 475, "19282": 475, "kluyver": [475, 476, 477, 481], "11816": 475, "17916": 475, "19722": 475, "16522": 475, "11390": 475, "3158": 475, "18600": 475, "email6": 475, "levitt": 475, "18149": 475, "15442": 475, "horev": 475, "kati": [475, 481], "10042": 475, "thorn": 475, "12428": 475, "16351": 475, "18582": 475, "18532": 475, "jona": [475, 478, 481], "borgstr": 475, "18240": 475, "17276": 475, "247": 475, "18775": 475, "2927": 475, "13633": 475, "karl": [475, 480, 481], "cow": 475, "12921": 475, "malt": 475, "swart": 475, "17764": 475, "15627": 475, "18072": 475, "18193": 475, "18192": 475, "18194": 475, "18058": 475, "19152": 475, "18626": 475, "unravel": 475, "aaron": [475, 481], "ile": 475, "13266": 475, "18929": 475, "19030": 475, "broader": 475, "17481": 475, "17159": 475, "routeabl": 475, "17400": 475, "9556": 475, "ce46195b56a9": 475, "16110": 475, "15452": 475, "bump": [475, 481], "19219": 475, "valeri": 475, "4885": 475, "18999": 475, "19946": 475, "16694": 475, "nelson": 475, "yogesh": 475, "chaudhari": 475, "17914": 475, "11939": 475, "9035": 475, "uapi": 475, "18673": 475, "16596": 475, "osborn": 475, "18764": 475, "14455": 475, "4473": 475, "19132": 475, "17150": 475, "19674": 475, "20710": 475, "barnett": [475, 481], "16203": 475, "lope": 475, "tavar": 475, "13592": 475, "17087": 475, "16595": 475, "19324": 475, "19343": 475, "16488": 475, "18794": 475, "13896": 475, "atsuo": 475, "ishimoto": 475, "1492704": 475, "smtpserver": [475, 476, 477, 481], "smtpchannel": [475, 476, 477, 481], "async_chat": [475, 481], "11959": 475, "2118": 475, "15359": 475, "7171": 475, "poq": 475, "13773": 475, "16692": 475, "19689": 475, "18138": 475, "18143": 475, "18147": 475, "christien": 475, "8813": 475, "19292": 475, "17134": 475, "8109": 475, "calissu": 475, "18379": 475, "_stat": [475, 481], "11016": 475, "hiem": 475, "17804": 475, "zack": 475, "weinberg": 475, "16624": 475, "getstatus": 475, "10197": 475, "18901": 475, "18878": 475, "19261": 475, "13390": 475, "5845": 475, "13477": 475, "18585": 475, "18725": 475, "18882": 475, "1565525": 475, "mathia": 475, "panzenb": 475, "ck": 475, "16423": 475, "18978": 475, "kachayev": [475, 476, 481], "16464": 475, "wozniak": 475, "17485": 475, "brecht": [475, 476, 477, 481], "17272": 475, "15701": 475, "16997": 475, "jyrki": 475, "pulliainen": 475, "15132": 475, "zach": [475, 481], "16935": 475, "melin": 475, "ramnani": 475, "16709": 475, "wardil": 475, "mcclure": 475, "11798": 475, "18937": 475, "17457": 475, "17015": 475, "toshio": 475, "kuratomi": 475, "17467": 475, "15417": 475, "19552": 475, "17487": 475, "17616": 475, "5202": 475, "14631": 475, "15528": 475, "17643": 475, "17741": 475, "ariel": 475, "poliak": 475, "14377": 475, "19274": 475, "mallard": 475, "17201": 475, "14621": 475, "dsl": [475, 481], "17162": 475, "montagn": 475, "16129": 475, "1772673": 475, "ysj": [475, 481], "7330": 475, "dhiru": 475, "kholia": 475, "18596": 475, "16632": 475, "18338": 475, "18920": 475, "18922": 475, "18569": 475, "gcov": 475, "lcov": 475, "clav": 475, "milauer": 475, "16421": 475, "17853": 475, "pyfailmalloc": 475, "18408": 475, "18520": 475, "18807": [475, 481], "18818": 475, "heaney": [475, 476], "vajraski": [475, 476, 481], "kok": [475, 476, 481], "19201": 475, "19222": [475, 476], "19223": 475, "14625": 475, "linear_prob": 475, "18771": 475, "19218": 475, "19209": 475, "19205": 475, "9548": 475, "16034": 475, "16674": 475, "15596": 475, "15758": 475, "bryant": 475, "18020": 475, "18756": 475, "endtim": [475, 481], "readplistfrombyt": [475, 478, 481], "writeplisttobyt": 475, "18823": 475, "19375": 475, "16135": 475, "e52df05b496a": 475, "14470": 475, "16136": 475, "shlib_suffix": 475, "16754": 475, "tick_count": 475, "19199": 475, "tara": 475, "lyapun": 475, "15641": 475, "type_int64": [475, 481], "riti": 475, "15480": 475, "isbjunk": 475, "isbpopular": 475, "sm": 475, "13248": [475, 477, 481], "_gestalt": 475, "_mac_ver_lookup": 475, "_mac_ver_gstalt": 475, "_bcd2str": 475, "18393": 475, "17323": 475, "17115": 475, "module_to_load": 475, "19413": 475, "18065": 475, "is_frozen": 475, "felt": [475, 479, 481], "interstiti": 475, "17434": 475, "b32": 475, "18011": 475, "9177": 475, "14794": 475, "16290": 475, "16967": 475, "17094": 475, "20625": 475, "19555": 475, "15204": 475, "16333": 475, "20784": 475, "16742": 475, "f_tstate": 475, "14432": 475, "elvi": [476, 477, 478, 479, 480, 481], "pranskevichus": [476, 477, 478, 479, 480, 481], "478": 476, "441": [476, 481], "arnon": [476, 481], "yaari": [476, 481], "9951": [476, 481], "23632": [476, 481], "benno": [476, 481], "lesli": [476, 481], "24450": [476, 481], "19235": [476, 481], "lc_type": [476, 481], "19977": [476, 481], "streamlin": [476, 481], "22638": [476, 481], "22796": [476, 481], "rudimentari": 476, "http_get": 476, "nathaniel": [476, 478, 481], "landau": 476, "girdhar": [476, 477, 481], "detract": 476, "500000": 476, "evid": 476, "lehtosalo": 476, "intermitt": [476, 481], "conceal": 476, "unguard": 476, "pernici": 476, "angelico": [476, 477, 481], "99998": 476, "00003": 476, "00001": 476, "barker": [476, 481], "unoptim": 476, "19676": [476, 481], "22286": [476, 481], "23681": [476, 481], "22682": [476, 481], "22681": [476, 481], "24064": [476, 481], "17636": [476, 481], "23491": [476, 481], "paugh": [476, 481], "j3": [476, 478, 481], "eriksson": [476, 481], "14910": [476, 481], "proactor": [476, 481], "22560": 476, "21326": [476, 481], "yann": [476, 477, 481], "sionneau": [476, 477], "korenberg": [476, 477], "jiryu": [476, 477, 481], "davi": [476, 477, 481], "nikolaus": [476, 481], "rath": [476, 481], "15955": [476, 481], "20289": [476, 481], "24270": [476, 481], "17442": [476, 481], "16991": [476, 481], "19505": [476, 481], "23704": [476, 481], "abscissa": 476, "jevnik": [476, 479, 481], "22189": [476, 481], "devin": [476, 481], "jeanpierr": [476, 481], "23086": [476, 481], "24018": [476, 481], "24184": [476, 481], "16104": 476, "19628": [476, 481], "21338": [476, 481], "11271": [476, 481], "21527": [476, 481], "18159": 476, "22389": [476, 481], "23171": [476, 481], "4254": [476, 481], "18039": [476, 481], "2052": [476, 481], "17445": [476, 481], "build_ext": [476, 481], "5309": [476, 481], "bdist": 476, "16314": [476, 481], "glenn": 476, "15916": [476, 481], "milan": [476, 478, 481], "oberkirch": [476, 478, 481], "20098": [476, 481], "abhilash": [476, 481], "raj": [476, 481], "21083": 476, "24211": [476, 481], "claud": [476, 481], "paroz": [476, 481], "16324": [476, 481], "21706": 476, "wei": [476, 481], "wu": [476, 481], "23566": [476, 481], "14373": [476, 481], "13968": [476, 481], "55555": 476, "6666": 476, "13742": [476, 481], "demian": [476, 477, 481], "21793": [476, 481], "panter": [476, 477, 481], "3566": 476, "maciej": [476, 481], "szulik": 476, "21800": [476, 481], "vignali": 476, "20295": [476, 481], "fabric": [476, 481], "anech": [476, 481], "20197": [476, 481], "17621": [476, 481], "21156": [476, 481], "20383": [476, 481], "20726": [476, 481], "20334": [476, 481], "24190": [476, 481], "17373": [476, 481], "20691": [476, 481], "24017": [476, 481], "24400": [476, 481], "16808": [476, 481], "20578": 476, "16531": [476, 481], "leon": [476, 481], "20480": [476, 481], "21650": [476, 481], "19361": [476, 481], "17911": [476, 481], "dric": [476, 479, 481], "krier": [476, 479, 481], "13918": [476, 481], "20537": [476, 481], "22788": [476, 481], "23185": [476, 481], "22486": [476, 480, 481], "21565": 476, "rosenberg": [476, 480, 481], "22955": [476, 481], "21176": [476, 481], "22524": [476, 481], "21719": [476, 481], "22181": [476, 481], "22054": [476, 481], "23668": [476, 481], "rafik": [476, 481], "draoui": [476, 481], "10395": [476, 481], "19775": [476, 481], "21539": [476, 481], "19776": [476, 481], "mayank": [476, 481], "tripathi": [476, 481], "19777": [476, 481], "spam42": 476, "welborn": 476, "20218": [476, 481], "23611": [476, 481], "21804": [476, 481], "aac": [476, 481], "sre_match": 476, "9179": [476, 481], "22437": [476, 481], "1519638": [476, 481], "22578": [476, 481], "cauet": [476, 481], "22940": [476, 481], "18931": [476, 481], "19840": 476, "5411": [476, 481], "22018": [476, 481], "21076": [476, 481], "decode_data": [476, 477, 481], "process_messag": [476, 477], "19662": 476, "21795": [476, 481], "21725": [476, 481], "14758": 476, "15014": [476, 481], "gavin": 476, "chappel": 476, "16914": [476, 481], "22027": [476, 481], "18615": [476, 481], "22043": [476, 481], "17552": [476, 481], "23853": [476, 481], "21455": [476, 481], "21965": [476, 481], "suboptim": 476, "20188": [476, 481], "20421": [476, 481], "20951": [476, 481], "akira": [476, 481], "19940": [476, 481], "23186": [476, 481], "23239": [476, 481], "10203": [476, 481], "sinclair": 476, "jessica": [476, 481], "mckellar": 476, "13583": [476, 481], "23342": [476, 481], "set_coroutine_wrapp": [476, 478, 479, 481], "get_coroutine_wrapp": [476, 478, 479, 481], "22696": [476, 481], "23437": [476, 481], "21717": [476, 481], "vogt": [476, 481], "23193": [476, 481], "21549": [476, 481], "gindi": [476, 481], "18983": [476, 481], "2527": [476, 481], "_fix": [476, 481], "20035": [476, 481], "kazakov": [476, 481], "22619": [476, 481], "16662": [476, 481], "19746": [476, 481], "22936": [476, 481], "kushal": [476, 477, 481], "das": [476, 477, 481], "21238": [476, 481], "21262": [476, 481], "johann": [476, 481], "baiter": [476, 481], "20968": [476, 481], "kan": [476, 481], "vdahl": [476, 481], "23581": [476, 481], "23568": [476, 481], "17660": 476, "matej": [476, 481], "cepl": [476, 480, 481], "19494": [476, 481], "akshit": 476, "khurana": [476, 478, 481], "samwys": 476, "13866": [476, 481], "22366": [476, 481], "22118": [476, 481], "torr": [476, 481], "navarret": [476, 481], "silentghost": [476, 477, 481], "5800": [476, 481], "20627": [476, 481], "22960": [476, 481], "2175": [476, 481], "10590": [476, 481], "23252": [476, 481], "23001": [476, 481], "findfirstfil": 476, "findnextfil": 476, "23605": [476, 481], "21233": [476, 481], "albert": [476, 478, 481], "markus": [476, 481], "21486": [476, 481], "21487": [476, 481], "20826": [476, 481], "23266": [476, 481], "23133": [476, 481], "15381": [476, 481], "22003": [476, 481], "20416": [476, 481], "23344": [476, 481], "15027": [476, 481], "19380": [476, 481], "23206": [476, 481], "22540": [476, 481], "22847": [476, 481], "23488": [476, 481], "23910": [476, 481], "22464": 476, "23573": [476, 481], "_py_char2wchar": [476, 481], "_py_wchar2char": [476, 481], "18395": [476, 481], "18711": [476, 481], "24268": [476, 481], "amd": 476, "gnu32": 476, "win_amd64": [476, 481], "win_ia64": 476, "win_arm": 476, "_d": 476, "legalchar": 476, "23671": [476, 481], "linux_distribut": [476, 481], "1322": [476, 481], "24248": [476, 481], "20438": 476, "22407": [476, 481], "23622": [476, 481], "chaput": [476, 481], "6623": [476, 481], "23464": [476, 481], "21205": [476, 481], "htmlparsererror": [476, 481], "21047": [476, 481], "16518": [476, 481], "22834": [476, 481], "23014": 476, "22818": [476, 481], "2211": [476, 481], "nnnn": [476, 481], "pot": [476, 481], "24284": [476, 481], "15582": [476, 481], "7830": [476, 481], "22453": [476, 481], "20204": [476, 481], "python36": 477, "gonzalez": [477, 478], "ivan": [477, 478, 479, 481], "levkivskyi": [477, 478, 479, 481], "lisa": [477, 479, 481], "1_000_000_000_000_000": 477, "1000000000000000": 477, "0x_ff_ff_ff_ff": 477, "ffff_ffff": 477, "ticker": 477, "pluginbas": 477, "plugin1": 477, "plugin2": 477, "teichmann": [477, 481], "intfield": 477, "int_field": 477, "some_fil": 477, "dusti": [477, 481], "koo": 477, "zevenhoven": 477, "27350": [477, 481], "0x7fbcd41666f8": 477, "forbiddenbyt": [477, 481], "0x7fbcd41666fc": 477, "ouch": 477, "1233329": 477, "test_byt": 477, "648": 477, "0x00007fbcdbd32700": 477, "test_hex": 477, "26516": [477, 481], "26564": [477, 481], "21590": [477, 481], "nikhil": 477, "benesch": 477, "barnert": [477, 481], "25958": [477, 481], "emanuel": [477, 481], "26823": [477, 481], "15767": 477, "23722": [477, 479, 481], "26492": [477, 481], "26146": [477, 481], "28613": [477, 481], "27041": [477, 481], "27040": [477, 481], "28370": [477, 481], "25593": [477, 481], "26221": 477, "27392": [477, 481], "27456": [477, 478, 481], "28003": [477, 481], "26081": [477, 481], "28544": [477, 481], "25357": [477, 481], "628": [477, 481], "23229": [477, 481], "27598": [477, 481], "25987": 477, "28720": [477, 481], "17941": [477, 481], "25628": [477, 481], "26482": [477, 481], "27664": [477, 481], "25609": [477, 481], "24773": [477, 481], "ashley": 477, "anderson": 477, "12006": 477, "alessandro": 477, "cucci": 477, "19475": [477, 481], "27661": [477, 481], "25928": [477, 481], "27819": [477, 481], "24277": [477, 481], "27331": [477, 481], "20476": 477, "27959": [477, 481], "23591": [477, 481], "23848": [477, 481], "hackman": [477, 481], "25788": [477, 481], "26470": [477, 481], "26798": [477, 481], "16113": [477, 481], "bertoni": 477, "joan": 477, "daemen": 477, "micha": [477, 481], "peeter": 477, "gill": 477, "assch": 477, "ronni": 477, "keer": 477, "27928": [477, 481], "rolf": [477, 481], "krahl": 477, "12319": [477, 481], "tkfont": 477, "swiegart": 477, "24225": [477, 481], "autocomplet": [477, 478, 481], "louie": [477, 478, 481], "15786": [477, 478, 481], "cheryl": [477, 478, 479, 481], "sabella": [477, 478, 479, 481], "1612262": [477, 478, 481], "wohlgang": [477, 478, 481], "27099": [477, 478, 481], "13802": [477, 478, 481], "31860": [477, 478, 481], "maxlin": [477, 478, 481], "33642": [477, 478, 481], "33768": [477, 478, 481], "33679": [477, 478, 481], "dpi": [477, 478, 481], "sharper": [477, 478, 481], "33656": [477, 478, 481], "1529353": [477, 478, 479, 481], "19611": [477, 481], "churn": 477, "richer": 477, "27172": [477, 481], "17909": [477, 481], "marian": [477, 481], "horban": 477, "24884": 477, "davin": [477, 479, 481], "pott": [477, 479, 481], "6766": [477, 481], "25994": [477, 481], "27186": [477, 481], "24164": [477, 481], "25382": [477, 481], "8637": [477, 481], "24879": [477, 481], "18844": [477, 481], "ython": 477, "433028": [477, 481], "24454": [477, 481], "xiang": [477, 478, 479, 481], "27177": [477, 481], "tyler": [477, 481], "crompton": [477, 481], "26870": [477, 481], "25011": [477, 481], "25209": [477, 481], "1521950": 477, "wolfgang": [477, 481], "langner": 477, "26587": [477, 481], "lordthorsen": [477, 481], "16864": [477, 481], "stoke": [477, 481], "26536": [477, 481], "26907": 477, "27744": [477, 481], "crypto": [477, 481], "omar": [477, 478, 481], "sandov": [477, 478, 481], "26273": [477, 478, 481], "26404": [477, 481], "26721": [477, 481], "27850": [477, 481], "27766": [477, 481], "28043": [477, 481], "19500": [477, 481], "warhawk": 477, "28025": [477, 481], "28085": 477, "78851": [477, 478], "27181": [477, 479, 481], "11734": [477, 481], "26741": [477, 481], "6135": [477, 481], "27781": [477, 481], "27932": [477, 481], "phane": [477, 478, 481], "wirtel": [477, 478, 481], "25485": [477, 481], "6422": [477, 481], "23552": [477, 481], "trace_add": [477, 481], "trace_remov": [477, 481], "trace_info": [477, 481], "trace_vari": [477, 481], "trace_vdelet": [477, 481], "trace_vinfo": [477, 481], "22115": [477, 481], "26588": [477, 481], "280": 477, "189": 477, "amit": [477, 481], "saha": [477, 481], "26323": [477, 481], "21271": [477, 481], "nikolay": [477, 481], "bogoychev": [477, 481], "16099": [477, 481], "balcerzak": 477, "22829": 477, "26568": 477, "26567": [477, 481], "rouault": [477, 481], "23026": [477, 481], "27982": [477, 481], "26885": [477, 481], "26039": [477, 481], "26243": [477, 481], "16764": [477, 481], "demur": [477, 481], "rume": [477, 481], "26647": [477, 481], "28050": 477, "24870": 477, "25227": [477, 481], "25267": [477, 481], "25301": [477, 481], "25349": [477, 481], "25399": [477, 481], "25401": [477, 481], "snider": [477, 481], "26574": [477, 481], "26249": [477, 481], "27056": [477, 481], "27574": [477, 481], "25596": [477, 481], "26032": [477, 481], "25638": [477, 481], "25873": [477, 481], "25869": [477, 481], "25971": [477, 481], "py_long_long": 477, "17884": [477, 481], "ndk": [477, 481], "lollipop": 477, "26865": 477, "alecsandru": [477, 481], "patrascu": [477, 481], "26359": [477, 481], "5319": [477, 481], "26282": [477, 481], "0b4": [477, 481], "223967b49e49": 477, "27243": [477, 481], "27364": [477, 481], "25791": [477, 481], "mariatta": [477, 481], "25002": 477, "21708": [477, 481], "extra_path": [477, 481], "27919": [477, 481], "26129": [477, 481], "26754": [477, 481], "22493": [477, 481], "28022": [477, 481], "25154": [477, 481], "61441": [477, 478], "ffi": [477, 481], "fullmodnam": 477, "find_lines_from_cod": 477, "find_lin": 477, "find_str": 477, "find_executable_lin": 477, "tk_menubar": [477, 481], "tk_bindfortravers": [477, 481], "cdrom": [477, 481], "cdio": [477, 481], "stropt": [477, 481], "chronic": 477, "h2pi": [477, 481], "show_track_count": [477, 481], "23034": [477, 481], "balogh": [477, 481], "2091": [477, 481], "25768": [477, 481], "20059": [477, 481], "taddei": [477, 481], "odziej": [477, 481], "23883": [477, 481], "18018": [477, 481], "23430": [477, 481], "26685": [477, 481], "18726": [477, 481], "holden": [477, 481], "27842": [477, 481], "25287": [477, 481], "lita": [477, 481], "cho": [477, 481], "21815": [477, 481], "jakub": [477, 481], "stasiak": [477, 481], "26335": [477, 481], "ramchandra": [477, 481], "17211": 477, "25953": [477, 481], "plugin": 477, "25483": 477, "27078": [477, 481], "27140": [477, 481], "build_map_unpack_with_cal": [477, 481], "build_tuple_unpack_with_cal": [477, 481], "call_function_var": 477, "call_function_var_kw": 477, "make_closur": [477, 481], "27095": [477, 481], "27213": [477, 481], "28257": [477, 481], "store_annot": [477, 478, 481], "27985": [477, 481], "pyexc_recursionerrorinst": [477, 478, 481], "22898": [477, 478, 481], "30697": [477, 478, 481], "31900": [477, 478, 481], "33899": [477, 478, 479, 481], "37228": [477, 478, 479, 480, 481], "trust_server_pasv_ipv4_address": [477, 478, 479, 480, 481], "87451": [477, 478, 479, 480], "advent": 478, "uncov": [478, 481], "glare": 478, "advers": 478, "from_str": 478, "validate_b": 478, "bray": [478, 481], "masayuki": [478, 481], "coars": 478, "ja": 478, "12844": [478, 481], "18896": [478, 481], "xiao": [478, 481], "28927": [478, 481], "32677": [478, 481], "29546": [478, 481], "30024": [478, 481], "28974": [478, 481], "30579": [478, 481], "33053": [478, 481], "31415": [478, 481], "32248": [478, 481], "14191": [478, 481], "32314": [478, 479, 481], "32436": [478, 481], "32311": [478, 481], "23749": [478, 481], "31819": [478, 481], "32250": [478, 481], "32251": [478, 481], "32269": [478, 481], "32391": [478, 481], "32410": [478, 481], "32415": [478, 481], "32418": [478, 481], "32662": [478, 481], "32741": [478, 481], "quentin": [478, 481], "dawan": 478, "31245": [478, 481], "create_accepted_socket": 478, "aspinal": 478, "29970": [478, 481], "marat": [478, 481], "sharafutdinov": [478, 481], "31943": [478, 481], "32193": [478, 481], "32356": [478, 481], "32066": [478, 481], "30508": [478, 481], "33792": [478, 481], "30103": [478, 481], "oz": 478, "tiram": 478, "30095": 478, "32320": [478, 481], "31650": [478, 481], "21423": [478, 481], "moreau": 478, "31540": [478, 481], "bakker": [478, 481], "10049": [478, 481], "29679": 478, "30241": [478, 481], "mohr": [478, 481], "kulakov": [478, 481], "29302": [478, 481], "sanyam": [478, 481], "21862": [478, 481], "31664": [478, 481], "31702": [478, 481], "15873": [478, 481], "5288": [478, 481], "32630": [478, 481], "11822": [478, 481], "11913": [478, 481], "31801": [478, 481], "33217": [478, 481], "32227": [478, 481], "zekun": 478, "31558": [478, 481], "32433": [478, 481], "soffer": [478, 481], "31945": [478, 481], "pierr": [478, 479, 481], "quentel": [478, 481], "29654": [478, 481], "28707": 478, "31639": [478, 481], "5680": [478, 479, 481], "37627": [478, 479, 481], "saimadhav": [478, 479, 481], "heblikar": [478, 479, 481], "17535": [478, 479, 481], "garvit": [478, 481], "khatri": [478, 481], "29851": [478, 481], "30436": [478, 481], "30526": [478, 481], "15216": [478, 481], "20825": [478, 481], "30537": [478, 481], "10379": [478, 481], "30520": [478, 481], "30522": [478, 481], "31080": [478, 481], "29962": [478, 481], "nitish": [478, 481], "chandra": [478, 481], "22589": [478, 481], "20486": [478, 481], "30596": [478, 481], "vitor": [478, 481], "pereira": [478, 481], "30794": [478, 481], "18966": [478, 481], "28682": [478, 481], "25996": [478, 481], "16500": [478, 481], "31368": [478, 481], "19930": [478, 481], "32441": [478, 481], "32659": [478, 481], "ry": [478, 481], "30897": [478, 481], "31389": [478, 481], "32206": [478, 481], "bernhard": 478, "wiedemann": 478, "29708": [478, 481], "feanil": 478, "patel": 478, "31128": [478, 481], "14976": [478, 481], "31690": [478, 481], "25054": [478, 481], "30215": [478, 481], "30349": [478, 481], "10076": [478, 481], "30050": [478, 481], "32373": [478, 481], "32454": [478, 481], "29728": [478, 481], "cathi": 478, "averi": 478, "27584": [478, 481], "28134": [478, 481], "lele": [478, 481], "gaifax": [478, 481], "27645": [478, 481], "31843": [478, 481], "31399": [478, 481], "libssl": 478, "libressl": [478, 481], "32185": [478, 481], "mandeep": [478, 481], "singh": [478, 481], "23033": [478, 481], "blacklist": [478, 481], "whitelist": [478, 481], "31429": [478, 481], "28414": [478, 481], "32947": [478, 481], "20995": [478, 481], "29136": [478, 481], "30622": [478, 481], "33618": [478, 481], "32951": [478, 481], "32609": 478, "1198569": [478, 481], "bo": [478, 479, 481], "bayl": [478, 479, 481], "32102": [478, 479, 481], "clegg": [478, 481], "31756": [478, 481], "segev": [478, 481], "19764": [478, 481], "25942": [478, 481], "31353": [478, 481], "28740": [478, 481], "32591": [478, 481], "32025": [478, 481], "32585": [478, 481], "32121": [478, 481], "manuel": [478, 479, 481], "krebber": [478, 481], "29377": [478, 481], "32265": [478, 481], "32717": 478, "haag": 478, "32071": [478, 481], "20804": [478, 481], "30541": [478, 481], "theun": [478, 481], "ratnadeep": [478, 481], "debnath": [478, 481], "16285": [478, 481], "relay": [478, 481], "22807": [478, 481], "32107": [478, 481], "20361": [478, 481], "32043": [478, 481], "32230": [478, 481], "31975": [478, 481], "31648": [478, 481], "simplexmlrpcdispatch": [478, 481], "7769": [478, 481], "irmen": 478, "jong": 478, "31072": [478, 481], "zhime": 478, "31638": [478, 481], "21417": [478, 481], "30693": [478, 481], "25658": [478, 481], "28411": [478, 481], "victorin": 478, "23699": [478, 481], "31338": [478, 481], "30054": 478, "31574": [478, 481], "28761": [478, 481], "28769": [478, 481], "milman": [478, 481], "28280": [478, 481], "27867": [478, 481], "10381": [478, 481], "30708": [478, 481], "abid": 478, "29102": [478, 481], "29240": [478, 481], "28822": [478, 481], "31370": [478, 481], "27979": [478, 481], "30450": [478, 481], "29300": 478, "29507": 478, "29452": 478, "29286": 478, "29585": [478, 481], "31333": [478, 481], "26110": [478, 481], "32296": [478, 481], "32348": [478, 481], "32355": [478, 481], "32351": [478, 481], "31970": [478, 481], "32226": [478, 481], "elliot": [478, 481], "gorokhovski": [478, 481], "28685": [478, 481], "31179": [478, 481], "32544": [478, 481], "24821": [478, 481], "28638": [478, 481], "32403": [478, 481], "28564": [478, 481], "30285": [478, 481], "31671": [478, 481], "30014": [478, 481], "eugen": [478, 481], "toder": [478, 481], "29469": [478, 481], "11549": 478, "70x": [478, 481], "wielgosik": [478, 481], "24700": [478, 481], "26121": [478, 481], "31344": [478, 481], "32305": [478, 481], "32303": [478, 481], "32690": [478, 481], "32304": [478, 481], "10544": [478, 479, 481], "28894": 478, "openfp": [478, 480, 481], "31985": [478, 481], "32253": [478, 481], "25988": [478, 481], "28847": [478, 481], "28692": [478, 481], "29576": [478, 481], "chi": [478, 481], "hsuan": [478, 481], "yen": [478, 481], "9850": [478, 481], "_dummy_thread": [478, 480, 481], "28332": [478, 481], "28124": [478, 481], "28799": [478, 481], "nix": 478, "jessi": 478, "trusti": 478, "lts": 478, "xenial": 478, "sles": 478, "sp3": 478, "splitunc": [478, 481], "_internaldict": [478, 481], "_overlap": [478, 481], "install_misc": [478, 481], "vander": [478, 481], "weel": [478, 481], "29218": [478, 481], "fpectl": [478, 481], "29137": [478, 481], "30291": [478, 481], "0p": [478, 481], "30362": [478, 481], "30406": [478, 481], "32670": [478, 481], "31709": [478, 481], "32012": [478, 481], "32023": [478, 481], "31233": [478, 481], "33540": [478, 481], "31151": [478, 481], "24744": [478, 481], "29193": [478, 481], "29192": [478, 481], "21071": [478, 481], "29979": [478, 481], "30399": [478, 481], "utkarsh": 478, "upadhyay": 478, "30302": [478, 481], "32308": [478, 481], "29995": [478, 481], "32331": [478, 481], "33169": [478, 481], "32327": [478, 481], "sottil": [478, 479, 480, 481], "26510": [478, 481], "31778": [478, 481], "28292": [478, 481], "32792": [478, 481], "nemec": 478, "33097": [478, 481], "tocknel": [478, 481], "23835": [478, 481], "32550": [478, 481], "28137": [478, 481], "latent": 478, "22257": [478, 481], "25612": [478, 481], "34247": 478, "affection": 479, "tusk": 479, "discount": 479, "clean_nam": 479, "allowed_nam": 479, "emili": [479, 481], "morehous": [479, 481], "35224": [479, 481], "impair": 479, "36540": [479, 481], "33499": [479, 481], "21536": [479, 481], "36722": [479, 481], "36721": [479, 481], "eric_idl": 479, "member_sinc": 479, "075": 479, "theta": 479, "36817": [479, 481], "_pyruntimest": [479, 481], "36763": [479, 481], "36974": [479, 480, 481], "36785": [479, 481], "32489": [479, 481], "33073": [479, 481], "37819": [479, 481], "20092": [479, 481], "copyright_year_pattern": 479, "eunic": [479, 481], "30688": [479, 481], "lapeyr": [479, 480, 481], "33462": [479, 481], "34641": [479, 481], "simpson": 479, "homer": 479, "marg": 479, "bart": 479, "cuthbert": [479, 481], "jordan": [479, 481], "32117": [479, 481], "15248": [479, 481], "32417": [479, 481], "1054041": [479, 481], "37032": [479, 481], "137": 479, "diophantin": 479, "equat": 479, "369": 479, "36027": [479, 481], "rn": 479, "heissler": 479, "glaser": [479, 481], "olivi": [479, 481], "grisel": [479, 481], "35900": [479, 481], "chardet": 479, "34632": [479, 481], "33416": [479, 481], "35766": [479, 481], "37028": [479, 481], "32528": [479, 481], "34687": [479, 481], "meili": [479, 481], "29883": [479, 481], "23057": [479, 481], "36999": [479, 481], "34270": [479, 481], "twisteroid": 479, "ambassador": 479, "33530": [479, 481], "34616": [479, 481], "remedi": 479, "35864": [479, 481], "sanderson": [479, 481], "29235": [479, 481], "selik": [479, 481], "34003": [479, 481], "31680": [479, 481], "36085": [479, 481], "36004": [479, 481], "36772": [479, 481], "21145": [479, 481], "taskmanag": 479, "32380": [479, 481], "36016": [479, 481], "franz": [479, 481], "glasner": 479, "2504": [479, 481], "guo": [479, 481], "teo": [479, 481], "34898": [479, 481], "6584": [479, 481], "13153": [479, 481], "4603": [479, 480], "johnni": [479, 480, 481], "najera": [479, 480, 481], "38944": [479, 480, 481], "37765": [479, 480, 481], "audioclip": 479, "bit_rat": 479, "kilohertz": 479, "36326": [479, 481], "1015": 479, "1045": 479, "34659": [479, 481], "31553": [479, 481], "jupyt": 479, "33897": [479, 481], "33089": [479, 481], "35606": [479, 481], "yash": [479, 481], "aggarw": [479, 481], "keller": [479, 481], "37128": [479, 481], "37178": [479, 481], "35431": [479, 481], "650320427": 479, "650320426": 479, "36887": [479, 481], "33083": [479, 481], "32941": [479, 481], "35813": [479, 481], "26836": [479, 481], "37834": [479, 481], "33721": [479, 481], "36264": [479, 481], "joannah": [479, 480, 481], "nanjeky": [479, 480, 481], "26978": [479, 481], "jon": [479, 480, 481], "janzen": [479, 480], "26707": [479, 481], "30670": [479, 481], "22640": [479, 481], "20849": [479, 481], "gerlach": [479, 481], "30661": 479, "17561": [479, 481], "37007": [479, 481], "34670": [479, 481], "35904": [479, 481], "35892": 479, "equiprob": 479, "36546": [479, 481], "36018": [479, 481], "temperature_feb": 479, "356099432828281": 479, "3184678262814532": 479, "2039930378537762": 479, "el_ni": 479, "climat": 479, "830080526611674": 479, "294144947901014": 479, "672102882379219": 479, "000027119750287": 479, "647488369766392": 479, "36829": [479, 481], "36268": [479, 481], "1230540": [479, 481], "tesler": 479, "36084": [479, 481], "selection_from": [479, 481], "selection_pres": [479, 481], "selection_rang": [479, 481], "selection_to": [479, 481], "juliett": [479, 481], "monsel": [479, 481], "34829": [479, 481], "moveto": [479, 481], "23831": [479, 481], "transparency_get": 479, "transparency_set": 479, "25451": [479, 481], "35702": [479, 481], "lat_long": 479, "grid_squar": 479, "xy_coordin": 479, "get_status": 479, "1415926536": 479, "belang": 479, "euresti": 479, "32285": [479, 481], "37966": [479, 481], "26467": [479, 481], "24412": [479, 481], "strandmark": [479, 481], "35047": [479, 481], "32972": [479, 481], "testrequest": 479, "test_get": 479, "32718": [479, 481], "36669": [479, 481], "17239": [479, 481], "28238": [479, 481], "13611": [479, 481], "36676": [479, 481], "36673": [479, 481], "35153": [479, 481], "35537": [479, 481], "smb": [479, 481], "33695": [479, 481], "pygc_head": [479, 480, 481], "33597": [479, 481], "bolsterle": [479, 481], "30977": [479, 481], "35664": [479, 481], "32492": [479, 481], "33234": [479, 481], "36012": [479, 481], "23867": 479, "35582": 479, "36127": 479, "26219": [479, 481], "36707": [479, 481], "8m": 479, "37m": 479, "35081": [479, 481], "pyobject_init_var": [479, 480, 481], "_py_dealloc": 479, "35059": [479, 481], "pybytearray_init": [479, 481], "pybytearray_fini": [479, 481], "35713": [479, 481], "33818": [479, 481], "dualiti": 479, "32430": [479, 481], "36048": [479, 481], "35810": [479, 480, 481], "37221": [479, 481], "38234": [479, 481], "37481": [479, 481], "29209": [479, 481], "34075": [479, 481], "9372": [479, 481], "36320": [479, 481], "32892": [479, 481], "36917": [479, 481], "36921": [479, 481], "34790": [479, 480, 481], "33710": [479, 481], "isal": [479, 480, 481], "35283": [479, 481], "sharedmemoryserv": 479, "36492": [479, 481], "36952": [479, 481], "35471": [479, 481], "35345": [479, 481], "36895": [479, 481], "25427": [479, 481], "36297": [479, 481], "30262": [479, 481], "36933": [479, 481], "34850": [479, 481], "35459": 479, "36793": [479, 481], "aix3": [479, 481], "36588": [479, 481], "36475": [479, 481], "37412": [479, 481], "34651": [479, 481], "37951": [479, 481], "36348": [479, 481], "31508": [479, 481], "roja": 479, "34160": [479, 481], "32749": [479, 481], "pycore_pyst": [479, 481], "35886": [479, 481], "2122": [479, 481], "33106": [479, 481], "32751": [479, 480, 481], "37027": [479, 481], "kb2533623": 479, "pgen": [479, 481], "36623": [479, 481], "pyeval_reinitthread": [479, 481], "36728": [479, 481], "36381": [479, 481], "foo_struct": [479, 480], "foo_new": 479, "33407": [479, 481], "32388": [479, 481], "pynode_addchild": 479, "pyparser_addtoken": 479, "libpython38": [479, 481], "mingw": [479, 481], "python38": 479, "gendef": 479, "dlltool": 479, "binutil": 479, "37351": [479, 481], "unrol": [479, 481], "break_loop": [479, 481], "continue_loop": [479, 481], "setup_loop": [479, 481], "setup_except": [479, 481], "begin_fin": [479, 481], "call_fin": [479, 481], "pop_fin": [479, 481], "end_fin": [479, 481], "with_cleanup_start": [479, 481], "17611": [479, 481], "33041": [479, 481], "var_access_benchmark": [479, 480, 481], "35884": [479, 481], "read_loc": [479, 480], "read_nonloc": [479, 480], "read_glob": [479, 480], "read_builtin": [479, 480], "read_classvar_from_class": [479, 480], "read_classvar_from_inst": [479, 480], "read_instancevar": [479, 480], "read_instancevar_slot": [479, 480], "read_namedtupl": [479, 480], "read_boundmethod": [479, 480], "write_loc": [479, 480], "write_nonloc": [479, 480], "write_glob": [479, 480], "write_classvar": [479, 480], "write_instancevar": [479, 480], "write_instancevar_slot": [479, 480], "read_list": [479, 480], "read_dequ": [479, 480], "read_strdict": [479, 480], "write_list": [479, 480], "write_dequ": [479, 480], "write_dict": [479, 480], "write_strdict": [479, 480], "list_append_pop": [479, 480], "deque_append_pop": [479, 480], "deque_append_popleft": [479, 480], "loop_overhead": [479, 480], "i7": [479, 480], "4960hq": [479, 480], "barkhau": 479, "83571": 479, "83743": 479, "lawrenc": [479, 480, 481], "anna": [479, 480], "85272": 479, "fx": 479, "coudert": 479, "rykoff": 479, "langer": 479, "43882": [479, 481], "36384": [479, 480, 481], "achraf": 479, "merzouki": 479, "573": [480, 481], "_abc": [480, 481], "_bz2": [480, 481], "_codec": [480, 481], "_contextvar": [480, 481], "_crypt": [480, 481], "_functool": [480, 481], "_json": [480, 481], "multiphas": [480, 481], "_hashlib": [480, 481], "_posixsubprocess": [480, 481], "36144": [480, 481], "39939": [480, 481], "greet_al": 480, "ta": [480, 481], "kaya": [480, 481], "39481": [480, 481], "pythonoldpars": [480, 481], "ngalim": [480, 481], "siregar": [480, 481], "37444": [480, 481], "20443": [480, 481], "37388": [480, 481], "28029": [480, 481], "39702": [480, 481], "40257": [480, 481], "30773": [480, 481], "40824": [480, 481], "41848": 480, "43755": [480, 481], "17005": [480, 481], "37995": [480, 481], "38870": [480, 481], "39638": [480, 481], "34037": [480, 481], "38692": [480, 481], "32309": [480, 481], "typererror": [480, 481], "ido": [480, 481], "37404": [480, 481], "lum": 480, "frenzi": 480, "balhar": 480, "40495": [480, 481], "38112": [480, 481], "39349": [480, 481], "39812": [480, 481], "39207": [480, 481], "38312": [480, 481], "24416": [480, 481], "40698": [480, 481], "38602": [480, 481], "39259": [480, 481], "38379": [480, 481], "39322": [480, 481], "xof": [480, 481], "37630": [480, 481], "40479": [480, 481], "39509": [480, 481], "rhode": [480, 481], "39507": [480, 481], "38615": [480, 481], "40375": [480, 481], "39336": [480, 481], "39791": [480, 481], "36350": [480, 481], "39775": [480, 481], "oleksandr": [480, 481], "pavliuk": [480, 481], "34788": [480, 481], "39648": [480, 481], "ananthakrishnan": 480, "39479": [480, 481], "39288": [480, 481], "39310": [480, 481], "30966": [480, 481], "38493": [480, 481], "38713": [480, 481], "39413": [480, 481], "39395": [480, 481], "40094": [480, 481], "girt": [480, 481], "folkmani": [480, 481], "30618": [480, 481], "hopper": [480, 481], "lidral": [480, 481], "porter": [480, 481], "20523": [480, 481], "bordum": [480, 481], "37376": [480, 481], "40286": [480, 481], "38712": [480, 481], "39329": [480, 481], "tatschner": 480, "25780": [480, 481], "40291": [480, 481], "shinya": [480, 481], "okano": [480, 481], "28724": [480, 481], "thread_cputim": [480, 481], "40192": [480, 481], "jek": [480, 481], "charalampo": [480, 481], "strataki": [480, 481], "1294959": [480, 481], "jendrik": [480, 481], "seipp": [480, 481], "13601": [480, 481], "huon": 480, "40630": 480, "varoquaux": [480, 481], "konstantin": [480, 481], "kashin": [480, 481], "39926": [480, 481], "37663": [480, 481], "eoln": 480, "mefistot": 480, "39011": [480, 481], "32856": [480, 481], "40010": [480, 481], "closefrom": [480, 481], "mast": [480, 481], "conrad": [480, 481], "kubilay": [480, 481], "kocak": [480, 481], "38061": [480, 481], "87x": 480, "37986": [480, 481], "37207": [480, 481], "kapun": [480, 481], "8425": [480, 481], "thrash": [480, 481], "37257": [480, 481], "39434": [480, 481], "37348": [480, 481], "39586": [480, 481], "37315": [480, 481], "35712": [480, 481], "28286": [480, 481], "splitlist": [480, 481], "hexbin4": [480, 481], "rledecode_hqx": [480, 481], "39353": [480, 481], "34822": [480, 481], "augload": [480, 481], "augstor": [480, 481], "39639": [480, 481], "39969": [480, 481], "39988": [480, 481], "39877": [480, 481], "33262": [480, 481], "colvin": [480, 481], "xgtitl": [480, 481], "39366": [480, 481], "38916": [480, 481], "call_profil": [480, 481], "37414": [480, 481], "37392": [480, 481], "pyimport_cleanup": 480, "36710": 480, "37312": [480, 481], "37320": [480, 481], "37804": [480, 481], "36543": [480, 481], "36409": [480, 481], "pygen_needsfin": [480, 481], "15088": [480, 481], "39351": [480, 481], "39350": [480, 481], "39357": [480, 481], "39377": [480, 481], "34793": [480, 481], "39489": [480, 481], "40182": [480, 481], "has_exec": [480, 481], "40208": [480, 481], "40967": [480, 481], "39239": [480, 481], "39562": [480, 481], "34538": 480, "37742": [480, 481], "aiudi": [480, 481], "34775": [480, 481], "latex_latin1": 480, "jordon": 480, "xu": [480, 481], "37751": [480, 481], "foo_travers": 480, "29548": [480, 481], "34880": [480, 481], "39156": [480, 481], "setenv": [480, 481], "10945": [480, 481], "isysroot": [480, 481], "34956": [480, 481], "33125": [480, 481], "36044": [480, 481], "37707": [480, 481], "marcel": [480, 481], "plch": [480, 481], "38787": [480, 481], "40421": [480, 481], "39947": [480, 481], "37194": [480, 481], "38644": [480, 481], "39542": [480, 481], "40024": [480, 481], "40241": [480, 481], "_pyobject_functionstr": [480, 481], "37645": [480, 481], "37483": [480, 481], "38500": [480, 481], "39984": [480, 481], "38650": [480, 481], "pycore_gc": 480, "39882": [480, 481], "37540": [480, 481], "pyobject_new_var": [480, 481], "pyobject_get_weakrefs_listptr": [480, 481], "pyfpe_start_protect": [480, 481], "pyfpe_end_protect": [480, 481], "38835": [480, 481], "37878": [480, 481], "_py_newrefer": [480, 481], "_py_forgetrefer": [480, 481], "_pytracemalloc_newrefer": [480, 481], "_py_getreftot": [480, 481], "pytrash_unwind_level": [480, 481], "py_trashcan_begin_condit": [480, 481], "_pydebug_printtotalref": 480, "_py_printrefer": 480, "_py_printreferenceaddress": 480, "_py_tracemalloc_config": 480, "_py_addtoallobject": 480, "getfram": [480, 481], "_pythreadstate_getfram": [480, 481], "pythreadframegett": [480, 481], "39946": [480, 481], "37340": [480, 481], "38896": [480, 481], "40428": [480, 481], "pyasyncgen_clearfreelist": [480, 481], "pycontext_clearfreelist": [480, 481], "pydict_clearfreelist": [480, 481], "pyfloat_clearfreelist": [480, 481], "pyframe_clearfreelist": [480, 481], "pylist_clearfreelist": [480, 481], "pymethod_clearfreelist": [480, 481], "pycfunction_clearfreelist": [480, 481], "pyset_clearfreelist": [480, 481], "pytuple_clearfreelist": [480, 481], "pyunicode_clearfreelist": [480, 481], "_pyunicode_clearstaticstr": [480, 481], "39465": [480, 481], "_pybytes_insertthousandsgroupinglocal": [480, 481], "_pybytes_insertthousandsgroup": [480, 481], "_py_initializefromarg": [480, 481], "_py_initializefromwidearg": [480, 481], "_pyfloat_repr": [480, 481], "_pyfloat_digit": [480, 481], "_pyfloat_digitsinit": [480, 481], "pyframe_extendstack": [480, 481], "_pyaiterwrapper_typ": [480, 481], "pynullimporter_typ": [480, 481], "pycmpwrapper_typ": [480, 481], "pysortwrapper_typ": [480, 481], "pynoargsfunct": [480, 481], "39372": [480, 481], "41100": [480, 481], "115399": 481, "libexpat": 481, "115243": 481, "112087": 481, "114828": 481, "115011": 481, "112215": 481, "96497": 481, "111358": 481, "115618": 481, "115570": 481, "115392": 481, "114563": 481, "115165": 481, "__orig_class__": 481, "shawley": 481, "115133": 481, "115059": 481, "79382": 481, "114071": 481, "97959": 481, "107155": 481, "100985": 481, "100884": 481, "misfold": 481, "95782": 481, "115233": 481, "115596": 481, "programprioritytest": 481, "test_o": 481, "115167": 481, "vcruntime140_thread": 481, "115049": 481, "115009": 481, "113516": 481, "2024": 481, "113659": 481, "114887": 481, "114388": 481, "t_uint": 481, "t_ulong": 481, "113703": 481, "89811": 481, "113602": 481, "113297": 481, "106905": 481, "112943": 481, "112716": 481, "94606": 481, "sidney": 481, "markowitz": 481, "114965": 481, "114959": 481, "109475": 481, "110190": 481, "max_struct_s": 481, "stgdict": 481, "russo": 481, "113280": 481, "77749": 481, "114492": 481, "alpin": 481, "113267": 481, "106584": 481, "unbalanc": 481, "75128": 481, "114257": 481, "filenotfound": 481, "114328": 481, "icrlf": 481, "101438": 481, "104522": 481, "114149": 481, "109534": 481, "selector_ev": 481, "baseselectoreventloop": 481, "jami": 481, "114077": 481, "114014": 481, "jeremiah": 481, "pascual": 481, "113951": 481, "tag_unbind": 481, "funcid": 481, "113877": 481, "winfo_pathnam": 481, "113661": 481, "113781": 481, "112932": 481, "113594": 481, "113538": 481, "streamreaderprotocol": 481, "85567": 481, "101225": 481, "resource_shar": 481, "113543": 481, "113028": 481, "113421": 481, "111784": 481, "_elementtre": 481, "113407": 481, "113320": 481, "113358": 481, "113214": 481, "113246": 481, "113199": 481, "113188": 481, "differen": 481, "61648": 481, "112559": 481, "yilei": 481, "yang": 481, "ppc64le": 481, "79429": 481, "81194": 481, "uint_max": 481, "112343": 481, "111615": 481, "93162": 481, "111049": 481, "110345": 481, "109858": 481, "zipbomb": 481, "114440": 481, "38807": 481, "75705": 481, "106233": 481, "105102": 481, "104282": 481, "_decode_filter_properti": 481, "radislav": 481, "chugunov": 481, "102512": 481, "_dummythread": 481, "_mainthread": 481, "35928": 481, "26791": 481, "36959": 481, "hemsley": 481, "18060": 481, "110746": 481, "95649": 481, "v0": 481, "109980": 481, "test_tarfile_vs_tar": 481, "test_shutil": 481, "105089": 481, "test_zipfil": 481, "test_cor": 481, "testwithdirectori": 481, "test_create_directory_with_writ": 481, "zinfo": 481, "40648": 481, "112305": 481, "errant": 481, "112867": 481, "with_pymalloc_radix_tre": 481, "11102": 481, "ux": 481, "36351": 481, "ipv6typ": 481, "109991": 481, "111239": 481, "100107": 481, "114096": 481, "111877": 481, "113009": 481, "getexitcodeprocess": 481, "still_act": 481, "87868": 481, "37308": 481, "mojibak": 481, "110459": 481, "74573": 481, "fb8919203": 481, "65701": 481, "108269": 481, "cfbundleallowmixedloc": 481, "102362": 481, "get_plaform": 481, "110017": 481, "stress": 481, "fb13453490": 481, "110820": 481, "alignof_max_align_t": 481, "sizeof_long_doubl": 481, "have_gcc_asm_for_x64": 481, "96905": 481, "72284": 481, "bing": 481, "113903": 481, "test_idl": 481, "test_configdialog": 481, "113729": 481, "113269": 481, "test_editor": 481, "catalina": 481, "112898": 481, "103820": 481, "13586": 481, "multissltest": 481, "1w": 481, "115015": 481, "112125": 481, "112625": 481, "105967": 481, "112356": 481, "load_nul": 481, "111058": 481, "112388": 481, "112387": 481, "112367": 481, "112243": 481, "112266": 481, "111654": 481, "109181": 481, "102388": 481, "111366": 481, "111380": 481, "94438": 481, "savannah": 481, "ostrowski": 481, "110938": 481, "109894": 481, "110782": 481, "110696": 481, "110543": 481, "110514": 481, "110455": 481, "have_pthread_stub": 481, "110259": 481, "110237": 481, "_pyeval_matchclass": 481, "109889": 481, "109853": 481, "105716": 481, "109793": 481, "109596": 481, "109351": 481, "109216": 481, "109207": 481, "109179": 481, "109052": 481, "88943": 481, "106931": 481, "79325": 481, "112645": 481, "112618": 481, "112334": 481, "6507": 481, "112578": 481, "112509": 481, "112414": 481, "112358": 481, "broke": 481, "94722": 481, "112105": 481, "111942": 481, "109538": 481, "111460": 481, "103791": 481, "111804": 481, "falloc": 481, "preview2": 481, "111841": 481, "111541": 481, "110894": 481, "111531": 481, "bind_class": 481, "bind_al": 481, "111356": 481, "111342": 481, "68166": 481, "vsapi": 481, "75666": 481, "79033": 481, "111295": 481, "111253": 481, "111251": 481, "_blake2": 481, "111174": 481, "111187": 481, "111159": 481, "110910": 481, "111092": 481, "110488": 481, "110392": 481, "110590": 481, "65052": 481, "110519": 481, "alwai": 481, "110395": 481, "110378": 481, "110365": 481, "109653": 481, "110196": 481, "110036": 481, "110038": 481, "109631": 481, "109747": 481, "109818": 481, "109047": 481, "terminate_broken": 481, "109782": 481, "amin": 481, "alae": 481, "109590": 481, "109786": 481, "109593": 481, "semlock": 481, "109613": 481, "109375": 481, "107219": 481, "50644": 481, "108987": 481, "108791": 481, "105829": 481, "egor": 481, "eliseev": 481, "102956": 481, "84867": 481, "91133": 481, "73561": 481, "86826": 481, "8536": 481, "43153": 481, "35332": 481, "41422": 481, "40262": 481, "111699": 481, "108826": 481, "112769": 481, "ng": 481, "110367": 481, "verbose3": 481, "huntrleak": 481, "jn": 481, "111165": 481, "run_unittest": 481, "110932": 481, "110995": 481, "test_gdb": 481, "110918": 481, "matchfil": 481, "ignorefil": 481, "110647": 481, "test_stress_modifying_handl": 481, "test_sign": 481, "103053": 481, "test_tool": 481, "test_freez": 481, "110167": 481, "test_socket": 481, "110388": 481, "81002": 481, "110267": 481, "pystructsequ": 481, "xuehai": 481, "110031": 481, "110088": 481, "test_asyncio": 481, "clock_r": 481, "109974": 481, "110033": 481, "test_interprocess_sign": 481, "109594": 481, "test_concurrent_futur": 481, "test_wait": 481, "ot": 481, "109972": 481, "test_freeze_simple_script": 481, "cis": 481, "109580": 481, "test_perf_profil": 481, "104736": 481, "backtrac": 481, "108927": 481, "test_importlib": 481, "test_unittest": 481, "test_compileal": 481, "112088": 481, "quay": 481, "tiran": 481, "cpython_autoconf": 481, "271": 481, "111046": 481, "109191": 481, "111856": 481, "exfat": 481, "111293": 481, "110913": 481, "windowsconsoleio": 481, "110437": 481, "109286": 481, "109981": 481, "110950": 481, "sonoma": 481, "111015": 481, "71383": 481, "92603": 481, "35668": 481, "idb": 481, "in_rpc_cod": 481, "prev_fram": 481, "test_debugg": 481, "106560": 481, "112438": 481, "109521": 481, "109823": 481, "109719": 481, "cold": 481, "warm": 481, "109627": 481, "110045": 481, "109209": 481, "109496": 481, "_py_negativerefcount": 481, "109371": 481, "deopt": 481, "105658": 481, "109219": 481, "109341": 481, "109195": 481, "load_": 481, "encompass": 481, "109118": 481, "109114": 481, "108976": 481, "108732": 481, "108959": 481, "108682": 481, "108843": 481, "102823": 481, "109396": 481, "test_hmac_sha1": 481, "109237": 481, "test_sit": 481, "test_underpth_bas": 481, "109230": 481, "test_pyexpat": 481, "test_except": 481, "109015": 481, "test_imaplib": 481, "blackhol": 481, "gcp": 481, "91960": 481, "retriv": 481, "py_bt": 481, "clueless": 481, "108962": 481, "test_tempfil": 481, "test_flag": 481, "108851": 481, "test_tomllib": 481, "get_recursion_avail": 481, "get_recursion_depth": 481, "108834": 481, "verbose2": 481, "103186": 481, "test_sys_settrac": 481, "108740": 481, "deepfreez": 481, "108310": 481, "aapo": 481, "oksman": 481, "107774": 481, "108520": 481, "_is_fork_ctx": 481, "accross": 481, "is_fork_ctx": 481, "108654": 481, "108487": 481, "devious": 481, "deoptim": 481, "106176": 481, "107901": 481, "108390": 481, "107724": 481, "rc1": 481, "107080": 481, "77377": 481, "108469": 481, "reselect": 481, "108295": 481, "64662": 481, "108111": 481, "101251": 481, "105736": 481, "harmon": 481, "108083": 481, "107963": 481, "106242": 481, "107913": 481, "107845": 481, "107805": 481, "107715": 481, "gertjan": 481, "zwieten": 481, "100814": 481, "tclerror": 481, "106684": 481, "107396": 481, "106052": 481, "100061": 481, "99203": 481, "105052": 481, "89392": 481, "108388": 481, "test_multiprocessing_fork": 481, "test_multiprocessing_forkserv": 481, "test_multiprocessing_spawn": 481, "105776": 481, "test_cppext": 481, "107178": 481, "63760": 481, "kul": 481, "107814": 481, "find_python": 481, "107565": 481, "106844": 481, "lcmapstringex": 481, "1v": 481, "95065": 481, "text_signatur": 481, "107916": 481, "107915": 481, "107810": 481, "102988": 481, "12beta4": 481, "106669": 481, "102509": 481, "ob_digit": 481, "107263": 481, "104432": 481, "unalign": 481, "fsanizit": 481, "chavez": 481, "106898": 481, "py_unind": 481, "hanld": 481, "106895": 481, "funtion": 481, "106897": 481, "104621": 481, "106917": 481, "105699": 481, "initialz": 481, "106092": 481, "frame_dealloc": 481, "106719": 481, "106723": 481, "105235": 481, "107077": 481, "ssl_error_syscal": 481, "ssl_error_ssl": 481, "err_lib_ssl": 481, "ssl_r_certificate_verify_fail": 481, "appropi": 481, "107576": 481, "46376": 481, "62519": 481, "83006": 481, "106186": 481, "105002": 481, "106831": 481, "d2i_ssl_sess": 481, "_ssl": 481, "106774": 481, "106752": 481, "106602": 481, "106530": 481, "106403": 481, "106350": 481, "libtommath": 481, "mp_init": 481, "106263": 481, "signaldict": 481, "charli": 481, "zhao": 481, "105626": 481, "18319": 481, "107305": 481, "nearbi": 481, "107008": 481, "106948": 481, "nitpick_ignor": 481, "54738": 481, "107237": 481, "test_log": 481, "test_udp_reconnect": 481, "106714": 481, "test_capi": 481, "test_no_fatalerror_infinite_loop": 481, "104090": 481, "_path": 481, "106881": 481, "posixmodul": 481, "106962": 481, "mpi": 481, "101538": 481, "takashi": 481, "99079": 481, "106970": 481, "config_arg": 481, "ijtaba": 481, "hussain": 481, "107226": 481, "27043": 481, "_parseaddr": 481, "addresslist": 481, "106396": 481, "106145": 481, "105979": 481, "_imp": 481, "get_frozen_object": 481, "105908": 481, "99111": 481, "barry_as_flufl": 481, "105340": 481, "105486": 481, "101006": 481, "106524": 481, "106510": 481, "106503": 481, "_selectorsockettransport": 481, "_write_readi": 481, "105497": 481, "90876": 481, "106292": 481, "106330": 481, "102541": 481, "106152": 481, "106075": 481, "105987": 481, "105974": 481, "96145": 481, "104554": 481, "94777": 481, "106232": 481, "101634": 481, "testn": 481, "106118": 481, "12b1": 481, "103295": 481, "104692": 481, "commoninstal": 481, "bininstal": 481, "106359": 481, "splat": 481, "105227": 481, "105840": 481, "105831": 481, "105800": 481, "105587": 481, "_pystaticobject_checkrefcnt": 481, "105564": 481, "artificil": 481, "105549": 481, "105588": 481, "105375": 481, "105435": 481, "105390": 481, "104812": 481, "ergo": 481, "105808": 481, "zip_mod": 481, "104799": 481, "105745": 481, "_unpickler_setinputstream": 481, "105605": 481, "_datetim": 481, "105332": 481, "104310": 481, "allowing_all_extens": 481, "104996": 481, "105084": 481, "wheel_pkg_dir": 481, "105436": 481, "105603": 481, "own_gil": 481, "103968": 481, "103142": 481, "1u": 481, "cves": 481, "99108": 481, "105259": 481, "105324": 481, "98963": 481, "12beta1": 481, "105194": 481, "105162": 481, "105164": 481, "105035": 481, "105017": 481, "105013": 481, "104976": 481, "tokeninfo": 481, "104972": 481, "104955": 481, "104690": 481, "104879": 481, "104825": 481, "105280": 481, "105239": 481, "105080": 481, "105144": 481, "105113": 481, "103631": 481, "104947": 481, "104935": 481, "104874": 481, "104797": 481, "104372": 481, "104399": 481, "mp_to_unsigned_bin_n": 481, "mp_unsigned_bin_s": 481, "102024": 481, "_idle_semaphor": 481, "_worker": 481, "89455": 481, "89412": 481, "104943": 481, "90005": 481, "libbsd": 481, "105146": 481, "103646": 481, "unwrit": 481, "88745": 481, "copyfile2": 481, "104820": 481, "104803": 481, "104719": 481, "105115": 481, "beta1": 481, "105071": 481, "99889": 481, "104049": 481, "102153": 481, "24329": 481, "104615": 481, "104572": 481, "104482": 481, "102818": 481, "104405": 481, "104263": 481, "mip": 481, "py_infin": 481, "berg": 481, "99113": 481, "104108": 481, "104142": 481, "104078": 481, "104066": 481, "104028": 481, "104018": 481, "102213": 481, "103895": 481, "103907": 481, "103899": 481, "103845": 481, "103763": 481, "load_classdict_or_glob": 481, "load_classdict_or_deref": 481, "103801": 481, "ruff": 481, "102310": 481, "103650": 481, "sunmy2019": 481, "100530": 481, "101517": 481, "103492": 481, "87729": 481, "103488": 481, "82012": 481, "103333": 481, "103242": 481, "103323": 481, "tstate_curr": 481, "102700": 481, "88691": 481, "97933": 481, "99184": 481, "98003": 481, "39610": 481, "mem_0d": 481, "31821": 481, "104600": 481, "104340": 481, "104555": 481, "104484": 481, "75367": 481, "104536": 481, "stracktrac": 481, "101520": 481, "104392": 481, "_paramspec_tvar": 481, "102613": 481, "103000": 481, "elli": 481, "104301": 481, "104139": 481, "unsplit": 481, "itm": 481, "104307": 481, "87695": 481, "104265": 481, "0a4": 481, "23224": 481, "14935": 481, "65772": 481, "90208": 481, "104144": 481, "fututr": 481, "104114": 481, "104104": 481, "104102": 481, "103822": 481, "103963": 481, "call_intrinsic_": 481, "104035": 481, "103987": 481, "103977": 481, "88773": 481, "liam": 481, "gersten": 481, "103935": 481, "68968": 481, "100370": 481, "102628": 481, "103583": 481, "_multibytecodec": 481, "103848": 481, "ipvfutur": 481, "103872": 481, "99944": 481, "74940": 481, "103861": 481, "103839": 481, "tommath": 481, "90750": 481, "103685": 481, "81403": 481, "endtransf": 481, "voidresp": 481, "89415": 481, "rees": 481, "hyde": 481, "103673": 481, "berri": 481, "84976": 481, "_pydatetim": 481, "103596": 481, "103584": 481, "stipul": 481, "typesh": 481, "9620": 481, "103578": 481, "103556": 481, "103559": 481, "103548": 481, "103538": 481, "tk_aqua": 481, "103533": 481, "103525": 481, "103365": 481, "103472": 481, "103462": 481, "103449": 481, "103092": 481, "_collect": 481, "103357": 481, "harel": 481, "_protocolmeta": 481, "_is_callable_members_on": 481, "_get_protocol_attr": 481, "103256": 481, "103285": 481, "103225": 481, "93910": 481, "memmber": 481, "102978": 481, "100479": 481, "103220": 481, "103204": 481, "75586": 481, "103143": 481, "102953": 481, "97696": 481, "81079": 481, "101819": 481, "101362": 481, "102114": 481, "62432": 481, "78079": 481, "101688": 481, "101640": 481, "83861": 481, "89550": 481, "99353": 481, "96522": 481, "96534": 481, "87474": 481, "gorgen": 481, "51574": 481, "94518": 481, "fork_exec": 481, "92184": 481, "46797": 481, "44844": 481, "45606": 481, "23041": 481, "24964": 481, "17258": 481, "39744": 481, "22708": 481, "67056": 481, "48241": 481, "86094": 481, "yeojin": 481, "andrea": 481, "giudiceandrea": 481, "99202": 481, "104494": 481, "test_pack_configure_in": 481, "test_place_configure_in": 481, "104461": 481, "test_configure_screen": 481, "86275": 481, "103329": 481, "102795": 481, "test_control_and_wait": 481, "75729": 481, "101282": 481, "99017": 481, "104490": 481, "phoni": 481, "104106": 481, "mkfifoat": 481, "mknodat": 481, "103532": 481, "tkinter_protect_loadtk": 481, "91152": 481, "99069": 481, "static_assert": 481, "100220": 481, "104623": 481, "82814": 481, "103088": 481, "102997": 481, "88013": 481, "99834": 481, "103545": 481, "104180": 481, "schott": 481, "60436": 481, "104499": 481, "104496": 481, "someday": 481, "88496": 481, "104389": 481, "101291": 481, "104109": 481, "103743": 481, "103091": 481, "101408": 481, "prehead": 481, "96803": 481, "89987": 481, "101975": 481, "stacktop": 481, "100982": 481, "compare_and_branch": 481, "102701": 481, "102594": 481, "102491": 481, "ironlanguag": 481, "ironpython3": 481, "1667": 481, "rearrag": 481, "2s": 481, "102397": 481, "102406": 481, "102281": 481, "nullptr": 481, "fileutil": 481, "bachmann": 481, "102300": 481, "102255": 481, "xbox": 481, "102027": 481, "sse2": 481, "sse3": 481, "101865": 481, "_pickl": 481, "moham": 481, "koubaa": 481, "103085": 481, "103068": 481, "102549": 481, "103056": 481, "103046": 481, "103023": 481, "102947": 481, "102780": 481, "102839": 481, "88965": 481, "76846": 481, "102670": 481, "102615": 481, "100112": 481, "102578": 481, "74468": 481, "102378": 481, "_signature_strip_non_python_syntax": 481, "102103": 481, "102069": 481, "102038": 481, "98886": 481, "101673": 481, "101313": 481, "100372": 481, "89727": 481, "100131": 481, "98169": 481, "96931": 481, "95495": 481, "close_notifi": 481, "94684": 481, "94440": 481, "36305": 481, "103112": 481, "102980": 481, "102537": 481, "test_zoneinfo": 481, "tzpathtest": 481, "python_tzpath_context": 481, "101377": 481, "test_locale_calendar_formatweekday": 481, "102973": 481, "dockerfil": 481, "102711": 481, "wstrict": 481, "102690": 481, "102809": 481, "102013": 481, "pyunstable_visitobject": 481, "101727": 481, "1t": 481, "0286": 481, "4303": 481, "libtomcrypt": 481, "101283": 481, "102493": 481, "102416": 481, "102356": 481, "102336": 481, "102250": 481, "102126": 481, "getcurrentprocessid": 481, "102056": 481, "for_iter_rang": 481, "101967": 481, "positional_only_passed_as_keyword": 481, "101952": 481, "74895": 481, "sai_servic": 481, "101857": 481, "musl": 481, "84783": 481, "87849": 481, "101765": 481, "101430": 481, "presiz": 481, "101696": 481, "_pystatictype_dealloc": 481, "100719": 481, "98627": 481, "102302": 481, "101979": 481, "91038": 481, "81652": 481, "102179": 481, "101961": 481, "hookcompress": 481, "gihwan": 481, "101936": 481, "vo": 481, "101566": 481, "multiplexedpath": 481, "265": 481, "101997": 481, "_sha2": 481, "_sha256": 481, "_sha512": 481, "101892": 481, "87634": 481, "97786": 481, "101773": 481, "_normal": 481, "101693": 481, "101446": 481, "63301": 481, "101360": 481, "101277": 481, "100809": 481, "99138": 481, "96764": 481, "88233": 481, "leakag": 481, "85417": 481, "97725": 481, "102019": 481, "test_current_": 481, "89792": 481, "99942": 481, "100221": 481, "sharedinstal": 481, "96821": 481, "102344": 481, "101881": 481, "101849": 481, "101763": 481, "101759": 481, "101614": 481, "python3_d": 481, "101196": 481, "101907": 481, "99293": 481, "91744": 481, "689": 481, "92173": 481, "59956": 481, "101400": 481, "101372": 481, "101266": 481, "pylongvalu": 481, "101046": 481, "101037": 481, "underalloc": 481, "100762": 481, "100942": 481, "100923": 481, "100892": 481, "91351": 481, "100726": 481, "100712": 481, "enable_speci": 481, "32780": 481, "pep3118": 481, "101541": 481, "psuedo": 481, "101570": 481, "101323": 481, "_zlibdecompressor": 481, "101317": 481, "101326": 481, "futureit": 481, "92123": 481, "100795": 481, "freeaddrinfo": 481, "brester": 481, "101143": 481, "_add_callback": 481, "101144": 481, "supplimentari": 481, "101015": 481, "100573": 481, "39615": 481, "100750": 481, "96290": 481, "99952": 481, "undercount": 481, "67790": 481, "99266": 481, "86682": 481, "60580": 481, "38941": 481, "40077": 481, "29847": 481, "77772": 481, "hoelzl": 481, "88324": 481, "reword": 481, "101334": 481, "test_tarfil": 481, "configr": 481, "depreact": 481, "101522": 481, "77532": 481, "platformtoolset": 481, "clangcl": 481, "101152": 481, "100340": 481, "wno": 481, "101060": 481, "98705": 481, "98636": 481, "gdbm_compat": 481, "_gdbm": 481, "96305": 481, "_aix_support": 481, "_bootsubprocess": 481, "101543": 481, "101467": 481, "101135": 481, "82052": 481, "32k": 481, "100320": 481, "100247": 481, "100776": 481, "__text_signature__": 481, "unary_posit": 481, "list_to_tupl": 481, "import_star": 481, "print_expr": 481, "stopiteration_error": 481, "100288": 481, "load_attr_method_with_dict": 481, "100720": 481, "_pyframe_numslotsforcodeobject": 481, "co_nplaincellvar": 481, "100637": 481, "100649": 481, "native_thread_id": 481, "100126": 481, "torn": 481, "87447": 481, "100268": 481, "100374": 481, "socular": 481, "100357": 481, "100117": 481, "90043": 481, "100222": 481, "_py_codeunit": 481, "pun": 481, "99955": 481, "100188": 481, "binary_subscr_list_int": 481, "binary_subscr_tuple_int": 481, "99110": 481, "pyframe_new": 481, "94155": 481, "99540": 481, "100143": 481, "xpystat": 481, "100146": 481, "_pylist_fromarrayst": 481, "100110": 481, "100050": 481, "92216": 481, "99582": 481, "_bootstrap_python": 481, "99554": 481, "98522": 481, "94603": 481, "89051": 481, "32782": 481, "100833": 481, "100805": 481, "100813": 481, "100792": 481, "91851": 481, "microoptim": 481, "90104": 481, "100689": 481, "pyexpat_capi": 481, "100740": 481, "91219": 481, "100690": 481, "called_onc": 481, "86508": 481, "shim": 481, "100585": 481, "100562": 481, "100519": 481, "eff_request_host": 481, "100287": 481, "100488": 481, "100474": 481, "100363": 481, "78878": 481, "cfield": 481, "100348": 481, "_read_ready_cb": 481, "100272": 481, "83076": 481, "100228": 481, "100039": 481, "100133": 481, "44592": 481, "100098": 481, "85432": 481, "98778": 481, "99925": 481, "94943": 481, "83035": 481, "99576": 481, "94912": 481, "99509": 481, "99433": 481, "85267": 481, "__text_signatur": 481, "98030": 481, "88500": 481, "96127": 481, "95882": 481, "78707": 481, "92122": 481, "24132": 481, "40447": 481, "36880": 481, "100616": 481, "100472": 481, "25377": 481, "100454": 481, "100086": 481, "libregrtest": 481, "93018": 481, "100540": 481, "dusing_apple_os_libffi": 481, "88267": 481, "41916": 481, "ac_cv_cxx_thread": 481, "100180": 481, "99191": 481, "_msvc_lang": 481, "202002l": 481, "_msc_ver": 481, "1929": 481, "_wmimodul": 481, "79218": 481, "ms_win64": 481, "w64": 481, "99941": 481, "43984": 481, "34816": 481, "100342": 481, "99947": 481, "99240": 481, "100001": 481, "87604": 481, "99891": 481, "99729": 481, "99708": 481, "99578": 481, "create_builtin": 481, "99581": 481, "caract": 481, "99553": 481, "99370": 481, "99377": 481, "98686": 481, "binary_op_gener": 481, "compare_op_gener": 481, "99298": 481, "91053": 481, "90994": 481, "45026": 481, "31718": 481, "38031": 481, "xhh": 481, "ambigui": 481, "51524": 481, "99645": 481, "99508": 481, "_bootstrap_extern": 481, "66285": 481, "wakeupfd": 481, "97001": 481, "92647": 481, "99341": 481, "99382": 481, "99379": 481, "99344": 481, "99284": 481, "untest": 481, "99201": 481, "have_dynamic_load": 481, "str_convert": 481, "post_pars": 481, "64490": 481, "99029": 481, "nake": 481, "98253": 481, "resili": 481, "exacerb": 481, "98458": 481, "93453": 481, "basedefaulteventlooppolici": 481, "97966": 481, "uname_result": 481, "98248": 481, "98108": 481, "98098": 481, "82836": 481, "96828": 481, "ktls": 481, "88863": 481, "91078": 481, "47220": 481, "ogam": 481, "44817": 481, "error_bad_netpath": 481, "error_network_access_deni": 481, "161": 481, "error_bad_pathnam": 481, "41260": 481, "15999": 481, "99931": 481, "sphinxext": 481, "opengraph": 481, "89682": 481, "88330": 481, "92892": 481, "41825": 481, "99892": 481, "test_norm": 481, "test_unicodedata": 481, "normalizationtest": 481, "pythontest": 481, "99934": 481, "test_marsh": 481, "test_determinist": 481, "99741": 481, "630": 481, "_xxsubinterpret": 481, "99659": 481, "test_sqlite3": 481, "99593": 481, "96002": 481, "99086": 481, "wimplicit": 481, "99337": 481, "98872": 481, "88226": 481, "target_": 481, "use_computed_goto": 481, "99345": 481, "98629": 481, "99442": 481, "40882": 481, "87235": 481, "98940": 481, "_pyarg_unpackkeywordswithvararg": 481, "noptarg": 481, "98680": 481, "pybuf_": 481, "99612": 481, "98433": 481, "5894": 481, "98739": 481, "81057": 481, "99254": 481, "99205": 481, "99181": 481, "99204": 481, "96055": 481, "99153": 481, "unquicken": 481, "extended_arg_quick": 481, "warmup": 481, "99103": 481, "96793": 481, "98852": 481, "98925": 481, "98783": 481, "98811": 481, "imped": 481, "98762": 481, "unbox": 481, "99257": 481, "96421": 481, "frame_owned_by_cstack": 481, "98415": 481, "chaim": 481, "sander": 481, "92119": 481, "90716": 481, "_pylong": 481, "asymptot": 481, "longobject": 481, "95389": 481, "noam": 481, "cohen": 481, "93696": 481, "99418": 481, "99305": 481, "74044": 481, "99275": 481, "__initsubclass__": 481, "99277": 481, "_sslprotocoltransport": 481, "sslproto": 481, "99248": 481, "99155": 481, "93464": 481, "99134": 481, "98999": 481, "83004": 481, "_zoneinfo": 481, "98897": 481, "98878": 481, "98139": 481, "90352": 481, "_selectordatagramtransport": 481, "98793": 481, "wsaconnect": 481, "wsasendto": 481, "98744": 481, "98740": 481, "98703": 481, "98624": 481, "98284": 481, "96151": 481, "98086": 481, "72719": 481, "96192": 481, "92452": 481, "91803": 481, "38523": 481, "40358": 481, "36267": 481, "98832": 481, "98903": 481, "98713": 481, "87390": 481, "96853": 481, "34272": 481, "pthread_scope_system": 481, "99016": 481, "97731": 481, "docclean": 481, "98949": 481, "98989": 481, "98831": 481, "cases_gener": 481, "generated_cas": 481, "98817": 481, "pyproj": 481, "98776": 481, "levenshtein": 481, "98707": 481, "98689": 481, "37434": 481, "inflategethead": 481, "98790": 481, "98745": 481, "98692": 481, "94328": 481, "98978": 481, "benedikt": 481, "reinartz": 481, "98410": 481, "98610": 481, "_py_newinterpreterfromconfig": 481, "98608": 481, "_pyinterpreterconfig": 481, "_py_newinterpret": 481, "isolated_subinterpret": 481, "97616": 481, "limor": 481, "97514": 481, "escal": 481, "42919": 481, "87389": 481, "hamza": 481, "avvan": 481, "79096": 481, "92888": 481, "98374": 481, "98461": 481, "98354": 481, "98398": 481, "98390": 481, "97997": 481, "97973": 481, "96078": 481, "97955": 481, "97912": 481, "97002": 481, "97943": 481, "erad": 481, "86298": 481, "97779": 481, "97752": 481, "97591": 481, "97670": 481, "getdxp": 481, "analyze_dxp": 481, "dxp": 481, "dynamic_execution_profil": 481, "dxpair": 481, "94526": 481, "96975": 481, "96848": 481, "95921": 481, "_testcapimodul": 481, "95778": 481, "96387": 481, "mingliang": 481, "96864": 481, "96678": 481, "96754": 481, "96751": 481, "64373": 481, "96641": 481, "keywrapp": 481, "96636": 481, "setrac": 481, "96572": 481, "96611": 481, "96612": 481, "90230": 481, "96587": 481, "96569": 481, "behavoir": 481, "96582": 481, "_pythread_currentfram": 481, "91079": 481, "93911": 481, "96348": 481, "95196": 481, "96364": 481, "96352": 481, "93554": 481, "fallthrough": 481, "backward_target": 481, "next_block": 481, "pop_jump_forward_if_tru": 481, "pop_jump_backward_if_tru": 481, "pop_jump_forward_if_fals": 481, "pop_jump_backward_if_fals": 481, "pop_jump_forward_if_non": 481, "pop_jump_backward_if_non": 481, "pop_jump_forward_if_not_non": 481, "pop_jump_backward_if_not_non": 481, "96268": 481, "96237": 481, "f_func": 481, "f_funcobj": 481, "96187": 481, "96143": 481, "96071": 481, "96046": 481, "ht_cached_key": 481, "96005": 481, "pyenv": 481, "93678": 481, "_testinternalcapi": 481, "optimize_cfg": 481, "cfgoptimizationtestcas": 481, "95245": 481, "weakreflist": 481, "95977": 481, "91210": 481, "95922": 481, "eliminate_empty_basic_block": 481, "95818": 481, "95876": 481, "_pypegen_raise_error_known_loc": 481, "95605": 481, "95150": 481, "dedupl": 481, "91146": 481, "87092": 481, "codegen": 481, "95355": 481, "_pypegen_parser_new": 481, "honglin": 481, "zhu": 481, "90081": 481, "slowdown": 481, "95324": 481, "cfg_builder": 481, "95185": 481, "absurd": 481, "95060": 481, "addrq": 481, "95113": 481, "91409": 481, "95023": 481, "94036": 481, "94938": 481, "94996": 481, "94739": 481, "94949": 481, "94947": 481, "91256": 481, "94869": 481, "94893": 481, "94822": 481, "91153": 481, "90699": 481, "94694": 481, "93252": 481, "94215": 481, "92228": 481, "94485": 481, "91719": 481, "94329": 481, "1000s": 481, "94360": 481, "int_min": 481, "94262": 481, "94192": 481, "93883": 481, "94021": 481, "93955": 481, "93841": 481, "_stats_on": 481, "_stats_off": 481, "_stats_clear": 481, "_stats_dump": 481, "93516": 481, "traceabl": 481, "89828": 481, "93671": 481, "93662": 481, "93461": 481, "93621": 481, "93533": 481, "93444": 481, "basicblock": 481, "b_nofallthrough": 481, "b_exit": 481, "b_return": 481, "93418": 481, "93382": 481, "93359": 481, "93356": 481, "93354": 481, "93283": 481, "93345": 481, "93223": 481, "84694": 481, "91924": 481, "93040": 481, "93061": 481, "93065": 481, "hamt": 481, "libman": 481, "93021": 481, "89914": 481, "92955": 481, "92930": 481, "90690": 481, "92914": 481, "92858": 481, "92804": 481, "92777": 481, "92658": 481, "92236": 481, "91102": 481, "92619": 481, "88750": 481, "92261": 481, "91432": 481, "91399": 481, "unicodetype_db": 481, "91578": 481, "47091": 481, "42316": 481, "89237": 481, "97928": 481, "98331": 481, "98307": 481, "96035": 481, "98257": 481, "98251": 481, "98178": 481, "44098": 481, "87730": 481, "98023": 481, "90985": 481, "harsh": 481, "undeprec": 481, "97646": 481, "9239": 481, "97837": 481, "97825": 481, "97008": 481, "82711": 481, "friedrich": 481, "bolz": 481, "tereick": 481, "97799": 481, "97781": 481, "mutablil": 481, "96827": 481, "95534": 481, "97592": 481, "97639": 481, "97545": 481, "73588": 481, "96865": 481, "97005": 481, "85760": 481, "96704": 481, "96819": 481, "resource_track": 481, "95865": 481, "96741": 481, "96735": 481, "46412": 481, "ndb": 481, "96652": 481, "68163": 481, "96538": 481, "96465": 481, "96079": 481, "_annotatedalia": 481, "96415": 481, "_cell_factori": 481, "95987": 481, "96388": 481, "96385": 481, "__typing_prepare_subst__": 481, "96142": 481, "_dataclassparam": 481, "96073": 481, "overeag": 481, "89258": 481, "96346": 481, "96349": 481, "90467": 481, "96172": 481, "96159": 481, "96175": 481, "96052": 481, "96125": 481, "96019": 481, "makeunicodedata": 481, "95463": 481, "69142": 481, "tzoffset": 481, "95899": 481, "95736": 481, "95804": 481, "95704": 481, "95149": 481, "95609": 481, "95289": 481, "manger": 481, "94909": 481, "95385": 481, "83901": 481, "95339": 481, "95045": 481, "95231": 481, "95097": 481, "95087": 481, "95199": 481, "95194": 481, "93899": 481, "95166": 481, "95132": 481, "11a1": 481, "24421": 481, "85128": 481, "93157": 481, "91212": 481, "shin": 481, "myoung": 481, "serp": 481, "95077": 481, "95109": 481, "95105": 481, "95066": 481, "95005": 481, "_pyaccu": 481, "_pyunicodewrit": 481, "90085": 481, "94857": 481, "94821": 481, "94736": 481, "_multiprocess": 481, "74116": 481, "87822": 481, "priorit": 481, "88050": 481, "94637": 481, "ssl_ctx_set_default_verify_path": 481, "92546": 481, "94607": 481, "94619": 481, "93896": 481, "94343": 481, "94382": 481, "78724": 481, "94510": 481, "92336": 481, "94398": 481, "94318": 481, "89988": 481, "94254": 481, "93259": 481, "from_nam": 481, "93096": 481, "test_codec": 481, "encodedfiletest": 481, "94207": 481, "_struct": 481, "test_base64": 481, "legacybase64testcas": 481, "test_encodebyt": 481, "94214": 481, "94182": 481, "91742": 481, "94101": 481, "84753": 481, "mehdi": 481, "abaakouk": 481, "94028": 481, "27884": 481, "93973": 481, "93858": 481, "93820": 481, "93847": 481, "83499": 481, "79512": 481, "91389": 481, "93626": 481, "90494": 481, "90549": 481, "93521": 481, "79579": 481, "93421": 481, "93475": 481, "93370": 481, "91810": 481, "91162": 481, "93353": 481, "83658": 481, "88123": 481, "93297": 481, "gced": 481, "85308": 481, "93156": 481, "92886": 481, "90155": 481, "91513": 481, "93033": 481, "0x0100": 481, "0x00010000": 481, "89973": 481, "93044": 481, "93010": 481, "invalidheadererror": 481, "invalidheaderdefect": 481, "92986": 481, "92932": 481, "92675": 481, "87901": 481, "11b1": 481, "91922": 481, "92869": 481, "92839": 481, "92734": 481, "92671": 481, "91581": 481, "92550": 481, "92591": 481, "92445": 481, "92547": 481, "92530": 481, "92531": 481, "84131": 481, "92391": 481, "mueller": 481, "91968": 481, "81790": 481, "90622": 481, "91577": 481, "91539": 481, "getproxies_environ": 481, "91447": 481, "91456": 481, "47231": 481, "39064": 481, "41287": 481, "32547": 481, "35540": 481, "47063": 481, "47025": 481, "46951": 481, "42777": 481, "46755": 481, "45393": 481, "46642": 481, "46364": 481, "28249": 481, "46197": 481, "45924": 481, "44173": 481, "42627": 481, "42047": 481, "dragonfli": 481, "carlier": 481, "14243": 481, "41246": 481, "iocpproactor": 481, "39264": 481, "38693": 481, "38267": 481, "34828": 481, "32990": 481, "26253": 481, "85525": 481, "86404": 481, "spinx": 481, "97741": 481, "96432": 481, "96098": 481, "95957": 481, "95588": 481, "unfix": 481, "91207": 481, "chm": 481, "htmlhelp": 481, "95454": 481, "documenti": 481, "shea": 481, "95451": 481, "95415": 481, "94321": 481, "86128": 481, "61162": 481, "87260": 481, "86986": 481, "88831": 481, "86438": 481, "93031": 481, "92240": 481, "47161": 481, "40838": 481, "43689": 481, "38056": 481, "overhaul": 481, "13553": 481, "95027": 481, "96624": 481, "test_dotted_but_module_not_load": 481, "95243": 481, "testsocknam": 481, "burton": 481, "95573": 481, "test_ssl": 481, "fb11063974": 481, "fantix": 481, "95280": 481, "test_get_ciph": 481, "pfs": 481, "95212": 481, "test_shared_memory_recr": 481, "95218": 481, "94675": 481, "exponent": 481, "rjsmin": 481, "91330": 481, "94208": 481, "94315": 481, "dac": 481, "54781": 481, "test_tk": 481, "test_tkint": 481, "test_ttk_guion": 481, "test_ttk": 481, "93839": 481, "test_ctyp": 481, "93951": 481, "test_bdb": 481, "statetestcas": 481, "test_skip": 481, "93957": 481, "test_venv": 481, "ensurepiptest": 481, "test_with_pip": 481, "93884": 481, "93852": 481, "test_socketserv": 481, "run_test": 481, "hostrunn": 481, "93616": 481, "test_modulefind": 481, "modulefindertest": 481, "93575": 481, "test_unicod": 481, "test_raisememerror": 481, "57539": 481, "openat2": 481, "resolve_beneath": 481, "89858": 481, "test_emb": 481, "test_zipimport": 481, "test_py_compil": 481, "_test_multiprocess": 481, "92670": 481, "testcopi": 481, "test_copyfile_nonexistent_dir": 481, "92514": 481, "basictestrunn": 481, "47016": 481, "96761": 481, "96883": 481, "85936": 481, "96729": 481, "buildreleas": 481, "96269": 481, "module_dep": 481, "exportsym": 481, "95973": 481, "dsymutil": 481, "93744": 481, "maincc": 481, "94801": 481, "94802": 481, "95145": 481, "wasix": 481, "95174": 481, "netdb": 481, "94847": 481, "94841": 481, "1932": 481, "zlib_cflag": 481, "zlib_lib": 481, "94773": 481, "94682": 481, "1q": 481, "termcap": 481, "tinfo": 481, "_dbm": 481, "94404": 481, "94280": 481, "pegen": 481, "93584": 481, "93491": 481, "69093": 481, "_sqlite3": 481, "93202": 481, "34449": 481, "osipov": 481, "98360": 481, "98414": 481, "97728": 481, "90989": 481, "97649": 481, "96965": 481, "96577": 481, "96559": 481, "94781": 481, "89545": 481, "wmi": 481, "95733": 481, "95656": 481, "95587": 481, "94399": 481, "95445": 481, "95359": 481, "95285": 481, "90844": 481, "94772": 481, "94018": 481, "93824": 481, "43414": 481, "92817": 481, "92984": 481, "92841": 481, "46907": 481, "91061": 481, "42658": 481, "38704": 481, "97897": 481, "97527": 481, "2288": 481, "65802": 481, "95511": 481, "95471": 481, "95411": 481, "89610": 481, "68686": 481, "ptag": 481, "eptag": 481, "95853": 481, "wasm_build": 481, "emsdk": 481, "95731": 481, "check_modul": 481, "94538": 481, "94430": 481, "86087": 481, "parseent": 481, "95756": 481, "96512": 481, "92678": 481, "94930": 481, "94731": 481, "wold": 481, "wzero": 481, "91321": 481, "91731": 481, "89546": 481, "93442": 481, "_py_cast_impl": 481, "_py_cast": 481, "93466": 481, "92898": 481, "serg": 481, "guelton": 481, "93103": 481, "92913": 481, "92781": 481, "c90": 481, "92193": 481, "59121": 481, "45383": 481, "92345": 481, "43857": 481, "92245": 481, "11a7": 481, "92203": 481, "91173": 481, "92114": 481, "92112": 481, "92063": 481, "precall_method_descriptor_fast_with_keyword": 481, "92031": 481, "_pycode_quicken": 481, "92036": 481, "92032": 481, "91869": 481, "91603": 481, "89373": 481, "91632": 481, "generic_alias_iter": 481, "encodingmap": 481, "91636": 481, "91625": 481, "78607": 481, "lltrace": 481, "__ltrace__": 481, "91576": 481, "89279": 481, "91502": 481, "_pyframe_isentryfram": 481, "91266": 481, "91479": 481, "__note__": 481, "46055": 481, "xinhang": 481, "91462": 481, "91421": 481, "_py_decodeutf8ex": 481, "91428": 481, "_pyopcode_opnam": 481, "47120": 481, "45317": 481, "47197": 481, "mishandl": 481, "47177": 481, "prev_instr": 481, "46961": 481, "46962": 481, "testcapi": 481, "recursinginfinitelyerror": 481, "46942": 481, "46764": 481, "43464": 481, "46721": 481, "46509": 481, "chase": 481, "46045": 481, "36819": 481, "34093": 481, "flag_ref": 481, "92356": 481, "92301": 481, "close_rang": 481, "67248": 481, "92210": 481, "cinder": 481, "92118": 481, "90887": 481, "copyfile_stat": 481, "copyfile_acl": 481, "copyfile_xattr": 481, "91215": 481, "92128": 481, "92049": 481, "92062": 481, "88089": 481, "91996": 481, "91984": 481, "test_argpars": 481, "91952": 481, "91954": 481, "47029": 481, "91928": 481, "91401": 481, "64783": 481, "sigrtmin": 481, "sigrtmax": 481, "91910": 481, "91832": 481, "91821": 481, "test_from_tupl": 481, "test_decim": 481, "91217": 481, "90623": 481, "91734": 481, "91700": 481, "91231": 481, "91621": 481, "90568": 481, "91670": 481, "91616": 481, "47256": 481, "823": 481, "91595": 481, "write_repr": 481, "yu": 481, "liu": 481, "74166": 481, "91575": 481, "89022": 481, "sqlite_misus": 481, "91526": 481, "91276": 481, "47000": 481, "91230": 481, "47260": 481, "seccomp": 481, "47227": 481, "47211": 481, "47135": 481, "43323": 481, "46681": 481, "45100": 481, "44807": 481, "46787": 481, "46720": 481, "par": 481, "46696": 481, "46053": 481, "45639": 481, "avif": 481, "46285": 481, "44791": 481, "46547": 481, "46415": 481, "46075": 481, "45995": 481, "26175": 481, "45138": 481, "40318": 481, "44863": 481, "44587": 481, "43827": 481, "43218": 481, "rodrigu": 481, "38435": 481, "42066": 481, "iman": 481, "kermani": 481, "40617": 481, "40676": 481, "39716": 481, "36073": 481, "kawashima": 481, "91888": 481, "91783": 481, "91547": 481, "91298": 481, "44347": 481, "36329": 481, "htmlview": 481, "47189": 481, "38668": 481, "47115": 481, "26792": 481, "brezovski": 481, "92169": 481, "import_deprec": 481, "91904": 481, "pythonregrtest_unicode_guard": 481, "91752": 481, "testfreez": 481, "91607": 481, "40280": 481, "47109": 481, "macholib": 481, "29890": 481, "louisom": 481, "89452": 481, "47103": 481, "pginstrument": 481, "47239": 481, "46785": 481, "win32_xstat_impl": 481, "40859": 481, "91583": 481, "generate_re_casefix": 481, "91551": 481, "gitlab": 481, "91320": 481, "reinterpret_cast": 481, "static_cast": 481, "80527": 481, "91768": 481, "91020": 481, "47169": 481, "47212": 481, "matthieu": 481, "dartiailh": 481, "47186": 481, "jump_if_not_eg_match": 481, "47176": 481, "py_emscriptensignalbuff": 481, "sharedarraybuff": 481, "py_emscripten_signal_handl": 481, "47182": 481, "47162": 481, "py_call_trampolin": 481, "46775": 481, "47129": 481, "47117": 481, "47127": 481, "42197": 481, "47070": 481, "array_inplace_repeat": 481, "unicodeobject": 481, "_pybytes_repeat": 481, "47053": 481, "binary_op_inplace_add_unicod": 481, "47045": 481, "46968": 481, "auxv": 481, "46329": 481, "47012": 481, "47009": 481, "47005": 481, "bytearray_repeat": 481, "bytearray_irepeat": 481, "46829": 481, "46993": 481, "39829": 481, "46944": 481, "46881": 481, "46838": 481, "43721": 481, "47208": 481, "ctypes_max_argcount": 481, "23689": 481, "47167": 481, "47151": 481, "4833": 481, "27929": 481, "14265": 481, "39622": 481, "47101": 481, "ossl": 481, "47099": 481, "open_ftp": 481, "42885": 481, "23691": 481, "47067": 481, "42369": 481, "_sharedfil": 481, "38256": 481, "4gib": 481, "odditi": 481, "39394": 481, "47062": 481, "46382": 481, "ari": 481, "bovenberg": 481, "47057": 481, "fastcal": 481, "47039": 481, "2604": 481, "45150": 481, "34861": 481, "45997": 481, "aquir": 481, "43253": 481, "fdset": 481, "47004": 481, "46998": 481, "46995": 481, "46994": 481, "46981": 481, "46985": 481, "getauxv": 481, "at_minsigstksz": 481, "amx_til": 481, "sapphir": 481, "xeon": 481, "isa": 481, "46955": 481, "zabka": 481, "23325": 481, "46932": 481, "46933": 481, "464471": 481, "tvrtkovi": 481, "46644": 481, "typeform": 481, "46581": 481, "46557": 481, "41370": 481, "26120": 481, "46480": 481, "46421": 481, "22859": 481, "46170": 481, "40296": 481, "20392": 481, "46030": 481, "44439": 481, "45171": 481, "24959": 481, "44859": 481, "44493": 481, "sockaddr_un": 481, "33178": 481, "43352": 481, "45099": 481, "47126": 481, "676": 481, "47040": 481, "compatibl": 481, "46033": 481, "45790": 481, "42340": 481, "41233": 481, "yyyyyyyan": 481, "orest": 481, "47205": 481, "46126": 481, "47104": 481, "47037": 481, "4y": 481, "46587": 481, "47015": 481, "main_modul": 481, "side_modul": 481, "46023": 481, "wasm64": 481, "47032": 481, "47024": 481, "1n": 481, "46973": 481, "45774": 481, "47194": 481, "25032": 481, "47171": 481, "46566": 481, "47086": 481, "44549": 481, "3189": 481, "12900": 481, "46948": 481, "26488": 481, "46890": 481, "46850": 481, "_pyeval_calltrac": 481, "_pyeval_getcoroutineorigintrackingdepth": 481, "_pyeval_getasyncgenfirstit": 481, "_pyeval_getasyncgenfin": 481, "_pyeval_setasyncgenfirstit": 481, "_pyeval_setasyncgenfin": 481, "46987": 481, "_pysys_getobjectid": 481, "_pysys_setobjectid": 481, "46940": 481, "46927": 481, "46921": 481, "46903": 481, "11alpha": 481, "46891": 481, "test_float": 481, "46712": 481, "46430": 481, "45107": 481, "44337": 481, "46729": 481, "45885": 481, "46794": 481, "46823": 481, "load_fast__load_attr_instance_valu": 481, "46820": 481, "1not": 481, "46808": 481, "precall_funct": 481, "precall_method": 481, "46762": 481, "46730": 481, "46724": 481, "46732": 481, "46072": 481, "46707": 481, "46323": 481, "45923": 481, "46702": 481, "46675": 481, "va_end": 481, "_hashopenssl": 481, "46615": 481, "setobject": 481, "30496": 481, "25707": 481, "46877": 481, "46848": 481, "46736": 481, "44886": 481, "46827": 481, "46811": 481, "46252": 481, "46784": 481, "46786": 481, "wbr": 481, "39327": 481, "virtualbox": 481, "45390": 481, "46756": 481, "46737": 481, "46752": 481, "trio": 481, "nurseri": 481, "46333": 481, "46643": 481, "45863": 481, "unarchiv": 481, "46066": 481, "46676": 481, "_argtypes_": 481, "46672": 481, "46655": 481, "45948": 481, "discrep": 481, "46626": 481, "ip_bind_address_no_port": 481, "46521": 481, "46571": 481, "46400": 481, "46556": 481, "46522": 481, "46475": 481, "46246": 481, "deprecatedlist": 481, "46232": 481, "46195": 481, "31369": 481, "45898": 481, "ffi_type_": 481, "decad": 481, "44953": 481, "44289": 481, "44011": 481, "41086": 481, "methodwrapp": 481, "14156": 481, "42238": 481, "46913": 481, "test_faulthandl": 481, "test_sigfp": 481, "faulthandler_sigfp": 481, "46760": 481, "test_di": 481, "46708": 481, "46678": 481, "46623": 481, "test_pair": 481, "test_speech128": 481, "test_zlib": 481, "s390x": 481, "46860": 481, "__builtin_nan": 481, "kb": 481, "setr": 481, "gu": 481, "cound": 481, "46744": 481, "46567": 481, "46638": 481, "46630": 481, "46748": 481, "stdbool": 481, "46836": 481, "pycore_fram": 481, "pybuff": 481, "conflit": 481, "accesss": 481, "45773": 481, "46564": 481, "46458": 481, "46527": 481, "46528": 481, "precall_funt": 481, "46503": 481, "46431": 481, "46476": 481, "46481": 481, "46417": 481, "add_subclass": 481, "43683": 481, "46407": 481, "vivian": 481, "46409": 481, "46406": 481, "46383": 481, "module_fre": 481, "46361": 481, "46161": 481, "46028": 481, "46091": 481, "44024": 481, "46624": 481, "46591": 481, "clickabl": 481, "46565": 481, "46553": 481, "46544": 481, "uspac": 481, "46487": 481, "45162": 481, "46539": 481, "46510": 481, "46491": 481, "46436": 481, "41403": 481, "46474": 481, "46470": 481, "_remove_dups_flatten": 481, "46469": 481, "41906": 481, "46422": 481, "46434": 481, "43869": 481, "46414": 481, "46316": 481, "29688": 481, "43012": 481, "_accessor": 481, "terrain": 481, "46258": 481, "46242": 481, "_member_names_": 481, "43118": 481, "26552": 481, "21987": 481, "46124": 481, "46103": 481, "46080": 481, "felix": 481, "fontein": 481, "46463": 481, "escape4chm": 481, "43478": 481, "46616": 481, "test_window": 481, "44359": 481, "test_ftplib": 481, "46600": 481, "test_pycfunct": 481, "46542": 481, "test_lib2to3": 481, "46576": 481, "test_peg_gener": 481, "test_json": 481, "infinite_recurs": 481, "13886": 481, "test_builtin": 481, "requires_fork": 481, "requires_subprocess": 481, "46602": 481, "conftest": 481, "38472": 481, "46513": 481, "ac_c_char_unsign": 481, "__char_unsigned__": 481, "46471": 481, "46443": 481, "46429": 481, "45925": 481, "43112": 481, "46362": 481, "com1": 481, "lpt1": 481, "45296": 481, "_py_getallocatedblock": 481, "_pyobject_debugmallocstat": 481, "46433": 481, "_pytype_getmodulebydef": 481, "14916": 481, "46070": 481, "46347": 481, "46339": 481, "46331": 481, "46314": 481, "11a4": 481, "46289": 481, "46297": 481, "bootup": 481, "derzsi": 481, "niel": 481, "46237": 481, "46263": 481, "use_frozen_modul": 481, "46006": 481, "_pyunicode_equaltoasciiid": 481, "update_slot": 481, "46208": 481, "46240": 481, "46009": 481, "46235": 481, "46221": 481, "46202": 481, "pop_except_and_rerais": 481, "46085": 481, "pylong_bas": 481, "46110": 481, "46107": 481, "44525": 481, "call_method_kw": 481, "call_no_kw": 481, "call_kw": 481, "46039": 481, "45635": 481, "_pyerr_display": 481, "46054": 481, "46042": 481, "46049": 481, "46048": 481, "37971": 481, "46031": 481, "45654": 481, "46025": 481, "46000": 481, "42918": 481, "45953": 481, "43413": 481, "46342": 481, "46307": 481, "46306": 481, "46244": 481, "46278": 481, "call_": 481, "46269": 481, "46266": 481, "46257": 481, "41011": 481, "46239": 481, "46238": 481, "46222": 481, "46176": 481, "43424": 481, "45321": 481, "46125": 481, "46118": 481, "37578": 481, "20369": 481, "46105": 481, "44893": 481, "22815": 481, "22047": 481, "26952": 481, "45615": 481, "16594": 481, "allow_reuse_port": 481, "27718": 481, "46032": 481, "27062": 481, "46018": 481, "46016": 481, "45755": 481, "45874": 481, "25066": 481, "45643": 481, "46196": 481, "46120": 481, "46109": 481, "19737": 481, "46296": 481, "_use_args_": 481, "_member_type_": 481, "46205": 481, "runtest_mp": 481, "jemalloc": 481, "46262": 481, "46150": 481, "fakenam": 481, "posixpathtest": 481, "test_expandus": 481, "46129": 481, "23819": 481, "46114": 481, "0xmnn00pp0l": 481, "44133": 481, "46315": 481, "have_featur": 481, "45723": 481, "multiarch": 481, "46106": 481, "1m": 481, "46088": 481, "asset": 481, "45949": 481, "freeze_modul": 481, "46217": 481, "40477": 481, "46236": 481, "46140": 481, "45855": 481, "46004": 481, "_pyerr_chainstackitem": 481, "45915": 481, "is_valid_fd": 481, "f_getfd": 481, "44530": 481, "42268": 481, "45727": 481, "45786": 481, "45614": 481, "45813": 481, "45811": 481, "45848": 481, "45709": 481, "45829": 481, "45826": 481, "45822": 481, "45820": 481, "45636": 481, "42540": 481, "45738": 481, "45753": 481, "45764": 481, "45609": 481, "45582": 481, "45450": 481, "27946": 481, "13236": 481, "37658": 481, "45876": 481, "44649": 481, "45803": 481, "45831": 481, "41735": 481, "45235": 481, "45754": 481, "11a2": 481, "sqlite_limit_length": 481, "45766": 481, "45765": 481, "45757": 481, "45644": 481, "wessel": 481, "45703": 481, "45535": 481, "45664": 481, "45663": 481, "45662": 481, "43137": 481, "gio": 481, "45514": 481, "45507": 481, "45359": 481, "44733": 481, "28806": 481, "43498": 481, "42158": 481, "notation3": 481, "trig": 481, "45840": 481, "45640": 481, "milchior": 481, "45788": 481, "45772": 481, "45392": 481, "45250": 481, "25381": 481, "43905": 481, "45695": 481, "19460": 481, "45835": 481, "test_queu": 481, "45783": 481, "45745": 481, "findleak": 481, "45701": 481, "test_functool": 481, "44035": 481, "45950": 481, "45881": 481, "sys_shutdown": 481, "ac_cv_func_shutdown": 481, "fork1": 481, "33393": 481, "45866": 481, "pygen": 481, "41498": 481, "sigset_t": 481, "yurchak": 481, "45886": 481, "45873": 481, "py_stdlib_mod": 481, "addext": 481, "save_env": 481, "restore_env": 481, "with_save_env": 481, "45573": 481, "45816": 481, "v143": 481, "45800": 481, "45798": 481, "45743": 481, "search_paths_first": 481, "xcode": 481, "stdc_header": 481, "ac_header_tim": 481, "45731": 481, "py_sqlite_enable_load_extens": 481, "ac_cache_check": 481, "45696": 481, "45561": 481, "smelli": 481, "45901": 481, "45616": 481, "45850": 481, "45732": 481, "45720": 481, "shlwapi": 481, "39026": 481, "45716": 481, "45688": 481, "_scproxi": 481, "45379": 481, "keyowrd": 481, "45530": 481, "45526": 481, "address_bit": 481, "30570": 481, "45521": 481, "45494": 481, "45445": 481, "45408": 481, "45385": 481, "descr_check": 481, "45367": 481, "binary_multiply_int": 481, "binary_multiply_float": 481, "21736": 481, "unfrozen": 481, "45020": 481, "orignam": 481, "45324": 481, "44050": 481, "call_function_builtin_o": 481, "call_function_builtin_fast": 481, "call_function_len": 481, "call_function_isinst": 481, "44511": 481, "43706": 481, "42064": 481, "45438": 481, "45574": 481, "print_escap": 481, "45581": 481, "45557": 481, "kreusada": 481, "42174": 481, "35673": 481, "_namespaceload": 481, "45515": 481, "45475": 481, "43787": 481, "45489": 481, "42222": 481, "45428": 481, "45467": 481, "45461": 481, "45239": 481, "45417": 481, "45249": 481, "45416": 481, "20028": 481, "44904": 481, "45406": 481, "getabsfil": 481, "45411": 481, "subtitl": 481, "srt": 481, "vtt": 481, "10716": 481, "serverhtmldoc": 481, "27580": 481, "45262": 481, "45386": 481, "45343": 481, "45328": 481, "45192": 481, "_infer_return_typ": 481, "kyungmin": 481, "45160": 481, "24444": 481, "40321": 481, "7538": 481, "jochem": 481, "schulenklopp": 481, "41374": 481, "35970": 481, "kuska": 481, "45726": 481, "45680": 481, "45618": 481, "olko": 481, "45655": 481, "45604": 481, "45516": 481, "45464": 481, "45449": 481, "20692": 481, "45678": 481, "45578": 481, "45668": 481, "45577": 481, "45566": 481, "test_frozen_pickl": 481, "test_dataclass": 481, "43592": 481, "39679": 481, "45410": 481, "45402": 481, "test_sundri": 481, "45403": 481, "test_si": 481, "test_stdlib_dir": 481, "45400": 481, "test_name_error_suggestions_do_not_trigger_for_too_many_loc": 481, "10572": 481, "test_sqlit": 481, "43158": 481, "_uuid": 481, "libuuid": 481, "45666": 481, "swprintf": 481, "45595": 481, "have_expat_config_h": 481, "use_pyexpat_capi": 481, "xml_poor_entropi": 481, "expat_config": 481, "45532": 481, "jeong": 481, "yunwon": 481, "45536": 481, "45221": 481, "45405": 481, "bohman": 481, "43652": 481, "45337": 481, "43851": 481, "sqlite_omit_autoinit": 481, "44828": 481, "culler": 481, "45495": 481, "29103": 481, "interpreteridobject": 481, "45395": 481, "44220": 481, "42278": 481, "44600": 481, "burkland": 481, "41180": 481, "44394": 481, "0340": 481, "43124": 481, "putcmd": 481, "44022": 481, "45061": 481, "24076": 481, "45167": 481, "45155": 481, "44219": 481, "44959": 481, "45121": 481, "44348": 481, "45123": 481, "1514420": 481, "41031": 481, "45083": 481, "34561": 481, "munro": 481, "powersort": 481, "45056": 481, "45012": 481, "fstatat": 481, "stani": 481, "skonieczni": 481, "45018": 481, "44963": 481, "anext_await": 481, "44962": 481, "44954": 481, "8p": 481, "1074": 481, "44947": 481, "44945": 481, "binary_add_adapt": 481, "binary_add_float": 481, "binary_add_int": 481, "binary_add_unicod": 481, "binary_add_unicode_inplace_fast": 481, "44929": 481, "44914": 481, "44698": 481, "44895": 481, "44900": 481, "44889": 481, "load_method_cach": 481, "load_method_modul": 481, "load_method_class": 481, "44890": 481, "44885": 481, "44878": 481, "44874": 481, "44872": 481, "33930": 481, "augusto": 481, "goulart": 481, "25782": 481, "44856": 481, "update_bas": 481, "44826": 481, "store_attr_slot": 481, "store_attr_split_key": 481, "store_attr_with_hint": 481, "44838": 481, "44821": 481, "44792": 481, "34013": 481, "44732": 481, "44725": 481, "_opcod": 481, "get_specialization_stat": 481, "44717": 481, "44653": 481, "44676": 481, "44633": 481, "44661": 481, "property_descr_set": 481, "44662": 481, "44655": 481, "44646": 481, "44636": 481, "44635": 481, "26280": 481, "binary_subscr_dict": 481, "44589": 481, "44606": 481, "42073": 481, "fastsearch": 481, "43895": 481, "ish": 481, "dynload_shlib": 481, "levarag": 481, "44562": 481, "44553": 481, "44523": 481, "44483": 481, "44486": 481, "44472": 481, "ltrace": 481, "44297": 481, "44456": 481, "44409": 481, "44396": 481, "44376": 481, "44313": 481, "44338": 481, "load_global_modul": 481, "load_global_builtin": 481, "44368": 481, "44349": 481, "load_attr_slot": 481, "load_attr_split_key": 481, "load_attr_with_hint": 481, "load_attr_modul": 481, "44335": 481, "43693": 481, "44317": 481, "44304": 481, "43667": 481, "44232": 481, "winner": 481, "44201": 481, "co_fastlocalkind": 481, "44184": 481, "44187": 481, "44180": 481, "44168": 481, "44156": 481, "44143": 481, "44032": 481, "datastack": 481, "44114": 481, "dictkeys_revers": 481, "dictitems_revers": 481, "44110": 481, "branchless": 481, "43918": 481, "43879": 481, "17792": 481, "28146": 481, "11105": 481, "39091": 481, "noah": 481, "oxer": 481, "45371": 481, "unixccompil": 481, "45329": 481, "1596321": 481, "45274": 481, "45238": 481, "36674": 481, "45183": 481, "45234": 481, "45228": 481, "45225": 481, "genexpr": 481, "25169": 481, "20524": 481, "45168": 481, "35474": 481, "45166": 481, "20499": 481, "30856": 481, "45034": 481, "25894": 481, "45081": 481, "45075": 481, "format_fram": 481, "31299": 481, "41620": 481, "45021": 481, "43913": 481, "lesser": 481, "45030": 481, "45001": 481, "45010": 481, "__div__": 481, "39218": 481, "43613": 481, "37596": 481, "44955": 481, "39039": 481, "44935": 481, "44911": 481, "41322": 481, "44524": 481, "38956": 481, "44860": 481, "unicodencodeerror": 481, "44581": 481, "44849": 481, "44605": 481, "wherein": 481, "specialform": 481, "44839": 481, "44822": 481, "44801": 481, "44806": 481, "27275": 481, "44793": 481, "44784": 481, "44667": 481, "44771": 481, "44752": 481, "rcomplet": 481, "44747": 481, "44720": 481, "44704": 481, "44666": 481, "lzl": 481, "44690": 481, "binacii": 481, "42854": 481, "_sslsocket": 481, "44686": 481, "_import": 481, "44353": 481, "44682": 481, "44678": 481, "40897": 481, "44638": 481, "44648": 481, "44608": 481, "_flatten": 481, "44594": 481, "flight": 481, "42799": 481, "41928": 481, "44566": 481, "44558": 481, "41249": 481, "44554": 481, "34798": 481, "44539": 481, "44461": 481, "43625": 481, "44516": 481, "42892": 481, "44468": 481, "43977": 481, "44482": 481, "44404": 481, "41546": 481, "44458": 481, "buffer_block_s": 481, "lmza": 481, "44464": 481, "flake8": 481, "44446": 481, "44434": 481, "pthread_exit": 481, "libgcc_": 481, "42972": 481, "44422": 481, "37880": 481, "44389": 481, "27827": 481, "44395": 481, "34266": 481, "44362": 481, "44342": 481, "44356": 481, "44351": 481, "parse_makefil": 481, "44242": 481, "44246": 481, "43858": 481, "44260": 481, "44254": 481, "33693": 481, "44241": 481, "simplepath": 481, "44210": 481, "_meta": 481, "43643": 481, "27334": 481, "4928": 481, "44154": 481, "33433": 481, "44150": 481, "44142": 481, "44145": 481, "hmac_upd": 481, "44095": 481, "ds": 481, "congest": 481, "37788": 481, "44089": 481, "44081": 481, "44061": 481, "44059": 481, "serenityo": 481, "36515": 481, "44018": 481, "38352": 481, "44002": 481, "90s": 481, "43972": 481, "28528": 481, "checklin": 481, "43853": 481, "43666": 481, "wpar": 481, "fileset": 481, "bos": 481, "rte": 481, "mp64": 481, "odm": 481, "9988": 481, "43650": 481, "_unpack_zipfil": 481, "igor": 481, "bolshakov": 481, "43612": 481, "43392": 481, "_find_and_load": 481, "43318": 481, "43232": 481, "30077": 481, "sowt": 481, "42971": 481, "43086": 481, "scrict_mod": 481, "43024": 481, "42862": 481, "41818": 481, "40497": 481, "37449": 481, "40956": 481, "41730": 481, "20684": 481, "_signature_get_bound_param": 481, "41402": 481, "32695": 481, "24391": 481, "40563": 481, "henri": 481, "aud": 481, "oud": 481, "34990": 481, "y2k38": 481, "39549": 481, "37022": 481, "38840": 481, "test___all__": 481, "39359": 481, "38741": 481, "38415": 481, "30256": 481, "manager_own": 481, "autoproxi": 481, "27513": 481, "26228": 481, "33349": 481, "29298": 481, "45216": 481, "45024": 481, "44957": 481, "16580": 481, "44903": 481, "othergui": 481, "33479": 481, "36700": 481, "44740": 481, "44693": 481, "35183": 481, "30511": 481, "relianc": 481, "44561": 481, "44651": 481, "42958": 481, "44631": 481, "_environ": 481, "44613": 481, "44544": 481, "38062": 481, "40620": 481, "controlflow": 481, "43066": 481, "39452": 481, "broaden": 481, "13814": 481, "27752": 481, "44453": 481, "44392": 481, "44322": 481, "44195": 481, "traversableread": 481, "41963": 481, "44072": 481, "43558": 481, "44025": 481, "41706": 481, "41621": 481, "41576": 481, "21760": 481, "39498": 481, "40173": 481, "45280": 481, "45269": 481, "c_make_encod": 481, "45128": 481, "45209": 481, "_testsharedmemori": 481, "test_shared_memory_cleaned_after_process_termin": 481, "45185": 481, "testenumer": 481, "45195": 481, "test_readlin": 481, "test_nonascii": 481, "45156": 481, "45125": 481, "sharablelist": 481, "test_sysconfig": 481, "test_user_similar": 481, "45052": 481, "withprocessestestsharedmemori": 481, "test_shared_memory_bas": 481, "sms": 481, "sms2": 481, "unskip": 481, "45042": 481, "hashlib_help": 481, "requires_hashdigest": 481, "25130": 481, "45011": 481, "44949": 481, "44891": 481, "44852": 481, "wholesal": 481, "40928": 481, "spew": 481, "44734": 481, "44708": 481, "42095": 481, "interop": 481, "plutil": 481, "44647": 481, "44515": 481, "44287": 481, "test_popen": 481, "test_windows_util": 481, "militari": 481, "battl": 481, "44451": 481, "test_metadata_api": 481, "apitest": 481, "test_entry_points_by_index": 481, "44363": 481, "44364": 481, "43921": 481, "test_wrong_cert_tls13": 481, "test_pha_required_nocert": 481, "44131": 481, "test_frozenmain": 481, "31904": 481, "test_file_not_exist": 481, "42083": 481, "35753": 481, "unwrapp": 481, "dictproxi": 481, "45220": 481, "defaultwindowssdkvers": 481, "commandlin": 481, "45188": 481, "45163": 481, "haiku": 481, "45067": 481, "extended_color_cont": 481, "island": 481, "t20170401": 481, "20170401": 481, "45019": 481, "44535": 481, "43298": 481, "44381": 481, "enablecontrolflowguard": 481, "41282": 481, "45375": 481, "unnormalis": 481, "45022": 481, "45007": 481, "44848": 481, "44572": 481, "44582": 481, "41299": 481, "jitter": 481, "42686": 481, "40263": 481, "issue26903": 481, "34602": 481, "quadrupl": 481, "44689": 481, "43109": 481, "34932": 481, "shane": 481, "harvey": 481, "45193": 481, "40128": 481, "update_idletask": 481, "41611": 481, "autocompletewindow": 481, "winconfig_ev": 481, "44026": 481, "44786": 481, "44967": 481, "44978": 481, "43425": 481, "test2to3": 481, "44074": 481, "20291": 481, "44687": 481, "45116": 481, "45094": 481, "44751": 481, "42747": 481, "py_tpflags_have_am_send": 481, "44441": 481, "_pytrash_deposit_object": 481, "_pytrash_destroy_chain": 481, "_pytrash_thread_deposit_object": 481, "_pytrash_thread_destroy_chain": 481, "_tstate": 481, "trash_delete_nest": 481, "40939": 481, "pyparser_": 481, "44378": 481, "44113": 481, "44094": 481, "pyerr_setfromerrnowithunicodefilenam": 481, "pyerr_setfromwindowserrwithunicodefilenam": 481, "pyerr_setexcfromwindowserrwithunicodefilenam": 481, "pyunicodeencodeerror_cr": 481, "pyunicodetranslateerror_cr": 481, "43434": 481, "43472": 481, "43362": 481, "43756": 481, "43075": 481, "42800": 481, "37363": 481, "43892": 481, "43933": 481, "kweyword": 481, "43963": 481, "_signal": 481, "42739": 481, "pylinetable_initaddressrang": 481, "43754": 481, "consistut": 481, "38605": 481, "clvxxpq2t2lq5mp2y53vvqfcxywqjhkz": 481, "pile": 481, "43859": 481, "41323": 481, "43846": 481, "43798": 481, "43751": 481, "ait": 481, "42128": 481, "43105": 481, "42609": 481, "44015": 481, "25478": 481, "43733": 481, "43979": 481, "zwerschk": 481, "43993": 481, "43957": 481, "42904": 481, "43945": 481, "43937": 481, "43930": 481, "43907": 481, "43926": 481, "43607": 481, "43284": 481, "_syscmd_ver": 481, "43867": 481, "serve_cli": 481, "40443": 481, "43820": 481, "43680": 481, "41515": 481, "43776": 481, "42248": 481, "_missing__": 481, "43744": 481, "43772": 481, "43764": 481, "openssl_api_compat": 481, "make_ssl_data": 481, "25264": 481, "43780": 481, "43731": 481, "38659": 481, "simple_enum": 481, "test_simple_enum": 481, "43752": 481, "24723": 481, "43655": 481, "43723": 481, "2135": 481, "43534": 481, "43522": 481, "hostflag": 481, "ssl_ctx": 481, "8978": 481, "43296": 481, "sqlite3_value_blob": 481, "sqlite_nomem": 481, "43312": 481, "43265": 481, "43176": 481, "39529": 481, "18369": 481, "privatekey": 481, "36470": 481, "x509_v_flag_partial_chain": 481, "35114": 481, "39899": 481, "36076": 481, "33731": 481, "32745": 481, "43987": 481, "43959": 481, "43938": 481, "43778": 481, "glossary_search": 481, "43739": 481, "43961": 481, "test_namer_rotator_inherit": 481, "43842": 481, "43843": 481, "env_chang": 481, "ccach": 481, "tlsv1_alert_internal_error": 481, "43567": 481, "35306": 481, "43538": 481, "38822": 481, "26227": 481, "40432": 481, "43745": 481, "1k": 481, "mislabel": 481, "1i": 481, "43492": 481, "30555": 481, "42119": 481, "sdks": 481, "iossupport": 481, "43568": 481, "44009": 481, "rosetta": 481, "42235": 481, "sidebar": 481, "43981": 481, "test_sidebar": 481, "test_squeez": 481, "43774": 481, "43962": 481, "_pyinterpreterstate_idincref": 481, "_pyinterpreterstate_idinitref": 481, "id_refcount": 481, "get_curr": 481, "interpreterid": 481, "28254": 481, "42988": 481, "schw": 481, "rer": 481, "43285": 481, "27129": 481, "43660": 481, "43555": 481, "43517": 481, "misdetect": 481, "43497": 481, "39316": 481, "35883": 481, "43410": 481, "43406": 481, "43390": 481, "sa_onstack": 481, "friendlier": 481, "golang": 481, "cgo": 481, "37448": 481, "address_in_rang": 481, "ultra": 481, "unsanitari": 481, "_py_no_sanitize_address": 481, "_py_no_sanitize_thread": 481, "_py_no_sanitize_memori": 481, "dwith_pymalloc_radix_tre": 481, "29988": 481, "43433": 481, "35930": 481, "41369": 481, "43422": 481, "41324": 481, "43577": 481, "43542": 481, "heic": 481, "heif": 481, "43510": 481, "43521": 481, "41361": 481, "43423": 481, "27820": 481, "_always_": 481, "43445": 481, "43245": 481, "29982": 481, "43428": 481, "43332": 481, "43420": 481, "43399": 481, "43369": 481, "sqlite3_column_text": 481, "sqlite3_column_blob": 481, "43368": 481, "24562": 481, "mariusz": 481, "felisiak": 481, "42129": 481, "43295": 481, "43125": 481, "base64mim": 481, "43084": 481, "42994": 481, "opus": 481, "3gpp": 481, "3gpp2": 481, "42782": 481, "membernam": 481, "26053": 481, "40701": 481, "39342": 481, "x509_v_flag_allow_proxy_cert": 481, "man1": 481, "man7": 481, "jab": 481, "lordmauv": 481, "justin39": 481, "43199": 481, "43407": 481, "43354": 481, "41933": 481, "37945": 481, "test_getsetlocale_issue1813": 481, "test_local": 481, "41561": 481, "43179": 481, "alignof_x": 481, "sizeof_x": 481, "43631": 481, "43617": 481, "43372": 481, "_freeze_importlib": 481, "42246": 481, "877df851": 481, "test_frozent": 481, "43440": 481, "42225": 481, "43541": 481, "poison": 481, "43321": 481, "43121": 481, "42819": 481, "x1b": 481, "2004h": 481, "42808": 481, "42217": 481, "co_linet": 481, "40692": 481, "43316": 481, "43317": 481, "43146": 481, "43260": 481, "43258": 481, "needless": 481, "43251": 481, "sqlite3_column_nam": 481, "23838": 481, "43172": 481, "irreconcil": 481, "43163": 481, "43162": 481, "43102": 481, "42960": 481, "42151": 481, "_elementre": 481, "29753": 481, "shrank": 481, "27646": 481, "43288": 481, "43174": 481, "13501": 481, "39448": 481, "43155": 481, "41837": 481, "43283": 481, "43278": 481, "43270": 481, "_pyerr_occur": 481, "43239": 481, "fvisibl": 481, "43181": 481, "42938": 481, "pyeval_": 481, "_pyeval_evalcodewithnam": 481, "38631": 481, "42986": 481, "42924": 481, "42882": 481, "_pyunicode_fromid": 481, "_py_identifi": 481, "unicode_id": 481, "next_index": 481, "42827": 481, "42823": 481, "41994": 481, "27772": 481, "43108": 481, "43077": 481, "43014": 481, "42323": 481, "42944": 481, "42934": 481, "42931": 481, "38250": 481, "42877": 481, "42923": 481, "42848": 481, "42901": 481, "_proto_memb": 481, "42780": 481, "42866": 481, "getcodec": 481, "42846": 481, "_codecs_cn": 481, "_codecs_hk": 481, "_codecs_iso2022": 481, "_codecs_jp": 481, "_codecs_kr": 481, "_codecs_tw": 481, "42851": 481, "42834": 481, "41748": 481, "dubost": 481, "42384": 481, "42383": 481, "42005": 481, "41604": 481, "user_ptr": 481, "set_panel_userptr": 481, "41149": 481, "stratford": 481, "33289": 481, "40304": 481, "bori": 481, "verkhovskiy": 481, "42811": 481, "yair": 481, "frid": 481, "40823": 481, "checktracecallbackcont": 481, "43031": 481, "36143": 481, "42874": 481, "add_cross_compiling_path": 481, "42584": 481, "42504": 481, "33065": 481, "23544": 481, "32631": 481, "42979": 481, "43030": 481, "42814": 481, "genericaliasobject": 481, "42806": 481, "40631": 481, "27794": 481, "42745": 481, "32381": 481, "30858": 481, "42615": 481, "resulttyp": 481, "40137": 481, "42008": 481, "40521": 481, "42257": 481, "42772": 481, "42759": 481, "42756": 481, "23328": 481, "envar": 481, "42740": 481, "42655": 481, "42727": 481, "38308": 481, "42721": 481, "nodefaultroot": 481, "tempor": 481, "25246": 481, "35728": 481, "15303": 481, "42681": 481, "42685": 481, "37961": 481, "42630": 481, "_run_exitfunc": 481, "42644": 481, "loge": 481, "36541": 481, "pgen2": 481, "42382": 481, "41877": 481, "autospect": 481, "auto_spec": 481, "set_spec": 481, "39717": 481, "42385": 481, "thread_stack_s": 481, "34750": 481, "_enumdict": 481, "42517": 481, "42678": 481, "28964": 481, "42470": 481, "42388": 481, "34463": 481, "42163": 481, "42090": 481, "42059": 481, "41960": 481, "41907": 481, "41891": 481, "24792": 481, "41462": 481, "40219": 481, "labeledscal": 481, "37193": 481, "39068": 481, "brandon": 481, "stansburi": 481, "17140": 481, "34398": 481, "42794": 481, "test_nntplib": 481, "aioe": 481, "42641": 481, "test_select": 481, "_test_all_chown_common": 481, "42199": 481, "41443": 481, "test_posix": 481, "41439": 481, "test_uuid": 481, "42692": 481, "__builtin_avail": 481, "42604": 481, "310d": 481, "42598": 481, "29076": 481, "42361": 481, "rc2": 481, "42726": 481, "42613": 481, "prope": 481, "42591": 481, "_py_fopen": 481, "_py_wfopen": 481, "_py_fopen_obj": 481, "42111": 481, "40052": 481, "40791": 481, "42576": 481, "42536": 481, "42500": 481, "42435": 481, "bytarray": 481, "41686": 481, "_pyos_sigintev": 481, "42381": 481, "42374": 481, "42349": 481, "42296": 481, "42332": 481, "42282": 481, "42266": 481, "42233": 481, "5054": 481, "run_cgi": 481, "http_accept": 481, "getallmatchinghead": 481, "42562": 481, "17735": 481, "findsourc": 481, "co_lineno": 481, "42116": 481, "42532": 481, "spec_arg": 481, "test_master_read": 481, "42487": 481, "42482": 481, "test_openpti": 481, "test_bas": 481, "15450": 481, "42406": 481, "whichmodul": 481, "42403": 481, "42375": 481, "37205": 481, "42328": 481, "42318": 481, "42350": 481, "42014": 481, "42237": 481, "illumo": 481, "42249": 481, "42236": 481, "41754": 481, "42183": 481, "42140": 481, "39825": 481, "platform_tag": 481, "cp38": 481, "41889": 481, "41861": 481, "40624": 481, "28850": 481, "_safe_repr": 481, "34215": 481, "12800": 481, "40968": 481, "40816": 481, "40550": 481, "39411": 481, "tentat": 481, "42153": 481, "41028": 481, "switcher": 481, "docsbuild": 481, "41473": 481, "bugzilla": 481, "redhat": 481, "show_bug": 481, "1866884": 481, "42553": 481, "test_call_lat": 481, "test_netrc": 481, "test_getaddrinfo_ipv6_scopeid_symbol": 481, "test_getnameinfo_ipv6_scopeid_symbol": 481, "test_test": 481, "test_mailcap": 481, "test_pip": 481, "40754": 481, "test_min_max_version_mismatch": 481, "libnet": 481, "detect_socket": 481, "42398": 481, "moveov": 481, "41617": 481, "pycore_bitutil": 481, "__builtin_bswap16": 481, "38823": 481, "ctypes_unicod": 481, "42087": 481, "40680": 481, "40998": 481, "42120": 481, "_copysign": 481, "38506": 481, "41116": 481, "unixxcompil": 481, "find_library_fil": 481, "42232": 481, "38443": 481, "42508": 481, "42426": 481, "searchengin": 481, "42415": 481, "42212": 481, "36310": 481, "_posixshmem": 481, "_queue": 481, "_pytrash_cond": 481, "42171": 481, "42085": 481, "42103": 481, "42051": 481, "42218": 481, "42214": 481, "42206": 481, "41796": 481, "42143": 481, "yonatan": 481, "41659": 481, "42150": 481, "42123": 481, "42030": 481, "41984": 481, "41993": 481, "41979": 481, "41902": 481, "41894": 481, "41435": 481, "35455": 481, "gethrvtim": 481, "kulik": 481, "26789": 481, "42146": 481, "uid_t": 481, "gid_t": 481, "41490": 481, "certifi": 481, "41052": 481, "42089": 481, "packagenotfounderror": 481, "41491": 481, "42065": 481, "charmap_decod": 481, "41966": 481, "dean": 481, "inwood": 481, "19270": 481, "28660": 481, "35823": 481, "42043": 481, "42021": 481, "39101": 481, "41976": 481, "triy": 481, "41943": 481, "41905": 481, "23706": 481, "41876": 481, "41831": 481, "41747": 481, "30681": 481, "toth": 481, "41586": 481, "16396": 481, "40592": 481, "40492": 481, "27321": 481, "38976": 481, "42061": 481, "41910": 481, "42010": 481, "41805": 481, "39693": 481, "39416": 481, "41739": 481, "test_race_between_set_target_and_flush": 481, "41970": 481, "41944": 481, "41306": 481, "scaletest": 481, "38439": 481, "38252": 481, "39107": 481, "41557": 481, "38324": 481, "41471": 481, "33987": 481, "40511": 481, "clover": 481, "42015": 481, "40423": 481, "41845": 481, "40422": 481, "_py_closerang": 481, "41986": 481, "41304": 481, "python3x": 481, "29778": 481, "15801": 481, "41162": 481, "15523": 481, "41004": 481, "39603": 481, "41909": 481, "_bisect": 481, "39934": 481, "41780": 481, "41690": 481, "_curses_panel": 481, "41681": 481, "41675": 481, "41670": 481, "41654": 481, "41631": 481, "_oper": 481, "1653741": 481, "41533": 481, "va_build_stack": 481, "do_mkstack": 481, "small_stack": 481, "41531": 481, "41525": 481, "_sha1": 481, "_md5": 481, "41431": 481, "41340": 481, "strdup": 481, "38156": 481, "pyos_stdioreadlin": 481, "41342": 481, "41295": 481, "41247": 481, "set_running_loop": 481, "41252": 481, "_servername_callback": 481, "41215": 481, "xlc": 481, "41218": 481, "41175": 481, "bytearrayobject": 481, "41094": 481, "39960": 481, "hackcheck": 481, "sneak": 481, "41084": 481, "41076": 481, "41056": 481, "41061": 481, "hashtabl": 481, "pypegen": 481, "pypars": 481, "35975": 481, "40636": 481, "40985": 481, "40958": 481, "40957": 481, "40950": 481, "40947": 481, "40847": 481, "threw": 481, "40889": 481, "40904": 481, "40903": 481, "40880": 481, "40883": 481, "40870": 481, "40854": 481, "40826": 481, "pyos_readlin": 481, "19468": 481, "nder": 481, "40780": 481, "38964": 481, "40750": 481, "40696": 481, "40679": 481, "29590": 481, "4022": 481, "_lzma": 481, "19569": 481, "_py_comp_diag_push": 481, "_py_comp_diag_ignore_depr_decl": 481, "_py_comp_diag_pop": 481, "26680": 481, "41900": 481, "41887": 481, "41773": 481, "41840": 481, "40564": 481, "40670": 481, "misindent": 481, "41833": 481, "41817": 481, "eventtyp": 481, "41815": 481, "mccormick": 481, "41517": 481, "39587": 481, "41789": 481, "32218": 481, "39651": 481, "mashal": 481, "_string": 481, "41732": 481, "41720": 481, "41696": 481, "41687": 481, "41662": 481, "39010": 481, "41638": 481, "41513": 481, "41609": 481, "39994": 481, "40782": 481, "41520": 481, "41528": 481, "41503": 481, "41497": 481, "41467": 481, "41425": 481, "41421": 481, "41316": 481, "41384": 481, "41317": 481, "41364": 481, "35328": 481, "virtual_env_prompt": 481, "41341": 481, "41344": 481, "41333": 481, "41288": 481, "newobj_ex": 481, "39017": 481, "20907": 481, "41273": 481, "_proactorreadpipetransport": 481, "41235": 481, "41207": 481, "distutilsexecerror": 481, "29727": 481, "39168": 481, "41194": 481, "41195": 481, "41193": 481, "41182": 481, "41161": 481, "40874": 481, "41138": 481, "31082": 481, "31938": 481, "41068": 481, "41058": 481, "find_funct": 481, "41048": 481, "41043": 481, "41025": 481, "41002": 481, "merri": 481, "40448": 481, "krzysztof": 481, "konopko": 481, "40924": 481, "devis": 481, "40955": 481, "40855": 481, "33689": 481, "40884": 481, "asaf": 481, "40876": 481, "40807": 481, "_maybe_compil": 481, "32604": 481, "39314": 481, "40834": 481, "with_xxsubinterpret": 481, "channel_send": 481, "40755": 481, "26407": 481, "39384": 481, "40777": 481, "pydatetime_isocalendardatetyp": 481, "38488": 481, "40767": 481, "wayland": 481, "wayland_display": 481, "attali": 481, "40795": 481, "16995": 481, "30008": 481, "30064": 481, "40759": 481, "40756": 481, "37129": 481, "40737": 481, "40726": 481, "40695": 481, "9216": 481, "evp": 481, "test_hashlib": 481, "test_smtplib": 481, "40614": 481, "40626": 481, "h5": 481, "hdf5": 481, "hdf": 481, "schwab": 481, "25920": 481, "201311": 481, "40671": 481, "40611": 481, "39881": 481, "13097": 481, "23082": 481, "40105": 481, "mazur": 481, "40084": 481, "31122": 481, "39728": 481, "39244": 481, "39040": 481, "35714": 481, "26543": 481, "12178": 481, "itay": 481, "elbirt": 481, "36290": 481, "33944": 481, "35078": 481, "29620": 481, "runtimeexcept": 481, "kernc": 481, "34226": 481, "content_length": 481, "duran": 481, "33660": 481, "28557": 481, "rawio": 481, "41774": 481, "35293": 481, "removedinsphinx40warn": 481, "37149": 481, "shipman": 481, "nmt": 481, "41726": 481, "41624": 481, "40204": 481, "c_allow_pre_v3": 481, "c_warn_on_allowed_pre_v3": 481, "41045": 481, "41314": 481, "40979": 481, "40552": 481, "39883": 481, "bsd0": 481, "37703": 481, "41939": 481, "test_license_exists_at_url": 481, "41731": 481, "test_cmd_line_script": 481, "41602": 481, "41521": 481, "41477": 481, "test_genericalia": 481, "41085": 481, "41069": 481, "38377": 481, "41009": 481, "require_": 481, "_version": 481, "41003": 481, "test_copyreg": 481, "pickletest": 481, "40964": 481, "cmu": 481, "40927": 481, "test_binhex": 481, "38169": 481, "34401": 481, "38249": 481, "pin": 481, "40684": 481, "40683": 481, "41744": 481, "41627": 481, "41526": 481, "41492": 481, "uac": 481, "40948": 481, "41412": 481, "ucrt": 481, "40741": 481, "41142": 481, "41074": 481, "41039": 481, "40164": 481, "39631": 481, "40677": 481, "37556": 481, "39580": 481, "rick": 481, "heil": 481, "41005": 481, "41775": 481, "35764": 481, "40181": 481, "41468": 481, "41373": 481, "41300": 481, "41152": 481, "41144": 481, "39885": 481, "40723": 481, "recursion_crit": 481, "41689": 481, "41524": 481, "40989": 481, "pyerror": 481, "40910": 481, "40724": 481, "_pyeval_evalcod": 481, "40703": 481, "py_tp_getset": 481, "39583": 481, "40501": 481, "rpcrt4": 481, "40663": 481, "40596": 481, "40593": 481, "40585": 481, "40566": 481, "40502": 481, "n_col_offset": 481, "40527": 481, "40523": 481, "40246": 481, "d00": 481, "fca": 481, "40417": 481, "rouhani": 481, "40408": 481, "29587": 481, "40328": 481, "40228": 481, "38880": 481, "40662": 481, "40665": 481, "40536": 481, "40637": 481, "blake1": 481, "alpha2": 481, "40607": 481, "skurikhin": 481, "40612": 481, "40597": 481, "40571": 481, "40503": 481, "40397": 481, "40549": 481, "31033": 481, "40541": 481, "40515": 481, "40504": 481, "40559": 481, "40480": 481, "futil": 481, "40457": 481, "40355": 481, "curti": 481, "40459": 481, "39435": 481, "39305": 481, "_nntpbase": 481, "32494": 481, "gdbm_count": 481, "40453": 481, "40394": 481, "39995": 481, "_threadwakeup": 481, "39966": 481, "25597": 481, "40389": 481, "40273": 481, "39075": 481, "40025": 481, "onstott": 481, "39058": 481, "40561": 481, "40499": 481, "39705": 481, "40055": 481, "40436": 481, "pythoninfo": 481, "40653": 481, "_dirnamew": 481, "have_symlink": 481, "40514": 481, "40650": 481, "winsock2": 481, "40458": 481, "39148": 481, "35569": 481, "40431": 481, "40163": 481, "pycfunction_checkexact": 481, "pycmethod_checkexact": 481, "pycmethod_check": 481, "40545": 481, "_pyerr_gettopmostexcept": 481, "40412": 481, "nullifi": 481, "inittab_copi": 481, "szorc": 481, "40121": 481, "39073": 481, "39503": 481, "8492": 481, "schwager": 481, "40313": 481, "40267": 481, "39522": 481, "40082": 481, "pyscannerobject": 481, "40141": 481, "40067": 481, "henriqu": 481, "silva": 481, "20526": 481, "40020": 481, "parsetok": 481, "codepath": 481, "32894": 481, "40398": 481, "40396": 481, "_sc_open_max": 481, "fdescf": 481, "emast": 481, "cem": 481, "kevan": 481, "koob": 481, "242274": 481, "40138": 481, "39942": 481, "40275": 481, "40330": 481, "40148": 481, "40325": 481, "40287": 481, "40290": 481, "40282": 481, "40277": 481, "40270": 481, "json_object": 481, "29255": 481, "40260": 481, "40234": 481, "40091": 481, "_at_fork_reinit": 481, "40149": 481, "_abc_data": 481, "40196": 481, "40190": 481, "_sc_aix_realmem": 481, "36517": 481, "40126": 481, "40108": 481, "incorr": 481, "40089": 481, "_after_fork": 481, "_main_thread": 481, "_reset_internal_lock": 481, "_register_atexit": 481, "40050": 481, "40014": 481, "ngroup": 481, "40017": 481, "40016": 481, "39953": 481, "38891": 481, "39682": 481, "38410": 481, "35967": 481, "35113": 481, "karthikeyan": 481, "singaravelan": 481, "31758": 481, "27635": 481, "39879": 481, "sami": 481, "lahfa": 481, "38387": 481, "13743": 481, "test_c_locale_coercion": 481, "40162": 481, "40146": 481, "azur": 481, "40003": 481, "bisect_cmd": 481, "39380": 481, "39793": 481, "1812": 481, "doni": 481, "38360": 481, "40158": 481, "38527": 481, "38329": 481, "icn": 481, "38689": 481, "40385": 481, "checkpyc": 481, "40179": 481, "38576": 481, "18348": 481, "_heapq": 481, "tracing_poss": 481, "_statist": 481, "39968": 481, "get_module_st": 481, "39965": 481, "38373": 481, "19466": 481, "38894": 481, "wozniski": 481, "39871": 481, "39776": 481, "39778": 481, "38091": 481, "39087": 481, "39520": 481, "39220": 481, "22490": 481, "39830": 481, "39999": 481, "39991": 481, "39656": 481, "39360": 481, "experienc": 481, "35370": 481, "39936": 481, "aix_platform": 481, "39652": 481, "39915": 481, "38662": 481, "38075": 481, "39916": 481, "39850": 481, "36287": 481, "39889": 481, "39828": 481, "13487": 481, "39674": 481, "28577": 481, "39826": 481, "getconnect": 481, "39763": 481, "39794": 481, "39517": 481, "39678": 481, "queue_manag": 481, "39764": 481, "pyasyncgenobject": 481, "39769": 481, "38691": 481, "39719": 481, "39667": 481, "39609": 481, "39548": 481, "qop": 481, "39495": 481, "38971": 481, "38641": 481, "vlad": 481, "emelianov": 481, "37534": 481, "prolog": 481, "39868": 481, "13790": 481, "17422": 481, "39530": 481, "39718": 481, "39677": 481, "40019": 481, "27807": 481, "test_startup_import": 481, "26067": 481, "test_chown": 481, "39855": 481, "test_subprocess": 481, "test_us": 481, "39761": 481, "dflag": 481, "39930": 481, "vcruntime140": 481, "39847": 481, "hibern": 481, "38597": 481, "38380": 481, "39789": 481, "34803": 481, "27115": 481, "39852": 481, "39781": 481, "36184": 481, "take_gil": 481, "pthread_cond_timedwait": 481, "38080": 481, "fix_urllib": 481, "roberto": 481, "meza": 481, "cabrera": 481, "_pyarg_nokwnam": 481, "_pytrash_begin": 481, "_pytrash_end": 481, "39884": 481, "38643": 481, "39824": 481, "38913": 481, "whwn": 481, "39184": 481, "39401": 481, "39382": 481, "39619": 481, "39606": 481, "39386": 481, "39579": 481, "ast_for_dotted_nam": 481, "39510": 481, "39502": 481, "1902": 481, "39492": 481, "39453": 481, "39320": 481, "build_map_unpack": 481, "39219": 481, "36051": 481, "38960": 481, "30566": 481, "39649": 481, "39681": 481, "35950": 481, "39104": 481, "processpoolexcutor": 481, "39627": 481, "39474": 481, "21016": 481, "39590": 481, "39595": 481, "39567": 481, "39559": 481, "38149": 481, "39546": 481, "39450": 481, "stripe": 481, "39493": 481, "39491": 481, "39485": 481, "38932": 481, "vegard": 481, "stikbakk": 481, "39082": 481, "39432": 481, "18819": 481, "39274": 481, "35727": 481, "32173": 481, "39572": 481, "39654": 481, "39153": 481, "39392": 481, "impress": 481, "9056": 481, "38325": 481, "test_winconsoleio": 481, "test_add_file_after_2107": 481, "39553": 481, "sxs": 481, "39439": 481, "39393": 481, "unresolv": 481, "38883": 481, "39185": 481, "39663": 481, "find_good_parse_start": 481, "39600": 481, "30780": 481, "configdialog": 481, "39388": 481, "38792": 481, "bytes_method": 481, "pycore_bytes_method": 481, "pydoc_strvar_shar": 481, "pycore_dtoa": 481, "39500": 481, "39511": 481, "38076": 481, "39245": 481, "pyobject_fastcalldict": 481, "39427": 481, "39421": 481, "build_list_unpack": 481, "build_tuple_unpack": 481, "build_set_unpack": 481, "39048": 481, "39235": 481, "39209": 481, "39216": 481, "39215": 481, "39200": 481, "39166": 481, "39114": 481, "38588": 481, "38610": 481, "32021": 481, "brot": 481, "39430": 481, "39390": 481, "39406": 481, "39396": 481, "29435": 481, "woodruff": 481, "39389": 481, "39313": 481, "exec_funct": 481, "refactoringtool": 481, "39297": 481, "38901": 481, "39242": 481, "35292": 481, "38907": 481, "39152": 481, "giovanni": 481, "lombardo": 481, "39198": 481, "stopit": 481, "39191": 481, "38871": 481, "39142": 481, "convertingtupl": 481, "39158": 481, "39129": 481, "39057": 481, "proxy_bypass_environ": 481, "39056": 481, "39055": 481, "21600": 481, "39019": 481, "38914": 481, "juergen": 481, "gmach": 481, "38878": 481, "35182": 481, "andriy": 481, "maletski": 481, "38630": 481, "38536": 481, "eur": 481, "38473": 481, "38361": 481, "38293": 481, "37958": 481, "get_profile_dict": 481, "28367": 481, "b500000": 481, "b576000": 481, "b921600": 481, "b1000000": 481, "b1152000": 481, "b1500000": 481, "b2000000": 481, "b2500000": 481, "b3000000": 481, "b3500000": 481, "b4000000": 481, "andrey": 481, "smirnov": 481, "39381": 481, "38918": 481, "3530": 481, "39160": 481, "39144": 481, "ctag": 481, "etag": 481, "39050": 481, "34118": 481, "etcetera": 481, "32989": 481, "newline_and_indent_ev": 481, "39164": 481, "_pyerr_getexcinfo": 481, "38945": 481, "38804": 481, "39028": 481, "39080": 481, "39031": 481, "39008": 481, "38673": 481, "38922": 481, "38920": 481, "38892": 481, "38852": 481, "38858": 481, "257": 481, "nsmallnegint": 481, "nsmallposint": 481, "36854": 481, "38328": 481, "38707": 481, "38629": 481, "27145": 481, "hongweipeng": 481, "38021": 481, "pep425": 481, "35409": 481, "33387": 481, "with_cleanup_finish": 481, "39033": 481, "39022": 481, "39006": 481, "38708": 481, "38698": 481, "invalidmessageid": 481, "38994": 481, "38979": 481, "38978": 481, "38986": 481, "taskwakeupmethwrapp": 481, "38982": 481, "38529": 481, "27413": 481, "38634": 481, "33684": 481, "parse_message_id": 481, "38927": 481, "26730": 481, "38881": 481, "38876": 481, "binget": 481, "long_binget": 481, "38688": 481, "kinoshita": 481, "38863": 481, "is_cgi": 481, "37838": 481, "38859": 481, "38857": 481, "38834": 481, "38821": 481, "federico": 481, "bond": 481, "38811": 481, "toke": 481, "iland": 481, "rgensen": 481, "38686": 481, "38348": 481, "37523": 481, "38045": 481, "_decompos": 481, "36820": 481, "36406": 481, "34776": 481, "20928": 481, "29636": 481, "38928": 481, "38899": 481, "fishshel": 481, "cmds": 481, "22377": 481, "38546": 481, "test_ressources_gced_in_work": 481, "38614": 481, "38547": 481, "test_pti": 481, "38992": 481, "38991": 481, "strip_python_stderr": 481, "38965": 481, "_stack_overflow": 481, "38875": 481, "38841": 481, "test_create_datagram_endpoint_existing_sock_unix": 481, "test_pidfd_open": 481, "38839": 481, "38669": 481, "37957": 481, "36500": 481, "39007": 481, "37931": 481, "beno": 481, "38943": 481, "38862": 481, "38636": 481, "38722": 481, "killen": 481, "38622": 481, "38418": 481, "38243": 481, "38174": 481, "15903": 481, "37764": 481, "_header_value_pars": 481, "get_unstructur": 481, "ashwin": 481, "ramaswami": 481, "37461": 481, "37463": 481, "37364": 481, "34631": 481, "1c": 481, "34155": 481, "maxk": 481, "jpic": 481, "38639": 481, "38640": 481, "38613": 481, "38535": 481, "38525": 481, "38465": 481, "38469": 481, "38437": 481, "gc_debug": 481, "38392": 481, "38210": 481, "38402": 481, "crypt_r": 481, "37474": 481, "fedisableexcept": 481, "38006": 481, "38317": 481, "38310": 481, "36871": 481, "11410": 481, "minimis": 481, "38219": 481, "38236": 481, "38013": 481, "async_generator_athrow": 481, "38124": 481, "38116": 481, "38113": 481, "38074": 481, "38073": 481, "38072": 481, "38069": 481, "38071": 481, "38005": 481, "channelid": 481, "36946": 481, "37994": 481, "37947": 481, "37812": 481, "check_small_int": 481, "37830": 481, "20490": 481, "37840": 481, "37802": 481, "37409": 481, "32912": 481, "37757": 481, "targetscopeerror": 481, "36279": 481, "36311": 481, "2gib": 481, "37648": 481, "needl": 481, "37619": 481, "37593": 481, "37543": 481, "37537": 481, "_pyobject_fre": 481, "37467": 481, "37433": 481, "37417": 481, "check_interv": 481, "24214": 481, "37316": 481, "37300": 481, "37269": 481, "37231": 481, "37213": 481, "37219": 481, "15913": 481, "36922": 481, "37160": 481, "37077": 481, "36781": 481, "34556": 481, "35551": 481, "tis260": 481, "tacti": 481, "dumpleton": 481, "27575": 481, "ag": 481, "36589": 481, "38724": 481, "doroschenko": 481, "38786": 481, "python273": 481, "38785": 481, "38723": 481, "27805": 481, "38438": 481, "38761": 481, "38716": 481, "rotatinghandl": 481, "eponym": 481, "38334": 481, "38586": 481, "38565": 481, "34679": 481, "asynci": 481, "31202": 481, "36321": 481, "38521": 481, "38478": 481, "33604": 481, "38378": 481, "38417": 481, "38449": 481, "15522": 481, "38431": 481, "38109": 481, "38422": 481, "38405": 481, "38332": 481, "_encoded_word": 481, "38341": 481, "38319": 481, "38242": 481, "38019": 481, "38163": 481, "38161": 481, "_awaitev": 481, "38216": 481, "30458": 481, "38108": 481, "38265": 481, "38248": 481, "38237": 481, "34002": 481, "38191": 481, "_typenam": 481, "38155": 481, "tahia": 481, "khan": 481, "38185": 481, "38136": 481, "37828": 481, "toriz": 481, "cruz": 481, "38175": 481, "33936": 481, "34706": 481, "38153": 481, "blake2b512": 481, "38115": 481, "38148": 481, "38142": 481, "36991": 481, "38134": 481, "pbkdf2_hmac_fast": 481, "38132": 481, "38008": 481, "37405": 481, "38121": 481, "38110": 481, "closewalk": 481, "fdwalk": 481, "38093": 481, "37488": 481, "35640": 481, "38086": 481, "37251": 481, "38037": 481, "38066": 481, "feed_data": 481, "set_transport": 481, "38059": 481, "38049": 481, "37953": 481, "forwardrefer": 481, "38026": 481, "35923": 481, "_origin": 481, "38010": 481, "34410": 481, "37140": 481, "37587": 481, "scanstr": 481, "10978": 481, "37972": 481, "blhsing": 481, "37965": 481, "ccompil": 481, "has_funct": 481, "37964": 481, "37960": 481, "36205": 481, "rusag": 481, "37950": 481, "37798": 481, "test_statist": 481, "26589": 481, "37915": 481, "32554": 481, "9938": 481, "37851": 481, "32793": 481, "37885": 481, "37868": 481, "__dataclass_fields__": 481, "37811": 481, "37863": 481, "21131": 481, "sigstksz": 481, "fastpath": 481, "14465": 481, "37810": 481, "37772": 481, "ancestr": 481, "18578": 481, "37785": 481, "34488": 481, "18049": 481, "thread_pthread": 481, "37738": 481, "setcchar": 481, "37723": 481, "vaginay": 481, "35943": 481, "32178": 481, "37268": 481, "11953": 481, "wsa": 481, "37685": 481, "37697": 481, "37695": 481, "37689": 481, "29553": 481, "nester": 481, "37691": 481, "37354": 481, "37664": 481, "37642": 481, "36161": 481, "ttyname_r": 481, "36324": 481, "37555": 481, "_call_match": 481, "_call": 481, "_spec_signatur": 481, "elizabeth": 481, "uselton": 481, "29446": 481, "16970": 481, "leender": 481, "34443": 481, "__qualnam": 481, "37491": 481, "marco": 481, "paolini": 481, "18378": 481, "_parse_localenam": 481, "37579": 481, "21478": 481, "37531": 481, "37482": 481, "36993": 481, "hillier": 481, "37502": 481, "37520": 481, "18374": 481, "37424": 481, "37421": 481, "get_temp_dir": 481, "37479": 481, "37440": 481, "37437": 481, "37428": 481, "ssl_verify_post_handshak": 481, "37420": 481, "37406": 481, "29412": 481, "37394": 481, "26967": 481, "37212": 481, "37372": 481, "blanchard": 481, "37345": 481, "udplit": 481, "gabe": 481, "appleton": 481, "37358": 481, "37347": 481, "aleksandr": 481, "balezin": 481, "37163": 481, "37085": 481, "37328": 481, "37305": 481, "webmanifest": 481, "33972": 481, "37280": 481, "37279": 481, "19865": 481, "37266": 481, "37210": 481, "21872": 481, "35922": 481, "36607": 481, "36402": 481, "37206": 481, "37111": 481, "12144": 481, "34886": 481, "37173": 481, "37165": 481, "_count_el": 481, "34767": 481, "37158": 481, "34282": 481, "_convert": 481, "37150": 481, "_actionscontain": 481, "35621": 481, "36520": 481, "30835": 481, "donnellan": 481, "31163": 481, "25068": 481, "26185": 481, "micka": 481, "schoentgen": 481, "21315": 481, "rfc2047": 481, "test_datetim": 481, "35805": 481, "35070": 481, "ngroups_max": 481, "31783": 481, "36582": 481, "32424": 481, "36564": 481, "36302": 481, "36250": 481, "36046": 481, "mclean": 481, "32627": 481, "35168": 481, "8538": 481, "20504": 481, "11122": 481, "rpmbuild": 481, "34749": 481, "34519": 481, "28009": 481, "32498": 481, "33348": 481, "32689": 481, "maxwel": 481, "13b": 481, "mckinnon": 481, "32820": 481, "27657": 481, "4963": 481, "21767": 481, "38816": 481, "38351": 481, "38778": 481, "38592": 481, "brazilian": 481, "38294": 481, "38053": 481, "26868": 481, "36797": 481, "37977": 481, "37979": 481, "isopars": 481, "12707": 481, "37937": 481, "37759": 481, "37726": 481, "32910": 481, "37256": 481, "37284": 481, "30088": 481, "sviatoslav": 481, "sydorenko": 481, "37521": 481, "mintz": 481, "37456": 481, "37487": 481, "mexico": 481, "tech": 481, "37478": 481, "34903": 481, "gleen": 481, "36260": 481, "37004": 481, "36960": 481, "brad": 481, "36487": 481, "23460": 481, "tuoma": 481, "suutari": 481, "35803": 481, "34293": 481, "25237": 481, "test_commun": 481, "38502": 481, "35998": 481, "test_start_tls_server_1": 481, "serverproto": 481, "38470": 481, "test_compile_dir_maxlevel": 481, "38239": 481, "38275": 481, "38271": 481, "38270": 481, "37123": 481, "test_mymanag": 481, "_finalize_manag": 481, "38212": 481, "test_queue_feeder_donot_stop_onexc": 481, "38117": 481, "38018": 481, "37805": 481, "37876": 481, "36833": 481, "pydatetime_": 481, "_get_": 481, "37558": 481, "37526": 481, "test_distutil": 481, "test_build_ext": 481, "_run_fin": 481, "37472": 481, "outstanding_bug": 481, "37199": 481, "19696": 481, "test_pkg_import": 481, "37335": 481, "37411": 481, "test_wsgiref": 481, "testenviron": 481, "37400": 481, "test_chown_gid": 481, "37359": 481, "test_python_": 481, "cleantest": 481, "37362": 481, "37278": 481, "proactorloopctrlc": 481, "37261": 481, "37069": 481, "37252": 481, "test_clos": 481, "test_events_mask_overflow": 481, "37169": 481, "_pyobject_isfre": 481, "37153": 481, "test_multiprocess": 481, "34001": 481, "36919": 481, "test_source_encod": 481, "test_issue2301": 481, "30202": 481, "test_abc": 481, "macaddr": 481, "34596": 481, "uncal": 481, "naitre": 481, "38809": 481, "38684": 481, "38468": 481, "getvar": 481, "37415": 481, "stdatom": 481, "atomic_uintptr_t": 481, "38301": 481, "d_reentrant": 481, "36002": 481, "ac_path_tool": 481, "ac_path_target_tool": 481, "37936": 481, "gitignor": 481, "repo": 481, "37760": 481, "37725": 481, "37468": 481, "wininst": 481, "37189": 481, "pyrun_": 481, "25361": 481, "36210": 481, "asi": 481, "libcurs": 481, "38589": 481, "38453": 481, "38519": 481, "38492": 481, "38344": 481, "38359": 481, "38355": 481, "38092": 481, "38133": 481, "38114": 481, "32592": 481, "36634": 481, "38081": 481, "38087": 481, "test_ntpath": 481, "38088": 481, "v142": 481, "37283": 481, "38030": 481, "38020": 481, "37705": 481, "winerror_to_errno": 481, "37549": 481, "1311": 481, "9949": 481, "36266": 481, "_pyimport_findsharedfuncptrwindow": 481, "nyayapati": 481, "25172": 481, "37778": 481, "37734": 481, "37702": 481, "37672": 481, "pip_us": 481, "37445": 481, "format_message_ignore_insert": 481, "formatmessagew": 481, "37369": 481, "37380": 481, "_activ": 481, "ruslan": 481, "kuprieiev": 481, "35360": 481, "37267": 481, "36779": 481, "cp_utf7": 481, "32587": 481, "28269": 481, "strcasecmp": 481, "_stricmp": 481, "minmin": 481, "gong": 481, "36590": 481, "rfcomm": 481, "38089": 481, "5mb": 481, "16mb": 481, "26353": 481, "4630": 481, "38598": 481, "36698": 481, "35379": 481, "editorwindow": 481, "38183": 481, "38077": 481, "38041": 481, "35771": 481, "hover_delay": 481, "test_tooltip": 481, "37824": 481, "37929": 481, "37902": 481, "37849": 481, "36419": 481, "37748": 481, "37692": 481, "37628": 481, "33610": 481, "37530": 481, "27452": 481, "removefil": 481, "createconfighandl": 481, "37325": 481, "37321": 481, "26806": 481, "37177": 481, "37039": 481, "35763": 481, "obtrus": 481, "36390": 481, "38118": 481, "38347": 481, "pathfix": 481, "37803": 481, "37942": 481, "argumentclin": 481, "37704": 481, "37675": 481, "37034": 481, "37064": 481, "pathscript": 481, "37633": 481, "38540": 481, "38395": 481, "36389": 481, "_pyobject_checkconsist": 481, "visit_decref": 481, "38266": 481, "38303": 481, "kieft": 481, "38205": 481, "38140": 481, "37926": 481, "37879": 481, "subtype_dealloc": 481, "37151": 481, "21120": 481, "37337": 481, "28805": 481, "positon": 481, "37215": 481, "36842": 481, "37170": 481, "35381": 481, "direntrytyp": 481, "scandiriteratortyp": 481, "34331": 481, "35907": 481, "9948": 481, "local_fil": 481, "33529": 481, "33164": 481, "35814": 481, "37126": 481, "37122": 481, "37087": 481, "37072": 481, "pyast_fromnodeobject": 481, "37029": 481, "26423": 481, "wrap_lenfunc": 481, "37050": 481, "expr_text": 481, "22385": 481, "36878": 481, "e1000": 481, "2180": 481, "36907": 481, "36826": 481, "namedexpress": 481, "ast_unpars": 481, "1875": 481, "36861": 481, "28866": 481, "36851": 481, "27639": 481, "blahay": 481, "erick": 481, "cervant": 481, "vaultah": 481, "36737": 481, "pyruntimest": 481, "24048": 481, "remove_modul": 481, "27987": 481, "36601": 481, "main_pid": 481, "36594": 481, "36045": 481, "36035": 481, "35983": 481, "20602": 481, "26826": 481, "31862": 481, "37120": 481, "12202": 481, "26835": 481, "29262": 481, "12639": 481, "35246": 481, "35279": 481, "37076": 481, "37054": 481, "_buffer": 481, "37058": 481, "37047": 481, "37049": 481, "37046": 481, "37045": 481, "37035": 481, "pollut": 481, "37001": 481, "36996": 481, "37008": 481, "27737": 481, "36969": 481, "36983": 481, "36972": 481, "36949": 481, "36948": 481, "33524": 481, "licht": 481, "takeuchi": 481, "24564": 481, "ying": 481, "36888": 481, "25652": 481, "36916": 481, "36889": 481, "writeon": 481, "readwrit": 481, "connect_unix": 481, "streamserv": 481, "flowcontrolmix": 481, "36845": 481, "23378": 481, "36867": 481, "23896": 481, "pygram": 481, "35545": 481, "36778": 481, "semaphore_track": 481, "24538": 481, "36832": 481, "36814": 481, "33110": 481, "26903": 481, "36813": 481, "36806": 481, "36802": 481, "36801": 481, "36748": 481, "8138": 481, "simpleserv": 481, "29183": 481, "36548": 481, "36542": 481, "36533": 481, "35252": 481, "36368": 481, "27497": 481, "ashish": 481, "nitin": 481, "patil": 481, "36239": 481, "keyedarch": 481, "35125": 481, "35721": 481, "31855": 481, "26660": 481, "34271": 481, "33569": 481, "34424": 481, "troeger": 481, "34303": 481, "33361": 481, "22454": 481, "31922": 481, "24882": 481, "31961": 481, "33123": 481, "buchholz": 481, "22102": 481, "facioni": 481, "32515": 481, "32299": 481, "vadim": 481, "tsander": 481, "27141": 481, "31829": 481, "x1a": 481, "23395": 481, "36896": 481, "36686": 481, "36984": 481, "36868": 481, "host_flag": 481, "35924": 481, "36783": 481, "time_fromtimeandfold": 481, "edison": 481, "abahurir": 481, "22865": 481, "35397": 481, "32995": 481, "33519": 481, "33482": 481, "25735": 481, "20285": 481, "test_coroutin": 481, "test_cprofil": 481, "test_rais": 481, "test_yield_from": 481, "37098": 481, "test_memfd_cr": 481, "37081": 481, "36915": 481, "36719": 481, "child_error": 481, "36816": 481, "selfsigned_pythontestdotnet": 481, "35925": 481, "distro": 481, "36782": 481, "36342": 481, "sem_open": 481, "36786": 481, "36965": 481, "status_control_c_exit": 481, "35926": 481, "1b": 481, "36231": 481, "35610": 481, "context_use_ps1": 481, "prompt_last_lin": 481, "31858": 481, "37038": 481, "36958": 481, "36807": 481, "usb": 481, "32411": 481, "37053": 481, "chih": 481, "36379": 481, "37107": 481, "_pyobject_callmethodidobjarg": 481, "_pyobject_getmethod": 481, "sullivan": 481, "36742": 481, "9740": 481, "35755": 481, "cs_path": 481, "32849": 481, "20180": 481, "36611": 481, "serialno": 481, "36549": 481, "36504": 481, "pycarraytype_new": 481, "20844": 481, "36452": 481, "36459": 481, "tok_nextc": 481, "36433": 481, "classmethoddescr_cal": 481, "36430": 481, "36440": 481, "parsererror": 481, "skrobov": 481, "18372": 481, "35952": 481, "1613500": 481, "36734": 481, "stack_t": 481, "current_stack": 481, "36650": 481, "28552": 481, "project_bas": 481, "find_execut": 481, "25430": 481, "ipnetwork": 481, "30485": 481, "36613": 481, "36598": 481, "36575": 481, "33461": 481, "36559": 481, "lean": 481, "34373": 481, "36232": 481, "rougeth": 481, "36050": 481, "36522": 481, "houglum": 481, "30427": 481, "maier": 481, "36385": 481, "36434": 481, "36407": 481, "surjaninov": 481, "36366": 481, "unstart": 481, "test_tim": 481, "faiur": 481, "36227": 481, "35936": 481, "35376": 481, "17396": 481, "35934": 481, "23078": 481, "felip": 481, "ochoa": 481, "35416": 481, "35082": 481, "34547": 481, "31658": 481, "34139": 481, "33291": 481, "31310": 481, "31292": 481, "36625": 481, "30840": 481, "36523": 481, "36425": 481, "36345": 481, "literalinclud": 481, "36157": 481, "33043": 481, "35581": 481, "33832": 481, "32913": 481, "36725": 481, "36454": 481, "test_monoton": 481, "test_cyclic_gc": 481, "36635": 481, "36629": 481, "test_imap4_host_default_valu": 481, "test_getallocatedblock": 481, "36560": 481, "36565": 481, "test_resourc": 481, "test_tabnanni": 481, "36436": 481, "pymem_buffer_overflow": 481, "test_utf8_mod": 481, "36341": 481, "36747": 481, "scriptsinstal": 481, "36618": 481, "fmax": 481, "movap": 481, "movup": 481, "36605": 481, "36577": 481, "36544": 481, "36146": 481, "36508": 481, "36503": 481, "aix4": 481, "35920": 481, "arm32": 481, "36649": 481, "34144": 481, "mend": 481, "36509": 481, "35941": 481, "36441": 481, "36010": 481, "29515": 481, "ipproto_ah": 481, "ipproto_cbt": 481, "ipproto_dstopt": 481, "ipproto_egp": 481, "ipproto_esp": 481, "ipproto_frag": 481, "ipproto_ggp": 481, "ipproto_hopopt": 481, "ipproto_iclfxbm": 481, "ipproto_icmpv6": 481, "ipproto_idp": 481, "ipproto_igmp": 481, "ipproto_igp": 481, "ipproto_ipv4": 481, "ipproto_ipv6": 481, "ipproto_l2tp": 481, "ipproto_max": 481, "ipproto_nd": 481, "ipproto_non": 481, "ipproto_pgm": 481, "ipproto_pim": 481, "ipproto_pup": 481, "ipproto_rdp": 481, "ipproto_rout": 481, "ipproto_sctp": 481, "ipproto_st": 481, "35947": 481, "34060": 481, "kloth": 481, "31512": 481, "18075": 481, "36429": 481, "14546": 481, "36641": 481, "pydoc_var": 481, "cleanbyt": 481, "deaddyt": 481, "36443": 481, "_py_preiniti": 481, "_pypreconfig": 481, "36025": 481, "36216": 481, "35121": 481, "36421": 481, "36412": 481, "36398": 481, "structseq_repr": 481, "36256": 481, "parsermodul": 481, "dfa": 481, "36365": 481, "36374": 481, "merge_consts_recurs": 481, "36236": 481, "36352": 481, "36301": 481, "36333": 481, "_pyruntimestate_fini": 481, "36332": 481, "36282": 481, "30040": 481, "36262": 481, "_py_dg_strtod": 481, "36252": 481, "36218": 481, "36188": 481, "vestig": 481, "martijn": 481, "pieter": 481, "36124": 481, "35808": 481, "36401": 481, "34745": 481, "_fields_default": 481, "36298": 481, "mental": 481, "36285": 481, "stephan": 481, "hohe": 481, "36272": 481, "36280": 481, "35931": 481, "36251": 481, "stderrprint": 481, "36235": 481, "customize_compil": 481, "35807": 481, "36139": 481, "36179": 481, "36169": 481, "36103": 481, "36130": 481, "35652": 481, "35178": 481, "tashrif": 481, "billah": 481, "36106": 481, "sinpi": 481, "dmitrii": 481, "pasechnik": 481, "36091": 481, "chen": 481, "36043": 481, "35899": 481, "21269": 481, "akshay": 481, "35843": 481, "_namespacepath": 481, "35802": 481, "35715": 481, "librat": 481, "_process_work": 481, "35493": 481, "35661": 481, "35198": 481, "36138": 481, "21314": 481, "36234": 481, "posixuidgidtest": 481, "test_r": 481, "test_locale_flag": 481, "36123": 481, "36356": 481, "test_extens": 481, "36312": 481, "50220": 481, "50221": 481, "50222": 481, "50225": 481, "50227": 481, "50229": 481, "57002": 481, "57011": 481, "65000": 481, "24643": 481, "_timezon": 481, "36405": 481, "36396": 481, "fgbg": 481, "gethighlight": 481, "36176": 481, "darken": 481, "23205": 481, "23216": 481, "36152": 481, "colordeleg": 481, "close_when_don": 481, "32129": 481, "blurri": 481, "36096": 481, "30348": 481, "35132": 481, "gdb7": 481, "32217": 481, "36142": 481, "coreconfig": 481, "pycore_coreconfig": 481, "36052": 481, "35942": 481, "35992": 481, "35993": 481, "35991": 481, "_randommodul": 481, "35961": 481, "slice_richcompar": 481, "35911": 481, "12822": 481, "pthread_condattr_setclock": 481, "31506": 481, "35724": 481, "33608": 481, "_py_addpendingcal": 481, "33989": 481, "35512": 481, "35918": 481, "18283": 481, "35960": 481, "35500": 481, "24209": 481, "35321": 481, "nina": 481, "zakharenko": 481, "35378": 481, "34294": 481, "35615": 481, "34572": 481, "burgess": 481, "36083": 481, "36007": 481, "22062": 481, "27313": 481, "comboboxtest": 481, "36019": 481, "36037": 481, "rhel8": 481, "35798": 481, "35505": 481, "35917": 481, "shareabl": 481, "35704": 481, "test_unpack_archive_xztar": 481, "maxdata": 481, "0x20000000": 481, "aixtool": 481, "34720": 481, "m_state": 481, "35976": 481, "35692": 481, "35872": 481, "35873": 481, "35299": 481, "24310": 481, "35833": 481, "35689": 481, "35746": 481, "5010": 481, "deref": 481, "talo": 481, "0758": 481, "nicola": 481, "edet": 481, "34812": 481, "34791": 481, "domreg": 481, "34623": 481, "14647": 481, "_py_hashsecret": 481, "34405": 481, "0i": 481, "33871": 481, "32533": 481, "33136": 481, "8970": 481, "x509_verify_param_set1_host": 481, "namelen": 481, "33001": 481, "32981": 481, "1061": 481, "35877": 481, "typed_ast": 481, "35720": 481, "pymain_parse_cmdline_impl": 481, "35634": 481, "35623": 481, "35214": 481, "test_io": 481, "35560": 481, "35552": 481, "35504": 481, "35494": 481, "35444": 481, "35436": 481, "35423": 481, "35357": 481, "magicproxi": 481, "from_kal": 481, "_mock_": 481, "35372": 481, "35336": 481, "31241": 481, "33954": 481, "35269": 481, "35193": 481, "35169": 481, "34022": 481, "28401": 481, "stefano": 481, "rivera": 481, "29341": 481, "35050": 481, "29743": 481, "16806": 481, "35029": 481, "34983": 481, "34974": 481, "34939": 481, "34973": 481, "34876": 481, "34879": 481, "bytesobject": 481, "34784": 481, "structsequ": 481, "34854": 481, "34824": 481, "30156": 481, "property_descr_get": 481, "34751": 481, "xxhash": 481, "34735": 481, "timemodul": 481, "34683": 481, "34653": 481, "pyparser_simpleparsestringfilenam": 481, "32236": 481, "34637": 481, "1621": 481, "34588": 481, "34485": 481, "_bootlocal": 481, "34527": 481, "34403": 481, "34523": 481, "12458": 481, "34408": 481, "34400": 481, "34377": 481, "_pyobject_realloc": 481, "34353": 481, "34320": 481, "34113": 481, "constantin": 481, "petrisor": 481, "34100": 481, "34151": 481, "34170": 481, "33237": 481, "34149": 481, "34125": 481, "34141": 481, "34126": 481, "24618": 481, "34068": 481, "34087": 481, "34080": 481, "34066": 481, "34042": 481, "33418": 481, "33985": 481, "33956": 481, "24596": 481, "33451": 481, "1617161": 481, "33824": 481, "33803": 481, "33738": 481, "33786": 481, "30167": 481, "33706": 481, "gohlk": 481, "30654": 481, "kerl": 481, "33622": 481, "25711": 481, "33509": 481, "31849": 481, "33475": 481, "20104": 481, "33391": 481, "set_symmetric_differ": 481, "33363": 481, "28055": 481, "eik": 481, "33128": 481, "33331": 481, "33312": 481, "_dictkeysobject": 481, "33305": 481, "33306": 481, "33270": 481, "30455": 481, "33176": 481, "33231": 481, "normalizestr": 481, "33205": 481, "round_up_to_power_2": 481, "hashtable_s": 481, "29922": 481, "33199": 481, "33138": 481, "33018": 481, "25750": 481, "33026": 481, "33005": 481, "_pygilstate_reinit": 481, "_pyinterpreterstate_en": 481, "32911": 481, "29463": 481, "7a1": 481, "17288": 481, "32946": 481, "32932": 481, "32925": 481, "32889": 481, "py_address_in_rang": 481, "32836": 481, "31356": 481, "ensure_dis": 481, "32711": 481, "32583": 481, "31902": 481, "25862": 481, "21983": 481, "31577": 481, "29832": 481, "getsockaddrarg": 481, "35845": 481, "35847": 481, "ctypes_pass_by_ref_hack": 481, "test_pass_by_valu": 481, "35780": 481, "misord": 481, "23846": 481, "34323": 481, "35674": 481, "35733": 481, "35726": 481, "35719": 481, "35717": 481, "35699": 481, "32710": 481, "readfil": 481, "wsasend": 481, "35682": 481, "35643": 481, "35619": 481, "28503": 481, "35614": 481, "35568": 481, "35588": 481, "35585": 481, "30561": 481, "35526": 481, "35523": 481, "selinux": 481, "31784": 481, "1e9": 481, "35513": 481, "35502": 481, "35348": 481, "35491": 481, "baseprocess": 481, "35477": 481, "31446": 481, "createprocessw": 481, "35052": 481, "20239": 481, "17185": 481, "35445": 481, "35415": 481, "35424": 481, "35330": 481, "35346": 481, "rhapsodi": 481, "10496": 481, "check_environ": 481, "35389": 481, "cs_gnu_libc_vers": 481, "35394": 481, "35310": 481, "oran": 481, "avraham": 481, "35380": 481, "35341": 481, "ismo": 481, "toijala": 481, "35371": 481, "ver": 481, "35066": 481, "35344": 481, "35312": 481, "35308": 481, "24746": 481, "jairo": 481, "trad": 481, "28604": 481, "35277": 481, "35226": 481, "35189": 481, "fnctl": 481, "calcel": 481, "35186": 481, "bdist_dumb": 481, "35152": 481, "35062": 481, "35065": 481, "_untrack_read": 481, "35079": 481, "sequencemanag": 481, "35017": 481, "35024": 481, "agren": 481, "31047": 481, "35053": 481, "34794": 481, "34909": 481, "35022": 481, "35008": 481, "23420": 481, "33947": 481, "34890": 481, "34521": 481, "recvfd": 481, "31522": 481, "34970": 481, "34969": 481, "16965": 481, "34966": 481, "34926": 481, "asthana": 481, "34941": 481, "32680": 481, "34769": 481, "34936": 481, "selection_el": 481, "34911": 481, "34922": 481, "34925": 481, "34900": 481, "oliveira": 481, "34844": 481, "strformatstyl": 481, "percentstyl": 481, "stringtemplatestyl": 481, "34897": 481, "34871": 481, "28441": 481, "34866": 481, "34711": 481, "34872": 481, "34849": 481, "34819": 481, "34758": 481, "34789": 481, "delfino": 481, "34334": 481, "5950": 481, "34728": 481, "34738": 481, "29577": 481, "31177": 481, "34672": 481, "34666": 481, "awrit": 481, "6721": 481, "34658": 481, "after_par": 481, "34652": 481, "34638": 481, "34536": 481, "34636": 481, "34630": 481, "32490": 481, "34363": 481, "34625": 481, "32270": 481, "34622": 481, "34610": 481, "34421": 481, "34604": 481, "grzybowski": 481, "34574": 481, "8110": 481, "34530": 481, "34563": 481, "peeknamedpip": 481, "34558": 481, "_aix": 481, "22872": 481, "34515": 481, "13312": 481, "34472": 481, "sila": 481, "sewel": 481, "34454": 481, "izbyshev": 481, "6700": 481, "34171": 481, "34441": 481, "34427": 481, "34412": 481, "31715": 481, "mjs": 481, "34384": 481, "22602": 481, "2152": 481, "34341": 481, "34333": 481, "18540": 481, "26502": 481, "34318": 481, "33613": 481, "34248": 481, "34246": 481, "blum": 481, "aguiar": 481, "woellert": 481, "32321": 481, "wright": 481, "34263": 481, "34035": 481, "32215": 481, "34251": 481, "19891": 481, "homedir": 481, "34228": 481, "13041": 481, "zbyszek": 481, "34213": 481, "34052": 481, "34197": 481, "32788": 481, "__adapt__": 481, "21446": 481, "940286": 481, "showtop": 481, "34164": 481, "33729": 481, "34097": 481, "34108": 481, "34070": 481, "27494": 481, "33967": 481, "34041": 481, "34056": 481, "34054": 481, "34043": 481, "34044": 481, "34010": 481, "34019": 481, "bumsik": 481, "33978": 481, "14117": 481, "33974": 481, "27500": 481, "24567": 481, "25007": 481, "33929": 481, "popen_spawn_win32": 481, "33916": 481, "32568": 481, "33833": 481, "proactorsockettransport": 481, "33663": 481, "26544": 481, "33843": 481, "33842": 481, "33805": 481, "33687": 481, "furrer": 481, "33812": 481, "32108": 481, "27397": 481, "33578": 481, "30805": 481, "33476": 481, "enriqu": 481, "perez": 481, "terron": 481, "33694": 481, "32493": 481, "uuid_enc_b": 481, "33274": 481, "33778": 481, "33165": 481, "33770": 481, "33769": 481, "ssltransport": 481, "33767": 481, "33734": 481, "31014": 481, "33197": 481, "_parameterkind": 481, "32684": 481, "33654": 481, "33674": 481, "512mib": 481, "sslprotocol": 481, "31647": 481, "32610": 481, "33469": 481, "33672": 481, "33652": 481, "33238": 481, "haydaman": 481, "33625": 481, "33623": 481, "sigsgv": 481, "11874": 481, "wrappabl": 481, "30877": 481, "fos": 481, "7062": 481, "33582": 481, "33570": 481, "pre6": 481, "28556": 481, "12486": 481, "33548": 481, "_candidate_tempdir_list": 481, "33109": 481, "33541": 481, "_strptime": 481, "localetim": 481, "__pad": 481, "_localetime__pad": 481, "33536": 481, "33542": 481, "get_nod": 481, "duid": 481, "zvi": 481, "effron": 481, "26819": 481, "33516": 481, "28612": 481, "ladi": 481, "wirtz": 481, "28167": 481, "33504": 481, "33505": 481, "33497": 481, "amber": 481, "33495": 481, "26103": 481, "hall": 481, "33453": 481, "prs": 481, "paulius": 481, "arka": 481, "dombrova": 481, "33365": 481, "strigl": 481, "20087": 481, "33422": 481, "33281": 481, "33311": 481, "blondon": 481, "27300": 481, "32933": 481, "fluri": 481, "33383": 481, "33375": 481, "33336": 481, "6851": 481, "32455": 481, "27485": 481, "33332": 481, "sigfillset": 481, "33251": 481, "33329": 481, "33334": 481, "991266": 481, "33131": 481, "33308": 481, "line_info": 481, "col_info": 481, "23403": 481, "33266": 481, "11594": 481, "33254": 481, "33265": 481, "33263": 481, "starostin": 481, "33256": 481, "33144": 481, "33185": 481, "0b3": 481, "29613": 481, "33203": 481, "33224": 481, "mdiff": 481, "33209": 481, "32861": 481, "lazar": 481, "33175": 481, "33141": 481, "33096": 481, "32873": 481, "33134": 481, "33127": 481, "32505": 481, "33078": 481, "33116": 481, "32896": 481, "33100": 481, "32953": 481, "32968": 481, "33061": 481, "33064": 481, "33056": 481, "33021": 481, "31804": 481, "33034": 481, "eaton": 481, "30249": 481, "33037": 481, "27683": 481, "22674": 481, "32999": 481, "33009": 481, "32969": 481, "32056": 481, "32970": 481, "32844": 481, "32960": 481, "32713": 481, "joffrey": 481, "fuhrer": 481, "32257": 481, "32929": 481, "32146": 481, "32922": 481, "32759": 481, "32859": 481, "dup3": 481, "32556": 481, "_getfinalpathnam": 481, "_getvolumepathnam": 481, "_getdiskusag": 481, "21060": 481, "32857": 481, "after_cancel": 481, "32852": 481, "_abc_registri": 481, "_abc_cach": 481, "_abc_negative_cach": 481, "_dump_registri": 481, "_abc_registry_clear": 481, "_abc_caches_clear": 481, "32841": 481, "32819": 481, "19675": 481, "32394": 481, "31787": 481, "30157": 481, "32775": 481, "32622": 481, "32777": 481, "32647": 481, "libdl": 481, "32691": 481, "mod_spec": 481, "32734": 481, "32727": 481, "31453": 481, "20180309043602": 481, "ssl_ctx_set_min_proto_vers": 481, "24334": 481, "31848": 481, "aifc_read": 481, "initfp": 481, "ssnd": 481, "32512": 481, "8525": 481, "29877": 481, "32221": 481, "scopeid": 481, "32147": 481, "31908": 481, "31608": 481, "31425": 481, "gps": 481, "andersson": 481, "22005": 481, "16865": 481, "29456": 481, "hangul": 481, "u1176": 481, "u11a7": 481, "u11c3": 481, "21257": 481, "34764": 481, "35564": 481, "master_doc": 481, "35511": 481, "10536": 481, "35089": 481, "35038": 481, "unexist": 481, "f_restrict": 481, "35042": 481, "35044": 481, "35035": 481, "34967": 481, "add_object_typ": 481, "description_unit": 481, "34913": 481, "32174": 481, "charat": 481, "11233": 481, "34552": 481, "28617": 481, "stdtype": 481, "20177": 481, "34065": 481, "33460": 481, "33847": 481, "33409": 481, "versionad": 481, "parameterkind": 481, "17045": 481, "33736": 481, "23859": 481, "33594": 481, "33503": 481, "33421": 481, "33487": 481, "33378": 481, "33276": 481, "33201": 481, "33195": 481, "33126": 481, "27212": 481, "28247": 481, "18802": 481, "27428": 481, "himanshu": 481, "lakhara": 481, "17232": 481, "32800": 481, "11015": 481, "32613": 481, "8722": 481, "32614": 481, "20709": 481, "gehrck": 481, "32722": 481, "31972": 481, "30607": 481, "8243": 481, "32337": 481, "25041": 481, "31432": 481, "35772": 481, "tmpfs": 481, "punch": 481, "35045": 481, "unbreak": 481, "test_min_max_vers": 481, "test_sendfil": 481, "33717": 481, "35488": 481, "31731": 481, "check_interrupted_writ": 481, "test_multiprocessing_main_handl": 481, "35519": 481, "test_xmlrpc": 481, "34279": 481, "testdidnotrun": 481, "35412": 481, "test_future4": 481, "26704": 481, "35352": 481, "35317": 481, "test_email": 481, "test_localtime_daylight_true_dst_tru": 481, "test_localtime_daylight_false_dst_tru": 481, "21263": 481, "34962": 481, "docstest": 481, "23596": 481, "34537": 481, "test_str": 481, "34587": 481, "rdstest": 481, "testcongest": 481, "34661": 481, "34200": 481, "flaki": 481, "test_pkg": 481, "scari": 481, "module_cleanup": 481, "34569": 481, "34594": 481, "34579": 481, "34542": 481, "3072": 481, "11193": 481, "test_undecodable_env": 481, "34347": 481, "test_cmd_lin": 481, "34490": 481, "34391": 481, "11192": 481, "inet_pton6_zon": 481, "34399": 481, "test_mktim": 481, "test_pthread_getcpuclickid": 481, "_pytime_localtim": 481, "11191": 481, "test_search_cpp": 481, "33746": 481, "33901": 481, "test_dbm_gnu": 481, "33873": 481, "33562": 481, "33655": 481, "test_posix_falloc": 481, "zfs": 481, "32962": 481, "mcet": 481, "fcf": 481, "33358": 481, "test_pre_initialization_sys_opt": 481, "32872": 481, "32517": 481, "32663": 481, "smtputf8simtest": 481, "27643": 481, "test_c": 481, "19417": 481, "31809": 481, "secp": 481, "34691": 481, "35683": 481, "35642": 481, "asynciomodul": 481, "vcxproj": 481, "35550": 481, "__sun": 481, "__svr4": 481, "35499": 481, "35257": 481, "35351": 481, "35139": 481, "inlinefunctionexpans": 481, "onlyexplicitinlin": 481, "ob1": 481, "35011": 481, "pyexpatn": 481, "28015": 481, "34765": 481, "automak": 481, "34585": 481, "34710": 481, "pedant": 481, "34582": 481, "devop": 481, "34081": 481, "34555": 481, "have_linux_vm_sockets_h": 481, "have_sockaddr_alg": 481, "33015": 481, "34245": 481, "34121": 481, "30345": 481, "5755": 481, "33614": 481, "33648": 481, "33522": 481, "visualstudio": 481, "33512": 481, "33483": 481, "33394": 481, "33377": 481, "r6": 481, "riscv": 481, "32232": 481, "33182": 481, "33163": 481, "v39": 481, "33012": 481, "32898": 481, "29442": 481, "35890": 481, "wcstok": 481, "32560": 481, "35854": 481, "35811": 481, "35797": 481, "35758": 481, "29734": 481, "35596": 481, "35402": 481, "35401": 481, "34977": 481, "35067": 481, "_distutils_findv": 481, "vswhere": 481, "32557": 481, "34770": 481, "pyshellext": 481, "34603": 481, "34581": 481, "socketmodul": 481, "34532": 481, "34062": 481, "34225": 481, "34011": 481, "34006": 481, "31546": 481, "matplotlib": 481, "30237": 481, "readconsol": 481, "cancelsynchronousio": 481, "33895": 481, "29097": 481, "86400": 481, "33316": 481, "33184": 481, "32890": 481, "33016": 481, "32903": 481, "32901": 481, "31966": 481, "32409": 481, "32457": 481, "32370": 481, "ipconfig": 481, "29248": 481, "printnameoffset": 481, "holmquist": 481, "sse4": 481, "1104": 481, "summaryinfo": 481, "35025": 481, "24658": 481, "33635": 481, "_recursivewildcardselector": 481, "_iterate_directori": 481, "13631": 481, "32726": 481, "activetcl": 481, "31903": 481, "systemconfigur": 481, "35770": 481, "35769": 481, "untitl": 481, "35660": 481, "35641": 481, "34055": 481, "35591": 481, "35196": 481, "squeezer": 481, "35598": 481, "config_key": 481, "28097": 481, "35208": 481, "35555": 481, "gray": 481, "35521": 481, "22703": 481, "35213": 481, "34864": 481, "35202": 481, "33000": 481, "overfil": 481, "23220": 481, "35099": 481, "35097": 481, "35093": 481, "35088": 481, "copy_str": 481, "35087": 481, "34548": 481, "unsqueez": 481, "34047": 481, "34275": 481, "34120": 481, "unrespons": 481, "33975": 481, "htest": 481, "33905": 481, "stackview": 481, "stackbrows": 481, "33924": 481, "mainmenu": 481, "menudef": 481, "33906": 481, "33917": 481, "idle_test": 481, "33904": 481, "rstripextens": 481, "33907": 481, "calltip_w": 481, "calltipwindow": 481, "33856": 481, "33839": 481, "33855": 481, "33763": 481, "33664": 481, "slider": 481, "33628": 481, "codecontext": 481, "33564": 481, "21474": 481, "33204": 481, "32984": 481, "32940": 481, "stringtranslatepseudomap": 481, "32916": 481, "32905": 481, "32874": 481, "32837": 481, "32826": 481, "test_help_about": 481, "test_file_button": 481, "32831": 481, "32765": 481, "34989": 481, "20260": 481, "read_var": 481, "33189": 481, "31920": 481, "krasnikov": 481, "29673": 481, "pystackv": 481, "pystack": 481, "32885": 481, "32222": 481, "harradin": 481, "31583": 481, "33817": 481, "35322": 481, "35296": 481, "pycore_": 481, "35259": 481, "neufeld": 481, "34725": 481, "34910": 481, "34193": 481, "34127": 481, "23927": 481, "pycompile_opcodestackeffectwithjump": 481, "34008": 481, "32500": 481, "33042": 481, "32374": 481, "30863": 481, "33851": 481, "33932": 481, "7b1": 481, "threadedhttpserv": 481, "32703": 481, "32650": 481, "32685": 481, "32697": 481, "26163": 481, "0rc1": 481, "24340": 481, "18533": 481, "20891": 481, "32028": 481, "31113": 481, "30306": 481, "32513": 481, "32660": 481, "fionread": 481, "fionclex": 481, "fioclex": 481, "fioasync": 481, "fionbio": 481, "27931": 481, "32643": 481, "_step": 481, "_wakeup": 481, "_schedule_callback": 481, "32502": 481, "32596": 481, "32576": 481, "32574": 481, "melero": 481, "32521": 481, "32467": 481, "32473": 481, "libtirpc": 481, "32503": 481, "29237": 481, "32404": 481, "32228": 481, "22908": 481, "31853": 481, "x509_verify_param_set1_ip": 481, "32724": 481, "32649": 481, "17799": 481, "32721": 481, "32602": 481, "32549": 481, "32635": 481, "libxcrypt": 481, "32598": 481, "ax_check_openssl": 481, "32593": 481, "32588": 481, "29911": 481, "32507": 481, "32681": 481, "timzon": 481, "32399": 481, "rfc4122": 481, "uuid_creat": 481, "32390": 481, "32143": 481, "32379": 481, "32259": 481, "27169": 481, "22091": 481, "32329": 481, "30416": 481, "32282": 481, "versionhelp": 481, "32260": 481, "32225": 481, "31901": 481, "32506": 481, "32279": 481, "32278": 481, "32499": 481, "32468": 481, "32422": 481, "31721": 481, "_log_traceback": 481, "26133": 481, "32363": 481, "32357": 481, "python_coroutin": 481, "cython_coroutin": 481, "32323": 481, "32302": 481, "v140": 481, "29711": 481, "stop_serv": 481, "17852": 481, "misunderstand": 481, "_py_pyatexit": 481, "_get_running_loop": 481, "32255": 481, "32277": 481, "32273": 481, "test_util": 481, "32272": 481, "classify_class_attr": 481, "ouput": 481, "32199": 481, "26439": 481, "31993": 481, "31802": 481, "31699": 481, "abstractserv": 481, "32252": 481, "faulthandler_suppress_crash_report": 481, "24960": 481, "32030": 481, "29084": 481, "32264": 481, "pygetopt": 481, "32241": 481, "wchar": 481, "32176": 481, "co_nofre": 481, "32137": 481, "32096": 481, "_pyruntime_initi": 481, "28180": 481, "_py_setlocalefromenv": 481, "31949": 481, "30696": 481, "20047": 481, "21720": 481, "31845": 481, "28936": 481, "31825": 481, "escape_decod": 481, "31618": 481, "28603": 481, "zane": 481, "bitter": 481, "31786": 481, "31781": 481, "31626": 481, "30817": 481, "32214": 481, "27240": 481, "30788": 481, "31831": 481, "32182": 481, "rfc2231": 481, "32186": 481, "32101": 481, "32154": 481, "32089": 481, "preferenti": 481, "12239": 481, "vt_empti": 481, "mahon": 481, "28334": 481, "dimitri": 481, "merejkowski": 481, "31325": 481, "wellner": 481, "12382": 481, "ter": 481, "19610": 481, "28684": 481, "32110": 481, "27535": 481, "32088": 481, "1647489": 481, "32072": 481, "32069": 481, "32046": 481, "32018": 481, "32037": 481, "32034": 481, "32015": 481, "32011": 481, "28369": 481, "31976": 481, "7bc817d5ba917528e8bd07ec461c635291e7b06a": 481, "9678": 481, "takayuki": 481, "shimizukawa": 481, "30057": 481, "31933": 481, "poolexecutor": 481, "31927": 481, "27666": 481, "chtype": 481, "mmask_t": 481, "fink": 481, "31917": 481, "31897": 481, "25720": 481, "31893": 481, "kqueue_ev": 481, "31891": 481, "31884": 481, "28281": 481, "gollahon": 481, "30639": 481, "30768": 481, "intr_flag": 481, "31854": 481, "31834": 481, "ssse3": 481, "28416": 481, "31653": 481, "28326": 481, "superset_of": 481, "31827": 481, "31457": 481, "31806": 481, "31803": 481, "31800": 481, "30143": 481, "31770": 481, "31752": 481, "31620": 481, "poller": 481, "31632": 481, "15037": 481, "31307": 481, "31334": 481, "riccardo": 481, "coccioli": 481, "31308": 481, "immun": 481, "30553": 481, "misdirect": 481, "32105": 481, "31380": 481, "test_httpserv": 481, "test_undecodable_fil": 481, "apf": 481, "31705": 481, "test_sha256": 481, "enokey": 481, "32138": 481, "requires_android_level": 481, "32136": 481, "28668": 481, "requires_multiprocessing_queu": 481, "32126": 481, "test_get_event_loop_new_process": 481, "test_ev": 481, "31174": 481, "test_unpars": 481, "directorytestcas": 481, "28538": 481, "28762": 481, "29040": 481, "r14": 481, "32059": 481, "detect_modul": 481, "sysroot": 481, "31957": 481, "31609": 481, "31934": 481, "31926": 481, "28791": 481, "28643": 481, "31866": 481, "1102": 481, "error_no_more_item": 481, "tuininga": 481, "31944": 481, "31857": 481, "31392": 481, "2m": 481, "32207": 481, "32164": 481, "tabbedpag": 481, "tabbedpageset": 481, "32100": 481, "pathbrows": 481, "31836": 481, "test_code_modul": 481, "ditto": 481, "32159": 481, "svneol": 481, "treesync": 481, "30722": 481, "redemo": 481, "sarnowski": 481, "32125": 481, "py_useclassexceptionsflag": 481, "31642": 481, "31708": 481, "30404": 481, "31619": 481, "31602": 481, "31592": 481, "31588": 481, "31566": 481, "31505": 481, "make_encod": 481, "31492": 481, "31478": 481, "31336": 481, "31410": 481, "31315": 481, "create_dynam": 481, "31311": 481, "31293": 481, "31285": 481, "30058": 481, "31672": 481, "31701": 481, "31728": 481, "bm_regex_compil": 481, "30397": 481, "31675": 481, "31673": 481, "adderrorinfo": 481, "30806": 481, "25351": 481, "20519": 481, "28293": 481, "31596": 481, "30347": 481, "30346": 481, "31556": 481, "31516": 481, "31525": 481, "sqlite3_prepare_v2": 481, "27541": 481, "31351": 481, "31537": 481, "30085": 481, "31696": 481, "31625": 481, "ranlib": 481, "31624": 481, "22140": 481, "31569": 481, "31536": 481, "31460": 481, "flist": 481, "31649": 481, "_htest": 481, "_utest": 481, "31559": 481, "test_brows": 481, "31459": 481, "yesterday": 481, "31500": 481, "hidpi": 481, "31532": 481, "29781": 481, "29505": 481, "fuzz": 481, "30947": 481, "30730": 481, "30694": 481, "9233": 481, "9063": 481, "0718": 481, "0876": 481, "flood": 481, "5300": 481, "xml_sethashsalt": 481, "30500": 481, "splithost": 481, "29591": 481, "4472": 481, "537": 481, "31490": 481, "31471": 481, "31418": 481, "31416": 481, "defaultact": 481, "31411": 481, "onceregistri": 481, "31373": 481, "demot": 481, "30465": 481, "30860": 481, "31347": 481, "_pyobject_fastcall_prepend": 481, "31343": 481, "sysmacro": 481, "libray": 481, "31291": 481, "31271": 481, "31243": 481, "30721": 481, "31070": 481, "_get_module_lock": 481, "30747": 481, "_py_atomic_stor": 481, "_py_atomic_load": 481, "31095": 481, "31071": 481, "30978": 481, "30808": 481, "_py_atom": 481, "30876": 481, "reimport": 481, "30703": 481, "30765": 481, "pthread_mutex_lock": 481, "31161": 481, "30814": 481, "30736": 481, "30604": 481, "co_extra_freefunc": 481, "30597": 481, "30682": 481, "30501": 481, "30486": 481, "25324": 481, "29104": 481, "27945": 481, "duan": 481, "griffin": 481, "25794": 481, "30039": 481, "12414": 481, "29839": 481, "29914": 481, "29949": 481, "29935": 481, "29816": 481, "29894": 481, "29859": 481, "pthread_": 481, "29849": 481, "28856": 481, "29723": 481, "29139": 481, "29714": 481, "29695": 481, "28893": 481, "28876": 481, "29683": 481, "coleman": 481, "29684": 481, "segv": 481, "28598": 481, "29607": 481, "29602": 481, "29347": 481, "29438": 481, "29478": 481, "mircea": 481, "cosbuc": 481, "29319": 481, "runmainfromimport": 481, "29337": 481, "29327": 481, "29034": 481, "path_convert": 481, "29159": 481, "29049": 481, "28932": 481, "25677": 481, "layzel": 481, "28596": 481, "26919": 481, "28991": 481, "28147": 481, "28739": 481, "28512": 481, "28918": 481, "28797": 481, "pyeval_getcallstat": 481, "28782": 481, "28774": 481, "28731": 481, "_pydict_newpres": 481, "28532": 481, "27100": 481, "ellington": 481, "28746": 481, "26920": 481, "langinfo": 481, "28648": 481, "astral": 481, "28665": 481, "19398": 481, "28621": 481, "28580": 481, "28583": 481, "28128": 481, "28509": 481, "28426": 481, "28517": 481, "28214": 481, "23782": 481, "_pytraceback_add": 481, "28183": 481, "28379": 481, "28376": 481, "range_iter": 481, "26906": 481, "18287": 481, "koep": 481, "24098": 481, "28201": 481, "28350": 481, "26617": 481, "27942": 481, "28289": 481, "21578": 481, "28203": 481, "soumya": 481, "sharma": 481, "28086": 481, "unscath": 481, "27955": 481, "28192": 481, "27441": 481, "27222": 481, "long_rshift": 481, "28131": 481, "compile_sourc": 481, "28126": 481, "py_memcpi": 481, "28120": 481, "26182": 481, "28721": 481, "31499": 481, "31482": 481, "mitar": 481, "31544": 481, "31234": 481, "31431": 481, "approx": 481, "31400": 481, "27629": 481, "28958": 481, "28182": 481, "27340": 481, "31178": 481, "31350": 481, "31170": 481, "31326": 481, "27144": 481, "31281": 481, "10746": 481, "22536": 481, "29741": 481, "31249": 481, "workitem": 481, "31247": 481, "31238": 481, "serverthread": 481, "docserv": 481, "serve_until_quit": 481, "5001": 481, "31109": 481, "30102": 481, "openssl_add_all_algorithms_noconf": 481, "power8": 481, "serra": 481, "scalet": 481, "31183": 481, "diagnosi": 481, "luciano": 481, "ramalho": 481, "uninform": 481, "convert_to_error": 481, "31169": 481, "drallensmith": 481, "31185": 481, "include_fil": 481, "31135": 481, "31107": 481, "31061": 481, "30987": 481, "30502": 481, "30919": 481, "26732": 481, "29403": 481, "gallagh": 481, "30961": 481, "19896": 481, "30946": 481, "25684": 481, "30886": 481, "29854": 481, "30319": 481, "30828": 481, "cfutur": 481, "30807": 481, "30441": 481, "29293": 481, "sleeper": 481, "30532": 481, "9146": 481, "29169": 481, "30119": 481, "30879": 481, "30746": 481, "30664": 481, "29212": 481, "y_n": 481, "29755": 481, "30616": 481, "30038": 481, "23894": 481, "24484": 481, "30589": 481, "28994": 481, "30645": 481, "alexandru": 481, "ardelean": 481, "30624": 481, "30595": 481, "30605": 481, "misplac": 481, "29870": 481, "sgha": 481, "er": 481, "27585": 481, "mathieu": 481, "sornay": 481, "30418": 481, "30463": 481, "30557": 481, "30245": 481, "yuan": 481, "30378": 481, "30470": 481, "wijaya": 481, "30414": 481, "_feed": 481, "30003": 481, "30149": 481, "30301": 481, "30375": 481, "30329": 481, "wsaeinval": 481, "10022": 481, "29196": 481, "30299": 481, "30048": 481, "30266": 481, "30340": 481, "30298": 481, "weaken": 481, "subsequenti": 481, "29990": 481, "30243": 481, "30185": 481, "fasaraki": 481, "hilliard": 481, "30205": 481, "30228": 481, "30190": 481, "30101": 481, "29822": 481, "nate": 481, "soar": 481, "29960": 481, "bryan": 481, "30070": 481, "22352": 481, "30061": 481, "sizeabl": 481, "30218": 481, "30068": 481, "_iobas": 481, "29694": 481, "29692": 481, "unchain": 481, "siddharth": 481, "velankar": 481, "26187": 481, "9303": 481, "30017": 481, "29998": 481, "29649": 481, "29931": 481, "sanjay": 481, "sundaresan": 481, "29953": 481, "29942": 481, "10030": 481, "29204": 481, "27863": 481, "28699": 481, "23890": 481, "29901": 481, "25803": 481, "29861": 481, "29884": 481, "zeitouni": 481, "25455": 481, "29800": 481, "seifert": 481, "8256": 481, "29619": 481, "28298": 481, "intabl": 481, "29645": 481, "28231": 481, "26915": 481, "29623": 481, "_v2": 481, "28963": 481, "subprocessstreamprotocol": 481, "29271": 481, "29703": 481, "29615": 481, "motejlek": 481, "29376": 481, "28624": 481, "sayan": 481, "chowdhuri": 481, "28518": 481, "29742": 481, "29532": 481, "29110": 481, "29534": 481, "_pydecim": 481, "29100": 481, "29416": 481, "29444": 481, "wgh": 481, "29368": 481, "29338": 481, "29335": 481, "29290": 481, "28735": 481, "magickmock": 481, "29197": 481, "29210": 481, "29219": 481, "29195": 481, "28969": 481, "29142": 481, "28961": 481, "jiajun": 481, "huang": 481, "15812": 481, "brees": 481, "28985": 481, "dingyuan": 481, "29079": 481, "13051": 481, "tycho": 481, "andersen": 481, "9770": 481, "28427": 481, "28923": 481, "28871": 481, "19542": 481, "16255": 481, "28779": 481, "26937": 481, "27030": 481, "28835": 481, "28752": 481, "28727": 481, "sre_pattern": 481, "18383": 481, "20572": 481, "25659": 481, "28548": 481, "19717": 481, "28563": 481, "28387": 481, "cufr": 481, "27517": 481, "fogl": 481, "28549": 481, "ncurses6": 481, "28449": 481, "23262": 481, "broytman": 481, "24241": 481, "27939": 481, "28255": 481, "prweek": 481, "20491": 481, "kaarl": 481, "ritvanen": 481, "28353": 481, "28430": 481, "27025": 481, "25464": 481, "header_exist": 481, "addin": 481, "28488": 481, "28469": 481, "28115": 481, "18219": 481, "28448": 481, "23214": 481, "28480": 481, "28240": 481, "24452": 481, "20766": 481, "27998": 481, "28317": 481, "28380": 481, "28229": 481, "28321": 481, "28225": 481, "28227": 481, "27358": 481, "28322": 481, "leitch": 481, "28228": 481, "28226": 481, "28314": 481, "28148": 481, "localtime_r": 481, "schouten": 481, "28253": 481, "28275": 481, "27897": 481, "18893": 481, "madison": 481, "27611": 481, "displaystyl": 481, "27348": 481, "5a2": 481, "25651": 481, "27778": 481, "28200": 481, "25400": 481, "_sendfile_use_sendfil": 481, "28075": 481, "error_access_deni": 481, "25270": 481, "escape_encod": 481, "28181": 481, "antigrav": 481, "kaartic": 481, "sivaraam": 481, "25895": 481, "gerg": 481, "imreh": 481, "holtermann": 481, "28114": 481, "parse_envlist": 481, "27599": 481, "27906": 481, "conway": 481, "28174": 481, "larson": 481, "26654": 481, "iceboy": 481, "26909": 481, "28176": 481, "selectorloop": 481, "27759": 481, "28325": 481, "macurl2path": 481, "28368": 481, "28371": 481, "28372": 481, "28399": 481, "27972": 481, "24142": 481, "florian": 481, "29581": 481, "25532": 481, "30177": 481, "pietri": 481, "31294": 481, "21649": 481, "30803": 481, "thomassen": 481, "30176": 481, "30052": 481, "26985": 481, "19824": 481, "20314": 481, "12518": 481, "28929": 481, "25008": 481, "26355": 481, "29349": 481, "28513": 481, "29639": 481, "hostv4": 481, "hostv6": 481, "31320": 481, "31346": 481, "25674": 481, "tbs": 481, "30715": 481, "30822": 481, "extralargefil": 481, "test_zipfile64": 481, "30695": 481, "set_nomemori": 481, "remove_mem_hook": 481, "30357": 481, "grzegorz": 481, "grzywacz": 481, "30197": 481, "24932": 481, "28950": 481, "28683": 481, "26936": 481, "28666": 481, "23839": 481, "26944": 481, "28409": 481, "28217": 481, "_testconsol": 481, "26939": 481, "armv7": 481, "31354": 481, "21st": 481, "31341": 481, "30854": 481, "30687": 481, "vcvarsal": 481, "20210": 481, "29941": 481, "28787": 481, "29243": 481, "29643": 481, "27593": 481, "29572": 481, "27659": 481, "29384": 481, "26851": 481, "28768": 481, "_setmod": 481, "29080": 481, "23903": 481, "r13": 481, "20211": 481, "28849": 481, "_multiarch": 481, "10656": 481, "tristan": 481, "haubenwalln": 481, "optimi": 481, "28444": 481, "28208": 481, "28248": 481, "21124": 481, "13756": 481, "roumen": 481, "petrov": 481, "21085": 481, "rebas": 481, "28258": 481, "estonian": 481, "26661": 481, "15819": 481, "28676": 481, "gareth": 481, "ree": 481, "30389": 481, "31358": 481, "31340": 481, "v141": 481, "30581": 481, "30916": 481, "30731": 481, "gadget": 481, "23451": 481, "29579": 481, "25778": 481, "28896": 481, "28522": 481, "getpathp": 481, "28402": 481, "28333": 481, "28251": 481, "28110": 481, "28161": 481, "28162": 481, "28163": 481, "_open_osfhandl": 481, "28164": 481, "_pyio_get_console_typ": 481, "28138": 481, "31493": 481, "31488": 481, "parenmatch": 481, "31477": 481, "31480": 481, "31421": 481, "31414": 481, "31051": 481, "genpag": 481, "30617": 481, "outwin": 481, "31287": 481, "keyset": 481, "31206": 481, "highpag": 481, "31001": 481, "31205": 481, "keyspag": 481, "31130": 481, "31002": 481, "19903": 481, "31083": 481, "tabpag": 481, "31050": 481, "31004": 481, "fontpag": 481, "30781": 481, "31060": 481, "30853": 481, "vartrac": 481, "31003": 481, "30993": 481, "causal": 481, "create_font_tab": 481, "set_sampl": 481, "var_changed_font": 481, "test_font_set": 481, "test_indent_scal": 481, "30981": 481, "28523": 481, "30917": 481, "idleconf": 481, "30934": 481, "30913": 481, "30899": 481, "30881": 481, "30851": 481, "30870": 481, "8231": 481, "getusercfgdir": 481, "30779": 481, "configchang": 481, "changes_class_v4": 481, "test_config": 481, "changestest": 481, "configdialog_tests_v1": 481, "msg297804": 481, "30777": 481, "30495": 481, "textview": 481, "pep8": 481, "30723": 481, "30674": 481, "21519": 481, "29910": 481, "30728": 481, "6739": 481, "25514": 481, "subsubsect": 481, "30642": 481, "30290": 481, "30303": 481, "29071": 481, "28572": 481, "30983": 481, "polaco": 481, "penteado": 481, "29748": 481, "24037": 481, "29367": 481, "wrapperobject": 481, "28023": 481, "15369": 481, "microbenchmark": 481, "28102": 481, "30832": 481, "py_have_native_tl": 481, "29083": 481, "29058": 481, "28808": 481, "28748": 481, "_py_packagecontext": 481, "2o": 481, "29706": 481, "30353": 481, "32555": 481, "31518": 481, "sslv23_method": 481, "4rc1": 481, "31852": 481, "31641": 481, "3rc1": 481, "31662": 481, "uploadreleas": 481, "31423": 481, "29600": 481, "2159": 481, "26293": 481, "29094": 481, "29519": 481, "29316": 481, "29011": 481, "29203": 481, "29085": 481, "29061": 481, "brendan": 481, "donegan": 481, "29119": 481, "andra": 481, "bogildea": 481, "29055": 481, "neaten": 481, "29326": 481, "29409": 481, "29392": 481, "28087": 481, "test_asyncor": 481, "test_eintr": 481, "28990": 481, "hoho": 481, "28770": 481, "28898": 481, "have_long_long": 481, "28843": 481, "28600": 481, "28634": 481, "28639": 481, "mayfield": 481, "28652": 481, "28653": 481, "28703": 481, "28704": 481, "28471": 481, "28492": 481, "28500": 481, "26923": 481, "ebk": 481, "26796": 481, "lawrenz": 481, "25221": 481, "27080": 481, "27199": 481, "27948": 481, "x7b": 481, "x7d": 481, "28046": 481, "28071": 481, "25758": 481, "25856": 481, "26331": 481, "27999": 481, "26058": 481, "27911": 481, "exec_builtin_or_dynam": 481, "27961": 481, "27355": 481, "27870": 481, "25402": 481, "27214": 481, "long_invert": 481, "long_add": 481, "27506": 481, "27812": 481, "27811": 481, "27587": 481, "pvs": 481, "_pystate_addmodul": 481, "27792": 481, "26984": 481, "25604": 481, "24254": 481, "27662": 481, "list_new": 481, "py_size_max": 481, "27782": 481, "py_create_mod": 481, "27936": 481, "27487": 481, "27157": 481, "27558": 481, "28008": 481, "28732": 481, "28485": 481, "28037": 481, "sqlite3_get_autocommit": 481, "intransact": 481, "25283": 481, "10740": 481, "28070": 481, "24693": 481, "27137": 481, "1703178": 481, "28019": 481, "18401": 481, "matusiak": 481, "kimbrel": 481, "25969": 481, "14977": 481, "1542": 481, "28082": 481, "24594": 481, "17582": 481, "28047": 481, "27576": 481, "28027": 481, "27445": 481, "22450": 481, "pgen3": 481, "load_grammar": 481, "28005": 481, "26667": 481, "27570": 481, "22233": 481, "27988": 481, "tautolog": 481, "27776": 481, "27691": 481, "gen_rid": 481, "25761": 481, "sweet32": 481, "25387": 481, "27866": 481, "11620": 481, "12885": 481, "27881": 481, "27861": 481, "19884": 481, "27706": 481, "nofar": 481, "schnider": 481, "10513": 481, "_get_type_var": 481, "_eval_typ": 481, "27832": 481, "27539": 481, "21718": 481, "ctes": 481, "2466": 481, "27573": 481, "27930": 481, "andrad": 481, "21201": 481, "wojciech": 481, "walczak": 481, "15308": 481, "bayard": 481, "randel": 481, "27922": 481, "27891": 481, "17642": 481, "25564": 481, "27821": 481, "26900": 481, "26027": 481, "27427": 481, "couzo": 481, "27953": 481, "26040": 481, "test_math": 481, "test_cmath": 481, "rigour": 481, "27787": 481, "27566": 481, "27705": 481, "validate_ucrtbas": 481, "27976": 481, "27983": 481, "26307": 481, "27917": 481, "25825": 481, "libpl": 481, "2a4": 481, "21122": 481, "17128": 481, "27952": 481, "fixcid": 481, "28065": 481, "25144": 481, "1602": 481, "27731": 481, "aliasmbc": 481, "20366": 481, "27756": 481, "cherri": 481, "27883": 481, "27704": 481, "22557": 481, "17596": 481, "wincrypt": 481, "gw": 481, "17599": 481, "reparse_data_buff": 481, "27507": 481, "27581": 481, "27419": 481, "27083": 481, "27514": 481, "27366": 481, "27524": 481, "27736": 481, "27038": 481, "27773": 481, "26750": 481, "descriptortyp": 481, "26800": 481, "26981": 481, "27783": 481, "27774": 481, "27760": 481, "27758": 481, "27568": 481, "httpoxi": 481, "1000110": 481, "7063": 481, "chuck": 481, "27656": 481, "sched_": 481, "27130": 481, "27567": 481, "27533": 481, "_isdir": 481, "17711": 481, "27522": 481, "27512": 481, "27714": 481, "text_textview": 481, "test_autocomplet": 481, "27621": 481, "27620": 481, "27609": 481, "25507": 481, "27173": 481, "confighandl": 481, "25805": 481, "test_pkgutil": 481, "27472": 481, "27369": 481, "27594": 481, "test_ast": 481, "27647": 481, "27610": 481, "27469": 481, "27309": 481, "27713": 481, "27453": 481, "27641": 481, "26662": 481, "python_for_gen": 481, "10910": 481, "freedbsd": 481, "27278": 481, "22636": 481, "27473": 481, "27443": 481, "27007": 481, "26844": 481, "lev": 481, "maximov": 481, "23804": 481, "27466": 481, "time2netscap": 481, "27319": 481, "27079": 481, "27294": 481, "27048": 481, "27330": 481, "27238": 481, "27122": 481, "issue25782": 481, "26386": 481, "16182": 481, "27477": 481, "test_help": 481, "27380": 481, "sectionnam": 481, "helpsourc": 481, "itw": 481, "27372": 481, "27365": 481, "27245": 481, "24137": 481, "27310": 481, "28066": 481, "27442": 481, "android_api_level": 481, "27434": 481, "26930": 481, "2h": 481, "23968": 481, "machdep": 481, "platform_triplet": 481, "ldversion": 481, "_sysconfigdata": 481, "27332": 481, "27418": 481, "importbench": 481, "19489": 481, "27285": 481, "pierci": 481, "27027": 481, "26556": 481, "1283": 481, "0772": 481, "oststrom": 481, "26839": 481, "colm": 481, "buckley": 481, "27190": 481, "sawyer": 481, "27286": 481, "27066": 481, "26983": 481, "27097": 481, "23275": 481, "20508": 481, "21386": 481, "07a5610bae9d": 481, "luethi": 481, "27029": 481, "20900": 481, "ingrid": 481, "25738": 481, "susumu": 481, "koshiba": 481, "21313": 481, "27164": 481, "24291": 481, "serverhandl": 481, "21272": 481, "26809": 481, "26373": 481, "flip": 481, "sigiot": 481, "27167": 481, "25931": 481, "21776": 481, "26526": 481, "27114": 481, "_load_windows_store_cert": 481, "5124": 481, "24750": 481, "24759": 481, "27239": 481, "isxyztk": 481, "27262": 481, "27196": 481, "20567": 481, "27156": 481, "27117": 481, "26673": 481, "21939": 481, "percol": 481, "21676": 481, "18410": 481, "westley": 481, "mart": 481, "nez": 481, "21703": 481, "27044": 481, "remove_var_callback": 481, "23977": 481, "test_deleg": 481, "16484": 481, "rodman": 481, "kaushik": 481, "nadikud": 481, "24136": 481, "22558": 481, "yoni": 481, "lavi": 481, "25285": 481, "27064": 481, "17500": 481, "pythondotorg": 481, "945": 481, "27229": 481, "26657": 481, "hagemeist": 481, "26313": 481, "baji": 481, "25939": 481, "20041": 481, "26168": 481, "26991": 481, "27039": 481, "23640": 481, "27005": 481, "18531": 481, "26811": 481, "20120": 481, "pypirc": 481, "26802": 481, "26659": 481, "26718": 481, "27138": 481, "27147": 481, "25339": 481, "26494": 481, "26581": 481, "19711": 481, "21099": 481, "26563": 481, "26558": 481, "26464": 481, "22836": 481, "26302": 481, "26136": 481, "anish": 481, "shah": 481, "26204": 481, "4806": 481, "23601": 481, "25843": 481, "26107": 481, "26154": 481, "_pythreadstate_uncheckedget": 481, "_pythreadstate_curr": 481, "22995": 481, "_pyobject_getst": 481, "25961": 481, "25973": 481, "20440": 481, "25766": 481, "25421": 481, "25709": 481, "24097": 481, "24731": 481, "25630": 481, "23564": 481, "fds_to_pass": 481, "25388": 481, "25462": 481, "24802": 481, "overread": 481, "25555": 481, "24726": 481, "25449": 481, "25395": 481, "_pybyteswrit": 481, "25274": 481, "24402": 481, "24806": 481, "24848": 481, "misform": 481, "25280": 481, "25003": 481, "9232": 481, "24965": 481, "26478": 481, "26171": 481, "25660": 481, "26288": 481, "26289": 481, "26315": 481, "25887": 481, "27057": 481, "eaccess": 481, "bednarski": 481, "27014": 481, "tuur": 481, "27031": 481, "14132": 481, "janech": 481, "17214": 481, "27033": 481, "27034": 481, "26892": 481, "22274": 481, "26807": 481, "yolanda": 481, "robla": 481, "25745": 481, "26977": 481, "26002": 481, "upendra": 481, "kuma": 481, "25974": 481, "26996": 481, "26881": 481, "23815": 481, "17765": 481, "26873": 481, "responseerror": 481, "26711": 481, "24114": 481, "crle": 481, "kee": 481, "26864": 481, "24902": 481, "26634": 481, "26804": 481, "lower_cas": 481, "mixed_cas": 481, "26837": 481, "26041": 481, "kumaripaba": 481, "miyurusara": 481, "athukorala": 481, "26822": 481, "26733": 481, "26801": 481, "24838": 481, "26717": 481, "ize": 481, "26782": 481, "26735": 481, "024": 481, "26585": 481, "_quote_html": 481, "16329": 481, "webm": 481, "13952": 481, "26709": 481, "y2038": 481, "23735": 481, "25951": 481, "26586": 481, "26676": 481, "22854": 481, "26641": 481, "docfiletest": 481, "25195": 481, "3603bae63c13": 481, "plummer": 481, "26644": 481, "26616": 481, "26637": 481, "21925": 481, "26530": 481, "_pytracemalloc_track": 481, "_pytracemalloc_untrack": 481, "_pytracemalloc_gettraceback": 481, "_tracemalloc": 481, "24266": 481, "26590": 481, "18787": 481, "26560": 481, "inglesbi": 481, "_showwarnmsg": 481, "26569": 481, "26499": 481, "ghost": 481, "25320": 481, "den": 481, "elzen": 481, "16181": 481, "http2time": 481, "26513": 481, "23718": 481, "tam": 481, "benc": 481, "gedai": 481, "20589": 481, "26177": 481, "15068": 481, "2202": 481, "get_algorithm_impl": 481, "dupuy": 481, "26167": 481, "25718": 481, "26475": 481, "26457": 481, "26385": 481, "26402": 481, "25913": 481, "swati": 481, "jaiswal": 481, "26186": 481, "26367": 481, "26309": 481, "25995": 481, "23992": 481, "mapresult": 481, "26117": 481, "25949": 481, "25911": 481, "26045": 481, "12923": 481, "brazil": 481, "rocco": 481, "25945": 481, "26202": 481, "23076": 481, "nyberg": 481, "19883": 481, "26099": 481, "26147": 481, "25935": 481, "16620": 481, "26013": 481, "25850": 481, "25822": 481, "22642": 481, "24705": 481, "_parse_makefil": 481, "26069": 481, "22138": 481, "mcculli": 481, "25672": 481, "ssl_mode_release_buff": 481, "26012": 481, "24120": 481, "ulrich": 481, "25447": 481, "25802": 481, "24103": 481, "25860": 481, "samson": 481, "25914": 481, "25902": 481, "22227": 481, "25717": 481, "5a1": 481, "24903": 481, "25764": 481, "25771": 481, "6478": 481, "14285": 481, "19771": 481, "25177": 481, "10131": 481, "ganisin": 481, "7990": 481, "santoso": 481, "25725": 481, "25663": 481, "25688": 481, "23914": 481, "25691": 481, "25624": 481, "25626": 481, "25583": 481, "6973": 481, "mauro": 481, "25590": 481, "25498": 481, "eryksun": 481, "25584": 481, "25446": 481, "18010": 481, "25554": 481, "18973": 481, "25510": 481, "ryosuk": 481, "ito": 481, "25503": 481, "vandenberg": 481, "25515": 481, "21827": 481, "25390": 481, "25441": 481, "25410": 481, "25411": 481, "simon04": 481, "25407": 481, "25406": 481, "25364": 481, "25328": 481, "enable_smtputf8": 481, "25316": 481, "distutilsplatformerror": 481, "25380": 481, "stack_glob": 481, "23972": 481, "reuseport": 481, "reuseaddr": 481, "25304": 481, "25232": 481, "cgirequesthandl": 481, "24657": 481, "23600": 481, "25203": 481, "22241": 481, "23517": 481, "24633": 481, "24874": 481, "24360": 481, "23426": 481, "run_setup": 481, "13938": 481, "stringtyp": 481, "8585": 481, "zipimporter2": 481, "18622": 481, "palumbo": 481, "laurent": 481, "buyst": 481, "24426": 481, "23661": 481, "ignacio": 481, "rossi": 481, "25578": 481, "getpeerc": 481, "25530": 481, "25569": 481, "25471": 481, "25319": 481, "26050": 481, "25924": 481, "26406": 481, "26848": 481, "20640": 481, "confighelpsourceedit": 481, "iobind": 481, "25905": 481, "15348": 481, "24455": 481, "15347": 481, "vwait": 481, "25313": 481, "currentthem": 481, "24782": 481, "22726": 481, "24820": 481, "cobalt": 481, "25224": 481, "24972": 481, "24570": 481, "24988": 481, "scrolledlist": 481, "24801": 481, "25173": 481, "25198": 481, "pitch": 481, "blueish": 481, "25225": 481, "21995": 481, "22820": 481, "25219": 481, "24861": 481, "idleib": 481, "25199": 481, "16893": 481, "helpdialog": 481, "helt": 481, "24199": 481, "idlev": 481, "24790": 481, "26736": 481, "6953": 481, "23606": 481, "24952": 481, "mattip": 481, "26014": 481, "21916": 481, "loys": 481, "26295": 481, "testdir": 481, "26523": 481, "26015": 481, "26325": 481, "25940": 481, "25616": 481, "test_collect": 481, "test_ordered_dict": 481, "25188": 481, "22806": 481, "18174": 481, "25260": 481, "26583": 481, "test_timestamp_overflow": 481, "test_import": 481, "21277": 481, "ffi_conveni": 481, "26884": 481, "22359": 481, "21668": 481, "_ctypes_test": 481, "25702": 481, "26624": 481, "17603": 481, "fileblock": 481, "26079": 481, "bjoern": 481, "thiel": 481, "26465": 481, "2g": 481, "25348": 481, "build_pgo": 481, "25827": 481, "25696": 481, "j9": 481, "24986": 481, "_math": 481, "26268": 481, "25136": 481, "24324": 481, "27053": 481, "make_zip": 481, "prepare_ssl": 481, "26071": 481, "26073": 481, "26065": 481, "25022": 481, "example_nt": 481, "26799": 481, "ilsch": 481, "26271": 481, "shaulov": 481, "26489": 481, "26316": 481, "25440": 481, "26312": 481, "26198": 481, "32551": 481, "6rc1": 481, "30657": 481, "1000158": 481, "bosamiya": 481, "29537": 481, "30383": 481, "30523": 481, "30540": 481, "30675": 481, "29073": 481, "28189": 481, "dictitems_contain": 481, "26020": 481, "19003": 481, "26664": 481, "ld_so_aix": 481, "26867": 481, "26194": 481, "17633": 481, "27223": 481, "_read_readi": 481, "_conn_lost": 481, "22970": 481, "25500": 481, "25715": 481, "25182": 481, "stdprinter": 481, "25131": 481, "25150": 481, "_py_atomic_": 481, "openmp": 481, "24483": 481, "22958": 481, "22609": 481, "25111": 481, "25262": 481, "binbytes8": 481, "binunicode8": 481, "25034": 481, "anthon": 481, "neut": 481, "25233": 481, "23329": 481, "_unpickler_read": 481, "25047": 481, "25135": 481, "deque_clear": 481, "19143": 481, "25092": 481, "25155": 481, "25108": 481, "25118": 481, "24684": 481, "25060": 481, "24857": 481, "kaptur": 481, "23144": 481, "24982": 481, "25019": 481, "16180": 481, "24891": 481, "24992": 481, "24881": 481, "21112": 481, "24764": 481, "read_multi": 481, "landri": 481, "24913": 481, "bryce": 481, "darl": 481, "24774": 481, "chiu": 481, "hsiang": 481, "hsu": 481, "21159": 481, "20362": 481, "honour": 481, "ilia": 481, "kurenkov": 481, "23572": 481, "12067": 481, "23725": 481, "24808": 481, "weston": 481, "22812": 481, "mca": 481, "nulti": 481, "25099": 481, "23919": 481, "24915": 481, "24910": 481, "msis": 481, "25450": 481, "25164": 481, "25143": 481, "25163": 481, "25089": 481, "25165": 481, "25112": 481, "25102": 481, "25081": 481, "25091": 481, "25126": 481, "25213": 481, "requestedexecutionlevel": 481, "25071": 481, "25029": 481, "test_strptim": 481, "25027": 481, "24305": 481, "24912": 481, "24975": 481, "24917": 481, "time_strftim": 481, "24748": 481, "24635": 481, "24989": 481, "24769": 481, "21167": 481, "24492": 481, "24847": 481, "24839": 481, "24867": 481, "24667": 481, "odict": 481, "24824": 481, "24634": 481, "24798": 481, "_msvccompil": 481, "4395": 481, "23973": 481, "23004": 481, "hill": 481, "23888": 481, "23652": 481, "22932": 481, "shachnev": 481, "23779": 481, "23319": 481, "gautier": 481, "23254": 481, "19450": 481, "17527": 481, "sbardella": 481, "24791": 481, "23672": 481, "mohd": 481, "sanad": 481, "zaki": 481, "rizvi": 481, "24745": 481, "tkfixedfont": 481, "21192": 481, "adnan": 481, "umer": 481, "13884": 481, "tearoff": 481, "24129": 481, "20769": 481, "dorian": 481, "pula": 481, "23589": 481, "yongzhi": 481, "24729": 481, "24751": 481, "24569": 481, "24583": 481, "24407": 481, "24619": 481, "24687": 481, "15944": 481, "23441": 481, "sekera": 481, "24683": 481, "21697": 481, "eduardo": 481, "seabra": 481, "24695": 481, "24620": 481, "22485": 481, "22153": 481, "evilzero": 481, "24580": 481, "24206": 481, "24631": 481, "24608": 481, "18684": 481, "24259": 481, "24669": 481, "kai": 481, "groner": 481, "24688": 481, "24603": 481, "24467": 481, "24345": 481, "py_tp_fin": 481, "21750": 481, "24552": 481, "24514": 481, "19176": 481, "20387": 481, "24456": 481, "24336": 481, "24522": 481, "24489": 481, "24408": 481, "24347": 481, "24348": 481, "24359": 481, "24368": 481, "24362": 481, "24377": 481, "24369": 481, "24373": 481, "_testmultiphas": 481, "16690": 481, "24458": 481, "24351": 481, "24432": 481, "24115": 481, "_pydict_contain": 481, "24328": 481, "11205": 481, "24285": 481, "23247": 481, "5633": 481, "24326": 481, "23934": 481, "24276": 481, "23955": 481, "24257": 481, "22939": 481, "23985": 481, "24102": 481, "7x": 481, "23290": 481, "set_merg": 481, "2292": 481, "24096": 481, "23996": 481, "23911": 481, "24192": 481, "24022": 481, "22906": 481, "24230": 481, "24244": 481, "15836": 481, "wagner": 481, "9858": 481, "laura": 481, "rupprecht": 481, "22107": 481, "23780": 481, "6598": 481, "24091": 481, "21931": 481, "fci": 481, "armstrong": 481, "mangle_from": 481, "18682": 481, "23796": 481, "hergenroed": 481, "24155": 481, "20274": 481, "24134": 481, "23880": 481, "getdoubl": 481, "24094": 481, "9246": 481, "1025": 481, "23917": 481, "23008": 481, "23908": 481, "23728": 481, "23887": 481, "24178": 481, "24179": 481, "22547": 481, "23898": 481, "bayer": 481, "24298": 481, "23184": 481, "sweigart": 481, "21520": 481, "9517": 481, "christi": 481, "22155": 481, "24029": 481, "24077": 481, "24000": 481, "24001": 481, "23330": 481, "24031": 481, "22980": 481, "kfreebsd": 481, "22631": 481, "courtesi": 481, "23731": 481, "23726": 481, "23309": 481, "22977": 481, "23466": 481, "24044": 481, "21354": 481, "23840": 481, "23703": 481, "901e4e52b20a": 481, "_curs": 481, "19933": 481, "calledprocess": 481, "21217": 481, "balling": 481, "allison": 481, "24521": 481, "22931": 481, "23811": 481, "21116": 481, "boquien": 481, "22982": 481, "23529": 481, "21859": 481, "23865": 481, "23400": 481, "10838": 481, "23411": 481, "23881": 481, "22721": 481, "15133": 481, "23338": 481, "kato": 481, "16840": 481, "23834": 481, "23618": 481, "21526": 481, "23836": 481, "18473": 481, "3to2": 481, "23485": 481, "23752": 481, "23745": 481, "22117": 481, "23310": 481, "kasia": 481, "jachim": 481, "23817": 481, "sovers": 481, "23501": 481, "23799": 481, "22390": 481, "18128": 481, "23935": 481, "23944": 481, "20586": 481, "23492": 481, "23500": 481, "methoddef": 481, "23998": 481, "pyimport_reinitlock": 481, "23753": 481, "23192": 481, "23629": 481, "14260": 481, "23792": 481, "pipepag": 481, "23775": 481, "23765": 481, "isbadstringptr": 481, "22364": 481, "23742": 481, "21802": 481, "23502": 481, "17530": 481, "22687": 481, "tetxtwrap": 481, "4727": 481, "23657": 481, "23688": 481, "23647": 481, "23539": 481, "22351": 481, "23715": 481, "23646": 481, "23136": 481, "carrol": 481, "23700": 481, "bohuslav": 481, "kabrda": 481, "22903": 481, "23631": 481, "rdivmod": 481, "23138": 481, "23051": 481, "diamant": 481, "22928": 481, "23615": 481, "23585": 481, "23583": 481, "22289": 481, "test_urllib2net": 481, "22826": 481, "bkfile": 481, "23571": 481, "23103": 481, "23476": 481, "x509_v_flag_trusted_first": 481, "23576": 481, "stall": 481, "23504": 481, "23563": 481, "19980": 481, "23521": 481, "21619": 481, "6639": 481, "814253": 481, "23215": 481, "aleksi": 481, "torhamo": 481, "5700": 481, "23374": 481, "23481": 481, "21548": 481, "apropo": 481, "22885": 481, "23146": 481, "23096": 481, "19105": 481, "23421": 481, "wdv4758h": 481, "23367": 481, "23361": 481, "19705": 481, "yeo": 481, "23801": 481, "23445": 481, "23686": 481, "23465": 481, "23285": 481, "22735": 481, "22896": 481, "21295": 481, "16795": 481, "22986": 481, "15859": 481, "campbel": 481, "barton": 481, "21408": 481, "23321": 481, "23253": 481, "22038": 481, "pyatom": 481, "lima": 481, "templ": 481, "20284": 481, "23048": 481, "20335": 481, "22869": 481, "pylifecycl": 481, "22335": 481, "0x7fffffff": 481, "22653": 481, "22643": 481, "22604": 481, "21052": 481, "22470": 481, "22520": 481, "22519": 481, "22518": 481, "1764286": 481, "18554": 481, "21391": 481, "11471": 481, "22215": 481, "22258": 481, "f_setfd": 481, "21389": 481, "22206": 481, "20184": 481, "22116": 481, "builtin_function_or_method": 481, "22077": 481, "20179": 481, "22082": 481, "slotdef": 481, "21897": 481, "21669": 481, "21642": 481, "42els": 481, "21523": 481, "pessimist": 481, "21418": 481, "21425": 481, "21435": 481, "21377": 481, "20355": 481, "21274": 481, "path_max": 481, "20904": 481, "fpu": 481, "m68k": 481, "21209": 481, "21193": 481, "21134": 481, "19537": 481, "20929": 481, "20731": 481, "20637": 481, "ingebretson": 481, "19995": 481, "19655": 481, "12546": 481, "13598": 481, "elson": 481, "8931": 481, "23165": 481, "23399": 481, "13128": 481, "23099": 481, "23326": 481, "23363": 481, "23364": 481, "23366": 481, "23369": 481, "encode_basestring_ascii": 481, "23353": 481, "why_yield": 481, "why_return": 481, "14099": 481, "tellabl": 481, "18518": 481, "23094": 481, "23268": 481, "19996": 481, "23248": 481, "23098": 481, "dev_t": 481, "21817": 481, "23250": 481, "23063": 481, "23209": 481, "23225": 481, "23143": 481, "23132": 481, "23112": 481, "23093": 481, "23111": 481, "22585": 481, "19104": 481, "23071": 481, "22783": 481, "15513": 481, "19858": 481, "22095": 481, "23016": 481, "21775": 481, "vfat": 481, "1218234": 481, "21740": 481, "23009": 481, "22959": 481, "16043": 481, "gzip_decod": 481, "1753": 481, "22966": 481, "pyc_compil": 481, "21971": 481, "21032": 481, "22902": 481, "pach": 481, "21356": 481, "bernard": 481, "spil": 481, "22915": 481, "22921": 481, "22894": 481, "22370": 481, "22841": 481, "ludov": 481, "gasc": 481, "httpbasicpriorauthhandl": 481, "22849": 481, "12728": 481, "22821": 481, "22824": 481, "22406": 481, "17293": 481, "netstat": 481, "aivar": 481, "kalv": 481, "22769": 481, "22417": 481, "22775": 481, "22776": 481, "22665": 481, "17381": 481, "22410": 481, "22759": 481, "8876": 481, "22217": 481, "22457": 481, "18216": 481, "22676": 481, "18853": 481, "__nain__": 481, "9351": 481, "7559": 481, "21991": 481, "22641": 481, "17401": 481, "compile_": 481, "20152": 481, "18643": 481, "22435": 481, "13096": 481, "11694": 481, "22462": 481, "21173": 481, "11866": 481, "21905": 481, "21883": 481, "22219": 481, "22449": 481, "ssl_cert_dir": 481, "ssl_cert_fil": 481, "22508": 481, "20076": 481, "20079": 481, "22396": 481, "22517": 481, "23392": 481, "10510": 481, "oshmyan": 481, "22448": 481, "oliva": 481, "22427": 481, "22362": 481, "20912": 481, "21866": 481, "22278": 481, "issue22118": 481, "22415": 481, "groupref_exist": 481, "22423": 481, "21332": 481, "21091": 481, "21079": 481, "22247": 481, "22419": 481, "bobrov": 481, "22384": 481, "22168": 481, "21147": 481, "21951": 481, "22338": 481, "12410": 481, "21270": 481, "22226": 481, "19524": 481, "19546": 481, "22051": 481, "21933": 481, "21597": 481, "kani": 481, "18132": 481, "22216": 481, "22098": 481, "22185": 481, "zongker": 481, "22287": 481, "_pytime_gettimeofday": 481, "librt": 481, "22182": 481, "move_fil": 481, "22042": 481, "22236": 481, "15696": 481, "22068": 481, "22165": 481, "8797": 481, "bull": 481, "20729": 481, "21448": 481, "22184": 481, "17923": 481, "delhallt": 481, "22176": 481, "elf": 481, "abiv2": 481, "21121": 481, "21975": 481, "20170": 481, "exists_ok": 481, "22127": 481, "22085": 481, "21580": 481, "17172": 481, "21704": 481, "20173": 481, "22033": 481, "21947": 481, "16133": 481, "handle_read": 481, "22044": 481, "call_tzinfo_method": 481, "flanagan": 481, "1034h": 481, "4350": 481, "6167": 481, "15275": 481, "21888": 481, "22032": 481, "22031": 481, "21044": 481, "21966": 481, "19076": 481, "16382": 481, "21932": 481, "21942": 481, "11259": 481, "set_termin": 481, "12523": 481, "21707": 481, "replace_paths_in_cod": 481, "20639": 481, "tikhonov": 481, "21714": 481, "21151": 481, "21090": 481, "21781": 481, "21679": 481, "21863": 481, "11453": 481, "21858": 481, "21476": 481, "21729": 481, "21491": 481, "21832": 481, "21722": 481, "dengler": 481, "21723": 481, "21711": 481, "21766": 481, "21310": 481, "21256": 481, "21677": 481, "nonnorm": 481, "11709": 481, "21515": 481, "13223": 481, "writedoc": 481, "21463": 481, "21618": 481, "21552": 481, "14315": 481, "sapin": 481, "21402": 481, "3015": 481, "21513": 481, "21137": 481, "21538": 481, "21525": 481, "22166": 481, "_forget_codec": 481, "10744": 481, "nontrivi": 481, "13916": 481, "20998": 481, "21075": 481, "21226": 481, "21398": 481, "21424": 481, "heaqp": 481, "nmsmallest": 481, "21396": 481, "18314": 481, "sman": 481, "21088": 481, "21407": 481, "10650": 481, "21469": 481, "19414": 481, "21421": 481, "21101": 481, "21321": 481, "anton": 481, "afanasyev": 481, "21057": 481, "9815": 481, "13204": 481, "19385": 481, "21207": 481, "21291": 481, "21127": 481, "str_": 481, "15002": 481, "_temporaryfilewrapp": 481, "_temporaryfileclos": 481, "12220": 481, "mindom": 481, "21068": 481, "21276": 481, "use_xattr": 481, "incas": 481, "20896": 481, "21239": 481, "21203": 481, "jure": 481, "koren": 481, "21222": 481, "21197": 481, "17498": 481, "17826": 481, "7776": 481, "21529": 481, "vranken": 481, "4616": 481, "21169": 481, "21171": 481, "20539": 481, "21172": 481, "21155": 481, "21136": 481, "20636": 481, "21149": 481, "21058": 481, "21200": 481, "21013": 481, "20145": 481, "20633": 481, "20980": 481, "20990": 481, "21015": 481, "21000": 481, "20884": 481, "21499": 481, "test_api": 481, "19165": 481, "20574": 481, "20879": 481, "19157": 481, "usuabl": 481, "11599": 481, "distutils_debug": 481, "4931": 481, "grok_environment_error": 481, "20875": 481, "11558": 481, "20283": 481, "20778": 481, "20791": 481, "otten": 481, "19748": 481, "outsiz": 481, "2037": 481, "19573": 481, "20378": 481, "20816": 481, "lowin": 481, "20817": 481, "6676": 481, "gutteridg": 481, "21117": 481, "gi_": 481, "163": 481, "21311": 481, "_osx_support": 481, "szakmeist": 481, "11571": 481, "21801": 481, "21923": 481, "_config_var": 481, "21323": 481, "19435": 481, "byrn": 481, "22733": 481, "ffi_prep_arg": 481, "23302": 481, "mss": 481, "20577": 481, "formatparagraph": 481, "3068": 481, "16233": 481, "4832": 481, "21986": 481, "17390": 481, "14105": 481, "21765": 481, "hyperpars": 481, "21940": 481, "widgetredirector": 481, "18592": 481, "searchdialogbas": 481, "webster": 481, "21694": 481, "21686": 481, "12387": 481, "21695": 481, "18910": 481, "18292": 481, "autoexpand": 481, "saihadhav": 481, "18409": 481, "21477": 481, "18104": 481, "21139": 481, "21284": 481, "17654": 481, "23180": 481, "15506": 481, "pkg_prog_pkg_config": 481, "22935": 481, "22592": 481, "22591": 481, "djgpp": 481, "16537": 481, "hosmer": 481, "21958": 481, "have_round": 481, "18093": 481, "15759": 481, "linkcheck": 481, "21141": 481, "build_ssl": 481, "21037": 481, "19962": 481, "21285": 481, "15234": 481, "17861": 481, "generate_opcode_h": 481, "20644": 481, "20022": 481, "15968": 481, "17095": 481, "21811": 481, "21166": 481, "18096": 481, "17219": 481, "22919": 481, "21236": 481, "_msi": 481, "14203": 481, "bytearray_getbuff": 481, "bytesiobuf_getbuff": 481, "array_buffer_getbuf": 481, "22445": 481, "npy_relaxed_strides_check": 481, "22079": 481, "_pyobject_gc_calloc": 481, "20942": 481, "init_frozen": 481, "19548": 481, "22394": 481, "21514": 481, "21777": 481, "6916": 481, "17386": 481, "21312": 481, "thread_foobar": 481, "mccracken": 481, "21043": 481, "20765": 481, "19407": 481, "19697": 481, "18982": 481, "22838": 481, "22173": 481, "16000": 481, "test_curs": 481, "21456": 481, "remi": 481, "pointel": 481, "20746": 481, "test_pdb": 481, "22060": 481, "22104": 481, "22111": 481, "22002": 481, "21976": 481, "21918": 481, "9554": 481, "coneybear": 481, "radu": 481, "voicila": 481, "20155": 481, "19493": 481, "18492": 481, "21634": 481, "21605": 481, "21493": 481, "19925": 481, "21522": 481, "itemconfigur": 481, "paneconfigur": 481, "entryconfigur": 481, "17756": 481, "test_cod": 481, "17752": 481, "18604": 481, "21275": 481, "21223": 481, "20635": 481, "20743": 481, "test_tcl": 481, "21097": 481, "test_namespace_pkg": 481, "21503": 481, "test_both": 481, "20939": 481, "20668": 481, "21093": 481, "test_macholib": 481, "libz": 481, "22770": 481, "23211": 481, "23345": 481, "8zc": 481, "22314": 481, "22615": 481, "makelocalealia": 481, "22201": 481, "22120": 481, "18974": 481, "21906": 481, "21629": 481, "16047": 481, "11824": 481, "20535": 481, "23260": 481, "17896": 481, "17717": 481, "nasm": 481, "21907": 481, "22644": 481, "10747": 481, "kilburn": 481, "cp35": 481}, "objects": {"": [[66, 0, 1, "c.CO_FUTURE_DIVISION", "CO_FUTURE_DIVISION"], [58, 1, 1, "c.METH_CLASS", "METH_CLASS"], [58, 1, 1, "c.METH_COEXIST", "METH_COEXIST"], [58, 1, 1, "c.METH_FASTCALL", "METH_FASTCALL"], [58, 1, 1, "c.METH_KEYWORDS", "METH_KEYWORDS"], [58, 1, 1, "c.METH_METHOD", "METH_METHOD"], [58, 1, 1, "c.METH_NOARGS", "METH_NOARGS"], [58, 1, 1, "c.METH_O", "METH_O"], [58, 1, 1, "c.METH_STATIC", "METH_STATIC"], [58, 1, 1, "c.METH_VARARGS", "METH_VARARGS"], [42, 1, 1, "c.PYMEM_DOMAIN_MEM", "PYMEM_DOMAIN_MEM"], [42, 1, 1, "c.PYMEM_DOMAIN_OBJ", "PYMEM_DOMAIN_OBJ"], [42, 1, 1, "c.PYMEM_DOMAIN_RAW", "PYMEM_DOMAIN_RAW"], [4, 1, 1, "c.PY_MAJOR_VERSION", "PY_MAJOR_VERSION"], [4, 1, 1, "c.PY_MICRO_VERSION", "PY_MICRO_VERSION"], [4, 1, 1, "c.PY_MINOR_VERSION", "PY_MINOR_VERSION"], [4, 1, 1, "c.PY_RELEASE_LEVEL", "PY_RELEASE_LEVEL"], [4, 1, 1, "c.PY_RELEASE_SERIAL", "PY_RELEASE_SERIAL"], [10, 1, 1, "c.PY_VECTORCALL_ARGUMENTS_OFFSET", "PY_VECTORCALL_ARGUMENTS_OFFSET"], [4, 1, 1, "c.PY_VERSION_HEX", "PY_VERSION_HEX"], [36, 2, 1, "c.PyAIter_Check", "PyAIter_Check"], [64, 4, 1, "c.PyASCIIObject", "PyASCIIObject"], [55, 2, 1, "c.PyAnySet_Check", "PyAnySet_Check"], [55, 2, 1, "c.PyAnySet_CheckExact", "PyAnySet_CheckExact"], [5, 2, 1, "c.PyArg_Parse", "PyArg_Parse"], [5, 2, 1, "c.PyArg_ParseTuple", "PyArg_ParseTuple"], [5, 2, 1, "c.PyArg_ParseTupleAndKeywords", "PyArg_ParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_UnpackTuple", "PyArg_UnpackTuple"], [5, 2, 1, "c.PyArg_VaParse", "PyArg_VaParse"], [5, 2, 1, "c.PyArg_VaParseTupleAndKeywords", "PyArg_VaParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_ValidateKeywordArguments", "PyArg_ValidateKeywordArguments"], [63, 4, 1, "c.PyAsyncMethods", "PyAsyncMethods"], [7, 1, 1, "c.PyBUF_ANY_CONTIGUOUS", "PyBUF_ANY_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_CONTIG", "PyBUF_CONTIG"], [7, 1, 1, "c.PyBUF_CONTIG_RO", "PyBUF_CONTIG_RO"], [7, 1, 1, "c.PyBUF_C_CONTIGUOUS", "PyBUF_C_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_FORMAT", "PyBUF_FORMAT"], [7, 1, 1, "c.PyBUF_FULL", "PyBUF_FULL"], [7, 1, 1, "c.PyBUF_FULL_RO", "PyBUF_FULL_RO"], [7, 1, 1, "c.PyBUF_F_CONTIGUOUS", "PyBUF_F_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_INDIRECT", "PyBUF_INDIRECT"], [7, 1, 1, "c.PyBUF_MAX_NDIM", "PyBUF_MAX_NDIM"], [7, 1, 1, "c.PyBUF_ND", "PyBUF_ND"], [43, 1, 1, "c.PyBUF_READ", "PyBUF_READ"], [7, 1, 1, "c.PyBUF_RECORDS", "PyBUF_RECORDS"], [7, 1, 1, "c.PyBUF_RECORDS_RO", "PyBUF_RECORDS_RO"], [7, 1, 1, "c.PyBUF_SIMPLE", "PyBUF_SIMPLE"], [7, 1, 1, "c.PyBUF_STRIDED", "PyBUF_STRIDED"], [7, 1, 1, "c.PyBUF_STRIDED_RO", "PyBUF_STRIDED_RO"], [7, 1, 1, "c.PyBUF_STRIDES", "PyBUF_STRIDES"], [7, 1, 1, "c.PyBUF_WRITABLE", "PyBUF_WRITABLE"], [43, 1, 1, "c.PyBUF_WRITE", "PyBUF_WRITE"], [6, 2, 1, "c.PyBool_Check", "PyBool_Check"], [6, 2, 1, "c.PyBool_FromLong", "PyBool_FromLong"], [6, 0, 1, "c.PyBool_Type", "PyBool_Type"], [63, 4, 1, "c.PyBufferProcs", "PyBufferProcs"], [7, 2, 1, "c.PyBuffer_FillContiguousStrides", "PyBuffer_FillContiguousStrides"], [7, 2, 1, "c.PyBuffer_FillInfo", "PyBuffer_FillInfo"], [7, 2, 1, "c.PyBuffer_FromContiguous", "PyBuffer_FromContiguous"], [7, 2, 1, "c.PyBuffer_GetPointer", "PyBuffer_GetPointer"], [7, 2, 1, "c.PyBuffer_IsContiguous", "PyBuffer_IsContiguous"], [7, 2, 1, "c.PyBuffer_Release", "PyBuffer_Release"], [7, 2, 1, "c.PyBuffer_SizeFromFormat", "PyBuffer_SizeFromFormat"], [7, 2, 1, "c.PyBuffer_ToContiguous", "PyBuffer_ToContiguous"], [8, 4, 1, "c.PyByteArrayObject", "PyByteArrayObject"], [8, 2, 1, "c.PyByteArray_AS_STRING", "PyByteArray_AS_STRING"], [8, 2, 1, "c.PyByteArray_AsString", "PyByteArray_AsString"], [8, 2, 1, "c.PyByteArray_Check", "PyByteArray_Check"], [8, 2, 1, "c.PyByteArray_CheckExact", "PyByteArray_CheckExact"], [8, 2, 1, "c.PyByteArray_Concat", "PyByteArray_Concat"], [8, 2, 1, "c.PyByteArray_FromObject", "PyByteArray_FromObject"], [8, 2, 1, "c.PyByteArray_FromStringAndSize", "PyByteArray_FromStringAndSize"], [8, 2, 1, "c.PyByteArray_GET_SIZE", "PyByteArray_GET_SIZE"], [8, 2, 1, "c.PyByteArray_Resize", "PyByteArray_Resize"], [8, 2, 1, "c.PyByteArray_Size", "PyByteArray_Size"], [8, 0, 1, "c.PyByteArray_Type", "PyByteArray_Type"], [9, 4, 1, "c.PyBytesObject", "PyBytesObject"], [9, 2, 1, "c.PyBytes_AS_STRING", "PyBytes_AS_STRING"], [9, 2, 1, "c.PyBytes_AsString", "PyBytes_AsString"], [9, 2, 1, "c.PyBytes_AsStringAndSize", "PyBytes_AsStringAndSize"], [9, 2, 1, "c.PyBytes_Check", "PyBytes_Check"], [9, 2, 1, "c.PyBytes_CheckExact", "PyBytes_CheckExact"], [9, 2, 1, "c.PyBytes_Concat", "PyBytes_Concat"], [9, 2, 1, "c.PyBytes_ConcatAndDel", "PyBytes_ConcatAndDel"], [9, 2, 1, "c.PyBytes_FromFormat", "PyBytes_FromFormat"], [9, 2, 1, "c.PyBytes_FromFormatV", "PyBytes_FromFormatV"], [9, 2, 1, "c.PyBytes_FromObject", "PyBytes_FromObject"], [9, 2, 1, "c.PyBytes_FromString", "PyBytes_FromString"], [9, 2, 1, "c.PyBytes_FromStringAndSize", "PyBytes_FromStringAndSize"], [9, 2, 1, "c.PyBytes_GET_SIZE", "PyBytes_GET_SIZE"], [9, 2, 1, "c.PyBytes_Size", "PyBytes_Size"], [9, 0, 1, "c.PyBytes_Type", "PyBytes_Type"], [58, 4, 1, "c.PyCFunction", "PyCFunction"], [58, 4, 1, "c.PyCFunctionWithKeywords", "PyCFunctionWithKeywords"], [58, 2, 1, "c.PyCFunction_New", "PyCFunction_New"], [58, 2, 1, "c.PyCFunction_NewEx", "PyCFunction_NewEx"], [58, 4, 1, "c.PyCMethod", "PyCMethod"], [58, 2, 1, "c.PyCMethod_New", "PyCMethod_New"], [37, 2, 1, "c.PyCallIter_Check", "PyCallIter_Check"], [37, 2, 1, "c.PyCallIter_New", "PyCallIter_New"], [37, 0, 1, "c.PyCallIter_Type", "PyCallIter_Type"], [10, 2, 1, "c.PyCallable_Check", "PyCallable_Check"], [11, 4, 1, "c.PyCapsule", "PyCapsule"], [11, 2, 1, "c.PyCapsule_CheckExact", "PyCapsule_CheckExact"], [11, 4, 1, "c.PyCapsule_Destructor", "PyCapsule_Destructor"], [11, 2, 1, "c.PyCapsule_GetContext", "PyCapsule_GetContext"], [11, 2, 1, "c.PyCapsule_GetDestructor", "PyCapsule_GetDestructor"], [11, 2, 1, "c.PyCapsule_GetName", "PyCapsule_GetName"], [11, 2, 1, "c.PyCapsule_GetPointer", "PyCapsule_GetPointer"], [11, 2, 1, "c.PyCapsule_Import", "PyCapsule_Import"], [11, 2, 1, "c.PyCapsule_IsValid", "PyCapsule_IsValid"], [11, 2, 1, "c.PyCapsule_New", "PyCapsule_New"], [11, 2, 1, "c.PyCapsule_SetContext", "PyCapsule_SetContext"], [11, 2, 1, "c.PyCapsule_SetDestructor", "PyCapsule_SetDestructor"], [11, 2, 1, "c.PyCapsule_SetName", "PyCapsule_SetName"], [11, 2, 1, "c.PyCapsule_SetPointer", "PyCapsule_SetPointer"], [12, 4, 1, "c.PyCellObject", "PyCellObject"], [12, 2, 1, "c.PyCell_Check", "PyCell_Check"], [12, 2, 1, "c.PyCell_GET", "PyCell_GET"], [12, 2, 1, "c.PyCell_Get", "PyCell_Get"], [12, 2, 1, "c.PyCell_New", "PyCell_New"], [12, 2, 1, "c.PyCell_SET", "PyCell_SET"], [12, 2, 1, "c.PyCell_Set", "PyCell_Set"], [12, 0, 1, "c.PyCell_Type", "PyCell_Type"], [13, 4, 1, "c.PyCodeEvent", "PyCodeEvent"], [13, 4, 1, "c.PyCodeObject", "PyCodeObject"], [13, 2, 1, "c.PyCode_AddWatcher", "PyCode_AddWatcher"], [13, 2, 1, "c.PyCode_Addr2Line", "PyCode_Addr2Line"], [13, 2, 1, "c.PyCode_Addr2Location", "PyCode_Addr2Location"], [13, 2, 1, "c.PyCode_Check", "PyCode_Check"], [13, 2, 1, "c.PyCode_ClearWatcher", "PyCode_ClearWatcher"], [13, 2, 1, "c.PyCode_GetCellvars", "PyCode_GetCellvars"], [13, 2, 1, "c.PyCode_GetCode", "PyCode_GetCode"], [13, 2, 1, "c.PyCode_GetFreevars", "PyCode_GetFreevars"], [13, 2, 1, "c.PyCode_GetNumFree", "PyCode_GetNumFree"], [13, 2, 1, "c.PyCode_GetVarnames", "PyCode_GetVarnames"], [13, 2, 1, "c.PyCode_NewEmpty", "PyCode_NewEmpty"], [13, 0, 1, "c.PyCode_Type", "PyCode_Type"], [13, 4, 1, "c.PyCode_WatchCallback", "PyCode_WatchCallback"], [14, 2, 1, "c.PyCodec_BackslashReplaceErrors", "PyCodec_BackslashReplaceErrors"], [14, 2, 1, "c.PyCodec_Decode", "PyCodec_Decode"], [14, 2, 1, "c.PyCodec_Decoder", "PyCodec_Decoder"], [14, 2, 1, "c.PyCodec_Encode", "PyCodec_Encode"], [14, 2, 1, "c.PyCodec_Encoder", "PyCodec_Encoder"], [14, 2, 1, "c.PyCodec_IgnoreErrors", "PyCodec_IgnoreErrors"], [14, 2, 1, "c.PyCodec_IncrementalDecoder", "PyCodec_IncrementalDecoder"], [14, 2, 1, "c.PyCodec_IncrementalEncoder", "PyCodec_IncrementalEncoder"], [14, 2, 1, "c.PyCodec_KnownEncoding", "PyCodec_KnownEncoding"], [14, 2, 1, "c.PyCodec_LookupError", "PyCodec_LookupError"], [14, 2, 1, "c.PyCodec_NameReplaceErrors", "PyCodec_NameReplaceErrors"], [14, 2, 1, "c.PyCodec_Register", "PyCodec_Register"], [14, 2, 1, "c.PyCodec_RegisterError", "PyCodec_RegisterError"], [14, 2, 1, "c.PyCodec_ReplaceErrors", "PyCodec_ReplaceErrors"], [14, 2, 1, "c.PyCodec_StreamReader", "PyCodec_StreamReader"], [14, 2, 1, "c.PyCodec_StreamWriter", "PyCodec_StreamWriter"], [14, 2, 1, "c.PyCodec_StrictErrors", "PyCodec_StrictErrors"], [14, 2, 1, "c.PyCodec_Unregister", "PyCodec_Unregister"], [14, 2, 1, "c.PyCodec_XMLCharRefReplaceErrors", "PyCodec_XMLCharRefReplaceErrors"], [64, 4, 1, "c.PyCompactUnicodeObject", "PyCompactUnicodeObject"], [66, 5, 1, "c.PyCompilerFlags", "PyCompilerFlags"], [15, 4, 1, "c.PyComplexObject", "PyComplexObject"], [15, 2, 1, "c.PyComplex_AsCComplex", "PyComplex_AsCComplex"], [15, 2, 1, "c.PyComplex_Check", "PyComplex_Check"], [15, 2, 1, "c.PyComplex_CheckExact", "PyComplex_CheckExact"], [15, 2, 1, "c.PyComplex_FromCComplex", "PyComplex_FromCComplex"], [15, 2, 1, "c.PyComplex_FromDoubles", "PyComplex_FromDoubles"], [15, 2, 1, "c.PyComplex_ImagAsDouble", "PyComplex_ImagAsDouble"], [15, 2, 1, "c.PyComplex_RealAsDouble", "PyComplex_RealAsDouble"], [15, 0, 1, "c.PyComplex_Type", "PyComplex_Type"], [34, 4, 1, "c.PyConfig", "PyConfig"], [34, 2, 1, "c.PyConfig_Clear", "PyConfig_Clear"], [34, 2, 1, "c.PyConfig_InitIsolatedConfig", "PyConfig_InitIsolatedConfig"], [34, 2, 1, "c.PyConfig_InitPythonConfig", "PyConfig_InitPythonConfig"], [34, 2, 1, "c.PyConfig_Read", "PyConfig_Read"], [34, 2, 1, "c.PyConfig_SetArgv", "PyConfig_SetArgv"], [34, 2, 1, "c.PyConfig_SetBytesArgv", "PyConfig_SetBytesArgv"], [34, 2, 1, "c.PyConfig_SetBytesString", "PyConfig_SetBytesString"], [34, 2, 1, "c.PyConfig_SetString", "PyConfig_SetString"], [34, 2, 1, "c.PyConfig_SetWideStringList", "PyConfig_SetWideStringList"], [17, 4, 1, "c.PyContext", "PyContext"], [17, 4, 1, "c.PyContextToken", "PyContextToken"], [17, 2, 1, "c.PyContextToken_CheckExact", "PyContextToken_CheckExact"], [17, 0, 1, "c.PyContextToken_Type", "PyContextToken_Type"], [17, 4, 1, "c.PyContextVar", "PyContextVar"], [17, 2, 1, "c.PyContextVar_CheckExact", "PyContextVar_CheckExact"], [17, 2, 1, "c.PyContextVar_Get", "PyContextVar_Get"], [17, 2, 1, "c.PyContextVar_New", "PyContextVar_New"], [17, 2, 1, "c.PyContextVar_Reset", "PyContextVar_Reset"], [17, 2, 1, "c.PyContextVar_Set", "PyContextVar_Set"], [17, 0, 1, "c.PyContextVar_Type", "PyContextVar_Type"], [17, 2, 1, "c.PyContext_CheckExact", "PyContext_CheckExact"], [17, 2, 1, "c.PyContext_Copy", "PyContext_Copy"], [17, 2, 1, "c.PyContext_CopyCurrent", "PyContext_CopyCurrent"], [17, 2, 1, "c.PyContext_Enter", "PyContext_Enter"], [17, 2, 1, "c.PyContext_Exit", "PyContext_Exit"], [17, 2, 1, "c.PyContext_New", "PyContext_New"], [17, 0, 1, "c.PyContext_Type", "PyContext_Type"], [19, 4, 1, "c.PyCoroObject", "PyCoroObject"], [19, 2, 1, "c.PyCoro_CheckExact", "PyCoro_CheckExact"], [19, 2, 1, "c.PyCoro_New", "PyCoro_New"], [19, 0, 1, "c.PyCoro_Type", "PyCoro_Type"], [20, 2, 1, "c.PyDateTime_Check", "PyDateTime_Check"], [20, 2, 1, "c.PyDateTime_CheckExact", "PyDateTime_CheckExact"], [20, 2, 1, "c.PyDateTime_DATE_GET_FOLD", "PyDateTime_DATE_GET_FOLD"], [20, 2, 1, "c.PyDateTime_DATE_GET_HOUR", "PyDateTime_DATE_GET_HOUR"], [20, 2, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "PyDateTime_DATE_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_MINUTE", "PyDateTime_DATE_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_DATE_GET_SECOND", "PyDateTime_DATE_GET_SECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_TZINFO", "PyDateTime_DATE_GET_TZINFO"], [20, 2, 1, "c.PyDateTime_DELTA_GET_DAYS", "PyDateTime_DELTA_GET_DAYS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "PyDateTime_DELTA_GET_MICROSECONDS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_SECONDS", "PyDateTime_DELTA_GET_SECONDS"], [20, 4, 1, "c.PyDateTime_Date", "PyDateTime_Date"], [20, 4, 1, "c.PyDateTime_DateTime", "PyDateTime_DateTime"], [20, 0, 1, "c.PyDateTime_DateTimeType", "PyDateTime_DateTimeType"], [20, 0, 1, "c.PyDateTime_DateType", "PyDateTime_DateType"], [20, 4, 1, "c.PyDateTime_Delta", "PyDateTime_Delta"], [20, 0, 1, "c.PyDateTime_DeltaType", "PyDateTime_DeltaType"], [20, 2, 1, "c.PyDateTime_FromDateAndTime", "PyDateTime_FromDateAndTime"], [20, 2, 1, "c.PyDateTime_FromDateAndTimeAndFold", "PyDateTime_FromDateAndTimeAndFold"], [20, 2, 1, "c.PyDateTime_FromTimestamp", "PyDateTime_FromTimestamp"], [20, 2, 1, "c.PyDateTime_GET_DAY", "PyDateTime_GET_DAY"], [20, 2, 1, "c.PyDateTime_GET_MONTH", "PyDateTime_GET_MONTH"], [20, 2, 1, "c.PyDateTime_GET_YEAR", "PyDateTime_GET_YEAR"], [20, 2, 1, "c.PyDateTime_TIME_GET_FOLD", "PyDateTime_TIME_GET_FOLD"], [20, 2, 1, "c.PyDateTime_TIME_GET_HOUR", "PyDateTime_TIME_GET_HOUR"], [20, 2, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "PyDateTime_TIME_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_MINUTE", "PyDateTime_TIME_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_TIME_GET_SECOND", "PyDateTime_TIME_GET_SECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_TZINFO", "PyDateTime_TIME_GET_TZINFO"], [20, 0, 1, "c.PyDateTime_TZInfoType", "PyDateTime_TZInfoType"], [20, 4, 1, "c.PyDateTime_Time", "PyDateTime_Time"], [20, 0, 1, "c.PyDateTime_TimeType", "PyDateTime_TimeType"], [20, 0, 1, "c.PyDateTime_TimeZone_UTC", "PyDateTime_TimeZone_UTC"], [20, 2, 1, "c.PyDate_Check", "PyDate_Check"], [20, 2, 1, "c.PyDate_CheckExact", "PyDate_CheckExact"], [20, 2, 1, "c.PyDate_FromDate", "PyDate_FromDate"], [20, 2, 1, "c.PyDate_FromTimestamp", "PyDate_FromTimestamp"], [20, 2, 1, "c.PyDelta_Check", "PyDelta_Check"], [20, 2, 1, "c.PyDelta_CheckExact", "PyDelta_CheckExact"], [20, 2, 1, "c.PyDelta_FromDSU", "PyDelta_FromDSU"], [21, 2, 1, "c.PyDescr_IsData", "PyDescr_IsData"], [21, 2, 1, "c.PyDescr_NewClassMethod", "PyDescr_NewClassMethod"], [21, 2, 1, "c.PyDescr_NewGetSet", "PyDescr_NewGetSet"], [21, 2, 1, "c.PyDescr_NewMember", "PyDescr_NewMember"], [21, 2, 1, "c.PyDescr_NewMethod", "PyDescr_NewMethod"], [21, 2, 1, "c.PyDescr_NewWrapper", "PyDescr_NewWrapper"], [22, 4, 1, "c.PyDictObject", "PyDictObject"], [22, 2, 1, "c.PyDictProxy_New", "PyDictProxy_New"], [22, 2, 1, "c.PyDict_AddWatcher", "PyDict_AddWatcher"], [22, 2, 1, "c.PyDict_Check", "PyDict_Check"], [22, 2, 1, "c.PyDict_CheckExact", "PyDict_CheckExact"], [22, 2, 1, "c.PyDict_Clear", "PyDict_Clear"], [22, 2, 1, "c.PyDict_ClearWatcher", "PyDict_ClearWatcher"], [22, 2, 1, "c.PyDict_Contains", "PyDict_Contains"], [22, 2, 1, "c.PyDict_Copy", "PyDict_Copy"], [22, 2, 1, "c.PyDict_DelItem", "PyDict_DelItem"], [22, 2, 1, "c.PyDict_DelItemString", "PyDict_DelItemString"], [22, 2, 1, "c.PyDict_GetItem", "PyDict_GetItem"], [22, 2, 1, "c.PyDict_GetItemString", "PyDict_GetItemString"], [22, 2, 1, "c.PyDict_GetItemWithError", "PyDict_GetItemWithError"], [22, 2, 1, "c.PyDict_Items", "PyDict_Items"], [22, 2, 1, "c.PyDict_Keys", "PyDict_Keys"], [22, 2, 1, "c.PyDict_Merge", "PyDict_Merge"], [22, 2, 1, "c.PyDict_MergeFromSeq2", "PyDict_MergeFromSeq2"], [22, 2, 1, "c.PyDict_New", "PyDict_New"], [22, 2, 1, "c.PyDict_Next", "PyDict_Next"], [22, 2, 1, "c.PyDict_SetDefault", "PyDict_SetDefault"], [22, 2, 1, "c.PyDict_SetItem", "PyDict_SetItem"], [22, 2, 1, "c.PyDict_SetItemString", "PyDict_SetItemString"], [22, 2, 1, "c.PyDict_Size", "PyDict_Size"], [22, 0, 1, "c.PyDict_Type", "PyDict_Type"], [22, 2, 1, "c.PyDict_Unwatch", "PyDict_Unwatch"], [22, 2, 1, "c.PyDict_Update", "PyDict_Update"], [22, 2, 1, "c.PyDict_Values", "PyDict_Values"], [22, 2, 1, "c.PyDict_Watch", "PyDict_Watch"], [22, 4, 1, "c.PyDict_WatchCallback", "PyDict_WatchCallback"], [22, 4, 1, "c.PyDict_WatchEvent", "PyDict_WatchEvent"], [35, 1, 1, "c.PyDoc_STR", "PyDoc_STR"], [35, 1, 1, "c.PyDoc_STRVAR", "PyDoc_STRVAR"], [23, 2, 1, "c.PyErr_BadArgument", "PyErr_BadArgument"], [23, 2, 1, "c.PyErr_BadInternalCall", "PyErr_BadInternalCall"], [23, 2, 1, "c.PyErr_CheckSignals", "PyErr_CheckSignals"], [23, 2, 1, "c.PyErr_Clear", "PyErr_Clear"], [23, 2, 1, "c.PyErr_DisplayException", "PyErr_DisplayException"], [23, 2, 1, "c.PyErr_ExceptionMatches", "PyErr_ExceptionMatches"], [23, 2, 1, "c.PyErr_Fetch", "PyErr_Fetch"], [23, 2, 1, "c.PyErr_Format", "PyErr_Format"], [23, 2, 1, "c.PyErr_FormatV", "PyErr_FormatV"], [23, 2, 1, "c.PyErr_GetExcInfo", "PyErr_GetExcInfo"], [23, 2, 1, "c.PyErr_GetHandledException", "PyErr_GetHandledException"], [23, 2, 1, "c.PyErr_GetRaisedException", "PyErr_GetRaisedException"], [23, 2, 1, "c.PyErr_GivenExceptionMatches", "PyErr_GivenExceptionMatches"], [23, 2, 1, "c.PyErr_NewException", "PyErr_NewException"], [23, 2, 1, "c.PyErr_NewExceptionWithDoc", "PyErr_NewExceptionWithDoc"], [23, 2, 1, "c.PyErr_NoMemory", "PyErr_NoMemory"], [23, 2, 1, "c.PyErr_NormalizeException", "PyErr_NormalizeException"], [23, 2, 1, "c.PyErr_Occurred", "PyErr_Occurred"], [23, 2, 1, "c.PyErr_Print", "PyErr_Print"], [23, 2, 1, "c.PyErr_PrintEx", "PyErr_PrintEx"], [23, 2, 1, "c.PyErr_ResourceWarning", "PyErr_ResourceWarning"], [23, 2, 1, "c.PyErr_Restore", "PyErr_Restore"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErr", "PyErr_SetExcFromWindowsErr"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "PyErr_SetExcFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "PyErr_SetExcFromWindowsErrWithFilenameObject"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "PyErr_SetExcFromWindowsErrWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetExcInfo", "PyErr_SetExcInfo"], [23, 2, 1, "c.PyErr_SetFromErrno", "PyErr_SetFromErrno"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilename", "PyErr_SetFromErrnoWithFilename"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "PyErr_SetFromErrnoWithFilenameObject"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "PyErr_SetFromErrnoWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetFromWindowsErr", "PyErr_SetFromWindowsErr"], [23, 2, 1, "c.PyErr_SetFromWindowsErrWithFilename", "PyErr_SetFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetHandledException", "PyErr_SetHandledException"], [23, 2, 1, "c.PyErr_SetImportError", "PyErr_SetImportError"], [23, 2, 1, "c.PyErr_SetImportErrorSubclass", "PyErr_SetImportErrorSubclass"], [23, 2, 1, "c.PyErr_SetInterrupt", "PyErr_SetInterrupt"], [23, 2, 1, "c.PyErr_SetInterruptEx", "PyErr_SetInterruptEx"], [23, 2, 1, "c.PyErr_SetNone", "PyErr_SetNone"], [23, 2, 1, "c.PyErr_SetObject", "PyErr_SetObject"], [23, 2, 1, "c.PyErr_SetRaisedException", "PyErr_SetRaisedException"], [23, 2, 1, "c.PyErr_SetString", "PyErr_SetString"], [23, 2, 1, "c.PyErr_SyntaxLocation", "PyErr_SyntaxLocation"], [23, 2, 1, "c.PyErr_SyntaxLocationEx", "PyErr_SyntaxLocationEx"], [23, 2, 1, "c.PyErr_SyntaxLocationObject", "PyErr_SyntaxLocationObject"], [23, 2, 1, "c.PyErr_WarnEx", "PyErr_WarnEx"], [23, 2, 1, "c.PyErr_WarnExplicit", "PyErr_WarnExplicit"], [23, 2, 1, "c.PyErr_WarnExplicitObject", "PyErr_WarnExplicitObject"], [23, 2, 1, "c.PyErr_WarnFormat", "PyErr_WarnFormat"], [23, 2, 1, "c.PyErr_WriteUnraisable", "PyErr_WriteUnraisable"], [33, 2, 1, "c.PyEval_AcquireLock", "PyEval_AcquireLock"], [33, 2, 1, "c.PyEval_AcquireThread", "PyEval_AcquireThread"], [66, 2, 1, "c.PyEval_EvalCode", "PyEval_EvalCode"], [66, 2, 1, "c.PyEval_EvalCodeEx", "PyEval_EvalCodeEx"], [66, 2, 1, "c.PyEval_EvalFrame", "PyEval_EvalFrame"], [66, 2, 1, "c.PyEval_EvalFrameEx", "PyEval_EvalFrameEx"], [53, 2, 1, "c.PyEval_GetBuiltins", "PyEval_GetBuiltins"], [53, 2, 1, "c.PyEval_GetFrame", "PyEval_GetFrame"], [53, 2, 1, "c.PyEval_GetFuncDesc", "PyEval_GetFuncDesc"], [53, 2, 1, "c.PyEval_GetFuncName", "PyEval_GetFuncName"], [53, 2, 1, "c.PyEval_GetGlobals", "PyEval_GetGlobals"], [53, 2, 1, "c.PyEval_GetLocals", "PyEval_GetLocals"], [33, 2, 1, "c.PyEval_InitThreads", "PyEval_InitThreads"], [66, 2, 1, "c.PyEval_MergeCompilerFlags", "PyEval_MergeCompilerFlags"], [33, 2, 1, "c.PyEval_ReleaseLock", "PyEval_ReleaseLock"], [33, 2, 1, "c.PyEval_ReleaseThread", "PyEval_ReleaseThread"], [33, 2, 1, "c.PyEval_RestoreThread", "PyEval_RestoreThread"], [33, 2, 1, "c.PyEval_SaveThread", "PyEval_SaveThread"], [33, 2, 1, "c.PyEval_SetProfile", "PyEval_SetProfile"], [33, 2, 1, "c.PyEval_SetProfileAllThreads", "PyEval_SetProfileAllThreads"], [33, 2, 1, "c.PyEval_SetTrace", "PyEval_SetTrace"], [33, 2, 1, "c.PyEval_SetTraceAllThreads", "PyEval_SetTraceAllThreads"], [33, 2, 1, "c.PyEval_ThreadsInitialized", "PyEval_ThreadsInitialized"], [23, 2, 1, "c.PyException_GetArgs", "PyException_GetArgs"], [23, 2, 1, "c.PyException_GetCause", "PyException_GetCause"], [23, 2, 1, "c.PyException_GetContext", "PyException_GetContext"], [23, 2, 1, "c.PyException_GetTraceback", "PyException_GetTraceback"], [23, 2, 1, "c.PyException_SetArgs", "PyException_SetArgs"], [23, 2, 1, "c.PyException_SetCause", "PyException_SetCause"], [23, 2, 1, "c.PyException_SetContext", "PyException_SetContext"], [23, 2, 1, "c.PyException_SetTraceback", "PyException_SetTraceback"], [24, 2, 1, "c.PyFile_FromFd", "PyFile_FromFd"], [24, 2, 1, "c.PyFile_GetLine", "PyFile_GetLine"], [24, 2, 1, "c.PyFile_SetOpenCodeHook", "PyFile_SetOpenCodeHook"], [24, 2, 1, "c.PyFile_WriteObject", "PyFile_WriteObject"], [24, 2, 1, "c.PyFile_WriteString", "PyFile_WriteString"], [25, 4, 1, "c.PyFloatObject", "PyFloatObject"], [25, 2, 1, "c.PyFloat_AS_DOUBLE", "PyFloat_AS_DOUBLE"], [25, 2, 1, "c.PyFloat_AsDouble", "PyFloat_AsDouble"], [25, 2, 1, "c.PyFloat_Check", "PyFloat_Check"], [25, 2, 1, "c.PyFloat_CheckExact", "PyFloat_CheckExact"], [25, 2, 1, "c.PyFloat_FromDouble", "PyFloat_FromDouble"], [25, 2, 1, "c.PyFloat_FromString", "PyFloat_FromString"], [25, 2, 1, "c.PyFloat_GetInfo", "PyFloat_GetInfo"], [25, 2, 1, "c.PyFloat_GetMax", "PyFloat_GetMax"], [25, 2, 1, "c.PyFloat_GetMin", "PyFloat_GetMin"], [25, 2, 1, "c.PyFloat_Pack2", "PyFloat_Pack2"], [25, 2, 1, "c.PyFloat_Pack4", "PyFloat_Pack4"], [25, 2, 1, "c.PyFloat_Pack8", "PyFloat_Pack8"], [25, 0, 1, "c.PyFloat_Type", "PyFloat_Type"], [25, 2, 1, "c.PyFloat_Unpack2", "PyFloat_Unpack2"], [25, 2, 1, "c.PyFloat_Unpack4", "PyFloat_Unpack4"], [25, 2, 1, "c.PyFloat_Unpack8", "PyFloat_Unpack8"], [26, 4, 1, "c.PyFrameObject", "PyFrameObject"], [26, 2, 1, "c.PyFrame_Check", "PyFrame_Check"], [26, 2, 1, "c.PyFrame_GetBack", "PyFrame_GetBack"], [26, 2, 1, "c.PyFrame_GetBuiltins", "PyFrame_GetBuiltins"], [26, 2, 1, "c.PyFrame_GetCode", "PyFrame_GetCode"], [26, 2, 1, "c.PyFrame_GetGenerator", "PyFrame_GetGenerator"], [26, 2, 1, "c.PyFrame_GetGlobals", "PyFrame_GetGlobals"], [26, 2, 1, "c.PyFrame_GetLasti", "PyFrame_GetLasti"], [26, 2, 1, "c.PyFrame_GetLineNumber", "PyFrame_GetLineNumber"], [26, 2, 1, "c.PyFrame_GetLocals", "PyFrame_GetLocals"], [26, 2, 1, "c.PyFrame_GetVar", "PyFrame_GetVar"], [26, 2, 1, "c.PyFrame_GetVarString", "PyFrame_GetVarString"], [26, 0, 1, "c.PyFrame_Type", "PyFrame_Type"], [55, 2, 1, "c.PyFrozenSet_Check", "PyFrozenSet_Check"], [55, 2, 1, "c.PyFrozenSet_CheckExact", "PyFrozenSet_CheckExact"], [55, 2, 1, "c.PyFrozenSet_New", "PyFrozenSet_New"], [55, 0, 1, "c.PyFrozenSet_Type", "PyFrozenSet_Type"], [27, 4, 1, "c.PyFunctionObject", "PyFunctionObject"], [27, 2, 1, "c.PyFunction_AddWatcher", "PyFunction_AddWatcher"], [27, 2, 1, "c.PyFunction_Check", "PyFunction_Check"], [27, 2, 1, "c.PyFunction_ClearWatcher", "PyFunction_ClearWatcher"], [27, 2, 1, "c.PyFunction_GetAnnotations", "PyFunction_GetAnnotations"], [27, 2, 1, "c.PyFunction_GetClosure", "PyFunction_GetClosure"], [27, 2, 1, "c.PyFunction_GetCode", "PyFunction_GetCode"], [27, 2, 1, "c.PyFunction_GetDefaults", "PyFunction_GetDefaults"], [27, 2, 1, "c.PyFunction_GetGlobals", "PyFunction_GetGlobals"], [27, 2, 1, "c.PyFunction_GetModule", "PyFunction_GetModule"], [27, 2, 1, "c.PyFunction_New", "PyFunction_New"], [27, 2, 1, "c.PyFunction_NewWithQualName", "PyFunction_NewWithQualName"], [27, 2, 1, "c.PyFunction_SetAnnotations", "PyFunction_SetAnnotations"], [27, 2, 1, "c.PyFunction_SetClosure", "PyFunction_SetClosure"], [27, 2, 1, "c.PyFunction_SetDefaults", "PyFunction_SetDefaults"], [27, 2, 1, "c.PyFunction_SetVectorcall", "PyFunction_SetVectorcall"], [27, 0, 1, "c.PyFunction_Type", "PyFunction_Type"], [27, 4, 1, "c.PyFunction_WatchCallback", "PyFunction_WatchCallback"], [27, 4, 1, "c.PyFunction_WatchEvent", "PyFunction_WatchEvent"], [28, 2, 1, "c.PyGC_Collect", "PyGC_Collect"], [28, 2, 1, "c.PyGC_Disable", "PyGC_Disable"], [28, 2, 1, "c.PyGC_Enable", "PyGC_Enable"], [28, 2, 1, "c.PyGC_IsEnabled", "PyGC_IsEnabled"], [33, 2, 1, "c.PyGILState_Check", "PyGILState_Check"], [33, 2, 1, "c.PyGILState_Ensure", "PyGILState_Ensure"], [33, 2, 1, "c.PyGILState_GetThisThreadState", "PyGILState_GetThisThreadState"], [33, 2, 1, "c.PyGILState_Release", "PyGILState_Release"], [29, 4, 1, "c.PyGenObject", "PyGenObject"], [29, 2, 1, "c.PyGen_Check", "PyGen_Check"], [29, 2, 1, "c.PyGen_CheckExact", "PyGen_CheckExact"], [29, 2, 1, "c.PyGen_New", "PyGen_New"], [29, 2, 1, "c.PyGen_NewWithQualName", "PyGen_NewWithQualName"], [29, 0, 1, "c.PyGen_Type", "PyGen_Type"], [58, 4, 1, "c.PyGetSetDef", "PyGetSetDef"], [30, 4, 1, "c.PyHash_FuncDef", "PyHash_FuncDef"], [30, 2, 1, "c.PyHash_GetFuncDef", "PyHash_GetFuncDef"], [31, 2, 1, "c.PyImport_AddModule", "PyImport_AddModule"], [31, 2, 1, "c.PyImport_AddModuleObject", "PyImport_AddModuleObject"], [31, 2, 1, "c.PyImport_AppendInittab", "PyImport_AppendInittab"], [31, 2, 1, "c.PyImport_ExecCodeModule", "PyImport_ExecCodeModule"], [31, 2, 1, "c.PyImport_ExecCodeModuleEx", "PyImport_ExecCodeModuleEx"], [31, 2, 1, "c.PyImport_ExecCodeModuleObject", "PyImport_ExecCodeModuleObject"], [31, 2, 1, "c.PyImport_ExecCodeModuleWithPathnames", "PyImport_ExecCodeModuleWithPathnames"], [31, 2, 1, "c.PyImport_ExtendInittab", "PyImport_ExtendInittab"], [31, 0, 1, "c.PyImport_FrozenModules", "PyImport_FrozenModules"], [31, 2, 1, "c.PyImport_GetImporter", "PyImport_GetImporter"], [31, 2, 1, "c.PyImport_GetMagicNumber", "PyImport_GetMagicNumber"], [31, 2, 1, "c.PyImport_GetMagicTag", "PyImport_GetMagicTag"], [31, 2, 1, "c.PyImport_GetModule", "PyImport_GetModule"], [31, 2, 1, "c.PyImport_GetModuleDict", "PyImport_GetModuleDict"], [31, 2, 1, "c.PyImport_Import", "PyImport_Import"], [31, 2, 1, "c.PyImport_ImportFrozenModule", "PyImport_ImportFrozenModule"], [31, 2, 1, "c.PyImport_ImportFrozenModuleObject", "PyImport_ImportFrozenModuleObject"], [31, 2, 1, "c.PyImport_ImportModule", "PyImport_ImportModule"], [31, 2, 1, "c.PyImport_ImportModuleEx", "PyImport_ImportModuleEx"], [31, 2, 1, "c.PyImport_ImportModuleLevel", "PyImport_ImportModuleLevel"], [31, 2, 1, "c.PyImport_ImportModuleLevelObject", "PyImport_ImportModuleLevelObject"], [31, 2, 1, "c.PyImport_ImportModuleNoBlock", "PyImport_ImportModuleNoBlock"], [31, 2, 1, "c.PyImport_ReloadModule", "PyImport_ReloadModule"], [47, 2, 1, "c.PyIndex_Check", "PyIndex_Check"], [71, 2, 1, "c.PyInit_modulename", "PyInit_modulename"], [44, 2, 1, "c.PyInstanceMethod_Check", "PyInstanceMethod_Check"], [44, 2, 1, "c.PyInstanceMethod_Function", "PyInstanceMethod_Function"], [44, 2, 1, "c.PyInstanceMethod_GET_FUNCTION", "PyInstanceMethod_GET_FUNCTION"], [44, 2, 1, "c.PyInstanceMethod_New", "PyInstanceMethod_New"], [44, 0, 1, "c.PyInstanceMethod_Type", "PyInstanceMethod_Type"], [33, 4, 1, "c.PyInterpreterConfig", "PyInterpreterConfig"], [33, 1, 1, "c.PyInterpreterConfig_DEFAULT_GIL", "PyInterpreterConfig_DEFAULT_GIL"], [33, 1, 1, "c.PyInterpreterConfig_OWN_GIL", "PyInterpreterConfig_OWN_GIL"], [33, 1, 1, "c.PyInterpreterConfig_SHARED_GIL", "PyInterpreterConfig_SHARED_GIL"], [33, 4, 1, "c.PyInterpreterState", "PyInterpreterState"], [33, 2, 1, "c.PyInterpreterState_Clear", "PyInterpreterState_Clear"], [33, 2, 1, "c.PyInterpreterState_Delete", "PyInterpreterState_Delete"], [33, 2, 1, "c.PyInterpreterState_Get", "PyInterpreterState_Get"], [33, 2, 1, "c.PyInterpreterState_GetDict", "PyInterpreterState_GetDict"], [33, 2, 1, "c.PyInterpreterState_GetID", "PyInterpreterState_GetID"], [33, 2, 1, "c.PyInterpreterState_Head", "PyInterpreterState_Head"], [33, 2, 1, "c.PyInterpreterState_Main", "PyInterpreterState_Main"], [33, 2, 1, "c.PyInterpreterState_New", "PyInterpreterState_New"], [33, 2, 1, "c.PyInterpreterState_Next", "PyInterpreterState_Next"], [33, 2, 1, "c.PyInterpreterState_ThreadHead", "PyInterpreterState_ThreadHead"], [36, 2, 1, "c.PyIter_Check", "PyIter_Check"], [36, 2, 1, "c.PyIter_Next", "PyIter_Next"], [36, 2, 1, "c.PyIter_Send", "PyIter_Send"], [38, 4, 1, "c.PyListObject", "PyListObject"], [38, 2, 1, "c.PyList_Append", "PyList_Append"], [38, 2, 1, "c.PyList_AsTuple", "PyList_AsTuple"], [38, 2, 1, "c.PyList_Check", "PyList_Check"], [38, 2, 1, "c.PyList_CheckExact", "PyList_CheckExact"], [38, 2, 1, "c.PyList_GET_ITEM", "PyList_GET_ITEM"], [38, 2, 1, "c.PyList_GET_SIZE", "PyList_GET_SIZE"], [38, 2, 1, "c.PyList_GetItem", "PyList_GetItem"], [38, 2, 1, "c.PyList_GetSlice", "PyList_GetSlice"], [38, 2, 1, "c.PyList_Insert", "PyList_Insert"], [38, 2, 1, "c.PyList_New", "PyList_New"], [38, 2, 1, "c.PyList_Reverse", "PyList_Reverse"], [38, 2, 1, "c.PyList_SET_ITEM", "PyList_SET_ITEM"], [38, 2, 1, "c.PyList_SetItem", "PyList_SetItem"], [38, 2, 1, "c.PyList_SetSlice", "PyList_SetSlice"], [38, 2, 1, "c.PyList_Size", "PyList_Size"], [38, 2, 1, "c.PyList_Sort", "PyList_Sort"], [38, 0, 1, "c.PyList_Type", "PyList_Type"], [39, 4, 1, "c.PyLongObject", "PyLongObject"], [39, 2, 1, "c.PyLong_AsDouble", "PyLong_AsDouble"], [39, 2, 1, "c.PyLong_AsLong", "PyLong_AsLong"], [39, 2, 1, "c.PyLong_AsLongAndOverflow", "PyLong_AsLongAndOverflow"], [39, 2, 1, "c.PyLong_AsLongLong", "PyLong_AsLongLong"], [39, 2, 1, "c.PyLong_AsLongLongAndOverflow", "PyLong_AsLongLongAndOverflow"], [39, 2, 1, "c.PyLong_AsSize_t", "PyLong_AsSize_t"], [39, 2, 1, "c.PyLong_AsSsize_t", "PyLong_AsSsize_t"], [39, 2, 1, "c.PyLong_AsUnsignedLong", "PyLong_AsUnsignedLong"], [39, 2, 1, "c.PyLong_AsUnsignedLongLong", "PyLong_AsUnsignedLongLong"], [39, 2, 1, "c.PyLong_AsUnsignedLongLongMask", "PyLong_AsUnsignedLongLongMask"], [39, 2, 1, "c.PyLong_AsUnsignedLongMask", "PyLong_AsUnsignedLongMask"], [39, 2, 1, "c.PyLong_AsVoidPtr", "PyLong_AsVoidPtr"], [39, 2, 1, "c.PyLong_Check", "PyLong_Check"], [39, 2, 1, "c.PyLong_CheckExact", "PyLong_CheckExact"], [39, 2, 1, "c.PyLong_FromDouble", "PyLong_FromDouble"], [39, 2, 1, "c.PyLong_FromLong", "PyLong_FromLong"], [39, 2, 1, "c.PyLong_FromLongLong", "PyLong_FromLongLong"], [39, 2, 1, "c.PyLong_FromSize_t", "PyLong_FromSize_t"], [39, 2, 1, "c.PyLong_FromSsize_t", "PyLong_FromSsize_t"], [39, 2, 1, "c.PyLong_FromString", "PyLong_FromString"], [39, 2, 1, "c.PyLong_FromUnicodeObject", "PyLong_FromUnicodeObject"], [39, 2, 1, "c.PyLong_FromUnsignedLong", "PyLong_FromUnsignedLong"], [39, 2, 1, "c.PyLong_FromUnsignedLongLong", "PyLong_FromUnsignedLongLong"], [39, 2, 1, "c.PyLong_FromVoidPtr", "PyLong_FromVoidPtr"], [39, 0, 1, "c.PyLong_Type", "PyLong_Type"], [35, 1, 1, "c.PyMODINIT_FUNC", "PyMODINIT_FUNC"], [63, 4, 1, "c.PyMappingMethods", "PyMappingMethods"], [40, 2, 1, "c.PyMapping_Check", "PyMapping_Check"], [40, 2, 1, "c.PyMapping_DelItem", "PyMapping_DelItem"], [40, 2, 1, "c.PyMapping_DelItemString", "PyMapping_DelItemString"], [40, 2, 1, "c.PyMapping_GetItemString", "PyMapping_GetItemString"], [40, 2, 1, "c.PyMapping_HasKey", "PyMapping_HasKey"], [40, 2, 1, "c.PyMapping_HasKeyString", "PyMapping_HasKeyString"], [40, 2, 1, "c.PyMapping_Items", "PyMapping_Items"], [40, 2, 1, "c.PyMapping_Keys", "PyMapping_Keys"], [40, 2, 1, "c.PyMapping_Length", "PyMapping_Length"], [40, 2, 1, "c.PyMapping_SetItemString", "PyMapping_SetItemString"], [40, 2, 1, "c.PyMapping_Size", "PyMapping_Size"], [40, 2, 1, "c.PyMapping_Values", "PyMapping_Values"], [41, 2, 1, "c.PyMarshal_ReadLastObjectFromFile", "PyMarshal_ReadLastObjectFromFile"], [41, 2, 1, "c.PyMarshal_ReadLongFromFile", "PyMarshal_ReadLongFromFile"], [41, 2, 1, "c.PyMarshal_ReadObjectFromFile", "PyMarshal_ReadObjectFromFile"], [41, 2, 1, "c.PyMarshal_ReadObjectFromString", "PyMarshal_ReadObjectFromString"], [41, 2, 1, "c.PyMarshal_ReadShortFromFile", "PyMarshal_ReadShortFromFile"], [41, 2, 1, "c.PyMarshal_WriteLongToFile", "PyMarshal_WriteLongToFile"], [41, 2, 1, "c.PyMarshal_WriteObjectToFile", "PyMarshal_WriteObjectToFile"], [41, 2, 1, "c.PyMarshal_WriteObjectToString", "PyMarshal_WriteObjectToString"], [42, 4, 1, "c.PyMemAllocatorDomain", "PyMemAllocatorDomain"], [42, 4, 1, "c.PyMemAllocatorEx", "PyMemAllocatorEx"], [42, 2, 1, "c.PyMem_Calloc", "PyMem_Calloc"], [42, 2, 1, "c.PyMem_Del", "PyMem_Del"], [42, 2, 1, "c.PyMem_Free", "PyMem_Free"], [42, 2, 1, "c.PyMem_GetAllocator", "PyMem_GetAllocator"], [42, 2, 1, "c.PyMem_Malloc", "PyMem_Malloc"], [42, 1, 1, "c.PyMem_New", "PyMem_New"], [42, 2, 1, "c.PyMem_RawCalloc", "PyMem_RawCalloc"], [42, 2, 1, "c.PyMem_RawFree", "PyMem_RawFree"], [42, 2, 1, "c.PyMem_RawMalloc", "PyMem_RawMalloc"], [42, 2, 1, "c.PyMem_RawRealloc", "PyMem_RawRealloc"], [42, 2, 1, "c.PyMem_Realloc", "PyMem_Realloc"], [42, 1, 1, "c.PyMem_Resize", "PyMem_Resize"], [42, 2, 1, "c.PyMem_SetAllocator", "PyMem_SetAllocator"], [42, 2, 1, "c.PyMem_SetupDebugHooks", "PyMem_SetupDebugHooks"], [58, 4, 1, "c.PyMemberDef", "PyMemberDef"], [58, 2, 1, "c.PyMember_GetOne", "PyMember_GetOne"], [58, 2, 1, "c.PyMember_SetOne", "PyMember_SetOne"], [43, 2, 1, "c.PyMemoryView_Check", "PyMemoryView_Check"], [43, 2, 1, "c.PyMemoryView_FromBuffer", "PyMemoryView_FromBuffer"], [43, 2, 1, "c.PyMemoryView_FromMemory", "PyMemoryView_FromMemory"], [43, 2, 1, "c.PyMemoryView_FromObject", "PyMemoryView_FromObject"], [43, 2, 1, "c.PyMemoryView_GET_BASE", "PyMemoryView_GET_BASE"], [43, 2, 1, "c.PyMemoryView_GET_BUFFER", "PyMemoryView_GET_BUFFER"], [43, 2, 1, "c.PyMemoryView_GetContiguous", "PyMemoryView_GetContiguous"], [58, 4, 1, "c.PyMethodDef", "PyMethodDef"], [44, 2, 1, "c.PyMethod_Check", "PyMethod_Check"], [44, 2, 1, "c.PyMethod_Function", "PyMethod_Function"], [44, 2, 1, "c.PyMethod_GET_FUNCTION", "PyMethod_GET_FUNCTION"], [44, 2, 1, "c.PyMethod_GET_SELF", "PyMethod_GET_SELF"], [44, 2, 1, "c.PyMethod_New", "PyMethod_New"], [44, 2, 1, "c.PyMethod_Self", "PyMethod_Self"], [44, 0, 1, "c.PyMethod_Type", "PyMethod_Type"], [45, 4, 1, "c.PyModuleDef", "PyModuleDef"], [45, 2, 1, "c.PyModuleDef_Init", "PyModuleDef_Init"], [45, 4, 1, "c.PyModuleDef_Slot", "PyModuleDef_Slot"], [45, 2, 1, "c.PyModule_AddFunctions", "PyModule_AddFunctions"], [45, 2, 1, "c.PyModule_AddIntConstant", "PyModule_AddIntConstant"], [45, 1, 1, "c.PyModule_AddIntMacro", "PyModule_AddIntMacro"], [45, 2, 1, "c.PyModule_AddObject", "PyModule_AddObject"], [45, 2, 1, "c.PyModule_AddObjectRef", "PyModule_AddObjectRef"], [45, 2, 1, "c.PyModule_AddStringConstant", "PyModule_AddStringConstant"], [45, 1, 1, "c.PyModule_AddStringMacro", "PyModule_AddStringMacro"], [45, 2, 1, "c.PyModule_AddType", "PyModule_AddType"], [45, 2, 1, "c.PyModule_Check", "PyModule_Check"], [45, 2, 1, "c.PyModule_CheckExact", "PyModule_CheckExact"], [45, 2, 1, "c.PyModule_Create", "PyModule_Create"], [45, 2, 1, "c.PyModule_Create2", "PyModule_Create2"], [45, 2, 1, "c.PyModule_ExecDef", "PyModule_ExecDef"], [45, 2, 1, "c.PyModule_FromDefAndSpec", "PyModule_FromDefAndSpec"], [45, 2, 1, "c.PyModule_FromDefAndSpec2", "PyModule_FromDefAndSpec2"], [45, 2, 1, "c.PyModule_GetDef", "PyModule_GetDef"], [45, 2, 1, "c.PyModule_GetDict", "PyModule_GetDict"], [45, 2, 1, "c.PyModule_GetFilename", "PyModule_GetFilename"], [45, 2, 1, "c.PyModule_GetFilenameObject", "PyModule_GetFilenameObject"], [45, 2, 1, "c.PyModule_GetName", "PyModule_GetName"], [45, 2, 1, "c.PyModule_GetNameObject", "PyModule_GetNameObject"], [45, 2, 1, "c.PyModule_GetState", "PyModule_GetState"], [45, 2, 1, "c.PyModule_New", "PyModule_New"], [45, 2, 1, "c.PyModule_NewObject", "PyModule_NewObject"], [45, 2, 1, "c.PyModule_SetDocString", "PyModule_SetDocString"], [45, 0, 1, "c.PyModule_Type", "PyModule_Type"], [63, 4, 1, "c.PyNumberMethods", "PyNumberMethods"], [47, 2, 1, "c.PyNumber_Absolute", "PyNumber_Absolute"], [47, 2, 1, "c.PyNumber_Add", "PyNumber_Add"], [47, 2, 1, "c.PyNumber_And", "PyNumber_And"], [47, 2, 1, "c.PyNumber_AsSsize_t", "PyNumber_AsSsize_t"], [47, 2, 1, "c.PyNumber_Check", "PyNumber_Check"], [47, 2, 1, "c.PyNumber_Divmod", "PyNumber_Divmod"], [47, 2, 1, "c.PyNumber_Float", "PyNumber_Float"], [47, 2, 1, "c.PyNumber_FloorDivide", "PyNumber_FloorDivide"], [47, 2, 1, "c.PyNumber_InPlaceAdd", "PyNumber_InPlaceAdd"], [47, 2, 1, "c.PyNumber_InPlaceAnd", "PyNumber_InPlaceAnd"], [47, 2, 1, "c.PyNumber_InPlaceFloorDivide", "PyNumber_InPlaceFloorDivide"], [47, 2, 1, "c.PyNumber_InPlaceLshift", "PyNumber_InPlaceLshift"], [47, 2, 1, "c.PyNumber_InPlaceMatrixMultiply", "PyNumber_InPlaceMatrixMultiply"], [47, 2, 1, "c.PyNumber_InPlaceMultiply", "PyNumber_InPlaceMultiply"], [47, 2, 1, "c.PyNumber_InPlaceOr", "PyNumber_InPlaceOr"], [47, 2, 1, "c.PyNumber_InPlacePower", "PyNumber_InPlacePower"], [47, 2, 1, "c.PyNumber_InPlaceRemainder", "PyNumber_InPlaceRemainder"], [47, 2, 1, "c.PyNumber_InPlaceRshift", "PyNumber_InPlaceRshift"], [47, 2, 1, "c.PyNumber_InPlaceSubtract", "PyNumber_InPlaceSubtract"], [47, 2, 1, "c.PyNumber_InPlaceTrueDivide", "PyNumber_InPlaceTrueDivide"], [47, 2, 1, "c.PyNumber_InPlaceXor", "PyNumber_InPlaceXor"], [47, 2, 1, "c.PyNumber_Index", "PyNumber_Index"], [47, 2, 1, "c.PyNumber_Invert", "PyNumber_Invert"], [47, 2, 1, "c.PyNumber_Long", "PyNumber_Long"], [47, 2, 1, "c.PyNumber_Lshift", "PyNumber_Lshift"], [47, 2, 1, "c.PyNumber_MatrixMultiply", "PyNumber_MatrixMultiply"], [47, 2, 1, "c.PyNumber_Multiply", "PyNumber_Multiply"], [47, 2, 1, "c.PyNumber_Negative", "PyNumber_Negative"], [47, 2, 1, "c.PyNumber_Or", "PyNumber_Or"], [47, 2, 1, "c.PyNumber_Positive", "PyNumber_Positive"], [47, 2, 1, "c.PyNumber_Power", "PyNumber_Power"], [47, 2, 1, "c.PyNumber_Remainder", "PyNumber_Remainder"], [47, 2, 1, "c.PyNumber_Rshift", "PyNumber_Rshift"], [47, 2, 1, "c.PyNumber_Subtract", "PyNumber_Subtract"], [47, 2, 1, "c.PyNumber_ToBase", "PyNumber_ToBase"], [47, 2, 1, "c.PyNumber_TrueDivide", "PyNumber_TrueDivide"], [47, 2, 1, "c.PyNumber_Xor", "PyNumber_Xor"], [59, 2, 1, "c.PyOS_AfterFork", "PyOS_AfterFork"], [59, 2, 1, "c.PyOS_AfterFork_Child", "PyOS_AfterFork_Child"], [59, 2, 1, "c.PyOS_AfterFork_Parent", "PyOS_AfterFork_Parent"], [59, 2, 1, "c.PyOS_BeforeFork", "PyOS_BeforeFork"], [59, 2, 1, "c.PyOS_CheckStack", "PyOS_CheckStack"], [59, 2, 1, "c.PyOS_FSPath", "PyOS_FSPath"], [66, 0, 1, "c.PyOS_InputHook", "PyOS_InputHook"], [66, 0, 1, "c.PyOS_ReadlineFunctionPointer", "PyOS_ReadlineFunctionPointer"], [18, 2, 1, "c.PyOS_double_to_string", "PyOS_double_to_string"], [59, 2, 1, "c.PyOS_getsig", "PyOS_getsig"], [59, 2, 1, "c.PyOS_setsig", "PyOS_setsig"], [59, 4, 1, "c.PyOS_sighandler_t", "PyOS_sighandler_t"], [18, 2, 1, "c.PyOS_snprintf", "PyOS_snprintf"], [18, 2, 1, "c.PyOS_stricmp", "PyOS_stricmp"], [18, 2, 1, "c.PyOS_string_to_double", "PyOS_string_to_double"], [18, 2, 1, "c.PyOS_strnicmp", "PyOS_strnicmp"], [18, 2, 1, "c.PyOS_strtol", "PyOS_strtol"], [18, 2, 1, "c.PyOS_strtoul", "PyOS_strtoul"], [18, 2, 1, "c.PyOS_vsnprintf", "PyOS_vsnprintf"], [58, 4, 1, "c.PyObject", "PyObject"], [42, 4, 1, "c.PyObjectArenaAllocator", "PyObjectArenaAllocator"], [49, 2, 1, "c.PyObject_ASCII", "PyObject_ASCII"], [48, 2, 1, "c.PyObject_AsCharBuffer", "PyObject_AsCharBuffer"], [24, 2, 1, "c.PyObject_AsFileDescriptor", "PyObject_AsFileDescriptor"], [48, 2, 1, "c.PyObject_AsReadBuffer", "PyObject_AsReadBuffer"], [48, 2, 1, "c.PyObject_AsWriteBuffer", "PyObject_AsWriteBuffer"], [49, 2, 1, "c.PyObject_Bytes", "PyObject_Bytes"], [10, 2, 1, "c.PyObject_Call", "PyObject_Call"], [10, 2, 1, "c.PyObject_CallFunction", "PyObject_CallFunction"], [10, 2, 1, "c.PyObject_CallFunctionObjArgs", "PyObject_CallFunctionObjArgs"], [10, 2, 1, "c.PyObject_CallMethod", "PyObject_CallMethod"], [10, 2, 1, "c.PyObject_CallMethodNoArgs", "PyObject_CallMethodNoArgs"], [10, 2, 1, "c.PyObject_CallMethodObjArgs", "PyObject_CallMethodObjArgs"], [10, 2, 1, "c.PyObject_CallMethodOneArg", "PyObject_CallMethodOneArg"], [10, 2, 1, "c.PyObject_CallNoArgs", "PyObject_CallNoArgs"], [10, 2, 1, "c.PyObject_CallObject", "PyObject_CallObject"], [10, 2, 1, "c.PyObject_CallOneArg", "PyObject_CallOneArg"], [42, 2, 1, "c.PyObject_Calloc", "PyObject_Calloc"], [7, 2, 1, "c.PyObject_CheckBuffer", "PyObject_CheckBuffer"], [48, 2, 1, "c.PyObject_CheckReadBuffer", "PyObject_CheckReadBuffer"], [67, 2, 1, "c.PyObject_ClearWeakRefs", "PyObject_ClearWeakRefs"], [7, 2, 1, "c.PyObject_CopyData", "PyObject_CopyData"], [3, 2, 1, "c.PyObject_Del", "PyObject_Del"], [49, 2, 1, "c.PyObject_DelAttr", "PyObject_DelAttr"], [49, 2, 1, "c.PyObject_DelAttrString", "PyObject_DelAttrString"], [49, 2, 1, "c.PyObject_DelItem", "PyObject_DelItem"], [49, 2, 1, "c.PyObject_Dir", "PyObject_Dir"], [49, 2, 1, "c.PyObject_Format", "PyObject_Format"], [42, 2, 1, "c.PyObject_Free", "PyObject_Free"], [28, 2, 1, "c.PyObject_GC_Del", "PyObject_GC_Del"], [28, 2, 1, "c.PyObject_GC_IsFinalized", "PyObject_GC_IsFinalized"], [28, 2, 1, "c.PyObject_GC_IsTracked", "PyObject_GC_IsTracked"], [28, 1, 1, "c.PyObject_GC_New", "PyObject_GC_New"], [28, 1, 1, "c.PyObject_GC_NewVar", "PyObject_GC_NewVar"], [28, 1, 1, "c.PyObject_GC_Resize", "PyObject_GC_Resize"], [28, 2, 1, "c.PyObject_GC_Track", "PyObject_GC_Track"], [28, 2, 1, "c.PyObject_GC_UnTrack", "PyObject_GC_UnTrack"], [49, 2, 1, "c.PyObject_GenericGetAttr", "PyObject_GenericGetAttr"], [49, 2, 1, "c.PyObject_GenericGetDict", "PyObject_GenericGetDict"], [49, 2, 1, "c.PyObject_GenericSetAttr", "PyObject_GenericSetAttr"], [49, 2, 1, "c.PyObject_GenericSetDict", "PyObject_GenericSetDict"], [49, 2, 1, "c.PyObject_GetAIter", "PyObject_GetAIter"], [42, 2, 1, "c.PyObject_GetArenaAllocator", "PyObject_GetArenaAllocator"], [49, 2, 1, "c.PyObject_GetAttr", "PyObject_GetAttr"], [49, 2, 1, "c.PyObject_GetAttrString", "PyObject_GetAttrString"], [7, 2, 1, "c.PyObject_GetBuffer", "PyObject_GetBuffer"], [49, 2, 1, "c.PyObject_GetItem", "PyObject_GetItem"], [49, 2, 1, "c.PyObject_GetItemData", "PyObject_GetItemData"], [49, 2, 1, "c.PyObject_GetIter", "PyObject_GetIter"], [49, 2, 1, "c.PyObject_GetTypeData", "PyObject_GetTypeData"], [58, 1, 1, "c.PyObject_HEAD", "PyObject_HEAD"], [58, 1, 1, "c.PyObject_HEAD_INIT", "PyObject_HEAD_INIT"], [49, 2, 1, "c.PyObject_HasAttr", "PyObject_HasAttr"], [49, 2, 1, "c.PyObject_HasAttrString", "PyObject_HasAttrString"], [49, 2, 1, "c.PyObject_Hash", "PyObject_Hash"], [49, 2, 1, "c.PyObject_HashNotImplemented", "PyObject_HashNotImplemented"], [28, 2, 1, "c.PyObject_IS_GC", "PyObject_IS_GC"], [3, 2, 1, "c.PyObject_Init", "PyObject_Init"], [3, 2, 1, "c.PyObject_InitVar", "PyObject_InitVar"], [49, 2, 1, "c.PyObject_IsInstance", "PyObject_IsInstance"], [49, 2, 1, "c.PyObject_IsSubclass", "PyObject_IsSubclass"], [49, 2, 1, "c.PyObject_IsTrue", "PyObject_IsTrue"], [49, 2, 1, "c.PyObject_Length", "PyObject_Length"], [49, 2, 1, "c.PyObject_LengthHint", "PyObject_LengthHint"], [42, 2, 1, "c.PyObject_Malloc", "PyObject_Malloc"], [3, 1, 1, "c.PyObject_New", "PyObject_New"], [3, 1, 1, "c.PyObject_NewVar", "PyObject_NewVar"], [49, 2, 1, "c.PyObject_Not", "PyObject_Not"], [49, 2, 1, "c.PyObject_Print", "PyObject_Print"], [42, 2, 1, "c.PyObject_Realloc", "PyObject_Realloc"], [49, 2, 1, "c.PyObject_Repr", "PyObject_Repr"], [49, 2, 1, "c.PyObject_RichCompare", "PyObject_RichCompare"], [49, 2, 1, "c.PyObject_RichCompareBool", "PyObject_RichCompareBool"], [42, 2, 1, "c.PyObject_SetArenaAllocator", "PyObject_SetArenaAllocator"], [49, 2, 1, "c.PyObject_SetAttr", "PyObject_SetAttr"], [49, 2, 1, "c.PyObject_SetAttrString", "PyObject_SetAttrString"], [49, 2, 1, "c.PyObject_SetItem", "PyObject_SetItem"], [49, 2, 1, "c.PyObject_Size", "PyObject_Size"], [49, 2, 1, "c.PyObject_Str", "PyObject_Str"], [49, 2, 1, "c.PyObject_Type", "PyObject_Type"], [49, 2, 1, "c.PyObject_TypeCheck", "PyObject_TypeCheck"], [58, 1, 1, "c.PyObject_VAR_HEAD", "PyObject_VAR_HEAD"], [10, 2, 1, "c.PyObject_Vectorcall", "PyObject_Vectorcall"], [10, 2, 1, "c.PyObject_VectorcallDict", "PyObject_VectorcallDict"], [10, 2, 1, "c.PyObject_VectorcallMethod", "PyObject_VectorcallMethod"], [34, 4, 1, "c.PyPreConfig", "PyPreConfig"], [34, 2, 1, "c.PyPreConfig_InitIsolatedConfig", "PyPreConfig_InitIsolatedConfig"], [34, 2, 1, "c.PyPreConfig_InitPythonConfig", "PyPreConfig_InitPythonConfig"], [21, 0, 1, "c.PyProperty_Type", "PyProperty_Type"], [66, 2, 1, "c.PyRun_AnyFile", "PyRun_AnyFile"], [66, 2, 1, "c.PyRun_AnyFileEx", "PyRun_AnyFileEx"], [66, 2, 1, "c.PyRun_AnyFileExFlags", "PyRun_AnyFileExFlags"], [66, 2, 1, "c.PyRun_AnyFileFlags", "PyRun_AnyFileFlags"], [66, 2, 1, "c.PyRun_File", "PyRun_File"], [66, 2, 1, "c.PyRun_FileEx", "PyRun_FileEx"], [66, 2, 1, "c.PyRun_FileExFlags", "PyRun_FileExFlags"], [66, 2, 1, "c.PyRun_FileFlags", "PyRun_FileFlags"], [66, 2, 1, "c.PyRun_InteractiveLoop", "PyRun_InteractiveLoop"], [66, 2, 1, "c.PyRun_InteractiveLoopFlags", "PyRun_InteractiveLoopFlags"], [66, 2, 1, "c.PyRun_InteractiveOne", "PyRun_InteractiveOne"], [66, 2, 1, "c.PyRun_InteractiveOneFlags", "PyRun_InteractiveOneFlags"], [66, 2, 1, "c.PyRun_SimpleFile", "PyRun_SimpleFile"], [66, 2, 1, "c.PyRun_SimpleFileEx", "PyRun_SimpleFileEx"], [66, 2, 1, "c.PyRun_SimpleFileExFlags", "PyRun_SimpleFileExFlags"], [66, 2, 1, "c.PyRun_SimpleString", "PyRun_SimpleString"], [66, 2, 1, "c.PyRun_SimpleStringFlags", "PyRun_SimpleStringFlags"], [66, 2, 1, "c.PyRun_String", "PyRun_String"], [66, 2, 1, "c.PyRun_StringFlags", "PyRun_StringFlags"], [36, 4, 1, "c.PySendResult", "PySendResult"], [37, 2, 1, "c.PySeqIter_Check", "PySeqIter_Check"], [37, 2, 1, "c.PySeqIter_New", "PySeqIter_New"], [37, 0, 1, "c.PySeqIter_Type", "PySeqIter_Type"], [63, 4, 1, "c.PySequenceMethods", "PySequenceMethods"], [54, 2, 1, "c.PySequence_Check", "PySequence_Check"], [54, 2, 1, "c.PySequence_Concat", "PySequence_Concat"], [54, 2, 1, "c.PySequence_Contains", "PySequence_Contains"], [54, 2, 1, "c.PySequence_Count", "PySequence_Count"], [54, 2, 1, "c.PySequence_DelItem", "PySequence_DelItem"], [54, 2, 1, "c.PySequence_DelSlice", "PySequence_DelSlice"], [54, 2, 1, "c.PySequence_Fast", "PySequence_Fast"], [54, 2, 1, "c.PySequence_Fast_GET_ITEM", "PySequence_Fast_GET_ITEM"], [54, 2, 1, "c.PySequence_Fast_GET_SIZE", "PySequence_Fast_GET_SIZE"], [54, 2, 1, "c.PySequence_Fast_ITEMS", "PySequence_Fast_ITEMS"], [54, 2, 1, "c.PySequence_GetItem", "PySequence_GetItem"], [54, 2, 1, "c.PySequence_GetSlice", "PySequence_GetSlice"], [54, 2, 1, "c.PySequence_ITEM", "PySequence_ITEM"], [54, 2, 1, "c.PySequence_InPlaceConcat", "PySequence_InPlaceConcat"], [54, 2, 1, "c.PySequence_InPlaceRepeat", "PySequence_InPlaceRepeat"], [54, 2, 1, "c.PySequence_Index", "PySequence_Index"], [54, 2, 1, "c.PySequence_Length", "PySequence_Length"], [54, 2, 1, "c.PySequence_List", "PySequence_List"], [54, 2, 1, "c.PySequence_Repeat", "PySequence_Repeat"], [54, 2, 1, "c.PySequence_SetItem", "PySequence_SetItem"], [54, 2, 1, "c.PySequence_SetSlice", "PySequence_SetSlice"], [54, 2, 1, "c.PySequence_Size", "PySequence_Size"], [54, 2, 1, "c.PySequence_Tuple", "PySequence_Tuple"], [55, 4, 1, "c.PySetObject", "PySetObject"], [55, 2, 1, "c.PySet_Add", "PySet_Add"], [55, 2, 1, "c.PySet_Check", "PySet_Check"], [55, 2, 1, "c.PySet_CheckExact", "PySet_CheckExact"], [55, 2, 1, "c.PySet_Clear", "PySet_Clear"], [55, 2, 1, "c.PySet_Contains", "PySet_Contains"], [55, 2, 1, "c.PySet_Discard", "PySet_Discard"], [55, 2, 1, "c.PySet_GET_SIZE", "PySet_GET_SIZE"], [55, 2, 1, "c.PySet_New", "PySet_New"], [55, 2, 1, "c.PySet_Pop", "PySet_Pop"], [55, 2, 1, "c.PySet_Size", "PySet_Size"], [55, 0, 1, "c.PySet_Type", "PySet_Type"], [23, 2, 1, "c.PySignal_SetWakeupFd", "PySignal_SetWakeupFd"], [56, 2, 1, "c.PySlice_AdjustIndices", "PySlice_AdjustIndices"], [56, 2, 1, "c.PySlice_Check", "PySlice_Check"], [56, 2, 1, "c.PySlice_GetIndices", "PySlice_GetIndices"], [56, 2, 1, "c.PySlice_GetIndicesEx", "PySlice_GetIndicesEx"], [56, 2, 1, "c.PySlice_New", "PySlice_New"], [56, 0, 1, "c.PySlice_Type", "PySlice_Type"], [56, 2, 1, "c.PySlice_Unpack", "PySlice_Unpack"], [45, 2, 1, "c.PyState_AddModule", "PyState_AddModule"], [45, 2, 1, "c.PyState_FindModule", "PyState_FindModule"], [45, 2, 1, "c.PyState_RemoveModule", "PyState_RemoveModule"], [34, 4, 1, "c.PyStatus", "PyStatus"], [34, 2, 1, "c.PyStatus_Error", "PyStatus_Error"], [34, 2, 1, "c.PyStatus_Exception", "PyStatus_Exception"], [34, 2, 1, "c.PyStatus_Exit", "PyStatus_Exit"], [34, 2, 1, "c.PyStatus_IsError", "PyStatus_IsError"], [34, 2, 1, "c.PyStatus_IsExit", "PyStatus_IsExit"], [34, 2, 1, "c.PyStatus_NoMemory", "PyStatus_NoMemory"], [34, 2, 1, "c.PyStatus_Ok", "PyStatus_Ok"], [60, 4, 1, "c.PyStructSequence_Desc", "PyStructSequence_Desc"], [60, 4, 1, "c.PyStructSequence_Field", "PyStructSequence_Field"], [60, 2, 1, "c.PyStructSequence_GET_ITEM", "PyStructSequence_GET_ITEM"], [60, 2, 1, "c.PyStructSequence_GetItem", "PyStructSequence_GetItem"], [60, 2, 1, "c.PyStructSequence_InitType", "PyStructSequence_InitType"], [60, 2, 1, "c.PyStructSequence_InitType2", "PyStructSequence_InitType2"], [60, 2, 1, "c.PyStructSequence_New", "PyStructSequence_New"], [60, 2, 1, "c.PyStructSequence_NewType", "PyStructSequence_NewType"], [60, 2, 1, "c.PyStructSequence_SET_ITEM", "PyStructSequence_SET_ITEM"], [60, 2, 1, "c.PyStructSequence_SetItem", "PyStructSequence_SetItem"], [60, 0, 1, "c.PyStructSequence_UnnamedField", "PyStructSequence_UnnamedField"], [59, 2, 1, "c.PySys_AddAuditHook", "PySys_AddAuditHook"], [59, 2, 1, "c.PySys_AddWarnOption", "PySys_AddWarnOption"], [59, 2, 1, "c.PySys_AddWarnOptionUnicode", "PySys_AddWarnOptionUnicode"], [59, 2, 1, "c.PySys_AddXOption", "PySys_AddXOption"], [59, 2, 1, "c.PySys_Audit", "PySys_Audit"], [59, 2, 1, "c.PySys_FormatStderr", "PySys_FormatStderr"], [59, 2, 1, "c.PySys_FormatStdout", "PySys_FormatStdout"], [59, 2, 1, "c.PySys_GetObject", "PySys_GetObject"], [59, 2, 1, "c.PySys_GetXOptions", "PySys_GetXOptions"], [59, 2, 1, "c.PySys_ResetWarnOptions", "PySys_ResetWarnOptions"], [33, 2, 1, "c.PySys_SetArgv", "PySys_SetArgv"], [33, 2, 1, "c.PySys_SetArgvEx", "PySys_SetArgvEx"], [59, 2, 1, "c.PySys_SetObject", "PySys_SetObject"], [59, 2, 1, "c.PySys_SetPath", "PySys_SetPath"], [59, 2, 1, "c.PySys_WriteStderr", "PySys_WriteStderr"], [59, 2, 1, "c.PySys_WriteStdout", "PySys_WriteStdout"], [20, 2, 1, "c.PyTZInfo_Check", "PyTZInfo_Check"], [20, 2, 1, "c.PyTZInfo_CheckExact", "PyTZInfo_CheckExact"], [33, 4, 1, "c.PyThreadState", "PyThreadState"], [33, 2, 1, "c.PyThreadState_Clear", "PyThreadState_Clear"], [33, 2, 1, "c.PyThreadState_Delete", "PyThreadState_Delete"], [33, 2, 1, "c.PyThreadState_DeleteCurrent", "PyThreadState_DeleteCurrent"], [33, 2, 1, "c.PyThreadState_EnterTracing", "PyThreadState_EnterTracing"], [33, 2, 1, "c.PyThreadState_Get", "PyThreadState_Get"], [33, 2, 1, "c.PyThreadState_GetDict", "PyThreadState_GetDict"], [33, 2, 1, "c.PyThreadState_GetFrame", "PyThreadState_GetFrame"], [33, 2, 1, "c.PyThreadState_GetID", "PyThreadState_GetID"], [33, 2, 1, "c.PyThreadState_GetInterpreter", "PyThreadState_GetInterpreter"], [33, 2, 1, "c.PyThreadState_LeaveTracing", "PyThreadState_LeaveTracing"], [33, 2, 1, "c.PyThreadState_New", "PyThreadState_New"], [33, 2, 1, "c.PyThreadState_Next", "PyThreadState_Next"], [33, 2, 1, "c.PyThreadState_SetAsyncExc", "PyThreadState_SetAsyncExc"], [33, 2, 1, "c.PyThreadState_Swap", "PyThreadState_Swap"], [33, 2, 1, "c.PyThread_ReInitTLS", "PyThread_ReInitTLS"], [33, 2, 1, "c.PyThread_create_key", "PyThread_create_key"], [33, 2, 1, "c.PyThread_delete_key", "PyThread_delete_key"], [33, 2, 1, "c.PyThread_delete_key_value", "PyThread_delete_key_value"], [33, 2, 1, "c.PyThread_get_key_value", "PyThread_get_key_value"], [33, 2, 1, "c.PyThread_set_key_value", "PyThread_set_key_value"], [33, 2, 1, "c.PyThread_tss_alloc", "PyThread_tss_alloc"], [33, 2, 1, "c.PyThread_tss_create", "PyThread_tss_create"], [33, 2, 1, "c.PyThread_tss_delete", "PyThread_tss_delete"], [33, 2, 1, "c.PyThread_tss_free", "PyThread_tss_free"], [33, 2, 1, "c.PyThread_tss_get", "PyThread_tss_get"], [33, 2, 1, "c.PyThread_tss_is_created", "PyThread_tss_is_created"], [33, 2, 1, "c.PyThread_tss_set", "PyThread_tss_set"], [20, 2, 1, "c.PyTimeZone_FromOffset", "PyTimeZone_FromOffset"], [20, 2, 1, "c.PyTimeZone_FromOffsetAndName", "PyTimeZone_FromOffsetAndName"], [20, 2, 1, "c.PyTime_Check", "PyTime_Check"], [20, 2, 1, "c.PyTime_CheckExact", "PyTime_CheckExact"], [20, 2, 1, "c.PyTime_FromTime", "PyTime_FromTime"], [20, 2, 1, "c.PyTime_FromTimeAndFold", "PyTime_FromTimeAndFold"], [42, 2, 1, "c.PyTraceMalloc_Track", "PyTraceMalloc_Track"], [42, 2, 1, "c.PyTraceMalloc_Untrack", "PyTraceMalloc_Untrack"], [33, 0, 1, "c.PyTrace_CALL", "PyTrace_CALL"], [33, 0, 1, "c.PyTrace_C_CALL", "PyTrace_C_CALL"], [33, 0, 1, "c.PyTrace_C_EXCEPTION", "PyTrace_C_EXCEPTION"], [33, 0, 1, "c.PyTrace_C_RETURN", "PyTrace_C_RETURN"], [33, 0, 1, "c.PyTrace_EXCEPTION", "PyTrace_EXCEPTION"], [33, 0, 1, "c.PyTrace_LINE", "PyTrace_LINE"], [33, 0, 1, "c.PyTrace_OPCODE", "PyTrace_OPCODE"], [33, 0, 1, "c.PyTrace_RETURN", "PyTrace_RETURN"], [60, 4, 1, "c.PyTupleObject", "PyTupleObject"], [60, 2, 1, "c.PyTuple_Check", "PyTuple_Check"], [60, 2, 1, "c.PyTuple_CheckExact", "PyTuple_CheckExact"], [60, 2, 1, "c.PyTuple_GET_ITEM", "PyTuple_GET_ITEM"], [60, 2, 1, "c.PyTuple_GET_SIZE", "PyTuple_GET_SIZE"], [60, 2, 1, "c.PyTuple_GetItem", "PyTuple_GetItem"], [60, 2, 1, "c.PyTuple_GetSlice", "PyTuple_GetSlice"], [60, 2, 1, "c.PyTuple_New", "PyTuple_New"], [60, 2, 1, "c.PyTuple_Pack", "PyTuple_Pack"], [60, 2, 1, "c.PyTuple_SET_ITEM", "PyTuple_SET_ITEM"], [60, 2, 1, "c.PyTuple_SetItem", "PyTuple_SetItem"], [60, 2, 1, "c.PyTuple_Size", "PyTuple_Size"], [60, 0, 1, "c.PyTuple_Type", "PyTuple_Type"], [61, 4, 1, "c.PyTypeObject", "PyTypeObject"], [61, 2, 1, "c.PyType_AddWatcher", "PyType_AddWatcher"], [61, 2, 1, "c.PyType_Check", "PyType_Check"], [61, 2, 1, "c.PyType_CheckExact", "PyType_CheckExact"], [61, 2, 1, "c.PyType_ClearCache", "PyType_ClearCache"], [61, 2, 1, "c.PyType_ClearWatcher", "PyType_ClearWatcher"], [61, 2, 1, "c.PyType_FromMetaclass", "PyType_FromMetaclass"], [61, 2, 1, "c.PyType_FromModuleAndSpec", "PyType_FromModuleAndSpec"], [61, 2, 1, "c.PyType_FromSpec", "PyType_FromSpec"], [61, 2, 1, "c.PyType_FromSpecWithBases", "PyType_FromSpecWithBases"], [61, 2, 1, "c.PyType_GenericAlloc", "PyType_GenericAlloc"], [61, 2, 1, "c.PyType_GenericNew", "PyType_GenericNew"], [61, 2, 1, "c.PyType_GetDict", "PyType_GetDict"], [61, 2, 1, "c.PyType_GetFlags", "PyType_GetFlags"], [61, 2, 1, "c.PyType_GetModule", "PyType_GetModule"], [61, 2, 1, "c.PyType_GetModuleByDef", "PyType_GetModuleByDef"], [61, 2, 1, "c.PyType_GetModuleState", "PyType_GetModuleState"], [61, 2, 1, "c.PyType_GetName", "PyType_GetName"], [61, 2, 1, "c.PyType_GetQualName", "PyType_GetQualName"], [61, 2, 1, "c.PyType_GetSlot", "PyType_GetSlot"], [49, 2, 1, "c.PyType_GetTypeDataSize", "PyType_GetTypeDataSize"], [61, 2, 1, "c.PyType_HasFeature", "PyType_HasFeature"], [61, 2, 1, "c.PyType_IS_GC", "PyType_IS_GC"], [61, 2, 1, "c.PyType_IsSubtype", "PyType_IsSubtype"], [61, 2, 1, "c.PyType_Modified", "PyType_Modified"], [61, 2, 1, "c.PyType_Ready", "PyType_Ready"], [61, 4, 1, "c.PyType_Slot", "PyType_Slot"], [61, 4, 1, "c.PyType_Spec", "PyType_Spec"], [61, 0, 1, "c.PyType_Type", "PyType_Type"], [61, 2, 1, "c.PyType_Watch", "PyType_Watch"], [61, 4, 1, "c.PyType_WatchCallback", "PyType_WatchCallback"], [23, 2, 1, "c.PyUnicodeDecodeError_Create", "PyUnicodeDecodeError_Create"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEncoding", "PyUnicodeDecodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEnd", "PyUnicodeDecodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_GetObject", "PyUnicodeDecodeError_GetObject"], [23, 2, 1, "c.PyUnicodeDecodeError_GetReason", "PyUnicodeDecodeError_GetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_GetStart", "PyUnicodeDecodeError_GetStart"], [23, 2, 1, "c.PyUnicodeDecodeError_SetEnd", "PyUnicodeDecodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_SetReason", "PyUnicodeDecodeError_SetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_SetStart", "PyUnicodeDecodeError_SetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEncoding", "PyUnicodeEncodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEnd", "PyUnicodeEncodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_GetObject", "PyUnicodeEncodeError_GetObject"], [23, 2, 1, "c.PyUnicodeEncodeError_GetReason", "PyUnicodeEncodeError_GetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_GetStart", "PyUnicodeEncodeError_GetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_SetEnd", "PyUnicodeEncodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_SetReason", "PyUnicodeEncodeError_SetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_SetStart", "PyUnicodeEncodeError_SetStart"], [64, 4, 1, "c.PyUnicodeObject", "PyUnicodeObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetEnd", "PyUnicodeTranslateError_GetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_GetObject", "PyUnicodeTranslateError_GetObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetReason", "PyUnicodeTranslateError_GetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_GetStart", "PyUnicodeTranslateError_GetStart"], [23, 2, 1, "c.PyUnicodeTranslateError_SetEnd", "PyUnicodeTranslateError_SetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_SetReason", "PyUnicodeTranslateError_SetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_SetStart", "PyUnicodeTranslateError_SetStart"], [64, 2, 1, "c.PyUnicode_1BYTE_DATA", "PyUnicode_1BYTE_DATA"], [64, 1, 1, "c.PyUnicode_1BYTE_KIND", "PyUnicode_1BYTE_KIND"], [64, 2, 1, "c.PyUnicode_2BYTE_DATA", "PyUnicode_2BYTE_DATA"], [64, 1, 1, "c.PyUnicode_2BYTE_KIND", "PyUnicode_2BYTE_KIND"], [64, 2, 1, "c.PyUnicode_4BYTE_DATA", "PyUnicode_4BYTE_DATA"], [64, 1, 1, "c.PyUnicode_4BYTE_KIND", "PyUnicode_4BYTE_KIND"], [64, 2, 1, "c.PyUnicode_AsASCIIString", "PyUnicode_AsASCIIString"], [64, 2, 1, "c.PyUnicode_AsCharmapString", "PyUnicode_AsCharmapString"], [64, 2, 1, "c.PyUnicode_AsEncodedString", "PyUnicode_AsEncodedString"], [64, 2, 1, "c.PyUnicode_AsLatin1String", "PyUnicode_AsLatin1String"], [64, 2, 1, "c.PyUnicode_AsMBCSString", "PyUnicode_AsMBCSString"], [64, 2, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "PyUnicode_AsRawUnicodeEscapeString"], [64, 2, 1, "c.PyUnicode_AsUCS4", "PyUnicode_AsUCS4"], [64, 2, 1, "c.PyUnicode_AsUCS4Copy", "PyUnicode_AsUCS4Copy"], [64, 2, 1, "c.PyUnicode_AsUTF16String", "PyUnicode_AsUTF16String"], [64, 2, 1, "c.PyUnicode_AsUTF32String", "PyUnicode_AsUTF32String"], [64, 2, 1, "c.PyUnicode_AsUTF8", "PyUnicode_AsUTF8"], [64, 2, 1, "c.PyUnicode_AsUTF8AndSize", "PyUnicode_AsUTF8AndSize"], [64, 2, 1, "c.PyUnicode_AsUTF8String", "PyUnicode_AsUTF8String"], [64, 2, 1, "c.PyUnicode_AsUnicodeEscapeString", "PyUnicode_AsUnicodeEscapeString"], [64, 2, 1, "c.PyUnicode_AsWideChar", "PyUnicode_AsWideChar"], [64, 2, 1, "c.PyUnicode_AsWideCharString", "PyUnicode_AsWideCharString"], [64, 2, 1, "c.PyUnicode_Check", "PyUnicode_Check"], [64, 2, 1, "c.PyUnicode_CheckExact", "PyUnicode_CheckExact"], [64, 2, 1, "c.PyUnicode_Compare", "PyUnicode_Compare"], [64, 2, 1, "c.PyUnicode_CompareWithASCIIString", "PyUnicode_CompareWithASCIIString"], [64, 2, 1, "c.PyUnicode_Concat", "PyUnicode_Concat"], [64, 2, 1, "c.PyUnicode_Contains", "PyUnicode_Contains"], [64, 2, 1, "c.PyUnicode_CopyCharacters", "PyUnicode_CopyCharacters"], [64, 2, 1, "c.PyUnicode_Count", "PyUnicode_Count"], [64, 2, 1, "c.PyUnicode_DATA", "PyUnicode_DATA"], [64, 2, 1, "c.PyUnicode_Decode", "PyUnicode_Decode"], [64, 2, 1, "c.PyUnicode_DecodeASCII", "PyUnicode_DecodeASCII"], [64, 2, 1, "c.PyUnicode_DecodeCharmap", "PyUnicode_DecodeCharmap"], [64, 2, 1, "c.PyUnicode_DecodeFSDefault", "PyUnicode_DecodeFSDefault"], [64, 2, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "PyUnicode_DecodeFSDefaultAndSize"], [64, 2, 1, "c.PyUnicode_DecodeLatin1", "PyUnicode_DecodeLatin1"], [64, 2, 1, "c.PyUnicode_DecodeLocale", "PyUnicode_DecodeLocale"], [64, 2, 1, "c.PyUnicode_DecodeLocaleAndSize", "PyUnicode_DecodeLocaleAndSize"], [64, 2, 1, "c.PyUnicode_DecodeMBCS", "PyUnicode_DecodeMBCS"], [64, 2, 1, "c.PyUnicode_DecodeMBCSStateful", "PyUnicode_DecodeMBCSStateful"], [64, 2, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "PyUnicode_DecodeRawUnicodeEscape"], [64, 2, 1, "c.PyUnicode_DecodeUTF16", "PyUnicode_DecodeUTF16"], [64, 2, 1, "c.PyUnicode_DecodeUTF16Stateful", "PyUnicode_DecodeUTF16Stateful"], [64, 2, 1, "c.PyUnicode_DecodeUTF32", "PyUnicode_DecodeUTF32"], [64, 2, 1, "c.PyUnicode_DecodeUTF32Stateful", "PyUnicode_DecodeUTF32Stateful"], [64, 2, 1, "c.PyUnicode_DecodeUTF7", "PyUnicode_DecodeUTF7"], [64, 2, 1, "c.PyUnicode_DecodeUTF7Stateful", "PyUnicode_DecodeUTF7Stateful"], [64, 2, 1, "c.PyUnicode_DecodeUTF8", "PyUnicode_DecodeUTF8"], [64, 2, 1, "c.PyUnicode_DecodeUTF8Stateful", "PyUnicode_DecodeUTF8Stateful"], [64, 2, 1, "c.PyUnicode_DecodeUnicodeEscape", "PyUnicode_DecodeUnicodeEscape"], [64, 2, 1, "c.PyUnicode_EncodeCodePage", "PyUnicode_EncodeCodePage"], [64, 2, 1, "c.PyUnicode_EncodeFSDefault", "PyUnicode_EncodeFSDefault"], [64, 2, 1, "c.PyUnicode_EncodeLocale", "PyUnicode_EncodeLocale"], [64, 2, 1, "c.PyUnicode_FSConverter", "PyUnicode_FSConverter"], [64, 2, 1, "c.PyUnicode_FSDecoder", "PyUnicode_FSDecoder"], [64, 2, 1, "c.PyUnicode_Fill", "PyUnicode_Fill"], [64, 2, 1, "c.PyUnicode_Find", "PyUnicode_Find"], [64, 2, 1, "c.PyUnicode_FindChar", "PyUnicode_FindChar"], [64, 2, 1, "c.PyUnicode_Format", "PyUnicode_Format"], [64, 2, 1, "c.PyUnicode_FromEncodedObject", "PyUnicode_FromEncodedObject"], [64, 2, 1, "c.PyUnicode_FromFormat", "PyUnicode_FromFormat"], [64, 2, 1, "c.PyUnicode_FromFormatV", "PyUnicode_FromFormatV"], [64, 2, 1, "c.PyUnicode_FromKindAndData", "PyUnicode_FromKindAndData"], [64, 2, 1, "c.PyUnicode_FromObject", "PyUnicode_FromObject"], [64, 2, 1, "c.PyUnicode_FromString", "PyUnicode_FromString"], [64, 2, 1, "c.PyUnicode_FromStringAndSize", "PyUnicode_FromStringAndSize"], [64, 2, 1, "c.PyUnicode_FromWideChar", "PyUnicode_FromWideChar"], [64, 2, 1, "c.PyUnicode_GET_LENGTH", "PyUnicode_GET_LENGTH"], [64, 2, 1, "c.PyUnicode_GetLength", "PyUnicode_GetLength"], [64, 2, 1, "c.PyUnicode_InternFromString", "PyUnicode_InternFromString"], [64, 2, 1, "c.PyUnicode_InternInPlace", "PyUnicode_InternInPlace"], [64, 2, 1, "c.PyUnicode_IsIdentifier", "PyUnicode_IsIdentifier"], [64, 2, 1, "c.PyUnicode_Join", "PyUnicode_Join"], [64, 2, 1, "c.PyUnicode_KIND", "PyUnicode_KIND"], [64, 2, 1, "c.PyUnicode_MAX_CHAR_VALUE", "PyUnicode_MAX_CHAR_VALUE"], [64, 2, 1, "c.PyUnicode_New", "PyUnicode_New"], [64, 2, 1, "c.PyUnicode_READ", "PyUnicode_READ"], [64, 2, 1, "c.PyUnicode_READY", "PyUnicode_READY"], [64, 2, 1, "c.PyUnicode_READ_CHAR", "PyUnicode_READ_CHAR"], [64, 2, 1, "c.PyUnicode_ReadChar", "PyUnicode_ReadChar"], [64, 2, 1, "c.PyUnicode_Replace", "PyUnicode_Replace"], [64, 2, 1, "c.PyUnicode_RichCompare", "PyUnicode_RichCompare"], [64, 2, 1, "c.PyUnicode_Split", "PyUnicode_Split"], [64, 2, 1, "c.PyUnicode_Splitlines", "PyUnicode_Splitlines"], [64, 2, 1, "c.PyUnicode_Substring", "PyUnicode_Substring"], [64, 2, 1, "c.PyUnicode_Tailmatch", "PyUnicode_Tailmatch"], [64, 2, 1, "c.PyUnicode_Translate", "PyUnicode_Translate"], [64, 0, 1, "c.PyUnicode_Type", "PyUnicode_Type"], [64, 2, 1, "c.PyUnicode_WRITE", "PyUnicode_WRITE"], [64, 2, 1, "c.PyUnicode_WriteChar", "PyUnicode_WriteChar"], [13, 2, 1, "c.PyUnstable_Code_GetExtra", "PyUnstable_Code_GetExtra"], [13, 2, 1, "c.PyUnstable_Code_New", "PyUnstable_Code_New"], [13, 2, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "PyUnstable_Code_NewWithPosOnlyArgs"], [13, 2, 1, "c.PyUnstable_Code_SetExtra", "PyUnstable_Code_SetExtra"], [13, 2, 1, "c.PyUnstable_Eval_RequestCodeExtraIndex", "PyUnstable_Eval_RequestCodeExtraIndex"], [23, 2, 1, "c.PyUnstable_Exc_PrepReraiseStar", "PyUnstable_Exc_PrepReraiseStar"], [28, 2, 1, "c.PyUnstable_GC_VisitObjects", "PyUnstable_GC_VisitObjects"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetCode", "PyUnstable_InterpreterFrame_GetCode"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetLasti", "PyUnstable_InterpreterFrame_GetLasti"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetLine", "PyUnstable_InterpreterFrame_GetLine"], [39, 2, 1, "c.PyUnstable_Long_CompactValue", "PyUnstable_Long_CompactValue"], [39, 2, 1, "c.PyUnstable_Long_IsCompact", "PyUnstable_Long_IsCompact"], [28, 2, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "PyUnstable_Object_GC_NewWithExtraData"], [51, 2, 1, "c.PyUnstable_PerfMapState_Fini", "PyUnstable_PerfMapState_Fini"], [51, 2, 1, "c.PyUnstable_PerfMapState_Init", "PyUnstable_PerfMapState_Init"], [61, 2, 1, "c.PyUnstable_Type_AssignVersionTag", "PyUnstable_Type_AssignVersionTag"], [51, 2, 1, "c.PyUnstable_WritePerfMapEntry", "PyUnstable_WritePerfMapEntry"], [58, 4, 1, "c.PyVarObject", "PyVarObject"], [58, 1, 1, "c.PyVarObject_HEAD_INIT", "PyVarObject_HEAD_INIT"], [10, 2, 1, "c.PyVectorcall_Call", "PyVectorcall_Call"], [10, 2, 1, "c.PyVectorcall_Function", "PyVectorcall_Function"], [10, 2, 1, "c.PyVectorcall_NARGS", "PyVectorcall_NARGS"], [67, 2, 1, "c.PyWeakref_Check", "PyWeakref_Check"], [67, 2, 1, "c.PyWeakref_CheckProxy", "PyWeakref_CheckProxy"], [67, 2, 1, "c.PyWeakref_CheckRef", "PyWeakref_CheckRef"], [67, 2, 1, "c.PyWeakref_GET_OBJECT", "PyWeakref_GET_OBJECT"], [67, 2, 1, "c.PyWeakref_GetObject", "PyWeakref_GetObject"], [67, 2, 1, "c.PyWeakref_NewProxy", "PyWeakref_NewProxy"], [67, 2, 1, "c.PyWeakref_NewRef", "PyWeakref_NewRef"], [34, 4, 1, "c.PyWideStringList", "PyWideStringList"], [34, 2, 1, "c.PyWideStringList_Append", "PyWideStringList_Append"], [34, 2, 1, "c.PyWideStringList_Insert", "PyWideStringList_Insert"], [21, 2, 1, "c.PyWrapper_New", "PyWrapper_New"], [35, 1, 1, "c.Py_ABS", "Py_ABS"], [35, 1, 1, "c.Py_ALWAYS_INLINE", "Py_ALWAYS_INLINE"], [58, 1, 1, "c.Py_AUDIT_READ", "Py_AUDIT_READ"], [33, 2, 1, "c.Py_AddPendingCall", "Py_AddPendingCall"], [59, 2, 1, "c.Py_AtExit", "Py_AtExit"], [59, 4, 1, "c.Py_AuditHookFunction", "Py_AuditHookFunction"], [33, 1, 1, "c.Py_BEGIN_ALLOW_THREADS", "Py_BEGIN_ALLOW_THREADS"], [33, 1, 1, "c.Py_BLOCK_THREADS", "Py_BLOCK_THREADS"], [5, 2, 1, "c.Py_BuildValue", "Py_BuildValue"], [66, 2, 1, "c.Py_BytesMain", "Py_BytesMain"], [33, 0, 1, "c.Py_BytesWarningFlag", "Py_BytesWarningFlag"], [35, 1, 1, "c.Py_CHARMASK", "Py_CHARMASK"], [52, 2, 1, "c.Py_CLEAR", "Py_CLEAR"], [66, 2, 1, "c.Py_CompileString", "Py_CompileString"], [66, 2, 1, "c.Py_CompileStringExFlags", "Py_CompileStringExFlags"], [66, 2, 1, "c.Py_CompileStringFlags", "Py_CompileStringFlags"], [66, 2, 1, "c.Py_CompileStringObject", "Py_CompileStringObject"], [35, 1, 1, "c.Py_DEBUG", "Py_DEBUG"], [52, 2, 1, "c.Py_DECREF", "Py_DECREF"], [35, 1, 1, "c.Py_DEPRECATED", "Py_DEPRECATED"], [33, 0, 1, "c.Py_DebugFlag", "Py_DebugFlag"], [52, 2, 1, "c.Py_DecRef", "Py_DecRef"], [59, 2, 1, "c.Py_DecodeLocale", "Py_DecodeLocale"], [33, 0, 1, "c.Py_DontWriteBytecodeFlag", "Py_DontWriteBytecodeFlag"], [33, 1, 1, "c.Py_END_ALLOW_THREADS", "Py_END_ALLOW_THREADS"], [63, 1, 1, "c.Py_EQ", "Py_EQ"], [56, 0, 1, "c.Py_Ellipsis", "Py_Ellipsis"], [59, 2, 1, "c.Py_EncodeLocale", "Py_EncodeLocale"], [33, 2, 1, "c.Py_EndInterpreter", "Py_EndInterpreter"], [23, 2, 1, "c.Py_EnterRecursiveCall", "Py_EnterRecursiveCall"], [59, 2, 1, "c.Py_Exit", "Py_Exit"], [34, 2, 1, "c.Py_ExitStatusException", "Py_ExitStatusException"], [6, 0, 1, "c.Py_False", "Py_False"], [59, 2, 1, "c.Py_FatalError", "Py_FatalError"], [59, 2, 1, "c.Py_FdIsInteractive", "Py_FdIsInteractive"], [33, 2, 1, "c.Py_Finalize", "Py_Finalize"], [33, 2, 1, "c.Py_FinalizeEx", "Py_FinalizeEx"], [33, 0, 1, "c.Py_FrozenFlag", "Py_FrozenFlag"], [63, 1, 1, "c.Py_GE", "Py_GE"], [35, 1, 1, "c.Py_GETENV", "Py_GETENV"], [63, 1, 1, "c.Py_GT", "Py_GT"], [62, 2, 1, "c.Py_GenericAlias", "Py_GenericAlias"], [62, 0, 1, "c.Py_GenericAliasType", "Py_GenericAliasType"], [34, 2, 1, "c.Py_GetArgcArgv", "Py_GetArgcArgv"], [33, 2, 1, "c.Py_GetBuildInfo", "Py_GetBuildInfo"], [33, 2, 1, "c.Py_GetCompiler", "Py_GetCompiler"], [33, 2, 1, "c.Py_GetCopyright", "Py_GetCopyright"], [33, 2, 1, "c.Py_GetExecPrefix", "Py_GetExecPrefix"], [33, 2, 1, "c.Py_GetPath", "Py_GetPath"], [33, 2, 1, "c.Py_GetPlatform", "Py_GetPlatform"], [33, 2, 1, "c.Py_GetPrefix", "Py_GetPrefix"], [33, 2, 1, "c.Py_GetProgramFullPath", "Py_GetProgramFullPath"], [33, 2, 1, "c.Py_GetProgramName", "Py_GetProgramName"], [33, 2, 1, "c.Py_GetPythonHome", "Py_GetPythonHome"], [33, 2, 1, "c.Py_GetVersion", "Py_GetVersion"], [33, 0, 1, "c.Py_HashRandomizationFlag", "Py_HashRandomizationFlag"], [52, 2, 1, "c.Py_INCREF", "Py_INCREF"], [58, 2, 1, "c.Py_IS_TYPE", "Py_IS_TYPE"], [33, 0, 1, "c.Py_IgnoreEnvironmentFlag", "Py_IgnoreEnvironmentFlag"], [52, 2, 1, "c.Py_IncRef", "Py_IncRef"], [33, 2, 1, "c.Py_Initialize", "Py_Initialize"], [33, 2, 1, "c.Py_InitializeEx", "Py_InitializeEx"], [34, 2, 1, "c.Py_InitializeFromConfig", "Py_InitializeFromConfig"], [33, 0, 1, "c.Py_InspectFlag", "Py_InspectFlag"], [33, 0, 1, "c.Py_InteractiveFlag", "Py_InteractiveFlag"], [58, 2, 1, "c.Py_Is", "Py_Is"], [58, 2, 1, "c.Py_IsFalse", "Py_IsFalse"], [33, 2, 1, "c.Py_IsInitialized", "Py_IsInitialized"], [58, 2, 1, "c.Py_IsNone", "Py_IsNone"], [58, 2, 1, "c.Py_IsTrue", "Py_IsTrue"], [33, 0, 1, "c.Py_IsolatedFlag", "Py_IsolatedFlag"], [63, 1, 1, "c.Py_LE", "Py_LE"], [57, 1, 1, "c.Py_LIMITED_API", "Py_LIMITED_API"], [63, 1, 1, "c.Py_LT", "Py_LT"], [23, 2, 1, "c.Py_LeaveRecursiveCall", "Py_LeaveRecursiveCall"], [33, 0, 1, "c.Py_LegacyWindowsFSEncodingFlag", "Py_LegacyWindowsFSEncodingFlag"], [33, 0, 1, "c.Py_LegacyWindowsStdioFlag", "Py_LegacyWindowsStdioFlag"], [35, 1, 1, "c.Py_MAX", "Py_MAX"], [35, 1, 1, "c.Py_MEMBER_SIZE", "Py_MEMBER_SIZE"], [35, 1, 1, "c.Py_MIN", "Py_MIN"], [45, 1, 1, "c.Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED", "Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED"], [45, 1, 1, "c.Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED", "Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED"], [45, 1, 1, "c.Py_MOD_PER_INTERPRETER_GIL_SUPPORTED", "Py_MOD_PER_INTERPRETER_GIL_SUPPORTED"], [66, 2, 1, "c.Py_Main", "Py_Main"], [63, 1, 1, "c.Py_NE", "Py_NE"], [35, 1, 1, "c.Py_NO_INLINE", "Py_NO_INLINE"], [33, 2, 1, "c.Py_NewInterpreter", "Py_NewInterpreter"], [33, 2, 1, "c.Py_NewInterpreterFromConfig", "Py_NewInterpreterFromConfig"], [52, 2, 1, "c.Py_NewRef", "Py_NewRef"], [33, 0, 1, "c.Py_NoSiteFlag", "Py_NoSiteFlag"], [33, 0, 1, "c.Py_NoUserSiteDirectory", "Py_NoUserSiteDirectory"], [46, 0, 1, "c.Py_None", "Py_None"], [49, 0, 1, "c.Py_NotImplemented", "Py_NotImplemented"], [33, 0, 1, "c.Py_OptimizeFlag", "Py_OptimizeFlag"], [49, 1, 1, "c.Py_PRINT_RAW", "Py_PRINT_RAW"], [34, 2, 1, "c.Py_PreInitialize", "Py_PreInitialize"], [34, 2, 1, "c.Py_PreInitializeFromArgs", "Py_PreInitializeFromArgs"], [34, 2, 1, "c.Py_PreInitializeFromBytesArgs", "Py_PreInitializeFromBytesArgs"], [33, 0, 1, "c.Py_QuietFlag", "Py_QuietFlag"], [58, 1, 1, "c.Py_READONLY", "Py_READONLY"], [52, 2, 1, "c.Py_REFCNT", "Py_REFCNT"], [58, 1, 1, "c.Py_RELATIVE_OFFSET", "Py_RELATIVE_OFFSET"], [6, 1, 1, "c.Py_RETURN_FALSE", "Py_RETURN_FALSE"], [46, 1, 1, "c.Py_RETURN_NONE", "Py_RETURN_NONE"], [49, 1, 1, "c.Py_RETURN_NOTIMPLEMENTED", "Py_RETURN_NOTIMPLEMENTED"], [63, 1, 1, "c.Py_RETURN_RICHCOMPARE", "Py_RETURN_RICHCOMPARE"], [6, 1, 1, "c.Py_RETURN_TRUE", "Py_RETURN_TRUE"], [23, 2, 1, "c.Py_ReprEnter", "Py_ReprEnter"], [23, 2, 1, "c.Py_ReprLeave", "Py_ReprLeave"], [34, 2, 1, "c.Py_RunMain", "Py_RunMain"], [52, 1, 1, "c.Py_SETREF", "Py_SETREF"], [52, 2, 1, "c.Py_SET_REFCNT", "Py_SET_REFCNT"], [58, 2, 1, "c.Py_SET_SIZE", "Py_SET_SIZE"], [58, 2, 1, "c.Py_SET_TYPE", "Py_SET_TYPE"], [58, 2, 1, "c.Py_SIZE", "Py_SIZE"], [35, 1, 1, "c.Py_STRINGIFY", "Py_STRINGIFY"], [33, 2, 1, "c.Py_SetPath", "Py_SetPath"], [33, 2, 1, "c.Py_SetProgramName", "Py_SetProgramName"], [33, 2, 1, "c.Py_SetPythonHome", "Py_SetPythonHome"], [33, 2, 1, "c.Py_SetStandardStreamEncoding", "Py_SetStandardStreamEncoding"], [63, 1, 1, "c.Py_TPFLAGS_BASETYPE", "Py_TPFLAGS_BASETYPE"], [63, 1, 1, "c.Py_TPFLAGS_BASE_EXC_SUBCLASS", "Py_TPFLAGS_BASE_EXC_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_BYTES_SUBCLASS", "Py_TPFLAGS_BYTES_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_DEFAULT", "Py_TPFLAGS_DEFAULT"], [63, 1, 1, "c.Py_TPFLAGS_DICT_SUBCLASS", "Py_TPFLAGS_DICT_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_DISALLOW_INSTANTIATION", "Py_TPFLAGS_DISALLOW_INSTANTIATION"], [63, 1, 1, "c.Py_TPFLAGS_HAVE_FINALIZE", "Py_TPFLAGS_HAVE_FINALIZE"], [63, 1, 1, "c.Py_TPFLAGS_HAVE_GC", "Py_TPFLAGS_HAVE_GC"], [63, 1, 1, "c.Py_TPFLAGS_HAVE_VECTORCALL", "Py_TPFLAGS_HAVE_VECTORCALL"], [63, 1, 1, "c.Py_TPFLAGS_HEAPTYPE", "Py_TPFLAGS_HEAPTYPE"], [63, 1, 1, "c.Py_TPFLAGS_IMMUTABLETYPE", "Py_TPFLAGS_IMMUTABLETYPE"], [63, 1, 1, "c.Py_TPFLAGS_ITEMS_AT_END", "Py_TPFLAGS_ITEMS_AT_END"], [63, 1, 1, "c.Py_TPFLAGS_LIST_SUBCLASS", "Py_TPFLAGS_LIST_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_LONG_SUBCLASS", "Py_TPFLAGS_LONG_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_MANAGED_DICT", "Py_TPFLAGS_MANAGED_DICT"], [63, 1, 1, "c.Py_TPFLAGS_MANAGED_WEAKREF", "Py_TPFLAGS_MANAGED_WEAKREF"], [63, 1, 1, "c.Py_TPFLAGS_MAPPING", "Py_TPFLAGS_MAPPING"], [63, 1, 1, "c.Py_TPFLAGS_METHOD_DESCRIPTOR", "Py_TPFLAGS_METHOD_DESCRIPTOR"], [63, 1, 1, "c.Py_TPFLAGS_READY", "Py_TPFLAGS_READY"], [63, 1, 1, "c.Py_TPFLAGS_READYING", "Py_TPFLAGS_READYING"], [63, 1, 1, "c.Py_TPFLAGS_SEQUENCE", "Py_TPFLAGS_SEQUENCE"], [63, 1, 1, "c.Py_TPFLAGS_TUPLE_SUBCLASS", "Py_TPFLAGS_TUPLE_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_TYPE_SUBCLASS", "Py_TPFLAGS_TYPE_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_UNICODE_SUBCLASS", "Py_TPFLAGS_UNICODE_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_VALID_VERSION_TAG", "Py_TPFLAGS_VALID_VERSION_TAG"], [58, 2, 1, "c.Py_TYPE", "Py_TYPE"], [58, 1, 1, "c.Py_T_BOOL", "Py_T_BOOL"], [58, 1, 1, "c.Py_T_BYTE", "Py_T_BYTE"], [58, 1, 1, "c.Py_T_CHAR", "Py_T_CHAR"], [58, 1, 1, "c.Py_T_DOUBLE", "Py_T_DOUBLE"], [58, 1, 1, "c.Py_T_FLOAT", "Py_T_FLOAT"], [58, 1, 1, "c.Py_T_INT", "Py_T_INT"], [58, 1, 1, "c.Py_T_LONG", "Py_T_LONG"], [58, 1, 1, "c.Py_T_LONGLONG", "Py_T_LONGLONG"], [58, 1, 1, "c.Py_T_OBJECT_EX", "Py_T_OBJECT_EX"], [58, 1, 1, "c.Py_T_PYSSIZET", "Py_T_PYSSIZET"], [58, 1, 1, "c.Py_T_SHORT", "Py_T_SHORT"], [58, 1, 1, "c.Py_T_STRING", "Py_T_STRING"], [58, 1, 1, "c.Py_T_STRING_INPLACE", "Py_T_STRING_INPLACE"], [58, 1, 1, "c.Py_T_UBYTE", "Py_T_UBYTE"], [58, 1, 1, "c.Py_T_UINT", "Py_T_UINT"], [58, 1, 1, "c.Py_T_ULONG", "Py_T_ULONG"], [58, 1, 1, "c.Py_T_ULONGLONG", "Py_T_ULONGLONG"], [58, 1, 1, "c.Py_T_USHORT", "Py_T_USHORT"], [6, 0, 1, "c.Py_True", "Py_True"], [64, 4, 1, "c.Py_UCS1", "Py_UCS1"], [64, 4, 1, "c.Py_UCS2", "Py_UCS2"], [64, 4, 1, "c.Py_UCS4", "Py_UCS4"], [33, 1, 1, "c.Py_UNBLOCK_THREADS", "Py_UNBLOCK_THREADS"], [64, 4, 1, "c.Py_UNICODE", "Py_UNICODE"], [64, 2, 1, "c.Py_UNICODE_ISALNUM", "Py_UNICODE_ISALNUM"], [64, 2, 1, "c.Py_UNICODE_ISALPHA", "Py_UNICODE_ISALPHA"], [64, 2, 1, "c.Py_UNICODE_ISDECIMAL", "Py_UNICODE_ISDECIMAL"], [64, 2, 1, "c.Py_UNICODE_ISDIGIT", "Py_UNICODE_ISDIGIT"], [64, 2, 1, "c.Py_UNICODE_ISLINEBREAK", "Py_UNICODE_ISLINEBREAK"], [64, 2, 1, "c.Py_UNICODE_ISLOWER", "Py_UNICODE_ISLOWER"], [64, 2, 1, "c.Py_UNICODE_ISNUMERIC", "Py_UNICODE_ISNUMERIC"], [64, 2, 1, "c.Py_UNICODE_ISPRINTABLE", "Py_UNICODE_ISPRINTABLE"], [64, 2, 1, "c.Py_UNICODE_ISSPACE", "Py_UNICODE_ISSPACE"], [64, 2, 1, "c.Py_UNICODE_ISTITLE", "Py_UNICODE_ISTITLE"], [64, 2, 1, "c.Py_UNICODE_ISUPPER", "Py_UNICODE_ISUPPER"], [64, 2, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "Py_UNICODE_IS_HIGH_SURROGATE"], [64, 2, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "Py_UNICODE_IS_LOW_SURROGATE"], [64, 2, 1, "c.Py_UNICODE_IS_SURROGATE", "Py_UNICODE_IS_SURROGATE"], [64, 2, 1, "c.Py_UNICODE_JOIN_SURROGATES", "Py_UNICODE_JOIN_SURROGATES"], [64, 2, 1, "c.Py_UNICODE_TODECIMAL", "Py_UNICODE_TODECIMAL"], [64, 2, 1, "c.Py_UNICODE_TODIGIT", "Py_UNICODE_TODIGIT"], [64, 2, 1, "c.Py_UNICODE_TOLOWER", "Py_UNICODE_TOLOWER"], [64, 2, 1, "c.Py_UNICODE_TONUMERIC", "Py_UNICODE_TONUMERIC"], [64, 2, 1, "c.Py_UNICODE_TOTITLE", "Py_UNICODE_TOTITLE"], [64, 2, 1, "c.Py_UNICODE_TOUPPER", "Py_UNICODE_TOUPPER"], [35, 1, 1, "c.Py_UNREACHABLE", "Py_UNREACHABLE"], [35, 1, 1, "c.Py_UNUSED", "Py_UNUSED"], [33, 0, 1, "c.Py_UnbufferedStdioFlag", "Py_UnbufferedStdioFlag"], [28, 2, 1, "c.Py_VISIT", "Py_VISIT"], [5, 2, 1, "c.Py_VaBuildValue", "Py_VaBuildValue"], [33, 0, 1, "c.Py_VerboseFlag", "Py_VerboseFlag"], [4, 0, 1, "c.Py_Version", "Py_Version"], [52, 2, 1, "c.Py_XDECREF", "Py_XDECREF"], [52, 2, 1, "c.Py_XINCREF", "Py_XINCREF"], [52, 2, 1, "c.Py_XNewRef", "Py_XNewRef"], [52, 1, 1, "c.Py_XSETREF", "Py_XSETREF"], [7, 4, 1, "c.Py_buffer", "Py_buffer"], [15, 4, 1, "c.Py_complex", "Py_complex"], [66, 0, 1, "c.Py_eval_input", "Py_eval_input"], [66, 0, 1, "c.Py_file_input", "Py_file_input"], [30, 4, 1, "c.Py_hash_t", "Py_hash_t"], [45, 1, 1, "c.Py_mod_create", "Py_mod_create"], [45, 1, 1, "c.Py_mod_exec", "Py_mod_exec"], [45, 1, 1, "c.Py_mod_multiple_interpreters", "Py_mod_multiple_interpreters"], [66, 0, 1, "c.Py_single_input", "Py_single_input"], [35, 4, 1, "c.Py_ssize_t", "Py_ssize_t"], [33, 4, 1, "c.Py_tracefunc", "Py_tracefunc"], [33, 1, 1, "c.Py_tss_NEEDS_INIT", "Py_tss_NEEDS_INIT"], [33, 4, 1, "c.Py_tss_t", "Py_tss_t"], [30, 4, 1, "c.Py_uhash_t", "Py_uhash_t"], [58, 1, 1, "c.T_NONE", "T_NONE"], [58, 1, 1, "c.T_OBJECT", "T_OBJECT"], [9, 2, 1, "c._PyBytes_Resize", "_PyBytes_Resize"], [58, 4, 1, "c._PyCFunctionFast", "_PyCFunctionFast"], [58, 4, 1, "c._PyCFunctionFastWithKeywords", "_PyCFunctionFastWithKeywords"], [33, 4, 1, "c._PyFrameEvalFunction", "_PyFrameEvalFunction"], [26, 5, 1, "c._PyInterpreterFrame", "_PyInterpreterFrame"], [33, 2, 1, "c._PyInterpreterState_GetEvalFrameFunc", "_PyInterpreterState_GetEvalFrameFunc"], [33, 2, 1, "c._PyInterpreterState_SetEvalFrameFunc", "_PyInterpreterState_SetEvalFrameFunc"], [49, 2, 1, "c._PyObject_GetDictPtr", "_PyObject_GetDictPtr"], [3, 2, 1, "c._PyObject_New", "_PyObject_New"], [3, 2, 1, "c._PyObject_NewVar", "_PyObject_NewVar"], [60, 2, 1, "c._PyTuple_Resize", "_PyTuple_Resize"], [34, 2, 1, "c._Py_InitializeMain", "_Py_InitializeMain"], [3, 0, 1, "c._Py_NoneStruct", "_Py_NoneStruct"], [15, 2, 1, "c._Py_c_diff", "_Py_c_diff"], [15, 2, 1, "c._Py_c_neg", "_Py_c_neg"], [15, 2, 1, "c._Py_c_pow", "_Py_c_pow"], [15, 2, 1, "c._Py_c_prod", "_Py_c_prod"], [15, 2, 1, "c._Py_c_quot", "_Py_c_quot"], [15, 2, 1, "c._Py_c_sum", "_Py_c_sum"], [31, 5, 1, "c._frozen", "_frozen"], [31, 5, 1, "c._inittab", "_inittab"], [63, 4, 1, "c.allocfunc", "allocfunc"], [63, 4, 1, "c.binaryfunc", "binaryfunc"], [63, 4, 1, "c.descrgetfunc", "descrgetfunc"], [63, 4, 1, "c.descrsetfunc", "descrsetfunc"], [63, 4, 1, "c.destructor", "destructor"], [63, 4, 1, "c.freefunc", "freefunc"], [28, 4, 1, "c.gcvisitobjects_t", "gcvisitobjects_t"], [63, 4, 1, "c.getattrfunc", "getattrfunc"], [63, 4, 1, "c.getattrofunc", "getattrofunc"], [63, 4, 1, "c.getbufferproc", "getbufferproc"], [63, 4, 1, "c.getiterfunc", "getiterfunc"], [58, 4, 1, "c.getter", "getter"], [63, 4, 1, "c.hashfunc", "hashfunc"], [63, 4, 1, "c.initproc", "initproc"], [28, 4, 1, "c.inquiry", "inquiry"], [63, 4, 1, "c.iternextfunc", "iternextfunc"], [63, 4, 1, "c.lenfunc", "lenfunc"], [63, 4, 1, "c.newfunc", "newfunc"], [63, 4, 1, "c.objobjargproc", "objobjargproc"], [63, 4, 1, "c.objobjproc", "objobjproc"], [63, 4, 1, "c.releasebufferproc", "releasebufferproc"], [63, 4, 1, "c.reprfunc", "reprfunc"], [63, 4, 1, "c.richcmpfunc", "richcmpfunc"], [63, 4, 1, "c.sendfunc", "sendfunc"], [63, 4, 1, "c.setattrfunc", "setattrfunc"], [63, 4, 1, "c.setattrofunc", "setattrofunc"], [58, 4, 1, "c.setter", "setter"], [63, 4, 1, "c.ssizeargfunc", "ssizeargfunc"], [63, 4, 1, "c.ssizeobjargproc", "ssizeobjargproc"], [63, 4, 1, "c.ternaryfunc", "ternaryfunc"], [28, 4, 1, "c.traverseproc", "traverseproc"], [63, 4, 1, "c.unaryfunc", "unaryfunc"], [10, 4, 1, "c.vectorcallfunc", "vectorcallfunc"], [28, 4, 1, "c.visitproc", "visitproc"], [211, 6, 1, "", "ArithmeticError"], [211, 6, 1, "", "AssertionError"], [211, 6, 1, "", "AttributeError"], [211, 6, 1, "", "BaseException"], [211, 6, 1, "", "BaseExceptionGroup"], [211, 6, 1, "", "BlockingIOError"], [211, 6, 1, "", "BrokenPipeError"], [211, 6, 1, "", "BufferError"], [211, 6, 1, "", "BytesWarning"], [211, 6, 1, "", "ChildProcessError"], [211, 6, 1, "", "ConnectionAbortedError"], [211, 6, 1, "", "ConnectionError"], [211, 6, 1, "", "ConnectionRefusedError"], [211, 6, 1, "", "ConnectionResetError"], [211, 6, 1, "", "DeprecationWarning"], [211, 6, 1, "", "EOFError"], [166, 9, 1, "", "Ellipsis"], [211, 6, 1, "", "EncodingWarning"], [211, 6, 1, "", "EnvironmentError"], [211, 6, 1, "", "Exception"], [211, 6, 1, "", "ExceptionGroup"], [166, 9, 1, "", "False"], [211, 6, 1, "", "FileExistsError"], [211, 6, 1, "", "FileNotFoundError"], [211, 6, 1, "", "FloatingPointError"], [211, 6, 1, "", "FutureWarning"], [211, 6, 1, "", "GeneratorExit"], [211, 6, 1, "", "IOError"], [211, 6, 1, "", "ImportError"], [211, 6, 1, "", "ImportWarning"], [211, 6, 1, "", "IndentationError"], [211, 6, 1, "", "IndexError"], [211, 6, 1, "", "InterruptedError"], [211, 6, 1, "", "IsADirectoryError"], [211, 6, 1, "", "KeyError"], [211, 6, 1, "", "KeyboardInterrupt"], [211, 6, 1, "", "LookupError"], [211, 6, 1, "", "MemoryError"], [211, 6, 1, "", "ModuleNotFoundError"], [211, 6, 1, "", "NameError"], [166, 9, 1, "", "None"], [211, 6, 1, "", "NotADirectoryError"], [166, 9, 1, "", "NotImplemented"], [211, 6, 1, "", "NotImplementedError"], [211, 6, 1, "", "OSError"], [211, 6, 1, "", "OverflowError"], [211, 6, 1, "", "PendingDeprecationWarning"], [211, 6, 1, "", "PermissionError"], [211, 6, 1, "", "ProcessLookupError"], [211, 6, 1, "", "RecursionError"], [211, 6, 1, "", "ReferenceError"], [211, 6, 1, "", "ResourceWarning"], [211, 6, 1, "", "RuntimeError"], [211, 6, 1, "", "RuntimeWarning"], [211, 6, 1, "", "StopAsyncIteration"], [211, 6, 1, "", "StopIteration"], [211, 6, 1, "", "SyntaxError"], [211, 6, 1, "", "SyntaxWarning"], [211, 6, 1, "", "SystemError"], [211, 6, 1, "", "SystemExit"], [211, 6, 1, "", "TabError"], [211, 6, 1, "", "TimeoutError"], [166, 9, 1, "", "True"], [211, 6, 1, "", "TypeError"], [211, 6, 1, "", "UnboundLocalError"], [211, 6, 1, "", "UnicodeDecodeError"], [211, 6, 1, "", "UnicodeEncodeError"], [211, 6, 1, "", "UnicodeError"], [211, 6, 1, "", "UnicodeTranslateError"], [211, 6, 1, "", "UnicodeWarning"], [211, 6, 1, "", "UserWarning"], [211, 6, 1, "", "ValueError"], [211, 6, 1, "", "Warning"], [211, 6, 1, "", "WindowsError"], [211, 6, 1, "", "ZeroDivisionError"], [430, 7, 1, "cached__", "__cached__"], [166, 9, 1, "debug__", "__debug__"], [430, 7, 1, "file__", "__file__"], [111, 10, 0, "-", "__future__"], [223, 12, 1, "import__", "__import__"], [430, 7, 1, "loader__", "__loader__"], [112, 10, 0, "-", "__main__"], [430, 7, 1, "name__", "__name__"], [430, 7, 1, "package__", "__package__"], [430, 7, 1, "path__", "__path__"], [430, 7, 1, "spec__", "__spec__"], [113, 10, 0, "-", "_thread"], [367, 10, 0, "-", "_tkinter"], [114, 10, 0, "-", "abc"], [223, 12, 1, "", "abs"], [115, 10, 0, "-", "aifc"], [223, 12, 1, "", "aiter"], [223, 12, 1, "", "all"], [223, 12, 1, "", "anext"], [223, 12, 1, "", "any"], [118, 10, 0, "-", "argparse"], [119, 10, 0, "-", "array"], [223, 12, 1, "", "ascii"], [120, 10, 0, "-", "ast"], [121, 10, 0, "-", "asyncio"], [138, 10, 0, "-", "atexit"], [139, 10, 0, "-", "audioop"], [141, 10, 0, "-", "base64"], [142, 10, 0, "-", "bdb"], [223, 12, 1, "", "bin"], [144, 10, 0, "-", "binascii"], [145, 10, 0, "-", "bisect"], [223, 11, 1, "", "bool"], [223, 12, 1, "", "breakpoint"], [146, 10, 0, "-", "builtins"], [342, 11, 1, "", "bytearray"], [342, 11, 1, "", "bytes"], [147, 10, 0, "-", "bz2"], [306, 10, 0, "-", "cProfile"], [148, 10, 0, "-", "calendar"], [223, 12, 1, "", "callable"], [149, 10, 0, "-", "cgi"], [150, 10, 0, "-", "cgitb"], [223, 12, 1, "", "chr"], [151, 10, 0, "-", "chunk"], [223, 12, 1, "", "classmethod"], [152, 10, 0, "-", "cmath"], [153, 10, 0, "-", "cmd"], [155, 10, 0, "-", "code"], [156, 10, 0, "-", "codecs"], [157, 10, 0, "-", "codeop"], [158, 10, 0, "-", "collections"], [160, 10, 0, "-", "colorsys"], [223, 12, 1, "", "compile"], [161, 10, 0, "-", "compileall"], [223, 11, 1, "", "complex"], [165, 10, 0, "-", "configparser"], [167, 10, 0, "-", "contextlib"], [168, 10, 0, "-", "contextvars"], [169, 10, 0, "-", "copy"], [170, 10, 0, "-", "copyreg"], [166, 9, 1, "", "copyright"], [166, 9, 1, "", "credits"], [171, 10, 0, "-", "crypt"], [173, 10, 0, "-", "csv"], [174, 10, 0, "-", "ctypes"], [175, 10, 0, "-", "curses"], [179, 10, 0, "-", "dataclasses"], [181, 10, 0, "-", "datetime"], [182, 10, 0, "-", "dbm"], [184, 10, 0, "-", "decimal"], [223, 12, 1, "", "delattr"], [342, 11, 1, "", "dict"], [188, 10, 0, "-", "difflib"], [223, 12, 1, "", "dir"], [189, 10, 0, "-", "dis"], [223, 12, 1, "", "divmod"], [191, 10, 0, "-", "doctest"], [192, 10, 0, "-", "email"], [208, 10, 0, "-", "ensurepip"], [209, 10, 0, "-", "enum"], [223, 12, 1, "", "enumerate"], [210, 10, 0, "-", "errno"], [223, 12, 1, "", "eval"], [223, 12, 1, "", "exec"], [166, 9, 1, "", "exit"], [212, 10, 0, "-", "faulthandler"], [213, 10, 0, "-", "fcntl"], [214, 10, 0, "-", "filecmp"], [216, 10, 0, "-", "fileinput"], [223, 12, 1, "", "filter"], [223, 11, 1, "", "float"], [218, 10, 0, "-", "fnmatch"], [223, 12, 1, "", "format"], [219, 10, 0, "-", "fractions"], [342, 11, 1, "", "frozenset"], [221, 10, 0, "-", "ftplib"], [224, 10, 0, "-", "functools"], [225, 10, 0, "-", "gc"], [223, 12, 1, "", "getattr"], [226, 10, 0, "-", "getopt"], [227, 10, 0, "-", "getpass"], [228, 10, 0, "-", "gettext"], [229, 10, 0, "-", "glob"], [223, 12, 1, "", "globals"], [230, 10, 0, "-", "graphlib"], [231, 10, 0, "-", "grp"], [232, 10, 0, "-", "gzip"], [223, 12, 1, "", "hasattr"], [223, 12, 1, "", "hash"], [233, 10, 0, "-", "hashlib"], [234, 10, 0, "-", "heapq"], [223, 12, 1, "", "help"], [223, 12, 1, "", "hex"], [235, 10, 0, "-", "hmac"], [236, 10, 0, "-", "html"], [239, 10, 0, "-", "http"], [223, 12, 1, "", "id"], [245, 10, 0, "-", "idlelib"], [246, 10, 0, "-", "imaplib"], [247, 10, 0, "-", "imghdr"], [248, 10, 0, "-", "importlib"], [223, 12, 1, "", "input"], [253, 10, 0, "-", "inspect"], [223, 11, 1, "", "int"], [256, 10, 0, "-", "io"], [257, 10, 0, "-", "ipaddress"], [223, 12, 1, "", "isinstance"], [223, 12, 1, "", "issubclass"], [223, 12, 1, "", "iter"], [259, 10, 0, "-", "itertools"], [260, 10, 0, "-", "json"], [261, 10, 0, "-", "keyword"], [223, 12, 1, "", "len"], [110, 10, 0, "-", "lib2to3"], [166, 9, 1, "", "license"], [263, 10, 0, "-", "linecache"], [342, 11, 1, "", "list"], [264, 10, 0, "-", "locale"], [223, 12, 1, "", "locals"], [265, 10, 0, "-", "logging"], [268, 10, 0, "-", "lzma"], [269, 10, 0, "-", "mailbox"], [270, 10, 0, "-", "mailcap"], [223, 12, 1, "", "map"], [272, 10, 0, "-", "marshal"], [273, 10, 0, "-", "math"], [223, 12, 1, "", "max"], [342, 11, 1, "", "memoryview"], [274, 10, 0, "-", "mimetypes"], [223, 12, 1, "", "min"], [276, 10, 0, "-", "mmap"], [277, 10, 0, "-", "modulefinder"], [279, 10, 0, "-", "msilib"], [280, 10, 0, "-", "msvcrt"], [281, 10, 0, "-", "multiprocessing"], [284, 10, 0, "-", "netrc"], [223, 12, 1, "", "next"], [285, 10, 0, "-", "nis"], [286, 10, 0, "-", "nntplib"], [287, 10, 0, "-", "numbers"], [223, 11, 1, "", "object"], [223, 12, 1, "", "oct"], [223, 12, 1, "", "open"], [289, 10, 0, "-", "operator"], [290, 10, 0, "-", "optparse"], [223, 12, 1, "", "ord"], [291, 10, 0, "-", "os"], [293, 10, 0, "-", "ossaudiodev"], [294, 10, 0, "-", "pathlib"], [295, 10, 0, "-", "pdb"], [297, 10, 0, "-", "pickle"], [298, 10, 0, "-", "pickletools"], [299, 10, 0, "-", "pipes"], [300, 10, 0, "-", "pkgutil"], [301, 10, 0, "-", "platform"], [302, 10, 0, "-", "plistlib"], [303, 10, 0, "-", "poplib"], [304, 10, 0, "-", "posix"], [223, 12, 1, "", "pow"], [305, 10, 0, "-", "pprint"], [223, 12, 1, "", "print"], [306, 10, 0, "-", "profile"], [223, 11, 1, "", "property"], [306, 10, 0, "-", "pstats"], [307, 10, 0, "-", "pty"], [308, 10, 0, "-", "pwd"], [309, 10, 0, "-", "py_compile"], [310, 10, 0, "-", "pyclbr"], [311, 10, 0, "-", "pydoc"], [314, 10, 0, "-", "queue"], [166, 9, 1, "", "quit"], [315, 10, 0, "-", "quopri"], [316, 10, 0, "-", "random"], [342, 11, 1, "", "range"], [317, 10, 0, "-", "re"], [318, 10, 0, "-", "readline"], [223, 12, 1, "", "repr"], [319, 10, 0, "-", "reprlib"], [320, 10, 0, "-", "resource"], [223, 12, 1, "", "reversed"], [321, 10, 0, "-", "rlcompleter"], [223, 12, 1, "", "round"], [322, 10, 0, "-", "runpy"], [323, 10, 0, "-", "sched"], [324, 10, 0, "-", "secrets"], [326, 10, 0, "-", "select"], [327, 10, 0, "-", "selectors"], [342, 11, 1, "", "set"], [223, 12, 1, "", "setattr"], [328, 10, 0, "-", "shelve"], [329, 10, 0, "-", "shlex"], [330, 10, 0, "-", "shutil"], [331, 10, 0, "-", "signal"], [332, 10, 0, "-", "site"], [332, 10, 0, "-", "sitecustomize"], [223, 11, 1, "", "slice"], [333, 10, 0, "-", "smtplib"], [334, 10, 0, "-", "sndhdr"], [335, 10, 0, "-", "socket"], [336, 10, 0, "-", "socketserver"], [223, 12, 1, "", "sorted"], [337, 10, 0, "-", "spwd"], [338, 10, 0, "-", "sqlite3"], [339, 10, 0, "-", "ssl"], [340, 10, 0, "-", "stat"], [223, 12, 1, "", "staticmethod"], [341, 10, 0, "-", "statistics"], [342, 11, 1, "", "str"], [343, 10, 0, "-", "string"], [344, 10, 0, "-", "stringprep"], [345, 10, 0, "-", "struct"], [346, 10, 0, "-", "subprocess"], [223, 12, 1, "", "sum"], [347, 10, 0, "-", "sunau"], [223, 11, 1, "", "super"], [349, 10, 0, "-", "symtable"], [350, 10, 0, "-", "sys"], [353, 10, 0, "-", "sysconfig"], [354, 10, 0, "-", "syslog"], [355, 10, 0, "-", "tabnanny"], [356, 10, 0, "-", "tarfile"], [357, 10, 0, "-", "telnetlib"], [358, 10, 0, "-", "tempfile"], [359, 10, 0, "-", "termios"], [360, 10, 0, "-", "test"], [362, 10, 0, "-", "textwrap"], [363, 10, 0, "-", "threading"], [364, 10, 0, "-", "time"], [365, 10, 0, "-", "timeit"], [367, 10, 0, "-", "tkinter"], [375, 10, 0, "-", "token"], [376, 10, 0, "-", "tokenize"], [377, 10, 0, "-", "tomllib"], [378, 10, 0, "-", "trace"], [379, 10, 0, "-", "traceback"], [380, 10, 0, "-", "tracemalloc"], [381, 10, 0, "-", "tty"], [342, 11, 1, "", "tuple"], [382, 10, 0, "-", "turtle"], [382, 10, 0, "-", "turtledemo"], [223, 11, 1, "", "type"], [383, 10, 0, "-", "types"], [384, 10, 0, "-", "typing"], [385, 10, 0, "-", "unicodedata"], [386, 10, 0, "-", "unittest"], [390, 10, 0, "-", "urllib"], [332, 10, 0, "-", "usercustomize"], [395, 10, 0, "-", "uu"], [396, 10, 0, "-", "uuid"], [223, 12, 1, "", "vars"], [397, 10, 0, "-", "venv"], [398, 10, 0, "-", "warnings"], [399, 10, 0, "-", "wave"], [400, 10, 0, "-", "weakref"], [401, 10, 0, "-", "webbrowser"], [403, 10, 0, "-", "winreg"], [404, 10, 0, "-", "winsound"], [405, 10, 0, "-", "wsgiref"], [406, 10, 0, "-", "xdrlib"], [407, 10, 0, "-", "xml"], [223, 12, 1, "", "zip"], [419, 10, 0, "-", "zipapp"], [420, 10, 0, "-", "zipfile"], [421, 10, 0, "-", "zipimport"], [422, 10, 0, "-", "zlib"], [423, 10, 0, "-", "zoneinfo"], [295, 13, 1, "pdbcommand-0", "!"], [454, 14, 1, "cmdoption-build", "--build"], [453, 14, 1, "cmdoption-check-hash-based-pycs", "--check-hash-based-pycs"], [454, 14, 1, "cmdoption-disable-ipv6", "--disable-ipv6"], [454, 14, 1, "cmdoption-disable-test-modules", "--disable-test-modules"], [454, 14, 1, "cmdoption-enable-big-digits", "--enable-big-digits"], [454, 14, 1, "cmdoption-enable-bolt", "--enable-bolt"], [454, 14, 1, "cmdoption-enable-framework", "--enable-framework"], [454, 14, 1, "cmdoption-enable-loadable-sqlite-extensions", "--enable-loadable-sqlite-extensions"], [454, 14, 1, "cmdoption-enable-optimizations", "--enable-optimizations"], [454, 14, 1, "cmdoption-enable-profiling", "--enable-profiling"], [454, 14, 1, "cmdoption-enable-pystats", "--enable-pystats"], [454, 14, 1, "cmdoption-enable-shared", "--enable-shared"], [454, 14, 1, "cmdoption-enable-universalsdk", "--enable-universalsdk"], [454, 14, 1, "cmdoption-enable-wasm-dynamic-linking", "--enable-wasm-dynamic-linking"], [454, 14, 1, "cmdoption-enable-wasm-pthreads", "--enable-wasm-pthreads"], [454, 14, 1, "cmdoption-exec-prefix", "--exec-prefix"], [453, 14, 1, "cmdoption-help", "--help"], [453, 14, 1, "cmdoption-help-all", "--help-all"], [453, 14, 1, "cmdoption-help-env", "--help-env"], [453, 14, 1, "cmdoption-help-xoptions", "--help-xoptions"], [454, 14, 1, "cmdoption-host", "--host"], [454, 14, 1, "cmdoption-prefix", "--prefix"], [453, 14, 1, "cmdoption-version", "--version"], [454, 14, 1, "cmdoption-with-address-sanitizer", "--with-address-sanitizer"], [454, 14, 1, "cmdoption-with-assertions", "--with-assertions"], [454, 14, 1, "cmdoption-with-build-python", "--with-build-python"], [454, 14, 1, "cmdoption-with-builtin-hashlib-hashes", "--with-builtin-hashlib-hashes"], [454, 14, 1, "cmdoption-with-computed-gotos", "--with-computed-gotos"], [454, 14, 1, "cmdoption-with-dbmliborder", "--with-dbmliborder"], [454, 14, 1, "cmdoption-with-dtrace", "--with-dtrace"], [454, 14, 1, "cmdoption-with-emscripten-target", "--with-emscripten-target"], [454, 14, 1, "cmdoption-with-ensurepip", "--with-ensurepip"], [454, 14, 1, "cmdoption-with-framework-name", "--with-framework-name"], [454, 14, 1, "cmdoption-with-hash-algorithm", "--with-hash-algorithm"], [454, 14, 1, "cmdoption-with-libc", "--with-libc"], [454, 14, 1, "cmdoption-with-libm", "--with-libm"], [454, 14, 1, "cmdoption-with-libs", "--with-libs"], [454, 14, 1, "cmdoption-with-lto", "--with-lto"], [454, 14, 1, "cmdoption-with-memory-sanitizer", "--with-memory-sanitizer"], [454, 14, 1, "cmdoption-with-openssl", "--with-openssl"], [454, 14, 1, "cmdoption-with-openssl-rpath", "--with-openssl-rpath"], [454, 14, 1, "cmdoption-with-pkg-config", "--with-pkg-config"], [454, 14, 1, "cmdoption-with-platlibdir", "--with-platlibdir"], [454, 14, 1, "cmdoption-with-pydebug", "--with-pydebug"], [454, 14, 1, "cmdoption-with-readline", "--with-readline"], [454, 14, 1, "cmdoption-with-ssl-default-suites", "--with-ssl-default-suites"], [454, 14, 1, "cmdoption-with-strict-overflow", "--with-strict-overflow"], [454, 14, 1, "cmdoption-with-suffix", "--with-suffix"], [454, 14, 1, "cmdoption-with-system-expat", "--with-system-expat"], [454, 14, 1, "cmdoption-with-system-libmpdec", "--with-system-libmpdec"], [454, 14, 1, "cmdoption-with-trace-refs", "--with-trace-refs"], [454, 14, 1, "cmdoption-with-tzpath", "--with-tzpath"], [454, 14, 1, "cmdoption-with-undefined-behavior-sanitizer", "--with-undefined-behavior-sanitizer"], [454, 14, 1, "cmdoption-with-universal-archs", "--with-universal-archs"], [454, 14, 1, "cmdoption-with-valgrind", "--with-valgrind"], [454, 14, 1, "cmdoption-with-wheel-pkg-dir", "--with-wheel-pkg-dir"], [454, 14, 1, "cmdoption-without-c-locale-coercion", "--without-c-locale-coercion"], [454, 14, 1, "cmdoption-without-decimal-contextvar", "--without-decimal-contextvar"], [454, 14, 1, "cmdoption-without-doc-strings", "--without-doc-strings"], [454, 14, 1, "cmdoption-without-freelists", "--without-freelists"], [454, 14, 1, "cmdoption-without-pymalloc", "--without-pymalloc"], [454, 14, 1, "cmdoption-without-readline", "--without-readline"], [454, 14, 1, "cmdoption-without-static-libpython", "--without-static-libpython"], [453, 14, 1, "cmdoption-0", "-?"], [453, 14, 1, "cmdoption-B", "-B"], [453, 14, 1, "cmdoption-E", "-E"], [453, 14, 1, "cmdoption-I", "-I"], [453, 14, 1, "cmdoption-J", "-J"], [453, 14, 1, "cmdoption-O", "-O"], [453, 14, 1, "cmdoption-OO", "-OO"], [453, 14, 1, "cmdoption-P", "-P"], [453, 14, 1, "cmdoption-R", "-R"], [453, 14, 1, "cmdoption-S", "-S"], [453, 14, 1, "cmdoption-V", "-V"], [453, 14, 1, "cmdoption-W", "-W"], [453, 14, 1, "cmdoption-X", "-X"], [453, 14, 1, "cmdoption-b", "-b"], [453, 14, 1, "cmdoption-c", "-c"], [453, 14, 1, "cmdoption-d", "-d"], [453, 14, 1, "cmdoption-h", "-h"], [453, 14, 1, "cmdoption-i", "-i"], [453, 14, 1, "cmdoption-m", "-m"], [453, 14, 1, "cmdoption-q", "-q"], [453, 14, 1, "cmdoption-s", "-s"], [453, 14, 1, "cmdoption-u", "-u"], [453, 14, 1, "cmdoption-v", "-v"], [453, 14, 1, "cmdoption-x", "-x"], [454, 15, 1, "-", "BASECFLAGS"], [454, 15, 1, "-", "BASECPPFLAGS"], [189, 16, 1, "-", "BEFORE_ASYNC_WITH"], [189, 16, 1, "-", "BEFORE_WITH"], [189, 16, 1, "-", "BINARY_OP"], [189, 16, 1, "-", "BINARY_SLICE"], [189, 16, 1, "-", "BINARY_SUBSCR"], [454, 15, 1, "-", "BLDSHARED"], [351, 17, 1, "-", "BRANCH"], [189, 16, 1, "-", "BUILD_CONST_KEY_MAP"], [189, 16, 1, "-", "BUILD_LIST"], [189, 16, 1, "-", "BUILD_MAP"], [189, 16, 1, "-", "BUILD_SET"], [189, 16, 1, "-", "BUILD_SLICE"], [189, 16, 1, "-", "BUILD_STRING"], [189, 16, 1, "-", "BUILD_TUPLE"], [189, 16, 1, "-", "CACHE"], [351, 17, 1, "-", "CALL"], [189, 16, 1, "-", "CALL"], [189, 16, 1, "-", "CALL_FUNCTION_EX"], [189, 16, 1, "-", "CALL_INTRINSIC_1"], [189, 16, 1, "-", "CALL_INTRINSIC_2"], [454, 15, 1, "-", "CC"], [454, 15, 1, "-", "CCSHARED"], [454, 15, 1, "-", "CFLAGS"], [454, 15, 1, "-", "CFLAGSFORSHARED"], [454, 15, 1, "-", "CFLAGS_ALIASING"], [454, 15, 1, "-", "CFLAGS_NODIST"], [189, 16, 1, "-", "CHECK_EG_MATCH"], [189, 16, 1, "-", "CHECK_EXC_MATCH"], [189, 16, 1, "-", "CLEANUP_THROW"], [189, 16, 1, "-", "COMPARE_OP"], [454, 15, 1, "-", "COMPILEALL_OPTS"], [454, 15, 1, "-", "CONFIGURE_CFLAGS"], [454, 15, 1, "-", "CONFIGURE_CFLAGS_NODIST"], [454, 15, 1, "-", "CONFIGURE_CPPFLAGS"], [454, 15, 1, "-", "CONFIGURE_LDFLAGS"], [454, 15, 1, "-", "CONFIGURE_LDFLAGS_NODIST"], [454, 14, 1, "cmdoption-arg-CONFIG_SITE", "CONFIG_SITE"], [189, 16, 1, "-", "CONTAINS_OP"], [189, 16, 1, "-", "COPY"], [189, 16, 1, "-", "COPY_FREE_VARS"], [454, 15, 1, "-", "CPPFLAGS"], [454, 15, 1, "-", "CXX"], [351, 17, 1, "-", "C_RAISE"], [351, 17, 1, "-", "C_RETURN"], [189, 16, 1, "-", "DELETE_ATTR"], [189, 16, 1, "-", "DELETE_DEREF"], [189, 16, 1, "-", "DELETE_FAST"], [189, 16, 1, "-", "DELETE_GLOBAL"], [189, 16, 1, "-", "DELETE_NAME"], [189, 16, 1, "-", "DELETE_SUBSCR"], [189, 16, 1, "-", "DICT_MERGE"], [189, 16, 1, "-", "DICT_UPDATE"], [189, 16, 1, "-", "END_ASYNC_FOR"], [189, 16, 1, "-", "END_FOR"], [189, 16, 1, "-", "END_SEND"], [351, 17, 1, "-", "EXCEPTION_HANDLED"], [189, 16, 1, "-", "EXTENDED_ARG"], [454, 15, 1, "-", "EXTRA_CFLAGS"], [189, 16, 1, "-", "FORMAT_VALUE"], [189, 16, 1, "-", "FOR_ITER"], [189, 16, 1, "-", "GET_AITER"], [189, 16, 1, "-", "GET_ANEXT"], [189, 16, 1, "-", "GET_AWAITABLE"], [189, 16, 1, "-", "GET_ITER"], [189, 16, 1, "-", "GET_LEN"], [189, 16, 1, "-", "GET_YIELD_FROM_ITER"], [189, 16, 1, "-", "HAVE_ARGUMENT"], [189, 16, 1, "-", "IMPORT_FROM"], [189, 16, 1, "-", "IMPORT_NAME"], [351, 17, 1, "-", "INSTRUCTION"], [189, 16, 1, "-", "IS_OP"], [351, 17, 1, "-", "JUMP"], [189, 16, 1, "-", "JUMP"], [189, 16, 1, "-", "JUMP_BACKWARD"], [189, 16, 1, "-", "JUMP_BACKWARD_NO_INTERRUPT"], [189, 16, 1, "-", "JUMP_FORWARD"], [189, 16, 1, "-", "JUMP_NO_INTERRUPT"], [189, 16, 1, "-", "KW_NAMES"], [454, 15, 1, "-", "LDFLAGS"], [454, 15, 1, "-", "LDFLAGS_NODIST"], [454, 15, 1, "-", "LDSHARED"], [454, 15, 1, "-", "LIBS"], [351, 17, 1, "-", "LINE"], [454, 15, 1, "-", "LINKCC"], [189, 16, 1, "-", "LIST_APPEND"], [189, 16, 1, "-", "LIST_EXTEND"], [189, 16, 1, "-", "LOAD_ASSERTION_ERROR"], [189, 16, 1, "-", "LOAD_ATTR"], [189, 16, 1, "-", "LOAD_BUILD_CLASS"], [189, 16, 1, "-", "LOAD_CLOSURE"], [189, 16, 1, "-", "LOAD_CONST"], [189, 16, 1, "-", "LOAD_DEREF"], [189, 16, 1, "-", "LOAD_FAST"], [189, 16, 1, "-", "LOAD_FAST_AND_CLEAR"], [189, 16, 1, "-", "LOAD_FAST_CHECK"], [189, 16, 1, "-", "LOAD_FROM_DICT_OR_DEREF"], [189, 16, 1, "-", "LOAD_FROM_DICT_OR_GLOBALS"], [189, 16, 1, "-", "LOAD_GLOBAL"], [189, 16, 1, "-", "LOAD_LOCALS"], [189, 16, 1, "-", "LOAD_METHOD"], [189, 16, 1, "-", "LOAD_NAME"], [189, 16, 1, "-", "LOAD_SUPER_ATTR"], [189, 16, 1, "-", "MAKE_CELL"], [189, 16, 1, "-", "MAKE_FUNCTION"], [189, 16, 1, "-", "MAP_ADD"], [189, 16, 1, "-", "MATCH_CLASS"], [189, 16, 1, "-", "MATCH_KEYS"], [189, 16, 1, "-", "MATCH_MAPPING"], [189, 16, 1, "-", "MATCH_SEQUENCE"], [189, 16, 1, "-", "NOP"], [351, 17, 1, "-", "NO_EVENTS"], [454, 15, 1, "-", "OPT"], [189, 16, 1, "-", "POP_BLOCK"], [189, 16, 1, "-", "POP_EXCEPT"], [189, 16, 1, "-", "POP_JUMP_IF_FALSE"], [189, 16, 1, "-", "POP_JUMP_IF_NONE"], [189, 16, 1, "-", "POP_JUMP_IF_NOT_NONE"], [189, 16, 1, "-", "POP_JUMP_IF_TRUE"], [189, 16, 1, "-", "POP_TOP"], [454, 15, 1, "-", "PROFILE_TASK"], [454, 15, 1, "-", "PURIFY"], [189, 16, 1, "-", "PUSH_EXC_INFO"], [189, 16, 1, "-", "PUSH_NULL"], [453, 15, 1, "-", "PYTHONASYNCIODEBUG"], [453, 15, 1, "-", "PYTHONBREAKPOINT"], [453, 15, 1, "-", "PYTHONCASEOK"], [453, 15, 1, "-", "PYTHONCOERCECLOCALE"], [453, 15, 1, "-", "PYTHONDEBUG"], [453, 15, 1, "-", "PYTHONDEVMODE"], [453, 15, 1, "-", "PYTHONDONTWRITEBYTECODE"], [453, 15, 1, "-", "PYTHONDUMPREFS"], [453, 15, 1, "envvar-PYTHONDUMPREFSFILE-FILENAME", "PYTHONDUMPREFSFILE=FILENAME"], [453, 15, 1, "-", "PYTHONEXECUTABLE"], [453, 15, 1, "-", "PYTHONFAULTHANDLER"], [453, 15, 1, "-", "PYTHONHASHSEED"], [453, 15, 1, "-", "PYTHONHOME"], [453, 15, 1, "-", "PYTHONINSPECT"], [453, 15, 1, "-", "PYTHONINTMAXSTRDIGITS"], [453, 15, 1, "-", "PYTHONIOENCODING"], [453, 15, 1, "-", "PYTHONLEGACYWINDOWSFSENCODING"], [453, 15, 1, "-", "PYTHONLEGACYWINDOWSSTDIO"], [453, 15, 1, "-", "PYTHONMALLOC"], [453, 15, 1, "-", "PYTHONMALLOCSTATS"], [453, 15, 1, "-", "PYTHONNODEBUGRANGES"], [453, 15, 1, "-", "PYTHONNOUSERSITE"], [453, 15, 1, "-", "PYTHONOPTIMIZE"], [453, 15, 1, "-", "PYTHONPATH"], [453, 15, 1, "-", "PYTHONPERFSUPPORT"], [453, 15, 1, "-", "PYTHONPLATLIBDIR"], [453, 15, 1, "-", "PYTHONPROFILEIMPORTTIME"], [453, 15, 1, "-", "PYTHONPYCACHEPREFIX"], [453, 15, 1, "-", "PYTHONSAFEPATH"], [453, 15, 1, "-", "PYTHONSTARTUP"], [453, 15, 1, "-", "PYTHONTRACEMALLOC"], [423, 15, 1, "-", "PYTHONTZPATH"], [453, 15, 1, "-", "PYTHONUNBUFFERED"], [453, 15, 1, "-", "PYTHONUSERBASE"], [453, 15, 1, "-", "PYTHONUTF8"], [453, 15, 1, "-", "PYTHONVERBOSE"], [453, 15, 1, "-", "PYTHONWARNDEFAULTENCODING"], [453, 15, 1, "-", "PYTHONWARNINGS"], [454, 15, 1, "-", "PY_BUILTIN_MODULE_CFLAGS"], [454, 15, 1, "-", "PY_CFLAGS"], [454, 15, 1, "-", "PY_CFLAGS_NODIST"], [454, 15, 1, "-", "PY_CORE_CFLAGS"], [454, 15, 1, "-", "PY_CORE_LDFLAGS"], [454, 15, 1, "-", "PY_CPPFLAGS"], [454, 15, 1, "-", "PY_LDFLAGS"], [454, 15, 1, "-", "PY_LDFLAGS_NODIST"], [351, 17, 1, "-", "PY_RESUME"], [351, 17, 1, "-", "PY_RETURN"], [351, 17, 1, "-", "PY_START"], [454, 15, 1, "-", "PY_STDMODULE_CFLAGS"], [351, 17, 1, "-", "PY_THROW"], [351, 17, 1, "-", "PY_UNWIND"], [351, 17, 1, "-", "PY_YIELD"], [351, 17, 1, "-", "RAISE"], [189, 16, 1, "-", "RAISE_VARARGS"], [351, 17, 1, "-", "RERAISE"], [189, 16, 1, "-", "RERAISE"], [189, 16, 1, "-", "RESUME"], [189, 16, 1, "-", "RETURN_CONST"], [189, 16, 1, "-", "RETURN_GENERATOR"], [189, 16, 1, "-", "RETURN_VALUE"], [189, 16, 1, "-", "SEND"], [189, 16, 1, "-", "SETUP_ANNOTATIONS"], [189, 16, 1, "-", "SETUP_CLEANUP"], [189, 16, 1, "-", "SETUP_FINALLY"], [189, 16, 1, "-", "SETUP_WITH"], [189, 16, 1, "-", "SET_ADD"], [189, 16, 1, "-", "SET_UPDATE"], [351, 17, 1, "-", "STOP_ITERATION"], [189, 16, 1, "-", "STORE_ATTR"], [189, 16, 1, "-", "STORE_DEREF"], [189, 16, 1, "-", "STORE_FAST"], [189, 16, 1, "-", "STORE_GLOBAL"], [189, 16, 1, "-", "STORE_NAME"], [189, 16, 1, "-", "STORE_SLICE"], [189, 16, 1, "-", "STORE_SUBSCR"], [189, 16, 1, "-", "SWAP"], [189, 16, 1, "-", "UNARY_INVERT"], [189, 16, 1, "-", "UNARY_NEGATIVE"], [189, 16, 1, "-", "UNARY_NOT"], [189, 16, 1, "-", "UNPACK_EX"], [189, 16, 1, "-", "UNPACK_SEQUENCE"], [189, 16, 1, "-", "WITH_EXCEPT_START"], [189, 16, 1, "-", "YIELD_VALUE"], [295, 13, 1, "-", "alias"], [110, 18, 1, "to3fixer-apply", "apply"], [295, 13, 1, "-", "args"], [110, 18, 1, "to3fixer-asserts", "asserts"], [110, 18, 1, "to3fixer-basestring", "basestring"], [295, 13, 1, "-", "break"], [110, 18, 1, "to3fixer-buffer", "buffer"], [295, 13, 1, "-", "clear"], [295, 13, 1, "-", "commands"], [295, 13, 1, "-", "condition"], [295, 13, 1, "-", "continue"], [295, 13, 1, "-", "debug"], [110, 18, 1, "to3fixer-dict", "dict"], [295, 13, 1, "-", "disable"], [295, 13, 1, "-", "display"], [295, 13, 1, "-", "down"], [295, 13, 1, "-", "enable"], [110, 18, 1, "to3fixer-except", "except"], [110, 18, 1, "to3fixer-exec", "exec"], [110, 18, 1, "to3fixer-execfile", "execfile"], [110, 18, 1, "to3fixer-exitfunc", "exitfunc"], [110, 18, 1, "to3fixer-filter", "filter"], [110, 18, 1, "to3fixer-funcattrs", "funcattrs"], [110, 18, 1, "to3fixer-future", "future"], [110, 18, 1, "to3fixer-getcwdu", "getcwdu"], [110, 18, 1, "to3fixer-has_key", "has_key"], [295, 13, 1, "-", "help"], [110, 18, 1, "to3fixer-idioms", "idioms"], [295, 13, 1, "-", "ignore"], [110, 18, 1, "to3fixer-import", "import"], [110, 18, 1, "to3fixer-imports", "imports"], [110, 18, 1, "to3fixer-imports2", "imports2"], [110, 18, 1, "to3fixer-input", "input"], [295, 13, 1, "-", "interact"], [110, 18, 1, "to3fixer-intern", "intern"], [110, 18, 1, "to3fixer-isinstance", "isinstance"], [110, 18, 1, "to3fixer-itertools", "itertools"], [110, 18, 1, "to3fixer-itertools_imports", "itertools_imports"], [295, 13, 1, "-", "jump"], [295, 13, 1, "-", "list"], [295, 13, 1, "-", "ll"], [110, 18, 1, "to3fixer-long", "long"], [110, 18, 1, "to3fixer-map", "map"], [110, 18, 1, "to3fixer-metaclass", "metaclass"], [110, 18, 1, "to3fixer-methodattrs", "methodattrs"], [110, 18, 1, "to3fixer-ne", "ne"], [110, 18, 1, "to3fixer-next", "next"], [295, 13, 1, "-", "next"], [110, 18, 1, "to3fixer-nonzero", "nonzero"], [110, 18, 1, "to3fixer-numliterals", "numliterals"], [110, 18, 1, "to3fixer-operator", "operator"], [295, 13, 1, "-", "p"], [110, 18, 1, "to3fixer-paren", "paren"], [295, 13, 1, "-", "pp"], [110, 18, 1, "to3fixer-print", "print"], [295, 13, 1, "-", "quit"], [110, 18, 1, "to3fixer-raise", "raise"], [110, 18, 1, "to3fixer-raw_input", "raw_input"], [110, 18, 1, "to3fixer-reduce", "reduce"], [110, 18, 1, "to3fixer-reload", "reload"], [110, 18, 1, "to3fixer-renames", "renames"], [110, 18, 1, "to3fixer-repr", "repr"], [295, 13, 1, "-", "restart"], [295, 13, 1, "-", "return"], [295, 13, 1, "-", "retval"], [295, 13, 1, "-", "run"], [110, 18, 1, "to3fixer-set_literal", "set_literal"], [295, 13, 1, "-", "source"], [110, 18, 1, "to3fixer-standarderror", "standarderror"], [295, 13, 1, "-", "step"], [110, 18, 1, "to3fixer-sys_exc", "sys_exc"], [295, 13, 1, "-", "tbreak"], [110, 18, 1, "to3fixer-throw", "throw"], [110, 18, 1, "to3fixer-tuple_params", "tuple_params"], [110, 18, 1, "to3fixer-types", "types"], [295, 13, 1, "-", "unalias"], [295, 13, 1, "-", "undisplay"], [110, 18, 1, "to3fixer-unicode", "unicode"], [295, 13, 1, "-", "until"], [295, 13, 1, "-", "up"], [110, 18, 1, "to3fixer-urllib", "urllib"], [295, 13, 1, "-", "whatis"], [295, 13, 1, "-", "where"], [110, 18, 1, "to3fixer-ws_comma", "ws_comma"], [110, 18, 1, "to3fixer-xrange", "xrange"], [110, 18, 1, "to3fixer-xreadlines", "xreadlines"], [110, 18, 1, "to3fixer-zip", "zip"]], "PyAIter_Check": [[36, 3, 1, "c.PyAIter_Check", "o"]], "PyAnySet_Check": [[55, 3, 1, "c.PyAnySet_Check", "p"]], "PyAnySet_CheckExact": [[55, 3, 1, "c.PyAnySet_CheckExact", "p"]], "PyArg_Parse": [[5, 3, 1, "c.PyArg_Parse", "args"], [5, 3, 1, "c.PyArg_Parse", "format"]], "PyArg_ParseTuple": [[5, 3, 1, "c.PyArg_ParseTuple", "args"], [5, 3, 1, "c.PyArg_ParseTuple", "format"]], "PyArg_ParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "kw"]], "PyArg_UnpackTuple": [[5, 3, 1, "c.PyArg_UnpackTuple", "args"], [5, 3, 1, "c.PyArg_UnpackTuple", "max"], [5, 3, 1, "c.PyArg_UnpackTuple", "min"], [5, 3, 1, "c.PyArg_UnpackTuple", "name"]], "PyArg_VaParse": [[5, 3, 1, "c.PyArg_VaParse", "args"], [5, 3, 1, "c.PyArg_VaParse", "format"], [5, 3, 1, "c.PyArg_VaParse", "vargs"]], "PyArg_VaParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "kw"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "vargs"]], "PyAsyncMethods": [[63, 0, 1, "c.PyAsyncMethods.am_aiter", "am_aiter"], [63, 0, 1, "c.PyAsyncMethods.am_anext", "am_anext"], [63, 0, 1, "c.PyAsyncMethods.am_await", "am_await"], [63, 0, 1, "c.PyAsyncMethods.am_send", "am_send"]], "PyBool_Check": [[6, 3, 1, "c.PyBool_Check", "o"]], "PyBool_FromLong": [[6, 3, 1, "c.PyBool_FromLong", "v"]], "PyBufferProcs": [[63, 0, 1, "c.PyBufferProcs.bf_getbuffer", "bf_getbuffer"], [63, 0, 1, "c.PyBufferProcs.bf_releasebuffer", "bf_releasebuffer"]], "PyBuffer_FillContiguousStrides": [[7, 3, 1, "c.PyBuffer_FillContiguousStrides", "itemsize"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "ndims"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "order"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "shape"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "strides"]], "PyBuffer_FillInfo": [[7, 3, 1, "c.PyBuffer_FillInfo", "buf"], [7, 3, 1, "c.PyBuffer_FillInfo", "exporter"], [7, 3, 1, "c.PyBuffer_FillInfo", "flags"], [7, 3, 1, "c.PyBuffer_FillInfo", "len"], [7, 3, 1, "c.PyBuffer_FillInfo", "readonly"], [7, 3, 1, "c.PyBuffer_FillInfo", "view"]], "PyBuffer_FromContiguous": [[7, 3, 1, "c.PyBuffer_FromContiguous", "buf"], [7, 3, 1, "c.PyBuffer_FromContiguous", "fort"], [7, 3, 1, "c.PyBuffer_FromContiguous", "len"], [7, 3, 1, "c.PyBuffer_FromContiguous", "view"]], "PyBuffer_GetPointer": [[7, 3, 1, "c.PyBuffer_GetPointer", "indices"], [7, 3, 1, "c.PyBuffer_GetPointer", "view"]], "PyBuffer_IsContiguous": [[7, 3, 1, "c.PyBuffer_IsContiguous", "order"], [7, 3, 1, "c.PyBuffer_IsContiguous", "view"]], "PyBuffer_Release": [[7, 3, 1, "c.PyBuffer_Release", "view"]], "PyBuffer_SizeFromFormat": [[7, 3, 1, "c.PyBuffer_SizeFromFormat", "format"]], "PyBuffer_ToContiguous": [[7, 3, 1, "c.PyBuffer_ToContiguous", "buf"], [7, 3, 1, "c.PyBuffer_ToContiguous", "len"], [7, 3, 1, "c.PyBuffer_ToContiguous", "order"], [7, 3, 1, "c.PyBuffer_ToContiguous", "src"]], "PyByteArray_AS_STRING": [[8, 3, 1, "c.PyByteArray_AS_STRING", "bytearray"]], "PyByteArray_AsString": [[8, 3, 1, "c.PyByteArray_AsString", "bytearray"]], "PyByteArray_Check": [[8, 3, 1, "c.PyByteArray_Check", "o"]], "PyByteArray_CheckExact": [[8, 3, 1, "c.PyByteArray_CheckExact", "o"]], "PyByteArray_Concat": [[8, 3, 1, "c.PyByteArray_Concat", "a"], [8, 3, 1, "c.PyByteArray_Concat", "b"]], "PyByteArray_FromObject": [[8, 3, 1, "c.PyByteArray_FromObject", "o"]], "PyByteArray_FromStringAndSize": [[8, 3, 1, "c.PyByteArray_FromStringAndSize", "len"], [8, 3, 1, "c.PyByteArray_FromStringAndSize", "string"]], "PyByteArray_GET_SIZE": [[8, 3, 1, "c.PyByteArray_GET_SIZE", "bytearray"]], "PyByteArray_Resize": [[8, 3, 1, "c.PyByteArray_Resize", "bytearray"], [8, 3, 1, "c.PyByteArray_Resize", "len"]], "PyByteArray_Size": [[8, 3, 1, "c.PyByteArray_Size", "bytearray"]], "PyBytes_AS_STRING": [[9, 3, 1, "c.PyBytes_AS_STRING", "string"]], "PyBytes_AsString": [[9, 3, 1, "c.PyBytes_AsString", "o"]], "PyBytes_AsStringAndSize": [[9, 3, 1, "c.PyBytes_AsStringAndSize", "buffer"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "length"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "obj"]], "PyBytes_Check": [[9, 3, 1, "c.PyBytes_Check", "o"]], "PyBytes_CheckExact": [[9, 3, 1, "c.PyBytes_CheckExact", "o"]], "PyBytes_Concat": [[9, 3, 1, "c.PyBytes_Concat", "bytes"], [9, 3, 1, "c.PyBytes_Concat", "newpart"]], "PyBytes_ConcatAndDel": [[9, 3, 1, "c.PyBytes_ConcatAndDel", "bytes"], [9, 3, 1, "c.PyBytes_ConcatAndDel", "newpart"]], "PyBytes_FromFormat": [[9, 3, 1, "c.PyBytes_FromFormat", "format"]], "PyBytes_FromFormatV": [[9, 3, 1, "c.PyBytes_FromFormatV", "format"], [9, 3, 1, "c.PyBytes_FromFormatV", "vargs"]], "PyBytes_FromObject": [[9, 3, 1, "c.PyBytes_FromObject", "o"]], "PyBytes_FromString": [[9, 3, 1, "c.PyBytes_FromString", "v"]], "PyBytes_FromStringAndSize": [[9, 3, 1, "c.PyBytes_FromStringAndSize", "len"], [9, 3, 1, "c.PyBytes_FromStringAndSize", "v"]], "PyBytes_GET_SIZE": [[9, 3, 1, "c.PyBytes_GET_SIZE", "o"]], "PyBytes_Size": [[9, 3, 1, "c.PyBytes_Size", "o"]], "PyCFunction_New": [[58, 3, 1, "c.PyCFunction_New", "ml"], [58, 3, 1, "c.PyCFunction_New", "self"]], "PyCFunction_NewEx": [[58, 3, 1, "c.PyCFunction_NewEx", "ml"], [58, 3, 1, "c.PyCFunction_NewEx", "module"], [58, 3, 1, "c.PyCFunction_NewEx", "self"]], "PyCMethod_New": [[58, 3, 1, "c.PyCMethod_New", "cls"], [58, 3, 1, "c.PyCMethod_New", "ml"], [58, 3, 1, "c.PyCMethod_New", "module"], [58, 3, 1, "c.PyCMethod_New", "self"]], "PyCallIter_Check": [[37, 3, 1, "c.PyCallIter_Check", "op"]], "PyCallIter_New": [[37, 3, 1, "c.PyCallIter_New", "callable"], [37, 3, 1, "c.PyCallIter_New", "sentinel"]], "PyCallable_Check": [[10, 3, 1, "c.PyCallable_Check", "o"]], "PyCapsule_CheckExact": [[11, 3, 1, "c.PyCapsule_CheckExact", "p"]], "PyCapsule_GetContext": [[11, 3, 1, "c.PyCapsule_GetContext", "capsule"]], "PyCapsule_GetDestructor": [[11, 3, 1, "c.PyCapsule_GetDestructor", "capsule"]], "PyCapsule_GetName": [[11, 3, 1, "c.PyCapsule_GetName", "capsule"]], "PyCapsule_GetPointer": [[11, 3, 1, "c.PyCapsule_GetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_GetPointer", "name"]], "PyCapsule_Import": [[11, 3, 1, "c.PyCapsule_Import", "name"], [11, 3, 1, "c.PyCapsule_Import", "no_block"]], "PyCapsule_IsValid": [[11, 3, 1, "c.PyCapsule_IsValid", "capsule"], [11, 3, 1, "c.PyCapsule_IsValid", "name"]], "PyCapsule_New": [[11, 3, 1, "c.PyCapsule_New", "destructor"], [11, 3, 1, "c.PyCapsule_New", "name"], [11, 3, 1, "c.PyCapsule_New", "pointer"]], "PyCapsule_SetContext": [[11, 3, 1, "c.PyCapsule_SetContext", "capsule"], [11, 3, 1, "c.PyCapsule_SetContext", "context"]], "PyCapsule_SetDestructor": [[11, 3, 1, "c.PyCapsule_SetDestructor", "capsule"], [11, 3, 1, "c.PyCapsule_SetDestructor", "destructor"]], "PyCapsule_SetName": [[11, 3, 1, "c.PyCapsule_SetName", "capsule"], [11, 3, 1, "c.PyCapsule_SetName", "name"]], "PyCapsule_SetPointer": [[11, 3, 1, "c.PyCapsule_SetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_SetPointer", "pointer"]], "PyCell_Check": [[12, 3, 1, "c.PyCell_Check", "ob"]], "PyCell_GET": [[12, 3, 1, "c.PyCell_GET", "cell"]], "PyCell_Get": [[12, 3, 1, "c.PyCell_Get", "cell"]], "PyCell_New": [[12, 3, 1, "c.PyCell_New", "ob"]], "PyCell_SET": [[12, 3, 1, "c.PyCell_SET", "cell"], [12, 3, 1, "c.PyCell_SET", "value"]], "PyCell_Set": [[12, 3, 1, "c.PyCell_Set", "cell"], [12, 3, 1, "c.PyCell_Set", "value"]], "PyCode_AddWatcher": [[13, 3, 1, "c.PyCode_AddWatcher", "callback"]], "PyCode_Addr2Line": [[13, 3, 1, "c.PyCode_Addr2Line", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Line", "co"]], "PyCode_Addr2Location": [[13, 3, 1, "c.PyCode_Addr2Location", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Location", "co"], [13, 3, 1, "c.PyCode_Addr2Location", "end_column"], [13, 3, 1, "c.PyCode_Addr2Location", "end_line"], [13, 3, 1, "c.PyCode_Addr2Location", "start_column"], [13, 3, 1, "c.PyCode_Addr2Location", "start_line"]], "PyCode_Check": [[13, 3, 1, "c.PyCode_Check", "co"]], "PyCode_ClearWatcher": [[13, 3, 1, "c.PyCode_ClearWatcher", "watcher_id"]], "PyCode_GetCellvars": [[13, 3, 1, "c.PyCode_GetCellvars", "co"]], "PyCode_GetCode": [[13, 3, 1, "c.PyCode_GetCode", "co"]], "PyCode_GetFreevars": [[13, 3, 1, "c.PyCode_GetFreevars", "co"]], "PyCode_GetNumFree": [[13, 3, 1, "c.PyCode_GetNumFree", "co"]], "PyCode_GetVarnames": [[13, 3, 1, "c.PyCode_GetVarnames", "co"]], "PyCode_NewEmpty": [[13, 3, 1, "c.PyCode_NewEmpty", "filename"], [13, 3, 1, "c.PyCode_NewEmpty", "firstlineno"], [13, 3, 1, "c.PyCode_NewEmpty", "funcname"]], "PyCodec_BackslashReplaceErrors": [[14, 3, 1, "c.PyCodec_BackslashReplaceErrors", "exc"]], "PyCodec_Decode": [[14, 3, 1, "c.PyCodec_Decode", "encoding"], [14, 3, 1, "c.PyCodec_Decode", "errors"], [14, 3, 1, "c.PyCodec_Decode", "object"]], "PyCodec_Decoder": [[14, 3, 1, "c.PyCodec_Decoder", "encoding"]], "PyCodec_Encode": [[14, 3, 1, "c.PyCodec_Encode", "encoding"], [14, 3, 1, "c.PyCodec_Encode", "errors"], [14, 3, 1, "c.PyCodec_Encode", "object"]], "PyCodec_Encoder": [[14, 3, 1, "c.PyCodec_Encoder", "encoding"]], "PyCodec_IgnoreErrors": [[14, 3, 1, "c.PyCodec_IgnoreErrors", "exc"]], "PyCodec_IncrementalDecoder": [[14, 3, 1, "c.PyCodec_IncrementalDecoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalDecoder", "errors"]], "PyCodec_IncrementalEncoder": [[14, 3, 1, "c.PyCodec_IncrementalEncoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalEncoder", "errors"]], "PyCodec_KnownEncoding": [[14, 3, 1, "c.PyCodec_KnownEncoding", "encoding"]], "PyCodec_LookupError": [[14, 3, 1, "c.PyCodec_LookupError", "name"]], "PyCodec_NameReplaceErrors": [[14, 3, 1, "c.PyCodec_NameReplaceErrors", "exc"]], "PyCodec_Register": [[14, 3, 1, "c.PyCodec_Register", "search_function"]], "PyCodec_RegisterError": [[14, 3, 1, "c.PyCodec_RegisterError", "error"], [14, 3, 1, "c.PyCodec_RegisterError", "name"]], "PyCodec_ReplaceErrors": [[14, 3, 1, "c.PyCodec_ReplaceErrors", "exc"]], "PyCodec_StreamReader": [[14, 3, 1, "c.PyCodec_StreamReader", "encoding"], [14, 3, 1, "c.PyCodec_StreamReader", "errors"], [14, 3, 1, "c.PyCodec_StreamReader", "stream"]], "PyCodec_StreamWriter": [[14, 3, 1, "c.PyCodec_StreamWriter", "encoding"], [14, 3, 1, "c.PyCodec_StreamWriter", "errors"], [14, 3, 1, "c.PyCodec_StreamWriter", "stream"]], "PyCodec_StrictErrors": [[14, 3, 1, "c.PyCodec_StrictErrors", "exc"]], "PyCodec_Unregister": [[14, 3, 1, "c.PyCodec_Unregister", "search_function"]], "PyCodec_XMLCharRefReplaceErrors": [[14, 3, 1, "c.PyCodec_XMLCharRefReplaceErrors", "exc"]], "PyCompilerFlags": [[66, 0, 1, "c.PyCompilerFlags.cf_feature_version", "cf_feature_version"], [66, 0, 1, "c.PyCompilerFlags.cf_flags", "cf_flags"]], "PyComplex_AsCComplex": [[15, 3, 1, "c.PyComplex_AsCComplex", "op"]], "PyComplex_Check": [[15, 3, 1, "c.PyComplex_Check", "p"]], "PyComplex_CheckExact": [[15, 3, 1, "c.PyComplex_CheckExact", "p"]], "PyComplex_FromCComplex": [[15, 3, 1, "c.PyComplex_FromCComplex", "v"]], "PyComplex_FromDoubles": [[15, 3, 1, "c.PyComplex_FromDoubles", "imag"], [15, 3, 1, "c.PyComplex_FromDoubles", "real"]], "PyComplex_ImagAsDouble": [[15, 3, 1, "c.PyComplex_ImagAsDouble", "op"]], "PyComplex_RealAsDouble": [[15, 3, 1, "c.PyComplex_RealAsDouble", "op"]], "PyConfig": [[34, 0, 1, "c.PyConfig.argv", "argv"], [34, 0, 1, "c.PyConfig.base_exec_prefix", "base_exec_prefix"], [34, 0, 1, "c.PyConfig.base_executable", "base_executable"], [34, 0, 1, "c.PyConfig.base_prefix", "base_prefix"], [34, 0, 1, "c.PyConfig.buffered_stdio", "buffered_stdio"], [34, 0, 1, "c.PyConfig.bytes_warning", "bytes_warning"], [34, 0, 1, "c.PyConfig.check_hash_pycs_mode", "check_hash_pycs_mode"], [34, 0, 1, "c.PyConfig.code_debug_ranges", "code_debug_ranges"], [34, 0, 1, "c.PyConfig.configure_c_stdio", "configure_c_stdio"], [34, 0, 1, "c.PyConfig.dev_mode", "dev_mode"], [34, 0, 1, "c.PyConfig.dump_refs", "dump_refs"], [34, 0, 1, "c.PyConfig.exec_prefix", "exec_prefix"], [34, 0, 1, "c.PyConfig.executable", "executable"], [34, 0, 1, "c.PyConfig.faulthandler", "faulthandler"], [34, 0, 1, "c.PyConfig.filesystem_encoding", "filesystem_encoding"], [34, 0, 1, "c.PyConfig.filesystem_errors", "filesystem_errors"], [34, 0, 1, "c.PyConfig.hash_seed", "hash_seed"], [34, 0, 1, "c.PyConfig.home", "home"], [34, 0, 1, "c.PyConfig.import_time", "import_time"], [34, 0, 1, "c.PyConfig.inspect", "inspect"], [34, 0, 1, "c.PyConfig.install_signal_handlers", "install_signal_handlers"], [34, 0, 1, "c.PyConfig.int_max_str_digits", "int_max_str_digits"], [34, 0, 1, "c.PyConfig.interactive", "interactive"], [34, 0, 1, "c.PyConfig.isolated", "isolated"], [34, 0, 1, "c.PyConfig.legacy_windows_stdio", "legacy_windows_stdio"], [34, 0, 1, "c.PyConfig.malloc_stats", "malloc_stats"], [34, 0, 1, "c.PyConfig.module_search_paths", "module_search_paths"], [34, 0, 1, "c.PyConfig.module_search_paths_set", "module_search_paths_set"], [34, 0, 1, "c.PyConfig.optimization_level", "optimization_level"], [34, 0, 1, "c.PyConfig.orig_argv", "orig_argv"], [34, 0, 1, "c.PyConfig.parse_argv", "parse_argv"], [34, 0, 1, "c.PyConfig.parser_debug", "parser_debug"], [34, 0, 1, "c.PyConfig.pathconfig_warnings", "pathconfig_warnings"], [34, 0, 1, "c.PyConfig.perf_profiling", "perf_profiling"], [34, 0, 1, "c.PyConfig.platlibdir", "platlibdir"], [34, 0, 1, "c.PyConfig.prefix", "prefix"], [34, 0, 1, "c.PyConfig.program_name", "program_name"], [34, 0, 1, "c.PyConfig.pycache_prefix", "pycache_prefix"], [34, 0, 1, "c.PyConfig.pythonpath_env", "pythonpath_env"], [34, 0, 1, "c.PyConfig.quiet", "quiet"], [34, 0, 1, "c.PyConfig.run_command", "run_command"], [34, 0, 1, "c.PyConfig.run_filename", "run_filename"], [34, 0, 1, "c.PyConfig.run_module", "run_module"], [34, 0, 1, "c.PyConfig.safe_path", "safe_path"], [34, 0, 1, "c.PyConfig.show_ref_count", "show_ref_count"], [34, 0, 1, "c.PyConfig.site_import", "site_import"], [34, 0, 1, "c.PyConfig.skip_source_first_line", "skip_source_first_line"], [34, 0, 1, "c.PyConfig.stdio_encoding", "stdio_encoding"], [34, 0, 1, "c.PyConfig.stdio_errors", "stdio_errors"], [34, 0, 1, "c.PyConfig.tracemalloc", "tracemalloc"], [34, 0, 1, "c.PyConfig.use_environment", "use_environment"], [34, 0, 1, "c.PyConfig.use_hash_seed", "use_hash_seed"], [34, 0, 1, "c.PyConfig.user_site_directory", "user_site_directory"], [34, 0, 1, "c.PyConfig.verbose", "verbose"], [34, 0, 1, "c.PyConfig.warn_default_encoding", "warn_default_encoding"], [34, 0, 1, "c.PyConfig.warnoptions", "warnoptions"], [34, 0, 1, "c.PyConfig.write_bytecode", "write_bytecode"], [34, 0, 1, "c.PyConfig.xoptions", "xoptions"]], "PyConfig_Clear": [[34, 3, 1, "c.PyConfig_Clear", "config"]], "PyConfig_InitIsolatedConfig": [[34, 3, 1, "c.PyConfig_InitIsolatedConfig", "config"]], "PyConfig_InitPythonConfig": [[34, 3, 1, "c.PyConfig_InitPythonConfig", "config"]], "PyConfig_Read": [[34, 3, 1, "c.PyConfig_Read", "config"]], "PyConfig_SetArgv": [[34, 3, 1, "c.PyConfig_SetArgv", "argc"], [34, 3, 1, "c.PyConfig_SetArgv", "argv"], [34, 3, 1, "c.PyConfig_SetArgv", "config"]], "PyConfig_SetBytesArgv": [[34, 3, 1, "c.PyConfig_SetBytesArgv", "argc"], [34, 3, 1, "c.PyConfig_SetBytesArgv", "argv"], [34, 3, 1, "c.PyConfig_SetBytesArgv", "config"]], "PyConfig_SetBytesString": [[34, 3, 1, "c.PyConfig_SetBytesString", "config"], [34, 3, 1, "c.PyConfig_SetBytesString", "config_str"], [34, 3, 1, "c.PyConfig_SetBytesString", "str"]], "PyConfig_SetString": [[34, 3, 1, "c.PyConfig_SetString", "config"], [34, 3, 1, "c.PyConfig_SetString", "config_str"], [34, 3, 1, "c.PyConfig_SetString", "str"]], "PyConfig_SetWideStringList": [[34, 3, 1, "c.PyConfig_SetWideStringList", "config"], [34, 3, 1, "c.PyConfig_SetWideStringList", "items"], [34, 3, 1, "c.PyConfig_SetWideStringList", "length"], [34, 3, 1, "c.PyConfig_SetWideStringList", "list"]], "PyContextToken_CheckExact": [[17, 3, 1, "c.PyContextToken_CheckExact", "o"]], "PyContextVar_CheckExact": [[17, 3, 1, "c.PyContextVar_CheckExact", "o"]], "PyContextVar_Get": [[17, 3, 1, "c.PyContextVar_Get", "default_value"], [17, 3, 1, "c.PyContextVar_Get", "value"], [17, 3, 1, "c.PyContextVar_Get", "var"]], "PyContextVar_New": [[17, 3, 1, "c.PyContextVar_New", "def"], [17, 3, 1, "c.PyContextVar_New", "name"]], "PyContextVar_Reset": [[17, 3, 1, "c.PyContextVar_Reset", "token"], [17, 3, 1, "c.PyContextVar_Reset", "var"]], "PyContextVar_Set": [[17, 3, 1, "c.PyContextVar_Set", "value"], [17, 3, 1, "c.PyContextVar_Set", "var"]], "PyContext_CheckExact": [[17, 3, 1, "c.PyContext_CheckExact", "o"]], "PyContext_Copy": [[17, 3, 1, "c.PyContext_Copy", "ctx"]], "PyContext_Enter": [[17, 3, 1, "c.PyContext_Enter", "ctx"]], "PyContext_Exit": [[17, 3, 1, "c.PyContext_Exit", "ctx"]], "PyCoro_CheckExact": [[19, 3, 1, "c.PyCoro_CheckExact", "ob"]], "PyCoro_New": [[19, 3, 1, "c.PyCoro_New", "frame"], [19, 3, 1, "c.PyCoro_New", "name"], [19, 3, 1, "c.PyCoro_New", "qualname"]], "PyDateTime_Check": [[20, 3, 1, "c.PyDateTime_Check", "ob"]], "PyDateTime_CheckExact": [[20, 3, 1, "c.PyDateTime_CheckExact", "ob"]], "PyDateTime_DATE_GET_FOLD": [[20, 3, 1, "c.PyDateTime_DATE_GET_FOLD", "o"]], "PyDateTime_DATE_GET_HOUR": [[20, 3, 1, "c.PyDateTime_DATE_GET_HOUR", "o"]], "PyDateTime_DATE_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "o"]], "PyDateTime_DATE_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_DATE_GET_MINUTE", "o"]], "PyDateTime_DATE_GET_SECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_SECOND", "o"]], "PyDateTime_DATE_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_DATE_GET_TZINFO", "o"]], "PyDateTime_DELTA_GET_DAYS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_DAYS", "o"]], "PyDateTime_DELTA_GET_MICROSECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "o"]], "PyDateTime_DELTA_GET_SECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_SECONDS", "o"]], "PyDateTime_FromDateAndTime": [[20, 3, 1, "c.PyDateTime_FromDateAndTime", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "year"]], "PyDateTime_FromDateAndTimeAndFold": [[20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "fold"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "year"]], "PyDateTime_FromTimestamp": [[20, 3, 1, "c.PyDateTime_FromTimestamp", "args"]], "PyDateTime_GET_DAY": [[20, 3, 1, "c.PyDateTime_GET_DAY", "o"]], "PyDateTime_GET_MONTH": [[20, 3, 1, "c.PyDateTime_GET_MONTH", "o"]], "PyDateTime_GET_YEAR": [[20, 3, 1, "c.PyDateTime_GET_YEAR", "o"]], "PyDateTime_TIME_GET_FOLD": [[20, 3, 1, "c.PyDateTime_TIME_GET_FOLD", "o"]], "PyDateTime_TIME_GET_HOUR": [[20, 3, 1, "c.PyDateTime_TIME_GET_HOUR", "o"]], "PyDateTime_TIME_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "o"]], "PyDateTime_TIME_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_TIME_GET_MINUTE", "o"]], "PyDateTime_TIME_GET_SECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_SECOND", "o"]], "PyDateTime_TIME_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_TIME_GET_TZINFO", "o"]], "PyDate_Check": [[20, 3, 1, "c.PyDate_Check", "ob"]], "PyDate_CheckExact": [[20, 3, 1, "c.PyDate_CheckExact", "ob"]], "PyDate_FromDate": [[20, 3, 1, "c.PyDate_FromDate", "day"], [20, 3, 1, "c.PyDate_FromDate", "month"], [20, 3, 1, "c.PyDate_FromDate", "year"]], "PyDate_FromTimestamp": [[20, 3, 1, "c.PyDate_FromTimestamp", "args"]], "PyDelta_Check": [[20, 3, 1, "c.PyDelta_Check", "ob"]], "PyDelta_CheckExact": [[20, 3, 1, "c.PyDelta_CheckExact", "ob"]], "PyDelta_FromDSU": [[20, 3, 1, "c.PyDelta_FromDSU", "days"], [20, 3, 1, "c.PyDelta_FromDSU", "seconds"], [20, 3, 1, "c.PyDelta_FromDSU", "useconds"]], "PyDescr_IsData": [[21, 3, 1, "c.PyDescr_IsData", "descr"]], "PyDescr_NewClassMethod": [[21, 3, 1, "c.PyDescr_NewClassMethod", "method"], [21, 3, 1, "c.PyDescr_NewClassMethod", "type"]], "PyDescr_NewGetSet": [[21, 3, 1, "c.PyDescr_NewGetSet", "getset"], [21, 3, 1, "c.PyDescr_NewGetSet", "type"]], "PyDescr_NewMember": [[21, 3, 1, "c.PyDescr_NewMember", "meth"], [21, 3, 1, "c.PyDescr_NewMember", "type"]], "PyDescr_NewMethod": [[21, 3, 1, "c.PyDescr_NewMethod", "meth"], [21, 3, 1, "c.PyDescr_NewMethod", "type"]], "PyDescr_NewWrapper": [[21, 3, 1, "c.PyDescr_NewWrapper", "type"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapped"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapper"]], "PyDictProxy_New": [[22, 3, 1, "c.PyDictProxy_New", "mapping"]], "PyDict_AddWatcher": [[22, 3, 1, "c.PyDict_AddWatcher", "callback"]], "PyDict_Check": [[22, 3, 1, "c.PyDict_Check", "p"]], "PyDict_CheckExact": [[22, 3, 1, "c.PyDict_CheckExact", "p"]], "PyDict_Clear": [[22, 3, 1, "c.PyDict_Clear", "p"]], "PyDict_ClearWatcher": [[22, 3, 1, "c.PyDict_ClearWatcher", "watcher_id"]], "PyDict_Contains": [[22, 3, 1, "c.PyDict_Contains", "key"], [22, 3, 1, "c.PyDict_Contains", "p"]], "PyDict_Copy": [[22, 3, 1, "c.PyDict_Copy", "p"]], "PyDict_DelItem": [[22, 3, 1, "c.PyDict_DelItem", "key"], [22, 3, 1, "c.PyDict_DelItem", "p"]], "PyDict_DelItemString": [[22, 3, 1, "c.PyDict_DelItemString", "key"], [22, 3, 1, "c.PyDict_DelItemString", "p"]], "PyDict_GetItem": [[22, 3, 1, "c.PyDict_GetItem", "key"], [22, 3, 1, "c.PyDict_GetItem", "p"]], "PyDict_GetItemString": [[22, 3, 1, "c.PyDict_GetItemString", "key"], [22, 3, 1, "c.PyDict_GetItemString", "p"]], "PyDict_GetItemWithError": [[22, 3, 1, "c.PyDict_GetItemWithError", "key"], [22, 3, 1, "c.PyDict_GetItemWithError", "p"]], "PyDict_Items": [[22, 3, 1, "c.PyDict_Items", "p"]], "PyDict_Keys": [[22, 3, 1, "c.PyDict_Keys", "p"]], "PyDict_Merge": [[22, 3, 1, "c.PyDict_Merge", "a"], [22, 3, 1, "c.PyDict_Merge", "b"], [22, 3, 1, "c.PyDict_Merge", "override"]], "PyDict_MergeFromSeq2": [[22, 3, 1, "c.PyDict_MergeFromSeq2", "a"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "override"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "seq2"]], "PyDict_Next": [[22, 3, 1, "c.PyDict_Next", "p"], [22, 3, 1, "c.PyDict_Next", "pkey"], [22, 3, 1, "c.PyDict_Next", "ppos"], [22, 3, 1, "c.PyDict_Next", "pvalue"]], "PyDict_SetDefault": [[22, 3, 1, "c.PyDict_SetDefault", "defaultobj"], [22, 3, 1, "c.PyDict_SetDefault", "key"], [22, 3, 1, "c.PyDict_SetDefault", "p"]], "PyDict_SetItem": [[22, 3, 1, "c.PyDict_SetItem", "key"], [22, 3, 1, "c.PyDict_SetItem", "p"], [22, 3, 1, "c.PyDict_SetItem", "val"]], "PyDict_SetItemString": [[22, 3, 1, "c.PyDict_SetItemString", "key"], [22, 3, 1, "c.PyDict_SetItemString", "p"], [22, 3, 1, "c.PyDict_SetItemString", "val"]], "PyDict_Size": [[22, 3, 1, "c.PyDict_Size", "p"]], "PyDict_Unwatch": [[22, 3, 1, "c.PyDict_Unwatch", "dict"], [22, 3, 1, "c.PyDict_Unwatch", "watcher_id"]], "PyDict_Update": [[22, 3, 1, "c.PyDict_Update", "a"], [22, 3, 1, "c.PyDict_Update", "b"]], "PyDict_Values": [[22, 3, 1, "c.PyDict_Values", "p"]], "PyDict_Watch": [[22, 3, 1, "c.PyDict_Watch", "dict"], [22, 3, 1, "c.PyDict_Watch", "watcher_id"]], "PyErr_DisplayException": [[23, 3, 1, "c.PyErr_DisplayException", "exc"]], "PyErr_ExceptionMatches": [[23, 3, 1, "c.PyErr_ExceptionMatches", "exc"]], "PyErr_Fetch": [[23, 3, 1, "c.PyErr_Fetch", "ptraceback"], [23, 3, 1, "c.PyErr_Fetch", "ptype"], [23, 3, 1, "c.PyErr_Fetch", "pvalue"]], "PyErr_Format": [[23, 3, 1, "c.PyErr_Format", "exception"], [23, 3, 1, "c.PyErr_Format", "format"]], "PyErr_FormatV": [[23, 3, 1, "c.PyErr_FormatV", "exception"], [23, 3, 1, "c.PyErr_FormatV", "format"], [23, 3, 1, "c.PyErr_FormatV", "vargs"]], "PyErr_GetExcInfo": [[23, 3, 1, "c.PyErr_GetExcInfo", "ptraceback"], [23, 3, 1, "c.PyErr_GetExcInfo", "ptype"], [23, 3, 1, "c.PyErr_GetExcInfo", "pvalue"]], "PyErr_GivenExceptionMatches": [[23, 3, 1, "c.PyErr_GivenExceptionMatches", "exc"], [23, 3, 1, "c.PyErr_GivenExceptionMatches", "given"]], "PyErr_NewException": [[23, 3, 1, "c.PyErr_NewException", "base"], [23, 3, 1, "c.PyErr_NewException", "dict"], [23, 3, 1, "c.PyErr_NewException", "name"]], "PyErr_NewExceptionWithDoc": [[23, 3, 1, "c.PyErr_NewExceptionWithDoc", "base"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "dict"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "doc"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "name"]], "PyErr_NormalizeException": [[23, 3, 1, "c.PyErr_NormalizeException", "exc"], [23, 3, 1, "c.PyErr_NormalizeException", "tb"], [23, 3, 1, "c.PyErr_NormalizeException", "val"]], "PyErr_PrintEx": [[23, 3, 1, "c.PyErr_PrintEx", "set_sys_last_vars"]], "PyErr_ResourceWarning": [[23, 3, 1, "c.PyErr_ResourceWarning", "format"], [23, 3, 1, "c.PyErr_ResourceWarning", "source"], [23, 3, 1, "c.PyErr_ResourceWarning", "stack_level"]], "PyErr_Restore": [[23, 3, 1, "c.PyErr_Restore", "traceback"], [23, 3, 1, "c.PyErr_Restore", "type"], [23, 3, 1, "c.PyErr_Restore", "value"]], "PyErr_SetExcFromWindowsErr": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "type"]], "PyErr_SetExcFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObject": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename2"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "type"]], "PyErr_SetExcInfo": [[23, 3, 1, "c.PyErr_SetExcInfo", "traceback"], [23, 3, 1, "c.PyErr_SetExcInfo", "type"], [23, 3, 1, "c.PyErr_SetExcInfo", "value"]], "PyErr_SetFromErrno": [[23, 3, 1, "c.PyErr_SetFromErrno", "type"]], "PyErr_SetFromErrnoWithFilename": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "type"]], "PyErr_SetFromErrnoWithFilenameObject": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "type"]], "PyErr_SetFromErrnoWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject2"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "type"]], "PyErr_SetFromWindowsErr": [[23, 3, 1, "c.PyErr_SetFromWindowsErr", "ierr"]], "PyErr_SetFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "ierr"]], "PyErr_SetHandledException": [[23, 3, 1, "c.PyErr_SetHandledException", "exc"]], "PyErr_SetImportError": [[23, 3, 1, "c.PyErr_SetImportError", "msg"], [23, 3, 1, "c.PyErr_SetImportError", "name"], [23, 3, 1, "c.PyErr_SetImportError", "path"]], "PyErr_SetImportErrorSubclass": [[23, 3, 1, "c.PyErr_SetImportErrorSubclass", "exception"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "msg"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "name"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "path"]], "PyErr_SetInterruptEx": [[23, 3, 1, "c.PyErr_SetInterruptEx", "signum"]], "PyErr_SetNone": [[23, 3, 1, "c.PyErr_SetNone", "type"]], "PyErr_SetObject": [[23, 3, 1, "c.PyErr_SetObject", "type"], [23, 3, 1, "c.PyErr_SetObject", "value"]], "PyErr_SetRaisedException": [[23, 3, 1, "c.PyErr_SetRaisedException", "exc"]], "PyErr_SetString": [[23, 3, 1, "c.PyErr_SetString", "message"], [23, 3, 1, "c.PyErr_SetString", "type"]], "PyErr_SyntaxLocation": [[23, 3, 1, "c.PyErr_SyntaxLocation", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocation", "lineno"]], "PyErr_SyntaxLocationEx": [[23, 3, 1, "c.PyErr_SyntaxLocationEx", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "lineno"]], "PyErr_SyntaxLocationObject": [[23, 3, 1, "c.PyErr_SyntaxLocationObject", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "lineno"]], "PyErr_WarnEx": [[23, 3, 1, "c.PyErr_WarnEx", "category"], [23, 3, 1, "c.PyErr_WarnEx", "message"], [23, 3, 1, "c.PyErr_WarnEx", "stack_level"]], "PyErr_WarnExplicit": [[23, 3, 1, "c.PyErr_WarnExplicit", "category"], [23, 3, 1, "c.PyErr_WarnExplicit", "filename"], [23, 3, 1, "c.PyErr_WarnExplicit", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicit", "message"], [23, 3, 1, "c.PyErr_WarnExplicit", "module"], [23, 3, 1, "c.PyErr_WarnExplicit", "registry"]], "PyErr_WarnExplicitObject": [[23, 3, 1, "c.PyErr_WarnExplicitObject", "category"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "filename"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "message"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "module"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "registry"]], "PyErr_WarnFormat": [[23, 3, 1, "c.PyErr_WarnFormat", "category"], [23, 3, 1, "c.PyErr_WarnFormat", "format"], [23, 3, 1, "c.PyErr_WarnFormat", "stack_level"]], "PyErr_WriteUnraisable": [[23, 3, 1, "c.PyErr_WriteUnraisable", "obj"]], "PyEval_AcquireThread": [[33, 3, 1, "c.PyEval_AcquireThread", "tstate"]], "PyEval_EvalCode": [[66, 3, 1, "c.PyEval_EvalCode", "co"], [66, 3, 1, "c.PyEval_EvalCode", "globals"], [66, 3, 1, "c.PyEval_EvalCode", "locals"]], "PyEval_EvalCodeEx": [[66, 3, 1, "c.PyEval_EvalCodeEx", "argcount"], [66, 3, 1, "c.PyEval_EvalCodeEx", "args"], [66, 3, 1, "c.PyEval_EvalCodeEx", "closure"], [66, 3, 1, "c.PyEval_EvalCodeEx", "co"], [66, 3, 1, "c.PyEval_EvalCodeEx", "defcount"], [66, 3, 1, "c.PyEval_EvalCodeEx", "defs"], [66, 3, 1, "c.PyEval_EvalCodeEx", "globals"], [66, 3, 1, "c.PyEval_EvalCodeEx", "kwcount"], [66, 3, 1, "c.PyEval_EvalCodeEx", "kwdefs"], [66, 3, 1, "c.PyEval_EvalCodeEx", "kws"], [66, 3, 1, "c.PyEval_EvalCodeEx", "locals"]], "PyEval_EvalFrame": [[66, 3, 1, "c.PyEval_EvalFrame", "f"]], "PyEval_EvalFrameEx": [[66, 3, 1, "c.PyEval_EvalFrameEx", "f"], [66, 3, 1, "c.PyEval_EvalFrameEx", "throwflag"]], "PyEval_GetFuncDesc": [[53, 3, 1, "c.PyEval_GetFuncDesc", "func"]], "PyEval_GetFuncName": [[53, 3, 1, "c.PyEval_GetFuncName", "func"]], "PyEval_MergeCompilerFlags": [[66, 3, 1, "c.PyEval_MergeCompilerFlags", "cf"]], "PyEval_ReleaseThread": [[33, 3, 1, "c.PyEval_ReleaseThread", "tstate"]], "PyEval_RestoreThread": [[33, 3, 1, "c.PyEval_RestoreThread", "tstate"]], "PyEval_SetProfile": [[33, 3, 1, "c.PyEval_SetProfile", "func"], [33, 3, 1, "c.PyEval_SetProfile", "obj"]], "PyEval_SetProfileAllThreads": [[33, 3, 1, "c.PyEval_SetProfileAllThreads", "func"], [33, 3, 1, "c.PyEval_SetProfileAllThreads", "obj"]], "PyEval_SetTrace": [[33, 3, 1, "c.PyEval_SetTrace", "func"], [33, 3, 1, "c.PyEval_SetTrace", "obj"]], "PyEval_SetTraceAllThreads": [[33, 3, 1, "c.PyEval_SetTraceAllThreads", "func"], [33, 3, 1, "c.PyEval_SetTraceAllThreads", "obj"]], "PyException_GetArgs": [[23, 3, 1, "c.PyException_GetArgs", "ex"]], "PyException_GetCause": [[23, 3, 1, "c.PyException_GetCause", "ex"]], "PyException_GetContext": [[23, 3, 1, "c.PyException_GetContext", "ex"]], "PyException_GetTraceback": [[23, 3, 1, "c.PyException_GetTraceback", "ex"]], "PyException_SetArgs": [[23, 3, 1, "c.PyException_SetArgs", "args"], [23, 3, 1, "c.PyException_SetArgs", "ex"]], "PyException_SetCause": [[23, 3, 1, "c.PyException_SetCause", "cause"], [23, 3, 1, "c.PyException_SetCause", "ex"]], "PyException_SetContext": [[23, 3, 1, "c.PyException_SetContext", "ctx"], [23, 3, 1, "c.PyException_SetContext", "ex"]], "PyException_SetTraceback": [[23, 3, 1, "c.PyException_SetTraceback", "ex"], [23, 3, 1, "c.PyException_SetTraceback", "tb"]], "PyFile_FromFd": [[24, 3, 1, "c.PyFile_FromFd", "buffering"], [24, 3, 1, "c.PyFile_FromFd", "closefd"], [24, 3, 1, "c.PyFile_FromFd", "encoding"], [24, 3, 1, "c.PyFile_FromFd", "errors"], [24, 3, 1, "c.PyFile_FromFd", "fd"], [24, 3, 1, "c.PyFile_FromFd", "mode"], [24, 3, 1, "c.PyFile_FromFd", "name"], [24, 3, 1, "c.PyFile_FromFd", "newline"]], "PyFile_GetLine": [[24, 3, 1, "c.PyFile_GetLine", "n"], [24, 3, 1, "c.PyFile_GetLine", "p"]], "PyFile_SetOpenCodeHook": [[24, 4, 1, "c.PyFile_SetOpenCodeHook.Py_OpenCodeHookFunction", "Py_OpenCodeHookFunction"], [24, 3, 1, "c.PyFile_SetOpenCodeHook", "handler"]], "PyFile_WriteObject": [[24, 3, 1, "c.PyFile_WriteObject", "flags"], [24, 3, 1, "c.PyFile_WriteObject", "obj"], [24, 3, 1, "c.PyFile_WriteObject", "p"]], "PyFile_WriteString": [[24, 3, 1, "c.PyFile_WriteString", "p"], [24, 3, 1, "c.PyFile_WriteString", "s"]], "PyFloat_AS_DOUBLE": [[25, 3, 1, "c.PyFloat_AS_DOUBLE", "pyfloat"]], "PyFloat_AsDouble": [[25, 3, 1, "c.PyFloat_AsDouble", "pyfloat"]], "PyFloat_Check": [[25, 3, 1, "c.PyFloat_Check", "p"]], "PyFloat_CheckExact": [[25, 3, 1, "c.PyFloat_CheckExact", "p"]], "PyFloat_FromDouble": [[25, 3, 1, "c.PyFloat_FromDouble", "v"]], "PyFloat_FromString": [[25, 3, 1, "c.PyFloat_FromString", "str"]], "PyFloat_Pack2": [[25, 3, 1, "c.PyFloat_Pack2", "le"], [25, 3, 1, "c.PyFloat_Pack2", "p"], [25, 3, 1, "c.PyFloat_Pack2", "x"]], "PyFloat_Pack4": [[25, 3, 1, "c.PyFloat_Pack4", "le"], [25, 3, 1, "c.PyFloat_Pack4", "p"], [25, 3, 1, "c.PyFloat_Pack4", "x"]], "PyFloat_Pack8": [[25, 3, 1, "c.PyFloat_Pack8", "le"], [25, 3, 1, "c.PyFloat_Pack8", "p"], [25, 3, 1, "c.PyFloat_Pack8", "x"]], "PyFloat_Unpack2": [[25, 3, 1, "c.PyFloat_Unpack2", "le"], [25, 3, 1, "c.PyFloat_Unpack2", "p"]], "PyFloat_Unpack4": [[25, 3, 1, "c.PyFloat_Unpack4", "le"], [25, 3, 1, "c.PyFloat_Unpack4", "p"]], "PyFloat_Unpack8": [[25, 3, 1, "c.PyFloat_Unpack8", "le"], [25, 3, 1, "c.PyFloat_Unpack8", "p"]], "PyFrame_Check": [[26, 3, 1, "c.PyFrame_Check", "obj"]], "PyFrame_GetBack": [[26, 3, 1, "c.PyFrame_GetBack", "frame"]], "PyFrame_GetBuiltins": [[26, 3, 1, "c.PyFrame_GetBuiltins", "frame"]], "PyFrame_GetCode": [[26, 3, 1, "c.PyFrame_GetCode", "frame"]], "PyFrame_GetGenerator": [[26, 3, 1, "c.PyFrame_GetGenerator", "frame"]], "PyFrame_GetGlobals": [[26, 3, 1, "c.PyFrame_GetGlobals", "frame"]], "PyFrame_GetLasti": [[26, 3, 1, "c.PyFrame_GetLasti", "frame"]], "PyFrame_GetLineNumber": [[26, 3, 1, "c.PyFrame_GetLineNumber", "frame"]], "PyFrame_GetLocals": [[26, 3, 1, "c.PyFrame_GetLocals", "frame"]], "PyFrame_GetVar": [[26, 3, 1, "c.PyFrame_GetVar", "frame"], [26, 3, 1, "c.PyFrame_GetVar", "name"]], "PyFrame_GetVarString": [[26, 3, 1, "c.PyFrame_GetVarString", "frame"], [26, 3, 1, "c.PyFrame_GetVarString", "name"]], "PyFrozenSet_Check": [[55, 3, 1, "c.PyFrozenSet_Check", "p"]], "PyFrozenSet_CheckExact": [[55, 3, 1, "c.PyFrozenSet_CheckExact", "p"]], "PyFrozenSet_New": [[55, 3, 1, "c.PyFrozenSet_New", "iterable"]], "PyFunction_AddWatcher": [[27, 3, 1, "c.PyFunction_AddWatcher", "callback"]], "PyFunction_Check": [[27, 3, 1, "c.PyFunction_Check", "o"]], "PyFunction_ClearWatcher": [[27, 3, 1, "c.PyFunction_ClearWatcher", "watcher_id"]], "PyFunction_GetAnnotations": [[27, 3, 1, "c.PyFunction_GetAnnotations", "op"]], "PyFunction_GetClosure": [[27, 3, 1, "c.PyFunction_GetClosure", "op"]], "PyFunction_GetCode": [[27, 3, 1, "c.PyFunction_GetCode", "op"]], "PyFunction_GetDefaults": [[27, 3, 1, "c.PyFunction_GetDefaults", "op"]], "PyFunction_GetGlobals": [[27, 3, 1, "c.PyFunction_GetGlobals", "op"]], "PyFunction_GetModule": [[27, 3, 1, "c.PyFunction_GetModule", "op"]], "PyFunction_New": [[27, 3, 1, "c.PyFunction_New", "code"], [27, 3, 1, "c.PyFunction_New", "globals"]], "PyFunction_NewWithQualName": [[27, 3, 1, "c.PyFunction_NewWithQualName", "code"], [27, 3, 1, "c.PyFunction_NewWithQualName", "globals"], [27, 3, 1, "c.PyFunction_NewWithQualName", "qualname"]], "PyFunction_SetAnnotations": [[27, 3, 1, "c.PyFunction_SetAnnotations", "annotations"], [27, 3, 1, "c.PyFunction_SetAnnotations", "op"]], "PyFunction_SetClosure": [[27, 3, 1, "c.PyFunction_SetClosure", "closure"], [27, 3, 1, "c.PyFunction_SetClosure", "op"]], "PyFunction_SetDefaults": [[27, 3, 1, "c.PyFunction_SetDefaults", "defaults"], [27, 3, 1, "c.PyFunction_SetDefaults", "op"]], "PyFunction_SetVectorcall": [[27, 3, 1, "c.PyFunction_SetVectorcall", "func"], [27, 3, 1, "c.PyFunction_SetVectorcall", "vectorcall"]], "PyGen_Check": [[29, 3, 1, "c.PyGen_Check", "ob"]], "PyGen_CheckExact": [[29, 3, 1, "c.PyGen_CheckExact", "ob"]], "PyGen_New": [[29, 3, 1, "c.PyGen_New", "frame"]], "PyGen_NewWithQualName": [[29, 3, 1, "c.PyGen_NewWithQualName", "frame"], [29, 3, 1, "c.PyGen_NewWithQualName", "name"], [29, 3, 1, "c.PyGen_NewWithQualName", "qualname"]], "PyGetSetDef": [[58, 0, 1, "c.PyGetSetDef.closure", "closure"], [58, 0, 1, "c.PyGetSetDef.doc", "doc"], [58, 0, 1, "c.PyGetSetDef.get", "get"], [58, 0, 1, "c.PyGetSetDef.name", "name"], [58, 0, 1, "c.PyGetSetDef.set", "set"]], "PyHash_FuncDef": [[30, 0, 1, "c.PyHash_FuncDef.hash_bits", "hash_bits"], [30, 0, 1, "c.PyHash_FuncDef.name", "name"], [30, 0, 1, "c.PyHash_FuncDef.seed_bits", "seed_bits"]], "PyImport_AddModule": [[31, 3, 1, "c.PyImport_AddModule", "name"]], "PyImport_AddModuleObject": [[31, 3, 1, "c.PyImport_AddModuleObject", "name"]], "PyImport_AppendInittab": [[31, 3, 1, "c.PyImport_AppendInittab", "initfunc"], [31, 3, 1, "c.PyImport_AppendInittab", "name"]], "PyImport_ExecCodeModule": [[31, 3, 1, "c.PyImport_ExecCodeModule", "co"], [31, 3, 1, "c.PyImport_ExecCodeModule", "name"]], "PyImport_ExecCodeModuleEx": [[31, 3, 1, "c.PyImport_ExecCodeModuleEx", "co"], [31, 3, 1, "c.PyImport_ExecCodeModuleEx", "name"], [31, 3, 1, "c.PyImport_ExecCodeModuleEx", "pathname"]], "PyImport_ExecCodeModuleObject": [[31, 3, 1, "c.PyImport_ExecCodeModuleObject", "co"], [31, 3, 1, "c.PyImport_ExecCodeModuleObject", "cpathname"], [31, 3, 1, "c.PyImport_ExecCodeModuleObject", "name"], [31, 3, 1, "c.PyImport_ExecCodeModuleObject", "pathname"]], "PyImport_ExecCodeModuleWithPathnames": [[31, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "co"], [31, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "cpathname"], [31, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "name"], [31, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "pathname"]], "PyImport_ExtendInittab": [[31, 3, 1, "c.PyImport_ExtendInittab", "newtab"]], "PyImport_GetImporter": [[31, 3, 1, "c.PyImport_GetImporter", "path"]], "PyImport_GetModule": [[31, 3, 1, "c.PyImport_GetModule", "name"]], "PyImport_Import": [[31, 3, 1, "c.PyImport_Import", "name"]], "PyImport_ImportFrozenModule": [[31, 3, 1, "c.PyImport_ImportFrozenModule", "name"]], "PyImport_ImportFrozenModuleObject": [[31, 3, 1, "c.PyImport_ImportFrozenModuleObject", "name"]], "PyImport_ImportModule": [[31, 3, 1, "c.PyImport_ImportModule", "name"]], "PyImport_ImportModuleEx": [[31, 3, 1, "c.PyImport_ImportModuleEx", "fromlist"], [31, 3, 1, "c.PyImport_ImportModuleEx", "globals"], [31, 3, 1, "c.PyImport_ImportModuleEx", "locals"], [31, 3, 1, "c.PyImport_ImportModuleEx", "name"]], "PyImport_ImportModuleLevel": [[31, 3, 1, "c.PyImport_ImportModuleLevel", "fromlist"], [31, 3, 1, "c.PyImport_ImportModuleLevel", "globals"], [31, 3, 1, "c.PyImport_ImportModuleLevel", "level"], [31, 3, 1, "c.PyImport_ImportModuleLevel", "locals"], [31, 3, 1, "c.PyImport_ImportModuleLevel", "name"]], "PyImport_ImportModuleLevelObject": [[31, 3, 1, "c.PyImport_ImportModuleLevelObject", "fromlist"], [31, 3, 1, "c.PyImport_ImportModuleLevelObject", "globals"], [31, 3, 1, "c.PyImport_ImportModuleLevelObject", "level"], [31, 3, 1, "c.PyImport_ImportModuleLevelObject", "locals"], [31, 3, 1, "c.PyImport_ImportModuleLevelObject", "name"]], "PyImport_ImportModuleNoBlock": [[31, 3, 1, "c.PyImport_ImportModuleNoBlock", "name"]], "PyImport_ReloadModule": [[31, 3, 1, "c.PyImport_ReloadModule", "m"]], "PyIndex_Check": [[47, 3, 1, "c.PyIndex_Check", "o"]], "PyInstanceMethod_Check": [[44, 3, 1, "c.PyInstanceMethod_Check", "o"]], "PyInstanceMethod_Function": [[44, 3, 1, "c.PyInstanceMethod_Function", "im"]], "PyInstanceMethod_GET_FUNCTION": [[44, 3, 1, "c.PyInstanceMethod_GET_FUNCTION", "im"]], "PyInstanceMethod_New": [[44, 3, 1, "c.PyInstanceMethod_New", "func"]], "PyInterpreterConfig": [[33, 0, 1, "c.PyInterpreterConfig.allow_daemon_threads", "allow_daemon_threads"], [33, 0, 1, "c.PyInterpreterConfig.allow_exec", "allow_exec"], [33, 0, 1, "c.PyInterpreterConfig.allow_fork", "allow_fork"], [33, 0, 1, "c.PyInterpreterConfig.allow_threads", "allow_threads"], [33, 0, 1, "c.PyInterpreterConfig.check_multi_interp_extensions", "check_multi_interp_extensions"], [33, 0, 1, "c.PyInterpreterConfig.gil", "gil"], [33, 0, 1, "c.PyInterpreterConfig.use_main_obmalloc", "use_main_obmalloc"]], "PyInterpreterState_Clear": [[33, 3, 1, "c.PyInterpreterState_Clear", "interp"]], "PyInterpreterState_Delete": [[33, 3, 1, "c.PyInterpreterState_Delete", "interp"]], "PyInterpreterState_GetDict": [[33, 3, 1, "c.PyInterpreterState_GetDict", "interp"]], "PyInterpreterState_GetID": [[33, 3, 1, "c.PyInterpreterState_GetID", "interp"]], "PyInterpreterState_Next": [[33, 3, 1, "c.PyInterpreterState_Next", "interp"]], "PyInterpreterState_ThreadHead": [[33, 3, 1, "c.PyInterpreterState_ThreadHead", "interp"]], "PyIter_Check": [[36, 3, 1, "c.PyIter_Check", "o"]], "PyIter_Next": [[36, 3, 1, "c.PyIter_Next", "o"]], "PyIter_Send": [[36, 3, 1, "c.PyIter_Send", "arg"], [36, 3, 1, "c.PyIter_Send", "iter"], [36, 3, 1, "c.PyIter_Send", "presult"]], "PyList_Append": [[38, 3, 1, "c.PyList_Append", "item"], [38, 3, 1, "c.PyList_Append", "list"]], "PyList_AsTuple": [[38, 3, 1, "c.PyList_AsTuple", "list"]], "PyList_Check": [[38, 3, 1, "c.PyList_Check", "p"]], "PyList_CheckExact": [[38, 3, 1, "c.PyList_CheckExact", "p"]], "PyList_GET_ITEM": [[38, 3, 1, "c.PyList_GET_ITEM", "i"], [38, 3, 1, "c.PyList_GET_ITEM", "list"]], "PyList_GET_SIZE": [[38, 3, 1, "c.PyList_GET_SIZE", "list"]], "PyList_GetItem": [[38, 3, 1, "c.PyList_GetItem", "index"], [38, 3, 1, "c.PyList_GetItem", "list"]], "PyList_GetSlice": [[38, 3, 1, "c.PyList_GetSlice", "high"], [38, 3, 1, "c.PyList_GetSlice", "list"], [38, 3, 1, "c.PyList_GetSlice", "low"]], "PyList_Insert": [[38, 3, 1, "c.PyList_Insert", "index"], [38, 3, 1, "c.PyList_Insert", "item"], [38, 3, 1, "c.PyList_Insert", "list"]], "PyList_New": [[38, 3, 1, "c.PyList_New", "len"]], "PyList_Reverse": [[38, 3, 1, "c.PyList_Reverse", "list"]], "PyList_SET_ITEM": [[38, 3, 1, "c.PyList_SET_ITEM", "i"], [38, 3, 1, "c.PyList_SET_ITEM", "list"], [38, 3, 1, "c.PyList_SET_ITEM", "o"]], "PyList_SetItem": [[38, 3, 1, "c.PyList_SetItem", "index"], [38, 3, 1, "c.PyList_SetItem", "item"], [38, 3, 1, "c.PyList_SetItem", "list"]], "PyList_SetSlice": [[38, 3, 1, "c.PyList_SetSlice", "high"], [38, 3, 1, "c.PyList_SetSlice", "itemlist"], [38, 3, 1, "c.PyList_SetSlice", "list"], [38, 3, 1, "c.PyList_SetSlice", "low"]], "PyList_Size": [[38, 3, 1, "c.PyList_Size", "list"]], "PyList_Sort": [[38, 3, 1, "c.PyList_Sort", "list"]], "PyLong_AsDouble": [[39, 3, 1, "c.PyLong_AsDouble", "pylong"]], "PyLong_AsLong": [[39, 3, 1, "c.PyLong_AsLong", "obj"]], "PyLong_AsLongAndOverflow": [[39, 3, 1, "c.PyLong_AsLongAndOverflow", "obj"], [39, 3, 1, "c.PyLong_AsLongAndOverflow", "overflow"]], "PyLong_AsLongLong": [[39, 3, 1, "c.PyLong_AsLongLong", "obj"]], "PyLong_AsLongLongAndOverflow": [[39, 3, 1, "c.PyLong_AsLongLongAndOverflow", "obj"], [39, 3, 1, "c.PyLong_AsLongLongAndOverflow", "overflow"]], "PyLong_AsSize_t": [[39, 3, 1, "c.PyLong_AsSize_t", "pylong"]], "PyLong_AsSsize_t": [[39, 3, 1, "c.PyLong_AsSsize_t", "pylong"]], "PyLong_AsUnsignedLong": [[39, 3, 1, "c.PyLong_AsUnsignedLong", "pylong"]], "PyLong_AsUnsignedLongLong": [[39, 3, 1, "c.PyLong_AsUnsignedLongLong", "pylong"]], "PyLong_AsUnsignedLongLongMask": [[39, 3, 1, "c.PyLong_AsUnsignedLongLongMask", "obj"]], "PyLong_AsUnsignedLongMask": [[39, 3, 1, "c.PyLong_AsUnsignedLongMask", "obj"]], "PyLong_AsVoidPtr": [[39, 3, 1, "c.PyLong_AsVoidPtr", "pylong"]], "PyLong_Check": [[39, 3, 1, "c.PyLong_Check", "p"]], "PyLong_CheckExact": [[39, 3, 1, "c.PyLong_CheckExact", "p"]], "PyLong_FromDouble": [[39, 3, 1, "c.PyLong_FromDouble", "v"]], "PyLong_FromLong": [[39, 3, 1, "c.PyLong_FromLong", "v"]], "PyLong_FromLongLong": [[39, 3, 1, "c.PyLong_FromLongLong", "v"]], "PyLong_FromSize_t": [[39, 3, 1, "c.PyLong_FromSize_t", "v"]], "PyLong_FromSsize_t": [[39, 3, 1, "c.PyLong_FromSsize_t", "v"]], "PyLong_FromString": [[39, 3, 1, "c.PyLong_FromString", "base"], [39, 3, 1, "c.PyLong_FromString", "pend"], [39, 3, 1, "c.PyLong_FromString", "str"]], "PyLong_FromUnicodeObject": [[39, 3, 1, "c.PyLong_FromUnicodeObject", "base"], [39, 3, 1, "c.PyLong_FromUnicodeObject", "u"]], "PyLong_FromUnsignedLong": [[39, 3, 1, "c.PyLong_FromUnsignedLong", "v"]], "PyLong_FromUnsignedLongLong": [[39, 3, 1, "c.PyLong_FromUnsignedLongLong", "v"]], "PyLong_FromVoidPtr": [[39, 3, 1, "c.PyLong_FromVoidPtr", "p"]], "PyMappingMethods": [[63, 0, 1, "c.PyMappingMethods.mp_ass_subscript", "mp_ass_subscript"], [63, 0, 1, "c.PyMappingMethods.mp_length", "mp_length"], [63, 0, 1, "c.PyMappingMethods.mp_subscript", "mp_subscript"]], "PyMapping_Check": [[40, 3, 1, "c.PyMapping_Check", "o"]], "PyMapping_DelItem": [[40, 3, 1, "c.PyMapping_DelItem", "key"], [40, 3, 1, "c.PyMapping_DelItem", "o"]], "PyMapping_DelItemString": [[40, 3, 1, "c.PyMapping_DelItemString", "key"], [40, 3, 1, "c.PyMapping_DelItemString", "o"]], "PyMapping_GetItemString": [[40, 3, 1, "c.PyMapping_GetItemString", "key"], [40, 3, 1, "c.PyMapping_GetItemString", "o"]], "PyMapping_HasKey": [[40, 3, 1, "c.PyMapping_HasKey", "key"], [40, 3, 1, "c.PyMapping_HasKey", "o"]], "PyMapping_HasKeyString": [[40, 3, 1, "c.PyMapping_HasKeyString", "key"], [40, 3, 1, "c.PyMapping_HasKeyString", "o"]], "PyMapping_Items": [[40, 3, 1, "c.PyMapping_Items", "o"]], "PyMapping_Keys": [[40, 3, 1, "c.PyMapping_Keys", "o"]], "PyMapping_Length": [[40, 3, 1, "c.PyMapping_Length", "o"]], "PyMapping_SetItemString": [[40, 3, 1, "c.PyMapping_SetItemString", "key"], [40, 3, 1, "c.PyMapping_SetItemString", "o"], [40, 3, 1, "c.PyMapping_SetItemString", "v"]], "PyMapping_Size": [[40, 3, 1, "c.PyMapping_Size", "o"]], "PyMapping_Values": [[40, 3, 1, "c.PyMapping_Values", "o"]], "PyMarshal_ReadLastObjectFromFile": [[41, 3, 1, "c.PyMarshal_ReadLastObjectFromFile", "file"]], "PyMarshal_ReadLongFromFile": [[41, 3, 1, "c.PyMarshal_ReadLongFromFile", "file"]], "PyMarshal_ReadObjectFromFile": [[41, 3, 1, "c.PyMarshal_ReadObjectFromFile", "file"]], "PyMarshal_ReadObjectFromString": [[41, 3, 1, "c.PyMarshal_ReadObjectFromString", "data"], [41, 3, 1, "c.PyMarshal_ReadObjectFromString", "len"]], "PyMarshal_ReadShortFromFile": [[41, 3, 1, "c.PyMarshal_ReadShortFromFile", "file"]], "PyMarshal_WriteLongToFile": [[41, 3, 1, "c.PyMarshal_WriteLongToFile", "file"], [41, 3, 1, "c.PyMarshal_WriteLongToFile", "value"], [41, 3, 1, "c.PyMarshal_WriteLongToFile", "version"]], "PyMarshal_WriteObjectToFile": [[41, 3, 1, "c.PyMarshal_WriteObjectToFile", "file"], [41, 3, 1, "c.PyMarshal_WriteObjectToFile", "value"], [41, 3, 1, "c.PyMarshal_WriteObjectToFile", "version"]], "PyMarshal_WriteObjectToString": [[41, 3, 1, "c.PyMarshal_WriteObjectToString", "value"], [41, 3, 1, "c.PyMarshal_WriteObjectToString", "version"]], "PyMem_Calloc": [[42, 3, 1, "c.PyMem_Calloc", "elsize"], [42, 3, 1, "c.PyMem_Calloc", "nelem"]], "PyMem_Del": [[42, 3, 1, "c.PyMem_Del", "p"]], "PyMem_Free": [[42, 3, 1, "c.PyMem_Free", "p"]], "PyMem_GetAllocator": [[42, 3, 1, "c.PyMem_GetAllocator", "allocator"], [42, 3, 1, "c.PyMem_GetAllocator", "domain"]], "PyMem_Malloc": [[42, 3, 1, "c.PyMem_Malloc", "n"]], "PyMem_RawCalloc": [[42, 3, 1, "c.PyMem_RawCalloc", "elsize"], [42, 3, 1, "c.PyMem_RawCalloc", "nelem"]], "PyMem_RawFree": [[42, 3, 1, "c.PyMem_RawFree", "p"]], "PyMem_RawMalloc": [[42, 3, 1, "c.PyMem_RawMalloc", "n"]], "PyMem_RawRealloc": [[42, 3, 1, "c.PyMem_RawRealloc", "n"], [42, 3, 1, "c.PyMem_RawRealloc", "p"]], "PyMem_Realloc": [[42, 3, 1, "c.PyMem_Realloc", "n"], [42, 3, 1, "c.PyMem_Realloc", "p"]], "PyMem_SetAllocator": [[42, 3, 1, "c.PyMem_SetAllocator", "allocator"], [42, 3, 1, "c.PyMem_SetAllocator", "domain"]], "PyMemberDef": [[58, 0, 1, "c.PyMemberDef.doc", "doc"], [58, 0, 1, "c.PyMemberDef.flags", "flags"], [58, 0, 1, "c.PyMemberDef.name", "name"], [58, 0, 1, "c.PyMemberDef.offset", "offset"], [58, 0, 1, "c.PyMemberDef.type", "type"]], "PyMember_GetOne": [[58, 3, 1, "c.PyMember_GetOne", "m"], [58, 3, 1, "c.PyMember_GetOne", "obj_addr"]], "PyMember_SetOne": [[58, 3, 1, "c.PyMember_SetOne", "m"], [58, 3, 1, "c.PyMember_SetOne", "o"], [58, 3, 1, "c.PyMember_SetOne", "obj_addr"]], "PyMemoryView_Check": [[43, 3, 1, "c.PyMemoryView_Check", "obj"]], "PyMemoryView_FromBuffer": [[43, 3, 1, "c.PyMemoryView_FromBuffer", "view"]], "PyMemoryView_FromMemory": [[43, 3, 1, "c.PyMemoryView_FromMemory", "flags"], [43, 3, 1, "c.PyMemoryView_FromMemory", "mem"], [43, 3, 1, "c.PyMemoryView_FromMemory", "size"]], "PyMemoryView_FromObject": [[43, 3, 1, "c.PyMemoryView_FromObject", "obj"]], "PyMemoryView_GET_BASE": [[43, 3, 1, "c.PyMemoryView_GET_BASE", "mview"]], "PyMemoryView_GET_BUFFER": [[43, 3, 1, "c.PyMemoryView_GET_BUFFER", "mview"]], "PyMemoryView_GetContiguous": [[43, 3, 1, "c.PyMemoryView_GetContiguous", "buffertype"], [43, 3, 1, "c.PyMemoryView_GetContiguous", "obj"], [43, 3, 1, "c.PyMemoryView_GetContiguous", "order"]], "PyMethodDef": [[58, 0, 1, "c.PyMethodDef.ml_doc", "ml_doc"], [58, 0, 1, "c.PyMethodDef.ml_flags", "ml_flags"], [58, 0, 1, "c.PyMethodDef.ml_meth", "ml_meth"], [58, 0, 1, "c.PyMethodDef.ml_name", "ml_name"]], "PyMethod_Check": [[44, 3, 1, "c.PyMethod_Check", "o"]], "PyMethod_Function": [[44, 3, 1, "c.PyMethod_Function", "meth"]], "PyMethod_GET_FUNCTION": [[44, 3, 1, "c.PyMethod_GET_FUNCTION", "meth"]], "PyMethod_GET_SELF": [[44, 3, 1, "c.PyMethod_GET_SELF", "meth"]], "PyMethod_New": [[44, 3, 1, "c.PyMethod_New", "func"], [44, 3, 1, "c.PyMethod_New", "self"]], "PyMethod_Self": [[44, 3, 1, "c.PyMethod_Self", "meth"]], "PyModuleDef": [[45, 0, 1, "c.PyModuleDef.m_base", "m_base"], [45, 0, 1, "c.PyModuleDef.m_clear", "m_clear"], [45, 0, 1, "c.PyModuleDef.m_doc", "m_doc"], [45, 0, 1, "c.PyModuleDef.m_free", "m_free"], [45, 0, 1, "c.PyModuleDef.m_methods", "m_methods"], [45, 0, 1, "c.PyModuleDef.m_name", "m_name"], [45, 0, 1, "c.PyModuleDef.m_size", "m_size"], [45, 0, 1, "c.PyModuleDef.m_slots", "m_slots"], [45, 0, 1, "c.PyModuleDef.m_traverse", "m_traverse"]], "PyModuleDef.m_slots": [[45, 0, 1, "c.PyModuleDef.m_slots.m_reload", "m_reload"]], "PyModuleDef_Init": [[45, 3, 1, "c.PyModuleDef_Init", "def"]], "PyModuleDef_Slot": [[45, 0, 1, "c.PyModuleDef_Slot.slot", "slot"], [45, 0, 1, "c.PyModuleDef_Slot.value", "value"]], "PyModule_AddFunctions": [[45, 3, 1, "c.PyModule_AddFunctions", "functions"], [45, 3, 1, "c.PyModule_AddFunctions", "module"]], "PyModule_AddIntConstant": [[45, 3, 1, "c.PyModule_AddIntConstant", "module"], [45, 3, 1, "c.PyModule_AddIntConstant", "name"], [45, 3, 1, "c.PyModule_AddIntConstant", "value"]], "PyModule_AddObject": [[45, 3, 1, "c.PyModule_AddObject", "module"], [45, 3, 1, "c.PyModule_AddObject", "name"], [45, 3, 1, "c.PyModule_AddObject", "value"]], "PyModule_AddObjectRef": [[45, 3, 1, "c.PyModule_AddObjectRef", "module"], [45, 3, 1, "c.PyModule_AddObjectRef", "name"], [45, 3, 1, "c.PyModule_AddObjectRef", "value"]], "PyModule_AddStringConstant": [[45, 3, 1, "c.PyModule_AddStringConstant", "module"], [45, 3, 1, "c.PyModule_AddStringConstant", "name"], [45, 3, 1, "c.PyModule_AddStringConstant", "value"]], "PyModule_AddType": [[45, 3, 1, "c.PyModule_AddType", "module"], [45, 3, 1, "c.PyModule_AddType", "type"]], "PyModule_Check": [[45, 3, 1, "c.PyModule_Check", "p"]], "PyModule_CheckExact": [[45, 3, 1, "c.PyModule_CheckExact", "p"]], "PyModule_Create": [[45, 3, 1, "c.PyModule_Create", "def"]], "PyModule_Create2": [[45, 3, 1, "c.PyModule_Create2", "def"], [45, 3, 1, "c.PyModule_Create2", "module_api_version"]], "PyModule_ExecDef": [[45, 3, 1, "c.PyModule_ExecDef", "def"], [45, 3, 1, "c.PyModule_ExecDef", "module"]], "PyModule_FromDefAndSpec": [[45, 3, 1, "c.PyModule_FromDefAndSpec", "def"], [45, 3, 1, "c.PyModule_FromDefAndSpec", "spec"]], "PyModule_FromDefAndSpec2": [[45, 3, 1, "c.PyModule_FromDefAndSpec2", "def"], [45, 3, 1, "c.PyModule_FromDefAndSpec2", "module_api_version"], [45, 3, 1, "c.PyModule_FromDefAndSpec2", "spec"]], "PyModule_GetDef": [[45, 3, 1, "c.PyModule_GetDef", "module"]], "PyModule_GetDict": [[45, 3, 1, "c.PyModule_GetDict", "module"]], "PyModule_GetFilename": [[45, 3, 1, "c.PyModule_GetFilename", "module"]], "PyModule_GetFilenameObject": [[45, 3, 1, "c.PyModule_GetFilenameObject", "module"]], "PyModule_GetName": [[45, 3, 1, "c.PyModule_GetName", "module"]], "PyModule_GetNameObject": [[45, 3, 1, "c.PyModule_GetNameObject", "module"]], "PyModule_GetState": [[45, 3, 1, "c.PyModule_GetState", "module"]], "PyModule_New": [[45, 3, 1, "c.PyModule_New", "name"]], "PyModule_NewObject": [[45, 3, 1, "c.PyModule_NewObject", "name"]], "PyModule_SetDocString": [[45, 3, 1, "c.PyModule_SetDocString", "docstring"], [45, 3, 1, "c.PyModule_SetDocString", "module"]], "PyNumberMethods": [[63, 0, 1, "c.PyNumberMethods.nb_absolute", "nb_absolute"], [63, 0, 1, "c.PyNumberMethods.nb_add", "nb_add"], [63, 0, 1, "c.PyNumberMethods.nb_and", "nb_and"], [63, 0, 1, "c.PyNumberMethods.nb_bool", "nb_bool"], [63, 0, 1, "c.PyNumberMethods.nb_divmod", "nb_divmod"], [63, 0, 1, "c.PyNumberMethods.nb_float", "nb_float"], [63, 0, 1, "c.PyNumberMethods.nb_floor_divide", "nb_floor_divide"], [63, 0, 1, "c.PyNumberMethods.nb_index", "nb_index"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_add", "nb_inplace_add"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_and", "nb_inplace_and"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_floor_divide", "nb_inplace_floor_divide"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_lshift", "nb_inplace_lshift"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_matrix_multiply", "nb_inplace_matrix_multiply"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_multiply", "nb_inplace_multiply"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_or", "nb_inplace_or"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_power", "nb_inplace_power"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_remainder", "nb_inplace_remainder"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_rshift", "nb_inplace_rshift"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_subtract", "nb_inplace_subtract"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_true_divide", "nb_inplace_true_divide"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_xor", "nb_inplace_xor"], [63, 0, 1, "c.PyNumberMethods.nb_int", "nb_int"], [63, 0, 1, "c.PyNumberMethods.nb_invert", "nb_invert"], [63, 0, 1, "c.PyNumberMethods.nb_lshift", "nb_lshift"], [63, 0, 1, "c.PyNumberMethods.nb_matrix_multiply", "nb_matrix_multiply"], [63, 0, 1, "c.PyNumberMethods.nb_multiply", "nb_multiply"], [63, 0, 1, "c.PyNumberMethods.nb_negative", "nb_negative"], [63, 0, 1, "c.PyNumberMethods.nb_or", "nb_or"], [63, 0, 1, "c.PyNumberMethods.nb_positive", "nb_positive"], [63, 0, 1, "c.PyNumberMethods.nb_power", "nb_power"], [63, 0, 1, "c.PyNumberMethods.nb_remainder", "nb_remainder"], [63, 0, 1, "c.PyNumberMethods.nb_reserved", "nb_reserved"], [63, 0, 1, "c.PyNumberMethods.nb_rshift", "nb_rshift"], [63, 0, 1, "c.PyNumberMethods.nb_subtract", "nb_subtract"], [63, 0, 1, "c.PyNumberMethods.nb_true_divide", "nb_true_divide"], [63, 0, 1, "c.PyNumberMethods.nb_xor", "nb_xor"]], "PyNumber_Absolute": [[47, 3, 1, "c.PyNumber_Absolute", "o"]], "PyNumber_Add": [[47, 3, 1, "c.PyNumber_Add", "o1"], [47, 3, 1, "c.PyNumber_Add", "o2"]], "PyNumber_And": [[47, 3, 1, "c.PyNumber_And", "o1"], [47, 3, 1, "c.PyNumber_And", "o2"]], "PyNumber_AsSsize_t": [[47, 3, 1, "c.PyNumber_AsSsize_t", "exc"], [47, 3, 1, "c.PyNumber_AsSsize_t", "o"]], "PyNumber_Check": [[47, 3, 1, "c.PyNumber_Check", "o"]], "PyNumber_Divmod": [[47, 3, 1, "c.PyNumber_Divmod", "o1"], [47, 3, 1, "c.PyNumber_Divmod", "o2"]], "PyNumber_Float": [[47, 3, 1, "c.PyNumber_Float", "o"]], "PyNumber_FloorDivide": [[47, 3, 1, "c.PyNumber_FloorDivide", "o1"], [47, 3, 1, "c.PyNumber_FloorDivide", "o2"]], "PyNumber_InPlaceAdd": [[47, 3, 1, "c.PyNumber_InPlaceAdd", "o1"], [47, 3, 1, "c.PyNumber_InPlaceAdd", "o2"]], "PyNumber_InPlaceAnd": [[47, 3, 1, "c.PyNumber_InPlaceAnd", "o1"], [47, 3, 1, "c.PyNumber_InPlaceAnd", "o2"]], "PyNumber_InPlaceFloorDivide": [[47, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o1"], [47, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o2"]], "PyNumber_InPlaceLshift": [[47, 3, 1, "c.PyNumber_InPlaceLshift", "o1"], [47, 3, 1, "c.PyNumber_InPlaceLshift", "o2"]], "PyNumber_InPlaceMatrixMultiply": [[47, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o1"], [47, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o2"]], "PyNumber_InPlaceMultiply": [[47, 3, 1, "c.PyNumber_InPlaceMultiply", "o1"], [47, 3, 1, "c.PyNumber_InPlaceMultiply", "o2"]], "PyNumber_InPlaceOr": [[47, 3, 1, "c.PyNumber_InPlaceOr", "o1"], [47, 3, 1, "c.PyNumber_InPlaceOr", "o2"]], "PyNumber_InPlacePower": [[47, 3, 1, "c.PyNumber_InPlacePower", "o1"], [47, 3, 1, "c.PyNumber_InPlacePower", "o2"], [47, 3, 1, "c.PyNumber_InPlacePower", "o3"]], "PyNumber_InPlaceRemainder": [[47, 3, 1, "c.PyNumber_InPlaceRemainder", "o1"], [47, 3, 1, "c.PyNumber_InPlaceRemainder", "o2"]], "PyNumber_InPlaceRshift": [[47, 3, 1, "c.PyNumber_InPlaceRshift", "o1"], [47, 3, 1, "c.PyNumber_InPlaceRshift", "o2"]], "PyNumber_InPlaceSubtract": [[47, 3, 1, "c.PyNumber_InPlaceSubtract", "o1"], [47, 3, 1, "c.PyNumber_InPlaceSubtract", "o2"]], "PyNumber_InPlaceTrueDivide": [[47, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o1"], [47, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o2"]], "PyNumber_InPlaceXor": [[47, 3, 1, "c.PyNumber_InPlaceXor", "o1"], [47, 3, 1, "c.PyNumber_InPlaceXor", "o2"]], "PyNumber_Index": [[47, 3, 1, "c.PyNumber_Index", "o"]], "PyNumber_Invert": [[47, 3, 1, "c.PyNumber_Invert", "o"]], "PyNumber_Long": [[47, 3, 1, "c.PyNumber_Long", "o"]], "PyNumber_Lshift": [[47, 3, 1, "c.PyNumber_Lshift", "o1"], [47, 3, 1, "c.PyNumber_Lshift", "o2"]], "PyNumber_MatrixMultiply": [[47, 3, 1, "c.PyNumber_MatrixMultiply", "o1"], [47, 3, 1, "c.PyNumber_MatrixMultiply", "o2"]], "PyNumber_Multiply": [[47, 3, 1, "c.PyNumber_Multiply", "o1"], [47, 3, 1, "c.PyNumber_Multiply", "o2"]], "PyNumber_Negative": [[47, 3, 1, "c.PyNumber_Negative", "o"]], "PyNumber_Or": [[47, 3, 1, "c.PyNumber_Or", "o1"], [47, 3, 1, "c.PyNumber_Or", "o2"]], "PyNumber_Positive": [[47, 3, 1, "c.PyNumber_Positive", "o"]], "PyNumber_Power": [[47, 3, 1, "c.PyNumber_Power", "o1"], [47, 3, 1, "c.PyNumber_Power", "o2"], [47, 3, 1, "c.PyNumber_Power", "o3"]], "PyNumber_Remainder": [[47, 3, 1, "c.PyNumber_Remainder", "o1"], [47, 3, 1, "c.PyNumber_Remainder", "o2"]], "PyNumber_Rshift": [[47, 3, 1, "c.PyNumber_Rshift", "o1"], [47, 3, 1, "c.PyNumber_Rshift", "o2"]], "PyNumber_Subtract": [[47, 3, 1, "c.PyNumber_Subtract", "o1"], [47, 3, 1, "c.PyNumber_Subtract", "o2"]], "PyNumber_ToBase": [[47, 3, 1, "c.PyNumber_ToBase", "base"], [47, 3, 1, "c.PyNumber_ToBase", "n"]], "PyNumber_TrueDivide": [[47, 3, 1, "c.PyNumber_TrueDivide", "o1"], [47, 3, 1, "c.PyNumber_TrueDivide", "o2"]], "PyNumber_Xor": [[47, 3, 1, "c.PyNumber_Xor", "o1"], [47, 3, 1, "c.PyNumber_Xor", "o2"]], "PyOS_FSPath": [[59, 3, 1, "c.PyOS_FSPath", "path"]], "PyOS_double_to_string": [[18, 3, 1, "c.PyOS_double_to_string", "flags"], [18, 3, 1, "c.PyOS_double_to_string", "format_code"], [18, 3, 1, "c.PyOS_double_to_string", "precision"], [18, 3, 1, "c.PyOS_double_to_string", "ptype"], [18, 3, 1, "c.PyOS_double_to_string", "val"]], "PyOS_getsig": [[59, 3, 1, "c.PyOS_getsig", "i"]], "PyOS_setsig": [[59, 3, 1, "c.PyOS_setsig", "h"], [59, 3, 1, "c.PyOS_setsig", "i"]], "PyOS_snprintf": [[18, 3, 1, "c.PyOS_snprintf", "format"], [18, 3, 1, "c.PyOS_snprintf", "size"], [18, 3, 1, "c.PyOS_snprintf", "str"]], "PyOS_stricmp": [[18, 3, 1, "c.PyOS_stricmp", "s1"], [18, 3, 1, "c.PyOS_stricmp", "s2"]], "PyOS_string_to_double": [[18, 3, 1, "c.PyOS_string_to_double", "endptr"], [18, 3, 1, "c.PyOS_string_to_double", "overflow_exception"], [18, 3, 1, "c.PyOS_string_to_double", "s"]], "PyOS_strnicmp": [[18, 3, 1, "c.PyOS_strnicmp", "s1"], [18, 3, 1, "c.PyOS_strnicmp", "s2"], [18, 3, 1, "c.PyOS_strnicmp", "size"]], "PyOS_strtol": [[18, 3, 1, "c.PyOS_strtol", "base"], [18, 3, 1, "c.PyOS_strtol", "ptr"], [18, 3, 1, "c.PyOS_strtol", "str"]], "PyOS_strtoul": [[18, 3, 1, "c.PyOS_strtoul", "base"], [18, 3, 1, "c.PyOS_strtoul", "ptr"], [18, 3, 1, "c.PyOS_strtoul", "str"]], "PyOS_vsnprintf": [[18, 3, 1, "c.PyOS_vsnprintf", "format"], [18, 3, 1, "c.PyOS_vsnprintf", "size"], [18, 3, 1, "c.PyOS_vsnprintf", "str"], [18, 3, 1, "c.PyOS_vsnprintf", "va"]], "PyObject": [[63, 0, 1, "c.PyObject._ob_next", "_ob_next"], [63, 0, 1, "c.PyObject._ob_prev", "_ob_prev"], [63, 0, 1, "c.PyObject.ob_refcnt", "ob_refcnt"], [63, 0, 1, "c.PyObject.ob_type", "ob_type"]], "PyObject_ASCII": [[49, 3, 1, "c.PyObject_ASCII", "o"]], "PyObject_AsCharBuffer": [[48, 3, 1, "c.PyObject_AsCharBuffer", "buffer"], [48, 3, 1, "c.PyObject_AsCharBuffer", "buffer_len"], [48, 3, 1, "c.PyObject_AsCharBuffer", "obj"]], "PyObject_AsFileDescriptor": [[24, 3, 1, "c.PyObject_AsFileDescriptor", "p"]], "PyObject_AsReadBuffer": [[48, 3, 1, "c.PyObject_AsReadBuffer", "buffer"], [48, 3, 1, "c.PyObject_AsReadBuffer", "buffer_len"], [48, 3, 1, "c.PyObject_AsReadBuffer", "obj"]], "PyObject_AsWriteBuffer": [[48, 3, 1, "c.PyObject_AsWriteBuffer", "buffer"], [48, 3, 1, "c.PyObject_AsWriteBuffer", "buffer_len"], [48, 3, 1, "c.PyObject_AsWriteBuffer", "obj"]], "PyObject_Bytes": [[49, 3, 1, "c.PyObject_Bytes", "o"]], "PyObject_Call": [[10, 3, 1, "c.PyObject_Call", "args"], [10, 3, 1, "c.PyObject_Call", "callable"], [10, 3, 1, "c.PyObject_Call", "kwargs"]], "PyObject_CallFunction": [[10, 3, 1, "c.PyObject_CallFunction", "callable"], [10, 3, 1, "c.PyObject_CallFunction", "format"]], "PyObject_CallFunctionObjArgs": [[10, 3, 1, "c.PyObject_CallFunctionObjArgs", "callable"]], "PyObject_CallMethod": [[10, 3, 1, "c.PyObject_CallMethod", "format"], [10, 3, 1, "c.PyObject_CallMethod", "name"], [10, 3, 1, "c.PyObject_CallMethod", "obj"]], "PyObject_CallMethodNoArgs": [[10, 3, 1, "c.PyObject_CallMethodNoArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodNoArgs", "obj"]], "PyObject_CallMethodObjArgs": [[10, 3, 1, "c.PyObject_CallMethodObjArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodObjArgs", "obj"]], "PyObject_CallMethodOneArg": [[10, 3, 1, "c.PyObject_CallMethodOneArg", "arg"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "name"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "obj"]], "PyObject_CallNoArgs": [[10, 3, 1, "c.PyObject_CallNoArgs", "callable"]], "PyObject_CallObject": [[10, 3, 1, "c.PyObject_CallObject", "args"], [10, 3, 1, "c.PyObject_CallObject", "callable"]], "PyObject_CallOneArg": [[10, 3, 1, "c.PyObject_CallOneArg", "arg"], [10, 3, 1, "c.PyObject_CallOneArg", "callable"]], "PyObject_Calloc": [[42, 3, 1, "c.PyObject_Calloc", "elsize"], [42, 3, 1, "c.PyObject_Calloc", "nelem"]], "PyObject_CheckBuffer": [[7, 3, 1, "c.PyObject_CheckBuffer", "obj"]], "PyObject_CheckReadBuffer": [[48, 3, 1, "c.PyObject_CheckReadBuffer", "o"]], "PyObject_ClearWeakRefs": [[67, 3, 1, "c.PyObject_ClearWeakRefs", "object"]], "PyObject_CopyData": [[7, 3, 1, "c.PyObject_CopyData", "dest"], [7, 3, 1, "c.PyObject_CopyData", "src"]], "PyObject_Del": [[3, 3, 1, "c.PyObject_Del", "op"]], "PyObject_DelAttr": [[49, 3, 1, "c.PyObject_DelAttr", "attr_name"], [49, 3, 1, "c.PyObject_DelAttr", "o"]], "PyObject_DelAttrString": [[49, 3, 1, "c.PyObject_DelAttrString", "attr_name"], [49, 3, 1, "c.PyObject_DelAttrString", "o"]], "PyObject_DelItem": [[49, 3, 1, "c.PyObject_DelItem", "key"], [49, 3, 1, "c.PyObject_DelItem", "o"]], "PyObject_Dir": [[49, 3, 1, "c.PyObject_Dir", "o"]], "PyObject_Format": [[49, 3, 1, "c.PyObject_Format", "format_spec"], [49, 3, 1, "c.PyObject_Format", "obj"]], "PyObject_Free": [[42, 3, 1, "c.PyObject_Free", "p"]], "PyObject_GC_Del": [[28, 3, 1, "c.PyObject_GC_Del", "op"]], "PyObject_GC_IsFinalized": [[28, 3, 1, "c.PyObject_GC_IsFinalized", "op"]], "PyObject_GC_IsTracked": [[28, 3, 1, "c.PyObject_GC_IsTracked", "op"]], "PyObject_GC_Track": [[28, 3, 1, "c.PyObject_GC_Track", "op"]], "PyObject_GC_UnTrack": [[28, 3, 1, "c.PyObject_GC_UnTrack", "op"]], "PyObject_GenericGetAttr": [[49, 3, 1, "c.PyObject_GenericGetAttr", "name"], [49, 3, 1, "c.PyObject_GenericGetAttr", "o"]], "PyObject_GenericGetDict": [[49, 3, 1, "c.PyObject_GenericGetDict", "context"], [49, 3, 1, "c.PyObject_GenericGetDict", "o"]], "PyObject_GenericSetAttr": [[49, 3, 1, "c.PyObject_GenericSetAttr", "name"], [49, 3, 1, "c.PyObject_GenericSetAttr", "o"], [49, 3, 1, "c.PyObject_GenericSetAttr", "value"]], "PyObject_GenericSetDict": [[49, 3, 1, "c.PyObject_GenericSetDict", "context"], [49, 3, 1, "c.PyObject_GenericSetDict", "o"], [49, 3, 1, "c.PyObject_GenericSetDict", "value"]], "PyObject_GetAIter": [[49, 3, 1, "c.PyObject_GetAIter", "o"]], "PyObject_GetArenaAllocator": [[42, 3, 1, "c.PyObject_GetArenaAllocator", "allocator"]], "PyObject_GetAttr": [[49, 3, 1, "c.PyObject_GetAttr", "attr_name"], [49, 3, 1, "c.PyObject_GetAttr", "o"]], "PyObject_GetAttrString": [[49, 3, 1, "c.PyObject_GetAttrString", "attr_name"], [49, 3, 1, "c.PyObject_GetAttrString", "o"]], "PyObject_GetBuffer": [[7, 3, 1, "c.PyObject_GetBuffer", "exporter"], [7, 3, 1, "c.PyObject_GetBuffer", "flags"], [7, 3, 1, "c.PyObject_GetBuffer", "view"]], "PyObject_GetItem": [[49, 3, 1, "c.PyObject_GetItem", "key"], [49, 3, 1, "c.PyObject_GetItem", "o"]], "PyObject_GetItemData": [[49, 3, 1, "c.PyObject_GetItemData", "o"]], "PyObject_GetIter": [[49, 3, 1, "c.PyObject_GetIter", "o"]], "PyObject_GetTypeData": [[49, 3, 1, "c.PyObject_GetTypeData", "cls"], [49, 3, 1, "c.PyObject_GetTypeData", "o"]], "PyObject_HasAttr": [[49, 3, 1, "c.PyObject_HasAttr", "attr_name"], [49, 3, 1, "c.PyObject_HasAttr", "o"]], "PyObject_HasAttrString": [[49, 3, 1, "c.PyObject_HasAttrString", "attr_name"], [49, 3, 1, "c.PyObject_HasAttrString", "o"]], "PyObject_Hash": [[49, 3, 1, "c.PyObject_Hash", "o"]], "PyObject_HashNotImplemented": [[49, 3, 1, "c.PyObject_HashNotImplemented", "o"]], "PyObject_IS_GC": [[28, 3, 1, "c.PyObject_IS_GC", "obj"]], "PyObject_Init": [[3, 3, 1, "c.PyObject_Init", "op"], [3, 3, 1, "c.PyObject_Init", "type"]], "PyObject_InitVar": [[3, 3, 1, "c.PyObject_InitVar", "op"], [3, 3, 1, "c.PyObject_InitVar", "size"], [3, 3, 1, "c.PyObject_InitVar", "type"]], "PyObject_IsInstance": [[49, 3, 1, "c.PyObject_IsInstance", "cls"], [49, 3, 1, "c.PyObject_IsInstance", "inst"]], "PyObject_IsSubclass": [[49, 3, 1, "c.PyObject_IsSubclass", "cls"], [49, 3, 1, "c.PyObject_IsSubclass", "derived"]], "PyObject_IsTrue": [[49, 3, 1, "c.PyObject_IsTrue", "o"]], "PyObject_Length": [[49, 3, 1, "c.PyObject_Length", "o"]], "PyObject_LengthHint": [[49, 3, 1, "c.PyObject_LengthHint", "defaultvalue"], [49, 3, 1, "c.PyObject_LengthHint", "o"]], "PyObject_Malloc": [[42, 3, 1, "c.PyObject_Malloc", "n"]], "PyObject_Not": [[49, 3, 1, "c.PyObject_Not", "o"]], "PyObject_Print": [[49, 3, 1, "c.PyObject_Print", "flags"], [49, 3, 1, "c.PyObject_Print", "fp"], [49, 3, 1, "c.PyObject_Print", "o"]], "PyObject_Realloc": [[42, 3, 1, "c.PyObject_Realloc", "n"], [42, 3, 1, "c.PyObject_Realloc", "p"]], "PyObject_Repr": [[49, 3, 1, "c.PyObject_Repr", "o"]], "PyObject_RichCompare": [[49, 3, 1, "c.PyObject_RichCompare", "o1"], [49, 3, 1, "c.PyObject_RichCompare", "o2"], [49, 3, 1, "c.PyObject_RichCompare", "opid"]], "PyObject_RichCompareBool": [[49, 3, 1, "c.PyObject_RichCompareBool", "o1"], [49, 3, 1, "c.PyObject_RichCompareBool", "o2"], [49, 3, 1, "c.PyObject_RichCompareBool", "opid"]], "PyObject_SetArenaAllocator": [[42, 3, 1, "c.PyObject_SetArenaAllocator", "allocator"]], "PyObject_SetAttr": [[49, 3, 1, "c.PyObject_SetAttr", "attr_name"], [49, 3, 1, "c.PyObject_SetAttr", "o"], [49, 3, 1, "c.PyObject_SetAttr", "v"]], "PyObject_SetAttrString": [[49, 3, 1, "c.PyObject_SetAttrString", "attr_name"], [49, 3, 1, "c.PyObject_SetAttrString", "o"], [49, 3, 1, "c.PyObject_SetAttrString", "v"]], "PyObject_SetItem": [[49, 3, 1, "c.PyObject_SetItem", "key"], [49, 3, 1, "c.PyObject_SetItem", "o"], [49, 3, 1, "c.PyObject_SetItem", "v"]], "PyObject_Size": [[49, 3, 1, "c.PyObject_Size", "o"]], "PyObject_Str": [[49, 3, 1, "c.PyObject_Str", "o"]], "PyObject_Type": [[49, 3, 1, "c.PyObject_Type", "o"]], "PyObject_TypeCheck": [[49, 3, 1, "c.PyObject_TypeCheck", "o"], [49, 3, 1, "c.PyObject_TypeCheck", "type"]], "PyObject_Vectorcall": [[10, 3, 1, "c.PyObject_Vectorcall", "args"], [10, 3, 1, "c.PyObject_Vectorcall", "callable"], [10, 3, 1, "c.PyObject_Vectorcall", "kwnames"], [10, 3, 1, "c.PyObject_Vectorcall", "nargsf"]], "PyObject_VectorcallDict": [[10, 3, 1, "c.PyObject_VectorcallDict", "args"], [10, 3, 1, "c.PyObject_VectorcallDict", "callable"], [10, 3, 1, "c.PyObject_VectorcallDict", "kwdict"], [10, 3, 1, "c.PyObject_VectorcallDict", "nargsf"]], "PyObject_VectorcallMethod": [[10, 3, 1, "c.PyObject_VectorcallMethod", "args"], [10, 3, 1, "c.PyObject_VectorcallMethod", "kwnames"], [10, 3, 1, "c.PyObject_VectorcallMethod", "name"], [10, 3, 1, "c.PyObject_VectorcallMethod", "nargsf"]], "PyPreConfig": [[34, 0, 1, "c.PyPreConfig.allocator", "allocator"], [34, 0, 1, "c.PyPreConfig.coerce_c_locale", "coerce_c_locale"], [34, 0, 1, "c.PyPreConfig.coerce_c_locale_warn", "coerce_c_locale_warn"], [34, 0, 1, "c.PyPreConfig.configure_locale", "configure_locale"], [34, 0, 1, "c.PyPreConfig.dev_mode", "dev_mode"], [34, 0, 1, "c.PyPreConfig.isolated", "isolated"], [34, 0, 1, "c.PyPreConfig.legacy_windows_fs_encoding", "legacy_windows_fs_encoding"], [34, 0, 1, "c.PyPreConfig.parse_argv", "parse_argv"], [34, 0, 1, "c.PyPreConfig.use_environment", "use_environment"], [34, 0, 1, "c.PyPreConfig.utf8_mode", "utf8_mode"]], "PyPreConfig_InitIsolatedConfig": [[34, 3, 1, "c.PyPreConfig_InitIsolatedConfig", "preconfig"]], "PyPreConfig_InitPythonConfig": [[34, 3, 1, "c.PyPreConfig_InitPythonConfig", "preconfig"]], "PyRun_AnyFile": [[66, 3, 1, "c.PyRun_AnyFile", "filename"], [66, 3, 1, "c.PyRun_AnyFile", "fp"]], "PyRun_AnyFileEx": [[66, 3, 1, "c.PyRun_AnyFileEx", "closeit"], [66, 3, 1, "c.PyRun_AnyFileEx", "filename"], [66, 3, 1, "c.PyRun_AnyFileEx", "fp"]], "PyRun_AnyFileExFlags": [[66, 3, 1, "c.PyRun_AnyFileExFlags", "closeit"], [66, 3, 1, "c.PyRun_AnyFileExFlags", "filename"], [66, 3, 1, "c.PyRun_AnyFileExFlags", "flags"], [66, 3, 1, "c.PyRun_AnyFileExFlags", "fp"]], "PyRun_AnyFileFlags": [[66, 3, 1, "c.PyRun_AnyFileFlags", "filename"], [66, 3, 1, "c.PyRun_AnyFileFlags", "flags"], [66, 3, 1, "c.PyRun_AnyFileFlags", "fp"]], "PyRun_File": [[66, 3, 1, "c.PyRun_File", "filename"], [66, 3, 1, "c.PyRun_File", "fp"], [66, 3, 1, "c.PyRun_File", "globals"], [66, 3, 1, "c.PyRun_File", "locals"], [66, 3, 1, "c.PyRun_File", "start"]], "PyRun_FileEx": [[66, 3, 1, "c.PyRun_FileEx", "closeit"], [66, 3, 1, "c.PyRun_FileEx", "filename"], [66, 3, 1, "c.PyRun_FileEx", "fp"], [66, 3, 1, "c.PyRun_FileEx", "globals"], [66, 3, 1, "c.PyRun_FileEx", "locals"], [66, 3, 1, "c.PyRun_FileEx", "start"]], "PyRun_FileExFlags": [[66, 3, 1, "c.PyRun_FileExFlags", "closeit"], [66, 3, 1, "c.PyRun_FileExFlags", "filename"], [66, 3, 1, "c.PyRun_FileExFlags", "flags"], [66, 3, 1, "c.PyRun_FileExFlags", "fp"], [66, 3, 1, "c.PyRun_FileExFlags", "globals"], [66, 3, 1, "c.PyRun_FileExFlags", "locals"], [66, 3, 1, "c.PyRun_FileExFlags", "start"]], "PyRun_FileFlags": [[66, 3, 1, "c.PyRun_FileFlags", "filename"], [66, 3, 1, "c.PyRun_FileFlags", "flags"], [66, 3, 1, "c.PyRun_FileFlags", "fp"], [66, 3, 1, "c.PyRun_FileFlags", "globals"], [66, 3, 1, "c.PyRun_FileFlags", "locals"], [66, 3, 1, "c.PyRun_FileFlags", "start"]], "PyRun_InteractiveLoop": [[66, 3, 1, "c.PyRun_InteractiveLoop", "filename"], [66, 3, 1, "c.PyRun_InteractiveLoop", "fp"]], "PyRun_InteractiveLoopFlags": [[66, 3, 1, "c.PyRun_InteractiveLoopFlags", "filename"], [66, 3, 1, "c.PyRun_InteractiveLoopFlags", "flags"], [66, 3, 1, "c.PyRun_InteractiveLoopFlags", "fp"]], "PyRun_InteractiveOne": [[66, 3, 1, "c.PyRun_InteractiveOne", "filename"], [66, 3, 1, "c.PyRun_InteractiveOne", "fp"]], "PyRun_InteractiveOneFlags": [[66, 3, 1, "c.PyRun_InteractiveOneFlags", "filename"], [66, 3, 1, "c.PyRun_InteractiveOneFlags", "flags"], [66, 3, 1, "c.PyRun_InteractiveOneFlags", "fp"]], "PyRun_SimpleFile": [[66, 3, 1, "c.PyRun_SimpleFile", "filename"], [66, 3, 1, "c.PyRun_SimpleFile", "fp"]], "PyRun_SimpleFileEx": [[66, 3, 1, "c.PyRun_SimpleFileEx", "closeit"], [66, 3, 1, "c.PyRun_SimpleFileEx", "filename"], [66, 3, 1, "c.PyRun_SimpleFileEx", "fp"]], "PyRun_SimpleFileExFlags": [[66, 3, 1, "c.PyRun_SimpleFileExFlags", "closeit"], [66, 3, 1, "c.PyRun_SimpleFileExFlags", "filename"], [66, 3, 1, "c.PyRun_SimpleFileExFlags", "flags"], [66, 3, 1, "c.PyRun_SimpleFileExFlags", "fp"]], "PyRun_SimpleString": [[66, 3, 1, "c.PyRun_SimpleString", "command"]], "PyRun_SimpleStringFlags": [[66, 3, 1, "c.PyRun_SimpleStringFlags", "command"], [66, 3, 1, "c.PyRun_SimpleStringFlags", "flags"]], "PyRun_String": [[66, 3, 1, "c.PyRun_String", "globals"], [66, 3, 1, "c.PyRun_String", "locals"], [66, 3, 1, "c.PyRun_String", "start"], [66, 3, 1, "c.PyRun_String", "str"]], "PyRun_StringFlags": [[66, 3, 1, "c.PyRun_StringFlags", "flags"], [66, 3, 1, "c.PyRun_StringFlags", "globals"], [66, 3, 1, "c.PyRun_StringFlags", "locals"], [66, 3, 1, "c.PyRun_StringFlags", "start"], [66, 3, 1, "c.PyRun_StringFlags", "str"]], "PySeqIter_Check": [[37, 3, 1, "c.PySeqIter_Check", "op"]], "PySeqIter_New": [[37, 3, 1, "c.PySeqIter_New", "seq"]], "PySequenceMethods": [[63, 0, 1, "c.PySequenceMethods.sq_ass_item", "sq_ass_item"], [63, 0, 1, "c.PySequenceMethods.sq_concat", "sq_concat"], [63, 0, 1, "c.PySequenceMethods.sq_contains", "sq_contains"], [63, 0, 1, "c.PySequenceMethods.sq_inplace_concat", "sq_inplace_concat"], [63, 0, 1, "c.PySequenceMethods.sq_inplace_repeat", "sq_inplace_repeat"], [63, 0, 1, "c.PySequenceMethods.sq_item", "sq_item"], [63, 0, 1, "c.PySequenceMethods.sq_length", "sq_length"], [63, 0, 1, "c.PySequenceMethods.sq_repeat", "sq_repeat"]], "PySequence_Check": [[54, 3, 1, "c.PySequence_Check", "o"]], "PySequence_Concat": [[54, 3, 1, "c.PySequence_Concat", "o1"], [54, 3, 1, "c.PySequence_Concat", "o2"]], "PySequence_Contains": [[54, 3, 1, "c.PySequence_Contains", "o"], [54, 3, 1, "c.PySequence_Contains", "value"]], "PySequence_Count": [[54, 3, 1, "c.PySequence_Count", "o"], [54, 3, 1, "c.PySequence_Count", "value"]], "PySequence_DelItem": [[54, 3, 1, "c.PySequence_DelItem", "i"], [54, 3, 1, "c.PySequence_DelItem", "o"]], "PySequence_DelSlice": [[54, 3, 1, "c.PySequence_DelSlice", "i1"], [54, 3, 1, "c.PySequence_DelSlice", "i2"], [54, 3, 1, "c.PySequence_DelSlice", "o"]], "PySequence_Fast": [[54, 3, 1, "c.PySequence_Fast", "m"], [54, 3, 1, "c.PySequence_Fast", "o"]], "PySequence_Fast_GET_ITEM": [[54, 3, 1, "c.PySequence_Fast_GET_ITEM", "i"], [54, 3, 1, "c.PySequence_Fast_GET_ITEM", "o"]], "PySequence_Fast_GET_SIZE": [[54, 3, 1, "c.PySequence_Fast_GET_SIZE", "o"]], "PySequence_Fast_ITEMS": [[54, 3, 1, "c.PySequence_Fast_ITEMS", "o"]], "PySequence_GetItem": [[54, 3, 1, "c.PySequence_GetItem", "i"], [54, 3, 1, "c.PySequence_GetItem", "o"]], "PySequence_GetSlice": [[54, 3, 1, "c.PySequence_GetSlice", "i1"], [54, 3, 1, "c.PySequence_GetSlice", "i2"], [54, 3, 1, "c.PySequence_GetSlice", "o"]], "PySequence_ITEM": [[54, 3, 1, "c.PySequence_ITEM", "i"], [54, 3, 1, "c.PySequence_ITEM", "o"]], "PySequence_InPlaceConcat": [[54, 3, 1, "c.PySequence_InPlaceConcat", "o1"], [54, 3, 1, "c.PySequence_InPlaceConcat", "o2"]], "PySequence_InPlaceRepeat": [[54, 3, 1, "c.PySequence_InPlaceRepeat", "count"], [54, 3, 1, "c.PySequence_InPlaceRepeat", "o"]], "PySequence_Index": [[54, 3, 1, "c.PySequence_Index", "o"], [54, 3, 1, "c.PySequence_Index", "value"]], "PySequence_Length": [[54, 3, 1, "c.PySequence_Length", "o"]], "PySequence_List": [[54, 3, 1, "c.PySequence_List", "o"]], "PySequence_Repeat": [[54, 3, 1, "c.PySequence_Repeat", "count"], [54, 3, 1, "c.PySequence_Repeat", "o"]], "PySequence_SetItem": [[54, 3, 1, "c.PySequence_SetItem", "i"], [54, 3, 1, "c.PySequence_SetItem", "o"], [54, 3, 1, "c.PySequence_SetItem", "v"]], "PySequence_SetSlice": [[54, 3, 1, "c.PySequence_SetSlice", "i1"], [54, 3, 1, "c.PySequence_SetSlice", "i2"], [54, 3, 1, "c.PySequence_SetSlice", "o"], [54, 3, 1, "c.PySequence_SetSlice", "v"]], "PySequence_Size": [[54, 3, 1, "c.PySequence_Size", "o"]], "PySequence_Tuple": [[54, 3, 1, "c.PySequence_Tuple", "o"]], "PySet_Add": [[55, 3, 1, "c.PySet_Add", "key"], [55, 3, 1, "c.PySet_Add", "set"]], "PySet_Check": [[55, 3, 1, "c.PySet_Check", "p"]], "PySet_CheckExact": [[55, 3, 1, "c.PySet_CheckExact", "p"]], "PySet_Clear": [[55, 3, 1, "c.PySet_Clear", "set"]], "PySet_Contains": [[55, 3, 1, "c.PySet_Contains", "anyset"], [55, 3, 1, "c.PySet_Contains", "key"]], "PySet_Discard": [[55, 3, 1, "c.PySet_Discard", "key"], [55, 3, 1, "c.PySet_Discard", "set"]], "PySet_GET_SIZE": [[55, 3, 1, "c.PySet_GET_SIZE", "anyset"]], "PySet_New": [[55, 3, 1, "c.PySet_New", "iterable"]], "PySet_Pop": [[55, 3, 1, "c.PySet_Pop", "set"]], "PySet_Size": [[55, 3, 1, "c.PySet_Size", "anyset"]], "PySignal_SetWakeupFd": [[23, 3, 1, "c.PySignal_SetWakeupFd", "fd"]], "PySlice_AdjustIndices": [[56, 3, 1, "c.PySlice_AdjustIndices", "length"], [56, 3, 1, "c.PySlice_AdjustIndices", "start"], [56, 3, 1, "c.PySlice_AdjustIndices", "step"], [56, 3, 1, "c.PySlice_AdjustIndices", "stop"]], "PySlice_Check": [[56, 3, 1, "c.PySlice_Check", "ob"]], "PySlice_GetIndices": [[56, 3, 1, "c.PySlice_GetIndices", "length"], [56, 3, 1, "c.PySlice_GetIndices", "slice"], [56, 3, 1, "c.PySlice_GetIndices", "start"], [56, 3, 1, "c.PySlice_GetIndices", "step"], [56, 3, 1, "c.PySlice_GetIndices", "stop"]], "PySlice_GetIndicesEx": [[56, 3, 1, "c.PySlice_GetIndicesEx", "length"], [56, 3, 1, "c.PySlice_GetIndicesEx", "slice"], [56, 3, 1, "c.PySlice_GetIndicesEx", "slicelength"], [56, 3, 1, "c.PySlice_GetIndicesEx", "start"], [56, 3, 1, "c.PySlice_GetIndicesEx", "step"], [56, 3, 1, "c.PySlice_GetIndicesEx", "stop"]], "PySlice_New": [[56, 3, 1, "c.PySlice_New", "start"], [56, 3, 1, "c.PySlice_New", "step"], [56, 3, 1, "c.PySlice_New", "stop"]], "PySlice_Unpack": [[56, 3, 1, "c.PySlice_Unpack", "slice"], [56, 3, 1, "c.PySlice_Unpack", "start"], [56, 3, 1, "c.PySlice_Unpack", "step"], [56, 3, 1, "c.PySlice_Unpack", "stop"]], "PyState_AddModule": [[45, 3, 1, "c.PyState_AddModule", "def"], [45, 3, 1, "c.PyState_AddModule", "module"]], "PyState_FindModule": [[45, 3, 1, "c.PyState_FindModule", "def"]], "PyState_RemoveModule": [[45, 3, 1, "c.PyState_RemoveModule", "def"]], "PyStatus": [[34, 0, 1, "c.PyStatus.err_msg", "err_msg"], [34, 0, 1, "c.PyStatus.exitcode", "exitcode"], [34, 0, 1, "c.PyStatus.func", "func"]], "PyStatus_Error": [[34, 3, 1, "c.PyStatus_Error", "err_msg"]], "PyStatus_Exception": [[34, 3, 1, "c.PyStatus_Exception", "status"]], "PyStatus_Exit": [[34, 3, 1, "c.PyStatus_Exit", "exitcode"]], "PyStatus_IsError": [[34, 3, 1, "c.PyStatus_IsError", "status"]], "PyStatus_IsExit": [[34, 3, 1, "c.PyStatus_IsExit", "status"]], "PyStructSequence_Desc": [[60, 0, 1, "c.PyStructSequence_Desc.doc", "doc"], [60, 0, 1, "c.PyStructSequence_Desc.fields", "fields"], [60, 0, 1, "c.PyStructSequence_Desc.n_in_sequence", "n_in_sequence"], [60, 0, 1, "c.PyStructSequence_Desc.name", "name"]], "PyStructSequence_Field": [[60, 0, 1, "c.PyStructSequence_Field.doc", "doc"], [60, 0, 1, "c.PyStructSequence_Field.name", "name"]], "PyStructSequence_GET_ITEM": [[60, 3, 1, "c.PyStructSequence_GET_ITEM", "p"], [60, 3, 1, "c.PyStructSequence_GET_ITEM", "pos"]], "PyStructSequence_GetItem": [[60, 3, 1, "c.PyStructSequence_GetItem", "p"], [60, 3, 1, "c.PyStructSequence_GetItem", "pos"]], "PyStructSequence_InitType": [[60, 3, 1, "c.PyStructSequence_InitType", "desc"], [60, 3, 1, "c.PyStructSequence_InitType", "type"]], "PyStructSequence_InitType2": [[60, 3, 1, "c.PyStructSequence_InitType2", "desc"], [60, 3, 1, "c.PyStructSequence_InitType2", "type"]], "PyStructSequence_New": [[60, 3, 1, "c.PyStructSequence_New", "type"]], "PyStructSequence_NewType": [[60, 3, 1, "c.PyStructSequence_NewType", "desc"]], "PyStructSequence_SET_ITEM": [[60, 3, 1, "c.PyStructSequence_SET_ITEM", "o"], [60, 3, 1, "c.PyStructSequence_SET_ITEM", "p"], [60, 3, 1, "c.PyStructSequence_SET_ITEM", "pos"]], "PyStructSequence_SetItem": [[60, 3, 1, "c.PyStructSequence_SetItem", "o"], [60, 3, 1, "c.PyStructSequence_SetItem", "p"], [60, 3, 1, "c.PyStructSequence_SetItem", "pos"]], "PySys_AddAuditHook": [[59, 3, 1, "c.PySys_AddAuditHook", "hook"], [59, 3, 1, "c.PySys_AddAuditHook", "userData"]], "PySys_AddWarnOption": [[59, 3, 1, "c.PySys_AddWarnOption", "s"]], "PySys_AddWarnOptionUnicode": [[59, 3, 1, "c.PySys_AddWarnOptionUnicode", "unicode"]], "PySys_AddXOption": [[59, 3, 1, "c.PySys_AddXOption", "s"]], "PySys_Audit": [[59, 3, 1, "c.PySys_Audit", "event"], [59, 3, 1, "c.PySys_Audit", "format"]], "PySys_FormatStderr": [[59, 3, 1, "c.PySys_FormatStderr", "format"]], "PySys_FormatStdout": [[59, 3, 1, "c.PySys_FormatStdout", "format"]], "PySys_GetObject": [[59, 3, 1, "c.PySys_GetObject", "name"]], "PySys_SetArgv": [[33, 3, 1, "c.PySys_SetArgv", "argc"], [33, 3, 1, "c.PySys_SetArgv", "argv"]], "PySys_SetArgvEx": [[33, 3, 1, "c.PySys_SetArgvEx", "argc"], [33, 3, 1, "c.PySys_SetArgvEx", "argv"], [33, 3, 1, "c.PySys_SetArgvEx", "updatepath"]], "PySys_SetObject": [[59, 3, 1, "c.PySys_SetObject", "name"], [59, 3, 1, "c.PySys_SetObject", "v"]], "PySys_SetPath": [[59, 3, 1, "c.PySys_SetPath", "path"]], "PySys_WriteStderr": [[59, 3, 1, "c.PySys_WriteStderr", "format"]], "PySys_WriteStdout": [[59, 3, 1, "c.PySys_WriteStdout", "format"]], "PyTZInfo_Check": [[20, 3, 1, "c.PyTZInfo_Check", "ob"]], "PyTZInfo_CheckExact": [[20, 3, 1, "c.PyTZInfo_CheckExact", "ob"]], "PyThreadState": [[33, 0, 1, "c.PyThreadState.interp", "interp"]], "PyThreadState_Clear": [[33, 3, 1, "c.PyThreadState_Clear", "tstate"]], "PyThreadState_Delete": [[33, 3, 1, "c.PyThreadState_Delete", "tstate"]], "PyThreadState_EnterTracing": [[33, 3, 1, "c.PyThreadState_EnterTracing", "tstate"]], "PyThreadState_GetFrame": [[33, 3, 1, "c.PyThreadState_GetFrame", "tstate"]], "PyThreadState_GetID": [[33, 3, 1, "c.PyThreadState_GetID", "tstate"]], "PyThreadState_GetInterpreter": [[33, 3, 1, "c.PyThreadState_GetInterpreter", "tstate"]], "PyThreadState_LeaveTracing": [[33, 3, 1, "c.PyThreadState_LeaveTracing", "tstate"]], "PyThreadState_New": [[33, 3, 1, "c.PyThreadState_New", "interp"]], "PyThreadState_Next": [[33, 3, 1, "c.PyThreadState_Next", "tstate"]], "PyThreadState_SetAsyncExc": [[33, 3, 1, "c.PyThreadState_SetAsyncExc", "exc"], [33, 3, 1, "c.PyThreadState_SetAsyncExc", "id"]], "PyThreadState_Swap": [[33, 3, 1, "c.PyThreadState_Swap", "tstate"]], "PyThread_delete_key": [[33, 3, 1, "c.PyThread_delete_key", "key"]], "PyThread_delete_key_value": [[33, 3, 1, "c.PyThread_delete_key_value", "key"]], "PyThread_get_key_value": [[33, 3, 1, "c.PyThread_get_key_value", "key"]], "PyThread_set_key_value": [[33, 3, 1, "c.PyThread_set_key_value", "key"], [33, 3, 1, "c.PyThread_set_key_value", "value"]], "PyThread_tss_create": [[33, 3, 1, "c.PyThread_tss_create", "key"]], "PyThread_tss_delete": [[33, 3, 1, "c.PyThread_tss_delete", "key"]], "PyThread_tss_free": [[33, 3, 1, "c.PyThread_tss_free", "key"]], "PyThread_tss_get": [[33, 3, 1, "c.PyThread_tss_get", "key"]], "PyThread_tss_is_created": [[33, 3, 1, "c.PyThread_tss_is_created", "key"]], "PyThread_tss_set": [[33, 3, 1, "c.PyThread_tss_set", "key"], [33, 3, 1, "c.PyThread_tss_set", "value"]], "PyTimeZone_FromOffset": [[20, 3, 1, "c.PyTimeZone_FromOffset", "offset"]], "PyTimeZone_FromOffsetAndName": [[20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "name"], [20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "offset"]], "PyTime_Check": [[20, 3, 1, "c.PyTime_Check", "ob"]], "PyTime_CheckExact": [[20, 3, 1, "c.PyTime_CheckExact", "ob"]], "PyTime_FromTime": [[20, 3, 1, "c.PyTime_FromTime", "hour"], [20, 3, 1, "c.PyTime_FromTime", "minute"], [20, 3, 1, "c.PyTime_FromTime", "second"], [20, 3, 1, "c.PyTime_FromTime", "usecond"]], "PyTime_FromTimeAndFold": [[20, 3, 1, "c.PyTime_FromTimeAndFold", "fold"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "hour"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "minute"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "second"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "usecond"]], "PyTraceMalloc_Track": [[42, 3, 1, "c.PyTraceMalloc_Track", "domain"], [42, 3, 1, "c.PyTraceMalloc_Track", "ptr"], [42, 3, 1, "c.PyTraceMalloc_Track", "size"]], "PyTraceMalloc_Untrack": [[42, 3, 1, "c.PyTraceMalloc_Untrack", "domain"], [42, 3, 1, "c.PyTraceMalloc_Untrack", "ptr"]], "PyTuple_Check": [[60, 3, 1, "c.PyTuple_Check", "p"]], "PyTuple_CheckExact": [[60, 3, 1, "c.PyTuple_CheckExact", "p"]], "PyTuple_GET_ITEM": [[60, 3, 1, "c.PyTuple_GET_ITEM", "p"], [60, 3, 1, "c.PyTuple_GET_ITEM", "pos"]], "PyTuple_GET_SIZE": [[60, 3, 1, "c.PyTuple_GET_SIZE", "p"]], "PyTuple_GetItem": [[60, 3, 1, "c.PyTuple_GetItem", "p"], [60, 3, 1, "c.PyTuple_GetItem", "pos"]], "PyTuple_GetSlice": [[60, 3, 1, "c.PyTuple_GetSlice", "high"], [60, 3, 1, "c.PyTuple_GetSlice", "low"], [60, 3, 1, "c.PyTuple_GetSlice", "p"]], "PyTuple_New": [[60, 3, 1, "c.PyTuple_New", "len"]], "PyTuple_Pack": [[60, 3, 1, "c.PyTuple_Pack", "n"]], "PyTuple_SET_ITEM": [[60, 3, 1, "c.PyTuple_SET_ITEM", "o"], [60, 3, 1, "c.PyTuple_SET_ITEM", "p"], [60, 3, 1, "c.PyTuple_SET_ITEM", "pos"]], "PyTuple_SetItem": [[60, 3, 1, "c.PyTuple_SetItem", "o"], [60, 3, 1, "c.PyTuple_SetItem", "p"], [60, 3, 1, "c.PyTuple_SetItem", "pos"]], "PyTuple_Size": [[60, 3, 1, "c.PyTuple_Size", "p"]], "PyTypeObject": [[63, 0, 1, "c.PyTypeObject.tp_alloc", "tp_alloc"], [63, 0, 1, "c.PyTypeObject.tp_as_async", "tp_as_async"], [63, 0, 1, "c.PyTypeObject.tp_as_buffer", "tp_as_buffer"], [63, 0, 1, "c.PyTypeObject.tp_as_mapping", "tp_as_mapping"], [63, 0, 1, "c.PyTypeObject.tp_as_number", "tp_as_number"], [63, 0, 1, "c.PyTypeObject.tp_as_sequence", "tp_as_sequence"], [63, 0, 1, "c.PyTypeObject.tp_base", "tp_base"], [63, 0, 1, "c.PyTypeObject.tp_bases", "tp_bases"], [63, 0, 1, "c.PyTypeObject.tp_basicsize", "tp_basicsize"], [63, 0, 1, "c.PyTypeObject.tp_cache", "tp_cache"], [63, 0, 1, "c.PyTypeObject.tp_call", "tp_call"], [63, 0, 1, "c.PyTypeObject.tp_clear", "tp_clear"], [63, 0, 1, "c.PyTypeObject.tp_dealloc", "tp_dealloc"], [63, 0, 1, "c.PyTypeObject.tp_del", "tp_del"], [63, 0, 1, "c.PyTypeObject.tp_descr_get", "tp_descr_get"], [63, 0, 1, "c.PyTypeObject.tp_descr_set", "tp_descr_set"], [63, 0, 1, "c.PyTypeObject.tp_dict", "tp_dict"], [63, 0, 1, "c.PyTypeObject.tp_dictoffset", "tp_dictoffset"], [63, 0, 1, "c.PyTypeObject.tp_doc", "tp_doc"], [63, 0, 1, "c.PyTypeObject.tp_finalize", "tp_finalize"], [63, 0, 1, "c.PyTypeObject.tp_flags", "tp_flags"], [63, 0, 1, "c.PyTypeObject.tp_free", "tp_free"], [63, 0, 1, "c.PyTypeObject.tp_getattr", "tp_getattr"], [63, 0, 1, "c.PyTypeObject.tp_getattro", "tp_getattro"], [63, 0, 1, "c.PyTypeObject.tp_getset", "tp_getset"], [63, 0, 1, "c.PyTypeObject.tp_hash", "tp_hash"], [63, 0, 1, "c.PyTypeObject.tp_init", "tp_init"], [63, 0, 1, "c.PyTypeObject.tp_is_gc", "tp_is_gc"], [63, 0, 1, "c.PyTypeObject.tp_itemsize", "tp_itemsize"], [63, 0, 1, "c.PyTypeObject.tp_iter", "tp_iter"], [63, 0, 1, "c.PyTypeObject.tp_iternext", "tp_iternext"], [63, 0, 1, "c.PyTypeObject.tp_members", "tp_members"], [63, 0, 1, "c.PyTypeObject.tp_methods", "tp_methods"], [63, 0, 1, "c.PyTypeObject.tp_mro", "tp_mro"], [63, 0, 1, "c.PyTypeObject.tp_name", "tp_name"], [63, 0, 1, "c.PyTypeObject.tp_new", "tp_new"], [63, 0, 1, "c.PyTypeObject.tp_repr", "tp_repr"], [63, 0, 1, "c.PyTypeObject.tp_richcompare", "tp_richcompare"], [63, 0, 1, "c.PyTypeObject.tp_setattr", "tp_setattr"], [63, 0, 1, "c.PyTypeObject.tp_setattro", "tp_setattro"], [63, 0, 1, "c.PyTypeObject.tp_str", "tp_str"], [63, 0, 1, "c.PyTypeObject.tp_subclasses", "tp_subclasses"], [63, 0, 1, "c.PyTypeObject.tp_traverse", "tp_traverse"], [63, 0, 1, "c.PyTypeObject.tp_vectorcall", "tp_vectorcall"], [63, 0, 1, "c.PyTypeObject.tp_vectorcall_offset", "tp_vectorcall_offset"], [63, 0, 1, "c.PyTypeObject.tp_version_tag", "tp_version_tag"], [63, 0, 1, "c.PyTypeObject.tp_watched", "tp_watched"], [63, 0, 1, "c.PyTypeObject.tp_weaklist", "tp_weaklist"], [63, 0, 1, "c.PyTypeObject.tp_weaklistoffset", "tp_weaklistoffset"]], "PyType_AddWatcher": [[61, 3, 1, "c.PyType_AddWatcher", "callback"]], "PyType_Check": [[61, 3, 1, "c.PyType_Check", "o"]], "PyType_CheckExact": [[61, 3, 1, "c.PyType_CheckExact", "o"]], "PyType_ClearWatcher": [[61, 3, 1, "c.PyType_ClearWatcher", "watcher_id"]], "PyType_FromMetaclass": [[61, 3, 1, "c.PyType_FromMetaclass", "bases"], [61, 3, 1, "c.PyType_FromMetaclass", "metaclass"], [61, 3, 1, "c.PyType_FromMetaclass", "module"], [61, 3, 1, "c.PyType_FromMetaclass", "spec"]], "PyType_FromModuleAndSpec": [[61, 3, 1, "c.PyType_FromModuleAndSpec", "bases"], [61, 3, 1, "c.PyType_FromModuleAndSpec", "module"], [61, 3, 1, "c.PyType_FromModuleAndSpec", "spec"]], "PyType_FromSpec": [[61, 3, 1, "c.PyType_FromSpec", "spec"]], "PyType_FromSpecWithBases": [[61, 3, 1, "c.PyType_FromSpecWithBases", "bases"], [61, 3, 1, "c.PyType_FromSpecWithBases", "spec"]], "PyType_GenericAlloc": [[61, 3, 1, "c.PyType_GenericAlloc", "nitems"], [61, 3, 1, "c.PyType_GenericAlloc", "type"]], "PyType_GenericNew": [[61, 3, 1, "c.PyType_GenericNew", "args"], [61, 3, 1, "c.PyType_GenericNew", "kwds"], [61, 3, 1, "c.PyType_GenericNew", "type"]], "PyType_GetDict": [[61, 3, 1, "c.PyType_GetDict", "type"]], "PyType_GetFlags": [[61, 3, 1, "c.PyType_GetFlags", "type"]], "PyType_GetModule": [[61, 3, 1, "c.PyType_GetModule", "type"]], "PyType_GetModuleByDef": [[61, 3, 1, "c.PyType_GetModuleByDef", "def"], [61, 3, 1, "c.PyType_GetModuleByDef", "type"]], "PyType_GetModuleState": [[61, 3, 1, "c.PyType_GetModuleState", "type"]], "PyType_GetName": [[61, 3, 1, "c.PyType_GetName", "type"]], "PyType_GetQualName": [[61, 3, 1, "c.PyType_GetQualName", "type"]], "PyType_GetSlot": [[61, 3, 1, "c.PyType_GetSlot", "slot"], [61, 3, 1, "c.PyType_GetSlot", "type"]], "PyType_GetTypeDataSize": [[49, 3, 1, "c.PyType_GetTypeDataSize", "cls"]], "PyType_HasFeature": [[61, 3, 1, "c.PyType_HasFeature", "feature"], [61, 3, 1, "c.PyType_HasFeature", "o"]], "PyType_IS_GC": [[61, 3, 1, "c.PyType_IS_GC", "o"]], "PyType_IsSubtype": [[61, 3, 1, "c.PyType_IsSubtype", "a"], [61, 3, 1, "c.PyType_IsSubtype", "b"]], "PyType_Modified": [[61, 3, 1, "c.PyType_Modified", "type"]], "PyType_Ready": [[61, 3, 1, "c.PyType_Ready", "type"]], "PyType_Slot": [[61, 0, 1, "c.PyType_Slot.pfunc", "pfunc"], [61, 0, 1, "c.PyType_Slot.slot", "slot"]], "PyType_Spec": [[61, 0, 1, "c.PyType_Spec.basicsize", "basicsize"], [61, 0, 1, "c.PyType_Spec.flags", "flags"], [61, 0, 1, "c.PyType_Spec.itemsize", "itemsize"], [61, 0, 1, "c.PyType_Spec.name", "name"], [61, 0, 1, "c.PyType_Spec.slots", "slots"]], "PyType_Watch": [[61, 3, 1, "c.PyType_Watch", "type"], [61, 3, 1, "c.PyType_Watch", "watcher_id"]], "PyUnicodeDecodeError_Create": [[23, 3, 1, "c.PyUnicodeDecodeError_Create", "encoding"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "length"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "object"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "reason"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "start"]], "PyUnicodeDecodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEncoding", "exc"]], "PyUnicodeDecodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "exc"]], "PyUnicodeDecodeError_GetObject": [[23, 3, 1, "c.PyUnicodeDecodeError_GetObject", "exc"]], "PyUnicodeDecodeError_GetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_GetReason", "exc"]], "PyUnicodeDecodeError_GetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "start"]], "PyUnicodeDecodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "exc"]], "PyUnicodeDecodeError_SetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "reason"]], "PyUnicodeDecodeError_SetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "start"]], "PyUnicodeEncodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEncoding", "exc"]], "PyUnicodeEncodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "exc"]], "PyUnicodeEncodeError_GetObject": [[23, 3, 1, "c.PyUnicodeEncodeError_GetObject", "exc"]], "PyUnicodeEncodeError_GetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_GetReason", "exc"]], "PyUnicodeEncodeError_GetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "start"]], "PyUnicodeEncodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "exc"]], "PyUnicodeEncodeError_SetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "reason"]], "PyUnicodeEncodeError_SetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "start"]], "PyUnicodeTranslateError_GetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "exc"]], "PyUnicodeTranslateError_GetObject": [[23, 3, 1, "c.PyUnicodeTranslateError_GetObject", "exc"]], "PyUnicodeTranslateError_GetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_GetReason", "exc"]], "PyUnicodeTranslateError_GetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "start"]], "PyUnicodeTranslateError_SetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "exc"]], "PyUnicodeTranslateError_SetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "reason"]], "PyUnicodeTranslateError_SetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "start"]], "PyUnicode_1BYTE_DATA": [[64, 3, 1, "c.PyUnicode_1BYTE_DATA", "unicode"]], "PyUnicode_2BYTE_DATA": [[64, 3, 1, "c.PyUnicode_2BYTE_DATA", "unicode"]], "PyUnicode_4BYTE_DATA": [[64, 3, 1, "c.PyUnicode_4BYTE_DATA", "unicode"]], "PyUnicode_AsASCIIString": [[64, 3, 1, "c.PyUnicode_AsASCIIString", "unicode"]], "PyUnicode_AsCharmapString": [[64, 3, 1, "c.PyUnicode_AsCharmapString", "mapping"], [64, 3, 1, "c.PyUnicode_AsCharmapString", "unicode"]], "PyUnicode_AsEncodedString": [[64, 3, 1, "c.PyUnicode_AsEncodedString", "encoding"], [64, 3, 1, "c.PyUnicode_AsEncodedString", "errors"], [64, 3, 1, "c.PyUnicode_AsEncodedString", "unicode"]], "PyUnicode_AsLatin1String": [[64, 3, 1, "c.PyUnicode_AsLatin1String", "unicode"]], "PyUnicode_AsMBCSString": [[64, 3, 1, "c.PyUnicode_AsMBCSString", "unicode"]], "PyUnicode_AsRawUnicodeEscapeString": [[64, 3, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "unicode"]], "PyUnicode_AsUCS4": [[64, 3, 1, "c.PyUnicode_AsUCS4", "buffer"], [64, 3, 1, "c.PyUnicode_AsUCS4", "buflen"], [64, 3, 1, "c.PyUnicode_AsUCS4", "copy_null"], [64, 3, 1, "c.PyUnicode_AsUCS4", "unicode"]], "PyUnicode_AsUCS4Copy": [[64, 3, 1, "c.PyUnicode_AsUCS4Copy", "unicode"]], "PyUnicode_AsUTF16String": [[64, 3, 1, "c.PyUnicode_AsUTF16String", "unicode"]], "PyUnicode_AsUTF32String": [[64, 3, 1, "c.PyUnicode_AsUTF32String", "unicode"]], "PyUnicode_AsUTF8": [[64, 3, 1, "c.PyUnicode_AsUTF8", "unicode"]], "PyUnicode_AsUTF8AndSize": [[64, 3, 1, "c.PyUnicode_AsUTF8AndSize", "size"], [64, 3, 1, "c.PyUnicode_AsUTF8AndSize", "unicode"]], "PyUnicode_AsUTF8String": [[64, 3, 1, "c.PyUnicode_AsUTF8String", "unicode"]], "PyUnicode_AsUnicodeEscapeString": [[64, 3, 1, "c.PyUnicode_AsUnicodeEscapeString", "unicode"]], "PyUnicode_AsWideChar": [[64, 3, 1, "c.PyUnicode_AsWideChar", "size"], [64, 3, 1, "c.PyUnicode_AsWideChar", "unicode"], [64, 3, 1, "c.PyUnicode_AsWideChar", "wstr"]], "PyUnicode_AsWideCharString": [[64, 3, 1, "c.PyUnicode_AsWideCharString", "size"], [64, 3, 1, "c.PyUnicode_AsWideCharString", "unicode"]], "PyUnicode_Check": [[64, 3, 1, "c.PyUnicode_Check", "obj"]], "PyUnicode_CheckExact": [[64, 3, 1, "c.PyUnicode_CheckExact", "obj"]], "PyUnicode_Compare": [[64, 3, 1, "c.PyUnicode_Compare", "left"], [64, 3, 1, "c.PyUnicode_Compare", "right"]], "PyUnicode_CompareWithASCIIString": [[64, 3, 1, "c.PyUnicode_CompareWithASCIIString", "string"], [64, 3, 1, "c.PyUnicode_CompareWithASCIIString", "unicode"]], "PyUnicode_Concat": [[64, 3, 1, "c.PyUnicode_Concat", "left"], [64, 3, 1, "c.PyUnicode_Concat", "right"]], "PyUnicode_Contains": [[64, 3, 1, "c.PyUnicode_Contains", "substr"], [64, 3, 1, "c.PyUnicode_Contains", "unicode"]], "PyUnicode_CopyCharacters": [[64, 3, 1, "c.PyUnicode_CopyCharacters", "from"], [64, 3, 1, "c.PyUnicode_CopyCharacters", "from_start"], [64, 3, 1, "c.PyUnicode_CopyCharacters", "how_many"], [64, 3, 1, "c.PyUnicode_CopyCharacters", "to"], [64, 3, 1, "c.PyUnicode_CopyCharacters", "to_start"]], "PyUnicode_Count": [[64, 3, 1, "c.PyUnicode_Count", "end"], [64, 3, 1, "c.PyUnicode_Count", "start"], [64, 3, 1, "c.PyUnicode_Count", "substr"], [64, 3, 1, "c.PyUnicode_Count", "unicode"]], "PyUnicode_DATA": [[64, 3, 1, "c.PyUnicode_DATA", "unicode"]], "PyUnicode_Decode": [[64, 3, 1, "c.PyUnicode_Decode", "encoding"], [64, 3, 1, "c.PyUnicode_Decode", "errors"], [64, 3, 1, "c.PyUnicode_Decode", "size"], [64, 3, 1, "c.PyUnicode_Decode", "str"]], "PyUnicode_DecodeASCII": [[64, 3, 1, "c.PyUnicode_DecodeASCII", "errors"], [64, 3, 1, "c.PyUnicode_DecodeASCII", "size"], [64, 3, 1, "c.PyUnicode_DecodeASCII", "str"]], "PyUnicode_DecodeCharmap": [[64, 3, 1, "c.PyUnicode_DecodeCharmap", "errors"], [64, 3, 1, "c.PyUnicode_DecodeCharmap", "length"], [64, 3, 1, "c.PyUnicode_DecodeCharmap", "mapping"], [64, 3, 1, "c.PyUnicode_DecodeCharmap", "str"]], "PyUnicode_DecodeFSDefault": [[64, 3, 1, "c.PyUnicode_DecodeFSDefault", "str"]], "PyUnicode_DecodeFSDefaultAndSize": [[64, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "size"], [64, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "str"]], "PyUnicode_DecodeLatin1": [[64, 3, 1, "c.PyUnicode_DecodeLatin1", "errors"], [64, 3, 1, "c.PyUnicode_DecodeLatin1", "size"], [64, 3, 1, "c.PyUnicode_DecodeLatin1", "str"]], "PyUnicode_DecodeLocale": [[64, 3, 1, "c.PyUnicode_DecodeLocale", "errors"], [64, 3, 1, "c.PyUnicode_DecodeLocale", "str"]], "PyUnicode_DecodeLocaleAndSize": [[64, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "errors"], [64, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "length"], [64, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "str"]], "PyUnicode_DecodeMBCS": [[64, 3, 1, "c.PyUnicode_DecodeMBCS", "errors"], [64, 3, 1, "c.PyUnicode_DecodeMBCS", "size"], [64, 3, 1, "c.PyUnicode_DecodeMBCS", "str"]], "PyUnicode_DecodeMBCSStateful": [[64, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "consumed"], [64, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "errors"], [64, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "size"], [64, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "str"]], "PyUnicode_DecodeRawUnicodeEscape": [[64, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "errors"], [64, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "size"], [64, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "str"]], "PyUnicode_DecodeUTF16": [[64, 3, 1, "c.PyUnicode_DecodeUTF16", "byteorder"], [64, 3, 1, "c.PyUnicode_DecodeUTF16", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF16", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF16", "str"]], "PyUnicode_DecodeUTF16Stateful": [[64, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "byteorder"], [64, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "consumed"], [64, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "str"]], "PyUnicode_DecodeUTF32": [[64, 3, 1, "c.PyUnicode_DecodeUTF32", "byteorder"], [64, 3, 1, "c.PyUnicode_DecodeUTF32", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF32", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF32", "str"]], "PyUnicode_DecodeUTF32Stateful": [[64, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "byteorder"], [64, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "consumed"], [64, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "str"]], "PyUnicode_DecodeUTF7": [[64, 3, 1, "c.PyUnicode_DecodeUTF7", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF7", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF7", "str"]], "PyUnicode_DecodeUTF7Stateful": [[64, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "consumed"], [64, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "str"]], "PyUnicode_DecodeUTF8": [[64, 3, 1, "c.PyUnicode_DecodeUTF8", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF8", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF8", "str"]], "PyUnicode_DecodeUTF8Stateful": [[64, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "consumed"], [64, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "str"]], "PyUnicode_DecodeUnicodeEscape": [[64, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "size"], [64, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "str"]], "PyUnicode_EncodeCodePage": [[64, 3, 1, "c.PyUnicode_EncodeCodePage", "code_page"], [64, 3, 1, "c.PyUnicode_EncodeCodePage", "errors"], [64, 3, 1, "c.PyUnicode_EncodeCodePage", "unicode"]], "PyUnicode_EncodeFSDefault": [[64, 3, 1, "c.PyUnicode_EncodeFSDefault", "unicode"]], "PyUnicode_EncodeLocale": [[64, 3, 1, "c.PyUnicode_EncodeLocale", "errors"], [64, 3, 1, "c.PyUnicode_EncodeLocale", "unicode"]], "PyUnicode_FSConverter": [[64, 3, 1, "c.PyUnicode_FSConverter", "obj"], [64, 3, 1, "c.PyUnicode_FSConverter", "result"]], "PyUnicode_FSDecoder": [[64, 3, 1, "c.PyUnicode_FSDecoder", "obj"], [64, 3, 1, "c.PyUnicode_FSDecoder", "result"]], "PyUnicode_Fill": [[64, 3, 1, "c.PyUnicode_Fill", "fill_char"], [64, 3, 1, "c.PyUnicode_Fill", "length"], [64, 3, 1, "c.PyUnicode_Fill", "start"], [64, 3, 1, "c.PyUnicode_Fill", "unicode"]], "PyUnicode_Find": [[64, 3, 1, "c.PyUnicode_Find", "direction"], [64, 3, 1, "c.PyUnicode_Find", "end"], [64, 3, 1, "c.PyUnicode_Find", "start"], [64, 3, 1, "c.PyUnicode_Find", "substr"], [64, 3, 1, "c.PyUnicode_Find", "unicode"]], "PyUnicode_FindChar": [[64, 3, 1, "c.PyUnicode_FindChar", "ch"], [64, 3, 1, "c.PyUnicode_FindChar", "direction"], [64, 3, 1, "c.PyUnicode_FindChar", "end"], [64, 3, 1, "c.PyUnicode_FindChar", "start"], [64, 3, 1, "c.PyUnicode_FindChar", "unicode"]], "PyUnicode_Format": [[64, 3, 1, "c.PyUnicode_Format", "args"], [64, 3, 1, "c.PyUnicode_Format", "format"]], "PyUnicode_FromEncodedObject": [[64, 3, 1, "c.PyUnicode_FromEncodedObject", "encoding"], [64, 3, 1, "c.PyUnicode_FromEncodedObject", "errors"], [64, 3, 1, "c.PyUnicode_FromEncodedObject", "obj"]], "PyUnicode_FromFormat": [[64, 3, 1, "c.PyUnicode_FromFormat", "format"]], "PyUnicode_FromFormatV": [[64, 3, 1, "c.PyUnicode_FromFormatV", "format"], [64, 3, 1, "c.PyUnicode_FromFormatV", "vargs"]], "PyUnicode_FromKindAndData": [[64, 3, 1, "c.PyUnicode_FromKindAndData", "buffer"], [64, 3, 1, "c.PyUnicode_FromKindAndData", "kind"], [64, 3, 1, "c.PyUnicode_FromKindAndData", "size"]], "PyUnicode_FromObject": [[64, 3, 1, "c.PyUnicode_FromObject", "obj"]], "PyUnicode_FromString": [[64, 3, 1, "c.PyUnicode_FromString", "str"]], "PyUnicode_FromStringAndSize": [[64, 3, 1, "c.PyUnicode_FromStringAndSize", "size"], [64, 3, 1, "c.PyUnicode_FromStringAndSize", "str"]], "PyUnicode_FromWideChar": [[64, 3, 1, "c.PyUnicode_FromWideChar", "size"], [64, 3, 1, "c.PyUnicode_FromWideChar", "wstr"]], "PyUnicode_GET_LENGTH": [[64, 3, 1, "c.PyUnicode_GET_LENGTH", "unicode"]], "PyUnicode_GetLength": [[64, 3, 1, "c.PyUnicode_GetLength", "unicode"]], "PyUnicode_InternFromString": [[64, 3, 1, "c.PyUnicode_InternFromString", "str"]], "PyUnicode_InternInPlace": [[64, 3, 1, "c.PyUnicode_InternInPlace", "p_unicode"]], "PyUnicode_IsIdentifier": [[64, 3, 1, "c.PyUnicode_IsIdentifier", "unicode"]], "PyUnicode_Join": [[64, 3, 1, "c.PyUnicode_Join", "separator"], [64, 3, 1, "c.PyUnicode_Join", "seq"]], "PyUnicode_KIND": [[64, 3, 1, "c.PyUnicode_KIND", "unicode"]], "PyUnicode_MAX_CHAR_VALUE": [[64, 3, 1, "c.PyUnicode_MAX_CHAR_VALUE", "unicode"]], "PyUnicode_New": [[64, 3, 1, "c.PyUnicode_New", "maxchar"], [64, 3, 1, "c.PyUnicode_New", "size"]], "PyUnicode_READ": [[64, 3, 1, "c.PyUnicode_READ", "data"], [64, 3, 1, "c.PyUnicode_READ", "index"], [64, 3, 1, "c.PyUnicode_READ", "kind"]], "PyUnicode_READY": [[64, 3, 1, "c.PyUnicode_READY", "unicode"]], "PyUnicode_READ_CHAR": [[64, 3, 1, "c.PyUnicode_READ_CHAR", "index"], [64, 3, 1, "c.PyUnicode_READ_CHAR", "unicode"]], "PyUnicode_ReadChar": [[64, 3, 1, "c.PyUnicode_ReadChar", "index"], [64, 3, 1, "c.PyUnicode_ReadChar", "unicode"]], "PyUnicode_Replace": [[64, 3, 1, "c.PyUnicode_Replace", "maxcount"], [64, 3, 1, "c.PyUnicode_Replace", "replstr"], [64, 3, 1, "c.PyUnicode_Replace", "substr"], [64, 3, 1, "c.PyUnicode_Replace", "unicode"]], "PyUnicode_RichCompare": [[64, 3, 1, "c.PyUnicode_RichCompare", "left"], [64, 3, 1, "c.PyUnicode_RichCompare", "op"], [64, 3, 1, "c.PyUnicode_RichCompare", "right"]], "PyUnicode_Split": [[64, 3, 1, "c.PyUnicode_Split", "maxsplit"], [64, 3, 1, "c.PyUnicode_Split", "sep"], [64, 3, 1, "c.PyUnicode_Split", "unicode"]], "PyUnicode_Splitlines": [[64, 3, 1, "c.PyUnicode_Splitlines", "keepends"], [64, 3, 1, "c.PyUnicode_Splitlines", "unicode"]], "PyUnicode_Substring": [[64, 3, 1, "c.PyUnicode_Substring", "end"], [64, 3, 1, "c.PyUnicode_Substring", "start"], [64, 3, 1, "c.PyUnicode_Substring", "unicode"]], "PyUnicode_Tailmatch": [[64, 3, 1, "c.PyUnicode_Tailmatch", "direction"], [64, 3, 1, "c.PyUnicode_Tailmatch", "end"], [64, 3, 1, "c.PyUnicode_Tailmatch", "start"], [64, 3, 1, "c.PyUnicode_Tailmatch", "substr"], [64, 3, 1, "c.PyUnicode_Tailmatch", "unicode"]], "PyUnicode_Translate": [[64, 3, 1, "c.PyUnicode_Translate", "errors"], [64, 3, 1, "c.PyUnicode_Translate", "table"], [64, 3, 1, "c.PyUnicode_Translate", "unicode"]], "PyUnicode_WRITE": [[64, 3, 1, "c.PyUnicode_WRITE", "data"], [64, 3, 1, "c.PyUnicode_WRITE", "index"], [64, 3, 1, "c.PyUnicode_WRITE", "kind"], [64, 3, 1, "c.PyUnicode_WRITE", "value"]], "PyUnicode_WriteChar": [[64, 3, 1, "c.PyUnicode_WriteChar", "character"], [64, 3, 1, "c.PyUnicode_WriteChar", "index"], [64, 3, 1, "c.PyUnicode_WriteChar", "unicode"]], "PyUnstable_Code_GetExtra": [[13, 3, 1, "c.PyUnstable_Code_GetExtra", "code"], [13, 3, 1, "c.PyUnstable_Code_GetExtra", "extra"], [13, 3, 1, "c.PyUnstable_Code_GetExtra", "index"]], "PyUnstable_Code_New": [[13, 3, 1, "c.PyUnstable_Code_New", "argcount"], [13, 3, 1, "c.PyUnstable_Code_New", "cellvars"], [13, 3, 1, "c.PyUnstable_Code_New", "code"], [13, 3, 1, "c.PyUnstable_Code_New", "consts"], [13, 3, 1, "c.PyUnstable_Code_New", "exceptiontable"], [13, 3, 1, "c.PyUnstable_Code_New", "filename"], [13, 3, 1, "c.PyUnstable_Code_New", "firstlineno"], [13, 3, 1, "c.PyUnstable_Code_New", "flags"], [13, 3, 1, "c.PyUnstable_Code_New", "freevars"], [13, 3, 1, "c.PyUnstable_Code_New", "kwonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_New", "linetable"], [13, 3, 1, "c.PyUnstable_Code_New", "name"], [13, 3, 1, "c.PyUnstable_Code_New", "names"], [13, 3, 1, "c.PyUnstable_Code_New", "nlocals"], [13, 3, 1, "c.PyUnstable_Code_New", "qualname"], [13, 3, 1, "c.PyUnstable_Code_New", "stacksize"], [13, 3, 1, "c.PyUnstable_Code_New", "varnames"]], "PyUnstable_Code_NewWithPosOnlyArgs": [[13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "argcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "cellvars"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "code"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "consts"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "exceptiontable"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "filename"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "firstlineno"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "flags"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "freevars"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "kwonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "linetable"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "name"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "names"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "nlocals"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "posonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "qualname"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "stacksize"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "varnames"]], "PyUnstable_Code_SetExtra": [[13, 3, 1, "c.PyUnstable_Code_SetExtra", "code"], [13, 3, 1, "c.PyUnstable_Code_SetExtra", "extra"], [13, 3, 1, "c.PyUnstable_Code_SetExtra", "index"]], "PyUnstable_Eval_RequestCodeExtraIndex": [[13, 3, 1, "c.PyUnstable_Eval_RequestCodeExtraIndex", "free"]], "PyUnstable_Exc_PrepReraiseStar": [[23, 3, 1, "c.PyUnstable_Exc_PrepReraiseStar", "excs"], [23, 3, 1, "c.PyUnstable_Exc_PrepReraiseStar", "orig"]], "PyUnstable_GC_VisitObjects": [[28, 3, 1, "c.PyUnstable_GC_VisitObjects", "arg"], [28, 3, 1, "c.PyUnstable_GC_VisitObjects", "callback"]], "PyUnstable_InterpreterFrame_GetCode": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetCode", "frame"]], "PyUnstable_InterpreterFrame_GetLasti": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetLasti", "frame"]], "PyUnstable_InterpreterFrame_GetLine": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetLine", "frame"]], "PyUnstable_Long_CompactValue": [[39, 3, 1, "c.PyUnstable_Long_CompactValue", "op"]], "PyUnstable_Long_IsCompact": [[39, 3, 1, "c.PyUnstable_Long_IsCompact", "op"]], "PyUnstable_Object_GC_NewWithExtraData": [[28, 3, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "extra_size"], [28, 3, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "type"]], "PyUnstable_Type_AssignVersionTag": [[61, 3, 1, "c.PyUnstable_Type_AssignVersionTag", "type"]], "PyUnstable_WritePerfMapEntry": [[51, 3, 1, "c.PyUnstable_WritePerfMapEntry", "code_addr"], [51, 3, 1, "c.PyUnstable_WritePerfMapEntry", "code_size"], [51, 3, 1, "c.PyUnstable_WritePerfMapEntry", "entry_name"]], "PyVarObject": [[63, 0, 1, "c.PyVarObject.ob_size", "ob_size"]], "PyVectorcall_Call": [[10, 3, 1, "c.PyVectorcall_Call", "callable"], [10, 3, 1, "c.PyVectorcall_Call", "dict"], [10, 3, 1, "c.PyVectorcall_Call", "tuple"]], "PyVectorcall_Function": [[10, 3, 1, "c.PyVectorcall_Function", "op"]], "PyVectorcall_NARGS": [[10, 3, 1, "c.PyVectorcall_NARGS", "nargsf"]], "PyWeakref_Check": [[67, 3, 1, "c.PyWeakref_Check", "ob"]], "PyWeakref_CheckProxy": [[67, 3, 1, "c.PyWeakref_CheckProxy", "ob"]], "PyWeakref_CheckRef": [[67, 3, 1, "c.PyWeakref_CheckRef", "ob"]], "PyWeakref_GET_OBJECT": [[67, 3, 1, "c.PyWeakref_GET_OBJECT", "ref"]], "PyWeakref_GetObject": [[67, 3, 1, "c.PyWeakref_GetObject", "ref"]], "PyWeakref_NewProxy": [[67, 3, 1, "c.PyWeakref_NewProxy", "callback"], [67, 3, 1, "c.PyWeakref_NewProxy", "ob"]], "PyWeakref_NewRef": [[67, 3, 1, "c.PyWeakref_NewRef", "callback"], [67, 3, 1, "c.PyWeakref_NewRef", "ob"]], "PyWideStringList": [[34, 0, 1, "c.PyWideStringList.items", "items"], [34, 0, 1, "c.PyWideStringList.length", "length"]], "PyWideStringList_Append": [[34, 3, 1, "c.PyWideStringList_Append", "item"], [34, 3, 1, "c.PyWideStringList_Append", "list"]], "PyWideStringList_Insert": [[34, 3, 1, "c.PyWideStringList_Insert", "index"], [34, 3, 1, "c.PyWideStringList_Insert", "item"], [34, 3, 1, "c.PyWideStringList_Insert", "list"]], "Py_AddPendingCall": [[33, 3, 1, "c.Py_AddPendingCall", "arg"], [33, 3, 1, "c.Py_AddPendingCall", "func"]], "Py_AtExit": [[59, 3, 1, "c.Py_AtExit", "func"]], "Py_BuildValue": [[5, 3, 1, "c.Py_BuildValue", "format"]], "Py_BytesMain": [[66, 3, 1, "c.Py_BytesMain", "argc"], [66, 3, 1, "c.Py_BytesMain", "argv"]], "Py_CLEAR": [[52, 3, 1, "c.Py_CLEAR", "o"]], "Py_CompileString": [[66, 3, 1, "c.Py_CompileString", "filename"], [66, 3, 1, "c.Py_CompileString", "start"], [66, 3, 1, "c.Py_CompileString", "str"]], "Py_CompileStringExFlags": [[66, 3, 1, "c.Py_CompileStringExFlags", "filename"], [66, 3, 1, "c.Py_CompileStringExFlags", "flags"], [66, 3, 1, "c.Py_CompileStringExFlags", "optimize"], [66, 3, 1, "c.Py_CompileStringExFlags", "start"], [66, 3, 1, "c.Py_CompileStringExFlags", "str"]], "Py_CompileStringFlags": [[66, 3, 1, "c.Py_CompileStringFlags", "filename"], [66, 3, 1, "c.Py_CompileStringFlags", "flags"], [66, 3, 1, "c.Py_CompileStringFlags", "start"], [66, 3, 1, "c.Py_CompileStringFlags", "str"]], "Py_CompileStringObject": [[66, 3, 1, "c.Py_CompileStringObject", "filename"], [66, 3, 1, "c.Py_CompileStringObject", "flags"], [66, 3, 1, "c.Py_CompileStringObject", "optimize"], [66, 3, 1, "c.Py_CompileStringObject", "start"], [66, 3, 1, "c.Py_CompileStringObject", "str"]], "Py_DECREF": [[52, 3, 1, "c.Py_DECREF", "o"]], "Py_DecRef": [[52, 3, 1, "c.Py_DecRef", "o"]], "Py_DecodeLocale": [[59, 3, 1, "c.Py_DecodeLocale", "arg"], [59, 3, 1, "c.Py_DecodeLocale", "size"]], "Py_EncodeLocale": [[59, 3, 1, "c.Py_EncodeLocale", "error_pos"], [59, 3, 1, "c.Py_EncodeLocale", "text"]], "Py_EndInterpreter": [[33, 3, 1, "c.Py_EndInterpreter", "tstate"]], "Py_EnterRecursiveCall": [[23, 3, 1, "c.Py_EnterRecursiveCall", "where"]], "Py_Exit": [[59, 3, 1, "c.Py_Exit", "status"]], "Py_ExitStatusException": [[34, 3, 1, "c.Py_ExitStatusException", "status"]], "Py_FatalError": [[59, 3, 1, "c.Py_FatalError", "message"]], "Py_FdIsInteractive": [[59, 3, 1, "c.Py_FdIsInteractive", "filename"], [59, 3, 1, "c.Py_FdIsInteractive", "fp"]], "Py_GenericAlias": [[62, 3, 1, "c.Py_GenericAlias", "args"], [62, 3, 1, "c.Py_GenericAlias", "origin"]], "Py_GetArgcArgv": [[34, 3, 1, "c.Py_GetArgcArgv", "argc"], [34, 3, 1, "c.Py_GetArgcArgv", "argv"]], "Py_INCREF": [[52, 3, 1, "c.Py_INCREF", "o"]], "Py_IS_TYPE": [[58, 3, 1, "c.Py_IS_TYPE", "o"], [58, 3, 1, "c.Py_IS_TYPE", "type"]], "Py_IncRef": [[52, 3, 1, "c.Py_IncRef", "o"]], "Py_InitializeEx": [[33, 3, 1, "c.Py_InitializeEx", "initsigs"]], "Py_InitializeFromConfig": [[34, 3, 1, "c.Py_InitializeFromConfig", "config"]], "Py_Is": [[58, 3, 1, "c.Py_Is", "x"], [58, 3, 1, "c.Py_Is", "y"]], "Py_IsFalse": [[58, 3, 1, "c.Py_IsFalse", "x"]], "Py_IsNone": [[58, 3, 1, "c.Py_IsNone", "x"]], "Py_IsTrue": [[58, 3, 1, "c.Py_IsTrue", "x"]], "Py_Main": [[66, 3, 1, "c.Py_Main", "argc"], [66, 3, 1, "c.Py_Main", "argv"]], "Py_NewInterpreterFromConfig": [[33, 3, 1, "c.Py_NewInterpreterFromConfig", "config"], [33, 3, 1, "c.Py_NewInterpreterFromConfig", "tstate_p"]], "Py_NewRef": [[52, 3, 1, "c.Py_NewRef", "o"]], "Py_PreInitialize": [[34, 3, 1, "c.Py_PreInitialize", "preconfig"]], "Py_PreInitializeFromArgs": [[34, 3, 1, "c.Py_PreInitializeFromArgs", "argc"], [34, 3, 1, "c.Py_PreInitializeFromArgs", "argv"], [34, 3, 1, "c.Py_PreInitializeFromArgs", "preconfig"]], "Py_PreInitializeFromBytesArgs": [[34, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argc"], [34, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argv"], [34, 3, 1, "c.Py_PreInitializeFromBytesArgs", "preconfig"]], "Py_REFCNT": [[52, 3, 1, "c.Py_REFCNT", "o"]], "Py_ReprEnter": [[23, 3, 1, "c.Py_ReprEnter", "object"]], "Py_ReprLeave": [[23, 3, 1, "c.Py_ReprLeave", "object"]], "Py_SET_REFCNT": [[52, 3, 1, "c.Py_SET_REFCNT", "o"], [52, 3, 1, "c.Py_SET_REFCNT", "refcnt"]], "Py_SET_SIZE": [[58, 3, 1, "c.Py_SET_SIZE", "o"], [58, 3, 1, "c.Py_SET_SIZE", "size"]], "Py_SET_TYPE": [[58, 3, 1, "c.Py_SET_TYPE", "o"], [58, 3, 1, "c.Py_SET_TYPE", "type"]], "Py_SIZE": [[58, 3, 1, "c.Py_SIZE", "o"]], "Py_SetProgramName": [[33, 3, 1, "c.Py_SetProgramName", "name"]], "Py_SetPythonHome": [[33, 3, 1, "c.Py_SetPythonHome", "home"]], "Py_SetStandardStreamEncoding": [[33, 3, 1, "c.Py_SetStandardStreamEncoding", "encoding"], [33, 3, 1, "c.Py_SetStandardStreamEncoding", "errors"]], "Py_TYPE": [[58, 3, 1, "c.Py_TYPE", "o"]], "Py_UNICODE_ISALNUM": [[64, 3, 1, "c.Py_UNICODE_ISALNUM", "ch"]], "Py_UNICODE_ISALPHA": [[64, 3, 1, "c.Py_UNICODE_ISALPHA", "ch"]], "Py_UNICODE_ISDECIMAL": [[64, 3, 1, "c.Py_UNICODE_ISDECIMAL", "ch"]], "Py_UNICODE_ISDIGIT": [[64, 3, 1, "c.Py_UNICODE_ISDIGIT", "ch"]], "Py_UNICODE_ISLINEBREAK": [[64, 3, 1, "c.Py_UNICODE_ISLINEBREAK", "ch"]], "Py_UNICODE_ISLOWER": [[64, 3, 1, "c.Py_UNICODE_ISLOWER", "ch"]], "Py_UNICODE_ISNUMERIC": [[64, 3, 1, "c.Py_UNICODE_ISNUMERIC", "ch"]], "Py_UNICODE_ISPRINTABLE": [[64, 3, 1, "c.Py_UNICODE_ISPRINTABLE", "ch"]], "Py_UNICODE_ISSPACE": [[64, 3, 1, "c.Py_UNICODE_ISSPACE", "ch"]], "Py_UNICODE_ISTITLE": [[64, 3, 1, "c.Py_UNICODE_ISTITLE", "ch"]], "Py_UNICODE_ISUPPER": [[64, 3, 1, "c.Py_UNICODE_ISUPPER", "ch"]], "Py_UNICODE_IS_HIGH_SURROGATE": [[64, 3, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "ch"]], "Py_UNICODE_IS_LOW_SURROGATE": [[64, 3, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "ch"]], "Py_UNICODE_IS_SURROGATE": [[64, 3, 1, "c.Py_UNICODE_IS_SURROGATE", "ch"]], "Py_UNICODE_JOIN_SURROGATES": [[64, 3, 1, "c.Py_UNICODE_JOIN_SURROGATES", "high"], [64, 3, 1, "c.Py_UNICODE_JOIN_SURROGATES", "low"]], "Py_UNICODE_TODECIMAL": [[64, 3, 1, "c.Py_UNICODE_TODECIMAL", "ch"]], "Py_UNICODE_TODIGIT": [[64, 3, 1, "c.Py_UNICODE_TODIGIT", "ch"]], "Py_UNICODE_TOLOWER": [[64, 3, 1, "c.Py_UNICODE_TOLOWER", "ch"]], "Py_UNICODE_TONUMERIC": [[64, 3, 1, "c.Py_UNICODE_TONUMERIC", "ch"]], "Py_UNICODE_TOTITLE": [[64, 3, 1, "c.Py_UNICODE_TOTITLE", "ch"]], "Py_UNICODE_TOUPPER": [[64, 3, 1, "c.Py_UNICODE_TOUPPER", "ch"]], "Py_VISIT": [[28, 3, 1, "c.Py_VISIT", "o"]], "Py_VaBuildValue": [[5, 3, 1, "c.Py_VaBuildValue", "format"], [5, 3, 1, "c.Py_VaBuildValue", "vargs"]], "Py_XDECREF": [[52, 3, 1, "c.Py_XDECREF", "o"]], "Py_XINCREF": [[52, 3, 1, "c.Py_XINCREF", "o"]], "Py_XNewRef": [[52, 3, 1, "c.Py_XNewRef", "o"]], "Py_buffer": [[7, 0, 1, "c.Py_buffer.buf", "buf"], [7, 0, 1, "c.Py_buffer.format", "format"], [7, 0, 1, "c.Py_buffer.internal", "internal"], [7, 0, 1, "c.Py_buffer.itemsize", "itemsize"], [7, 0, 1, "c.Py_buffer.len", "len"], [7, 0, 1, "c.Py_buffer.ndim", "ndim"], [7, 0, 1, "c.Py_buffer.obj", "obj"], [7, 0, 1, "c.Py_buffer.readonly", "readonly"], [7, 0, 1, "c.Py_buffer.shape", "shape"], [7, 0, 1, "c.Py_buffer.strides", "strides"], [7, 0, 1, "c.Py_buffer.suboffsets", "suboffsets"]], "Py_mod_create": [[45, 2, 1, "c.Py_mod_create.create_module", "create_module"]], "Py_mod_create.create_module": [[45, 3, 1, "c.Py_mod_create.create_module", "def"], [45, 3, 1, "c.Py_mod_create.create_module", "spec"]], "Py_mod_exec": [[45, 2, 1, "c.Py_mod_exec.exec_module", "exec_module"]], "Py_mod_exec.exec_module": [[45, 3, 1, "c.Py_mod_exec.exec_module", "module"]], "_PyBytes_Resize": [[9, 3, 1, "c._PyBytes_Resize", "bytes"], [9, 3, 1, "c._PyBytes_Resize", "newsize"]], "_PyInterpreterState_GetEvalFrameFunc": [[33, 3, 1, "c._PyInterpreterState_GetEvalFrameFunc", "interp"]], "_PyInterpreterState_SetEvalFrameFunc": [[33, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "eval_frame"], [33, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "interp"]], "_PyObject_GetDictPtr": [[49, 3, 1, "c._PyObject_GetDictPtr", "obj"]], "_PyObject_New": [[3, 3, 1, "c._PyObject_New", "type"]], "_PyObject_NewVar": [[3, 3, 1, "c._PyObject_NewVar", "size"], [3, 3, 1, "c._PyObject_NewVar", "type"]], "_PyTuple_Resize": [[60, 3, 1, "c._PyTuple_Resize", "newsize"], [60, 3, 1, "c._PyTuple_Resize", "p"]], "_Py_c_diff": [[15, 3, 1, "c._Py_c_diff", "left"], [15, 3, 1, "c._Py_c_diff", "right"]], "_Py_c_neg": [[15, 3, 1, "c._Py_c_neg", "num"]], "_Py_c_pow": [[15, 3, 1, "c._Py_c_pow", "exp"], [15, 3, 1, "c._Py_c_pow", "num"]], "_Py_c_prod": [[15, 3, 1, "c._Py_c_prod", "left"], [15, 3, 1, "c._Py_c_prod", "right"]], "_Py_c_quot": [[15, 3, 1, "c._Py_c_quot", "dividend"], [15, 3, 1, "c._Py_c_quot", "divisor"]], "_Py_c_sum": [[15, 3, 1, "c._Py_c_sum", "left"], [15, 3, 1, "c._Py_c_sum", "right"]], "_inittab": [[31, 0, 1, "c._inittab.name", "name"]], "BaseException": [[211, 7, 1, "", "__cause__"], [211, 7, 1, "", "__context__"], [211, 7, 1, "", "__notes__"], [211, 7, 1, "", "__suppress_context__"], [211, 7, 1, "", "__traceback__"], [211, 8, 1, "", "add_note"], [211, 7, 1, "", "args"], [211, 8, 1, "", "with_traceback"]], "BaseExceptionGroup": [[211, 8, 1, "", "derive"], [211, 7, 1, "", "exceptions"], [211, 7, 1, "", "message"], [211, 8, 1, "", "split"], [211, 8, 1, "", "subgroup"]], "BlockingIOError": [[211, 7, 1, "", "characters_written"]], "ImportError": [[211, 7, 1, "", "name"], [211, 7, 1, "", "path"]], "OSError": [[211, 7, 1, "", "errno"], [211, 7, 1, "", "filename"], [211, 7, 1, "", "filename2"], [211, 7, 1, "", "strerror"], [211, 7, 1, "", "winerror"]], "StopIteration": [[211, 7, 1, "", "value"]], "SyntaxError": [[211, 7, 1, "", "end_lineno"], [211, 7, 1, "", "end_offset"], [211, 7, 1, "", "filename"], [211, 7, 1, "", "lineno"], [211, 7, 1, "", "offset"], [211, 7, 1, "", "text"]], "SystemExit": [[211, 7, 1, "", "code"]], "UnicodeError": [[211, 7, 1, "", "encoding"], [211, 7, 1, "", "end"], [211, 7, 1, "", "object"], [211, 7, 1, "", "reason"], [211, 7, 1, "", "start"]], "__future__": [[111, 11, 1, "future__._Feature", "_Feature"]], "__future__._Feature": [[111, 7, 1, "future__._Feature.compiler_flag", "compiler_flag"], [111, 8, 1, "future__._Feature.getMandatoryRelease", "getMandatoryRelease"], [111, 8, 1, "future__._Feature.getOptionalRelease", "getOptionalRelease"]], "_thread": [[113, 9, 1, "thread.LockType", "LockType"], [113, 9, 1, "thread.TIMEOUT_MAX", "TIMEOUT_MAX"], [113, 12, 1, "thread.allocate_lock", "allocate_lock"], [113, 6, 1, "thread.error", "error"], [113, 12, 1, "thread.exit", "exit"], [113, 12, 1, "thread.get_ident", "get_ident"], [113, 12, 1, "thread.get_native_id", "get_native_id"], [113, 12, 1, "thread.interrupt_main", "interrupt_main"], [113, 12, 1, "thread.stack_size", "stack_size"], [113, 12, 1, "thread.start_new_thread", "start_new_thread"]], "_thread.lock": [[113, 8, 1, "thread.lock.acquire", "acquire"], [113, 8, 1, "thread.lock.locked", "locked"], [113, 8, 1, "thread.lock.release", "release"]], "_tkinter": [[367, 9, 1, "tkinter.EXCEPTION", "EXCEPTION"], [367, 9, 1, "tkinter.READABLE", "READABLE"], [367, 9, 1, "tkinter.WRITABLE", "WRITABLE"]], "_tkinter.Widget.tk": [[367, 8, 1, "tkinter.Widget.tk.createfilehandler", "createfilehandler"], [367, 8, 1, "tkinter.Widget.tk.deletefilehandler", "deletefilehandler"]], "abc": [[114, 11, 1, "", "ABC"], [114, 11, 1, "", "ABCMeta"], [114, 12, 1, "", "abstractclassmethod"], [114, 12, 1, "", "abstractmethod"], [114, 12, 1, "", "abstractproperty"], [114, 12, 1, "", "abstractstaticmethod"], [114, 12, 1, "", "get_cache_token"], [114, 12, 1, "", "update_abstractmethods"]], "abc.ABCMeta": [[114, 8, 1, "", "__subclasshook__"], [114, 8, 1, "", "register"]], "agen": [[428, 8, 1, "", "__anext__"], [428, 8, 1, "", "aclose"], [428, 8, 1, "", "asend"], [428, 8, 1, "", "athrow"]], "aifc.aifc": [[115, 8, 1, "", "aifc"], [115, 8, 1, "", "aiff"], [115, 8, 1, "", "close"], [115, 8, 1, "", "getcompname"], [115, 8, 1, "", "getcomptype"], [115, 8, 1, "", "getframerate"], [115, 8, 1, "", "getmark"], [115, 8, 1, "", "getmarkers"], [115, 8, 1, "", "getnchannels"], [115, 8, 1, "", "getnframes"], [115, 8, 1, "", "getparams"], [115, 8, 1, "", "getsampwidth"], [115, 8, 1, "", "readframes"], [115, 8, 1, "", "rewind"], [115, 8, 1, "", "setcomptype"], [115, 8, 1, "", "setframerate"], [115, 8, 1, "", "setmark"], [115, 8, 1, "", "setnchannels"], [115, 8, 1, "", "setnframes"], [115, 8, 1, "", "setparams"], [115, 8, 1, "", "setpos"], [115, 8, 1, "", "setsampwidth"], [115, 8, 1, "", "tell"], [115, 8, 1, "", "writeframes"], [115, 8, 1, "", "writeframesraw"]], "aifc": [[115, 12, 1, "", "open"]], "argparse": [[118, 11, 1, "", "Action"], [118, 11, 1, "", "ArgumentDefaultsHelpFormatter"], [118, 6, 1, "", "ArgumentError"], [118, 11, 1, "", "ArgumentParser"], [118, 6, 1, "", "ArgumentTypeError"], [118, 11, 1, "", "FileType"], [118, 11, 1, "", "MetavarTypeHelpFormatter"], [118, 11, 1, "", "Namespace"], [118, 11, 1, "", "RawDescriptionHelpFormatter"], [118, 11, 1, "", "RawTextHelpFormatter"]], "argparse.ArgumentParser": [[118, 8, 1, "", "add_argument"], [118, 8, 1, "", "add_argument_group"], [118, 8, 1, "", "add_mutually_exclusive_group"], [118, 8, 1, "", "add_subparsers"], [118, 8, 1, "", "convert_arg_line_to_args"], [118, 8, 1, "", "error"], [118, 8, 1, "", "exit"], [118, 8, 1, "", "format_help"], [118, 8, 1, "", "format_usage"], [118, 8, 1, "", "get_default"], [118, 8, 1, "", "parse_args"], [118, 8, 1, "", "parse_intermixed_args"], [118, 8, 1, "", "parse_known_args"], [118, 8, 1, "", "parse_known_intermixed_args"], [118, 8, 1, "", "print_help"], [118, 8, 1, "", "print_usage"], [118, 8, 1, "", "set_defaults"]], "array": [[119, 11, 1, "", "array"], [119, 9, 1, "", "typecodes"]], "array.array": [[119, 8, 1, "", "append"], [119, 8, 1, "", "buffer_info"], [119, 8, 1, "", "byteswap"], [119, 8, 1, "", "count"], [119, 8, 1, "", "extend"], [119, 8, 1, "", "frombytes"], [119, 8, 1, "", "fromfile"], [119, 8, 1, "", "fromlist"], [119, 8, 1, "", "fromunicode"], [119, 8, 1, "", "index"], [119, 8, 1, "", "insert"], [119, 7, 1, "", "itemsize"], [119, 8, 1, "", "pop"], [119, 8, 1, "", "remove"], [119, 8, 1, "", "reverse"], [119, 8, 1, "", "tobytes"], [119, 8, 1, "", "tofile"], [119, 8, 1, "", "tolist"], [119, 8, 1, "", "tounicode"], [119, 7, 1, "", "typecode"]], "ast": [[120, 11, 1, "", "AST"], [120, 11, 1, "", "Add"], [120, 11, 1, "", "And"], [120, 11, 1, "", "AnnAssign"], [120, 11, 1, "", "Assert"], [120, 11, 1, "", "Assign"], [120, 11, 1, "", "AsyncFor"], [120, 11, 1, "", "AsyncFunctionDef"], [120, 11, 1, "", "AsyncWith"], [120, 11, 1, "", "Attribute"], [120, 11, 1, "", "AugAssign"], [120, 11, 1, "", "Await"], [120, 11, 1, "", "BinOp"], [120, 11, 1, "", "BitAnd"], [120, 11, 1, "", "BitOr"], [120, 11, 1, "", "BitXor"], [120, 11, 1, "", "BoolOp"], [120, 11, 1, "", "Break"], [120, 11, 1, "", "Call"], [120, 11, 1, "", "ClassDef"], [120, 11, 1, "", "Compare"], [120, 11, 1, "", "Constant"], [120, 11, 1, "", "Continue"], [120, 11, 1, "", "Del"], [120, 11, 1, "", "Delete"], [120, 11, 1, "", "Dict"], [120, 11, 1, "", "DictComp"], [120, 11, 1, "", "Div"], [120, 11, 1, "", "Eq"], [120, 11, 1, "", "ExceptHandler"], [120, 11, 1, "", "Expr"], [120, 11, 1, "", "Expression"], [120, 11, 1, "", "FloorDiv"], [120, 11, 1, "", "For"], [120, 11, 1, "", "FormattedValue"], [120, 11, 1, "", "FunctionDef"], [120, 11, 1, "", "FunctionType"], [120, 11, 1, "", "GeneratorExp"], [120, 11, 1, "", "Global"], [120, 11, 1, "", "Gt"], [120, 11, 1, "", "GtE"], [120, 11, 1, "", "If"], [120, 11, 1, "", "IfExp"], [120, 11, 1, "", "Import"], [120, 11, 1, "", "ImportFrom"], [120, 11, 1, "", "In"], [120, 11, 1, "", "Interactive"], [120, 11, 1, "", "Invert"], [120, 11, 1, "", "Is"], [120, 11, 1, "", "IsNot"], [120, 11, 1, "", "JoinedStr"], [120, 11, 1, "", "LShift"], [120, 11, 1, "", "Lambda"], [120, 11, 1, "", "List"], [120, 11, 1, "", "ListComp"], [120, 11, 1, "", "Load"], [120, 11, 1, "", "Lt"], [120, 11, 1, "", "LtE"], [120, 11, 1, "", "MatMult"], [120, 11, 1, "", "Match"], [120, 11, 1, "", "MatchAs"], [120, 11, 1, "", "MatchClass"], [120, 11, 1, "", "MatchMapping"], [120, 11, 1, "", "MatchOr"], [120, 11, 1, "", "MatchSequence"], [120, 11, 1, "", "MatchSingleton"], [120, 11, 1, "", "MatchStar"], [120, 11, 1, "", "MatchValue"], [120, 11, 1, "", "Mod"], [120, 11, 1, "", "Module"], [120, 11, 1, "", "Mult"], [120, 11, 1, "", "Name"], [120, 11, 1, "", "NamedExpr"], [120, 11, 1, "", "NodeTransformer"], [120, 11, 1, "", "NodeVisitor"], [120, 11, 1, "", "Nonlocal"], [120, 11, 1, "", "Not"], [120, 11, 1, "", "NotEq"], [120, 11, 1, "", "NotIn"], [120, 11, 1, "", "Or"], [120, 11, 1, "", "ParamSpec"], [120, 11, 1, "", "Pass"], [120, 11, 1, "", "Pow"], [120, 9, 1, "", "PyCF_ALLOW_TOP_LEVEL_AWAIT"], [120, 9, 1, "", "PyCF_ONLY_AST"], [120, 9, 1, "", "PyCF_TYPE_COMMENTS"], [120, 11, 1, "", "RShift"], [120, 11, 1, "", "Raise"], [120, 11, 1, "", "Return"], [120, 11, 1, "", "Set"], [120, 11, 1, "", "SetComp"], [120, 11, 1, "", "Slice"], [120, 11, 1, "", "Starred"], [120, 11, 1, "", "Store"], [120, 11, 1, "", "Sub"], [120, 11, 1, "", "Subscript"], [120, 11, 1, "", "Try"], [120, 11, 1, "", "TryStar"], [120, 11, 1, "", "Tuple"], [120, 11, 1, "", "TypeAlias"], [120, 11, 1, "", "TypeVar"], [120, 11, 1, "", "TypeVarTuple"], [120, 11, 1, "", "UAdd"], [120, 11, 1, "", "USub"], [120, 11, 1, "", "UnaryOp"], [120, 11, 1, "", "While"], [120, 11, 1, "", "With"], [120, 11, 1, "", "Yield"], [120, 11, 1, "", "YieldFrom"], [120, 11, 1, "", "alias"], [120, 11, 1, "", "arg"], [120, 11, 1, "", "arguments"], [120, 11, 1, "", "comprehension"], [120, 12, 1, "", "copy_location"], [120, 12, 1, "", "dump"], [120, 12, 1, "", "fix_missing_locations"], [120, 12, 1, "", "get_docstring"], [120, 12, 1, "", "get_source_segment"], [120, 12, 1, "", "increment_lineno"], [120, 12, 1, "", "iter_child_nodes"], [120, 12, 1, "", "iter_fields"], [120, 11, 1, "", "keyword"], [120, 12, 1, "", "literal_eval"], [120, 11, 1, "", "match_case"], [120, 12, 1, "", "parse"], [120, 12, 1, "", "unparse"], [120, 12, 1, "", "walk"], [120, 11, 1, "", "withitem"], [120, 14, 1, "cmdoption-ast-h", "--help"], [120, 14, 1, "cmdoption-ast-a", "--include-attributes"], [120, 14, 1, "cmdoption-ast-indent", "--indent"], [120, 14, 1, "cmdoption-ast-mode", "--mode"], [120, 14, 1, "cmdoption-ast-no-type-comments", "--no-type-comments"], [120, 14, 1, "cmdoption-ast-a", "-a"], [120, 14, 1, "cmdoption-ast-h", "-h"], [120, 14, 1, "cmdoption-ast-i", "-i"], [120, 14, 1, "cmdoption-ast-m", "-m"]], "ast.AST": [[120, 7, 1, "", "_fields"], [120, 7, 1, "", "col_offset"], [120, 7, 1, "", "end_col_offset"], [120, 7, 1, "", "end_lineno"], [120, 7, 1, "", "lineno"]], "ast.Assign": [[120, 7, 1, "", "type_comment"]], "ast.For": [[120, 7, 1, "", "type_comment"]], "ast.FunctionDef": [[120, 7, 1, "", "type_comment"]], "ast.NodeVisitor": [[120, 8, 1, "", "generic_visit"], [120, 8, 1, "", "visit"], [120, 8, 1, "", "visit_Constant"]], "ast.With": [[120, 7, 1, "", "type_comment"]], "ast.arg": [[120, 7, 1, "", "type_comment"]], "asyncio": [[137, 9, 1, "", "ALL_COMPLETED"], [130, 11, 1, "", "AbstractChildWatcher"], [124, 11, 1, "", "AbstractEventLoop"], [130, 11, 1, "", "AbstractEventLoopPolicy"], [136, 11, 1, "", "Barrier"], [131, 11, 1, "", "BaseProtocol"], [131, 11, 1, "", "BaseTransport"], [136, 11, 1, "", "BoundedSemaphore"], [136, 6, 1, "", "BrokenBarrierError"], [131, 11, 1, "", "BufferedProtocol"], [125, 6, 1, "", "CancelledError"], [136, 11, 1, "", "Condition"], [131, 11, 1, "", "DatagramProtocol"], [131, 11, 1, "", "DatagramTransport"], [130, 11, 1, "", "DefaultEventLoopPolicy"], [136, 11, 1, "", "Event"], [137, 9, 1, "", "FIRST_COMPLETED"], [137, 9, 1, "", "FIRST_EXCEPTION"], [130, 11, 1, "", "FastChildWatcher"], [127, 11, 1, "", "Future"], [124, 11, 1, "", "Handle"], [125, 6, 1, "", "IncompleteReadError"], [125, 6, 1, "", "InvalidStateError"], [132, 11, 1, "", "LifoQueue"], [125, 6, 1, "", "LimitOverrunError"], [136, 11, 1, "", "Lock"], [130, 11, 1, "", "MultiLoopChildWatcher"], [130, 11, 1, "", "PidfdChildWatcher"], [132, 11, 1, "", "PriorityQueue"], [124, 11, 1, "", "ProactorEventLoop"], [131, 11, 1, "", "Protocol"], [132, 11, 1, "", "Queue"], [132, 6, 1, "", "QueueEmpty"], [132, 6, 1, "", "QueueFull"], [131, 11, 1, "", "ReadTransport"], [133, 11, 1, "", "Runner"], [130, 11, 1, "", "SafeChildWatcher"], [124, 11, 1, "", "SelectorEventLoop"], [136, 11, 1, "", "Semaphore"], [125, 6, 1, "", "SendfileNotAvailableError"], [124, 11, 1, "", "Server"], [134, 11, 1, "", "StreamReader"], [134, 11, 1, "", "StreamWriter"], [131, 11, 1, "", "SubprocessProtocol"], [131, 11, 1, "", "SubprocessTransport"], [137, 11, 1, "", "Task"], [137, 11, 1, "", "TaskGroup"], [130, 11, 1, "", "ThreadedChildWatcher"], [137, 11, 1, "", "Timeout"], [125, 6, 1, "", "TimeoutError"], [124, 11, 1, "", "TimerHandle"], [131, 11, 1, "", "Transport"], [130, 11, 1, "", "WindowsProactorEventLoopPolicy"], [130, 11, 1, "", "WindowsSelectorEventLoopPolicy"], [131, 11, 1, "", "WriteTransport"], [126, 12, 1, "", "_enter_task"], [126, 12, 1, "", "_leave_task"], [126, 12, 1, "", "_register_task"], [126, 12, 1, "", "_unregister_task"], [137, 12, 1, "", "all_tasks"], [137, 12, 1, "", "as_completed"], [137, 12, 1, "", "create_eager_task_factory"], [135, 12, 1, "", "create_subprocess_exec"], [135, 12, 1, "", "create_subprocess_shell"], [137, 12, 1, "", "create_task"], [137, 12, 1, "", "current_task"], [137, 12, 1, "", "eager_task_factory"], [127, 12, 1, "", "ensure_future"], [137, 12, 1, "", "gather"], [130, 12, 1, "", "get_child_watcher"], [124, 12, 1, "", "get_event_loop"], [130, 12, 1, "", "get_event_loop_policy"], [124, 12, 1, "", "get_running_loop"], [137, 12, 1, "", "iscoroutine"], [127, 12, 1, "", "isfuture"], [124, 12, 1, "", "new_event_loop"], [134, 12, 1, "", "open_connection"], [134, 12, 1, "", "open_unix_connection"], [133, 12, 1, "", "run"], [137, 12, 1, "", "run_coroutine_threadsafe"], [130, 12, 1, "", "set_child_watcher"], [124, 12, 1, "", "set_event_loop"], [130, 12, 1, "", "set_event_loop_policy"], [137, 12, 1, "", "shield"], [137, 12, 1, "", "sleep"], [134, 12, 1, "", "start_server"], [134, 12, 1, "", "start_unix_server"], [137, 12, 1, "", "timeout"], [137, 12, 1, "", "timeout_at"], [137, 12, 1, "", "to_thread"], [137, 12, 1, "", "wait"], [137, 12, 1, "", "wait_for"], [127, 12, 1, "", "wrap_future"]], "asyncio.AbstractChildWatcher": [[130, 8, 1, "", "add_child_handler"], [130, 8, 1, "", "attach_loop"], [130, 8, 1, "", "close"], [130, 8, 1, "", "is_active"], [130, 8, 1, "", "remove_child_handler"]], "asyncio.AbstractEventLoopPolicy": [[130, 8, 1, "", "get_child_watcher"], [130, 8, 1, "", "get_event_loop"], [130, 8, 1, "", "new_event_loop"], [130, 8, 1, "", "set_child_watcher"], [130, 8, 1, "", "set_event_loop"]], "asyncio.Barrier": [[136, 8, 1, "", "abort"], [136, 7, 1, "", "broken"], [136, 7, 1, "", "n_waiting"], [136, 7, 1, "", "parties"], [136, 8, 1, "", "reset"], [136, 8, 1, "", "wait"]], "asyncio.BaseProtocol": [[131, 8, 1, "", "connection_lost"], [131, 8, 1, "", "connection_made"], [131, 8, 1, "", "pause_writing"], [131, 8, 1, "", "resume_writing"]], "asyncio.BaseTransport": [[131, 8, 1, "", "close"], [131, 8, 1, "", "get_extra_info"], [131, 8, 1, "", "get_protocol"], [131, 8, 1, "", "is_closing"], [131, 8, 1, "", "set_protocol"]], "asyncio.BufferedProtocol": [[131, 8, 1, "", "buffer_updated"], [131, 8, 1, "", "eof_received"], [131, 8, 1, "", "get_buffer"]], "asyncio.Condition": [[136, 8, 1, "", "acquire"], [136, 8, 1, "", "locked"], [136, 8, 1, "", "notify"], [136, 8, 1, "", "notify_all"], [136, 8, 1, "", "release"], [136, 8, 1, "", "wait"], [136, 8, 1, "", "wait_for"]], "asyncio.DatagramProtocol": [[131, 8, 1, "", "datagram_received"], [131, 8, 1, "", "error_received"]], "asyncio.DatagramTransport": [[131, 8, 1, "", "abort"], [131, 8, 1, "", "sendto"]], "asyncio.Event": [[136, 8, 1, "", "clear"], [136, 8, 1, "", "is_set"], [136, 8, 1, "", "set"], [136, 8, 1, "", "wait"]], "asyncio.Future": [[126, 8, 1, "", "__init__"], [127, 8, 1, "", "add_done_callback"], [127, 8, 1, "", "cancel"], [127, 8, 1, "", "cancelled"], [127, 8, 1, "", "done"], [127, 8, 1, "", "exception"], [127, 8, 1, "", "get_loop"], [127, 8, 1, "", "remove_done_callback"], [127, 8, 1, "", "result"], [127, 8, 1, "", "set_exception"], [127, 8, 1, "", "set_result"]], "asyncio.Handle": [[124, 8, 1, "", "cancel"], [124, 8, 1, "", "cancelled"], [124, 8, 1, "", "get_context"]], "asyncio.IncompleteReadError": [[125, 7, 1, "", "expected"], [125, 7, 1, "", "partial"]], "asyncio.LimitOverrunError": [[125, 7, 1, "", "consumed"]], "asyncio.Lock": [[136, 8, 1, "", "acquire"], [136, 8, 1, "", "locked"], [136, 8, 1, "", "release"]], "asyncio.Protocol": [[131, 8, 1, "", "data_received"], [131, 8, 1, "", "eof_received"]], "asyncio.Queue": [[132, 8, 1, "", "empty"], [132, 8, 1, "", "full"], [132, 8, 1, "", "get"], [132, 8, 1, "", "get_nowait"], [132, 8, 1, "", "join"], [132, 7, 1, "", "maxsize"], [132, 8, 1, "", "put"], [132, 8, 1, "", "put_nowait"], [132, 8, 1, "", "qsize"], [132, 8, 1, "", "task_done"]], "asyncio.ReadTransport": [[131, 8, 1, "", "is_reading"], [131, 8, 1, "", "pause_reading"], [131, 8, 1, "", "resume_reading"]], "asyncio.Runner": [[133, 8, 1, "", "close"], [133, 8, 1, "", "get_loop"], [133, 8, 1, "", "run"]], "asyncio.Semaphore": [[136, 8, 1, "", "acquire"], [136, 8, 1, "", "locked"], [136, 8, 1, "", "release"]], "asyncio.Server": [[124, 8, 1, "", "close"], [124, 8, 1, "", "get_loop"], [124, 8, 1, "", "is_serving"], [124, 8, 1, "", "serve_forever"], [124, 7, 1, "", "sockets"], [124, 8, 1, "", "start_serving"], [124, 8, 1, "", "wait_closed"]], "asyncio.StreamReader": [[134, 8, 1, "", "at_eof"], [134, 8, 1, "", "feed_eof"], [134, 8, 1, "", "read"], [134, 8, 1, "", "readexactly"], [134, 8, 1, "", "readline"], [134, 8, 1, "", "readuntil"]], "asyncio.StreamWriter": [[134, 8, 1, "", "can_write_eof"], [134, 8, 1, "", "close"], [134, 8, 1, "", "drain"], [134, 8, 1, "", "get_extra_info"], [134, 8, 1, "", "is_closing"], [134, 8, 1, "", "start_tls"], [134, 7, 1, "", "transport"], [134, 8, 1, "", "wait_closed"], [134, 8, 1, "", "write"], [134, 8, 1, "", "write_eof"], [134, 8, 1, "", "writelines"]], "asyncio.SubprocessProtocol": [[131, 8, 1, "", "pipe_connection_lost"], [131, 8, 1, "", "pipe_data_received"], [131, 8, 1, "", "process_exited"]], "asyncio.SubprocessTransport": [[131, 8, 1, "", "close"], [131, 8, 1, "", "get_pid"], [131, 8, 1, "", "get_pipe_transport"], [131, 8, 1, "", "get_returncode"], [131, 8, 1, "", "kill"], [131, 8, 1, "", "send_signal"], [131, 8, 1, "", "terminate"]], "asyncio.Task": [[126, 8, 1, "", "__init__"], [137, 8, 1, "", "add_done_callback"], [137, 8, 1, "", "cancel"], [137, 8, 1, "", "cancelled"], [137, 8, 1, "", "cancelling"], [137, 8, 1, "", "done"], [137, 8, 1, "", "exception"], [137, 8, 1, "", "get_context"], [137, 8, 1, "", "get_coro"], [137, 8, 1, "", "get_name"], [137, 8, 1, "", "get_stack"], [137, 8, 1, "", "print_stack"], [137, 8, 1, "", "remove_done_callback"], [137, 8, 1, "", "result"], [137, 8, 1, "", "set_name"], [137, 8, 1, "", "uncancel"]], "asyncio.TaskGroup": [[137, 8, 1, "", "create_task"]], "asyncio.Timeout": [[137, 8, 1, "", "expired"], [137, 8, 1, "", "reschedule"], [137, 8, 1, "", "when"]], "asyncio.TimerHandle": [[124, 8, 1, "", "when"]], "asyncio.WriteTransport": [[131, 8, 1, "", "abort"], [131, 8, 1, "", "can_write_eof"], [131, 8, 1, "", "get_write_buffer_limits"], [131, 8, 1, "", "get_write_buffer_size"], [131, 8, 1, "", "set_write_buffer_limits"], [131, 8, 1, "", "write"], [131, 8, 1, "", "write_eof"], [131, 8, 1, "", "writelines"]], "asyncio.loop": [[124, 8, 1, "", "add_reader"], [124, 8, 1, "", "add_signal_handler"], [124, 8, 1, "", "add_writer"], [124, 8, 1, "", "call_at"], [124, 8, 1, "", "call_exception_handler"], [124, 8, 1, "", "call_later"], [124, 8, 1, "", "call_soon"], [124, 8, 1, "", "call_soon_threadsafe"], [124, 8, 1, "", "close"], [124, 8, 1, "", "connect_accepted_socket"], [124, 8, 1, "", "connect_read_pipe"], [124, 8, 1, "", "connect_write_pipe"], [124, 8, 1, "", "create_connection"], [124, 8, 1, "", "create_datagram_endpoint"], [124, 8, 1, "", "create_future"], [124, 8, 1, "", "create_server"], [124, 8, 1, "", "create_task"], [124, 8, 1, "", "create_unix_connection"], [124, 8, 1, "", "create_unix_server"], [124, 8, 1, "", "default_exception_handler"], [124, 8, 1, "", "get_debug"], [124, 8, 1, "", "get_exception_handler"], [124, 8, 1, "", "get_task_factory"], [124, 8, 1, "", "getaddrinfo"], [124, 8, 1, "", "getnameinfo"], [124, 8, 1, "", "is_closed"], [124, 8, 1, "", "is_running"], [124, 8, 1, "", "remove_reader"], [124, 8, 1, "", "remove_signal_handler"], [124, 8, 1, "", "remove_writer"], [124, 8, 1, "", "run_forever"], [124, 8, 1, "", "run_in_executor"], [124, 8, 1, "", "run_until_complete"], [124, 8, 1, "", "sendfile"], [124, 8, 1, "", "set_debug"], [124, 8, 1, "", "set_default_executor"], [124, 8, 1, "", "set_exception_handler"], [124, 8, 1, "", "set_task_factory"], [124, 8, 1, "", "shutdown_asyncgens"], [124, 8, 1, "", "shutdown_default_executor"], [124, 7, 1, "", "slow_callback_duration"], [124, 8, 1, "", "sock_accept"], [124, 8, 1, "", "sock_connect"], [124, 8, 1, "", "sock_recv"], [124, 8, 1, "", "sock_recv_into"], [124, 8, 1, "", "sock_recvfrom"], [124, 8, 1, "", "sock_recvfrom_into"], [124, 8, 1, "", "sock_sendall"], [124, 8, 1, "", "sock_sendfile"], [124, 8, 1, "", "sock_sendto"], [124, 8, 1, "", "start_tls"], [124, 8, 1, "", "stop"], [124, 8, 1, "", "subprocess_exec"], [124, 8, 1, "", "subprocess_shell"], [124, 8, 1, "", "time"]], "asyncio.subprocess": [[135, 9, 1, "", "DEVNULL"], [135, 9, 1, "", "PIPE"], [135, 11, 1, "", "Process"], [135, 9, 1, "", "STDOUT"]], "asyncio.subprocess.Process": [[135, 8, 1, "", "communicate"], [135, 8, 1, "", "kill"], [135, 7, 1, "", "pid"], [135, 7, 1, "", "returncode"], [135, 8, 1, "", "send_signal"], [135, 7, 1, "", "stderr"], [135, 7, 1, "", "stdin"], [135, 7, 1, "", "stdout"], [135, 8, 1, "", "terminate"], [135, 8, 1, "", "wait"]], "atexit": [[138, 12, 1, "", "register"], [138, 12, 1, "", "unregister"]], "audioop": [[139, 12, 1, "", "add"], [139, 12, 1, "", "adpcm2lin"], [139, 12, 1, "", "alaw2lin"], [139, 12, 1, "", "avg"], [139, 12, 1, "", "avgpp"], [139, 12, 1, "", "bias"], [139, 12, 1, "", "byteswap"], [139, 12, 1, "", "cross"], [139, 6, 1, "", "error"], [139, 12, 1, "", "findfactor"], [139, 12, 1, "", "findfit"], [139, 12, 1, "", "findmax"], [139, 12, 1, "", "getsample"], [139, 12, 1, "", "lin2adpcm"], [139, 12, 1, "", "lin2alaw"], [139, 12, 1, "", "lin2lin"], [139, 12, 1, "", "lin2ulaw"], [139, 12, 1, "", "max"], [139, 12, 1, "", "maxpp"], [139, 12, 1, "", "minmax"], [139, 12, 1, "", "mul"], [139, 12, 1, "", "ratecv"], [139, 12, 1, "", "reverse"], [139, 12, 1, "", "rms"], [139, 12, 1, "", "tomono"], [139, 12, 1, "", "tostereo"], [139, 12, 1, "", "ulaw2lin"]], "base64": [[141, 12, 1, "", "a85decode"], [141, 12, 1, "", "a85encode"], [141, 12, 1, "", "b16decode"], [141, 12, 1, "", "b16encode"], [141, 12, 1, "", "b32decode"], [141, 12, 1, "", "b32encode"], [141, 12, 1, "", "b32hexdecode"], [141, 12, 1, "", "b32hexencode"], [141, 12, 1, "", "b64decode"], [141, 12, 1, "", "b64encode"], [141, 12, 1, "", "b85decode"], [141, 12, 1, "", "b85encode"], [141, 12, 1, "", "decode"], [141, 12, 1, "", "decodebytes"], [141, 12, 1, "", "encode"], [141, 12, 1, "", "encodebytes"], [141, 12, 1, "", "standard_b64decode"], [141, 12, 1, "", "standard_b64encode"], [141, 12, 1, "", "urlsafe_b64decode"], [141, 12, 1, "", "urlsafe_b64encode"]], "bdb": [[142, 11, 1, "", "Bdb"], [142, 6, 1, "", "BdbQuit"], [142, 11, 1, "", "Breakpoint"], [142, 12, 1, "", "checkfuncname"], [142, 12, 1, "", "effective"], [142, 12, 1, "", "set_trace"]], "bdb.Bdb": [[142, 8, 1, "", "break_anywhere"], [142, 8, 1, "", "break_here"], [142, 8, 1, "", "canonic"], [142, 8, 1, "", "clear_all_breaks"], [142, 8, 1, "", "clear_all_file_breaks"], [142, 8, 1, "", "clear_bpbynumber"], [142, 8, 1, "", "clear_break"], [142, 8, 1, "", "dispatch_call"], [142, 8, 1, "", "dispatch_exception"], [142, 8, 1, "", "dispatch_line"], [142, 8, 1, "", "dispatch_return"], [142, 8, 1, "", "do_clear"], [142, 8, 1, "", "format_stack_entry"], [142, 8, 1, "", "get_all_breaks"], [142, 8, 1, "", "get_bpbynumber"], [142, 8, 1, "", "get_break"], [142, 8, 1, "", "get_breaks"], [142, 8, 1, "", "get_file_breaks"], [142, 8, 1, "", "get_stack"], [142, 8, 1, "", "is_skipped_line"], [142, 8, 1, "", "reset"], [142, 8, 1, "", "run"], [142, 8, 1, "", "runcall"], [142, 8, 1, "", "runctx"], [142, 8, 1, "", "runeval"], [142, 8, 1, "", "set_break"], [142, 8, 1, "", "set_continue"], [142, 8, 1, "", "set_next"], [142, 8, 1, "", "set_quit"], [142, 8, 1, "", "set_return"], [142, 8, 1, "", "set_step"], [142, 8, 1, "", "set_trace"], [142, 8, 1, "", "set_until"], [142, 8, 1, "", "stop_here"], [142, 8, 1, "", "trace_dispatch"], [142, 8, 1, "", "user_call"], [142, 8, 1, "", "user_exception"], [142, 8, 1, "", "user_line"], [142, 8, 1, "", "user_return"]], "bdb.Breakpoint": [[142, 7, 1, "", "bpbynumber"], [142, 8, 1, "", "bpformat"], [142, 7, 1, "", "bplist"], [142, 8, 1, "", "bpprint"], [142, 7, 1, "", "cond"], [142, 8, 1, "", "deleteMe"], [142, 8, 1, "", "disable"], [142, 8, 1, "", "enable"], [142, 7, 1, "", "enabled"], [142, 7, 1, "", "file"], [142, 7, 1, "", "funcname"], [142, 7, 1, "", "hits"], [142, 7, 1, "", "ignore"], [142, 7, 1, "", "line"], [142, 7, 1, "", "temporary"]], "binascii": [[144, 6, 1, "", "Error"], [144, 6, 1, "", "Incomplete"], [144, 12, 1, "", "a2b_base64"], [144, 12, 1, "", "a2b_hex"], [144, 12, 1, "", "a2b_qp"], [144, 12, 1, "", "a2b_uu"], [144, 12, 1, "", "b2a_base64"], [144, 12, 1, "", "b2a_hex"], [144, 12, 1, "", "b2a_qp"], [144, 12, 1, "", "b2a_uu"], [144, 12, 1, "", "crc32"], [144, 12, 1, "", "crc_hqx"], [144, 12, 1, "", "hexlify"], [144, 12, 1, "", "unhexlify"]], "bisect": [[145, 12, 1, "", "bisect"], [145, 12, 1, "", "bisect_left"], [145, 12, 1, "", "bisect_right"], [145, 12, 1, "", "insort"], [145, 12, 1, "", "insort_left"], [145, 12, 1, "", "insort_right"]], "bytearray": [[342, 8, 1, "", "capitalize"], [342, 8, 1, "", "center"], [342, 8, 1, "", "count"], [342, 8, 1, "", "decode"], [342, 8, 1, "", "endswith"], [342, 8, 1, "", "expandtabs"], [342, 8, 1, "", "find"], [342, 8, 1, "", "fromhex"], [342, 8, 1, "", "hex"], [342, 8, 1, "", "index"], [342, 8, 1, "", "isalnum"], [342, 8, 1, "", "isalpha"], [342, 8, 1, "", "isascii"], [342, 8, 1, "", "isdigit"], [342, 8, 1, "", "islower"], [342, 8, 1, "", "isspace"], [342, 8, 1, "", "istitle"], [342, 8, 1, "", "isupper"], [342, 8, 1, "", "join"], [342, 8, 1, "", "ljust"], [342, 8, 1, "", "lower"], [342, 8, 1, "", "lstrip"], [342, 8, 1, "", "maketrans"], [342, 8, 1, "", "partition"], [342, 8, 1, "", "removeprefix"], [342, 8, 1, "", "removesuffix"], [342, 8, 1, "", "replace"], [342, 8, 1, "", "rfind"], [342, 8, 1, "", "rindex"], [342, 8, 1, "", "rjust"], [342, 8, 1, "", "rpartition"], [342, 8, 1, "", "rsplit"], [342, 8, 1, "", "rstrip"], [342, 8, 1, "", "split"], [342, 8, 1, "", "splitlines"], [342, 8, 1, "", "startswith"], [342, 8, 1, "", "strip"], [342, 8, 1, "", "swapcase"], [342, 8, 1, "", "title"], [342, 8, 1, "", "translate"], [342, 8, 1, "", "upper"], [342, 8, 1, "", "zfill"]], "bytes": [[342, 8, 1, "", "capitalize"], [342, 8, 1, "", "center"], [342, 8, 1, "", "count"], [342, 8, 1, "", "decode"], [342, 8, 1, "", "endswith"], [342, 8, 1, "", "expandtabs"], [342, 8, 1, "", "find"], [342, 8, 1, "", "fromhex"], [342, 8, 1, "", "hex"], [342, 8, 1, "", "index"], [342, 8, 1, "", "isalnum"], [342, 8, 1, "", "isalpha"], [342, 8, 1, "", "isascii"], [342, 8, 1, "", "isdigit"], [342, 8, 1, "", "islower"], [342, 8, 1, "", "isspace"], [342, 8, 1, "", "istitle"], [342, 8, 1, "", "isupper"], [342, 8, 1, "", "join"], [342, 8, 1, "", "ljust"], [342, 8, 1, "", "lower"], [342, 8, 1, "", "lstrip"], [342, 8, 1, "", "maketrans"], [342, 8, 1, "", "partition"], [342, 8, 1, "", "removeprefix"], [342, 8, 1, "", "removesuffix"], [342, 8, 1, "", "replace"], [342, 8, 1, "", "rfind"], [342, 8, 1, "", "rindex"], [342, 8, 1, "", "rjust"], [342, 8, 1, "", "rpartition"], [342, 8, 1, "", "rsplit"], [342, 8, 1, "", "rstrip"], [342, 8, 1, "", "split"], [342, 8, 1, "", "splitlines"], [342, 8, 1, "", "startswith"], [342, 8, 1, "", "strip"], [342, 8, 1, "", "swapcase"], [342, 8, 1, "", "title"], [342, 8, 1, "", "translate"], [342, 8, 1, "", "upper"], [342, 8, 1, "", "zfill"]], "bz2": [[147, 11, 1, "", "BZ2Compressor"], [147, 11, 1, "", "BZ2Decompressor"], [147, 11, 1, "", "BZ2File"], [147, 12, 1, "", "compress"], [147, 12, 1, "", "decompress"], [147, 12, 1, "", "open"]], "bz2.BZ2Compressor": [[147, 8, 1, "", "compress"], [147, 8, 1, "", "flush"]], "bz2.BZ2Decompressor": [[147, 8, 1, "", "decompress"], [147, 7, 1, "", "eof"], [147, 7, 1, "", "needs_input"], [147, 7, 1, "", "unused_data"]], "bz2.BZ2File": [[147, 8, 1, "", "fileno"], [147, 8, 1, "", "peek"], [147, 8, 1, "", "read1"], [147, 8, 1, "", "readable"], [147, 8, 1, "", "readinto"], [147, 8, 1, "", "seekable"], [147, 8, 1, "", "writable"]], "calendar": [[148, 9, 1, "", "APRIL"], [148, 9, 1, "", "AUGUST"], [148, 11, 1, "", "Calendar"], [148, 9, 1, "", "DECEMBER"], [148, 11, 1, "", "Day"], [148, 9, 1, "", "FEBRUARY"], [148, 9, 1, "", "FRIDAY"], [148, 11, 1, "", "HTMLCalendar"], [148, 6, 1, "", "IllegalMonthError"], [148, 6, 1, "", "IllegalWeekdayError"], [148, 9, 1, "", "JANUARY"], [148, 9, 1, "", "JULY"], [148, 9, 1, "", "JUNE"], [148, 11, 1, "", "LocaleHTMLCalendar"], [148, 11, 1, "", "LocaleTextCalendar"], [148, 9, 1, "", "MARCH"], [148, 9, 1, "", "MAY"], [148, 9, 1, "", "MONDAY"], [148, 11, 1, "", "Month"], [148, 9, 1, "", "NOVEMBER"], [148, 9, 1, "", "OCTOBER"], [148, 9, 1, "", "SATURDAY"], [148, 9, 1, "", "SEPTEMBER"], [148, 9, 1, "", "SUNDAY"], [148, 9, 1, "", "THURSDAY"], [148, 9, 1, "", "TUESDAY"], [148, 11, 1, "", "TextCalendar"], [148, 9, 1, "", "WEDNESDAY"], [148, 12, 1, "", "calendar"], [148, 9, 1, "", "day_abbr"], [148, 9, 1, "", "day_name"], [148, 12, 1, "", "firstweekday"], [148, 12, 1, "", "isleap"], [148, 12, 1, "", "leapdays"], [148, 12, 1, "", "month"], [148, 9, 1, "", "month_abbr"], [148, 9, 1, "", "month_name"], [148, 12, 1, "", "monthcalendar"], [148, 12, 1, "", "monthrange"], [148, 12, 1, "", "prcal"], [148, 12, 1, "", "prmonth"], [148, 12, 1, "", "setfirstweekday"], [148, 12, 1, "", "timegm"], [148, 12, 1, "", "weekday"], [148, 12, 1, "", "weekheader"], [148, 14, 1, "cmdoption-calendar-css", "--css"], [148, 14, 1, "cmdoption-calendar-encoding", "--encoding"], [148, 14, 1, "cmdoption-calendar-help", "--help"], [148, 14, 1, "cmdoption-calendar-lines", "--lines"], [148, 14, 1, "cmdoption-calendar-locale", "--locale"], [148, 14, 1, "cmdoption-calendar-months", "--months"], [148, 14, 1, "cmdoption-calendar-spacing", "--spacing"], [148, 14, 1, "cmdoption-calendar-type", "--type"], [148, 14, 1, "cmdoption-calendar-width", "--width"], [148, 14, 1, "cmdoption-calendar-locale", "-L"], [148, 14, 1, "cmdoption-calendar-css", "-c"], [148, 14, 1, "cmdoption-calendar-encoding", "-e"], [148, 14, 1, "cmdoption-calendar-help", "-h"], [148, 14, 1, "cmdoption-calendar-lines", "-l"], [148, 14, 1, "cmdoption-calendar-months", "-m"], [148, 14, 1, "cmdoption-calendar-spacing", "-s"], [148, 14, 1, "cmdoption-calendar-type", "-t"], [148, 14, 1, "cmdoption-calendar-width", "-w"], [148, 14, 1, "cmdoption-calendar-arg-month", "month"], [148, 14, 1, "cmdoption-calendar-arg-year", "year"]], "calendar.Calendar": [[148, 8, 1, "", "itermonthdates"], [148, 8, 1, "", "itermonthdays"], [148, 8, 1, "", "itermonthdays2"], [148, 8, 1, "", "itermonthdays3"], [148, 8, 1, "", "itermonthdays4"], [148, 8, 1, "", "iterweekdays"], [148, 8, 1, "", "monthdatescalendar"], [148, 8, 1, "", "monthdays2calendar"], [148, 8, 1, "", "monthdayscalendar"], [148, 8, 1, "", "yeardatescalendar"], [148, 8, 1, "", "yeardays2calendar"], [148, 8, 1, "", "yeardayscalendar"]], "calendar.HTMLCalendar": [[148, 7, 1, "", "cssclass_month"], [148, 7, 1, "", "cssclass_month_head"], [148, 7, 1, "", "cssclass_noday"], [148, 7, 1, "", "cssclass_year"], [148, 7, 1, "", "cssclass_year_head"], [148, 7, 1, "", "cssclasses"], [148, 7, 1, "", "cssclasses_weekday_head"], [148, 8, 1, "", "formatmonth"], [148, 8, 1, "", "formatmonthname"], [148, 8, 1, "", "formatyear"], [148, 8, 1, "", "formatyearpage"]], "calendar.IllegalMonthError": [[148, 7, 1, "", "month"]], "calendar.IllegalWeekdayError": [[148, 7, 1, "", "weekday"]], "calendar.TextCalendar": [[148, 8, 1, "", "formatmonth"], [148, 8, 1, "", "formatyear"], [148, 8, 1, "", "prmonth"], [148, 8, 1, "", "pryear"]], "cgi.FieldStorage": [[149, 8, 1, "", "getfirst"], [149, 8, 1, "", "getlist"]], "cgi": [[149, 12, 1, "", "parse"], [149, 12, 1, "", "parse_header"], [149, 12, 1, "", "parse_multipart"], [149, 12, 1, "", "print_directory"], [149, 12, 1, "", "print_environ"], [149, 12, 1, "", "print_environ_usage"], [149, 12, 1, "", "print_form"], [149, 12, 1, "", "test"]], "cgitb": [[150, 12, 1, "", "enable"], [150, 12, 1, "", "handler"], [150, 12, 1, "", "html"], [150, 12, 1, "", "text"]], "chunk": [[151, 11, 1, "", "Chunk"]], "chunk.Chunk": [[151, 8, 1, "", "close"], [151, 8, 1, "", "getname"], [151, 8, 1, "", "getsize"], [151, 8, 1, "", "isatty"], [151, 8, 1, "", "read"], [151, 8, 1, "", "seek"], [151, 8, 1, "", "skip"], [151, 8, 1, "", "tell"]], "class": [[342, 7, 1, "", "__bases__"], [426, 8, 1, "", "__instancecheck__"], [342, 7, 1, "", "__mro__"], [426, 8, 1, "", "__subclasscheck__"], [342, 8, 1, "", "__subclasses__"], [342, 8, 1, "", "mro"]], "cmath": [[152, 12, 1, "", "acos"], [152, 12, 1, "", "acosh"], [152, 12, 1, "", "asin"], [152, 12, 1, "", "asinh"], [152, 12, 1, "", "atan"], [152, 12, 1, "", "atanh"], [152, 12, 1, "", "cos"], [152, 12, 1, "", "cosh"], [152, 9, 1, "", "e"], [152, 12, 1, "", "exp"], [152, 9, 1, "", "inf"], [152, 9, 1, "", "infj"], [152, 12, 1, "", "isclose"], [152, 12, 1, "", "isfinite"], [152, 12, 1, "", "isinf"], [152, 12, 1, "", "isnan"], [152, 12, 1, "", "log"], [152, 12, 1, "", "log10"], [152, 9, 1, "", "nan"], [152, 9, 1, "", "nanj"], [152, 12, 1, "", "phase"], [152, 9, 1, "", "pi"], [152, 12, 1, "", "polar"], [152, 12, 1, "", "rect"], [152, 12, 1, "", "sin"], [152, 12, 1, "", "sinh"], [152, 12, 1, "", "sqrt"], [152, 12, 1, "", "tan"], [152, 12, 1, "", "tanh"], [152, 9, 1, "", "tau"]], "cmd": [[153, 11, 1, "", "Cmd"]], "cmd.Cmd": [[153, 8, 1, "", "cmdloop"], [153, 7, 1, "", "cmdqueue"], [153, 8, 1, "", "columnize"], [153, 8, 1, "", "completedefault"], [153, 8, 1, "", "default"], [153, 8, 1, "", "do_help"], [153, 7, 1, "", "doc_header"], [153, 8, 1, "", "emptyline"], [153, 7, 1, "", "identchars"], [153, 7, 1, "", "intro"], [153, 7, 1, "", "lastcmd"], [153, 7, 1, "", "misc_header"], [153, 8, 1, "", "onecmd"], [153, 8, 1, "", "postcmd"], [153, 8, 1, "", "postloop"], [153, 8, 1, "", "precmd"], [153, 8, 1, "", "preloop"], [153, 7, 1, "", "prompt"], [153, 7, 1, "", "ruler"], [153, 7, 1, "", "undoc_header"], [153, 7, 1, "", "use_rawinput"]], "code": [[155, 11, 1, "", "InteractiveConsole"], [155, 11, 1, "", "InteractiveInterpreter"], [155, 12, 1, "", "compile_command"], [155, 12, 1, "", "interact"]], "code.InteractiveConsole": [[155, 8, 1, "", "interact"], [155, 8, 1, "", "push"], [155, 8, 1, "", "raw_input"], [155, 8, 1, "", "resetbuffer"]], "code.InteractiveInterpreter": [[155, 8, 1, "", "runcode"], [155, 8, 1, "", "runsource"], [155, 8, 1, "", "showsyntaxerror"], [155, 8, 1, "", "showtraceback"], [155, 8, 1, "", "write"]], "codecs": [[156, 9, 1, "", "BOM"], [156, 9, 1, "", "BOM_BE"], [156, 9, 1, "", "BOM_LE"], [156, 9, 1, "", "BOM_UTF16"], [156, 9, 1, "", "BOM_UTF16_BE"], [156, 9, 1, "", "BOM_UTF16_LE"], [156, 9, 1, "", "BOM_UTF32"], [156, 9, 1, "", "BOM_UTF32_BE"], [156, 9, 1, "", "BOM_UTF32_LE"], [156, 9, 1, "", "BOM_UTF8"], [156, 11, 1, "", "Codec"], [156, 11, 1, "", "CodecInfo"], [156, 12, 1, "", "EncodedFile"], [156, 11, 1, "", "IncrementalDecoder"], [156, 11, 1, "", "IncrementalEncoder"], [156, 11, 1, "", "StreamReader"], [156, 11, 1, "", "StreamReaderWriter"], [156, 11, 1, "", "StreamRecoder"], [156, 11, 1, "", "StreamWriter"], [156, 12, 1, "", "backslashreplace_errors"], [156, 12, 1, "", "decode"], [156, 12, 1, "", "encode"], [156, 12, 1, "", "getdecoder"], [156, 12, 1, "", "getencoder"], [156, 12, 1, "", "getincrementaldecoder"], [156, 12, 1, "", "getincrementalencoder"], [156, 12, 1, "", "getreader"], [156, 12, 1, "", "getwriter"], [156, 12, 1, "", "ignore_errors"], [156, 12, 1, "", "iterdecode"], [156, 12, 1, "", "iterencode"], [156, 12, 1, "", "lookup"], [156, 12, 1, "", "lookup_error"], [156, 12, 1, "", "namereplace_errors"], [156, 12, 1, "", "open"], [156, 12, 1, "", "register"], [156, 12, 1, "", "register_error"], [156, 12, 1, "", "replace_errors"], [156, 12, 1, "", "strict_errors"], [156, 12, 1, "", "unregister"], [156, 12, 1, "", "xmlcharrefreplace_errors"]], "codecs.Codec": [[156, 8, 1, "", "decode"], [156, 8, 1, "", "encode"]], "codecs.CodecInfo": [[156, 7, 1, "", "decode"], [156, 7, 1, "", "encode"], [156, 7, 1, "", "incrementaldecoder"], [156, 7, 1, "", "incrementalencoder"], [156, 7, 1, "", "name"], [156, 7, 1, "", "streamreader"], [156, 7, 1, "", "streamwriter"]], "codecs.IncrementalDecoder": [[156, 8, 1, "", "decode"], [156, 8, 1, "", "getstate"], [156, 8, 1, "", "reset"], [156, 8, 1, "", "setstate"]], "codecs.IncrementalEncoder": [[156, 8, 1, "", "encode"], [156, 8, 1, "", "getstate"], [156, 8, 1, "", "reset"], [156, 8, 1, "", "setstate"]], "codecs.StreamReader": [[156, 8, 1, "", "read"], [156, 8, 1, "", "readline"], [156, 8, 1, "", "readlines"], [156, 8, 1, "", "reset"]], "codecs.StreamWriter": [[156, 8, 1, "", "reset"], [156, 8, 1, "", "write"], [156, 8, 1, "", "writelines"]], "codeobject": [[426, 7, 1, "", "co_argcount"], [426, 7, 1, "", "co_cellvars"], [426, 7, 1, "", "co_code"], [426, 7, 1, "", "co_consts"], [426, 7, 1, "", "co_filename"], [426, 7, 1, "", "co_firstlineno"], [426, 7, 1, "", "co_flags"], [426, 7, 1, "", "co_freevars"], [426, 7, 1, "", "co_kwonlyargcount"], [426, 8, 1, "", "co_lines"], [426, 7, 1, "", "co_lnotab"], [426, 7, 1, "", "co_name"], [426, 7, 1, "", "co_names"], [426, 7, 1, "", "co_nlocals"], [426, 8, 1, "", "co_positions"], [426, 7, 1, "", "co_posonlyargcount"], [426, 7, 1, "", "co_qualname"], [426, 7, 1, "", "co_stacksize"], [426, 7, 1, "", "co_varnames"], [426, 8, 1, "", "replace"]], "codeop": [[157, 11, 1, "", "CommandCompiler"], [157, 11, 1, "", "Compile"], [157, 12, 1, "", "compile_command"]], "collections": [[158, 11, 1, "", "ChainMap"], [158, 11, 1, "", "Counter"], [158, 11, 1, "", "OrderedDict"], [158, 11, 1, "", "UserDict"], [158, 11, 1, "", "UserList"], [158, 11, 1, "", "UserString"], [159, 10, 0, "-", "abc"], [158, 11, 1, "", "defaultdict"], [158, 11, 1, "", "deque"], [158, 12, 1, "", "namedtuple"]], "collections.ChainMap": [[158, 7, 1, "", "maps"], [158, 8, 1, "", "new_child"], [158, 7, 1, "", "parents"]], "collections.Counter": [[158, 8, 1, "", "elements"], [158, 8, 1, "", "fromkeys"], [158, 8, 1, "", "most_common"], [158, 8, 1, "", "subtract"], [158, 8, 1, "", "total"], [158, 8, 1, "", "update"]], "collections.OrderedDict": [[158, 8, 1, "", "move_to_end"], [158, 8, 1, "", "popitem"]], "collections.UserDict": [[158, 7, 1, "", "data"]], "collections.UserList": [[158, 7, 1, "", "data"]], "collections.UserString": [[158, 7, 1, "", "data"]], "collections.abc": [[159, 11, 1, "", "AsyncGenerator"], [159, 11, 1, "", "AsyncIterable"], [159, 11, 1, "", "AsyncIterator"], [159, 11, 1, "", "Awaitable"], [159, 11, 1, "", "Buffer"], [159, 11, 1, "", "ByteString"], [159, 11, 1, "", "Callable"], [159, 11, 1, "", "Collection"], [159, 11, 1, "", "Container"], [159, 11, 1, "", "Coroutine"], [159, 11, 1, "", "Generator"], [159, 11, 1, "", "Hashable"], [159, 11, 1, "", "ItemsView"], [159, 11, 1, "", "Iterable"], [159, 11, 1, "", "Iterator"], [159, 11, 1, "", "KeysView"], [159, 11, 1, "", "Mapping"], [159, 11, 1, "", "MappingView"], [159, 11, 1, "", "MutableMapping"], [159, 11, 1, "", "MutableSequence"], [159, 11, 1, "", "MutableSet"], [159, 11, 1, "", "Reversible"], [159, 11, 1, "", "Sequence"], [159, 11, 1, "", "Set"], [159, 11, 1, "", "Sized"], [159, 11, 1, "", "ValuesView"]], "collections.defaultdict": [[158, 8, 1, "", "__missing__"], [158, 7, 1, "", "default_factory"]], "collections.deque": [[158, 8, 1, "", "append"], [158, 8, 1, "", "appendleft"], [158, 8, 1, "", "clear"], [158, 8, 1, "", "copy"], [158, 8, 1, "", "count"], [158, 8, 1, "", "extend"], [158, 8, 1, "", "extendleft"], [158, 8, 1, "", "index"], [158, 8, 1, "", "insert"], [158, 7, 1, "", "maxlen"], [158, 8, 1, "", "pop"], [158, 8, 1, "", "popleft"], [158, 8, 1, "", "remove"], [158, 8, 1, "", "reverse"], [158, 8, 1, "", "rotate"]], "collections.somenamedtuple": [[158, 8, 1, "", "_asdict"], [158, 7, 1, "", "_field_defaults"], [158, 7, 1, "", "_fields"], [158, 8, 1, "", "_make"], [158, 8, 1, "", "_replace"]], "colorsys": [[160, 12, 1, "", "hls_to_rgb"], [160, 12, 1, "", "hsv_to_rgb"], [160, 12, 1, "", "rgb_to_hls"], [160, 12, 1, "", "rgb_to_hsv"], [160, 12, 1, "", "rgb_to_yiq"], [160, 12, 1, "", "yiq_to_rgb"]], "compileall": [[161, 12, 1, "", "compile_dir"], [161, 12, 1, "", "compile_file"], [161, 12, 1, "", "compile_path"], [161, 14, 1, "cmdoption-compileall-hardlink-dupes", "--hardlink-dupes"], [161, 14, 1, "cmdoption-compileall-invalidation-mode", "--invalidation-mode"], [161, 14, 1, "cmdoption-compileall-b", "-b"], [161, 14, 1, "cmdoption-compileall-d", "-d"], [161, 14, 1, "cmdoption-compileall-e", "-e"], [161, 14, 1, "cmdoption-compileall-f", "-f"], [161, 14, 1, "cmdoption-compileall-i", "-i"], [161, 14, 1, "cmdoption-compileall-j", "-j"], [161, 14, 1, "cmdoption-compileall-l", "-l"], [161, 14, 1, "cmdoption-compileall-o", "-o"], [161, 14, 1, "cmdoption-compileall-p", "-p"], [161, 14, 1, "cmdoption-compileall-q", "-q"], [161, 14, 1, "cmdoption-compileall-r", "-r"], [161, 14, 1, "cmdoption-compileall-s", "-s"], [161, 14, 1, "cmdoption-compileall-x", "-x"], [161, 14, 1, "cmdoption-compileall-arg-directory", "directory"], [161, 14, 1, "cmdoption-compileall-arg-file", "file"]], "concurrent": [[164, 10, 0, "-", "futures"]], "concurrent.futures": [[164, 9, 1, "", "ALL_COMPLETED"], [164, 6, 1, "", "BrokenExecutor"], [164, 6, 1, "", "CancelledError"], [164, 11, 1, "", "Executor"], [164, 9, 1, "", "FIRST_COMPLETED"], [164, 9, 1, "", "FIRST_EXCEPTION"], [164, 11, 1, "", "Future"], [164, 6, 1, "", "InvalidStateError"], [164, 11, 1, "", "ProcessPoolExecutor"], [164, 11, 1, "", "ThreadPoolExecutor"], [164, 6, 1, "", "TimeoutError"], [164, 12, 1, "", "as_completed"], [164, 12, 1, "", "wait"]], "concurrent.futures.Executor": [[164, 8, 1, "", "map"], [164, 8, 1, "", "shutdown"], [164, 8, 1, "", "submit"]], "concurrent.futures.Future": [[164, 8, 1, "", "add_done_callback"], [164, 8, 1, "", "cancel"], [164, 8, 1, "", "cancelled"], [164, 8, 1, "", "done"], [164, 8, 1, "", "exception"], [164, 8, 1, "", "result"], [164, 8, 1, "", "running"], [164, 8, 1, "", "set_exception"], [164, 8, 1, "", "set_result"], [164, 8, 1, "", "set_running_or_notify_cancel"]], "concurrent.futures.process": [[164, 6, 1, "", "BrokenProcessPool"]], "concurrent.futures.thread": [[164, 6, 1, "", "BrokenThreadPool"]], "configparser": [[165, 11, 1, "", "BasicInterpolation"], [165, 11, 1, "", "ConfigParser"], [165, 6, 1, "", "DuplicateOptionError"], [165, 6, 1, "", "DuplicateSectionError"], [165, 6, 1, "", "Error"], [165, 11, 1, "", "ExtendedInterpolation"], [165, 6, 1, "", "InterpolationDepthError"], [165, 6, 1, "", "InterpolationError"], [165, 6, 1, "", "InterpolationMissingOptionError"], [165, 6, 1, "", "InterpolationSyntaxError"], [165, 9, 1, "", "MAX_INTERPOLATION_DEPTH"], [165, 6, 1, "", "MissingSectionHeaderError"], [165, 6, 1, "", "NoOptionError"], [165, 6, 1, "", "NoSectionError"], [165, 6, 1, "", "ParsingError"], [165, 11, 1, "", "RawConfigParser"]], "configparser.ConfigParser": [[165, 7, 1, "", "BOOLEAN_STATES"], [165, 7, 1, "", "SECTCRE"], [165, 8, 1, "", "add_section"], [165, 8, 1, "", "defaults"], [165, 8, 1, "", "get"], [165, 8, 1, "", "getboolean"], [165, 8, 1, "", "getfloat"], [165, 8, 1, "", "getint"], [165, 8, 1, "", "has_option"], [165, 8, 1, "", "has_section"], [165, 8, 1, "", "items"], [165, 8, 1, "", "options"], [165, 8, 1, "", "optionxform"], [165, 8, 1, "", "read"], [165, 8, 1, "", "read_dict"], [165, 8, 1, "", "read_file"], [165, 8, 1, "", "read_string"], [165, 8, 1, "", "remove_option"], [165, 8, 1, "", "remove_section"], [165, 8, 1, "", "sections"], [165, 8, 1, "", "set"], [165, 8, 1, "", "write"]], "configparser.RawConfigParser": [[165, 8, 1, "", "add_section"], [165, 8, 1, "", "set"]], "container": [[342, 8, 1, "", "__iter__"]], "contextlib": [[167, 11, 1, "", "AbstractAsyncContextManager"], [167, 11, 1, "", "AbstractContextManager"], [167, 11, 1, "", "AsyncContextDecorator"], [167, 11, 1, "", "AsyncExitStack"], [167, 11, 1, "", "ContextDecorator"], [167, 11, 1, "", "ExitStack"], [167, 12, 1, "", "aclosing"], [167, 12, 1, "", "asynccontextmanager"], [167, 12, 1, "", "chdir"], [167, 12, 1, "", "closing"], [167, 12, 1, "", "contextmanager"], [167, 12, 1, "", "nullcontext"], [167, 12, 1, "", "redirect_stderr"], [167, 12, 1, "", "redirect_stdout"], [167, 12, 1, "", "suppress"]], "contextlib.AsyncExitStack": [[167, 8, 1, "", "aclose"], [167, 8, 1, "", "enter_async_context"], [167, 8, 1, "", "push_async_callback"], [167, 8, 1, "", "push_async_exit"]], "contextlib.ExitStack": [[167, 8, 1, "", "callback"], [167, 8, 1, "", "close"], [167, 8, 1, "", "enter_context"], [167, 8, 1, "", "pop_all"], [167, 8, 1, "", "push"]], "contextmanager": [[342, 8, 1, "", "__enter__"], [342, 8, 1, "", "__exit__"]], "contextvars": [[168, 11, 1, "", "Context"], [168, 11, 1, "", "ContextVar"], [168, 11, 1, "", "Token"], [168, 12, 1, "", "copy_context"]], "contextvars.Context": [[168, 8, 1, "", "copy"], [168, 8, 1, "", "get"], [168, 8, 1, "", "items"], [168, 8, 1, "", "keys"], [168, 8, 1, "", "run"], [168, 8, 1, "", "values"]], "contextvars.ContextVar": [[168, 8, 1, "", "get"], [168, 7, 1, "", "name"], [168, 8, 1, "", "reset"], [168, 8, 1, "", "set"]], "contextvars.Token": [[168, 7, 1, "", "MISSING"], [168, 7, 1, "", "old_value"], [168, 7, 1, "", "var"]], "copy": [[169, 6, 1, "", "Error"], [169, 12, 1, "", "copy"], [169, 12, 1, "", "deepcopy"]], "copyreg": [[170, 12, 1, "", "constructor"], [170, 12, 1, "", "pickle"]], "coroutine": [[426, 8, 1, "", "close"], [426, 8, 1, "", "send"], [426, 8, 1, "", "throw"]], "crypt": [[171, 9, 1, "", "METHOD_BLOWFISH"], [171, 9, 1, "", "METHOD_CRYPT"], [171, 9, 1, "", "METHOD_MD5"], [171, 9, 1, "", "METHOD_SHA256"], [171, 9, 1, "", "METHOD_SHA512"], [171, 12, 1, "", "crypt"], [171, 7, 1, "", "methods"], [171, 12, 1, "", "mksalt"]], "csv": [[173, 11, 1, "", "Dialect"], [173, 11, 1, "", "DictReader"], [173, 11, 1, "", "DictWriter"], [173, 6, 1, "", "Error"], [173, 9, 1, "", "QUOTE_ALL"], [173, 9, 1, "", "QUOTE_MINIMAL"], [173, 9, 1, "", "QUOTE_NONE"], [173, 9, 1, "", "QUOTE_NONNUMERIC"], [173, 9, 1, "", "QUOTE_NOTNULL"], [173, 9, 1, "", "QUOTE_STRINGS"], [173, 11, 1, "", "Sniffer"], [173, 11, 1, "", "excel"], [173, 11, 1, "", "excel_tab"], [173, 12, 1, "", "field_size_limit"], [173, 12, 1, "", "get_dialect"], [173, 12, 1, "", "list_dialects"], [173, 12, 1, "", "reader"], [173, 12, 1, "", "register_dialect"], [173, 11, 1, "", "unix_dialect"], [173, 12, 1, "", "unregister_dialect"], [173, 12, 1, "", "writer"]], "csv.Dialect": [[173, 7, 1, "", "delimiter"], [173, 7, 1, "", "doublequote"], [173, 7, 1, "", "escapechar"], [173, 7, 1, "", "lineterminator"], [173, 7, 1, "", "quotechar"], [173, 7, 1, "", "quoting"], [173, 7, 1, "", "skipinitialspace"], [173, 7, 1, "", "strict"]], "csv.DictReader": [[173, 7, 1, "", "fieldnames"]], "csv.DictWriter": [[173, 8, 1, "", "writeheader"]], "csv.Sniffer": [[173, 8, 1, "", "has_header"], [173, 8, 1, "", "sniff"]], "csv.csvreader": [[173, 8, 1, "", "__next__"], [173, 7, 1, "", "dialect"], [173, 7, 1, "", "line_num"]], "csv.csvwriter": [[173, 7, 1, "", "dialect"], [173, 8, 1, "", "writerow"], [173, 8, 1, "", "writerows"]], "ctypes": [[174, 6, 1, "", "ArgumentError"], [174, 11, 1, "", "Array"], [174, 11, 1, "", "BigEndianStructure"], [174, 11, 1, "", "BigEndianUnion"], [174, 11, 1, "", "CDLL"], [174, 12, 1, "", "CFUNCTYPE"], [174, 12, 1, "", "DllCanUnloadNow"], [174, 12, 1, "", "DllGetClassObject"], [174, 12, 1, "", "FormatError"], [174, 12, 1, "", "GetLastError"], [174, 11, 1, "", "HRESULT"], [174, 11, 1, "", "LibraryLoader"], [174, 11, 1, "", "LittleEndianStructure"], [174, 11, 1, "", "LittleEndianUnion"], [174, 11, 1, "", "OleDLL"], [174, 12, 1, "", "POINTER"], [174, 12, 1, "", "PYFUNCTYPE"], [174, 11, 1, "", "PyDLL"], [174, 11, 1, "", "Structure"], [174, 11, 1, "", "Union"], [174, 12, 1, "", "WINFUNCTYPE"], [174, 11, 1, "", "WinDLL"], [174, 12, 1, "", "WinError"], [174, 11, 1, "", "_CData"], [174, 11, 1, "", "_FuncPtr"], [174, 11, 1, "", "_Pointer"], [174, 11, 1, "", "_SimpleCData"], [174, 12, 1, "", "addressof"], [174, 12, 1, "", "alignment"], [174, 12, 1, "", "byref"], [174, 11, 1, "", "c_bool"], [174, 11, 1, "", "c_byte"], [174, 11, 1, "", "c_char"], [174, 11, 1, "", "c_char_p"], [174, 11, 1, "", "c_double"], [174, 11, 1, "", "c_float"], [174, 11, 1, "", "c_int"], [174, 11, 1, "", "c_int16"], [174, 11, 1, "", "c_int32"], [174, 11, 1, "", "c_int64"], [174, 11, 1, "", "c_int8"], [174, 11, 1, "", "c_long"], [174, 11, 1, "", "c_longdouble"], [174, 11, 1, "", "c_longlong"], [174, 11, 1, "", "c_short"], [174, 11, 1, "", "c_size_t"], [174, 11, 1, "", "c_ssize_t"], [174, 11, 1, "", "c_time_t"], [174, 11, 1, "", "c_ubyte"], [174, 11, 1, "", "c_uint"], [174, 11, 1, "", "c_uint16"], [174, 11, 1, "", "c_uint32"], [174, 11, 1, "", "c_uint64"], [174, 11, 1, "", "c_uint8"], [174, 11, 1, "", "c_ulong"], [174, 11, 1, "", "c_ulonglong"], [174, 11, 1, "", "c_ushort"], [174, 11, 1, "", "c_void_p"], [174, 11, 1, "", "c_wchar"], [174, 11, 1, "", "c_wchar_p"], [174, 12, 1, "", "cast"], [174, 12, 1, "", "create_string_buffer"], [174, 12, 1, "", "create_unicode_buffer"], [174, 12, 1, "", "get_errno"], [174, 12, 1, "", "get_last_error"], [174, 12, 1, "", "memmove"], [174, 12, 1, "", "memset"], [174, 12, 1, "", "pointer"], [174, 11, 1, "", "py_object"], [174, 12, 1, "", "resize"], [174, 12, 1, "", "set_errno"], [174, 12, 1, "", "set_last_error"], [174, 12, 1, "", "sizeof"], [174, 12, 1, "", "string_at"], [174, 12, 1, "", "wstring_at"]], "ctypes.Array": [[174, 7, 1, "", "_length_"], [174, 7, 1, "", "_type_"]], "ctypes.LibraryLoader": [[174, 8, 1, "", "LoadLibrary"]], "ctypes.PyDLL": [[174, 7, 1, "", "_handle"], [174, 7, 1, "", "_name"]], "ctypes.Structure": [[174, 7, 1, "", "_anonymous_"], [174, 7, 1, "", "_fields_"], [174, 7, 1, "", "_pack_"]], "ctypes._CData": [[174, 7, 1, "", "_b_base_"], [174, 7, 1, "", "_b_needsfree_"], [174, 7, 1, "", "_objects"], [174, 8, 1, "", "from_address"], [174, 8, 1, "", "from_buffer"], [174, 8, 1, "", "from_buffer_copy"], [174, 8, 1, "", "from_param"], [174, 8, 1, "", "in_dll"]], "ctypes._FuncPtr": [[174, 7, 1, "", "argtypes"], [174, 7, 1, "", "errcheck"], [174, 7, 1, "", "restype"]], "ctypes._Pointer": [[174, 7, 1, "", "_type_"], [174, 7, 1, "", "contents"]], "ctypes._SimpleCData": [[174, 7, 1, "", "value"]], "ctypes.util": [[174, 12, 1, "", "find_library"], [174, 12, 1, "", "find_msvcrt"]], "curses": [[175, 9, 1, "", "ACS_BBSS"], [175, 9, 1, "", "ACS_BLOCK"], [175, 9, 1, "", "ACS_BOARD"], [175, 9, 1, "", "ACS_BSBS"], [175, 9, 1, "", "ACS_BSSB"], [175, 9, 1, "", "ACS_BSSS"], [175, 9, 1, "", "ACS_BTEE"], [175, 9, 1, "", "ACS_BULLET"], [175, 9, 1, "", "ACS_CKBOARD"], [175, 9, 1, "", "ACS_DARROW"], [175, 9, 1, "", "ACS_DEGREE"], [175, 9, 1, "", "ACS_DIAMOND"], [175, 9, 1, "", "ACS_GEQUAL"], [175, 9, 1, "", "ACS_HLINE"], [175, 9, 1, "", "ACS_LANTERN"], [175, 9, 1, "", "ACS_LARROW"], [175, 9, 1, "", "ACS_LEQUAL"], [175, 9, 1, "", "ACS_LLCORNER"], [175, 9, 1, "", "ACS_LRCORNER"], [175, 9, 1, "", "ACS_LTEE"], [175, 9, 1, "", "ACS_NEQUAL"], [175, 9, 1, "", "ACS_PI"], [175, 9, 1, "", "ACS_PLMINUS"], [175, 9, 1, "", "ACS_PLUS"], [175, 9, 1, "", "ACS_RARROW"], [175, 9, 1, "", "ACS_RTEE"], [175, 9, 1, "", "ACS_S1"], [175, 9, 1, "", "ACS_S3"], [175, 9, 1, "", "ACS_S7"], [175, 9, 1, "", "ACS_S9"], [175, 9, 1, "", "ACS_SBBS"], [175, 9, 1, "", "ACS_SBSB"], [175, 9, 1, "", "ACS_SBSS"], [175, 9, 1, "", "ACS_SSBB"], [175, 9, 1, "", "ACS_SSBS"], [175, 9, 1, "", "ACS_SSSB"], [175, 9, 1, "", "ACS_SSSS"], [175, 9, 1, "", "ACS_STERLING"], [175, 9, 1, "", "ACS_TTEE"], [175, 9, 1, "", "ACS_UARROW"], [175, 9, 1, "", "ACS_ULCORNER"], [175, 9, 1, "", "ACS_URCORNER"], [175, 9, 1, "", "ACS_VLINE"], [175, 9, 1, "", "A_ALTCHARSET"], [175, 9, 1, "", "A_ATTRIBUTES"], [175, 9, 1, "", "A_BLINK"], [175, 9, 1, "", "A_BOLD"], [175, 9, 1, "", "A_CHARTEXT"], [175, 9, 1, "", "A_COLOR"], [175, 9, 1, "", "A_DIM"], [175, 9, 1, "", "A_HORIZONTAL"], [175, 9, 1, "", "A_INVIS"], [175, 9, 1, "", "A_ITALIC"], [175, 9, 1, "", "A_LEFT"], [175, 9, 1, "", "A_LOW"], [175, 9, 1, "", "A_NORMAL"], [175, 9, 1, "", "A_PROTECT"], [175, 9, 1, "", "A_REVERSE"], [175, 9, 1, "", "A_RIGHT"], [175, 9, 1, "", "A_STANDOUT"], [175, 9, 1, "", "A_TOP"], [175, 9, 1, "", "A_UNDERLINE"], [175, 9, 1, "", "A_VERTICAL"], [175, 9, 1, "", "BUTTON_ALT"], [175, 9, 1, "", "BUTTON_CTRL"], [175, 9, 1, "", "BUTTON_SHIFT"], [175, 9, 1, "", "BUTTONn_CLICKED"], [175, 9, 1, "", "BUTTONn_DOUBLE_CLICKED"], [175, 9, 1, "", "BUTTONn_PRESSED"], [175, 9, 1, "", "BUTTONn_RELEASED"], [175, 9, 1, "", "BUTTONn_TRIPLE_CLICKED"], [175, 9, 1, "", "COLORS"], [175, 9, 1, "", "COLOR_BLACK"], [175, 9, 1, "", "COLOR_BLUE"], [175, 9, 1, "", "COLOR_CYAN"], [175, 9, 1, "", "COLOR_GREEN"], [175, 9, 1, "", "COLOR_MAGENTA"], [175, 9, 1, "", "COLOR_PAIRS"], [175, 9, 1, "", "COLOR_RED"], [175, 9, 1, "", "COLOR_WHITE"], [175, 9, 1, "", "COLOR_YELLOW"], [175, 9, 1, "", "COLS"], [175, 9, 1, "", "ERR"], [175, 9, 1, "", "KEY_A1"], [175, 9, 1, "", "KEY_A3"], [175, 9, 1, "", "KEY_B2"], [175, 9, 1, "", "KEY_BACKSPACE"], [175, 9, 1, "", "KEY_BEG"], [175, 9, 1, "", "KEY_BREAK"], [175, 9, 1, "", "KEY_BTAB"], [175, 9, 1, "", "KEY_C1"], [175, 9, 1, "", "KEY_C3"], [175, 9, 1, "", "KEY_CANCEL"], [175, 9, 1, "", "KEY_CATAB"], [175, 9, 1, "", "KEY_CLEAR"], [175, 9, 1, "", "KEY_CLOSE"], [175, 9, 1, "", "KEY_COMMAND"], [175, 9, 1, "", "KEY_COPY"], [175, 9, 1, "", "KEY_CREATE"], [175, 9, 1, "", "KEY_CTAB"], [175, 9, 1, "", "KEY_DC"], [175, 9, 1, "", "KEY_DL"], [175, 9, 1, "", "KEY_DOWN"], [175, 9, 1, "", "KEY_EIC"], [175, 9, 1, "", "KEY_END"], [175, 9, 1, "", "KEY_ENTER"], [175, 9, 1, "", "KEY_EOL"], [175, 9, 1, "", "KEY_EOS"], [175, 9, 1, "", "KEY_EXIT"], [175, 9, 1, "", "KEY_F0"], [175, 9, 1, "", "KEY_FIND"], [175, 9, 1, "", "KEY_Fn"], [175, 9, 1, "", "KEY_HELP"], [175, 9, 1, "", "KEY_HOME"], [175, 9, 1, "", "KEY_IC"], [175, 9, 1, "", "KEY_IL"], [175, 9, 1, "", "KEY_LEFT"], [175, 9, 1, "", "KEY_LL"], [175, 9, 1, "", "KEY_MARK"], [175, 9, 1, "", "KEY_MAX"], [175, 9, 1, "", "KEY_MESSAGE"], [175, 9, 1, "", "KEY_MIN"], [175, 9, 1, "", "KEY_MOUSE"], [175, 9, 1, "", "KEY_MOVE"], [175, 9, 1, "", "KEY_NEXT"], [175, 9, 1, "", "KEY_NPAGE"], [175, 9, 1, "", "KEY_OPEN"], [175, 9, 1, "", "KEY_OPTIONS"], [175, 9, 1, "", "KEY_PPAGE"], [175, 9, 1, "", "KEY_PREVIOUS"], [175, 9, 1, "", "KEY_PRINT"], [175, 9, 1, "", "KEY_REDO"], [175, 9, 1, "", "KEY_REFERENCE"], [175, 9, 1, "", "KEY_REFRESH"], [175, 9, 1, "", "KEY_REPLACE"], [175, 9, 1, "", "KEY_RESET"], [175, 9, 1, "", "KEY_RESIZE"], [175, 9, 1, "", "KEY_RESTART"], [175, 9, 1, "", "KEY_RESUME"], [175, 9, 1, "", "KEY_RIGHT"], [175, 9, 1, "", "KEY_SAVE"], [175, 9, 1, "", "KEY_SBEG"], [175, 9, 1, "", "KEY_SCANCEL"], [175, 9, 1, "", "KEY_SCOMMAND"], [175, 9, 1, "", "KEY_SCOPY"], [175, 9, 1, "", "KEY_SCREATE"], [175, 9, 1, "", "KEY_SDC"], [175, 9, 1, "", "KEY_SDL"], [175, 9, 1, "", "KEY_SELECT"], [175, 9, 1, "", "KEY_SEND"], [175, 9, 1, "", "KEY_SEOL"], [175, 9, 1, "", "KEY_SEXIT"], [175, 9, 1, "", "KEY_SF"], [175, 9, 1, "", "KEY_SFIND"], [175, 9, 1, "", "KEY_SHELP"], [175, 9, 1, "", "KEY_SHOME"], [175, 9, 1, "", "KEY_SIC"], [175, 9, 1, "", "KEY_SLEFT"], [175, 9, 1, "", "KEY_SMESSAGE"], [175, 9, 1, "", "KEY_SMOVE"], [175, 9, 1, "", "KEY_SNEXT"], [175, 9, 1, "", "KEY_SOPTIONS"], [175, 9, 1, "", "KEY_SPREVIOUS"], [175, 9, 1, "", "KEY_SPRINT"], [175, 9, 1, "", "KEY_SR"], [175, 9, 1, "", "KEY_SREDO"], [175, 9, 1, "", "KEY_SREPLACE"], [175, 9, 1, "", "KEY_SRESET"], [175, 9, 1, "", "KEY_SRIGHT"], [175, 9, 1, "", "KEY_SRSUME"], [175, 9, 1, "", "KEY_SSAVE"], [175, 9, 1, "", "KEY_SSUSPEND"], [175, 9, 1, "", "KEY_STAB"], [175, 9, 1, "", "KEY_SUNDO"], [175, 9, 1, "", "KEY_SUSPEND"], [175, 9, 1, "", "KEY_UNDO"], [175, 9, 1, "", "KEY_UP"], [175, 9, 1, "", "LINES"], [175, 9, 1, "", "OK"], [175, 9, 1, "", "__version__"], [176, 10, 0, "-", "ascii"], [175, 12, 1, "", "baudrate"], [175, 12, 1, "", "beep"], [175, 12, 1, "", "can_change_color"], [175, 12, 1, "", "cbreak"], [175, 12, 1, "", "color_content"], [175, 12, 1, "", "color_pair"], [175, 12, 1, "", "curs_set"], [175, 12, 1, "", "def_prog_mode"], [175, 12, 1, "", "def_shell_mode"], [175, 12, 1, "", "delay_output"], [175, 12, 1, "", "doupdate"], [175, 12, 1, "", "echo"], [175, 12, 1, "", "endwin"], [175, 12, 1, "", "erasechar"], [175, 6, 1, "", "error"], [175, 12, 1, "", "filter"], [175, 12, 1, "", "flash"], [175, 12, 1, "", "flushinp"], [175, 12, 1, "", "get_escdelay"], [175, 12, 1, "", "get_tabsize"], [175, 12, 1, "", "getmouse"], [175, 12, 1, "", "getsyx"], [175, 12, 1, "", "getwin"], [175, 12, 1, "", "halfdelay"], [175, 12, 1, "", "has_colors"], [175, 12, 1, "", "has_extended_color_support"], [175, 12, 1, "", "has_ic"], [175, 12, 1, "", "has_il"], [175, 12, 1, "", "has_key"], [175, 12, 1, "", "init_color"], [175, 12, 1, "", "init_pair"], [175, 12, 1, "", "initscr"], [175, 12, 1, "", "is_term_resized"], [175, 12, 1, "", "isendwin"], [175, 12, 1, "", "keyname"], [175, 12, 1, "", "killchar"], [175, 12, 1, "", "longname"], [175, 12, 1, "", "meta"], [175, 12, 1, "", "mouseinterval"], [175, 12, 1, "", "mousemask"], [175, 12, 1, "", "napms"], [175, 9, 1, "", "ncurses_version"], [175, 12, 1, "", "newpad"], [175, 12, 1, "", "newwin"], [175, 12, 1, "", "nl"], [175, 12, 1, "", "nocbreak"], [175, 12, 1, "", "noecho"], [175, 12, 1, "", "nonl"], [175, 12, 1, "", "noqiflush"], [175, 12, 1, "", "noraw"], [175, 12, 1, "", "pair_content"], [175, 12, 1, "", "pair_number"], [177, 10, 0, "-", "panel"], [175, 12, 1, "", "putp"], [175, 12, 1, "", "qiflush"], [175, 12, 1, "", "raw"], [175, 12, 1, "", "reset_prog_mode"], [175, 12, 1, "", "reset_shell_mode"], [175, 12, 1, "", "resetty"], [175, 12, 1, "", "resize_term"], [175, 12, 1, "", "resizeterm"], [175, 12, 1, "", "savetty"], [175, 12, 1, "", "set_escdelay"], [175, 12, 1, "", "set_tabsize"], [175, 12, 1, "", "setsyx"], [175, 12, 1, "", "setupterm"], [175, 12, 1, "", "start_color"], [175, 12, 1, "", "termattrs"], [175, 12, 1, "", "termname"], [175, 10, 0, "-", "textpad"], [175, 12, 1, "", "tigetflag"], [175, 12, 1, "", "tigetnum"], [175, 12, 1, "", "tigetstr"], [175, 12, 1, "", "tparm"], [175, 12, 1, "", "typeahead"], [175, 12, 1, "", "unctrl"], [175, 12, 1, "", "unget_wch"], [175, 12, 1, "", "ungetch"], [175, 12, 1, "", "ungetmouse"], [175, 12, 1, "", "update_lines_cols"], [175, 12, 1, "", "use_default_colors"], [175, 12, 1, "", "use_env"], [175, 9, 1, "", "version"], [175, 12, 1, "", "wrapper"]], "curses.ascii": [[176, 9, 1, "", "ACK"], [176, 9, 1, "", "BEL"], [176, 9, 1, "", "BS"], [176, 9, 1, "", "CAN"], [176, 9, 1, "", "CR"], [176, 9, 1, "", "DC1"], [176, 9, 1, "", "DC2"], [176, 9, 1, "", "DC3"], [176, 9, 1, "", "DC4"], [176, 9, 1, "", "DEL"], [176, 9, 1, "", "DLE"], [176, 9, 1, "", "EM"], [176, 9, 1, "", "ENQ"], [176, 9, 1, "", "EOT"], [176, 9, 1, "", "ESC"], [176, 9, 1, "", "ETB"], [176, 9, 1, "", "ETX"], [176, 9, 1, "", "FF"], [176, 9, 1, "", "FS"], [176, 9, 1, "", "GS"], [176, 9, 1, "", "HT"], [176, 9, 1, "", "LF"], [176, 9, 1, "", "NAK"], [176, 9, 1, "", "NL"], [176, 9, 1, "", "NUL"], [176, 9, 1, "", "RS"], [176, 9, 1, "", "SI"], [176, 9, 1, "", "SO"], [176, 9, 1, "", "SOH"], [176, 9, 1, "", "SP"], [176, 9, 1, "", "STX"], [176, 9, 1, "", "SUB"], [176, 9, 1, "", "SYN"], [176, 9, 1, "", "TAB"], [176, 9, 1, "", "US"], [176, 9, 1, "", "VT"], [176, 12, 1, "", "alt"], [176, 12, 1, "", "ascii"], [176, 9, 1, "", "controlnames"], [176, 12, 1, "", "ctrl"], [176, 12, 1, "", "isalnum"], [176, 12, 1, "", "isalpha"], [176, 12, 1, "", "isascii"], [176, 12, 1, "", "isblank"], [176, 12, 1, "", "iscntrl"], [176, 12, 1, "", "isctrl"], [176, 12, 1, "", "isdigit"], [176, 12, 1, "", "isgraph"], [176, 12, 1, "", "islower"], [176, 12, 1, "", "ismeta"], [176, 12, 1, "", "isprint"], [176, 12, 1, "", "ispunct"], [176, 12, 1, "", "isspace"], [176, 12, 1, "", "isupper"], [176, 12, 1, "", "isxdigit"], [176, 12, 1, "", "unctrl"]], "curses.panel.Panel": [[177, 8, 1, "", "above"], [177, 8, 1, "", "below"], [177, 8, 1, "", "bottom"], [177, 8, 1, "", "hidden"], [177, 8, 1, "", "hide"], [177, 8, 1, "", "move"], [177, 8, 1, "", "replace"], [177, 8, 1, "", "set_userptr"], [177, 8, 1, "", "show"], [177, 8, 1, "", "top"], [177, 8, 1, "", "userptr"], [177, 8, 1, "", "window"]], "curses.panel": [[177, 12, 1, "", "bottom_panel"], [177, 12, 1, "", "new_panel"], [177, 12, 1, "", "top_panel"], [177, 12, 1, "", "update_panels"]], "curses.textpad": [[175, 11, 1, "", "Textbox"], [175, 12, 1, "", "rectangle"]], "curses.textpad.Textbox": [[175, 8, 1, "", "do_command"], [175, 8, 1, "", "edit"], [175, 8, 1, "", "gather"], [175, 7, 1, "", "stripspaces"]], "curses.window": [[175, 8, 1, "", "addch"], [175, 8, 1, "", "addnstr"], [175, 8, 1, "", "addstr"], [175, 8, 1, "", "attroff"], [175, 8, 1, "", "attron"], [175, 8, 1, "", "attrset"], [175, 8, 1, "", "bkgd"], [175, 8, 1, "", "bkgdset"], [175, 8, 1, "", "border"], [175, 8, 1, "", "box"], [175, 8, 1, "", "chgat"], [175, 8, 1, "", "clear"], [175, 8, 1, "", "clearok"], [175, 8, 1, "", "clrtobot"], [175, 8, 1, "", "clrtoeol"], [175, 8, 1, "", "cursyncup"], [175, 8, 1, "", "delch"], [175, 8, 1, "", "deleteln"], [175, 8, 1, "", "derwin"], [175, 8, 1, "", "echochar"], [175, 8, 1, "", "enclose"], [175, 7, 1, "", "encoding"], [175, 8, 1, "", "erase"], [175, 8, 1, "", "get_wch"], [175, 8, 1, "", "getbegyx"], [175, 8, 1, "", "getbkgd"], [175, 8, 1, "", "getch"], [175, 8, 1, "", "getkey"], [175, 8, 1, "", "getmaxyx"], [175, 8, 1, "", "getparyx"], [175, 8, 1, "", "getstr"], [175, 8, 1, "", "getyx"], [175, 8, 1, "", "hline"], [175, 8, 1, "", "idcok"], [175, 8, 1, "", "idlok"], [175, 8, 1, "", "immedok"], [175, 8, 1, "", "inch"], [175, 8, 1, "", "insch"], [175, 8, 1, "", "insdelln"], [175, 8, 1, "", "insertln"], [175, 8, 1, "", "insnstr"], [175, 8, 1, "", "insstr"], [175, 8, 1, "", "instr"], [175, 8, 1, "", "is_linetouched"], [175, 8, 1, "", "is_wintouched"], [175, 8, 1, "", "keypad"], [175, 8, 1, "", "leaveok"], [175, 8, 1, "", "move"], [175, 8, 1, "", "mvderwin"], [175, 8, 1, "", "mvwin"], [175, 8, 1, "", "nodelay"], [175, 8, 1, "", "notimeout"], [175, 8, 1, "", "noutrefresh"], [175, 8, 1, "", "overlay"], [175, 8, 1, "", "overwrite"], [175, 8, 1, "", "putwin"], [175, 8, 1, "", "redrawln"], [175, 8, 1, "", "redrawwin"], [175, 8, 1, "", "refresh"], [175, 8, 1, "", "resize"], [175, 8, 1, "", "scroll"], [175, 8, 1, "", "scrollok"], [175, 8, 1, "", "setscrreg"], [175, 8, 1, "", "standend"], [175, 8, 1, "", "standout"], [175, 8, 1, "", "subpad"], [175, 8, 1, "", "subwin"], [175, 8, 1, "", "syncdown"], [175, 8, 1, "", "syncok"], [175, 8, 1, "", "syncup"], [175, 8, 1, "", "timeout"], [175, 8, 1, "", "touchline"], [175, 8, 1, "", "touchwin"], [175, 8, 1, "", "untouchwin"], [175, 8, 1, "", "vline"]], "dataclasses": [[179, 11, 1, "", "Field"], [179, 6, 1, "", "FrozenInstanceError"], [179, 9, 1, "", "KW_ONLY"], [179, 9, 1, "", "MISSING"], [179, 12, 1, "", "__post_init__"], [179, 12, 1, "", "asdict"], [179, 12, 1, "", "astuple"], [179, 12, 1, "", "dataclass"], [179, 12, 1, "", "field"], [179, 12, 1, "", "fields"], [179, 12, 1, "", "is_dataclass"], [179, 12, 1, "", "make_dataclass"], [179, 12, 1, "", "replace"]], "datetime": [[181, 9, 1, "", "MAXYEAR"], [181, 9, 1, "", "MINYEAR"], [181, 7, 1, "", "UTC"], [181, 11, 1, "", "date"], [181, 11, 1, "", "datetime"], [181, 11, 1, "", "time"], [181, 11, 1, "", "timedelta"], [181, 11, 1, "", "timezone"], [181, 11, 1, "", "tzinfo"]], "datetime.date": [[181, 8, 1, "", "__format__"], [181, 8, 1, "", "__str__"], [181, 8, 1, "", "ctime"], [181, 7, 1, "", "day"], [181, 8, 1, "", "fromisocalendar"], [181, 8, 1, "", "fromisoformat"], [181, 8, 1, "", "fromordinal"], [181, 8, 1, "", "fromtimestamp"], [181, 8, 1, "", "isocalendar"], [181, 8, 1, "", "isoformat"], [181, 8, 1, "", "isoweekday"], [181, 7, 1, "", "max"], [181, 7, 1, "", "min"], [181, 7, 1, "", "month"], [181, 8, 1, "", "replace"], [181, 7, 1, "", "resolution"], [181, 8, 1, "", "strftime"], [181, 8, 1, "", "timetuple"], [181, 8, 1, "", "today"], [181, 8, 1, "", "toordinal"], [181, 8, 1, "", "weekday"], [181, 7, 1, "", "year"]], "datetime.datetime": [[181, 8, 1, "", "__format__"], [181, 8, 1, "", "__str__"], [181, 8, 1, "", "astimezone"], [181, 8, 1, "", "combine"], [181, 8, 1, "", "ctime"], [181, 8, 1, "", "date"], [181, 7, 1, "", "day"], [181, 8, 1, "", "dst"], [181, 7, 1, "", "fold"], [181, 8, 1, "", "fromisocalendar"], [181, 8, 1, "", "fromisoformat"], [181, 8, 1, "", "fromordinal"], [181, 8, 1, "", "fromtimestamp"], [181, 7, 1, "", "hour"], [181, 8, 1, "", "isocalendar"], [181, 8, 1, "", "isoformat"], [181, 8, 1, "", "isoweekday"], [181, 7, 1, "", "max"], [181, 7, 1, "", "microsecond"], [181, 7, 1, "", "min"], [181, 7, 1, "", "minute"], [181, 7, 1, "", "month"], [181, 8, 1, "", "now"], [181, 8, 1, "", "replace"], [181, 7, 1, "", "resolution"], [181, 7, 1, "", "second"], [181, 8, 1, "", "strftime"], [181, 8, 1, "", "strptime"], [181, 8, 1, "", "time"], [181, 8, 1, "", "timestamp"], [181, 8, 1, "", "timetuple"], [181, 8, 1, "", "timetz"], [181, 8, 1, "", "today"], [181, 8, 1, "", "toordinal"], [181, 7, 1, "", "tzinfo"], [181, 8, 1, "", "tzname"], [181, 8, 1, "", "utcfromtimestamp"], [181, 8, 1, "", "utcnow"], [181, 8, 1, "", "utcoffset"], [181, 8, 1, "", "utctimetuple"], [181, 8, 1, "", "weekday"], [181, 7, 1, "", "year"]], "datetime.time": [[181, 8, 1, "", "__format__"], [181, 8, 1, "", "__str__"], [181, 8, 1, "", "dst"], [181, 7, 1, "", "fold"], [181, 8, 1, "", "fromisoformat"], [181, 7, 1, "", "hour"], [181, 8, 1, "", "isoformat"], [181, 7, 1, "", "max"], [181, 7, 1, "", "microsecond"], [181, 7, 1, "", "min"], [181, 7, 1, "", "minute"], [181, 8, 1, "", "replace"], [181, 7, 1, "", "resolution"], [181, 7, 1, "", "second"], [181, 8, 1, "", "strftime"], [181, 7, 1, "", "tzinfo"], [181, 8, 1, "", "tzname"], [181, 8, 1, "", "utcoffset"]], "datetime.timedelta": [[181, 7, 1, "", "max"], [181, 7, 1, "", "min"], [181, 7, 1, "", "resolution"], [181, 8, 1, "", "total_seconds"]], "datetime.timezone": [[181, 8, 1, "", "dst"], [181, 8, 1, "", "fromutc"], [181, 8, 1, "", "tzname"], [181, 7, 1, "", "utc"], [181, 8, 1, "", "utcoffset"]], "datetime.tzinfo": [[181, 8, 1, "", "dst"], [181, 8, 1, "", "fromutc"], [181, 8, 1, "", "tzname"], [181, 8, 1, "", "utcoffset"]], "dbm": [[182, 10, 0, "-", "dumb"], [182, 6, 1, "", "error"], [182, 10, 0, "-", "gnu"], [182, 10, 0, "-", "ndbm"], [182, 12, 1, "", "open"], [182, 12, 1, "", "whichdb"]], "dbm.dumb.dumbdbm": [[182, 8, 1, "", "close"], [182, 8, 1, "", "sync"]], "dbm.dumb": [[182, 6, 1, "", "error"], [182, 12, 1, "", "open"]], "dbm.gnu": [[182, 6, 1, "", "error"], [182, 12, 1, "", "open"], [182, 9, 1, "", "open_flags"]], "dbm.gnu.gdbm": [[182, 8, 1, "", "close"], [182, 8, 1, "", "firstkey"], [182, 8, 1, "", "nextkey"], [182, 8, 1, "", "reorganize"], [182, 8, 1, "", "sync"]], "dbm.ndbm": [[182, 6, 1, "", "error"], [182, 9, 1, "", "library"], [182, 12, 1, "", "open"]], "dbm.ndbm.ndbm": [[182, 8, 1, "", "close"]], "decimal": [[184, 11, 1, "", "BasicContext"], [184, 11, 1, "", "Clamped"], [184, 11, 1, "", "Context"], [184, 11, 1, "", "Decimal"], [184, 11, 1, "", "DecimalException"], [184, 11, 1, "", "DefaultContext"], [184, 11, 1, "", "DivisionByZero"], [184, 11, 1, "", "ExtendedContext"], [184, 11, 1, "", "FloatOperation"], [184, 9, 1, "", "HAVE_CONTEXTVAR"], [184, 9, 1, "", "HAVE_THREADS"], [184, 11, 1, "", "Inexact"], [184, 11, 1, "", "InvalidOperation"], [184, 9, 1, "", "MAX_EMAX"], [184, 9, 1, "", "MAX_PREC"], [184, 9, 1, "", "MIN_EMIN"], [184, 9, 1, "", "MIN_ETINY"], [184, 11, 1, "", "Overflow"], [184, 9, 1, "", "ROUND_05UP"], [184, 9, 1, "", "ROUND_CEILING"], [184, 9, 1, "", "ROUND_DOWN"], [184, 9, 1, "", "ROUND_FLOOR"], [184, 9, 1, "", "ROUND_HALF_DOWN"], [184, 9, 1, "", "ROUND_HALF_EVEN"], [184, 9, 1, "", "ROUND_HALF_UP"], [184, 9, 1, "", "ROUND_UP"], [184, 11, 1, "", "Rounded"], [184, 11, 1, "", "Subnormal"], [184, 11, 1, "", "Underflow"], [184, 12, 1, "", "getcontext"], [184, 12, 1, "", "localcontext"], [184, 12, 1, "", "setcontext"]], "decimal.Context": [[184, 8, 1, "", "Etiny"], [184, 8, 1, "", "Etop"], [184, 8, 1, "", "abs"], [184, 8, 1, "", "add"], [184, 8, 1, "", "canonical"], [184, 8, 1, "", "clear_flags"], [184, 8, 1, "", "clear_traps"], [184, 8, 1, "", "compare"], [184, 8, 1, "", "compare_signal"], [184, 8, 1, "", "compare_total"], [184, 8, 1, "", "compare_total_mag"], [184, 8, 1, "", "copy"], [184, 8, 1, "", "copy_abs"], [184, 8, 1, "", "copy_decimal"], [184, 8, 1, "", "copy_negate"], [184, 8, 1, "", "copy_sign"], [184, 8, 1, "", "create_decimal"], [184, 8, 1, "", "create_decimal_from_float"], [184, 8, 1, "", "divide"], [184, 8, 1, "", "divide_int"], [184, 8, 1, "", "divmod"], [184, 8, 1, "", "exp"], [184, 8, 1, "", "fma"], [184, 8, 1, "", "is_canonical"], [184, 8, 1, "", "is_finite"], [184, 8, 1, "", "is_infinite"], [184, 8, 1, "", "is_nan"], [184, 8, 1, "", "is_normal"], [184, 8, 1, "", "is_qnan"], [184, 8, 1, "", "is_signed"], [184, 8, 1, "", "is_snan"], [184, 8, 1, "", "is_subnormal"], [184, 8, 1, "", "is_zero"], [184, 8, 1, "", "ln"], [184, 8, 1, "", "log10"], [184, 8, 1, "", "logb"], [184, 8, 1, "", "logical_and"], [184, 8, 1, "", "logical_invert"], [184, 8, 1, "", "logical_or"], [184, 8, 1, "", "logical_xor"], [184, 8, 1, "", "max"], [184, 8, 1, "", "max_mag"], [184, 8, 1, "", "min"], [184, 8, 1, "", "min_mag"], [184, 8, 1, "", "minus"], [184, 8, 1, "", "multiply"], [184, 8, 1, "", "next_minus"], [184, 8, 1, "", "next_plus"], [184, 8, 1, "", "next_toward"], [184, 8, 1, "", "normalize"], [184, 8, 1, "", "number_class"], [184, 8, 1, "", "plus"], [184, 8, 1, "", "power"], [184, 8, 1, "", "quantize"], [184, 8, 1, "", "radix"], [184, 8, 1, "", "remainder"], [184, 8, 1, "", "remainder_near"], [184, 8, 1, "", "rotate"], [184, 8, 1, "", "same_quantum"], [184, 8, 1, "", "scaleb"], [184, 8, 1, "", "shift"], [184, 8, 1, "", "sqrt"], [184, 8, 1, "", "subtract"], [184, 8, 1, "", "to_eng_string"], [184, 8, 1, "", "to_integral_exact"], [184, 8, 1, "", "to_sci_string"]], "decimal.Decimal": [[184, 8, 1, "", "adjusted"], [184, 8, 1, "", "as_integer_ratio"], [184, 8, 1, "", "as_tuple"], [184, 8, 1, "", "canonical"], [184, 8, 1, "", "compare"], [184, 8, 1, "", "compare_signal"], [184, 8, 1, "", "compare_total"], [184, 8, 1, "", "compare_total_mag"], [184, 8, 1, "", "conjugate"], [184, 8, 1, "", "copy_abs"], [184, 8, 1, "", "copy_negate"], [184, 8, 1, "", "copy_sign"], [184, 8, 1, "", "exp"], [184, 8, 1, "", "fma"], [184, 8, 1, "", "from_float"], [184, 8, 1, "", "is_canonical"], [184, 8, 1, "", "is_finite"], [184, 8, 1, "", "is_infinite"], [184, 8, 1, "", "is_nan"], [184, 8, 1, "", "is_normal"], [184, 8, 1, "", "is_qnan"], [184, 8, 1, "", "is_signed"], [184, 8, 1, "", "is_snan"], [184, 8, 1, "", "is_subnormal"], [184, 8, 1, "", "is_zero"], [184, 8, 1, "", "ln"], [184, 8, 1, "", "log10"], [184, 8, 1, "", "logb"], [184, 8, 1, "", "logical_and"], [184, 8, 1, "", "logical_invert"], [184, 8, 1, "", "logical_or"], [184, 8, 1, "", "logical_xor"], [184, 8, 1, "", "max"], [184, 8, 1, "", "max_mag"], [184, 8, 1, "", "min"], [184, 8, 1, "", "min_mag"], [184, 8, 1, "", "next_minus"], [184, 8, 1, "", "next_plus"], [184, 8, 1, "", "next_toward"], [184, 8, 1, "", "normalize"], [184, 8, 1, "", "number_class"], [184, 8, 1, "", "quantize"], [184, 8, 1, "", "radix"], [184, 8, 1, "", "remainder_near"], [184, 8, 1, "", "rotate"], [184, 8, 1, "", "same_quantum"], [184, 8, 1, "", "scaleb"], [184, 8, 1, "", "shift"], [184, 8, 1, "", "sqrt"], [184, 8, 1, "", "to_eng_string"], [184, 8, 1, "", "to_integral"], [184, 8, 1, "", "to_integral_exact"], [184, 8, 1, "", "to_integral_value"]], "definition": [[342, 7, 1, "", "__name__"], [342, 7, 1, "", "__qualname__"], [342, 7, 1, "", "__type_params__"]], "dict": [[342, 8, 1, "", "clear"], [342, 8, 1, "", "copy"], [342, 8, 1, "", "fromkeys"], [342, 8, 1, "", "get"], [342, 8, 1, "", "items"], [342, 8, 1, "", "keys"], [342, 8, 1, "", "pop"], [342, 8, 1, "", "popitem"], [342, 8, 1, "", "setdefault"], [342, 8, 1, "", "update"], [342, 8, 1, "", "values"]], "difflib": [[188, 11, 1, "", "Differ"], [188, 11, 1, "", "HtmlDiff"], [188, 12, 1, "", "IS_CHARACTER_JUNK"], [188, 12, 1, "", "IS_LINE_JUNK"], [188, 11, 1, "", "SequenceMatcher"], [188, 12, 1, "", "context_diff"], [188, 12, 1, "", "diff_bytes"], [188, 12, 1, "", "get_close_matches"], [188, 12, 1, "", "ndiff"], [188, 12, 1, "", "restore"], [188, 12, 1, "", "unified_diff"]], "difflib.Differ": [[188, 8, 1, "", "compare"]], "difflib.HtmlDiff": [[188, 8, 1, "", "__init__"], [188, 8, 1, "", "make_file"], [188, 8, 1, "", "make_table"]], "difflib.SequenceMatcher": [[188, 8, 1, "", "find_longest_match"], [188, 8, 1, "", "get_grouped_opcodes"], [188, 8, 1, "", "get_matching_blocks"], [188, 8, 1, "", "get_opcodes"], [188, 8, 1, "", "quick_ratio"], [188, 8, 1, "", "ratio"], [188, 8, 1, "", "real_quick_ratio"], [188, 8, 1, "", "set_seq1"], [188, 8, 1, "", "set_seq2"], [188, 8, 1, "", "set_seqs"]], "dis": [[189, 11, 1, "", "Bytecode"], [189, 11, 1, "", "Instruction"], [189, 11, 1, "", "Positions"], [189, 9, 1, "", "cmp_op"], [189, 12, 1, "", "code_info"], [189, 12, 1, "", "dis"], [189, 12, 1, "", "disassemble"], [189, 12, 1, "", "disco"], [189, 12, 1, "", "distb"], [189, 12, 1, "", "findlabels"], [189, 12, 1, "", "findlinestarts"], [189, 12, 1, "", "get_instructions"], [189, 9, 1, "", "hasarg"], [189, 9, 1, "", "hascompare"], [189, 9, 1, "", "hasconst"], [189, 9, 1, "", "hasexc"], [189, 9, 1, "", "hasfree"], [189, 9, 1, "", "hasjabs"], [189, 9, 1, "", "hasjrel"], [189, 9, 1, "", "haslocal"], [189, 9, 1, "", "hasname"], [189, 9, 1, "", "opmap"], [189, 9, 1, "", "opname"], [189, 12, 1, "", "show_code"], [189, 12, 1, "", "stack_effect"], [189, 14, 1, "cmdoption-dis-h", "--help"], [189, 14, 1, "cmdoption-dis-h", "-h"]], "dis.Bytecode": [[189, 9, 1, "", "codeobj"], [189, 8, 1, "", "dis"], [189, 9, 1, "", "first_line"], [189, 8, 1, "", "from_traceback"], [189, 8, 1, "", "info"]], "dis.Instruction": [[189, 9, 1, "", "arg"], [189, 9, 1, "", "argrepr"], [189, 9, 1, "", "argval"], [189, 9, 1, "", "is_jump_target"], [189, 9, 1, "", "offset"], [189, 9, 1, "", "opcode"], [189, 9, 1, "", "opname"], [189, 9, 1, "", "positions"], [189, 9, 1, "", "starts_line"]], "dis.Positions": [[189, 9, 1, "", "col_offset"], [189, 9, 1, "", "end_col_offset"], [189, 9, 1, "", "end_lineno"], [189, 9, 1, "", "lineno"]], "doctest": [[191, 9, 1, "", "COMPARISON_FLAGS"], [191, 9, 1, "", "DONT_ACCEPT_BLANKLINE"], [191, 9, 1, "", "DONT_ACCEPT_TRUE_FOR_1"], [191, 11, 1, "", "DebugRunner"], [191, 12, 1, "", "DocFileSuite"], [191, 11, 1, "", "DocTest"], [191, 6, 1, "", "DocTestFailure"], [191, 11, 1, "", "DocTestFinder"], [191, 11, 1, "", "DocTestParser"], [191, 11, 1, "", "DocTestRunner"], [191, 12, 1, "", "DocTestSuite"], [191, 9, 1, "", "ELLIPSIS"], [191, 11, 1, "", "Example"], [191, 9, 1, "", "FAIL_FAST"], [191, 9, 1, "", "IGNORE_EXCEPTION_DETAIL"], [191, 9, 1, "", "NORMALIZE_WHITESPACE"], [191, 11, 1, "", "OutputChecker"], [191, 9, 1, "", "REPORTING_FLAGS"], [191, 9, 1, "", "REPORT_CDIFF"], [191, 9, 1, "", "REPORT_NDIFF"], [191, 9, 1, "", "REPORT_ONLY_FIRST_FAILURE"], [191, 9, 1, "", "REPORT_UDIFF"], [191, 9, 1, "", "SKIP"], [191, 6, 1, "", "UnexpectedException"], [191, 12, 1, "", "debug"], [191, 12, 1, "", "debug_src"], [191, 6, 1, "", "failureException"], [191, 12, 1, "", "register_optionflag"], [191, 12, 1, "", "run_docstring_examples"], [191, 12, 1, "", "script_from_examples"], [191, 12, 1, "", "set_unittest_reportflags"], [191, 12, 1, "", "testfile"], [191, 12, 1, "", "testmod"], [191, 12, 1, "", "testsource"]], "doctest.DocTest": [[191, 7, 1, "", "docstring"], [191, 7, 1, "", "examples"], [191, 7, 1, "", "filename"], [191, 7, 1, "", "globs"], [191, 7, 1, "", "lineno"], [191, 7, 1, "", "name"]], "doctest.DocTestFailure": [[191, 7, 1, "", "example"], [191, 7, 1, "", "got"], [191, 7, 1, "", "test"]], "doctest.DocTestFinder": [[191, 8, 1, "", "find"]], "doctest.DocTestParser": [[191, 8, 1, "", "get_doctest"], [191, 8, 1, "", "get_examples"], [191, 8, 1, "", "parse"]], "doctest.DocTestRunner": [[191, 8, 1, "", "report_failure"], [191, 8, 1, "", "report_start"], [191, 8, 1, "", "report_success"], [191, 8, 1, "", "report_unexpected_exception"], [191, 8, 1, "", "run"], [191, 8, 1, "", "summarize"]], "doctest.Example": [[191, 7, 1, "", "exc_msg"], [191, 7, 1, "", "indent"], [191, 7, 1, "", "lineno"], [191, 7, 1, "", "options"], [191, 7, 1, "", "source"], [191, 7, 1, "", "want"]], "doctest.OutputChecker": [[191, 8, 1, "", "check_output"], [191, 8, 1, "", "output_difference"]], "doctest.UnexpectedException": [[191, 7, 1, "", "example"], [191, 7, 1, "", "exc_info"], [191, 7, 1, "", "test"]], "email": [[193, 10, 0, "-", "charset"], [195, 10, 0, "-", "contentmanager"], [196, 10, 0, "-", "encoders"], [197, 10, 0, "-", "errors"], [199, 10, 0, "-", "generator"], [200, 10, 0, "-", "header"], [201, 10, 0, "-", "headerregistry"], [202, 10, 0, "-", "iterators"], [203, 10, 0, "-", "message"], [205, 12, 1, "", "message_from_binary_file"], [205, 12, 1, "", "message_from_bytes"], [205, 12, 1, "", "message_from_file"], [205, 12, 1, "", "message_from_string"], [204, 10, 0, "-", "mime"], [205, 10, 0, "-", "parser"], [206, 10, 0, "-", "policy"], [207, 10, 0, "-", "utils"]], "email.charset": [[193, 11, 1, "", "Charset"], [193, 12, 1, "", "add_alias"], [193, 12, 1, "", "add_charset"], [193, 12, 1, "", "add_codec"]], "email.charset.Charset": [[193, 8, 1, "", "__eq__"], [193, 8, 1, "", "__ne__"], [193, 8, 1, "", "__str__"], [193, 8, 1, "", "body_encode"], [193, 7, 1, "", "body_encoding"], [193, 8, 1, "", "get_body_encoding"], [193, 8, 1, "", "get_output_charset"], [193, 8, 1, "", "header_encode"], [193, 8, 1, "", "header_encode_lines"], [193, 7, 1, "", "header_encoding"], [193, 7, 1, "", "input_charset"], [193, 7, 1, "", "input_codec"], [193, 7, 1, "", "output_charset"], [193, 7, 1, "", "output_codec"]], "email.contentmanager": [[195, 11, 1, "", "ContentManager"], [195, 8, 1, "", "get_content"], [195, 9, 1, "", "raw_data_manager"], [195, 8, 1, "", "set_content"]], "email.contentmanager.ContentManager": [[195, 8, 1, "", "add_get_handler"], [195, 8, 1, "", "add_set_handler"], [195, 8, 1, "", "get_content"], [195, 8, 1, "", "set_content"]], "email.encoders": [[196, 12, 1, "", "encode_7or8bit"], [196, 12, 1, "", "encode_base64"], [196, 12, 1, "", "encode_noop"], [196, 12, 1, "", "encode_quopri"]], "email.errors": [[197, 6, 1, "", "BoundaryError"], [197, 6, 1, "", "HeaderDefect"], [197, 6, 1, "", "HeaderParseError"], [197, 6, 1, "", "MessageDefect"], [197, 6, 1, "", "MessageError"], [197, 6, 1, "", "MessageParseError"], [197, 6, 1, "", "MultipartConversionError"]], "email.generator": [[199, 11, 1, "", "BytesGenerator"], [199, 11, 1, "", "DecodedGenerator"], [199, 11, 1, "", "Generator"]], "email.generator.BytesGenerator": [[199, 8, 1, "", "clone"], [199, 8, 1, "", "flatten"], [199, 8, 1, "", "write"]], "email.generator.Generator": [[199, 8, 1, "", "clone"], [199, 8, 1, "", "flatten"], [199, 8, 1, "", "write"]], "email.header": [[200, 11, 1, "", "Header"], [200, 12, 1, "", "decode_header"], [200, 12, 1, "", "make_header"]], "email.header.Header": [[200, 8, 1, "", "__eq__"], [200, 8, 1, "", "__ne__"], [200, 8, 1, "", "__str__"], [200, 8, 1, "", "append"], [200, 8, 1, "", "encode"]], "email.headerregistry": [[201, 11, 1, "", "Address"], [201, 11, 1, "", "AddressHeader"], [201, 11, 1, "", "BaseHeader"], [201, 11, 1, "", "ContentDispositionHeader"], [201, 11, 1, "", "ContentTransferEncoding"], [201, 11, 1, "", "ContentTypeHeader"], [201, 11, 1, "", "DateHeader"], [201, 11, 1, "", "Group"], [201, 11, 1, "", "HeaderRegistry"], [201, 11, 1, "", "MIMEVersionHeader"], [201, 11, 1, "", "ParameterizedMIMEHeader"], [201, 11, 1, "", "SingleAddressHeader"], [201, 11, 1, "", "UnstructuredHeader"]], "email.headerregistry.Address": [[201, 8, 1, "", "__str__"], [201, 7, 1, "", "addr_spec"], [201, 7, 1, "", "display_name"], [201, 7, 1, "", "domain"], [201, 7, 1, "", "username"]], "email.headerregistry.AddressHeader": [[201, 7, 1, "", "addresses"], [201, 7, 1, "", "groups"]], "email.headerregistry.BaseHeader": [[201, 7, 1, "", "defects"], [201, 8, 1, "", "fold"], [201, 7, 1, "", "max_count"], [201, 7, 1, "", "name"]], "email.headerregistry.ContentDispositionHeader": [[201, 7, 1, "", "content_disposition"]], "email.headerregistry.ContentTransferEncoding": [[201, 7, 1, "", "cte"]], "email.headerregistry.ContentTypeHeader": [[201, 7, 1, "", "content_type"], [201, 7, 1, "", "maintype"], [201, 7, 1, "", "subtype"]], "email.headerregistry.DateHeader": [[201, 7, 1, "", "datetime"]], "email.headerregistry.Group": [[201, 8, 1, "", "__str__"], [201, 7, 1, "", "addresses"], [201, 7, 1, "", "display_name"]], "email.headerregistry.HeaderRegistry": [[201, 8, 1, "", "__call__"], [201, 8, 1, "", "__getitem__"], [201, 8, 1, "", "map_to_type"]], "email.headerregistry.MIMEVersionHeader": [[201, 7, 1, "", "major"], [201, 7, 1, "", "minor"], [201, 7, 1, "", "version"]], "email.headerregistry.ParameterizedMIMEHeader": [[201, 7, 1, "", "params"]], "email.headerregistry.SingleAddressHeader": [[201, 7, 1, "", "address"]], "email.iterators": [[202, 12, 1, "", "_structure"], [202, 12, 1, "", "body_line_iterator"], [202, 12, 1, "", "typed_subpart_iterator"]], "email.message": [[203, 11, 1, "", "EmailMessage"], [203, 11, 1, "", "MIMEPart"], [194, 11, 1, "", "Message"]], "email.message.EmailMessage": [[203, 8, 1, "", "__bytes__"], [203, 8, 1, "", "__contains__"], [203, 8, 1, "", "__delitem__"], [203, 8, 1, "", "__getitem__"], [203, 8, 1, "", "__len__"], [203, 8, 1, "", "__setitem__"], [203, 8, 1, "", "__str__"], [203, 8, 1, "", "add_alternative"], [203, 8, 1, "", "add_attachment"], [203, 8, 1, "", "add_header"], [203, 8, 1, "", "add_related"], [203, 8, 1, "", "as_bytes"], [203, 8, 1, "", "as_string"], [203, 8, 1, "", "clear"], [203, 8, 1, "", "clear_content"], [203, 7, 1, "", "defects"], [203, 8, 1, "", "del_param"], [203, 7, 1, "", "epilogue"], [203, 8, 1, "", "get"], [203, 8, 1, "", "get_all"], [203, 8, 1, "", "get_body"], [203, 8, 1, "", "get_boundary"], [203, 8, 1, "", "get_charsets"], [203, 8, 1, "", "get_content"], [203, 8, 1, "", "get_content_charset"], [203, 8, 1, "", "get_content_disposition"], [203, 8, 1, "", "get_content_maintype"], [203, 8, 1, "", "get_content_subtype"], [203, 8, 1, "", "get_content_type"], [203, 8, 1, "", "get_default_type"], [203, 8, 1, "", "get_filename"], [203, 8, 1, "", "get_unixfrom"], [203, 8, 1, "", "is_attachment"], [203, 8, 1, "", "is_multipart"], [203, 8, 1, "", "items"], [203, 8, 1, "", "iter_attachments"], [203, 8, 1, "", "iter_parts"], [203, 8, 1, "", "keys"], [203, 8, 1, "", "make_alternative"], [203, 8, 1, "", "make_mixed"], [203, 8, 1, "", "make_related"], [203, 7, 1, "", "preamble"], [203, 8, 1, "", "replace_header"], [203, 8, 1, "", "set_boundary"], [203, 8, 1, "", "set_content"], [203, 8, 1, "", "set_default_type"], [203, 8, 1, "", "set_param"], [203, 8, 1, "", "set_unixfrom"], [203, 8, 1, "", "values"], [203, 8, 1, "", "walk"]], "email.message.Message": [[194, 8, 1, "", "__bytes__"], [194, 8, 1, "", "__contains__"], [194, 8, 1, "", "__delitem__"], [194, 8, 1, "", "__getitem__"], [194, 8, 1, "", "__len__"], [194, 8, 1, "", "__setitem__"], [194, 8, 1, "", "__str__"], [194, 8, 1, "", "add_header"], [194, 8, 1, "", "as_bytes"], [194, 8, 1, "", "as_string"], [194, 8, 1, "", "attach"], [194, 7, 1, "", "defects"], [194, 8, 1, "", "del_param"], [194, 7, 1, "", "epilogue"], [194, 8, 1, "", "get"], [194, 8, 1, "", "get_all"], [194, 8, 1, "", "get_boundary"], [194, 8, 1, "", "get_charset"], [194, 8, 1, "", "get_charsets"], [194, 8, 1, "", "get_content_charset"], [194, 8, 1, "", "get_content_disposition"], [194, 8, 1, "", "get_content_maintype"], [194, 8, 1, "", "get_content_subtype"], [194, 8, 1, "", "get_content_type"], [194, 8, 1, "", "get_default_type"], [194, 8, 1, "", "get_filename"], [194, 8, 1, "", "get_param"], [194, 8, 1, "", "get_params"], [194, 8, 1, "", "get_payload"], [194, 8, 1, "", "get_unixfrom"], [194, 8, 1, "", "is_multipart"], [194, 8, 1, "", "items"], [194, 8, 1, "", "keys"], [194, 7, 1, "", "preamble"], [194, 8, 1, "", "replace_header"], [194, 8, 1, "", "set_boundary"], [194, 8, 1, "", "set_charset"], [194, 8, 1, "", "set_default_type"], [194, 8, 1, "", "set_param"], [194, 8, 1, "", "set_payload"], [194, 8, 1, "", "set_type"], [194, 8, 1, "", "set_unixfrom"], [194, 8, 1, "", "values"], [194, 8, 1, "", "walk"]], "email.mime": [[204, 10, 0, "-", "application"], [204, 10, 0, "-", "audio"], [204, 10, 0, "-", "base"], [204, 10, 0, "-", "image"], [204, 10, 0, "-", "message"], [204, 10, 0, "-", "multipart"], [204, 10, 0, "-", "nonmultipart"], [204, 10, 0, "-", "text"]], "email.mime.application": [[204, 11, 1, "", "MIMEApplication"]], "email.mime.audio": [[204, 11, 1, "", "MIMEAudio"]], "email.mime.base": [[204, 11, 1, "", "MIMEBase"]], "email.mime.image": [[204, 11, 1, "", "MIMEImage"]], "email.mime.message": [[204, 11, 1, "", "MIMEMessage"]], "email.mime.multipart": [[204, 11, 1, "", "MIMEMultipart"]], "email.mime.nonmultipart": [[204, 11, 1, "", "MIMENonMultipart"]], "email.mime.text": [[204, 11, 1, "", "MIMEText"]], "email.parser": [[205, 11, 1, "", "BytesFeedParser"], [205, 11, 1, "", "BytesHeaderParser"], [205, 11, 1, "", "BytesParser"], [205, 11, 1, "", "FeedParser"], [205, 11, 1, "", "HeaderParser"], [205, 11, 1, "", "Parser"]], "email.parser.BytesFeedParser": [[205, 8, 1, "", "close"], [205, 8, 1, "", "feed"]], "email.parser.BytesParser": [[205, 8, 1, "", "parse"], [205, 8, 1, "", "parsebytes"]], "email.parser.Parser": [[205, 8, 1, "", "parse"], [205, 8, 1, "", "parsestr"]], "email.policy": [[206, 11, 1, "", "Compat32"], [206, 11, 1, "", "EmailPolicy"], [206, 9, 1, "", "HTTP"], [206, 11, 1, "", "Policy"], [206, 9, 1, "", "SMTP"], [206, 9, 1, "", "SMTPUTF8"], [206, 9, 1, "", "compat32"], [206, 9, 1, "", "default"], [206, 9, 1, "", "strict"]], "email.policy.Compat32": [[206, 8, 1, "", "fold"], [206, 8, 1, "", "fold_binary"], [206, 8, 1, "", "header_fetch_parse"], [206, 8, 1, "", "header_source_parse"], [206, 8, 1, "", "header_store_parse"], [206, 7, 1, "", "mangle_from_"]], "email.policy.EmailPolicy": [[206, 7, 1, "", "content_manager"], [206, 8, 1, "", "fold"], [206, 8, 1, "", "fold_binary"], [206, 7, 1, "", "header_factory"], [206, 8, 1, "", "header_fetch_parse"], [206, 8, 1, "", "header_max_count"], [206, 8, 1, "", "header_source_parse"], [206, 8, 1, "", "header_store_parse"], [206, 7, 1, "", "refold_source"], [206, 7, 1, "", "utf8"]], "email.policy.Policy": [[206, 8, 1, "", "clone"], [206, 7, 1, "", "cte_type"], [206, 8, 1, "", "fold"], [206, 8, 1, "", "fold_binary"], [206, 8, 1, "", "handle_defect"], [206, 8, 1, "", "header_fetch_parse"], [206, 8, 1, "", "header_max_count"], [206, 8, 1, "", "header_source_parse"], [206, 8, 1, "", "header_store_parse"], [206, 7, 1, "", "linesep"], [206, 7, 1, "", "mangle_from_"], [206, 7, 1, "", "max_line_length"], [206, 7, 1, "", "message_factory"], [206, 7, 1, "", "raise_on_defect"], [206, 8, 1, "", "register_defect"]], "email.utils": [[207, 12, 1, "", "collapse_rfc2231_value"], [207, 12, 1, "", "decode_params"], [207, 12, 1, "", "decode_rfc2231"], [207, 12, 1, "", "encode_rfc2231"], [207, 12, 1, "", "format_datetime"], [207, 12, 1, "", "formataddr"], [207, 12, 1, "", "formatdate"], [207, 12, 1, "", "getaddresses"], [207, 12, 1, "", "localtime"], [207, 12, 1, "", "make_msgid"], [207, 12, 1, "", "mktime_tz"], [207, 12, 1, "", "parseaddr"], [207, 12, 1, "", "parsedate"], [207, 12, 1, "", "parsedate_to_datetime"], [207, 12, 1, "", "parsedate_tz"], [207, 12, 1, "", "quote"], [207, 12, 1, "", "unquote"]], "encodings": [[156, 10, 0, "-", "idna"], [156, 10, 0, "-", "mbcs"], [156, 10, 0, "-", "utf_8_sig"]], "encodings.idna": [[156, 12, 1, "", "ToASCII"], [156, 12, 1, "", "ToUnicode"], [156, 12, 1, "", "nameprep"]], "ensurepip": [[208, 12, 1, "", "bootstrap"], [208, 12, 1, "", "version"]], "enum": [[209, 11, 1, "", "Enum"], [209, 11, 1, "", "EnumCheck"], [209, 11, 1, "", "EnumType"], [209, 11, 1, "", "Flag"], [209, 11, 1, "", "FlagBoundary"], [209, 11, 1, "", "IntEnum"], [209, 11, 1, "", "IntFlag"], [209, 11, 1, "", "ReprEnum"], [209, 11, 1, "", "StrEnum"], [209, 11, 1, "", "auto"], [209, 12, 1, "", "global_enum"], [209, 12, 1, "", "member"], [209, 12, 1, "", "nonmember"], [209, 12, 1, "", "property"], [209, 12, 1, "", "show_flag_values"], [209, 12, 1, "", "unique"], [209, 12, 1, "", "verify"]], "enum.Enum": [[209, 8, 1, "", "__dir__"], [209, 8, 1, "", "__format__"], [209, 8, 1, "", "__init__"], [209, 8, 1, "", "__init_subclass__"], [209, 8, 1, "", "__new__"], [209, 8, 1, "", "__repr__"], [209, 8, 1, "", "__str__"], [209, 8, 1, "", "_generate_next_value_"], [209, 7, 1, "", "_ignore_"], [209, 8, 1, "", "_missing_"], [209, 7, 1, "", "_name_"], [209, 7, 1, "", "_order_"], [209, 7, 1, "", "_value_"], [209, 7, 1, "", "name"], [209, 7, 1, "", "value"]], "enum.EnumCheck": [[209, 7, 1, "", "CONTINUOUS"], [209, 7, 1, "", "NAMED_FLAGS"], [209, 7, 1, "", "UNIQUE"]], "enum.EnumType": [[209, 8, 1, "", "__call__"], [209, 8, 1, "", "__contains__"], [209, 8, 1, "", "__dir__"], [209, 8, 1, "", "__getitem__"], [209, 8, 1, "", "__iter__"], [209, 8, 1, "", "__len__"], [209, 7, 1, "", "__members__"], [209, 8, 1, "", "__reversed__"]], "enum.Flag": [[209, 8, 1, "", "__and__"], [209, 8, 1, "", "__contains__"], [209, 8, 1, "", "__or__"], [209, 8, 1, "", "__xor__"], [209, 8, 1, "", "_numeric_repr_"]], "enum.FlagBoundary": [[209, 7, 1, "", "CONFORM"], [209, 7, 1, "", "EJECT"], [209, 7, 1, "", "KEEP"], [209, 7, 1, "", "STRICT"]], "errno": [[210, 9, 1, "", "E2BIG"], [210, 9, 1, "", "EACCES"], [210, 9, 1, "", "EADDRINUSE"], [210, 9, 1, "", "EADDRNOTAVAIL"], [210, 9, 1, "", "EADV"], [210, 9, 1, "", "EAFNOSUPPORT"], [210, 9, 1, "", "EAGAIN"], [210, 9, 1, "", "EALREADY"], [210, 9, 1, "", "EBADE"], [210, 9, 1, "", "EBADF"], [210, 9, 1, "", "EBADFD"], [210, 9, 1, "", "EBADMSG"], [210, 9, 1, "", "EBADR"], [210, 9, 1, "", "EBADRQC"], [210, 9, 1, "", "EBADSLT"], [210, 9, 1, "", "EBFONT"], [210, 9, 1, "", "EBUSY"], [210, 9, 1, "", "ECANCELED"], [210, 9, 1, "", "ECHILD"], [210, 9, 1, "", "ECHRNG"], [210, 9, 1, "", "ECOMM"], [210, 9, 1, "", "ECONNABORTED"], [210, 9, 1, "", "ECONNREFUSED"], [210, 9, 1, "", "ECONNRESET"], [210, 9, 1, "", "EDEADLK"], [210, 9, 1, "", "EDEADLOCK"], [210, 9, 1, "", "EDESTADDRREQ"], [210, 9, 1, "", "EDOM"], [210, 9, 1, "", "EDOTDOT"], [210, 9, 1, "", "EDQUOT"], [210, 9, 1, "", "EEXIST"], [210, 9, 1, "", "EFAULT"], [210, 9, 1, "", "EFBIG"], [210, 9, 1, "", "EHOSTDOWN"], [210, 9, 1, "", "EHOSTUNREACH"], [210, 9, 1, "", "EIDRM"], [210, 9, 1, "", "EILSEQ"], [210, 9, 1, "", "EINPROGRESS"], [210, 9, 1, "", "EINTR"], [210, 9, 1, "", "EINVAL"], [210, 9, 1, "", "EIO"], [210, 9, 1, "", "EISCONN"], [210, 9, 1, "", "EISDIR"], [210, 9, 1, "", "EISNAM"], [210, 9, 1, "", "EL2HLT"], [210, 9, 1, "", "EL2NSYNC"], [210, 9, 1, "", "EL3HLT"], [210, 9, 1, "", "EL3RST"], [210, 9, 1, "", "ELIBACC"], [210, 9, 1, "", "ELIBBAD"], [210, 9, 1, "", "ELIBEXEC"], [210, 9, 1, "", "ELIBMAX"], [210, 9, 1, "", "ELIBSCN"], [210, 9, 1, "", "ELNRNG"], [210, 9, 1, "", "ELOOP"], [210, 9, 1, "", "EMFILE"], [210, 9, 1, "", "EMLINK"], [210, 9, 1, "", "EMSGSIZE"], [210, 9, 1, "", "EMULTIHOP"], [210, 9, 1, "", "ENAMETOOLONG"], [210, 9, 1, "", "ENAVAIL"], [210, 9, 1, "", "ENETDOWN"], [210, 9, 1, "", "ENETRESET"], [210, 9, 1, "", "ENETUNREACH"], [210, 9, 1, "", "ENFILE"], [210, 9, 1, "", "ENOANO"], [210, 9, 1, "", "ENOBUFS"], [210, 9, 1, "", "ENOCSI"], [210, 9, 1, "", "ENODATA"], [210, 9, 1, "", "ENODEV"], [210, 9, 1, "", "ENOENT"], [210, 9, 1, "", "ENOEXEC"], [210, 9, 1, "", "ENOLCK"], [210, 9, 1, "", "ENOLINK"], [210, 9, 1, "", "ENOMEM"], [210, 9, 1, "", "ENOMSG"], [210, 9, 1, "", "ENONET"], [210, 9, 1, "", "ENOPKG"], [210, 9, 1, "", "ENOPROTOOPT"], [210, 9, 1, "", "ENOSPC"], [210, 9, 1, "", "ENOSR"], [210, 9, 1, "", "ENOSTR"], [210, 9, 1, "", "ENOSYS"], [210, 9, 1, "", "ENOTBLK"], [210, 9, 1, "", "ENOTCAPABLE"], [210, 9, 1, "", "ENOTCONN"], [210, 9, 1, "", "ENOTDIR"], [210, 9, 1, "", "ENOTEMPTY"], [210, 9, 1, "", "ENOTNAM"], [210, 9, 1, "", "ENOTRECOVERABLE"], [210, 9, 1, "", "ENOTSOCK"], [210, 9, 1, "", "ENOTSUP"], [210, 9, 1, "", "ENOTTY"], [210, 9, 1, "", "ENOTUNIQ"], [210, 9, 1, "", "ENXIO"], [210, 9, 1, "", "EOPNOTSUPP"], [210, 9, 1, "", "EOVERFLOW"], [210, 9, 1, "", "EOWNERDEAD"], [210, 9, 1, "", "EPERM"], [210, 9, 1, "", "EPFNOSUPPORT"], [210, 9, 1, "", "EPIPE"], [210, 9, 1, "", "EPROTO"], [210, 9, 1, "", "EPROTONOSUPPORT"], [210, 9, 1, "", "EPROTOTYPE"], [210, 9, 1, "", "EQFULL"], [210, 9, 1, "", "ERANGE"], [210, 9, 1, "", "EREMCHG"], [210, 9, 1, "", "EREMOTE"], [210, 9, 1, "", "EREMOTEIO"], [210, 9, 1, "", "ERESTART"], [210, 9, 1, "", "EROFS"], [210, 9, 1, "", "ESHUTDOWN"], [210, 9, 1, "", "ESOCKTNOSUPPORT"], [210, 9, 1, "", "ESPIPE"], [210, 9, 1, "", "ESRCH"], [210, 9, 1, "", "ESRMNT"], [210, 9, 1, "", "ESTALE"], [210, 9, 1, "", "ESTRPIPE"], [210, 9, 1, "", "ETIME"], [210, 9, 1, "", "ETIMEDOUT"], [210, 9, 1, "", "ETOOMANYREFS"], [210, 9, 1, "", "ETXTBSY"], [210, 9, 1, "", "EUCLEAN"], [210, 9, 1, "", "EUNATCH"], [210, 9, 1, "", "EUSERS"], [210, 9, 1, "", "EWOULDBLOCK"], [210, 9, 1, "", "EXDEV"], [210, 9, 1, "", "EXFULL"], [210, 9, 1, "", "errorcode"]], "faulthandler": [[212, 12, 1, "", "cancel_dump_traceback_later"], [212, 12, 1, "", "disable"], [212, 12, 1, "", "dump_traceback"], [212, 12, 1, "", "dump_traceback_later"], [212, 12, 1, "", "enable"], [212, 12, 1, "", "is_enabled"], [212, 12, 1, "", "register"], [212, 12, 1, "", "unregister"]], "fcntl": [[213, 12, 1, "", "fcntl"], [213, 12, 1, "", "flock"], [213, 12, 1, "", "ioctl"], [213, 12, 1, "", "lockf"]], "filecmp": [[214, 7, 1, "", "DEFAULT_IGNORES"], [214, 12, 1, "", "clear_cache"], [214, 12, 1, "", "cmp"], [214, 12, 1, "", "cmpfiles"], [214, 11, 1, "", "dircmp"]], "filecmp.dircmp": [[214, 7, 1, "", "common"], [214, 7, 1, "", "common_dirs"], [214, 7, 1, "", "common_files"], [214, 7, 1, "", "common_funny"], [214, 7, 1, "", "diff_files"], [214, 7, 1, "", "funny_files"], [214, 7, 1, "", "left"], [214, 7, 1, "", "left_list"], [214, 7, 1, "", "left_only"], [214, 8, 1, "", "report"], [214, 8, 1, "", "report_full_closure"], [214, 8, 1, "", "report_partial_closure"], [214, 7, 1, "", "right"], [214, 7, 1, "", "right_list"], [214, 7, 1, "", "right_only"], [214, 7, 1, "", "same_files"], [214, 7, 1, "", "subdirs"]], "fileinput": [[216, 11, 1, "", "FileInput"], [216, 12, 1, "", "close"], [216, 12, 1, "", "filelineno"], [216, 12, 1, "", "filename"], [216, 12, 1, "", "fileno"], [216, 12, 1, "", "hook_compressed"], [216, 12, 1, "", "hook_encoded"], [216, 12, 1, "", "input"], [216, 12, 1, "", "isfirstline"], [216, 12, 1, "", "isstdin"], [216, 12, 1, "", "lineno"], [216, 12, 1, "", "nextfile"]], "float": [[342, 8, 1, "", "as_integer_ratio"], [342, 8, 1, "", "fromhex"], [342, 8, 1, "", "hex"], [342, 8, 1, "", "is_integer"]], "fnmatch": [[218, 12, 1, "", "filter"], [218, 12, 1, "", "fnmatch"], [218, 12, 1, "", "fnmatchcase"], [218, 12, 1, "", "translate"]], "fractions": [[219, 11, 1, "", "Fraction"]], "fractions.Fraction": [[219, 8, 1, "", "__ceil__"], [219, 8, 1, "", "__floor__"], [219, 8, 1, "", "__format__"], [219, 8, 1, "", "__round__"], [219, 8, 1, "", "as_integer_ratio"], [219, 7, 1, "", "denominator"], [219, 8, 1, "", "from_decimal"], [219, 8, 1, "", "from_float"], [219, 8, 1, "", "is_integer"], [219, 8, 1, "", "limit_denominator"], [219, 7, 1, "", "numerator"]], "frame": [[426, 8, 1, "", "clear"], [426, 7, 1, "", "f_back"], [426, 7, 1, "", "f_builtins"], [426, 7, 1, "", "f_code"], [426, 7, 1, "", "f_globals"], [426, 7, 1, "", "f_lasti"], [426, 7, 1, "", "f_lineno"], [426, 7, 1, "", "f_locals"], [426, 7, 1, "", "f_trace"], [426, 7, 1, "", "f_trace_lines"], [426, 7, 1, "", "f_trace_opcodes"]], "frozenset": [[342, 8, 1, "", "add"], [342, 8, 1, "", "clear"], [342, 8, 1, "", "copy"], [342, 8, 1, "", "difference"], [342, 8, 1, "", "difference_update"], [342, 8, 1, "", "discard"], [342, 8, 1, "", "intersection"], [342, 8, 1, "", "intersection_update"], [342, 8, 1, "", "isdisjoint"], [342, 8, 1, "", "issubset"], [342, 8, 1, "", "issuperset"], [342, 8, 1, "", "pop"], [342, 8, 1, "", "remove"], [342, 8, 1, "", "symmetric_difference"], [342, 8, 1, "", "symmetric_difference_update"], [342, 8, 1, "", "union"], [342, 8, 1, "", "update"]], "ftplib": [[221, 11, 1, "", "FTP"], [221, 11, 1, "", "FTP_TLS"], [221, 9, 1, "", "all_errors"], [221, 6, 1, "", "error_perm"], [221, 6, 1, "", "error_proto"], [221, 6, 1, "", "error_reply"], [221, 6, 1, "", "error_temp"]], "ftplib.FTP": [[221, 8, 1, "", "abort"], [221, 8, 1, "", "close"], [221, 8, 1, "", "connect"], [221, 8, 1, "", "cwd"], [221, 8, 1, "", "delete"], [221, 8, 1, "", "dir"], [221, 8, 1, "", "getwelcome"], [221, 8, 1, "", "login"], [221, 8, 1, "", "mkd"], [221, 8, 1, "", "mlsd"], [221, 8, 1, "", "nlst"], [221, 8, 1, "", "ntransfercmd"], [221, 8, 1, "", "pwd"], [221, 8, 1, "", "quit"], [221, 8, 1, "", "rename"], [221, 8, 1, "", "retrbinary"], [221, 8, 1, "", "retrlines"], [221, 8, 1, "", "rmd"], [221, 8, 1, "", "sendcmd"], [221, 8, 1, "", "set_debuglevel"], [221, 8, 1, "", "set_pasv"], [221, 8, 1, "", "size"], [221, 8, 1, "", "storbinary"], [221, 8, 1, "", "storlines"], [221, 8, 1, "", "transfercmd"], [221, 8, 1, "", "voidcmd"]], "ftplib.FTP_TLS": [[221, 8, 1, "", "auth"], [221, 8, 1, "", "ccc"], [221, 8, 1, "", "prot_c"], [221, 8, 1, "", "prot_p"], [221, 7, 1, "", "ssl_version"]], "function": [[426, 7, 1, "", "__annotations__"], [426, 7, 1, "", "__closure__"], [426, 7, 1, "", "__code__"], [426, 7, 1, "", "__defaults__"], [426, 7, 1, "", "__dict__"], [426, 7, 1, "", "__doc__"], [426, 7, 1, "", "__globals__"], [426, 7, 1, "", "__kwdefaults__"], [426, 7, 1, "", "__module__"], [426, 7, 1, "", "__name__"], [426, 7, 1, "", "__qualname__"], [426, 7, 1, "", "__type_params__"]], "functools": [[224, 12, 1, "", "cache"], [224, 12, 1, "", "cached_property"], [224, 12, 1, "", "cmp_to_key"], [224, 12, 1, "", "lru_cache"], [224, 12, 1, "", "partial"], [224, 11, 1, "", "partialmethod"], [224, 12, 1, "", "reduce"], [224, 12, 1, "", "singledispatch"], [224, 11, 1, "", "singledispatchmethod"], [224, 12, 1, "", "total_ordering"], [224, 12, 1, "", "update_wrapper"], [224, 12, 1, "", "wraps"]], "functools.partial": [[224, 7, 1, "", "args"], [224, 7, 1, "", "func"], [224, 7, 1, "", "keywords"]], "gc": [[225, 9, 1, "", "DEBUG_COLLECTABLE"], [225, 9, 1, "", "DEBUG_LEAK"], [225, 9, 1, "", "DEBUG_SAVEALL"], [225, 9, 1, "", "DEBUG_STATS"], [225, 9, 1, "", "DEBUG_UNCOLLECTABLE"], [225, 9, 1, "", "callbacks"], [225, 12, 1, "", "collect"], [225, 12, 1, "", "disable"], [225, 12, 1, "", "enable"], [225, 12, 1, "", "freeze"], [225, 9, 1, "", "garbage"], [225, 12, 1, "", "get_count"], [225, 12, 1, "", "get_debug"], [225, 12, 1, "", "get_freeze_count"], [225, 12, 1, "", "get_objects"], [225, 12, 1, "", "get_referents"], [225, 12, 1, "", "get_referrers"], [225, 12, 1, "", "get_stats"], [225, 12, 1, "", "get_threshold"], [225, 12, 1, "", "is_finalized"], [225, 12, 1, "", "is_tracked"], [225, 12, 1, "", "isenabled"], [225, 12, 1, "", "set_debug"], [225, 12, 1, "", "set_threshold"], [225, 12, 1, "", "unfreeze"]], "generator": [[428, 8, 1, "", "__next__"], [428, 8, 1, "", "close"], [428, 8, 1, "", "send"], [428, 8, 1, "", "throw"]], "genericalias": [[342, 7, 1, "", "__args__"], [342, 7, 1, "", "__origin__"], [342, 7, 1, "", "__parameters__"], [342, 7, 1, "", "__unpacked__"]], "getopt": [[226, 6, 1, "", "GetoptError"], [226, 6, 1, "", "error"], [226, 12, 1, "", "getopt"], [226, 12, 1, "", "gnu_getopt"]], "getpass": [[227, 6, 1, "", "GetPassWarning"], [227, 12, 1, "", "getpass"], [227, 12, 1, "", "getuser"]], "gettext": [[228, 11, 1, "", "GNUTranslations"], [228, 11, 1, "", "NullTranslations"], [228, 12, 1, "", "bindtextdomain"], [228, 12, 1, "", "dgettext"], [228, 12, 1, "", "dngettext"], [228, 12, 1, "", "dnpgettext"], [228, 12, 1, "", "dpgettext"], [228, 12, 1, "", "find"], [228, 12, 1, "", "gettext"], [228, 12, 1, "", "install"], [228, 12, 1, "", "ngettext"], [228, 12, 1, "", "npgettext"], [228, 12, 1, "", "pgettext"], [228, 12, 1, "", "textdomain"], [228, 12, 1, "", "translation"]], "gettext.GNUTranslations": [[228, 8, 1, "", "gettext"], [228, 8, 1, "", "ngettext"], [228, 8, 1, "", "npgettext"], [228, 8, 1, "", "pgettext"]], "gettext.NullTranslations": [[228, 8, 1, "", "_parse"], [228, 8, 1, "", "add_fallback"], [228, 8, 1, "", "charset"], [228, 8, 1, "", "gettext"], [228, 8, 1, "", "info"], [228, 8, 1, "", "install"], [228, 8, 1, "", "ngettext"], [228, 8, 1, "", "npgettext"], [228, 8, 1, "", "pgettext"]], "glob": [[229, 12, 1, "", "escape"], [229, 12, 1, "", "glob"], [229, 12, 1, "", "iglob"]], "graphlib": [[230, 6, 1, "", "CycleError"], [230, 11, 1, "", "TopologicalSorter"]], "graphlib.TopologicalSorter": [[230, 8, 1, "", "add"], [230, 8, 1, "", "done"], [230, 8, 1, "", "get_ready"], [230, 8, 1, "", "is_active"], [230, 8, 1, "", "prepare"], [230, 8, 1, "", "static_order"]], "grp": [[231, 12, 1, "", "getgrall"], [231, 12, 1, "", "getgrgid"], [231, 12, 1, "", "getgrnam"]], "gzip": [[232, 6, 1, "", "BadGzipFile"], [232, 11, 1, "", "GzipFile"], [232, 12, 1, "", "compress"], [232, 12, 1, "", "decompress"], [232, 12, 1, "", "open"], [232, 14, 1, "cmdoption-gzip-best", "--best"], [232, 14, 1, "cmdoption-gzip-d", "--decompress"], [232, 14, 1, "cmdoption-gzip-fast", "--fast"], [232, 14, 1, "cmdoption-gzip-h", "--help"], [232, 14, 1, "cmdoption-gzip-d", "-d"], [232, 14, 1, "cmdoption-gzip-h", "-h"], [232, 14, 1, "cmdoption-gzip-arg-file", "file"]], "gzip.GzipFile": [[232, 7, 1, "", "mtime"], [232, 7, 1, "", "name"], [232, 8, 1, "", "peek"]], "hashlib": [[233, 9, 1, "", "algorithms_available"], [233, 9, 1, "", "algorithms_guaranteed"], [233, 12, 1, "", "blake2b"], [233, 12, 1, "", "blake2s"], [233, 12, 1, "", "file_digest"], [233, 12, 1, "", "md5"], [233, 12, 1, "", "new"], [233, 12, 1, "", "pbkdf2_hmac"], [233, 12, 1, "", "scrypt"], [233, 12, 1, "", "sha1"], [233, 12, 1, "", "sha224"], [233, 12, 1, "", "sha256"], [233, 12, 1, "", "sha384"], [233, 12, 1, "", "sha3_224"], [233, 12, 1, "", "sha3_256"], [233, 12, 1, "", "sha3_384"], [233, 12, 1, "", "sha3_512"], [233, 12, 1, "", "sha512"], [233, 12, 1, "", "shake_128"], [233, 12, 1, "", "shake_256"]], "hashlib.blake2b": [[233, 9, 1, "", "MAX_DIGEST_SIZE"], [233, 9, 1, "", "MAX_KEY_SIZE"], [233, 9, 1, "", "PERSON_SIZE"], [233, 9, 1, "", "SALT_SIZE"]], "hashlib.blake2s": [[233, 9, 1, "", "MAX_DIGEST_SIZE"], [233, 9, 1, "", "MAX_KEY_SIZE"], [233, 9, 1, "", "PERSON_SIZE"], [233, 9, 1, "", "SALT_SIZE"]], "hashlib.hash": [[233, 9, 1, "", "block_size"], [233, 8, 1, "", "copy"], [233, 8, 1, "", "digest"], [233, 9, 1, "", "digest_size"], [233, 8, 1, "", "hexdigest"], [233, 7, 1, "", "name"], [233, 8, 1, "", "update"]], "hashlib.shake": [[233, 8, 1, "", "digest"], [233, 8, 1, "", "hexdigest"]], "heapq": [[234, 12, 1, "", "heapify"], [234, 12, 1, "", "heappop"], [234, 12, 1, "", "heappush"], [234, 12, 1, "", "heappushpop"], [234, 12, 1, "", "heapreplace"], [234, 12, 1, "", "merge"], [234, 12, 1, "", "nlargest"], [234, 12, 1, "", "nsmallest"]], "hmac.HMAC": [[235, 7, 1, "", "block_size"], [235, 8, 1, "", "copy"], [235, 8, 1, "", "digest"], [235, 7, 1, "", "digest_size"], [235, 8, 1, "", "hexdigest"], [235, 7, 1, "", "name"], [235, 8, 1, "", "update"]], "hmac": [[235, 12, 1, "", "compare_digest"], [235, 12, 1, "", "digest"], [235, 12, 1, "", "new"]], "html": [[237, 10, 0, "-", "entities"], [236, 12, 1, "", "escape"], [238, 10, 0, "-", "parser"], [236, 12, 1, "", "unescape"]], "html.entities": [[237, 9, 1, "", "codepoint2name"], [237, 9, 1, "", "entitydefs"], [237, 9, 1, "", "html5"], [237, 9, 1, "", "name2codepoint"]], "html.parser": [[238, 11, 1, "", "HTMLParser"]], "html.parser.HTMLParser": [[238, 8, 1, "", "close"], [238, 8, 1, "", "feed"], [238, 8, 1, "", "get_starttag_text"], [238, 8, 1, "", "getpos"], [238, 8, 1, "", "handle_charref"], [238, 8, 1, "", "handle_comment"], [238, 8, 1, "", "handle_data"], [238, 8, 1, "", "handle_decl"], [238, 8, 1, "", "handle_endtag"], [238, 8, 1, "", "handle_entityref"], [238, 8, 1, "", "handle_pi"], [238, 8, 1, "", "handle_startendtag"], [238, 8, 1, "", "handle_starttag"], [238, 8, 1, "", "reset"], [238, 8, 1, "", "unknown_decl"]], "http": [[239, 11, 1, "", "HTTPMethod"], [239, 11, 1, "", "HTTPStatus"], [240, 10, 0, "-", "client"], [241, 10, 0, "-", "cookiejar"], [242, 10, 0, "-", "cookies"], [243, 10, 0, "-", "server"]], "http.client": [[240, 6, 1, "", "BadStatusLine"], [240, 6, 1, "", "CannotSendHeader"], [240, 6, 1, "", "CannotSendRequest"], [240, 11, 1, "", "HTTPConnection"], [240, 6, 1, "", "HTTPException"], [240, 11, 1, "", "HTTPMessage"], [240, 11, 1, "", "HTTPResponse"], [240, 11, 1, "", "HTTPSConnection"], [240, 9, 1, "", "HTTPS_PORT"], [240, 9, 1, "", "HTTP_PORT"], [240, 6, 1, "", "ImproperConnectionState"], [240, 6, 1, "", "IncompleteRead"], [240, 6, 1, "", "InvalidURL"], [240, 6, 1, "", "LineTooLong"], [240, 6, 1, "", "NotConnected"], [240, 6, 1, "", "RemoteDisconnected"], [240, 6, 1, "", "ResponseNotReady"], [240, 6, 1, "", "UnimplementedFileMode"], [240, 6, 1, "", "UnknownProtocol"], [240, 6, 1, "", "UnknownTransferEncoding"], [240, 12, 1, "", "parse_headers"], [240, 9, 1, "", "responses"]], "http.client.HTTPConnection": [[240, 7, 1, "", "blocksize"], [240, 8, 1, "", "close"], [240, 8, 1, "", "connect"], [240, 8, 1, "", "endheaders"], [240, 8, 1, "", "get_proxy_response_headers"], [240, 8, 1, "", "getresponse"], [240, 8, 1, "", "putheader"], [240, 8, 1, "", "putrequest"], [240, 8, 1, "", "request"], [240, 8, 1, "", "send"], [240, 8, 1, "", "set_debuglevel"], [240, 8, 1, "", "set_tunnel"]], "http.client.HTTPResponse": [[240, 7, 1, "", "closed"], [240, 7, 1, "", "debuglevel"], [240, 8, 1, "", "fileno"], [240, 8, 1, "", "getcode"], [240, 8, 1, "", "getheader"], [240, 8, 1, "", "getheaders"], [240, 8, 1, "", "geturl"], [240, 7, 1, "", "headers"], [240, 8, 1, "", "info"], [240, 7, 1, "", "msg"], [240, 8, 1, "", "read"], [240, 8, 1, "", "readinto"], [240, 7, 1, "", "reason"], [240, 7, 1, "", "status"], [240, 7, 1, "", "url"], [240, 7, 1, "", "version"]], "http.cookiejar": [[241, 11, 1, "", "Cookie"], [241, 11, 1, "", "CookieJar"], [241, 11, 1, "", "CookiePolicy"], [241, 11, 1, "", "DefaultCookiePolicy"], [241, 11, 1, "", "FileCookieJar"], [241, 11, 1, "", "LWPCookieJar"], [241, 6, 1, "", "LoadError"], [241, 11, 1, "", "MozillaCookieJar"]], "http.cookiejar.Cookie": [[241, 7, 1, "", "comment"], [241, 7, 1, "", "comment_url"], [241, 7, 1, "", "discard"], [241, 7, 1, "", "domain_initial_dot"], [241, 7, 1, "", "domain_specified"], [241, 7, 1, "", "expires"], [241, 8, 1, "", "get_nonstandard_attr"], [241, 8, 1, "", "has_nonstandard_attr"], [241, 8, 1, "", "is_expired"], [241, 7, 1, "", "name"], [241, 7, 1, "", "path"], [241, 7, 1, "", "port"], [241, 7, 1, "", "port_specified"], [241, 7, 1, "", "rfc2109"], [241, 7, 1, "", "secure"], [241, 8, 1, "", "set_nonstandard_attr"], [241, 7, 1, "", "value"], [241, 7, 1, "", "version"]], "http.cookiejar.CookieJar": [[241, 8, 1, "", "add_cookie_header"], [241, 8, 1, "", "clear"], [241, 8, 1, "", "clear_session_cookies"], [241, 8, 1, "", "extract_cookies"], [241, 8, 1, "", "make_cookies"], [241, 8, 1, "", "set_cookie"], [241, 8, 1, "", "set_cookie_if_ok"], [241, 8, 1, "", "set_policy"]], "http.cookiejar.CookiePolicy": [[241, 8, 1, "", "domain_return_ok"], [241, 7, 1, "", "hide_cookie2"], [241, 7, 1, "", "netscape"], [241, 8, 1, "", "path_return_ok"], [241, 8, 1, "", "return_ok"], [241, 7, 1, "", "rfc2965"], [241, 8, 1, "", "set_ok"]], "http.cookiejar.DefaultCookiePolicy": [[241, 7, 1, "", "DomainLiberal"], [241, 7, 1, "", "DomainRFC2965Match"], [241, 7, 1, "", "DomainStrict"], [241, 7, 1, "", "DomainStrictNoDots"], [241, 7, 1, "", "DomainStrictNonDomain"], [241, 8, 1, "", "allowed_domains"], [241, 8, 1, "", "blocked_domains"], [241, 8, 1, "", "is_blocked"], [241, 8, 1, "", "is_not_allowed"], [241, 7, 1, "", "rfc2109_as_netscape"], [241, 8, 1, "", "set_allowed_domains"], [241, 8, 1, "", "set_blocked_domains"], [241, 7, 1, "", "strict_domain"], [241, 7, 1, "", "strict_ns_domain"], [241, 7, 1, "", "strict_ns_set_initial_dollar"], [241, 7, 1, "", "strict_ns_set_path"], [241, 7, 1, "", "strict_ns_unverifiable"], [241, 7, 1, "", "strict_rfc2965_unverifiable"]], "http.cookiejar.FileCookieJar": [[241, 7, 1, "", "delayload"], [241, 7, 1, "", "filename"], [241, 8, 1, "", "load"], [241, 8, 1, "", "revert"], [241, 8, 1, "", "save"]], "http.cookies": [[242, 11, 1, "", "BaseCookie"], [242, 6, 1, "", "CookieError"], [242, 11, 1, "", "Morsel"], [242, 11, 1, "", "SimpleCookie"]], "http.cookies.BaseCookie": [[242, 8, 1, "", "js_output"], [242, 8, 1, "", "load"], [242, 8, 1, "", "output"], [242, 8, 1, "", "value_decode"], [242, 8, 1, "", "value_encode"]], "http.cookies.Morsel": [[242, 8, 1, "", "OutputString"], [242, 7, 1, "", "coded_value"], [242, 7, 1, "", "comment"], [242, 8, 1, "", "copy"], [242, 7, 1, "", "domain"], [242, 7, 1, "", "expires"], [242, 7, 1, "", "httponly"], [242, 8, 1, "", "isReservedKey"], [242, 8, 1, "", "js_output"], [242, 7, 1, "", "key"], [242, 8, 1, "", "output"], [242, 7, 1, "", "path"], [242, 7, 1, "", "samesite"], [242, 7, 1, "", "secure"], [242, 8, 1, "", "set"], [242, 8, 1, "", "setdefault"], [242, 8, 1, "", "update"], [242, 7, 1, "", "value"], [242, 7, 1, "", "version"]], "http.server": [[243, 11, 1, "", "BaseHTTPRequestHandler"], [243, 11, 1, "", "CGIHTTPRequestHandler"], [243, 11, 1, "", "HTTPServer"], [243, 11, 1, "", "SimpleHTTPRequestHandler"], [243, 11, 1, "", "ThreadingHTTPServer"]], "http.server.BaseHTTPRequestHandler": [[243, 7, 1, "", "MessageClass"], [243, 8, 1, "", "address_string"], [243, 7, 1, "", "client_address"], [243, 7, 1, "", "close_connection"], [243, 7, 1, "", "command"], [243, 8, 1, "", "date_time_string"], [243, 8, 1, "", "end_headers"], [243, 7, 1, "", "error_content_type"], [243, 7, 1, "", "error_message_format"], [243, 8, 1, "", "flush_headers"], [243, 8, 1, "", "handle"], [243, 8, 1, "", "handle_expect_100"], [243, 8, 1, "", "handle_one_request"], [243, 7, 1, "", "headers"], [243, 8, 1, "", "log_date_time_string"], [243, 8, 1, "", "log_error"], [243, 8, 1, "", "log_message"], [243, 8, 1, "", "log_request"], [243, 7, 1, "", "path"], [243, 7, 1, "", "protocol_version"], [243, 7, 1, "", "request_version"], [243, 7, 1, "", "requestline"], [243, 7, 1, "", "responses"], [243, 7, 1, "", "rfile"], [243, 8, 1, "", "send_error"], [243, 8, 1, "", "send_header"], [243, 8, 1, "", "send_response"], [243, 8, 1, "", "send_response_only"], [243, 7, 1, "", "server"], [243, 7, 1, "", "server_version"], [243, 7, 1, "", "sys_version"], [243, 8, 1, "", "version_string"], [243, 7, 1, "", "wfile"]], "http.server.CGIHTTPRequestHandler": [[243, 7, 1, "", "cgi_directories"], [243, 8, 1, "", "do_POST"]], "http.server.SimpleHTTPRequestHandler": [[243, 8, 1, "", "do_GET"], [243, 8, 1, "", "do_HEAD"], [243, 7, 1, "", "extensions_map"], [243, 7, 1, "", "server_version"]], "imaplib": [[246, 11, 1, "", "IMAP4"], [246, 11, 1, "", "IMAP4_SSL"], [246, 11, 1, "", "IMAP4_stream"], [246, 12, 1, "", "Int2AP"], [246, 12, 1, "", "Internaldate2tuple"], [246, 12, 1, "", "ParseFlags"], [246, 12, 1, "", "Time2Internaldate"]], "imaplib.IMAP4": [[246, 7, 1, "", "PROTOCOL_VERSION"], [246, 6, 1, "", "abort"], [246, 8, 1, "", "append"], [246, 8, 1, "", "authenticate"], [246, 8, 1, "", "check"], [246, 8, 1, "", "close"], [246, 8, 1, "", "copy"], [246, 8, 1, "", "create"], [246, 7, 1, "", "debug"], [246, 8, 1, "", "delete"], [246, 8, 1, "", "deleteacl"], [246, 8, 1, "", "enable"], [246, 6, 1, "", "error"], [246, 8, 1, "", "expunge"], [246, 8, 1, "", "fetch"], [246, 8, 1, "", "getacl"], [246, 8, 1, "", "getannotation"], [246, 8, 1, "", "getquota"], [246, 8, 1, "", "getquotaroot"], [246, 8, 1, "", "list"], [246, 8, 1, "", "login"], [246, 8, 1, "", "login_cram_md5"], [246, 8, 1, "", "logout"], [246, 8, 1, "", "lsub"], [246, 8, 1, "", "myrights"], [246, 8, 1, "", "namespace"], [246, 8, 1, "", "noop"], [246, 8, 1, "", "open"], [246, 8, 1, "", "partial"], [246, 8, 1, "", "proxyauth"], [246, 8, 1, "", "read"], [246, 8, 1, "", "readline"], [246, 6, 1, "", "readonly"], [246, 8, 1, "", "recent"], [246, 8, 1, "", "rename"], [246, 8, 1, "", "response"], [246, 8, 1, "", "search"], [246, 8, 1, "", "select"], [246, 8, 1, "", "send"], [246, 8, 1, "", "setacl"], [246, 8, 1, "", "setannotation"], [246, 8, 1, "", "setquota"], [246, 8, 1, "", "shutdown"], [246, 8, 1, "", "socket"], [246, 8, 1, "", "sort"], [246, 8, 1, "", "starttls"], [246, 8, 1, "", "status"], [246, 8, 1, "", "store"], [246, 8, 1, "", "subscribe"], [246, 8, 1, "", "thread"], [246, 8, 1, "", "uid"], [246, 8, 1, "", "unselect"], [246, 8, 1, "", "unsubscribe"], [246, 7, 1, "", "utf8_enabled"], [246, 8, 1, "", "xatom"]], "imghdr": [[247, 9, 1, "", "tests"], [247, 12, 1, "", "what"]], "importlib": [[248, 12, 1, "", "__import__"], [248, 10, 0, "-", "abc"], [248, 12, 1, "", "import_module"], [248, 12, 1, "", "invalidate_caches"], [248, 10, 0, "-", "machinery"], [249, 10, 0, "-", "metadata"], [248, 12, 1, "", "reload"], [250, 10, 0, "-", "resources"], [248, 10, 0, "-", "util"]], "importlib.abc": [[248, 11, 1, "", "ExecutionLoader"], [248, 11, 1, "", "FileLoader"], [248, 11, 1, "", "InspectLoader"], [248, 11, 1, "", "Loader"], [248, 11, 1, "", "MetaPathFinder"], [248, 11, 1, "", "PathEntryFinder"], [248, 11, 1, "", "ResourceLoader"], [248, 11, 1, "", "ResourceReader"], [248, 11, 1, "", "SourceLoader"], [248, 11, 1, "", "Traversable"], [248, 11, 1, "", "TraversableResources"]], "importlib.abc.ExecutionLoader": [[248, 8, 1, "", "get_filename"]], "importlib.abc.FileLoader": [[248, 8, 1, "", "get_data"], [248, 8, 1, "", "get_filename"], [248, 8, 1, "", "load_module"], [248, 7, 1, "", "name"], [248, 7, 1, "", "path"]], "importlib.abc.InspectLoader": [[248, 8, 1, "", "exec_module"], [248, 8, 1, "", "get_code"], [248, 8, 1, "", "get_source"], [248, 8, 1, "", "is_package"], [248, 8, 1, "", "load_module"], [248, 8, 1, "", "source_to_code"]], "importlib.abc.Loader": [[248, 8, 1, "", "create_module"], [248, 8, 1, "", "exec_module"], [248, 8, 1, "", "load_module"]], "importlib.abc.MetaPathFinder": [[248, 8, 1, "", "find_spec"], [248, 8, 1, "", "invalidate_caches"]], "importlib.abc.PathEntryFinder": [[248, 8, 1, "", "find_spec"], [248, 8, 1, "", "invalidate_caches"]], "importlib.abc.ResourceLoader": [[248, 8, 1, "", "get_data"]], "importlib.abc.ResourceReader": [[248, 8, 1, "", "contents"], [248, 8, 1, "", "is_resource"], [248, 8, 1, "", "open_resource"], [248, 8, 1, "", "resource_path"]], "importlib.abc.SourceLoader": [[248, 8, 1, "", "exec_module"], [248, 8, 1, "", "get_code"], [248, 8, 1, "", "get_source"], [248, 8, 1, "", "is_package"], [248, 8, 1, "", "load_module"], [248, 8, 1, "", "path_mtime"], [248, 8, 1, "", "path_stats"], [248, 8, 1, "", "set_data"]], "importlib.abc.Traversable": [[248, 8, 1, "", "__truediv__"], [248, 8, 1, "", "is_dir"], [248, 8, 1, "", "is_file"], [248, 8, 1, "", "iterdir"], [248, 8, 1, "", "joinpath"], [248, 7, 1, "", "name"], [248, 8, 1, "", "open"], [248, 8, 1, "", "read_bytes"], [248, 8, 1, "", "read_text"]], "importlib.abc.TraversableResources": [[248, 8, 1, "", "files"]], "importlib.machinery": [[248, 7, 1, "", "BYTECODE_SUFFIXES"], [248, 11, 1, "", "BuiltinImporter"], [248, 7, 1, "", "DEBUG_BYTECODE_SUFFIXES"], [248, 7, 1, "", "EXTENSION_SUFFIXES"], [248, 11, 1, "", "ExtensionFileLoader"], [248, 11, 1, "", "FileFinder"], [248, 11, 1, "", "FrozenImporter"], [248, 11, 1, "", "ModuleSpec"], [248, 11, 1, "", "NamespaceLoader"], [248, 7, 1, "", "OPTIMIZED_BYTECODE_SUFFIXES"], [248, 11, 1, "", "PathFinder"], [248, 7, 1, "", "SOURCE_SUFFIXES"], [248, 11, 1, "", "SourceFileLoader"], [248, 11, 1, "", "SourcelessFileLoader"], [248, 11, 1, "", "WindowsRegistryFinder"], [248, 12, 1, "", "all_suffixes"]], "importlib.machinery.ExtensionFileLoader": [[248, 8, 1, "", "create_module"], [248, 8, 1, "", "exec_module"], [248, 8, 1, "", "get_code"], [248, 8, 1, "", "get_filename"], [248, 8, 1, "", "get_source"], [248, 8, 1, "", "is_package"], [248, 7, 1, "", "name"], [248, 7, 1, "", "path"]], "importlib.machinery.FileFinder": [[248, 8, 1, "", "find_spec"], [248, 8, 1, "", "invalidate_caches"], [248, 7, 1, "", "path"], [248, 8, 1, "", "path_hook"]], "importlib.machinery.ModuleSpec": [[248, 7, 1, "", "cached"], [248, 7, 1, "", "has_location"], [248, 7, 1, "", "loader"], [248, 7, 1, "", "loader_state"], [248, 7, 1, "", "name"], [248, 7, 1, "", "origin"], [248, 7, 1, "", "parent"], [248, 7, 1, "", "submodule_search_locations"]], "importlib.machinery.PathFinder": [[248, 8, 1, "", "find_spec"], [248, 8, 1, "", "invalidate_caches"]], "importlib.machinery.SourceFileLoader": [[248, 8, 1, "", "is_package"], [248, 8, 1, "", "load_module"], [248, 7, 1, "", "name"], [248, 7, 1, "", "path"], [248, 8, 1, "", "path_stats"], [248, 8, 1, "", "set_data"]], "importlib.machinery.SourcelessFileLoader": [[248, 8, 1, "", "get_code"], [248, 8, 1, "", "get_source"], [248, 8, 1, "", "is_package"], [248, 8, 1, "", "load_module"], [248, 7, 1, "", "name"], [248, 7, 1, "", "path"]], "importlib.resources": [[250, 11, 1, "", "Anchor"], [250, 9, 1, "", "Package"], [250, 9, 1, "", "Resource"], [251, 10, 0, "-", "abc"], [250, 12, 1, "", "as_file"], [250, 12, 1, "", "contents"], [250, 12, 1, "", "files"], [250, 12, 1, "", "is_resource"], [250, 12, 1, "", "open_binary"], [250, 12, 1, "", "open_text"], [250, 12, 1, "", "path"], [250, 12, 1, "", "read_binary"], [250, 12, 1, "", "read_text"]], "importlib.resources.abc": [[251, 11, 1, "", "ResourceReader"], [251, 11, 1, "", "Traversable"], [251, 11, 1, "", "TraversableResources"]], "importlib.resources.abc.ResourceReader": [[251, 8, 1, "", "contents"], [251, 8, 1, "", "is_resource"], [251, 8, 1, "", "open_resource"], [251, 8, 1, "", "resource_path"]], "importlib.resources.abc.Traversable": [[251, 8, 1, "", "__truediv__"], [251, 8, 1, "", "is_dir"], [251, 8, 1, "", "is_file"], [251, 8, 1, "", "iterdir"], [251, 8, 1, "", "joinpath"], [251, 7, 1, "", "name"], [251, 8, 1, "", "open"], [251, 8, 1, "", "read_bytes"], [251, 8, 1, "", "read_text"]], "importlib.resources.abc.TraversableResources": [[251, 8, 1, "", "files"]], "importlib.util": [[248, 11, 1, "", "LazyLoader"], [248, 7, 1, "", "MAGIC_NUMBER"], [248, 12, 1, "", "_incompatible_extension_module_restrictions"], [248, 12, 1, "", "cache_from_source"], [248, 12, 1, "", "decode_source"], [248, 12, 1, "", "find_spec"], [248, 12, 1, "", "module_from_spec"], [248, 12, 1, "", "resolve_name"], [248, 12, 1, "", "source_from_cache"], [248, 12, 1, "", "source_hash"], [248, 12, 1, "", "spec_from_file_location"], [248, 12, 1, "", "spec_from_loader"]], "importlib.util.LazyLoader": [[248, 8, 1, "", "factory"]], "inspect": [[253, 11, 1, "", "BoundArguments"], [253, 11, 1, "", "BufferFlags"], [253, 9, 1, "", "CO_ASYNC_GENERATOR"], [253, 9, 1, "", "CO_COROUTINE"], [253, 9, 1, "", "CO_GENERATOR"], [253, 9, 1, "", "CO_ITERABLE_COROUTINE"], [253, 9, 1, "", "CO_NESTED"], [253, 9, 1, "", "CO_NEWLOCALS"], [253, 9, 1, "", "CO_OPTIMIZED"], [253, 9, 1, "", "CO_VARARGS"], [253, 9, 1, "", "CO_VARKEYWORDS"], [253, 11, 1, "", "FrameInfo"], [253, 11, 1, "", "Parameter"], [253, 11, 1, "", "Signature"], [253, 11, 1, "", "Traceback"], [253, 12, 1, "", "cleandoc"], [253, 12, 1, "", "currentframe"], [253, 12, 1, "", "formatargvalues"], [253, 12, 1, "", "get_annotations"], [253, 12, 1, "", "getargvalues"], [253, 12, 1, "", "getasyncgenlocals"], [253, 12, 1, "", "getasyncgenstate"], [253, 12, 1, "", "getattr_static"], [253, 12, 1, "", "getcallargs"], [253, 12, 1, "", "getclasstree"], [253, 12, 1, "", "getclosurevars"], [253, 12, 1, "", "getcomments"], [253, 12, 1, "", "getcoroutinelocals"], [253, 12, 1, "", "getcoroutinestate"], [253, 12, 1, "", "getdoc"], [253, 12, 1, "", "getfile"], [253, 12, 1, "", "getframeinfo"], [253, 12, 1, "", "getfullargspec"], [253, 12, 1, "", "getgeneratorlocals"], [253, 12, 1, "", "getgeneratorstate"], [253, 12, 1, "", "getinnerframes"], [253, 12, 1, "", "getmembers"], [253, 12, 1, "", "getmembers_static"], [253, 12, 1, "", "getmodule"], [253, 12, 1, "", "getmodulename"], [253, 12, 1, "", "getmro"], [253, 12, 1, "", "getouterframes"], [253, 12, 1, "", "getsource"], [253, 12, 1, "", "getsourcefile"], [253, 12, 1, "", "getsourcelines"], [253, 12, 1, "", "isabstract"], [253, 12, 1, "", "isasyncgen"], [253, 12, 1, "", "isasyncgenfunction"], [253, 12, 1, "", "isawaitable"], [253, 12, 1, "", "isbuiltin"], [253, 12, 1, "", "isclass"], [253, 12, 1, "", "iscode"], [253, 12, 1, "", "iscoroutine"], [253, 12, 1, "", "iscoroutinefunction"], [253, 12, 1, "", "isdatadescriptor"], [253, 12, 1, "", "isframe"], [253, 12, 1, "", "isfunction"], [253, 12, 1, "", "isgenerator"], [253, 12, 1, "", "isgeneratorfunction"], [253, 12, 1, "", "isgetsetdescriptor"], [253, 12, 1, "", "ismemberdescriptor"], [253, 12, 1, "", "ismethod"], [253, 12, 1, "", "ismethoddescriptor"], [253, 12, 1, "", "ismethodwrapper"], [253, 12, 1, "", "ismodule"], [253, 12, 1, "", "isroutine"], [253, 12, 1, "", "istraceback"], [253, 12, 1, "", "markcoroutinefunction"], [253, 12, 1, "", "signature"], [253, 12, 1, "", "stack"], [253, 12, 1, "", "trace"], [253, 12, 1, "", "unwrap"], [253, 14, 1, "cmdoption-inspect-details", "--details"]], "inspect.BoundArguments": [[253, 8, 1, "", "apply_defaults"], [253, 7, 1, "", "args"], [253, 7, 1, "", "arguments"], [253, 7, 1, "", "kwargs"], [253, 7, 1, "", "signature"]], "inspect.BufferFlags": [[253, 7, 1, "", "ANY_CONTIGUOUS"], [253, 7, 1, "", "CONTIG"], [253, 7, 1, "", "CONTIG_RO"], [253, 7, 1, "", "C_CONTIGUOUS"], [253, 7, 1, "", "FORMAT"], [253, 7, 1, "", "FULL"], [253, 7, 1, "", "FULL_RO"], [253, 7, 1, "", "F_CONTIGUOUS"], [253, 7, 1, "", "INDIRECT"], [253, 7, 1, "", "ND"], [253, 7, 1, "", "READ"], [253, 7, 1, "", "RECORDS"], [253, 7, 1, "", "RECORDS_RO"], [253, 7, 1, "", "SIMPLE"], [253, 7, 1, "", "STRIDED"], [253, 7, 1, "", "STRIDED_RO"], [253, 7, 1, "", "STRIDES"], [253, 7, 1, "", "WRITABLE"], [253, 7, 1, "", "WRITE"]], "inspect.FrameInfo": [[253, 7, 1, "", "code_context"], [253, 7, 1, "", "filename"], [253, 7, 1, "", "frame"], [253, 7, 1, "", "function"], [253, 7, 1, "", "index"], [253, 7, 1, "", "lineno"], [253, 7, 1, "", "positions"]], "inspect.Parameter": [[253, 7, 1, "", "annotation"], [253, 7, 1, "", "default"], [253, 7, 1, "", "empty"], [253, 7, 1, "", "kind"], [253, 7, 1, "", "name"], [253, 8, 1, "", "replace"]], "inspect.Parameter.kind": [[253, 7, 1, "", "description"]], "inspect.Signature": [[253, 8, 1, "", "bind"], [253, 8, 1, "", "bind_partial"], [253, 7, 1, "", "empty"], [253, 8, 1, "", "from_callable"], [253, 7, 1, "", "parameters"], [253, 8, 1, "", "replace"], [253, 7, 1, "", "return_annotation"]], "inspect.Traceback": [[253, 7, 1, "", "code_context"], [253, 7, 1, "", "filename"], [253, 7, 1, "", "function"], [253, 7, 1, "", "index"], [253, 7, 1, "", "lineno"], [253, 7, 1, "", "positions"]], "instance": [[342, 7, 1, "", "__class__"]], "int": [[342, 8, 1, "", "as_integer_ratio"], [342, 8, 1, "", "bit_count"], [342, 8, 1, "", "bit_length"], [342, 8, 1, "", "from_bytes"], [342, 8, 1, "", "is_integer"], [342, 8, 1, "", "to_bytes"]], "io": [[256, 6, 1, "", "BlockingIOError"], [256, 11, 1, "", "BufferedIOBase"], [256, 11, 1, "", "BufferedRWPair"], [256, 11, 1, "", "BufferedRandom"], [256, 11, 1, "", "BufferedReader"], [256, 11, 1, "", "BufferedWriter"], [256, 11, 1, "", "BytesIO"], [256, 9, 1, "", "DEFAULT_BUFFER_SIZE"], [256, 11, 1, "", "FileIO"], [256, 11, 1, "", "IOBase"], [256, 11, 1, "", "IncrementalNewlineDecoder"], [256, 11, 1, "", "RawIOBase"], [256, 11, 1, "", "StringIO"], [256, 11, 1, "", "TextIOBase"], [256, 11, 1, "", "TextIOWrapper"], [256, 6, 1, "", "UnsupportedOperation"], [256, 12, 1, "", "open"], [256, 12, 1, "", "open_code"], [256, 12, 1, "", "text_encoding"]], "io.BufferedIOBase": [[256, 8, 1, "", "detach"], [256, 7, 1, "", "raw"], [256, 8, 1, "", "read"], [256, 8, 1, "", "read1"], [256, 8, 1, "", "readinto"], [256, 8, 1, "", "readinto1"], [256, 8, 1, "", "write"]], "io.BufferedReader": [[256, 8, 1, "", "peek"], [256, 8, 1, "", "read"], [256, 8, 1, "", "read1"]], "io.BufferedWriter": [[256, 8, 1, "", "flush"], [256, 8, 1, "", "write"]], "io.BytesIO": [[256, 8, 1, "", "getbuffer"], [256, 8, 1, "", "getvalue"], [256, 8, 1, "", "read1"], [256, 8, 1, "", "readinto1"]], "io.FileIO": [[256, 7, 1, "", "mode"], [256, 7, 1, "", "name"]], "io.IOBase": [[256, 8, 1, "", "__del__"], [256, 8, 1, "", "close"], [256, 7, 1, "", "closed"], [256, 8, 1, "", "fileno"], [256, 8, 1, "", "flush"], [256, 8, 1, "", "isatty"], [256, 8, 1, "", "readable"], [256, 8, 1, "", "readline"], [256, 8, 1, "", "readlines"], [256, 8, 1, "", "seek"], [256, 8, 1, "", "seekable"], [256, 8, 1, "", "tell"], [256, 8, 1, "", "truncate"], [256, 8, 1, "", "writable"], [256, 8, 1, "", "writelines"]], "io.RawIOBase": [[256, 8, 1, "", "read"], [256, 8, 1, "", "readall"], [256, 8, 1, "", "readinto"], [256, 8, 1, "", "write"]], "io.StringIO": [[256, 8, 1, "", "getvalue"]], "io.TextIOBase": [[256, 7, 1, "", "buffer"], [256, 8, 1, "", "detach"], [256, 7, 1, "", "encoding"], [256, 7, 1, "", "errors"], [256, 7, 1, "", "newlines"], [256, 8, 1, "", "read"], [256, 8, 1, "", "readline"], [256, 8, 1, "", "seek"], [256, 8, 1, "", "tell"], [256, 8, 1, "", "write"]], "io.TextIOWrapper": [[256, 7, 1, "", "line_buffering"], [256, 8, 1, "", "reconfigure"], [256, 8, 1, "", "seek"], [256, 8, 1, "", "tell"], [256, 7, 1, "", "write_through"]], "ipaddress": [[257, 6, 1, "", "AddressValueError"], [257, 11, 1, "", "IPv4Address"], [257, 11, 1, "", "IPv4Interface"], [257, 11, 1, "", "IPv4Network"], [257, 11, 1, "", "IPv6Address"], [257, 11, 1, "", "IPv6Interface"], [257, 11, 1, "", "IPv6Network"], [257, 6, 1, "", "NetmaskValueError"], [257, 12, 1, "", "collapse_addresses"], [257, 12, 1, "", "get_mixed_type_key"], [257, 12, 1, "", "ip_address"], [257, 12, 1, "", "ip_interface"], [257, 12, 1, "", "ip_network"], [257, 12, 1, "", "summarize_address_range"], [257, 12, 1, "", "v4_int_to_packed"], [257, 12, 1, "", "v6_int_to_packed"]], "ipaddress.IPv4Address": [[257, 8, 1, "", "__format__"], [257, 7, 1, "", "compressed"], [257, 7, 1, "", "exploded"], [257, 7, 1, "", "is_global"], [257, 7, 1, "", "is_link_local"], [257, 7, 1, "", "is_loopback"], [257, 7, 1, "", "is_multicast"], [257, 7, 1, "", "is_private"], [257, 7, 1, "", "is_reserved"], [257, 7, 1, "", "is_unspecified"], [257, 7, 1, "", "max_prefixlen"], [257, 7, 1, "", "packed"], [257, 7, 1, "", "reverse_pointer"], [257, 7, 1, "", "version"]], "ipaddress.IPv4Interface": [[257, 7, 1, "", "ip"], [257, 7, 1, "", "network"], [257, 7, 1, "", "with_hostmask"], [257, 7, 1, "", "with_netmask"], [257, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv4Network": [[257, 8, 1, "", "address_exclude"], [257, 7, 1, "", "broadcast_address"], [257, 8, 1, "", "compare_networks"], [257, 7, 1, "", "compressed"], [257, 7, 1, "", "exploded"], [257, 7, 1, "", "hostmask"], [257, 8, 1, "", "hosts"], [257, 7, 1, "", "is_link_local"], [257, 7, 1, "", "is_loopback"], [257, 7, 1, "", "is_multicast"], [257, 7, 1, "", "is_private"], [257, 7, 1, "", "is_reserved"], [257, 7, 1, "", "is_unspecified"], [257, 7, 1, "", "max_prefixlen"], [257, 7, 1, "", "netmask"], [257, 7, 1, "", "network_address"], [257, 7, 1, "", "num_addresses"], [257, 8, 1, "", "overlaps"], [257, 7, 1, "", "prefixlen"], [257, 8, 1, "", "subnet_of"], [257, 8, 1, "", "subnets"], [257, 8, 1, "", "supernet"], [257, 8, 1, "", "supernet_of"], [257, 7, 1, "", "version"], [257, 7, 1, "", "with_hostmask"], [257, 7, 1, "", "with_netmask"], [257, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Address": [[257, 8, 1, "", "__format__"], [257, 7, 1, "", "compressed"], [257, 7, 1, "", "exploded"], [257, 7, 1, "", "ipv4_mapped"], [257, 7, 1, "", "is_global"], [257, 7, 1, "", "is_link_local"], [257, 7, 1, "", "is_loopback"], [257, 7, 1, "", "is_multicast"], [257, 7, 1, "", "is_private"], [257, 7, 1, "", "is_reserved"], [257, 7, 1, "", "is_site_local"], [257, 7, 1, "", "is_unspecified"], [257, 7, 1, "", "max_prefixlen"], [257, 7, 1, "", "packed"], [257, 7, 1, "", "reverse_pointer"], [257, 7, 1, "", "scope_id"], [257, 7, 1, "", "sixtofour"], [257, 7, 1, "", "teredo"], [257, 7, 1, "", "version"]], "ipaddress.IPv6Interface": [[257, 7, 1, "", "ip"], [257, 7, 1, "", "network"], [257, 7, 1, "", "with_hostmask"], [257, 7, 1, "", "with_netmask"], [257, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Network": [[257, 8, 1, "", "address_exclude"], [257, 7, 1, "", "broadcast_address"], [257, 8, 1, "", "compare_networks"], [257, 7, 1, "", "compressed"], [257, 7, 1, "", "exploded"], [257, 7, 1, "", "hostmask"], [257, 8, 1, "", "hosts"], [257, 7, 1, "", "is_link_local"], [257, 7, 1, "", "is_loopback"], [257, 7, 1, "", "is_multicast"], [257, 7, 1, "", "is_private"], [257, 7, 1, "", "is_reserved"], [257, 7, 1, "", "is_site_local"], [257, 7, 1, "", "is_unspecified"], [257, 7, 1, "", "max_prefixlen"], [257, 7, 1, "", "netmask"], [257, 7, 1, "", "network_address"], [257, 7, 1, "", "num_addresses"], [257, 8, 1, "", "overlaps"], [257, 7, 1, "", "prefixlen"], [257, 8, 1, "", "subnet_of"], [257, 8, 1, "", "subnets"], [257, 8, 1, "", "supernet"], [257, 8, 1, "", "supernet_of"], [257, 7, 1, "", "version"], [257, 7, 1, "", "with_hostmask"], [257, 7, 1, "", "with_netmask"], [257, 7, 1, "", "with_prefixlen"]], "iterator": [[342, 8, 1, "", "__iter__"], [342, 8, 1, "", "__next__"]], "itertools": [[259, 12, 1, "", "accumulate"], [259, 12, 1, "", "batched"], [259, 12, 1, "", "chain"], [259, 12, 1, "", "combinations"], [259, 12, 1, "", "combinations_with_replacement"], [259, 12, 1, "", "compress"], [259, 12, 1, "", "count"], [259, 12, 1, "", "cycle"], [259, 12, 1, "", "dropwhile"], [259, 12, 1, "", "filterfalse"], [259, 12, 1, "", "groupby"], [259, 12, 1, "", "islice"], [259, 12, 1, "", "pairwise"], [259, 12, 1, "", "permutations"], [259, 12, 1, "", "product"], [259, 12, 1, "", "repeat"], [259, 12, 1, "", "starmap"], [259, 12, 1, "", "takewhile"], [259, 12, 1, "", "tee"], [259, 12, 1, "", "zip_longest"]], "itertools.chain": [[259, 8, 1, "", "from_iterable"]], "json": [[260, 6, 1, "", "JSONDecodeError"], [260, 11, 1, "", "JSONDecoder"], [260, 11, 1, "", "JSONEncoder"], [260, 12, 1, "", "dump"], [260, 12, 1, "", "dumps"], [260, 12, 1, "", "load"], [260, 12, 1, "", "loads"], [260, 10, 0, "-", "tool"]], "json.JSONDecodeError": [[260, 7, 1, "", "colno"], [260, 7, 1, "", "doc"], [260, 7, 1, "", "lineno"], [260, 7, 1, "", "msg"], [260, 7, 1, "", "pos"]], "json.JSONDecoder": [[260, 8, 1, "", "decode"], [260, 8, 1, "", "raw_decode"]], "json.JSONEncoder": [[260, 8, 1, "", "default"], [260, 8, 1, "", "encode"], [260, 8, 1, "", "iterencode"]], "keyword": [[261, 12, 1, "", "iskeyword"], [261, 12, 1, "", "issoftkeyword"], [261, 9, 1, "", "kwlist"], [261, 9, 1, "", "softkwlist"]], "linecache": [[263, 12, 1, "", "checkcache"], [263, 12, 1, "", "clearcache"], [263, 12, 1, "", "getline"], [263, 12, 1, "", "lazycache"]], "list": [[342, 8, 1, "", "sort"]], "locale": [[264, 9, 1, "", "ABDAY_1"], [264, 9, 1, "", "ABDAY_2"], [264, 9, 1, "", "ABDAY_3"], [264, 9, 1, "", "ABDAY_4"], [264, 9, 1, "", "ABDAY_5"], [264, 9, 1, "", "ABDAY_6"], [264, 9, 1, "", "ABDAY_7"], [264, 9, 1, "", "ABMON_1"], [264, 9, 1, "", "ABMON_10"], [264, 9, 1, "", "ABMON_11"], [264, 9, 1, "", "ABMON_12"], [264, 9, 1, "", "ABMON_2"], [264, 9, 1, "", "ABMON_3"], [264, 9, 1, "", "ABMON_4"], [264, 9, 1, "", "ABMON_5"], [264, 9, 1, "", "ABMON_6"], [264, 9, 1, "", "ABMON_7"], [264, 9, 1, "", "ABMON_8"], [264, 9, 1, "", "ABMON_9"], [264, 9, 1, "", "ALT_DIGITS"], [264, 9, 1, "", "CHAR_MAX"], [264, 9, 1, "", "CODESET"], [264, 9, 1, "", "CRNCYSTR"], [264, 9, 1, "", "DAY_1"], [264, 9, 1, "", "DAY_2"], [264, 9, 1, "", "DAY_3"], [264, 9, 1, "", "DAY_4"], [264, 9, 1, "", "DAY_5"], [264, 9, 1, "", "DAY_6"], [264, 9, 1, "", "DAY_7"], [264, 9, 1, "", "D_FMT"], [264, 9, 1, "", "D_T_FMT"], [264, 9, 1, "", "ERA"], [264, 9, 1, "", "ERA_D_FMT"], [264, 9, 1, "", "ERA_D_T_FMT"], [264, 9, 1, "", "ERA_T_FMT"], [264, 6, 1, "", "Error"], [264, 9, 1, "", "LC_ALL"], [264, 9, 1, "", "LC_COLLATE"], [264, 9, 1, "", "LC_CTYPE"], [264, 9, 1, "", "LC_MESSAGES"], [264, 9, 1, "", "LC_MONETARY"], [264, 9, 1, "", "LC_NUMERIC"], [264, 9, 1, "", "LC_TIME"], [264, 9, 1, "", "MON_1"], [264, 9, 1, "", "MON_10"], [264, 9, 1, "", "MON_11"], [264, 9, 1, "", "MON_12"], [264, 9, 1, "", "MON_2"], [264, 9, 1, "", "MON_3"], [264, 9, 1, "", "MON_4"], [264, 9, 1, "", "MON_5"], [264, 9, 1, "", "MON_6"], [264, 9, 1, "", "MON_7"], [264, 9, 1, "", "MON_8"], [264, 9, 1, "", "MON_9"], [264, 9, 1, "", "NOEXPR"], [264, 9, 1, "", "RADIXCHAR"], [264, 9, 1, "", "THOUSEP"], [264, 9, 1, "", "T_FMT"], [264, 9, 1, "", "T_FMT_AMPM"], [264, 9, 1, "", "YESEXPR"], [264, 12, 1, "", "atof"], [264, 12, 1, "", "atoi"], [264, 12, 1, "", "bind_textdomain_codeset"], [264, 12, 1, "", "bindtextdomain"], [264, 12, 1, "", "currency"], [264, 12, 1, "", "dcgettext"], [264, 12, 1, "", "delocalize"], [264, 12, 1, "", "dgettext"], [264, 12, 1, "", "format_string"], [264, 12, 1, "", "getdefaultlocale"], [264, 12, 1, "", "getencoding"], [264, 12, 1, "", "getlocale"], [264, 12, 1, "", "getpreferredencoding"], [264, 12, 1, "", "gettext"], [264, 12, 1, "", "localeconv"], [264, 12, 1, "", "localize"], [264, 12, 1, "", "nl_langinfo"], [264, 12, 1, "", "normalize"], [264, 12, 1, "", "resetlocale"], [264, 12, 1, "", "setlocale"], [264, 12, 1, "", "str"], [264, 12, 1, "", "strcoll"], [264, 12, 1, "", "strxfrm"], [264, 12, 1, "", "textdomain"]], "logging": [[265, 11, 1, "", "BufferingFormatter"], [265, 9, 1, "", "CRITICAL"], [265, 9, 1, "", "DEBUG"], [265, 9, 1, "", "ERROR"], [267, 11, 1, "", "FileHandler"], [265, 11, 1, "", "Filter"], [265, 11, 1, "", "Formatter"], [265, 11, 1, "", "Handler"], [265, 9, 1, "", "INFO"], [265, 11, 1, "", "LogRecord"], [265, 11, 1, "", "Logger"], [265, 11, 1, "", "LoggerAdapter"], [265, 9, 1, "", "NOTSET"], [267, 11, 1, "", "NullHandler"], [267, 11, 1, "", "StreamHandler"], [265, 9, 1, "", "WARNING"], [265, 12, 1, "", "addLevelName"], [265, 12, 1, "", "basicConfig"], [265, 12, 1, "", "captureWarnings"], [266, 10, 0, "-", "config"], [265, 12, 1, "", "critical"], [265, 12, 1, "", "debug"], [265, 12, 1, "", "disable"], [265, 12, 1, "", "error"], [265, 12, 1, "", "exception"], [265, 12, 1, "", "getHandlerByName"], [265, 12, 1, "", "getHandlerNames"], [265, 12, 1, "", "getLevelName"], [265, 12, 1, "", "getLevelNamesMapping"], [265, 12, 1, "", "getLogRecordFactory"], [265, 12, 1, "", "getLogger"], [265, 12, 1, "", "getLoggerClass"], [267, 10, 0, "-", "handlers"], [265, 12, 1, "", "info"], [265, 7, 1, "", "lastResort"], [265, 12, 1, "", "log"], [265, 12, 1, "", "makeLogRecord"], [265, 7, 1, "", "raiseExceptions"], [265, 12, 1, "", "setLogRecordFactory"], [265, 12, 1, "", "setLoggerClass"], [265, 12, 1, "", "shutdown"], [265, 12, 1, "", "warning"]], "logging.BufferingFormatter": [[265, 8, 1, "", "format"], [265, 8, 1, "", "formatFooter"], [265, 8, 1, "", "formatHeader"]], "logging.FileHandler": [[267, 8, 1, "", "close"], [267, 8, 1, "", "emit"]], "logging.Filter": [[265, 8, 1, "", "filter"]], "logging.Formatter": [[265, 8, 1, "", "format"], [265, 8, 1, "", "formatException"], [265, 8, 1, "", "formatStack"], [265, 8, 1, "", "formatTime"]], "logging.Handler": [[265, 8, 1, "", "__init__"], [265, 8, 1, "", "acquire"], [265, 8, 1, "", "addFilter"], [265, 8, 1, "", "close"], [265, 8, 1, "", "createLock"], [265, 8, 1, "", "emit"], [265, 8, 1, "", "filter"], [265, 8, 1, "", "flush"], [265, 8, 1, "", "format"], [265, 8, 1, "", "handle"], [265, 8, 1, "", "handleError"], [265, 8, 1, "", "release"], [265, 8, 1, "", "removeFilter"], [265, 8, 1, "", "setFormatter"], [265, 8, 1, "", "setLevel"]], "logging.LogRecord": [[265, 8, 1, "", "getMessage"]], "logging.Logger": [[265, 8, 1, "", "addFilter"], [265, 8, 1, "", "addHandler"], [265, 8, 1, "", "critical"], [265, 8, 1, "", "debug"], [265, 8, 1, "", "error"], [265, 8, 1, "", "exception"], [265, 8, 1, "", "filter"], [265, 8, 1, "", "findCaller"], [265, 8, 1, "", "getChild"], [265, 8, 1, "", "getChildren"], [265, 8, 1, "", "getEffectiveLevel"], [265, 8, 1, "", "handle"], [265, 8, 1, "", "hasHandlers"], [265, 8, 1, "", "info"], [265, 8, 1, "", "isEnabledFor"], [265, 8, 1, "", "log"], [265, 8, 1, "", "makeRecord"], [265, 7, 1, "", "propagate"], [265, 8, 1, "", "removeFilter"], [265, 8, 1, "", "removeHandler"], [265, 8, 1, "", "setLevel"], [265, 8, 1, "", "warning"]], "logging.LoggerAdapter": [[265, 7, 1, "", "_log"], [265, 7, 1, "", "manager"], [265, 8, 1, "", "process"]], "logging.NullHandler": [[267, 8, 1, "", "createLock"], [267, 8, 1, "", "emit"], [267, 8, 1, "", "handle"]], "logging.StreamHandler": [[267, 8, 1, "", "emit"], [267, 8, 1, "", "flush"], [267, 8, 1, "", "setStream"], [267, 7, 1, "", "terminator"]], "logging.config": [[266, 12, 1, "", "dictConfig"], [266, 12, 1, "", "fileConfig"], [266, 12, 1, "", "listen"], [266, 12, 1, "", "stopListening"]], "logging.handlers": [[267, 11, 1, "", "BaseRotatingHandler"], [267, 11, 1, "", "BufferingHandler"], [267, 11, 1, "", "DatagramHandler"], [267, 11, 1, "", "HTTPHandler"], [267, 11, 1, "", "MemoryHandler"], [267, 11, 1, "", "NTEventLogHandler"], [267, 11, 1, "", "QueueHandler"], [267, 11, 1, "", "QueueListener"], [267, 11, 1, "", "RotatingFileHandler"], [267, 11, 1, "", "SMTPHandler"], [267, 11, 1, "", "SocketHandler"], [267, 11, 1, "", "SysLogHandler"], [267, 11, 1, "", "TimedRotatingFileHandler"], [267, 11, 1, "", "WatchedFileHandler"]], "logging.handlers.BaseRotatingHandler": [[267, 7, 1, "", "namer"], [267, 8, 1, "", "rotate"], [267, 8, 1, "", "rotation_filename"], [267, 7, 1, "", "rotator"]], "logging.handlers.BufferingHandler": [[267, 8, 1, "", "emit"], [267, 8, 1, "", "flush"], [267, 8, 1, "", "shouldFlush"]], "logging.handlers.DatagramHandler": [[267, 8, 1, "", "emit"], [267, 8, 1, "", "makeSocket"], [267, 8, 1, "", "send"]], "logging.handlers.HTTPHandler": [[267, 8, 1, "", "emit"], [267, 8, 1, "", "mapLogRecord"]], "logging.handlers.MemoryHandler": [[267, 8, 1, "", "close"], [267, 8, 1, "", "flush"], [267, 8, 1, "", "setTarget"], [267, 8, 1, "", "shouldFlush"]], "logging.handlers.NTEventLogHandler": [[267, 8, 1, "", "close"], [267, 8, 1, "", "emit"], [267, 8, 1, "", "getEventCategory"], [267, 8, 1, "", "getEventType"], [267, 8, 1, "", "getMessageID"]], "logging.handlers.QueueHandler": [[267, 8, 1, "", "emit"], [267, 8, 1, "", "enqueue"], [267, 7, 1, "", "listener"], [267, 8, 1, "", "prepare"]], "logging.handlers.QueueListener": [[267, 8, 1, "", "dequeue"], [267, 8, 1, "", "enqueue_sentinel"], [267, 8, 1, "", "handle"], [267, 8, 1, "", "prepare"], [267, 8, 1, "", "start"], [267, 8, 1, "", "stop"]], "logging.handlers.RotatingFileHandler": [[267, 8, 1, "", "doRollover"], [267, 8, 1, "", "emit"]], "logging.handlers.SMTPHandler": [[267, 8, 1, "", "emit"], [267, 8, 1, "", "getSubject"]], "logging.handlers.SocketHandler": [[267, 8, 1, "", "close"], [267, 8, 1, "", "createSocket"], [267, 8, 1, "", "emit"], [267, 8, 1, "", "handleError"], [267, 8, 1, "", "makePickle"], [267, 8, 1, "", "makeSocket"], [267, 8, 1, "", "send"]], "logging.handlers.SysLogHandler": [[267, 8, 1, "", "close"], [267, 8, 1, "", "createSocket"], [267, 8, 1, "", "emit"], [267, 8, 1, "", "encodePriority"], [267, 8, 1, "", "mapPriority"]], "logging.handlers.TimedRotatingFileHandler": [[267, 8, 1, "", "doRollover"], [267, 8, 1, "", "emit"], [267, 8, 1, "", "getFilesToDelete"]], "logging.handlers.WatchedFileHandler": [[267, 8, 1, "", "emit"], [267, 8, 1, "", "reopenIfNeeded"]], "logging.logging.Formatter": [[100, 8, 1, "", "__init__"]], "lzma": [[268, 11, 1, "", "LZMACompressor"], [268, 11, 1, "", "LZMADecompressor"], [268, 6, 1, "", "LZMAError"], [268, 11, 1, "", "LZMAFile"], [268, 12, 1, "", "compress"], [268, 12, 1, "", "decompress"], [268, 12, 1, "", "is_check_supported"], [268, 12, 1, "", "open"]], "lzma.LZMACompressor": [[268, 8, 1, "", "compress"], [268, 8, 1, "", "flush"]], "lzma.LZMADecompressor": [[268, 7, 1, "", "check"], [268, 8, 1, "", "decompress"], [268, 7, 1, "", "eof"], [268, 7, 1, "", "needs_input"], [268, 7, 1, "", "unused_data"]], "lzma.LZMAFile": [[268, 8, 1, "", "peek"]], "mailbox": [[269, 11, 1, "", "Babyl"], [269, 11, 1, "", "BabylMessage"], [269, 6, 1, "", "Error"], [269, 6, 1, "", "ExternalClashError"], [269, 6, 1, "", "FormatError"], [269, 11, 1, "", "MH"], [269, 11, 1, "", "MHMessage"], [269, 11, 1, "", "MMDF"], [269, 11, 1, "", "MMDFMessage"], [269, 11, 1, "", "Mailbox"], [269, 11, 1, "", "Maildir"], [269, 11, 1, "", "MaildirMessage"], [269, 11, 1, "", "Message"], [269, 6, 1, "", "NoSuchMailboxError"], [269, 6, 1, "", "NotEmptyError"], [269, 11, 1, "", "mbox"], [269, 11, 1, "", "mboxMessage"]], "mailbox.Babyl": [[269, 8, 1, "", "get_file"], [269, 8, 1, "", "get_labels"], [269, 8, 1, "", "lock"], [269, 8, 1, "", "unlock"]], "mailbox.BabylMessage": [[269, 8, 1, "", "add_label"], [269, 8, 1, "", "get_labels"], [269, 8, 1, "", "get_visible"], [269, 8, 1, "", "remove_label"], [269, 8, 1, "", "set_labels"], [269, 8, 1, "", "set_visible"], [269, 8, 1, "", "update_visible"]], "mailbox.MH": [[269, 8, 1, "", "__delitem__"], [269, 8, 1, "", "add_folder"], [269, 8, 1, "", "close"], [269, 8, 1, "", "discard"], [269, 8, 1, "", "flush"], [269, 8, 1, "", "get_file"], [269, 8, 1, "", "get_folder"], [269, 8, 1, "", "get_sequences"], [269, 8, 1, "", "list_folders"], [269, 8, 1, "", "lock"], [269, 8, 1, "", "pack"], [269, 8, 1, "", "remove"], [269, 8, 1, "", "remove_folder"], [269, 8, 1, "", "set_sequences"], [269, 8, 1, "", "unlock"]], "mailbox.MHMessage": [[269, 8, 1, "", "add_sequence"], [269, 8, 1, "", "get_sequences"], [269, 8, 1, "", "remove_sequence"], [269, 8, 1, "", "set_sequences"]], "mailbox.MMDF": [[269, 8, 1, "", "get_file"], [269, 8, 1, "", "lock"], [269, 8, 1, "", "unlock"]], "mailbox.MMDFMessage": [[269, 8, 1, "", "add_flag"], [269, 8, 1, "", "get_flags"], [269, 8, 1, "", "get_from"], [269, 8, 1, "", "remove_flag"], [269, 8, 1, "", "set_flags"], [269, 8, 1, "", "set_from"]], "mailbox.Mailbox": [[269, 8, 1, "", "__contains__"], [269, 8, 1, "", "__delitem__"], [269, 8, 1, "", "__getitem__"], [269, 8, 1, "", "__iter__"], [269, 8, 1, "", "__len__"], [269, 8, 1, "", "__setitem__"], [269, 8, 1, "", "add"], [269, 8, 1, "", "clear"], [269, 8, 1, "", "close"], [269, 8, 1, "", "discard"], [269, 8, 1, "", "flush"], [269, 8, 1, "", "get"], [269, 8, 1, "", "get_bytes"], [269, 8, 1, "", "get_file"], [269, 8, 1, "", "get_message"], [269, 8, 1, "", "get_string"], [269, 8, 1, "", "items"], [269, 8, 1, "", "iteritems"], [269, 8, 1, "", "iterkeys"], [269, 8, 1, "", "itervalues"], [269, 8, 1, "", "keys"], [269, 8, 1, "", "lock"], [269, 8, 1, "", "pop"], [269, 8, 1, "", "popitem"], [269, 8, 1, "", "remove"], [269, 8, 1, "", "unlock"], [269, 8, 1, "", "update"], [269, 8, 1, "", "values"]], "mailbox.Maildir": [[269, 8, 1, "", "__setitem__"], [269, 8, 1, "", "add"], [269, 8, 1, "", "add_folder"], [269, 8, 1, "", "clean"], [269, 8, 1, "", "close"], [269, 7, 1, "", "colon"], [269, 8, 1, "", "flush"], [269, 8, 1, "", "get_file"], [269, 8, 1, "", "get_folder"], [269, 8, 1, "", "list_folders"], [269, 8, 1, "", "lock"], [269, 8, 1, "", "remove_folder"], [269, 8, 1, "", "unlock"], [269, 8, 1, "", "update"]], "mailbox.MaildirMessage": [[269, 8, 1, "", "add_flag"], [269, 8, 1, "", "get_date"], [269, 8, 1, "", "get_flags"], [269, 8, 1, "", "get_info"], [269, 8, 1, "", "get_subdir"], [269, 8, 1, "", "remove_flag"], [269, 8, 1, "", "set_date"], [269, 8, 1, "", "set_flags"], [269, 8, 1, "", "set_info"], [269, 8, 1, "", "set_subdir"]], "mailbox.mbox": [[269, 8, 1, "", "get_file"], [269, 8, 1, "", "lock"], [269, 8, 1, "", "unlock"]], "mailbox.mboxMessage": [[269, 8, 1, "", "add_flag"], [269, 8, 1, "", "get_flags"], [269, 8, 1, "", "get_from"], [269, 8, 1, "", "remove_flag"], [269, 8, 1, "", "set_flags"], [269, 8, 1, "", "set_from"]], "mailcap": [[270, 12, 1, "", "findmatch"], [270, 12, 1, "", "getcaps"]], "marshal": [[272, 12, 1, "", "dump"], [272, 12, 1, "", "dumps"], [272, 12, 1, "", "load"], [272, 12, 1, "", "loads"], [272, 9, 1, "", "version"]], "math": [[273, 12, 1, "", "acos"], [273, 12, 1, "", "acosh"], [273, 12, 1, "", "asin"], [273, 12, 1, "", "asinh"], [273, 12, 1, "", "atan"], [273, 12, 1, "", "atan2"], [273, 12, 1, "", "atanh"], [273, 12, 1, "", "cbrt"], [273, 12, 1, "", "ceil"], [273, 12, 1, "", "comb"], [273, 12, 1, "", "copysign"], [273, 12, 1, "", "cos"], [273, 12, 1, "", "cosh"], [273, 12, 1, "", "degrees"], [273, 12, 1, "", "dist"], [273, 9, 1, "", "e"], [273, 12, 1, "", "erf"], [273, 12, 1, "", "erfc"], [273, 12, 1, "", "exp"], [273, 12, 1, "", "exp2"], [273, 12, 1, "", "expm1"], [273, 12, 1, "", "fabs"], [273, 12, 1, "", "factorial"], [273, 12, 1, "", "floor"], [273, 12, 1, "", "fmod"], [273, 12, 1, "", "frexp"], [273, 12, 1, "", "fsum"], [273, 12, 1, "", "gamma"], [273, 12, 1, "", "gcd"], [273, 12, 1, "", "hypot"], [273, 9, 1, "", "inf"], [273, 12, 1, "", "isclose"], [273, 12, 1, "", "isfinite"], [273, 12, 1, "", "isinf"], [273, 12, 1, "", "isnan"], [273, 12, 1, "", "isqrt"], [273, 12, 1, "", "lcm"], [273, 12, 1, "", "ldexp"], [273, 12, 1, "", "lgamma"], [273, 12, 1, "", "log"], [273, 12, 1, "", "log10"], [273, 12, 1, "", "log1p"], [273, 12, 1, "", "log2"], [273, 12, 1, "", "modf"], [273, 9, 1, "", "nan"], [273, 12, 1, "", "nextafter"], [273, 12, 1, "", "perm"], [273, 9, 1, "", "pi"], [273, 12, 1, "", "pow"], [273, 12, 1, "", "prod"], [273, 12, 1, "", "radians"], [273, 12, 1, "", "remainder"], [273, 12, 1, "", "sin"], [273, 12, 1, "", "sinh"], [273, 12, 1, "", "sqrt"], [273, 12, 1, "", "sumprod"], [273, 12, 1, "", "tan"], [273, 12, 1, "", "tanh"], [273, 9, 1, "", "tau"], [273, 12, 1, "", "trunc"], [273, 12, 1, "", "ulp"]], "memoryview": [[342, 8, 1, "", "__eq__"], [342, 7, 1, "", "c_contiguous"], [342, 8, 1, "", "cast"], [342, 7, 1, "", "contiguous"], [342, 7, 1, "", "f_contiguous"], [342, 7, 1, "", "format"], [342, 8, 1, "", "hex"], [342, 7, 1, "", "itemsize"], [342, 7, 1, "", "nbytes"], [342, 7, 1, "", "ndim"], [342, 7, 1, "", "obj"], [342, 7, 1, "", "readonly"], [342, 8, 1, "", "release"], [342, 7, 1, "", "shape"], [342, 7, 1, "", "strides"], [342, 7, 1, "", "suboffsets"], [342, 8, 1, "", "tobytes"], [342, 8, 1, "", "tolist"], [342, 8, 1, "", "toreadonly"]], "method": [[426, 7, 1, "", "__doc__"], [426, 7, 1, "", "__func__"], [426, 7, 1, "", "__module__"], [426, 7, 1, "", "__name__"], [426, 7, 1, "", "__self__"]], "mimetypes": [[274, 11, 1, "", "MimeTypes"], [274, 12, 1, "", "add_type"], [274, 9, 1, "", "common_types"], [274, 9, 1, "", "encodings_map"], [274, 12, 1, "", "guess_all_extensions"], [274, 12, 1, "", "guess_extension"], [274, 12, 1, "", "guess_type"], [274, 12, 1, "", "init"], [274, 9, 1, "", "inited"], [274, 9, 1, "", "knownfiles"], [274, 12, 1, "", "read_mime_types"], [274, 9, 1, "", "suffix_map"], [274, 9, 1, "", "types_map"]], "mimetypes.MimeTypes": [[274, 7, 1, "", "encodings_map"], [274, 8, 1, "", "guess_all_extensions"], [274, 8, 1, "", "guess_extension"], [274, 8, 1, "", "guess_type"], [274, 8, 1, "", "read"], [274, 8, 1, "", "read_windows_registry"], [274, 8, 1, "", "readfp"], [274, 7, 1, "", "suffix_map"], [274, 7, 1, "", "types_map"], [274, 7, 1, "", "types_map_inv"]], "mmap": [[276, 9, 1, "", "MADV_AUTOSYNC"], [276, 9, 1, "", "MADV_CORE"], [276, 9, 1, "", "MADV_DODUMP"], [276, 9, 1, "", "MADV_DOFORK"], [276, 9, 1, "", "MADV_DONTDUMP"], [276, 9, 1, "", "MADV_DONTFORK"], [276, 9, 1, "", "MADV_DONTNEED"], [276, 9, 1, "", "MADV_FREE"], [276, 9, 1, "", "MADV_FREE_REUSABLE"], [276, 9, 1, "", "MADV_FREE_REUSE"], [276, 9, 1, "", "MADV_HUGEPAGE"], [276, 9, 1, "", "MADV_HWPOISON"], [276, 9, 1, "", "MADV_MERGEABLE"], [276, 9, 1, "", "MADV_NOCORE"], [276, 9, 1, "", "MADV_NOHUGEPAGE"], [276, 9, 1, "", "MADV_NORMAL"], [276, 9, 1, "", "MADV_NOSYNC"], [276, 9, 1, "", "MADV_PROTECT"], [276, 9, 1, "", "MADV_RANDOM"], [276, 9, 1, "", "MADV_REMOVE"], [276, 9, 1, "", "MADV_SEQUENTIAL"], [276, 9, 1, "", "MADV_SOFT_OFFLINE"], [276, 9, 1, "", "MADV_UNMERGEABLE"], [276, 9, 1, "", "MADV_WILLNEED"], [276, 9, 1, "", "MAP_ALIGNED_SUPER"], [276, 9, 1, "", "MAP_ANON"], [276, 9, 1, "", "MAP_ANONYMOUS"], [276, 9, 1, "", "MAP_CONCEAL"], [276, 9, 1, "", "MAP_DENYWRITE"], [276, 9, 1, "", "MAP_EXECUTABLE"], [276, 9, 1, "", "MAP_POPULATE"], [276, 9, 1, "", "MAP_PRIVATE"], [276, 9, 1, "", "MAP_SHARED"], [276, 9, 1, "", "MAP_STACK"], [276, 11, 1, "", "mmap"]], "mmap.mmap": [[276, 8, 1, "", "close"], [276, 7, 1, "", "closed"], [276, 8, 1, "", "find"], [276, 8, 1, "", "flush"], [276, 8, 1, "", "madvise"], [276, 8, 1, "", "move"], [276, 8, 1, "", "read"], [276, 8, 1, "", "read_byte"], [276, 8, 1, "", "readline"], [276, 8, 1, "", "resize"], [276, 8, 1, "", "rfind"], [276, 8, 1, "", "seek"], [276, 8, 1, "", "size"], [276, 8, 1, "", "tell"], [276, 8, 1, "", "write"], [276, 8, 1, "", "write_byte"]], "modulefinder": [[277, 12, 1, "", "AddPackagePath"], [277, 11, 1, "", "ModuleFinder"], [277, 12, 1, "", "ReplacePackage"]], "modulefinder.ModuleFinder": [[277, 7, 1, "", "modules"], [277, 8, 1, "", "report"], [277, 8, 1, "", "run_script"]], "msilib": [[279, 11, 1, "", "Binary"], [279, 11, 1, "", "CAB"], [279, 11, 1, "", "Control"], [279, 12, 1, "", "CreateRecord"], [279, 11, 1, "", "Dialog"], [279, 11, 1, "", "Directory"], [279, 12, 1, "", "FCICreate"], [279, 11, 1, "", "Feature"], [279, 12, 1, "", "OpenDatabase"], [279, 11, 1, "", "RadioButtonGroup"], [279, 12, 1, "", "UuidCreate"], [279, 12, 1, "", "add_data"], [279, 12, 1, "", "add_stream"], [279, 12, 1, "", "add_tables"], [279, 12, 1, "", "gen_uuid"], [279, 12, 1, "", "init_database"], [279, 9, 1, "", "schema"], [279, 9, 1, "", "sequence"], [279, 9, 1, "", "text"]], "msilib.CAB": [[279, 8, 1, "", "append"], [279, 8, 1, "", "commit"]], "msilib.Control": [[279, 8, 1, "", "condition"], [279, 8, 1, "", "event"], [279, 8, 1, "", "mapping"]], "msilib.Database": [[279, 8, 1, "", "Close"], [279, 8, 1, "", "Commit"], [279, 8, 1, "", "GetSummaryInformation"], [279, 8, 1, "", "OpenView"]], "msilib.Dialog": [[279, 8, 1, "", "bitmap"], [279, 8, 1, "", "checkbox"], [279, 8, 1, "", "control"], [279, 8, 1, "", "line"], [279, 8, 1, "", "pushbutton"], [279, 8, 1, "", "radiogroup"], [279, 8, 1, "", "text"]], "msilib.Directory": [[279, 8, 1, "", "add_file"], [279, 8, 1, "", "glob"], [279, 8, 1, "", "remove_pyc"], [279, 8, 1, "", "start_component"]], "msilib.Feature": [[279, 8, 1, "", "set_current"]], "msilib.RadioButtonGroup": [[279, 8, 1, "", "add"]], "msilib.Record": [[279, 8, 1, "", "ClearData"], [279, 8, 1, "", "GetFieldCount"], [279, 8, 1, "", "GetInteger"], [279, 8, 1, "", "GetString"], [279, 8, 1, "", "SetInteger"], [279, 8, 1, "", "SetStream"], [279, 8, 1, "", "SetString"]], "msilib.SummaryInformation": [[279, 8, 1, "", "GetProperty"], [279, 8, 1, "", "GetPropertyCount"], [279, 8, 1, "", "Persist"], [279, 8, 1, "", "SetProperty"]], "msilib.View": [[279, 8, 1, "", "Close"], [279, 8, 1, "", "Execute"], [279, 8, 1, "", "Fetch"], [279, 8, 1, "", "GetColumnInfo"], [279, 8, 1, "", "Modify"]], "msvcrt": [[280, 9, 1, "", "CRT_ASSEMBLY_VERSION"], [280, 9, 1, "", "LIBRARIES_ASSEMBLY_NAME_PREFIX"], [280, 9, 1, "", "LK_LOCK"], [280, 9, 1, "", "LK_NBLCK"], [280, 9, 1, "", "LK_NBRLCK"], [280, 9, 1, "", "LK_RLCK"], [280, 9, 1, "", "LK_UNLCK"], [280, 9, 1, "", "VC_ASSEMBLY_PUBLICKEYTOKEN"], [280, 12, 1, "", "get_osfhandle"], [280, 12, 1, "", "getch"], [280, 12, 1, "", "getche"], [280, 12, 1, "", "getwch"], [280, 12, 1, "", "getwche"], [280, 12, 1, "", "heapmin"], [280, 12, 1, "", "kbhit"], [280, 12, 1, "", "locking"], [280, 12, 1, "", "open_osfhandle"], [280, 12, 1, "", "putch"], [280, 12, 1, "", "putwch"], [280, 12, 1, "", "setmode"], [280, 12, 1, "", "ungetch"], [280, 12, 1, "", "ungetwch"]], "multiprocessing": [[281, 12, 1, "", "Array"], [281, 6, 1, "", "AuthenticationError"], [281, 11, 1, "", "Barrier"], [281, 11, 1, "", "BoundedSemaphore"], [281, 6, 1, "", "BufferTooShort"], [281, 11, 1, "", "Condition"], [281, 11, 1, "", "Event"], [281, 11, 1, "", "JoinableQueue"], [281, 11, 1, "", "Lock"], [281, 12, 1, "", "Manager"], [281, 12, 1, "", "Pipe"], [281, 11, 1, "", "Process"], [281, 6, 1, "", "ProcessError"], [281, 11, 1, "", "Queue"], [281, 11, 1, "", "RLock"], [281, 11, 1, "", "Semaphore"], [281, 11, 1, "", "SimpleQueue"], [281, 6, 1, "", "TimeoutError"], [281, 12, 1, "", "Value"], [281, 12, 1, "", "active_children"], [281, 10, 0, "-", "connection"], [281, 12, 1, "", "cpu_count"], [281, 12, 1, "", "current_process"], [281, 10, 0, "-", "dummy"], [281, 12, 1, "", "freeze_support"], [281, 12, 1, "", "get_all_start_methods"], [281, 12, 1, "", "get_context"], [281, 12, 1, "", "get_logger"], [281, 12, 1, "", "get_start_method"], [281, 12, 1, "", "log_to_stderr"], [281, 10, 0, "-", "managers"], [281, 12, 1, "", "parent_process"], [281, 10, 0, "-", "pool"], [281, 12, 1, "", "set_executable"], [281, 12, 1, "", "set_forkserver_preload"], [281, 12, 1, "", "set_start_method"], [282, 10, 0, "-", "shared_memory"], [281, 10, 0, "-", "sharedctypes"]], "multiprocessing.JoinableQueue": [[281, 8, 1, "", "join"], [281, 8, 1, "", "task_done"]], "multiprocessing.Lock": [[281, 8, 1, "", "acquire"], [281, 8, 1, "", "release"]], "multiprocessing.Process": [[281, 7, 1, "", "authkey"], [281, 8, 1, "", "close"], [281, 7, 1, "", "daemon"], [281, 7, 1, "", "exitcode"], [281, 8, 1, "", "is_alive"], [281, 8, 1, "", "join"], [281, 8, 1, "", "kill"], [281, 7, 1, "", "name"], [281, 7, 1, "", "pid"], [281, 8, 1, "", "run"], [281, 7, 1, "", "sentinel"], [281, 8, 1, "", "start"], [281, 8, 1, "", "terminate"]], "multiprocessing.Queue": [[281, 8, 1, "", "cancel_join_thread"], [281, 8, 1, "", "close"], [281, 8, 1, "", "empty"], [281, 8, 1, "", "full"], [281, 8, 1, "", "get"], [281, 8, 1, "", "get_nowait"], [281, 8, 1, "", "join_thread"], [281, 8, 1, "", "put"], [281, 8, 1, "", "put_nowait"], [281, 8, 1, "", "qsize"]], "multiprocessing.RLock": [[281, 8, 1, "", "acquire"], [281, 8, 1, "", "release"]], "multiprocessing.SimpleQueue": [[281, 8, 1, "", "close"], [281, 8, 1, "", "empty"], [281, 8, 1, "", "get"], [281, 8, 1, "", "put"]], "multiprocessing.connection": [[281, 12, 1, "", "Client"], [281, 11, 1, "", "Connection"], [281, 11, 1, "", "Listener"], [281, 12, 1, "", "answer_challenge"], [281, 12, 1, "", "deliver_challenge"], [281, 12, 1, "", "wait"]], "multiprocessing.connection.Connection": [[281, 8, 1, "", "close"], [281, 8, 1, "", "fileno"], [281, 8, 1, "", "poll"], [281, 8, 1, "", "recv"], [281, 8, 1, "", "recv_bytes"], [281, 8, 1, "", "recv_bytes_into"], [281, 8, 1, "", "send"], [281, 8, 1, "", "send_bytes"]], "multiprocessing.connection.Listener": [[281, 8, 1, "", "accept"], [281, 7, 1, "", "address"], [281, 8, 1, "", "close"], [281, 7, 1, "", "last_accepted"]], "multiprocessing.managers": [[281, 11, 1, "", "BaseManager"], [281, 11, 1, "", "BaseProxy"], [281, 11, 1, "", "Namespace"], [282, 11, 1, "", "SharedMemoryManager"], [281, 11, 1, "", "SyncManager"]], "multiprocessing.managers.BaseManager": [[281, 7, 1, "", "address"], [281, 8, 1, "", "connect"], [281, 8, 1, "", "get_server"], [281, 8, 1, "", "register"], [281, 8, 1, "", "shutdown"], [281, 8, 1, "", "start"]], "multiprocessing.managers.BaseProxy": [[281, 8, 1, "", "__repr__"], [281, 8, 1, "", "__str__"], [281, 8, 1, "", "_callmethod"], [281, 8, 1, "", "_getvalue"]], "multiprocessing.managers.SharedMemoryManager": [[282, 8, 1, "", "ShareableList"], [282, 8, 1, "", "SharedMemory"]], "multiprocessing.managers.SyncManager": [[281, 8, 1, "", "Array"], [281, 8, 1, "", "Barrier"], [281, 8, 1, "", "BoundedSemaphore"], [281, 8, 1, "", "Condition"], [281, 8, 1, "", "Event"], [281, 8, 1, "", "Lock"], [281, 8, 1, "", "Namespace"], [281, 8, 1, "", "Queue"], [281, 8, 1, "", "RLock"], [281, 8, 1, "", "Semaphore"], [281, 8, 1, "", "Value"], [281, 8, 1, "", "dict"], [281, 8, 1, "", "list"]], "multiprocessing.pool": [[281, 11, 1, "", "AsyncResult"], [281, 11, 1, "", "Pool"], [281, 11, 1, "", "ThreadPool"]], "multiprocessing.pool.AsyncResult": [[281, 8, 1, "", "get"], [281, 8, 1, "", "ready"], [281, 8, 1, "", "successful"], [281, 8, 1, "", "wait"]], "multiprocessing.pool.Pool": [[281, 8, 1, "", "apply"], [281, 8, 1, "", "apply_async"], [281, 8, 1, "", "close"], [281, 8, 1, "", "imap"], [281, 8, 1, "", "imap_unordered"], [281, 8, 1, "", "join"], [281, 8, 1, "", "map"], [281, 8, 1, "", "map_async"], [281, 8, 1, "", "starmap"], [281, 8, 1, "", "starmap_async"], [281, 8, 1, "", "terminate"]], "multiprocessing.shared_memory": [[282, 11, 1, "", "ShareableList"], [282, 11, 1, "", "SharedMemory"]], "multiprocessing.shared_memory.ShareableList": [[282, 8, 1, "", "count"], [282, 7, 1, "", "format"], [282, 8, 1, "", "index"], [282, 7, 1, "", "shm"]], "multiprocessing.shared_memory.SharedMemory": [[282, 7, 1, "", "buf"], [282, 8, 1, "", "close"], [282, 7, 1, "", "name"], [282, 7, 1, "", "size"], [282, 8, 1, "", "unlink"]], "multiprocessing.sharedctypes": [[281, 12, 1, "", "Array"], [281, 12, 1, "", "RawArray"], [281, 12, 1, "", "RawValue"], [281, 12, 1, "", "Value"], [281, 12, 1, "", "copy"], [281, 12, 1, "", "synchronized"]], "netrc": [[284, 6, 1, "", "NetrcParseError"], [284, 11, 1, "", "netrc"]], "netrc.NetrcParseError": [[284, 7, 1, "", "filename"], [284, 7, 1, "", "lineno"], [284, 7, 1, "", "msg"]], "netrc.netrc": [[284, 8, 1, "", "__repr__"], [284, 8, 1, "", "authenticators"], [284, 7, 1, "", "hosts"], [284, 7, 1, "", "macros"]], "nis": [[285, 12, 1, "", "cat"], [285, 6, 1, "", "error"], [285, 12, 1, "", "get_default_domain"], [285, 12, 1, "", "maps"], [285, 12, 1, "", "match"]], "nntplib": [[286, 11, 1, "", "NNTP"], [286, 6, 1, "", "NNTPDataError"], [286, 6, 1, "", "NNTPError"], [286, 6, 1, "", "NNTPPermanentError"], [286, 6, 1, "", "NNTPProtocolError"], [286, 6, 1, "", "NNTPReplyError"], [286, 6, 1, "", "NNTPTemporaryError"], [286, 11, 1, "", "NNTP_SSL"], [286, 12, 1, "", "decode_header"]], "nntplib.NNTP": [[286, 8, 1, "", "article"], [286, 8, 1, "", "body"], [286, 8, 1, "", "date"], [286, 8, 1, "", "description"], [286, 8, 1, "", "descriptions"], [286, 8, 1, "", "getcapabilities"], [286, 8, 1, "", "getwelcome"], [286, 8, 1, "", "group"], [286, 8, 1, "", "head"], [286, 8, 1, "", "help"], [286, 8, 1, "", "ihave"], [286, 8, 1, "", "last"], [286, 8, 1, "", "list"], [286, 8, 1, "", "login"], [286, 8, 1, "", "newgroups"], [286, 8, 1, "", "newnews"], [286, 8, 1, "", "next"], [286, 7, 1, "", "nntp_implementation"], [286, 7, 1, "", "nntp_version"], [286, 8, 1, "", "over"], [286, 8, 1, "", "post"], [286, 8, 1, "", "quit"], [286, 8, 1, "", "set_debuglevel"], [286, 8, 1, "", "slave"], [286, 8, 1, "", "starttls"], [286, 8, 1, "", "stat"], [286, 8, 1, "", "xhdr"], [286, 8, 1, "", "xover"]], "nntplib.NNTPError": [[286, 7, 1, "", "response"]], "numbers": [[287, 11, 1, "", "Complex"], [287, 11, 1, "", "Integral"], [287, 11, 1, "", "Number"], [287, 11, 1, "", "Rational"], [287, 11, 1, "", "Real"]], "numbers.Complex": [[287, 8, 1, "", "conjugate"], [287, 7, 1, "", "imag"], [287, 7, 1, "", "real"]], "numbers.Rational": [[287, 7, 1, "", "denominator"], [287, 7, 1, "", "numerator"]], "object": [[426, 8, 1, "", "__abs__"], [426, 8, 1, "", "__add__"], [426, 8, 1, "", "__aenter__"], [426, 8, 1, "", "__aexit__"], [426, 8, 1, "", "__aiter__"], [426, 8, 1, "", "__and__"], [426, 8, 1, "", "__anext__"], [426, 8, 1, "", "__await__"], [426, 8, 1, "", "__bool__"], [426, 8, 1, "", "__buffer__"], [426, 8, 1, "", "__bytes__"], [426, 8, 1, "", "__call__"], [426, 8, 1, "", "__ceil__"], [426, 8, 1, "", "__class_getitem__"], [426, 8, 1, "", "__complex__"], [426, 8, 1, "", "__contains__"], [426, 8, 1, "", "__del__"], [426, 8, 1, "", "__delattr__"], [426, 8, 1, "", "__delete__"], [426, 8, 1, "", "__delitem__"], [342, 7, 1, "", "__dict__"], [426, 8, 1, "", "__dir__"], [426, 8, 1, "", "__divmod__"], [426, 8, 1, "", "__enter__"], [426, 8, 1, "", "__eq__"], [426, 8, 1, "", "__exit__"], [426, 8, 1, "", "__float__"], [426, 8, 1, "", "__floor__"], [426, 8, 1, "", "__floordiv__"], [426, 8, 1, "", "__format__"], [426, 8, 1, "", "__ge__"], [426, 8, 1, "", "__get__"], [426, 8, 1, "", "__getattr__"], [426, 8, 1, "", "__getattribute__"], [426, 8, 1, "", "__getitem__"], [297, 8, 1, "", "__getnewargs__"], [297, 8, 1, "", "__getnewargs_ex__"], [297, 8, 1, "", "__getstate__"], [426, 8, 1, "", "__gt__"], [426, 8, 1, "", "__hash__"], [426, 8, 1, "", "__iadd__"], [426, 8, 1, "", "__iand__"], [426, 8, 1, "", "__ifloordiv__"], [426, 8, 1, "", "__ilshift__"], [426, 8, 1, "", "__imatmul__"], [426, 8, 1, "", "__imod__"], [426, 8, 1, "", "__imul__"], [426, 8, 1, "", "__index__"], [426, 8, 1, "", "__init__"], [426, 8, 1, "", "__init_subclass__"], [426, 8, 1, "", "__int__"], [426, 8, 1, "", "__invert__"], [426, 8, 1, "", "__ior__"], [426, 8, 1, "", "__ipow__"], [426, 8, 1, "", "__irshift__"], [426, 8, 1, "", "__isub__"], [426, 8, 1, "", "__iter__"], [426, 8, 1, "", "__itruediv__"], [426, 8, 1, "", "__ixor__"], [426, 8, 1, "", "__le__"], [426, 8, 1, "", "__len__"], [426, 8, 1, "", "__length_hint__"], [426, 8, 1, "", "__lshift__"], [426, 8, 1, "", "__lt__"], [426, 9, 1, "", "__match_args__"], [426, 8, 1, "", "__matmul__"], [426, 8, 1, "", "__missing__"], [426, 8, 1, "", "__mod__"], [426, 8, 1, "", "__mro_entries__"], [426, 8, 1, "", "__mul__"], [426, 8, 1, "", "__ne__"], [426, 8, 1, "", "__neg__"], [426, 8, 1, "", "__new__"], [426, 7, 1, "", "__objclass__"], [426, 8, 1, "", "__or__"], [426, 8, 1, "", "__pos__"], [426, 8, 1, "", "__pow__"], [426, 8, 1, "", "__radd__"], [426, 8, 1, "", "__rand__"], [426, 8, 1, "", "__rdivmod__"], [297, 8, 1, "", "__reduce__"], [297, 8, 1, "", "__reduce_ex__"], [426, 8, 1, "", "__release_buffer__"], [426, 8, 1, "", "__repr__"], [426, 8, 1, "", "__reversed__"], [426, 8, 1, "", "__rfloordiv__"], [426, 8, 1, "", "__rlshift__"], [426, 8, 1, "", "__rmatmul__"], [426, 8, 1, "", "__rmod__"], [426, 8, 1, "", "__rmul__"], [426, 8, 1, "", "__ror__"], [426, 8, 1, "", "__round__"], [426, 8, 1, "", "__rpow__"], [426, 8, 1, "", "__rrshift__"], [426, 8, 1, "", "__rshift__"], [426, 8, 1, "", "__rsub__"], [426, 8, 1, "", "__rtruediv__"], [426, 8, 1, "", "__rxor__"], [426, 8, 1, "", "__set__"], [426, 8, 1, "", "__set_name__"], [426, 8, 1, "", "__setattr__"], [426, 8, 1, "", "__setitem__"], [297, 8, 1, "", "__setstate__"], [426, 9, 1, "", "__slots__"], [426, 8, 1, "", "__str__"], [426, 8, 1, "", "__sub__"], [426, 8, 1, "", "__truediv__"], [426, 8, 1, "", "__trunc__"], [426, 8, 1, "", "__xor__"]], "operator": [[289, 12, 1, "", "__abs__"], [289, 12, 1, "", "__add__"], [289, 12, 1, "", "__and__"], [289, 12, 1, "", "__call__"], [289, 12, 1, "", "__concat__"], [289, 12, 1, "", "__contains__"], [289, 12, 1, "", "__delitem__"], [289, 12, 1, "", "__eq__"], [289, 12, 1, "", "__floordiv__"], [289, 12, 1, "", "__ge__"], [289, 12, 1, "", "__getitem__"], [289, 12, 1, "", "__gt__"], [289, 12, 1, "", "__iadd__"], [289, 12, 1, "", "__iand__"], [289, 12, 1, "", "__iconcat__"], [289, 12, 1, "", "__ifloordiv__"], [289, 12, 1, "", "__ilshift__"], [289, 12, 1, "", "__imatmul__"], [289, 12, 1, "", "__imod__"], [289, 12, 1, "", "__imul__"], [289, 12, 1, "", "__index__"], [289, 12, 1, "", "__inv__"], [289, 12, 1, "", "__invert__"], [289, 12, 1, "", "__ior__"], [289, 12, 1, "", "__ipow__"], [289, 12, 1, "", "__irshift__"], [289, 12, 1, "", "__isub__"], [289, 12, 1, "", "__itruediv__"], [289, 12, 1, "", "__ixor__"], [289, 12, 1, "", "__le__"], [289, 12, 1, "", "__lshift__"], [289, 12, 1, "", "__lt__"], [289, 12, 1, "", "__matmul__"], [289, 12, 1, "", "__mod__"], [289, 12, 1, "", "__mul__"], [289, 12, 1, "", "__ne__"], [289, 12, 1, "", "__neg__"], [289, 12, 1, "", "__not__"], [289, 12, 1, "", "__or__"], [289, 12, 1, "", "__pos__"], [289, 12, 1, "", "__pow__"], [289, 12, 1, "", "__rshift__"], [289, 12, 1, "", "__setitem__"], [289, 12, 1, "", "__sub__"], [289, 12, 1, "", "__truediv__"], [289, 12, 1, "", "__xor__"], [289, 12, 1, "", "abs"], [289, 12, 1, "", "add"], [289, 12, 1, "", "and_"], [289, 12, 1, "", "attrgetter"], [289, 12, 1, "", "call"], [289, 12, 1, "", "concat"], [289, 12, 1, "", "contains"], [289, 12, 1, "", "countOf"], [289, 12, 1, "", "delitem"], [289, 12, 1, "", "eq"], [289, 12, 1, "", "floordiv"], [289, 12, 1, "", "ge"], [289, 12, 1, "", "getitem"], [289, 12, 1, "", "gt"], [289, 12, 1, "", "iadd"], [289, 12, 1, "", "iand"], [289, 12, 1, "", "iconcat"], [289, 12, 1, "", "ifloordiv"], [289, 12, 1, "", "ilshift"], [289, 12, 1, "", "imatmul"], [289, 12, 1, "", "imod"], [289, 12, 1, "", "imul"], [289, 12, 1, "", "index"], [289, 12, 1, "", "indexOf"], [289, 12, 1, "", "inv"], [289, 12, 1, "", "invert"], [289, 12, 1, "", "ior"], [289, 12, 1, "", "ipow"], [289, 12, 1, "", "irshift"], [289, 12, 1, "", "is_"], [289, 12, 1, "", "is_not"], [289, 12, 1, "", "isub"], [289, 12, 1, "", "itemgetter"], [289, 12, 1, "", "itruediv"], [289, 12, 1, "", "ixor"], [289, 12, 1, "", "le"], [289, 12, 1, "", "length_hint"], [289, 12, 1, "", "lshift"], [289, 12, 1, "", "lt"], [289, 12, 1, "", "matmul"], [289, 12, 1, "", "methodcaller"], [289, 12, 1, "", "mod"], [289, 12, 1, "", "mul"], [289, 12, 1, "", "ne"], [289, 12, 1, "", "neg"], [289, 12, 1, "", "not_"], [289, 12, 1, "", "or_"], [289, 12, 1, "", "pos"], [289, 12, 1, "", "pow"], [289, 12, 1, "", "rshift"], [289, 12, 1, "", "setitem"], [289, 12, 1, "", "sub"], [289, 12, 1, "", "truediv"], [289, 12, 1, "", "truth"], [289, 12, 1, "", "xor"]], "optparse": [[290, 6, 1, "", "AmbiguousOptionError"], [290, 6, 1, "", "BadOptionError"], [290, 11, 1, "", "Option"], [290, 6, 1, "", "OptionConflictError"], [290, 6, 1, "", "OptionError"], [290, 11, 1, "", "OptionGroup"], [290, 11, 1, "", "OptionParser"], [290, 6, 1, "", "OptionValueError"], [290, 11, 1, "", "Values"]], "optparse.Option": [[290, 7, 1, "", "ACTIONS"], [290, 7, 1, "", "ALWAYS_TYPED_ACTIONS"], [290, 7, 1, "", "STORE_ACTIONS"], [290, 7, 1, "", "TYPED_ACTIONS"], [290, 7, 1, "", "TYPES"], [290, 7, 1, "", "TYPE_CHECKER"], [290, 7, 1, "", "action"], [290, 7, 1, "", "callback"], [290, 7, 1, "", "callback_args"], [290, 7, 1, "", "callback_kwargs"], [290, 7, 1, "", "choices"], [290, 7, 1, "", "const"], [290, 7, 1, "", "default"], [290, 7, 1, "", "dest"], [290, 7, 1, "", "help"], [290, 7, 1, "", "metavar"], [290, 7, 1, "", "nargs"], [290, 7, 1, "", "type"]], "optparse.OptionParser": [[290, 8, 1, "", "add_option"], [290, 8, 1, "", "disable_interspersed_args"], [290, 8, 1, "", "enable_interspersed_args"], [290, 8, 1, "", "get_option"], [290, 8, 1, "", "get_option_group"], [290, 8, 1, "", "get_usage"], [290, 8, 1, "", "get_version"], [290, 8, 1, "", "has_option"], [290, 8, 1, "", "parse_args"], [290, 8, 1, "", "print_usage"], [290, 8, 1, "", "print_version"], [290, 8, 1, "", "remove_option"], [290, 8, 1, "", "set_defaults"], [290, 8, 1, "", "set_usage"]], "os": [[291, 9, 1, "", "CLD_CONTINUED"], [291, 9, 1, "", "CLD_DUMPED"], [291, 9, 1, "", "CLD_EXITED"], [291, 9, 1, "", "CLD_KILLED"], [291, 9, 1, "", "CLD_STOPPED"], [291, 9, 1, "", "CLD_TRAPPED"], [291, 9, 1, "", "CLONE_FILES"], [291, 9, 1, "", "CLONE_FS"], [291, 9, 1, "", "CLONE_NEWCGROUP"], [291, 9, 1, "", "CLONE_NEWIPC"], [291, 9, 1, "", "CLONE_NEWNET"], [291, 9, 1, "", "CLONE_NEWNS"], [291, 9, 1, "", "CLONE_NEWPID"], [291, 9, 1, "", "CLONE_NEWTIME"], [291, 9, 1, "", "CLONE_NEWUSER"], [291, 9, 1, "", "CLONE_NEWUTS"], [291, 9, 1, "", "CLONE_SIGHAND"], [291, 9, 1, "", "CLONE_SYSVSEM"], [291, 9, 1, "", "CLONE_THREAD"], [291, 9, 1, "", "CLONE_VM"], [291, 11, 1, "", "DirEntry"], [291, 9, 1, "", "EFD_CLOEXEC"], [291, 9, 1, "", "EFD_NONBLOCK"], [291, 9, 1, "", "EFD_SEMAPHORE"], [291, 9, 1, "", "EX_CANTCREAT"], [291, 9, 1, "", "EX_CONFIG"], [291, 9, 1, "", "EX_DATAERR"], [291, 9, 1, "", "EX_IOERR"], [291, 9, 1, "", "EX_NOHOST"], [291, 9, 1, "", "EX_NOINPUT"], [291, 9, 1, "", "EX_NOPERM"], [291, 9, 1, "", "EX_NOTFOUND"], [291, 9, 1, "", "EX_NOUSER"], [291, 9, 1, "", "EX_OK"], [291, 9, 1, "", "EX_OSERR"], [291, 9, 1, "", "EX_OSFILE"], [291, 9, 1, "", "EX_PROTOCOL"], [291, 9, 1, "", "EX_SOFTWARE"], [291, 9, 1, "", "EX_TEMPFAIL"], [291, 9, 1, "", "EX_UNAVAILABLE"], [291, 9, 1, "", "EX_USAGE"], [291, 9, 1, "", "F_LOCK"], [291, 9, 1, "", "F_OK"], [291, 9, 1, "", "F_TEST"], [291, 9, 1, "", "F_TLOCK"], [291, 9, 1, "", "F_ULOCK"], [291, 9, 1, "", "GRND_NONBLOCK"], [291, 9, 1, "", "GRND_RANDOM"], [291, 9, 1, "", "MFD_ALLOW_SEALING"], [291, 9, 1, "", "MFD_CLOEXEC"], [291, 9, 1, "", "MFD_HUGETLB"], [291, 9, 1, "", "MFD_HUGE_16GB"], [291, 9, 1, "", "MFD_HUGE_16MB"], [291, 9, 1, "", "MFD_HUGE_1GB"], [291, 9, 1, "", "MFD_HUGE_1MB"], [291, 9, 1, "", "MFD_HUGE_256MB"], [291, 9, 1, "", "MFD_HUGE_2GB"], [291, 9, 1, "", "MFD_HUGE_2MB"], [291, 9, 1, "", "MFD_HUGE_32MB"], [291, 9, 1, "", "MFD_HUGE_512KB"], [291, 9, 1, "", "MFD_HUGE_512MB"], [291, 9, 1, "", "MFD_HUGE_64KB"], [291, 9, 1, "", "MFD_HUGE_8MB"], [291, 9, 1, "", "MFD_HUGE_MASK"], [291, 9, 1, "", "MFD_HUGE_SHIFT"], [291, 9, 1, "", "O_APPEND"], [291, 9, 1, "", "O_ASYNC"], [291, 9, 1, "", "O_BINARY"], [291, 9, 1, "", "O_CLOEXEC"], [291, 9, 1, "", "O_CREAT"], [291, 9, 1, "", "O_DIRECT"], [291, 9, 1, "", "O_DIRECTORY"], [291, 9, 1, "", "O_DSYNC"], [291, 9, 1, "", "O_EVTONLY"], [291, 9, 1, "", "O_EXCL"], [291, 9, 1, "", "O_EXLOCK"], [291, 9, 1, "", "O_FSYNC"], [291, 9, 1, "", "O_NDELAY"], [291, 9, 1, "", "O_NOATIME"], [291, 9, 1, "", "O_NOCTTY"], [291, 9, 1, "", "O_NOFOLLOW"], [291, 9, 1, "", "O_NOFOLLOW_ANY"], [291, 9, 1, "", "O_NOINHERIT"], [291, 9, 1, "", "O_NONBLOCK"], [291, 9, 1, "", "O_PATH"], [291, 9, 1, "", "O_RANDOM"], [291, 9, 1, "", "O_RDONLY"], [291, 9, 1, "", "O_RDWR"], [291, 9, 1, "", "O_RSYNC"], [291, 9, 1, "", "O_SEQUENTIAL"], [291, 9, 1, "", "O_SHLOCK"], [291, 9, 1, "", "O_SHORT_LIVED"], [291, 9, 1, "", "O_SYMLINK"], [291, 9, 1, "", "O_SYNC"], [291, 9, 1, "", "O_TEMPORARY"], [291, 9, 1, "", "O_TEXT"], [291, 9, 1, "", "O_TMPFILE"], [291, 9, 1, "", "O_TRUNC"], [291, 9, 1, "", "O_WRONLY"], [291, 9, 1, "", "PIDFD_NONBLOCK"], [291, 9, 1, "", "POSIX_FADV_DONTNEED"], [291, 9, 1, "", "POSIX_FADV_NOREUSE"], [291, 9, 1, "", "POSIX_FADV_NORMAL"], [291, 9, 1, "", "POSIX_FADV_RANDOM"], [291, 9, 1, "", "POSIX_FADV_SEQUENTIAL"], [291, 9, 1, "", "POSIX_FADV_WILLNEED"], [291, 9, 1, "", "POSIX_SPAWN_CLOSE"], [291, 9, 1, "", "POSIX_SPAWN_DUP2"], [291, 9, 1, "", "POSIX_SPAWN_OPEN"], [291, 9, 1, "", "PRIO_DARWIN_BG"], [291, 9, 1, "", "PRIO_DARWIN_NONUI"], [291, 9, 1, "", "PRIO_DARWIN_PROCESS"], [291, 9, 1, "", "PRIO_DARWIN_THREAD"], [291, 9, 1, "", "PRIO_PGRP"], [291, 9, 1, "", "PRIO_PROCESS"], [291, 9, 1, "", "PRIO_USER"], [291, 9, 1, "", "P_ALL"], [291, 9, 1, "", "P_DETACH"], [291, 9, 1, "", "P_NOWAIT"], [291, 9, 1, "", "P_NOWAITO"], [291, 9, 1, "", "P_OVERLAY"], [291, 9, 1, "", "P_PGID"], [291, 9, 1, "", "P_PID"], [291, 9, 1, "", "P_PIDFD"], [291, 9, 1, "", "P_WAIT"], [291, 11, 1, "", "PathLike"], [291, 9, 1, "", "RTLD_DEEPBIND"], [291, 9, 1, "", "RTLD_GLOBAL"], [291, 9, 1, "", "RTLD_LAZY"], [291, 9, 1, "", "RTLD_LOCAL"], [291, 9, 1, "", "RTLD_NODELETE"], [291, 9, 1, "", "RTLD_NOLOAD"], [291, 9, 1, "", "RTLD_NOW"], [291, 9, 1, "", "RWF_APPEND"], [291, 9, 1, "", "RWF_DSYNC"], [291, 9, 1, "", "RWF_HIPRI"], [291, 9, 1, "", "RWF_NOWAIT"], [291, 9, 1, "", "RWF_SYNC"], [291, 9, 1, "", "R_OK"], [291, 9, 1, "", "SCHED_BATCH"], [291, 9, 1, "", "SCHED_FIFO"], [291, 9, 1, "", "SCHED_IDLE"], [291, 9, 1, "", "SCHED_OTHER"], [291, 9, 1, "", "SCHED_RESET_ON_FORK"], [291, 9, 1, "", "SCHED_RR"], [291, 9, 1, "", "SCHED_SPORADIC"], [291, 9, 1, "", "SEEK_CUR"], [291, 9, 1, "", "SEEK_DATA"], [291, 9, 1, "", "SEEK_END"], [291, 9, 1, "", "SEEK_HOLE"], [291, 9, 1, "", "SEEK_SET"], [291, 9, 1, "", "SF_MNOWAIT"], [291, 9, 1, "", "SF_NOCACHE"], [291, 9, 1, "", "SF_NODISKIO"], [291, 9, 1, "", "SF_SYNC"], [291, 9, 1, "", "SPLICE_F_MORE"], [291, 9, 1, "", "SPLICE_F_MOVE"], [291, 9, 1, "", "SPLICE_F_NONBLOCK"], [291, 9, 1, "", "WCONTINUED"], [291, 12, 1, "", "WCOREDUMP"], [291, 9, 1, "", "WEXITED"], [291, 12, 1, "", "WEXITSTATUS"], [291, 12, 1, "", "WIFCONTINUED"], [291, 12, 1, "", "WIFEXITED"], [291, 12, 1, "", "WIFSIGNALED"], [291, 12, 1, "", "WIFSTOPPED"], [291, 9, 1, "", "WNOHANG"], [291, 9, 1, "", "WNOWAIT"], [291, 9, 1, "", "WSTOPPED"], [291, 12, 1, "", "WSTOPSIG"], [291, 12, 1, "", "WTERMSIG"], [291, 9, 1, "", "WUNTRACED"], [291, 9, 1, "", "W_OK"], [291, 9, 1, "", "XATTR_CREATE"], [291, 9, 1, "", "XATTR_REPLACE"], [291, 9, 1, "", "XATTR_SIZE_MAX"], [291, 9, 1, "", "X_OK"], [291, 12, 1, "", "_exit"], [291, 12, 1, "", "abort"], [291, 12, 1, "", "access"], [291, 12, 1, "", "add_dll_directory"], [291, 9, 1, "", "altsep"], [291, 12, 1, "", "chdir"], [291, 12, 1, "", "chflags"], [291, 12, 1, "", "chmod"], [291, 12, 1, "", "chown"], [291, 12, 1, "", "chroot"], [291, 12, 1, "", "close"], [291, 12, 1, "", "closerange"], [291, 12, 1, "", "confstr"], [291, 9, 1, "", "confstr_names"], [291, 12, 1, "", "copy_file_range"], [291, 12, 1, "", "cpu_count"], [291, 12, 1, "", "ctermid"], [291, 9, 1, "", "curdir"], [291, 9, 1, "", "defpath"], [291, 12, 1, "", "device_encoding"], [291, 9, 1, "", "devnull"], [291, 12, 1, "", "dup"], [291, 12, 1, "", "dup2"], [291, 9, 1, "", "environ"], [291, 9, 1, "", "environb"], [291, 6, 1, "", "error"], [291, 12, 1, "", "eventfd"], [291, 12, 1, "", "eventfd_read"], [291, 12, 1, "", "eventfd_write"], [291, 12, 1, "", "execl"], [291, 12, 1, "", "execle"], [291, 12, 1, "", "execlp"], [291, 12, 1, "", "execlpe"], [291, 12, 1, "", "execv"], [291, 12, 1, "", "execve"], [291, 12, 1, "", "execvp"], [291, 12, 1, "", "execvpe"], [291, 9, 1, "", "extsep"], [291, 12, 1, "", "fchdir"], [291, 12, 1, "", "fchmod"], [291, 12, 1, "", "fchown"], [291, 12, 1, "", "fdatasync"], [291, 12, 1, "", "fdopen"], [291, 12, 1, "", "fork"], [291, 12, 1, "", "forkpty"], [291, 12, 1, "", "fpathconf"], [291, 12, 1, "", "fsdecode"], [291, 12, 1, "", "fsencode"], [291, 12, 1, "", "fspath"], [291, 12, 1, "", "fstat"], [291, 12, 1, "", "fstatvfs"], [291, 12, 1, "", "fsync"], [291, 12, 1, "", "ftruncate"], [291, 12, 1, "", "fwalk"], [291, 12, 1, "", "get_blocking"], [291, 12, 1, "", "get_exec_path"], [291, 12, 1, "", "get_handle_inheritable"], [291, 12, 1, "", "get_inheritable"], [291, 12, 1, "", "get_terminal_size"], [291, 12, 1, "", "getcwd"], [291, 12, 1, "", "getcwdb"], [291, 12, 1, "", "getegid"], [291, 12, 1, "", "getenv"], [291, 12, 1, "", "getenvb"], [291, 12, 1, "", "geteuid"], [291, 12, 1, "", "getgid"], [291, 12, 1, "", "getgrouplist"], [291, 12, 1, "", "getgroups"], [291, 12, 1, "", "getloadavg"], [291, 12, 1, "", "getlogin"], [291, 12, 1, "", "getpgid"], [291, 12, 1, "", "getpgrp"], [291, 12, 1, "", "getpid"], [291, 12, 1, "", "getppid"], [291, 12, 1, "", "getpriority"], [291, 12, 1, "", "getrandom"], [291, 12, 1, "", "getresgid"], [291, 12, 1, "", "getresuid"], [291, 12, 1, "", "getsid"], [291, 12, 1, "", "getuid"], [291, 12, 1, "", "getxattr"], [291, 12, 1, "", "initgroups"], [291, 12, 1, "", "isatty"], [291, 12, 1, "", "kill"], [291, 12, 1, "", "killpg"], [291, 12, 1, "", "lchflags"], [291, 12, 1, "", "lchmod"], [291, 12, 1, "", "lchown"], [291, 9, 1, "", "linesep"], [291, 12, 1, "", "link"], [291, 12, 1, "", "listdir"], [291, 12, 1, "", "listdrives"], [291, 12, 1, "", "listmounts"], [291, 12, 1, "", "listvolumes"], [291, 12, 1, "", "listxattr"], [291, 12, 1, "", "lockf"], [291, 12, 1, "", "login_tty"], [291, 12, 1, "", "lseek"], [291, 12, 1, "", "lstat"], [291, 12, 1, "", "major"], [291, 12, 1, "", "makedev"], [291, 12, 1, "", "makedirs"], [291, 12, 1, "", "memfd_create"], [291, 12, 1, "", "minor"], [291, 12, 1, "", "mkdir"], [291, 12, 1, "", "mkfifo"], [291, 12, 1, "", "mknod"], [291, 9, 1, "", "name"], [291, 12, 1, "", "nice"], [291, 12, 1, "", "open"], [291, 12, 1, "", "openpty"], [291, 9, 1, "", "pardir"], [292, 10, 0, "-", "path"], [291, 12, 1, "", "pathconf"], [291, 9, 1, "", "pathconf_names"], [291, 9, 1, "", "pathsep"], [291, 12, 1, "", "pidfd_open"], [291, 12, 1, "", "pipe"], [291, 12, 1, "", "pipe2"], [291, 12, 1, "", "plock"], [291, 12, 1, "", "popen"], [291, 12, 1, "", "posix_fadvise"], [291, 12, 1, "", "posix_fallocate"], [291, 12, 1, "", "posix_spawn"], [291, 12, 1, "", "posix_spawnp"], [291, 12, 1, "", "pread"], [291, 12, 1, "", "preadv"], [291, 12, 1, "", "putenv"], [291, 12, 1, "", "pwrite"], [291, 12, 1, "", "pwritev"], [291, 12, 1, "", "read"], [291, 12, 1, "", "readlink"], [291, 12, 1, "", "readv"], [291, 12, 1, "", "register_at_fork"], [291, 12, 1, "", "remove"], [291, 12, 1, "", "removedirs"], [291, 12, 1, "", "removexattr"], [291, 12, 1, "", "rename"], [291, 12, 1, "", "renames"], [291, 12, 1, "", "replace"], [291, 12, 1, "", "rmdir"], [291, 12, 1, "", "scandir"], [291, 12, 1, "", "sched_get_priority_max"], [291, 12, 1, "", "sched_get_priority_min"], [291, 12, 1, "", "sched_getaffinity"], [291, 12, 1, "", "sched_getparam"], [291, 12, 1, "", "sched_getscheduler"], [291, 11, 1, "", "sched_param"], [291, 12, 1, "", "sched_rr_get_interval"], [291, 12, 1, "", "sched_setaffinity"], [291, 12, 1, "", "sched_setparam"], [291, 12, 1, "", "sched_setscheduler"], [291, 12, 1, "", "sched_yield"], [291, 12, 1, "", "sendfile"], [291, 9, 1, "", "sep"], [291, 12, 1, "", "set_blocking"], [291, 12, 1, "", "set_handle_inheritable"], [291, 12, 1, "", "set_inheritable"], [291, 12, 1, "", "setegid"], [291, 12, 1, "", "seteuid"], [291, 12, 1, "", "setgid"], [291, 12, 1, "", "setgroups"], [291, 12, 1, "", "setns"], [291, 12, 1, "", "setpgid"], [291, 12, 1, "", "setpgrp"], [291, 12, 1, "", "setpriority"], [291, 12, 1, "", "setregid"], [291, 12, 1, "", "setresgid"], [291, 12, 1, "", "setresuid"], [291, 12, 1, "", "setreuid"], [291, 12, 1, "", "setsid"], [291, 12, 1, "", "setuid"], [291, 12, 1, "", "setxattr"], [291, 12, 1, "", "spawnl"], [291, 12, 1, "", "spawnle"], [291, 12, 1, "", "spawnlp"], [291, 12, 1, "", "spawnlpe"], [291, 12, 1, "", "spawnv"], [291, 12, 1, "", "spawnve"], [291, 12, 1, "", "spawnvp"], [291, 12, 1, "", "spawnvpe"], [291, 12, 1, "", "splice"], [291, 12, 1, "", "startfile"], [291, 12, 1, "", "stat"], [291, 11, 1, "", "stat_result"], [291, 12, 1, "", "statvfs"], [291, 12, 1, "", "strerror"], [291, 9, 1, "", "supports_bytes_environ"], [291, 9, 1, "", "supports_dir_fd"], [291, 9, 1, "", "supports_effective_ids"], [291, 9, 1, "", "supports_fd"], [291, 9, 1, "", "supports_follow_symlinks"], [291, 12, 1, "", "symlink"], [291, 12, 1, "", "sync"], [291, 12, 1, "", "sysconf"], [291, 9, 1, "", "sysconf_names"], [291, 12, 1, "", "system"], [291, 12, 1, "", "tcgetpgrp"], [291, 12, 1, "", "tcsetpgrp"], [291, 11, 1, "", "terminal_size"], [291, 12, 1, "", "times"], [291, 12, 1, "", "truncate"], [291, 12, 1, "", "ttyname"], [291, 12, 1, "", "umask"], [291, 12, 1, "", "uname"], [291, 12, 1, "", "unlink"], [291, 12, 1, "", "unsetenv"], [291, 12, 1, "", "unshare"], [291, 12, 1, "", "urandom"], [291, 12, 1, "", "utime"], [291, 12, 1, "", "wait"], [291, 12, 1, "", "wait3"], [291, 12, 1, "", "wait4"], [291, 12, 1, "", "waitid"], [291, 12, 1, "", "waitpid"], [291, 12, 1, "", "waitstatus_to_exitcode"], [291, 12, 1, "", "walk"], [291, 12, 1, "", "write"], [291, 12, 1, "", "writev"]], "os.DirEntry": [[291, 8, 1, "", "inode"], [291, 8, 1, "", "is_dir"], [291, 8, 1, "", "is_file"], [291, 8, 1, "", "is_junction"], [291, 8, 1, "", "is_symlink"], [291, 7, 1, "", "name"], [291, 7, 1, "", "path"], [291, 8, 1, "", "stat"]], "os.PathLike": [[291, 8, 1, "", "__fspath__"]], "os.path": [[292, 12, 1, "", "abspath"], [292, 12, 1, "", "basename"], [292, 12, 1, "", "commonpath"], [292, 12, 1, "", "commonprefix"], [292, 12, 1, "", "dirname"], [292, 12, 1, "", "exists"], [292, 12, 1, "", "expanduser"], [292, 12, 1, "", "expandvars"], [292, 12, 1, "", "getatime"], [292, 12, 1, "", "getctime"], [292, 12, 1, "", "getmtime"], [292, 12, 1, "", "getsize"], [292, 12, 1, "", "isabs"], [292, 12, 1, "", "isdevdrive"], [292, 12, 1, "", "isdir"], [292, 12, 1, "", "isfile"], [292, 12, 1, "", "isjunction"], [292, 12, 1, "", "islink"], [292, 12, 1, "", "ismount"], [292, 12, 1, "", "join"], [292, 12, 1, "", "lexists"], [292, 12, 1, "", "normcase"], [292, 12, 1, "", "normpath"], [292, 12, 1, "", "realpath"], [292, 12, 1, "", "relpath"], [292, 12, 1, "", "samefile"], [292, 12, 1, "", "sameopenfile"], [292, 12, 1, "", "samestat"], [292, 12, 1, "", "split"], [292, 12, 1, "", "splitdrive"], [292, 12, 1, "", "splitext"], [292, 12, 1, "", "splitroot"], [292, 9, 1, "", "supports_unicode_filenames"]], "os.scandir": [[291, 8, 1, "", "close"]], "os.sched_param": [[291, 7, 1, "", "sched_priority"]], "os.stat_result": [[291, 7, 1, "", "st_atime"], [291, 7, 1, "", "st_atime_ns"], [291, 7, 1, "", "st_birthtime"], [291, 7, 1, "", "st_birthtime_ns"], [291, 7, 1, "", "st_blksize"], [291, 7, 1, "", "st_blocks"], [291, 7, 1, "", "st_creator"], [291, 7, 1, "", "st_ctime"], [291, 7, 1, "", "st_ctime_ns"], [291, 7, 1, "", "st_dev"], [291, 7, 1, "", "st_file_attributes"], [291, 7, 1, "", "st_flags"], [291, 7, 1, "", "st_fstype"], [291, 7, 1, "", "st_gen"], [291, 7, 1, "", "st_gid"], [291, 7, 1, "", "st_ino"], [291, 7, 1, "", "st_mode"], [291, 7, 1, "", "st_mtime"], [291, 7, 1, "", "st_mtime_ns"], [291, 7, 1, "", "st_nlink"], [291, 7, 1, "", "st_rdev"], [291, 7, 1, "", "st_reparse_tag"], [291, 7, 1, "", "st_rsize"], [291, 7, 1, "", "st_size"], [291, 7, 1, "", "st_type"], [291, 7, 1, "", "st_uid"]], "os.terminal_size": [[291, 7, 1, "", "columns"], [291, 7, 1, "", "lines"]], "ossaudiodev": [[293, 6, 1, "", "OSSAudioError"], [293, 12, 1, "", "open"], [293, 12, 1, "", "openmixer"]], "ossaudiodev.oss_audio_device": [[293, 8, 1, "", "bufsize"], [293, 8, 1, "", "channels"], [293, 8, 1, "", "close"], [293, 7, 1, "", "closed"], [293, 8, 1, "", "fileno"], [293, 8, 1, "", "getfmts"], [293, 7, 1, "", "mode"], [293, 7, 1, "", "name"], [293, 8, 1, "", "nonblock"], [293, 8, 1, "", "obufcount"], [293, 8, 1, "", "obuffree"], [293, 8, 1, "", "post"], [293, 8, 1, "", "read"], [293, 8, 1, "", "reset"], [293, 8, 1, "", "setfmt"], [293, 8, 1, "", "setparameters"], [293, 8, 1, "", "speed"], [293, 8, 1, "", "sync"], [293, 8, 1, "", "write"], [293, 8, 1, "", "writeall"]], "ossaudiodev.oss_mixer_device": [[293, 8, 1, "", "close"], [293, 8, 1, "", "controls"], [293, 8, 1, "", "fileno"], [293, 8, 1, "", "get"], [293, 8, 1, "", "get_recsrc"], [293, 8, 1, "", "reccontrols"], [293, 8, 1, "", "set"], [293, 8, 1, "", "set_recsrc"], [293, 8, 1, "", "stereocontrols"]], "pathlib": [[294, 11, 1, "", "Path"], [294, 11, 1, "", "PosixPath"], [294, 11, 1, "", "PurePath"], [294, 11, 1, "", "PurePosixPath"], [294, 11, 1, "", "PureWindowsPath"], [294, 11, 1, "", "WindowsPath"]], "pathlib.Path": [[294, 8, 1, "", "absolute"], [294, 8, 1, "", "chmod"], [294, 8, 1, "", "cwd"], [294, 8, 1, "", "exists"], [294, 8, 1, "", "expanduser"], [294, 8, 1, "", "glob"], [294, 8, 1, "", "group"], [294, 8, 1, "", "hardlink_to"], [294, 8, 1, "", "home"], [294, 8, 1, "", "is_block_device"], [294, 8, 1, "", "is_char_device"], [294, 8, 1, "", "is_dir"], [294, 8, 1, "", "is_fifo"], [294, 8, 1, "", "is_file"], [294, 8, 1, "", "is_junction"], [294, 8, 1, "", "is_mount"], [294, 8, 1, "", "is_socket"], [294, 8, 1, "", "is_symlink"], [294, 8, 1, "", "iterdir"], [294, 8, 1, "", "lchmod"], [294, 8, 1, "", "lstat"], [294, 8, 1, "", "mkdir"], [294, 8, 1, "", "open"], [294, 8, 1, "", "owner"], [294, 8, 1, "", "read_bytes"], [294, 8, 1, "", "read_text"], [294, 8, 1, "", "readlink"], [294, 8, 1, "", "rename"], [294, 8, 1, "", "replace"], [294, 8, 1, "", "resolve"], [294, 8, 1, "", "rglob"], [294, 8, 1, "", "rmdir"], [294, 8, 1, "", "samefile"], [294, 8, 1, "", "stat"], [294, 8, 1, "", "symlink_to"], [294, 8, 1, "", "touch"], [294, 8, 1, "", "unlink"], [294, 8, 1, "", "walk"], [294, 8, 1, "", "write_bytes"], [294, 8, 1, "", "write_text"]], "pathlib.PurePath": [[294, 7, 1, "", "anchor"], [294, 8, 1, "", "as_posix"], [294, 8, 1, "", "as_uri"], [294, 7, 1, "", "drive"], [294, 8, 1, "", "is_absolute"], [294, 8, 1, "", "is_relative_to"], [294, 8, 1, "", "is_reserved"], [294, 8, 1, "", "joinpath"], [294, 8, 1, "", "match"], [294, 7, 1, "", "name"], [294, 7, 1, "", "parent"], [294, 7, 1, "", "parents"], [294, 7, 1, "", "parts"], [294, 8, 1, "", "relative_to"], [294, 7, 1, "", "root"], [294, 7, 1, "", "stem"], [294, 7, 1, "", "suffix"], [294, 7, 1, "", "suffixes"], [294, 8, 1, "", "with_name"], [294, 8, 1, "", "with_segments"], [294, 8, 1, "", "with_stem"], [294, 8, 1, "", "with_suffix"]], "pdb": [[295, 11, 1, "", "Pdb"], [295, 12, 1, "", "pm"], [295, 12, 1, "", "post_mortem"], [295, 12, 1, "", "run"], [295, 12, 1, "", "runcall"], [295, 12, 1, "", "runeval"], [295, 12, 1, "", "set_trace"]], "pdb.Pdb": [[295, 8, 1, "", "run"], [295, 8, 1, "", "runcall"], [295, 8, 1, "", "runeval"], [295, 8, 1, "", "set_trace"]], "pickle": [[297, 9, 1, "", "DEFAULT_PROTOCOL"], [297, 9, 1, "", "HIGHEST_PROTOCOL"], [297, 11, 1, "", "PickleBuffer"], [297, 6, 1, "", "PickleError"], [297, 11, 1, "", "Pickler"], [297, 6, 1, "", "PicklingError"], [297, 11, 1, "", "Unpickler"], [297, 6, 1, "", "UnpicklingError"], [297, 12, 1, "", "dump"], [297, 12, 1, "", "dumps"], [297, 12, 1, "", "load"], [297, 12, 1, "", "loads"]], "pickle.PickleBuffer": [[297, 8, 1, "", "raw"], [297, 8, 1, "", "release"]], "pickle.Pickler": [[297, 7, 1, "", "dispatch_table"], [297, 8, 1, "", "dump"], [297, 7, 1, "", "fast"], [297, 8, 1, "", "persistent_id"], [297, 8, 1, "", "reducer_override"]], "pickle.Unpickler": [[297, 8, 1, "", "find_class"], [297, 8, 1, "", "load"], [297, 8, 1, "", "persistent_load"]], "pickletools": [[298, 12, 1, "", "dis"], [298, 12, 1, "", "genops"], [298, 12, 1, "", "optimize"], [298, 14, 1, "cmdoption-pickletools-a", "--annotate"], [298, 14, 1, "cmdoption-pickletools-l", "--indentlevel"], [298, 14, 1, "cmdoption-pickletools-m", "--memo"], [298, 14, 1, "cmdoption-pickletools-o", "--output"], [298, 14, 1, "cmdoption-pickletools-p", "--preamble"], [298, 14, 1, "cmdoption-pickletools-a", "-a"], [298, 14, 1, "cmdoption-pickletools-l", "-l"], [298, 14, 1, "cmdoption-pickletools-m", "-m"], [298, 14, 1, "cmdoption-pickletools-o", "-o"], [298, 14, 1, "cmdoption-pickletools-p", "-p"]], "pipes": [[299, 11, 1, "", "Template"]], "pipes.Template": [[299, 8, 1, "", "append"], [299, 8, 1, "", "clone"], [299, 8, 1, "", "copy"], [299, 8, 1, "", "debug"], [299, 8, 1, "", "open"], [299, 8, 1, "", "prepend"], [299, 8, 1, "", "reset"]], "pkgutil": [[300, 11, 1, "", "ModuleInfo"], [300, 12, 1, "", "extend_path"], [300, 12, 1, "", "find_loader"], [300, 12, 1, "", "get_data"], [300, 12, 1, "", "get_importer"], [300, 12, 1, "", "get_loader"], [300, 12, 1, "", "iter_importers"], [300, 12, 1, "", "iter_modules"], [300, 12, 1, "", "resolve_name"], [300, 12, 1, "", "walk_packages"]], "platform": [[301, 12, 1, "", "architecture"], [301, 12, 1, "", "freedesktop_os_release"], [301, 12, 1, "", "java_ver"], [301, 12, 1, "", "libc_ver"], [301, 12, 1, "", "mac_ver"], [301, 12, 1, "", "machine"], [301, 12, 1, "", "node"], [301, 12, 1, "", "platform"], [301, 12, 1, "", "processor"], [301, 12, 1, "", "python_branch"], [301, 12, 1, "", "python_build"], [301, 12, 1, "", "python_compiler"], [301, 12, 1, "", "python_implementation"], [301, 12, 1, "", "python_revision"], [301, 12, 1, "", "python_version"], [301, 12, 1, "", "python_version_tuple"], [301, 12, 1, "", "release"], [301, 12, 1, "", "system"], [301, 12, 1, "", "system_alias"], [301, 12, 1, "", "uname"], [301, 12, 1, "", "version"], [301, 12, 1, "", "win32_edition"], [301, 12, 1, "", "win32_is_iot"], [301, 12, 1, "", "win32_ver"]], "plistlib": [[302, 9, 1, "", "FMT_BINARY"], [302, 9, 1, "", "FMT_XML"], [302, 11, 1, "", "UID"], [302, 12, 1, "", "dump"], [302, 12, 1, "", "dumps"], [302, 12, 1, "", "load"], [302, 12, 1, "", "loads"]], "poplib": [[303, 11, 1, "", "POP3"], [303, 11, 1, "", "POP3_SSL"], [303, 6, 1, "", "error_proto"]], "poplib.POP3": [[303, 8, 1, "", "apop"], [303, 8, 1, "", "capa"], [303, 8, 1, "", "dele"], [303, 8, 1, "", "getwelcome"], [303, 8, 1, "", "list"], [303, 8, 1, "", "noop"], [303, 8, 1, "", "pass_"], [303, 8, 1, "", "quit"], [303, 8, 1, "", "retr"], [303, 8, 1, "", "rpop"], [303, 8, 1, "", "rset"], [303, 8, 1, "", "set_debuglevel"], [303, 8, 1, "", "stat"], [303, 8, 1, "", "stls"], [303, 8, 1, "", "top"], [303, 8, 1, "", "uidl"], [303, 8, 1, "", "user"], [303, 8, 1, "", "utf8"]], "posix": [[304, 9, 1, "", "environ"]], "pprint": [[305, 11, 1, "", "PrettyPrinter"], [305, 12, 1, "", "isreadable"], [305, 12, 1, "", "isrecursive"], [305, 12, 1, "", "pformat"], [305, 12, 1, "", "pp"], [305, 12, 1, "", "pprint"], [305, 12, 1, "", "saferepr"]], "pprint.PrettyPrinter": [[305, 8, 1, "", "format"], [305, 8, 1, "", "isreadable"], [305, 8, 1, "", "isrecursive"], [305, 8, 1, "", "pformat"], [305, 8, 1, "", "pprint"]], "profile": [[306, 11, 1, "", "Profile"], [306, 12, 1, "", "run"], [306, 12, 1, "", "runctx"]], "profile.Profile": [[306, 8, 1, "", "create_stats"], [306, 8, 1, "", "disable"], [306, 8, 1, "", "dump_stats"], [306, 8, 1, "", "enable"], [306, 8, 1, "", "print_stats"], [306, 8, 1, "", "run"], [306, 8, 1, "", "runcall"], [306, 8, 1, "", "runctx"]], "property": [[223, 12, 1, "", "deleter"], [223, 12, 1, "", "getter"], [223, 12, 1, "", "setter"]], "pstats": [[306, 11, 1, "", "Stats"]], "pstats.Stats": [[306, 8, 1, "", "add"], [306, 8, 1, "", "dump_stats"], [306, 8, 1, "", "get_stats_profile"], [306, 8, 1, "", "print_callees"], [306, 8, 1, "", "print_callers"], [306, 8, 1, "", "print_stats"], [306, 8, 1, "", "reverse_order"], [306, 8, 1, "", "sort_stats"], [306, 8, 1, "", "strip_dirs"]], "pty": [[307, 12, 1, "", "fork"], [307, 12, 1, "", "openpty"], [307, 12, 1, "", "spawn"]], "pwd": [[308, 12, 1, "", "getpwall"], [308, 12, 1, "", "getpwnam"], [308, 12, 1, "", "getpwuid"]], "py_compile": [[309, 6, 1, "", "PyCompileError"], [309, 11, 1, "", "PycInvalidationMode"], [309, 12, 1, "", "compile"]], "py_compile.PycInvalidationMode": [[309, 7, 1, "", "CHECKED_HASH"], [309, 7, 1, "", "TIMESTAMP"], [309, 7, 1, "", "UNCHECKED_HASH"]], "pyclbr": [[310, 11, 1, "", "Class"], [310, 11, 1, "", "Function"], [310, 12, 1, "", "readmodule"], [310, 12, 1, "", "readmodule_ex"]], "pyclbr.Class": [[310, 7, 1, "", "children"], [310, 7, 1, "", "file"], [310, 7, 1, "", "lineno"], [310, 7, 1, "", "methods"], [310, 7, 1, "", "module"], [310, 7, 1, "", "name"], [310, 7, 1, "", "parent"], [310, 7, 1, "", "super"]], "pyclbr.Function": [[310, 7, 1, "", "children"], [310, 7, 1, "", "file"], [310, 7, 1, "", "is_async"], [310, 7, 1, "", "lineno"], [310, 7, 1, "", "module"], [310, 7, 1, "", "name"], [310, 7, 1, "", "parent"]], "queue": [[314, 6, 1, "", "Empty"], [314, 6, 1, "", "Full"], [314, 11, 1, "", "LifoQueue"], [314, 11, 1, "", "PriorityQueue"], [314, 11, 1, "", "Queue"], [314, 11, 1, "", "SimpleQueue"]], "queue.Queue": [[314, 8, 1, "", "empty"], [314, 8, 1, "", "full"], [314, 8, 1, "", "get"], [314, 8, 1, "", "get_nowait"], [314, 8, 1, "", "join"], [314, 8, 1, "", "put"], [314, 8, 1, "", "put_nowait"], [314, 8, 1, "", "qsize"], [314, 8, 1, "", "task_done"]], "queue.SimpleQueue": [[314, 8, 1, "", "empty"], [314, 8, 1, "", "get"], [314, 8, 1, "", "get_nowait"], [314, 8, 1, "", "put"], [314, 8, 1, "", "put_nowait"], [314, 8, 1, "", "qsize"]], "quopri": [[315, 12, 1, "", "decode"], [315, 12, 1, "", "decodestring"], [315, 12, 1, "", "encode"], [315, 12, 1, "", "encodestring"]], "random": [[316, 11, 1, "", "Random"], [316, 11, 1, "", "SystemRandom"], [316, 12, 1, "", "betavariate"], [316, 12, 1, "", "binomialvariate"], [316, 12, 1, "", "choice"], [316, 12, 1, "", "choices"], [316, 12, 1, "", "expovariate"], [316, 12, 1, "", "gammavariate"], [316, 12, 1, "", "gauss"], [316, 12, 1, "", "getrandbits"], [316, 12, 1, "", "getstate"], [316, 12, 1, "", "lognormvariate"], [316, 12, 1, "", "normalvariate"], [316, 12, 1, "", "paretovariate"], [316, 12, 1, "", "randbytes"], [316, 12, 1, "", "randint"], [316, 12, 1, "", "random"], [316, 12, 1, "", "randrange"], [316, 12, 1, "", "sample"], [316, 12, 1, "", "seed"], [316, 12, 1, "", "setstate"], [316, 12, 1, "", "shuffle"], [316, 12, 1, "", "triangular"], [316, 12, 1, "", "uniform"], [316, 12, 1, "", "vonmisesvariate"], [316, 12, 1, "", "weibullvariate"]], "random.Random": [[316, 8, 1, "", "getrandbits"], [316, 8, 1, "", "getstate"], [316, 8, 1, "", "random"], [316, 8, 1, "", "seed"], [316, 8, 1, "", "setstate"]], "range": [[342, 7, 1, "", "start"], [342, 7, 1, "", "step"], [342, 7, 1, "", "stop"]], "re": [[317, 9, 1, "", "A"], [317, 9, 1, "", "ASCII"], [317, 9, 1, "", "DEBUG"], [317, 9, 1, "", "DOTALL"], [317, 9, 1, "", "I"], [317, 9, 1, "", "IGNORECASE"], [317, 9, 1, "", "L"], [317, 9, 1, "", "LOCALE"], [317, 9, 1, "", "M"], [317, 9, 1, "", "MULTILINE"], [317, 11, 1, "", "Match"], [317, 9, 1, "", "NOFLAG"], [317, 11, 1, "", "Pattern"], [317, 11, 1, "", "RegexFlag"], [317, 9, 1, "", "S"], [317, 9, 1, "", "U"], [317, 9, 1, "", "UNICODE"], [317, 9, 1, "", "VERBOSE"], [317, 9, 1, "", "X"], [317, 12, 1, "", "compile"], [317, 6, 1, "", "error"], [317, 12, 1, "", "escape"], [317, 12, 1, "", "findall"], [317, 12, 1, "", "finditer"], [317, 12, 1, "", "fullmatch"], [317, 12, 1, "", "match"], [317, 12, 1, "", "purge"], [317, 12, 1, "", "search"], [317, 12, 1, "", "split"], [317, 12, 1, "", "sub"], [317, 12, 1, "", "subn"]], "re.Match": [[317, 8, 1, "", "__getitem__"], [317, 8, 1, "", "end"], [317, 7, 1, "", "endpos"], [317, 8, 1, "", "expand"], [317, 8, 1, "", "group"], [317, 8, 1, "", "groupdict"], [317, 8, 1, "", "groups"], [317, 7, 1, "", "lastgroup"], [317, 7, 1, "", "lastindex"], [317, 7, 1, "", "pos"], [317, 7, 1, "", "re"], [317, 8, 1, "", "span"], [317, 8, 1, "", "start"], [317, 7, 1, "", "string"]], "re.Pattern": [[317, 8, 1, "", "findall"], [317, 8, 1, "", "finditer"], [317, 7, 1, "", "flags"], [317, 8, 1, "", "fullmatch"], [317, 7, 1, "", "groupindex"], [317, 7, 1, "", "groups"], [317, 8, 1, "", "match"], [317, 7, 1, "", "pattern"], [317, 8, 1, "", "search"], [317, 8, 1, "", "split"], [317, 8, 1, "", "sub"], [317, 8, 1, "", "subn"]], "re.error": [[317, 7, 1, "", "colno"], [317, 7, 1, "", "lineno"], [317, 7, 1, "", "msg"], [317, 7, 1, "", "pattern"], [317, 7, 1, "", "pos"]], "readline": [[318, 12, 1, "", "add_history"], [318, 12, 1, "", "append_history_file"], [318, 12, 1, "", "clear_history"], [318, 12, 1, "", "get_begidx"], [318, 12, 1, "", "get_completer"], [318, 12, 1, "", "get_completer_delims"], [318, 12, 1, "", "get_completion_type"], [318, 12, 1, "", "get_current_history_length"], [318, 12, 1, "", "get_endidx"], [318, 12, 1, "", "get_history_item"], [318, 12, 1, "", "get_history_length"], [318, 12, 1, "", "get_line_buffer"], [318, 12, 1, "", "insert_text"], [318, 12, 1, "", "parse_and_bind"], [318, 12, 1, "", "read_history_file"], [318, 12, 1, "", "read_init_file"], [318, 12, 1, "", "redisplay"], [318, 12, 1, "", "remove_history_item"], [318, 12, 1, "", "replace_history_item"], [318, 12, 1, "", "set_auto_history"], [318, 12, 1, "", "set_completer"], [318, 12, 1, "", "set_completer_delims"], [318, 12, 1, "", "set_completion_display_matches_hook"], [318, 12, 1, "", "set_history_length"], [318, 12, 1, "", "set_pre_input_hook"], [318, 12, 1, "", "set_startup_hook"], [318, 12, 1, "", "write_history_file"]], "reprlib": [[319, 11, 1, "", "Repr"], [319, 9, 1, "", "aRepr"], [319, 12, 1, "", "recursive_repr"], [319, 12, 1, "", "repr"]], "reprlib.Repr": [[319, 7, 1, "", "fillvalue"], [319, 7, 1, "", "indent"], [319, 7, 1, "", "maxarray"], [319, 7, 1, "", "maxdeque"], [319, 7, 1, "", "maxdict"], [319, 7, 1, "", "maxfrozenset"], [319, 7, 1, "", "maxlevel"], [319, 7, 1, "", "maxlist"], [319, 7, 1, "", "maxlong"], [319, 7, 1, "", "maxother"], [319, 7, 1, "", "maxset"], [319, 7, 1, "", "maxstring"], [319, 7, 1, "", "maxtuple"], [319, 8, 1, "", "repr"], [319, 8, 1, "", "repr1"]], "resource": [[320, 9, 1, "", "RLIMIT_AS"], [320, 9, 1, "", "RLIMIT_CORE"], [320, 9, 1, "", "RLIMIT_CPU"], [320, 9, 1, "", "RLIMIT_DATA"], [320, 9, 1, "", "RLIMIT_FSIZE"], [320, 9, 1, "", "RLIMIT_KQUEUES"], [320, 9, 1, "", "RLIMIT_MEMLOCK"], [320, 9, 1, "", "RLIMIT_MSGQUEUE"], [320, 9, 1, "", "RLIMIT_NICE"], [320, 9, 1, "", "RLIMIT_NOFILE"], [320, 9, 1, "", "RLIMIT_NPROC"], [320, 9, 1, "", "RLIMIT_NPTS"], [320, 9, 1, "", "RLIMIT_OFILE"], [320, 9, 1, "", "RLIMIT_RSS"], [320, 9, 1, "", "RLIMIT_RTPRIO"], [320, 9, 1, "", "RLIMIT_RTTIME"], [320, 9, 1, "", "RLIMIT_SBSIZE"], [320, 9, 1, "", "RLIMIT_SIGPENDING"], [320, 9, 1, "", "RLIMIT_STACK"], [320, 9, 1, "", "RLIMIT_SWAP"], [320, 9, 1, "", "RLIMIT_VMEM"], [320, 9, 1, "", "RLIM_INFINITY"], [320, 9, 1, "", "RUSAGE_BOTH"], [320, 9, 1, "", "RUSAGE_CHILDREN"], [320, 9, 1, "", "RUSAGE_SELF"], [320, 9, 1, "", "RUSAGE_THREAD"], [320, 6, 1, "", "error"], [320, 12, 1, "", "getpagesize"], [320, 12, 1, "", "getrlimit"], [320, 12, 1, "", "getrusage"], [320, 12, 1, "", "prlimit"], [320, 12, 1, "", "setrlimit"]], "rlcompleter": [[321, 11, 1, "", "Completer"]], "rlcompleter.Completer": [[321, 8, 1, "", "complete"]], "runpy": [[322, 12, 1, "", "run_module"], [322, 12, 1, "", "run_path"]], "sched": [[323, 11, 1, "", "scheduler"]], "sched.scheduler": [[323, 8, 1, "", "cancel"], [323, 8, 1, "", "empty"], [323, 8, 1, "", "enter"], [323, 8, 1, "", "enterabs"], [323, 7, 1, "", "queue"], [323, 8, 1, "", "run"]], "secrets": [[324, 11, 1, "", "SystemRandom"], [324, 12, 1, "", "choice"], [324, 12, 1, "", "compare_digest"], [324, 12, 1, "", "randbelow"], [324, 12, 1, "", "randbits"], [324, 12, 1, "", "token_bytes"], [324, 12, 1, "", "token_hex"], [324, 12, 1, "", "token_urlsafe"]], "select": [[326, 7, 1, "", "PIPE_BUF"], [326, 12, 1, "", "devpoll"], [326, 12, 1, "", "epoll"], [326, 6, 1, "", "error"], [326, 12, 1, "", "kevent"], [326, 12, 1, "", "kqueue"], [326, 12, 1, "", "poll"], [326, 12, 1, "", "select"]], "select.devpoll": [[326, 8, 1, "", "close"], [326, 7, 1, "", "closed"], [326, 8, 1, "", "fileno"], [326, 8, 1, "", "modify"], [326, 8, 1, "", "poll"], [326, 8, 1, "", "register"], [326, 8, 1, "", "unregister"]], "select.epoll": [[326, 8, 1, "", "close"], [326, 7, 1, "", "closed"], [326, 8, 1, "", "fileno"], [326, 8, 1, "", "fromfd"], [326, 8, 1, "", "modify"], [326, 8, 1, "", "poll"], [326, 8, 1, "", "register"], [326, 8, 1, "", "unregister"]], "select.kevent": [[326, 7, 1, "", "data"], [326, 7, 1, "", "fflags"], [326, 7, 1, "", "filter"], [326, 7, 1, "", "flags"], [326, 7, 1, "", "ident"], [326, 7, 1, "", "udata"]], "select.kqueue": [[326, 8, 1, "", "close"], [326, 7, 1, "", "closed"], [326, 8, 1, "", "control"], [326, 8, 1, "", "fileno"], [326, 8, 1, "", "fromfd"]], "select.poll": [[326, 8, 1, "", "modify"], [326, 8, 1, "", "poll"], [326, 8, 1, "", "register"], [326, 8, 1, "", "unregister"]], "selectors": [[327, 11, 1, "", "BaseSelector"], [327, 11, 1, "", "DefaultSelector"], [327, 11, 1, "", "DevpollSelector"], [327, 9, 1, "", "EVENT_READ"], [327, 9, 1, "", "EVENT_WRITE"], [327, 11, 1, "", "EpollSelector"], [327, 11, 1, "", "KqueueSelector"], [327, 11, 1, "", "PollSelector"], [327, 11, 1, "", "SelectSelector"], [327, 11, 1, "", "SelectorKey"]], "selectors.BaseSelector": [[327, 8, 1, "", "close"], [327, 8, 1, "", "get_key"], [327, 8, 1, "", "get_map"], [327, 8, 1, "", "modify"], [327, 8, 1, "", "register"], [327, 8, 1, "", "select"], [327, 8, 1, "", "unregister"]], "selectors.DevpollSelector": [[327, 8, 1, "", "fileno"]], "selectors.EpollSelector": [[327, 8, 1, "", "fileno"]], "selectors.KqueueSelector": [[327, 8, 1, "", "fileno"]], "selectors.SelectorKey": [[327, 7, 1, "", "data"], [327, 7, 1, "", "events"], [327, 7, 1, "", "fd"], [327, 7, 1, "", "fileobj"]], "shelve": [[328, 11, 1, "", "BsdDbShelf"], [328, 11, 1, "", "DbfilenameShelf"], [328, 11, 1, "", "Shelf"], [328, 12, 1, "", "open"]], "shelve.Shelf": [[328, 8, 1, "", "close"], [328, 8, 1, "", "sync"]], "shlex": [[329, 12, 1, "", "join"], [329, 12, 1, "", "quote"], [329, 11, 1, "", "shlex"], [329, 12, 1, "", "split"]], "shlex.shlex": [[329, 7, 1, "", "commenters"], [329, 7, 1, "", "debug"], [329, 7, 1, "", "eof"], [329, 8, 1, "", "error_leader"], [329, 7, 1, "", "escape"], [329, 7, 1, "", "escapedquotes"], [329, 8, 1, "", "get_token"], [329, 7, 1, "", "infile"], [329, 7, 1, "", "instream"], [329, 7, 1, "", "lineno"], [329, 8, 1, "", "pop_source"], [329, 7, 1, "", "punctuation_chars"], [329, 8, 1, "", "push_source"], [329, 8, 1, "", "push_token"], [329, 7, 1, "", "quotes"], [329, 8, 1, "", "read_token"], [329, 7, 1, "", "source"], [329, 8, 1, "", "sourcehook"], [329, 7, 1, "", "token"], [329, 7, 1, "", "whitespace"], [329, 7, 1, "", "whitespace_split"], [329, 7, 1, "", "wordchars"]], "shutil": [[330, 6, 1, "", "Error"], [330, 6, 1, "", "SameFileError"], [330, 12, 1, "", "chown"], [330, 12, 1, "", "copy"], [330, 12, 1, "", "copy2"], [330, 12, 1, "", "copyfile"], [330, 12, 1, "", "copyfileobj"], [330, 12, 1, "", "copymode"], [330, 12, 1, "", "copystat"], [330, 12, 1, "", "copytree"], [330, 12, 1, "", "disk_usage"], [330, 12, 1, "", "get_archive_formats"], [330, 12, 1, "", "get_terminal_size"], [330, 12, 1, "", "get_unpack_formats"], [330, 12, 1, "", "ignore_patterns"], [330, 12, 1, "", "make_archive"], [330, 12, 1, "", "move"], [330, 12, 1, "", "register_archive_format"], [330, 12, 1, "", "register_unpack_format"], [330, 12, 1, "", "rmtree"], [330, 12, 1, "", "unpack_archive"], [330, 12, 1, "", "unregister_archive_format"], [330, 12, 1, "", "unregister_unpack_format"], [330, 12, 1, "", "which"]], "shutil.rmtree": [[330, 7, 1, "", "avoids_symlink_attacks"]], "signal": [[331, 9, 1, "", "CTRL_BREAK_EVENT"], [331, 9, 1, "", "CTRL_C_EVENT"], [331, 11, 1, "", "Handlers"], [331, 9, 1, "", "ITIMER_PROF"], [331, 9, 1, "", "ITIMER_REAL"], [331, 9, 1, "", "ITIMER_VIRTUAL"], [331, 6, 1, "", "ItimerError"], [331, 9, 1, "", "NSIG"], [331, 9, 1, "", "SIGABRT"], [331, 9, 1, "", "SIGALRM"], [331, 9, 1, "", "SIGBREAK"], [331, 9, 1, "", "SIGBUS"], [331, 9, 1, "", "SIGCHLD"], [331, 9, 1, "", "SIGCLD"], [331, 9, 1, "", "SIGCONT"], [331, 9, 1, "", "SIGFPE"], [331, 9, 1, "", "SIGHUP"], [331, 9, 1, "", "SIGILL"], [331, 9, 1, "", "SIGINT"], [331, 9, 1, "", "SIGKILL"], [331, 9, 1, "", "SIGPIPE"], [331, 9, 1, "", "SIGSEGV"], [331, 9, 1, "", "SIGSTKFLT"], [331, 9, 1, "", "SIGTERM"], [331, 9, 1, "", "SIGUSR1"], [331, 9, 1, "", "SIGUSR2"], [331, 9, 1, "", "SIGWINCH"], [331, 9, 1, "", "SIG_BLOCK"], [331, 9, 1, "", "SIG_DFL"], [331, 9, 1, "", "SIG_IGN"], [331, 9, 1, "", "SIG_SETMASK"], [331, 9, 1, "", "SIG_UNBLOCK"], [331, 11, 1, "", "Sigmasks"], [331, 11, 1, "", "Signals"], [331, 12, 1, "", "alarm"], [331, 12, 1, "", "getitimer"], [331, 12, 1, "", "getsignal"], [331, 12, 1, "", "pause"], [331, 12, 1, "", "pidfd_send_signal"], [331, 12, 1, "", "pthread_kill"], [331, 12, 1, "", "pthread_sigmask"], [331, 12, 1, "", "raise_signal"], [331, 12, 1, "", "set_wakeup_fd"], [331, 12, 1, "", "setitimer"], [331, 12, 1, "", "siginterrupt"], [331, 12, 1, "", "signal"], [331, 12, 1, "", "sigpending"], [331, 12, 1, "", "sigtimedwait"], [331, 12, 1, "", "sigwait"], [331, 12, 1, "", "sigwaitinfo"], [331, 12, 1, "", "strsignal"], [331, 12, 1, "", "valid_signals"]], "site": [[332, 9, 1, "", "ENABLE_USER_SITE"], [332, 9, 1, "", "PREFIXES"], [332, 9, 1, "", "USER_BASE"], [332, 9, 1, "", "USER_SITE"], [332, 12, 1, "", "addsitedir"], [332, 12, 1, "", "getsitepackages"], [332, 12, 1, "", "getuserbase"], [332, 12, 1, "", "getusersitepackages"], [332, 12, 1, "", "main"], [332, 14, 1, "cmdoption-site-user-base", "--user-base"], [332, 14, 1, "cmdoption-site-user-site", "--user-site"]], "slice": [[426, 8, 1, "", "indices"], [223, 7, 1, "", "start"], [223, 7, 1, "", "step"], [223, 7, 1, "", "stop"]], "smtplib": [[333, 11, 1, "", "LMTP"], [333, 11, 1, "", "SMTP"], [333, 6, 1, "", "SMTPAuthenticationError"], [333, 6, 1, "", "SMTPConnectError"], [333, 6, 1, "", "SMTPDataError"], [333, 6, 1, "", "SMTPException"], [333, 6, 1, "", "SMTPHeloError"], [333, 6, 1, "", "SMTPNotSupportedError"], [333, 6, 1, "", "SMTPRecipientsRefused"], [333, 6, 1, "", "SMTPResponseException"], [333, 6, 1, "", "SMTPSenderRefused"], [333, 6, 1, "", "SMTPServerDisconnected"], [333, 11, 1, "", "SMTP_SSL"]], "smtplib.SMTP": [[333, 8, 1, "", "auth"], [333, 8, 1, "", "connect"], [333, 8, 1, "", "docmd"], [333, 8, 1, "", "ehlo"], [333, 8, 1, "", "ehlo_or_helo_if_needed"], [333, 8, 1, "", "has_extn"], [333, 8, 1, "", "helo"], [333, 8, 1, "", "login"], [333, 8, 1, "", "quit"], [333, 8, 1, "", "send_message"], [333, 8, 1, "", "sendmail"], [333, 8, 1, "", "set_debuglevel"], [333, 8, 1, "", "starttls"], [333, 8, 1, "", "verify"]], "sndhdr": [[334, 9, 1, "", "tests"], [334, 12, 1, "", "what"], [334, 12, 1, "", "whathdr"]], "socket": [[335, 9, 1, "", "AF_ALG"], [335, 9, 1, "", "AF_CAN"], [335, 9, 1, "", "AF_DIVERT"], [335, 9, 1, "", "AF_HYPERV"], [335, 9, 1, "", "AF_INET"], [335, 9, 1, "", "AF_INET6"], [335, 9, 1, "", "AF_LINK"], [335, 9, 1, "", "AF_PACKET"], [335, 9, 1, "", "AF_QIPCRTR"], [335, 9, 1, "", "AF_RDS"], [335, 9, 1, "", "AF_UNIX"], [335, 9, 1, "", "AF_UNSPEC"], [335, 9, 1, "", "AF_VSOCK"], [335, 9, 1, "", "BDADDR_ANY"], [335, 9, 1, "", "BDADDR_LOCAL"], [335, 9, 1, "", "CAN_BCM"], [335, 9, 1, "", "CAN_ISOTP"], [335, 9, 1, "", "CAN_J1939"], [335, 9, 1, "", "CAN_RAW_FD_FRAMES"], [335, 9, 1, "", "CAN_RAW_JOIN_FILTERS"], [335, 12, 1, "", "CMSG_LEN"], [335, 12, 1, "", "CMSG_SPACE"], [335, 9, 1, "", "ETHERTYPE_ARP"], [335, 9, 1, "", "ETHERTYPE_IP"], [335, 9, 1, "", "ETHERTYPE_IPV6"], [335, 9, 1, "", "ETHERTYPE_VLAN"], [335, 9, 1, "", "ETH_P_ALL"], [335, 9, 1, "", "HCI_DATA_DIR"], [335, 9, 1, "", "HCI_FILTER"], [335, 9, 1, "", "HCI_TIME_STAMP"], [335, 9, 1, "", "HVSOCKET_ADDRESS_FLAG_PASSTHRU"], [335, 9, 1, "", "HVSOCKET_CONNECTED_SUSPEND"], [335, 9, 1, "", "HVSOCKET_CONNECT_TIMEOUT"], [335, 9, 1, "", "HVSOCKET_CONNECT_TIMEOUT_MAX"], [335, 9, 1, "", "HV_GUID_BROADCAST"], [335, 9, 1, "", "HV_GUID_CHILDREN"], [335, 9, 1, "", "HV_GUID_LOOPBACK"], [335, 9, 1, "", "HV_GUID_PARENT"], [335, 9, 1, "", "HV_GUID_WILDCARD"], [335, 9, 1, "", "HV_GUID_ZERO"], [335, 9, 1, "", "HV_PROTOCOL_RAW"], [335, 9, 1, "", "IOCTL_VM_SOCKETS_GET_LOCAL_CID"], [335, 9, 1, "", "LOCAL_CREDS"], [335, 9, 1, "", "LOCAL_CREDS_PERSISTENT"], [335, 9, 1, "", "PF_CAN"], [335, 9, 1, "", "PF_DIVERT"], [335, 9, 1, "", "PF_PACKET"], [335, 9, 1, "", "PF_RDS"], [335, 9, 1, "", "SCM_CREDS2"], [335, 9, 1, "", "SIO_KEEPALIVE_VALS"], [335, 9, 1, "", "SIO_LOOPBACK_FAST_PATH"], [335, 9, 1, "", "SIO_RCVALL"], [335, 9, 1, "", "SOCK_CLOEXEC"], [335, 9, 1, "", "SOCK_DGRAM"], [335, 9, 1, "", "SOCK_NONBLOCK"], [335, 9, 1, "", "SOCK_RAW"], [335, 9, 1, "", "SOCK_RDM"], [335, 9, 1, "", "SOCK_SEQPACKET"], [335, 9, 1, "", "SOCK_STREAM"], [335, 9, 1, "", "SOL_ALG"], [335, 9, 1, "", "SOL_RDS"], [335, 9, 1, "", "SOMAXCONN"], [335, 9, 1, "", "SO_INCOMING_CPU"], [335, 9, 1, "", "SocketType"], [335, 12, 1, "", "close"], [335, 12, 1, "", "create_connection"], [335, 12, 1, "", "create_server"], [335, 6, 1, "", "error"], [335, 12, 1, "", "fromfd"], [335, 12, 1, "", "fromshare"], [335, 6, 1, "", "gaierror"], [335, 12, 1, "", "getaddrinfo"], [335, 12, 1, "", "getdefaulttimeout"], [335, 12, 1, "", "getfqdn"], [335, 12, 1, "", "gethostbyaddr"], [335, 12, 1, "", "gethostbyname"], [335, 12, 1, "", "gethostbyname_ex"], [335, 12, 1, "", "gethostname"], [335, 12, 1, "", "getnameinfo"], [335, 12, 1, "", "getprotobyname"], [335, 12, 1, "", "getservbyname"], [335, 12, 1, "", "getservbyport"], [335, 12, 1, "", "has_dualstack_ipv6"], [335, 9, 1, "", "has_ipv6"], [335, 6, 1, "", "herror"], [335, 12, 1, "", "htonl"], [335, 12, 1, "", "htons"], [335, 12, 1, "", "if_indextoname"], [335, 12, 1, "", "if_nameindex"], [335, 12, 1, "", "if_nametoindex"], [335, 12, 1, "", "inet_aton"], [335, 12, 1, "", "inet_ntoa"], [335, 12, 1, "", "inet_ntop"], [335, 12, 1, "", "inet_pton"], [335, 12, 1, "", "ntohl"], [335, 12, 1, "", "ntohs"], [335, 12, 1, "", "recv_fds"], [335, 12, 1, "", "send_fds"], [335, 12, 1, "", "setdefaulttimeout"], [335, 12, 1, "", "sethostname"], [335, 11, 1, "", "socket"], [335, 12, 1, "", "socketpair"], [335, 6, 1, "", "timeout"]], "socket.socket": [[335, 8, 1, "", "accept"], [335, 8, 1, "", "bind"], [335, 8, 1, "", "close"], [335, 8, 1, "", "connect"], [335, 8, 1, "", "connect_ex"], [335, 8, 1, "", "detach"], [335, 8, 1, "", "dup"], [335, 7, 1, "", "family"], [335, 8, 1, "", "fileno"], [335, 8, 1, "", "get_inheritable"], [335, 8, 1, "", "getblocking"], [335, 8, 1, "", "getpeername"], [335, 8, 1, "", "getsockname"], [335, 8, 1, "", "getsockopt"], [335, 8, 1, "", "gettimeout"], [335, 8, 1, "", "ioctl"], [335, 8, 1, "", "listen"], [335, 8, 1, "", "makefile"], [335, 7, 1, "", "proto"], [335, 8, 1, "", "recv"], [335, 8, 1, "", "recv_into"], [335, 8, 1, "", "recvfrom"], [335, 8, 1, "", "recvfrom_into"], [335, 8, 1, "", "recvmsg"], [335, 8, 1, "", "recvmsg_into"], [335, 8, 1, "", "send"], [335, 8, 1, "", "sendall"], [335, 8, 1, "", "sendfile"], [335, 8, 1, "", "sendmsg"], [335, 8, 1, "", "sendmsg_afalg"], [335, 8, 1, "", "sendto"], [335, 8, 1, "", "set_inheritable"], [335, 8, 1, "", "setblocking"], [335, 8, 1, "", "setsockopt"], [335, 8, 1, "", "settimeout"], [335, 8, 1, "", "share"], [335, 8, 1, "", "shutdown"], [335, 7, 1, "", "type"]], "socketserver": [[336, 11, 1, "", "BaseRequestHandler"], [336, 11, 1, "", "BaseServer"], [336, 11, 1, "", "DatagramRequestHandler"], [336, 11, 1, "", "ForkingMixIn"], [336, 11, 1, "", "ForkingTCPServer"], [336, 11, 1, "", "ForkingUDPServer"], [336, 11, 1, "", "ForkingUnixDatagramServer"], [336, 11, 1, "", "ForkingUnixStreamServer"], [336, 11, 1, "", "StreamRequestHandler"], [336, 11, 1, "", "TCPServer"], [336, 11, 1, "", "ThreadingMixIn"], [336, 11, 1, "", "ThreadingTCPServer"], [336, 11, 1, "", "ThreadingUDPServer"], [336, 11, 1, "", "ThreadingUnixDatagramServer"], [336, 11, 1, "", "ThreadingUnixStreamServer"], [336, 11, 1, "", "UDPServer"], [336, 11, 1, "", "UnixDatagramServer"], [336, 11, 1, "", "UnixStreamServer"]], "socketserver.BaseRequestHandler": [[336, 7, 1, "", "client_address"], [336, 8, 1, "", "finish"], [336, 8, 1, "", "handle"], [336, 7, 1, "", "request"], [336, 7, 1, "", "server"], [336, 8, 1, "", "setup"]], "socketserver.BaseServer": [[336, 7, 1, "", "RequestHandlerClass"], [336, 7, 1, "", "address_family"], [336, 7, 1, "", "allow_reuse_address"], [336, 8, 1, "", "fileno"], [336, 8, 1, "", "finish_request"], [336, 8, 1, "", "get_request"], [336, 8, 1, "", "handle_error"], [336, 8, 1, "", "handle_request"], [336, 8, 1, "", "handle_timeout"], [336, 8, 1, "", "process_request"], [336, 7, 1, "", "request_queue_size"], [336, 8, 1, "", "serve_forever"], [336, 8, 1, "", "server_activate"], [336, 7, 1, "", "server_address"], [336, 8, 1, "", "server_bind"], [336, 8, 1, "", "server_close"], [336, 8, 1, "", "service_actions"], [336, 8, 1, "", "shutdown"], [336, 7, 1, "", "socket"], [336, 7, 1, "", "socket_type"], [336, 7, 1, "", "timeout"], [336, 8, 1, "", "verify_request"]], "socketserver.DatagramRequestHandler": [[336, 7, 1, "", "rfile"], [336, 7, 1, "", "wfile"]], "socketserver.ThreadingMixIn": [[336, 7, 1, "", "block_on_close"], [336, 7, 1, "", "daemon_threads"]], "spwd": [[337, 12, 1, "", "getspall"], [337, 12, 1, "", "getspnam"]], "sqlite3": [[338, 11, 1, "", "Blob"], [338, 11, 1, "", "Connection"], [338, 11, 1, "", "Cursor"], [338, 6, 1, "", "DataError"], [338, 6, 1, "", "DatabaseError"], [338, 6, 1, "", "Error"], [338, 6, 1, "", "IntegrityError"], [338, 6, 1, "", "InterfaceError"], [338, 6, 1, "", "InternalError"], [338, 9, 1, "", "LEGACY_TRANSACTION_CONTROL"], [338, 6, 1, "", "NotSupportedError"], [338, 6, 1, "", "OperationalError"], [338, 9, 1, "", "PARSE_COLNAMES"], [338, 9, 1, "", "PARSE_DECLTYPES"], [338, 11, 1, "", "PrepareProtocol"], [338, 6, 1, "", "ProgrammingError"], [338, 11, 1, "", "Row"], [338, 9, 1, "", "SQLITE_DBCONFIG_DEFENSIVE"], [338, 9, 1, "", "SQLITE_DBCONFIG_DQS_DDL"], [338, 9, 1, "", "SQLITE_DBCONFIG_DQS_DML"], [338, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_FKEY"], [338, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER"], [338, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION"], [338, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_QPSG"], [338, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_TRIGGER"], [338, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_VIEW"], [338, 9, 1, "", "SQLITE_DBCONFIG_LEGACY_ALTER_TABLE"], [338, 9, 1, "", "SQLITE_DBCONFIG_LEGACY_FILE_FORMAT"], [338, 9, 1, "", "SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE"], [338, 9, 1, "", "SQLITE_DBCONFIG_RESET_DATABASE"], [338, 9, 1, "", "SQLITE_DBCONFIG_TRIGGER_EQP"], [338, 9, 1, "", "SQLITE_DBCONFIG_TRUSTED_SCHEMA"], [338, 9, 1, "", "SQLITE_DBCONFIG_WRITABLE_SCHEMA"], [338, 9, 1, "", "SQLITE_DENY"], [338, 9, 1, "", "SQLITE_IGNORE"], [338, 9, 1, "", "SQLITE_OK"], [338, 6, 1, "", "Warning"], [338, 9, 1, "", "apilevel"], [338, 12, 1, "", "complete_statement"], [338, 12, 1, "", "connect"], [338, 12, 1, "", "enable_callback_tracebacks"], [338, 9, 1, "", "paramstyle"], [338, 12, 1, "", "register_adapter"], [338, 12, 1, "", "register_converter"], [338, 9, 1, "", "sqlite_version"], [338, 9, 1, "", "sqlite_version_info"], [338, 9, 1, "", "threadsafety"], [338, 9, 1, "", "version"], [338, 9, 1, "", "version_info"]], "sqlite3.Blob": [[338, 8, 1, "", "close"], [338, 8, 1, "", "read"], [338, 8, 1, "", "seek"], [338, 8, 1, "", "tell"], [338, 8, 1, "", "write"]], "sqlite3.Connection": [[338, 7, 1, "", "autocommit"], [338, 8, 1, "", "backup"], [338, 8, 1, "", "blobopen"], [338, 8, 1, "", "close"], [338, 8, 1, "", "commit"], [338, 8, 1, "", "create_aggregate"], [338, 8, 1, "", "create_collation"], [338, 8, 1, "", "create_function"], [338, 8, 1, "", "create_window_function"], [338, 8, 1, "", "cursor"], [338, 8, 1, "", "deserialize"], [338, 8, 1, "", "enable_load_extension"], [338, 8, 1, "", "execute"], [338, 8, 1, "", "executemany"], [338, 8, 1, "", "executescript"], [338, 8, 1, "", "getconfig"], [338, 8, 1, "", "getlimit"], [338, 7, 1, "", "in_transaction"], [338, 8, 1, "", "interrupt"], [338, 7, 1, "", "isolation_level"], [338, 8, 1, "", "iterdump"], [338, 8, 1, "", "load_extension"], [338, 8, 1, "", "rollback"], [338, 7, 1, "", "row_factory"], [338, 8, 1, "", "serialize"], [338, 8, 1, "", "set_authorizer"], [338, 8, 1, "", "set_progress_handler"], [338, 8, 1, "", "set_trace_callback"], [338, 8, 1, "", "setconfig"], [338, 8, 1, "", "setlimit"], [338, 7, 1, "", "text_factory"], [338, 7, 1, "", "total_changes"]], "sqlite3.Cursor": [[338, 7, 1, "", "arraysize"], [338, 8, 1, "", "close"], [338, 7, 1, "", "connection"], [338, 7, 1, "", "description"], [338, 8, 1, "", "execute"], [338, 8, 1, "", "executemany"], [338, 8, 1, "", "executescript"], [338, 8, 1, "", "fetchall"], [338, 8, 1, "", "fetchmany"], [338, 8, 1, "", "fetchone"], [338, 7, 1, "", "lastrowid"], [338, 7, 1, "", "row_factory"], [338, 7, 1, "", "rowcount"], [338, 8, 1, "", "setinputsizes"], [338, 8, 1, "", "setoutputsize"]], "sqlite3.Error": [[338, 7, 1, "", "sqlite_errorcode"], [338, 7, 1, "", "sqlite_errorname"]], "sqlite3.Row": [[338, 8, 1, "", "keys"]], "ssl": [[339, 9, 1, "", "ALERT_DESCRIPTION_HANDSHAKE_FAILURE"], [339, 9, 1, "", "ALERT_DESCRIPTION_INTERNAL_ERROR"], [339, 11, 1, "", "AlertDescription"], [339, 9, 1, "", "CERT_NONE"], [339, 9, 1, "", "CERT_OPTIONAL"], [339, 9, 1, "", "CERT_REQUIRED"], [339, 9, 1, "", "CHANNEL_BINDING_TYPES"], [339, 6, 1, "", "CertificateError"], [339, 12, 1, "", "DER_cert_to_PEM_cert"], [339, 9, 1, "", "HAS_ALPN"], [339, 9, 1, "", "HAS_ECDH"], [339, 9, 1, "", "HAS_NEVER_CHECK_COMMON_NAME"], [339, 9, 1, "", "HAS_NPN"], [339, 9, 1, "", "HAS_SNI"], [339, 9, 1, "", "HAS_SSLv2"], [339, 9, 1, "", "HAS_SSLv3"], [339, 9, 1, "", "HAS_TLSv1"], [339, 9, 1, "", "HAS_TLSv1_1"], [339, 9, 1, "", "HAS_TLSv1_2"], [339, 9, 1, "", "HAS_TLSv1_3"], [339, 11, 1, "", "MemoryBIO"], [339, 9, 1, "", "OPENSSL_VERSION"], [339, 9, 1, "", "OPENSSL_VERSION_INFO"], [339, 9, 1, "", "OPENSSL_VERSION_NUMBER"], [339, 9, 1, "", "OP_ALL"], [339, 9, 1, "", "OP_CIPHER_SERVER_PREFERENCE"], [339, 9, 1, "", "OP_ENABLE_KTLS"], [339, 9, 1, "", "OP_ENABLE_MIDDLEBOX_COMPAT"], [339, 9, 1, "", "OP_IGNORE_UNEXPECTED_EOF"], [339, 9, 1, "", "OP_LEGACY_SERVER_CONNECT"], [339, 9, 1, "", "OP_NO_COMPRESSION"], [339, 9, 1, "", "OP_NO_RENEGOTIATION"], [339, 9, 1, "", "OP_NO_SSLv2"], [339, 9, 1, "", "OP_NO_SSLv3"], [339, 9, 1, "", "OP_NO_TICKET"], [339, 9, 1, "", "OP_NO_TLSv1"], [339, 9, 1, "", "OP_NO_TLSv1_1"], [339, 9, 1, "", "OP_NO_TLSv1_2"], [339, 9, 1, "", "OP_NO_TLSv1_3"], [339, 9, 1, "", "OP_SINGLE_DH_USE"], [339, 9, 1, "", "OP_SINGLE_ECDH_USE"], [339, 11, 1, "", "Options"], [339, 12, 1, "", "PEM_cert_to_DER_cert"], [339, 9, 1, "", "PROTOCOL_SSLv23"], [339, 9, 1, "", "PROTOCOL_SSLv3"], [339, 9, 1, "", "PROTOCOL_TLS"], [339, 9, 1, "", "PROTOCOL_TLS_CLIENT"], [339, 9, 1, "", "PROTOCOL_TLS_SERVER"], [339, 9, 1, "", "PROTOCOL_TLSv1"], [339, 9, 1, "", "PROTOCOL_TLSv1_1"], [339, 9, 1, "", "PROTOCOL_TLSv1_2"], [339, 12, 1, "", "RAND_add"], [339, 12, 1, "", "RAND_bytes"], [339, 12, 1, "", "RAND_status"], [339, 6, 1, "", "SSLCertVerificationError"], [339, 11, 1, "", "SSLContext"], [339, 6, 1, "", "SSLEOFError"], [339, 6, 1, "", "SSLError"], [339, 11, 1, "", "SSLErrorNumber"], [339, 11, 1, "", "SSLObject"], [339, 11, 1, "", "SSLSession"], [339, 11, 1, "", "SSLSocket"], [339, 6, 1, "", "SSLSyscallError"], [339, 6, 1, "", "SSLWantReadError"], [339, 6, 1, "", "SSLWantWriteError"], [339, 6, 1, "", "SSLZeroReturnError"], [339, 11, 1, "", "TLSVersion"], [339, 9, 1, "", "VERIFY_ALLOW_PROXY_CERTS"], [339, 9, 1, "", "VERIFY_CRL_CHECK_CHAIN"], [339, 9, 1, "", "VERIFY_CRL_CHECK_LEAF"], [339, 9, 1, "", "VERIFY_DEFAULT"], [339, 9, 1, "", "VERIFY_X509_PARTIAL_CHAIN"], [339, 9, 1, "", "VERIFY_X509_STRICT"], [339, 9, 1, "", "VERIFY_X509_TRUSTED_FIRST"], [339, 11, 1, "", "VerifyFlags"], [339, 11, 1, "", "VerifyMode"], [339, 12, 1, "", "cert_time_to_seconds"], [339, 12, 1, "", "create_default_context"], [339, 12, 1, "", "enum_certificates"], [339, 12, 1, "", "enum_crls"], [339, 12, 1, "", "get_default_verify_paths"], [339, 12, 1, "", "get_server_certificate"]], "ssl.MemoryBIO": [[339, 7, 1, "", "eof"], [339, 7, 1, "", "pending"], [339, 8, 1, "", "read"], [339, 8, 1, "", "write"], [339, 8, 1, "", "write_eof"]], "ssl.Purpose": [[339, 9, 1, "", "CLIENT_AUTH"], [339, 9, 1, "", "SERVER_AUTH"]], "ssl.SSLCertVerificationError": [[339, 7, 1, "", "verify_code"], [339, 7, 1, "", "verify_message"]], "ssl.SSLContext": [[339, 8, 1, "", "cert_store_stats"], [339, 7, 1, "", "check_hostname"], [339, 8, 1, "", "get_ca_certs"], [339, 8, 1, "", "get_ciphers"], [339, 7, 1, "", "hostname_checks_common_name"], [339, 7, 1, "", "keylog_filename"], [339, 8, 1, "", "load_cert_chain"], [339, 8, 1, "", "load_default_certs"], [339, 8, 1, "", "load_dh_params"], [339, 8, 1, "", "load_verify_locations"], [339, 7, 1, "", "maximum_version"], [339, 7, 1, "", "minimum_version"], [339, 7, 1, "", "num_tickets"], [339, 7, 1, "", "options"], [339, 7, 1, "", "post_handshake_auth"], [339, 7, 1, "", "protocol"], [339, 7, 1, "", "security_level"], [339, 8, 1, "", "session_stats"], [339, 8, 1, "", "set_alpn_protocols"], [339, 8, 1, "", "set_ciphers"], [339, 8, 1, "", "set_default_verify_paths"], [339, 8, 1, "", "set_ecdh_curve"], [339, 8, 1, "", "set_npn_protocols"], [339, 7, 1, "", "set_servername_callback"], [339, 7, 1, "", "sni_callback"], [339, 7, 1, "", "sslobject_class"], [339, 7, 1, "", "sslsocket_class"], [339, 7, 1, "", "verify_flags"], [339, 7, 1, "", "verify_mode"], [339, 8, 1, "", "wrap_bio"], [339, 8, 1, "", "wrap_socket"]], "ssl.SSLError": [[339, 7, 1, "", "library"], [339, 7, 1, "", "reason"]], "ssl.SSLSession": [[339, 7, 1, "", "has_ticket"], [339, 7, 1, "", "id"], [339, 7, 1, "", "ticket_lifetime_hint"], [339, 7, 1, "", "time"], [339, 7, 1, "", "timeout"]], "ssl.SSLSocket": [[339, 8, 1, "", "cipher"], [339, 8, 1, "", "compression"], [339, 7, 1, "", "context"], [339, 8, 1, "", "do_handshake"], [339, 8, 1, "", "get_channel_binding"], [339, 8, 1, "", "getpeercert"], [339, 8, 1, "", "pending"], [339, 8, 1, "", "read"], [339, 8, 1, "", "selected_alpn_protocol"], [339, 8, 1, "", "selected_npn_protocol"], [339, 7, 1, "", "server_hostname"], [339, 7, 1, "", "server_side"], [339, 7, 1, "", "session"], [339, 7, 1, "", "session_reused"], [339, 8, 1, "", "shared_ciphers"], [339, 8, 1, "", "unwrap"], [339, 8, 1, "", "verify_client_post_handshake"], [339, 8, 1, "", "version"], [339, 8, 1, "", "write"]], "ssl.TLSVersion": [[339, 7, 1, "", "MAXIMUM_SUPPORTED"], [339, 7, 1, "", "MINIMUM_SUPPORTED"], [339, 7, 1, "", "SSLv3"], [339, 7, 1, "", "TLSv1"], [339, 7, 1, "", "TLSv1_1"], [339, 7, 1, "", "TLSv1_2"], [339, 7, 1, "", "TLSv1_3"]], "stat": [[340, 9, 1, "", "FILE_ATTRIBUTE_ARCHIVE"], [340, 9, 1, "", "FILE_ATTRIBUTE_COMPRESSED"], [340, 9, 1, "", "FILE_ATTRIBUTE_DEVICE"], [340, 9, 1, "", "FILE_ATTRIBUTE_DIRECTORY"], [340, 9, 1, "", "FILE_ATTRIBUTE_ENCRYPTED"], [340, 9, 1, "", "FILE_ATTRIBUTE_HIDDEN"], [340, 9, 1, "", "FILE_ATTRIBUTE_INTEGRITY_STREAM"], [340, 9, 1, "", "FILE_ATTRIBUTE_NORMAL"], [340, 9, 1, "", "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"], [340, 9, 1, "", "FILE_ATTRIBUTE_NO_SCRUB_DATA"], [340, 9, 1, "", "FILE_ATTRIBUTE_OFFLINE"], [340, 9, 1, "", "FILE_ATTRIBUTE_READONLY"], [340, 9, 1, "", "FILE_ATTRIBUTE_REPARSE_POINT"], [340, 9, 1, "", "FILE_ATTRIBUTE_SPARSE_FILE"], [340, 9, 1, "", "FILE_ATTRIBUTE_SYSTEM"], [340, 9, 1, "", "FILE_ATTRIBUTE_TEMPORARY"], [340, 9, 1, "", "FILE_ATTRIBUTE_VIRTUAL"], [340, 9, 1, "", "IO_REPARSE_TAG_APPEXECLINK"], [340, 9, 1, "", "IO_REPARSE_TAG_MOUNT_POINT"], [340, 9, 1, "", "IO_REPARSE_TAG_SYMLINK"], [340, 9, 1, "", "SF_APPEND"], [340, 9, 1, "", "SF_ARCHIVED"], [340, 9, 1, "", "SF_IMMUTABLE"], [340, 9, 1, "", "SF_NOUNLINK"], [340, 9, 1, "", "SF_SNAPSHOT"], [340, 9, 1, "", "ST_ATIME"], [340, 9, 1, "", "ST_CTIME"], [340, 9, 1, "", "ST_DEV"], [340, 9, 1, "", "ST_GID"], [340, 9, 1, "", "ST_INO"], [340, 9, 1, "", "ST_MODE"], [340, 9, 1, "", "ST_MTIME"], [340, 9, 1, "", "ST_NLINK"], [340, 9, 1, "", "ST_SIZE"], [340, 9, 1, "", "ST_UID"], [340, 9, 1, "", "S_ENFMT"], [340, 9, 1, "", "S_IEXEC"], [340, 9, 1, "", "S_IFBLK"], [340, 9, 1, "", "S_IFCHR"], [340, 9, 1, "", "S_IFDIR"], [340, 9, 1, "", "S_IFDOOR"], [340, 9, 1, "", "S_IFIFO"], [340, 9, 1, "", "S_IFLNK"], [340, 12, 1, "", "S_IFMT"], [340, 9, 1, "", "S_IFPORT"], [340, 9, 1, "", "S_IFREG"], [340, 9, 1, "", "S_IFSOCK"], [340, 9, 1, "", "S_IFWHT"], [340, 12, 1, "", "S_IMODE"], [340, 9, 1, "", "S_IREAD"], [340, 9, 1, "", "S_IRGRP"], [340, 9, 1, "", "S_IROTH"], [340, 9, 1, "", "S_IRUSR"], [340, 9, 1, "", "S_IRWXG"], [340, 9, 1, "", "S_IRWXO"], [340, 9, 1, "", "S_IRWXU"], [340, 12, 1, "", "S_ISBLK"], [340, 12, 1, "", "S_ISCHR"], [340, 12, 1, "", "S_ISDIR"], [340, 12, 1, "", "S_ISDOOR"], [340, 12, 1, "", "S_ISFIFO"], [340, 9, 1, "", "S_ISGID"], [340, 12, 1, "", "S_ISLNK"], [340, 12, 1, "", "S_ISPORT"], [340, 12, 1, "", "S_ISREG"], [340, 12, 1, "", "S_ISSOCK"], [340, 9, 1, "", "S_ISUID"], [340, 9, 1, "", "S_ISVTX"], [340, 12, 1, "", "S_ISWHT"], [340, 9, 1, "", "S_IWGRP"], [340, 9, 1, "", "S_IWOTH"], [340, 9, 1, "", "S_IWRITE"], [340, 9, 1, "", "S_IWUSR"], [340, 9, 1, "", "S_IXGRP"], [340, 9, 1, "", "S_IXOTH"], [340, 9, 1, "", "S_IXUSR"], [340, 9, 1, "", "UF_APPEND"], [340, 9, 1, "", "UF_COMPRESSED"], [340, 9, 1, "", "UF_HIDDEN"], [340, 9, 1, "", "UF_IMMUTABLE"], [340, 9, 1, "", "UF_NODUMP"], [340, 9, 1, "", "UF_NOUNLINK"], [340, 9, 1, "", "UF_OPAQUE"], [340, 12, 1, "", "filemode"]], "statistics": [[341, 11, 1, "", "NormalDist"], [341, 6, 1, "", "StatisticsError"], [341, 12, 1, "", "correlation"], [341, 12, 1, "", "covariance"], [341, 12, 1, "", "fmean"], [341, 12, 1, "", "geometric_mean"], [341, 12, 1, "", "harmonic_mean"], [341, 12, 1, "", "linear_regression"], [341, 12, 1, "", "mean"], [341, 12, 1, "", "median"], [341, 12, 1, "", "median_grouped"], [341, 12, 1, "", "median_high"], [341, 12, 1, "", "median_low"], [341, 12, 1, "", "mode"], [341, 12, 1, "", "multimode"], [341, 12, 1, "", "pstdev"], [341, 12, 1, "", "pvariance"], [341, 12, 1, "", "quantiles"], [341, 12, 1, "", "stdev"], [341, 12, 1, "", "variance"]], "statistics.NormalDist": [[341, 8, 1, "", "cdf"], [341, 8, 1, "", "from_samples"], [341, 8, 1, "", "inv_cdf"], [341, 7, 1, "", "mean"], [341, 7, 1, "", "median"], [341, 7, 1, "", "mode"], [341, 8, 1, "", "overlap"], [341, 8, 1, "", "pdf"], [341, 8, 1, "", "quantiles"], [341, 8, 1, "", "samples"], [341, 7, 1, "", "stdev"], [341, 7, 1, "", "variance"], [341, 8, 1, "", "zscore"]], "str": [[342, 8, 1, "", "capitalize"], [342, 8, 1, "", "casefold"], [342, 8, 1, "", "center"], [342, 8, 1, "", "count"], [342, 8, 1, "", "encode"], [342, 8, 1, "", "endswith"], [342, 8, 1, "", "expandtabs"], [342, 8, 1, "", "find"], [342, 8, 1, "", "format"], [342, 8, 1, "", "format_map"], [342, 8, 1, "", "index"], [342, 8, 1, "", "isalnum"], [342, 8, 1, "", "isalpha"], [342, 8, 1, "", "isascii"], [342, 8, 1, "", "isdecimal"], [342, 8, 1, "", "isdigit"], [342, 8, 1, "", "isidentifier"], [342, 8, 1, "", "islower"], [342, 8, 1, "", "isnumeric"], [342, 8, 1, "", "isprintable"], [342, 8, 1, "", "isspace"], [342, 8, 1, "", "istitle"], [342, 8, 1, "", "isupper"], [342, 8, 1, "", "join"], [342, 8, 1, "", "ljust"], [342, 8, 1, "", "lower"], [342, 8, 1, "", "lstrip"], [342, 8, 1, "", "maketrans"], [342, 8, 1, "", "partition"], [342, 8, 1, "", "removeprefix"], [342, 8, 1, "", "removesuffix"], [342, 8, 1, "", "replace"], [342, 8, 1, "", "rfind"], [342, 8, 1, "", "rindex"], [342, 8, 1, "", "rjust"], [342, 8, 1, "", "rpartition"], [342, 8, 1, "", "rsplit"], [342, 8, 1, "", "rstrip"], [342, 8, 1, "", "split"], [342, 8, 1, "", "splitlines"], [342, 8, 1, "", "startswith"], [342, 8, 1, "", "strip"], [342, 8, 1, "", "swapcase"], [342, 8, 1, "", "title"], [342, 8, 1, "", "translate"], [342, 8, 1, "", "upper"], [342, 8, 1, "", "zfill"]], "string": [[343, 11, 1, "", "Formatter"], [343, 11, 1, "", "Template"], [343, 9, 1, "", "ascii_letters"], [343, 9, 1, "", "ascii_lowercase"], [343, 9, 1, "", "ascii_uppercase"], [343, 12, 1, "", "capwords"], [343, 9, 1, "", "digits"], [343, 9, 1, "", "hexdigits"], [343, 9, 1, "", "octdigits"], [343, 9, 1, "", "printable"], [343, 9, 1, "", "punctuation"], [343, 9, 1, "", "whitespace"]], "string.Formatter": [[343, 8, 1, "", "check_unused_args"], [343, 8, 1, "", "convert_field"], [343, 8, 1, "", "format"], [343, 8, 1, "", "format_field"], [343, 8, 1, "", "get_field"], [343, 8, 1, "", "get_value"], [343, 8, 1, "", "parse"], [343, 8, 1, "", "vformat"]], "string.Template": [[343, 8, 1, "", "get_identifiers"], [343, 8, 1, "", "is_valid"], [343, 8, 1, "", "safe_substitute"], [343, 8, 1, "", "substitute"], [343, 7, 1, "", "template"]], "stringprep": [[344, 12, 1, "", "in_table_a1"], [344, 12, 1, "", "in_table_b1"], [344, 12, 1, "", "in_table_c11"], [344, 12, 1, "", "in_table_c11_c12"], [344, 12, 1, "", "in_table_c12"], [344, 12, 1, "", "in_table_c21"], [344, 12, 1, "", "in_table_c21_c22"], [344, 12, 1, "", "in_table_c22"], [344, 12, 1, "", "in_table_c3"], [344, 12, 1, "", "in_table_c4"], [344, 12, 1, "", "in_table_c5"], [344, 12, 1, "", "in_table_c6"], [344, 12, 1, "", "in_table_c7"], [344, 12, 1, "", "in_table_c8"], [344, 12, 1, "", "in_table_c9"], [344, 12, 1, "", "in_table_d1"], [344, 12, 1, "", "in_table_d2"], [344, 12, 1, "", "map_table_b2"], [344, 12, 1, "", "map_table_b3"]], "struct": [[345, 11, 1, "", "Struct"], [345, 12, 1, "", "calcsize"], [345, 6, 1, "", "error"], [345, 12, 1, "", "iter_unpack"], [345, 12, 1, "", "pack"], [345, 12, 1, "", "pack_into"], [345, 12, 1, "", "unpack"], [345, 12, 1, "", "unpack_from"]], "struct.Struct": [[345, 7, 1, "", "format"], [345, 8, 1, "", "iter_unpack"], [345, 8, 1, "", "pack"], [345, 8, 1, "", "pack_into"], [345, 7, 1, "", "size"], [345, 8, 1, "", "unpack"], [345, 8, 1, "", "unpack_from"]], "subprocess": [[346, 9, 1, "", "ABOVE_NORMAL_PRIORITY_CLASS"], [346, 9, 1, "", "BELOW_NORMAL_PRIORITY_CLASS"], [346, 9, 1, "", "CREATE_BREAKAWAY_FROM_JOB"], [346, 9, 1, "", "CREATE_DEFAULT_ERROR_MODE"], [346, 9, 1, "", "CREATE_NEW_CONSOLE"], [346, 9, 1, "", "CREATE_NEW_PROCESS_GROUP"], [346, 9, 1, "", "CREATE_NO_WINDOW"], [346, 6, 1, "", "CalledProcessError"], [346, 11, 1, "", "CompletedProcess"], [346, 9, 1, "", "DETACHED_PROCESS"], [346, 9, 1, "", "DEVNULL"], [346, 9, 1, "", "HIGH_PRIORITY_CLASS"], [346, 9, 1, "", "IDLE_PRIORITY_CLASS"], [346, 9, 1, "", "NORMAL_PRIORITY_CLASS"], [346, 9, 1, "", "PIPE"], [346, 11, 1, "", "Popen"], [346, 9, 1, "", "REALTIME_PRIORITY_CLASS"], [346, 9, 1, "", "STARTF_USESHOWWINDOW"], [346, 9, 1, "", "STARTF_USESTDHANDLES"], [346, 11, 1, "", "STARTUPINFO"], [346, 9, 1, "", "STDOUT"], [346, 9, 1, "", "STD_ERROR_HANDLE"], [346, 9, 1, "", "STD_INPUT_HANDLE"], [346, 9, 1, "", "STD_OUTPUT_HANDLE"], [346, 9, 1, "", "SW_HIDE"], [346, 6, 1, "", "SubprocessError"], [346, 6, 1, "", "TimeoutExpired"], [346, 12, 1, "", "call"], [346, 12, 1, "", "check_call"], [346, 12, 1, "", "check_output"], [346, 12, 1, "", "getoutput"], [346, 12, 1, "", "getstatusoutput"], [346, 12, 1, "", "run"]], "subprocess.CalledProcessError": [[346, 7, 1, "", "cmd"], [346, 7, 1, "", "output"], [346, 7, 1, "", "returncode"], [346, 7, 1, "", "stderr"], [346, 7, 1, "", "stdout"]], "subprocess.CompletedProcess": [[346, 7, 1, "", "args"], [346, 8, 1, "", "check_returncode"], [346, 7, 1, "", "returncode"], [346, 7, 1, "", "stderr"], [346, 7, 1, "", "stdout"]], "subprocess.Popen": [[346, 7, 1, "", "args"], [346, 8, 1, "", "communicate"], [346, 8, 1, "", "kill"], [346, 7, 1, "", "pid"], [346, 8, 1, "", "poll"], [346, 7, 1, "", "returncode"], [346, 8, 1, "", "send_signal"], [346, 7, 1, "", "stderr"], [346, 7, 1, "", "stdin"], [346, 7, 1, "", "stdout"], [346, 8, 1, "", "terminate"], [346, 8, 1, "", "wait"]], "subprocess.STARTUPINFO": [[346, 7, 1, "", "dwFlags"], [346, 7, 1, "", "hStdError"], [346, 7, 1, "", "hStdInput"], [346, 7, 1, "", "hStdOutput"], [346, 7, 1, "", "lpAttributeList"], [346, 7, 1, "", "wShowWindow"]], "subprocess.TimeoutExpired": [[346, 7, 1, "", "cmd"], [346, 7, 1, "", "output"], [346, 7, 1, "", "stderr"], [346, 7, 1, "", "stdout"], [346, 7, 1, "", "timeout"]], "sunau": [[347, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G721"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G722"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_3"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_5"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_ALAW_8"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_DOUBLE"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_FLOAT"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_16"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_24"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_32"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_8"], [347, 9, 1, "", "AUDIO_FILE_ENCODING_MULAW_8"], [347, 9, 1, "", "AUDIO_FILE_MAGIC"], [347, 6, 1, "", "Error"], [347, 12, 1, "", "open"]], "sunau.AU_read": [[347, 8, 1, "", "close"], [347, 8, 1, "", "getcompname"], [347, 8, 1, "", "getcomptype"], [347, 8, 1, "", "getframerate"], [347, 8, 1, "", "getmark"], [347, 8, 1, "", "getmarkers"], [347, 8, 1, "", "getnchannels"], [347, 8, 1, "", "getnframes"], [347, 8, 1, "", "getparams"], [347, 8, 1, "", "getsampwidth"], [347, 8, 1, "", "readframes"], [347, 8, 1, "", "rewind"], [347, 8, 1, "", "setpos"], [347, 8, 1, "", "tell"]], "sunau.AU_write": [[347, 8, 1, "", "close"], [347, 8, 1, "", "setcomptype"], [347, 8, 1, "", "setframerate"], [347, 8, 1, "", "setnchannels"], [347, 8, 1, "", "setnframes"], [347, 8, 1, "", "setparams"], [347, 8, 1, "", "setsampwidth"], [347, 8, 1, "", "tell"], [347, 8, 1, "", "writeframes"], [347, 8, 1, "", "writeframesraw"]], "symtable": [[349, 11, 1, "", "Class"], [349, 11, 1, "", "Function"], [349, 11, 1, "", "Symbol"], [349, 11, 1, "", "SymbolTable"], [349, 12, 1, "", "symtable"]], "symtable.Class": [[349, 8, 1, "", "get_methods"]], "symtable.Function": [[349, 8, 1, "", "get_frees"], [349, 8, 1, "", "get_globals"], [349, 8, 1, "", "get_locals"], [349, 8, 1, "", "get_nonlocals"], [349, 8, 1, "", "get_parameters"]], "symtable.Symbol": [[349, 8, 1, "", "get_name"], [349, 8, 1, "", "get_namespace"], [349, 8, 1, "", "get_namespaces"], [349, 8, 1, "", "is_annotated"], [349, 8, 1, "", "is_assigned"], [349, 8, 1, "", "is_declared_global"], [349, 8, 1, "", "is_free"], [349, 8, 1, "", "is_global"], [349, 8, 1, "", "is_imported"], [349, 8, 1, "", "is_local"], [349, 8, 1, "", "is_namespace"], [349, 8, 1, "", "is_nonlocal"], [349, 8, 1, "", "is_parameter"], [349, 8, 1, "", "is_referenced"]], "symtable.SymbolTable": [[349, 8, 1, "", "get_children"], [349, 8, 1, "", "get_id"], [349, 8, 1, "", "get_identifiers"], [349, 8, 1, "", "get_lineno"], [349, 8, 1, "", "get_name"], [349, 8, 1, "", "get_symbols"], [349, 8, 1, "", "get_type"], [349, 8, 1, "", "has_children"], [349, 8, 1, "", "is_nested"], [349, 8, 1, "", "is_optimized"], [349, 8, 1, "", "lookup"]], "sys": [[350, 9, 1, "", "__breakpointhook__"], [350, 9, 1, "", "__displayhook__"], [350, 9, 1, "", "__excepthook__"], [350, 9, 1, "", "__interactivehook__"], [350, 9, 1, "", "__stderr__"], [350, 9, 1, "", "__stdin__"], [350, 9, 1, "", "__stdout__"], [350, 9, 1, "", "__unraisablehook__"], [350, 12, 1, "", "_clear_type_cache"], [350, 12, 1, "", "_current_exceptions"], [350, 12, 1, "", "_current_frames"], [350, 12, 1, "", "_debugmallocstats"], [350, 9, 1, "", "_emscripten_info"], [350, 12, 1, "", "_enablelegacywindowsfsencoding"], [350, 12, 1, "", "_getframe"], [350, 12, 1, "", "_getframemodulename"], [350, 9, 1, "", "_xoptions"], [350, 9, 1, "", "abiflags"], [350, 12, 1, "", "activate_stack_trampoline"], [350, 12, 1, "", "addaudithook"], [350, 9, 1, "", "api_version"], [350, 9, 1, "", "argv"], [350, 12, 1, "", "audit"], [350, 9, 1, "", "base_exec_prefix"], [350, 9, 1, "", "base_prefix"], [350, 12, 1, "", "breakpointhook"], [350, 9, 1, "", "builtin_module_names"], [350, 9, 1, "", "byteorder"], [350, 12, 1, "", "call_tracing"], [350, 9, 1, "", "copyright"], [350, 12, 1, "", "deactivate_stack_trampoline"], [350, 12, 1, "", "displayhook"], [350, 9, 1, "", "dllhandle"], [350, 9, 1, "", "dont_write_bytecode"], [350, 12, 1, "", "exc_info"], [350, 12, 1, "", "excepthook"], [350, 12, 1, "", "exception"], [350, 9, 1, "", "exec_prefix"], [350, 9, 1, "", "executable"], [350, 12, 1, "", "exit"], [350, 9, 1, "", "flags"], [350, 9, 1, "", "float_info"], [350, 9, 1, "", "float_repr_style"], [350, 12, 1, "", "get_asyncgen_hooks"], [350, 12, 1, "", "get_coroutine_origin_tracking_depth"], [350, 12, 1, "", "get_int_max_str_digits"], [350, 12, 1, "", "getallocatedblocks"], [350, 12, 1, "", "getandroidapilevel"], [350, 12, 1, "", "getdefaultencoding"], [350, 12, 1, "", "getdlopenflags"], [350, 12, 1, "", "getfilesystemencodeerrors"], [350, 12, 1, "", "getfilesystemencoding"], [350, 12, 1, "", "getprofile"], [350, 12, 1, "", "getrecursionlimit"], [350, 12, 1, "", "getrefcount"], [350, 12, 1, "", "getsizeof"], [350, 12, 1, "", "getswitchinterval"], [350, 12, 1, "", "gettrace"], [350, 12, 1, "", "getunicodeinternedsize"], [350, 12, 1, "", "getwindowsversion"], [350, 9, 1, "", "hash_info"], [350, 9, 1, "", "hexversion"], [350, 9, 1, "", "implementation"], [350, 9, 1, "", "int_info"], [350, 12, 1, "", "intern"], [350, 12, 1, "", "is_finalizing"], [350, 12, 1, "", "is_stack_trampoline_active"], [350, 9, 1, "", "last_exc"], [350, 9, 1, "", "last_traceback"], [350, 9, 1, "", "last_type"], [350, 9, 1, "", "last_value"], [350, 9, 1, "", "maxsize"], [350, 9, 1, "", "maxunicode"], [350, 9, 1, "", "meta_path"], [350, 9, 1, "", "modules"], [351, 10, 0, "-", "monitoring"], [350, 9, 1, "", "orig_argv"], [350, 9, 1, "", "path"], [350, 9, 1, "", "path_hooks"], [350, 9, 1, "", "path_importer_cache"], [350, 9, 1, "", "platform"], [350, 9, 1, "", "platlibdir"], [350, 9, 1, "", "prefix"], [350, 9, 1, "", "ps1"], [350, 9, 1, "", "ps2"], [350, 9, 1, "", "pycache_prefix"], [350, 12, 1, "", "set_asyncgen_hooks"], [350, 12, 1, "", "set_coroutine_origin_tracking_depth"], [350, 12, 1, "", "set_int_max_str_digits"], [350, 12, 1, "", "setdlopenflags"], [350, 12, 1, "", "setprofile"], [350, 12, 1, "", "setrecursionlimit"], [350, 12, 1, "", "setswitchinterval"], [350, 12, 1, "", "settrace"], [350, 9, 1, "", "stderr"], [350, 9, 1, "", "stdin"], [350, 9, 1, "", "stdlib_module_names"], [350, 9, 1, "", "stdout"], [350, 9, 1, "", "thread_info"], [350, 9, 1, "", "tracebacklimit"], [350, 12, 1, "", "unraisablehook"], [350, 9, 1, "", "version"], [350, 9, 1, "", "version_info"], [350, 9, 1, "", "warnoptions"], [350, 9, 1, "", "winver"]], "sys._emscripten_info": [[350, 7, 1, "", "emscripten_version"], [350, 7, 1, "", "pthreads"], [350, 7, 1, "", "runtime"], [350, 7, 1, "", "shared_memory"]], "sys.flags": [[350, 7, 1, "", "bytes_warning"], [350, 7, 1, "", "debug"], [350, 7, 1, "", "dev_mode"], [350, 7, 1, "", "dont_write_bytecode"], [350, 7, 1, "", "hash_randomization"], [350, 7, 1, "", "ignore_environment"], [350, 7, 1, "", "inspect"], [350, 7, 1, "", "int_max_str_digits"], [350, 7, 1, "", "interactive"], [350, 7, 1, "", "isolated"], [350, 7, 1, "", "no_site"], [350, 7, 1, "", "no_user_site"], [350, 7, 1, "", "optimize"], [350, 7, 1, "", "quiet"], [350, 7, 1, "", "safe_path"], [350, 7, 1, "", "utf8_mode"], [350, 7, 1, "", "verbose"], [350, 7, 1, "", "warn_default_encoding"]], "sys.float_info": [[350, 7, 1, "", "dig"], [350, 7, 1, "", "epsilon"], [350, 7, 1, "", "mant_dig"], [350, 7, 1, "", "max"], [350, 7, 1, "", "max_10_exp"], [350, 7, 1, "", "max_exp"], [350, 7, 1, "", "min"], [350, 7, 1, "", "min_10_exp"], [350, 7, 1, "", "min_exp"], [350, 7, 1, "", "radix"], [350, 7, 1, "", "rounds"]], "sys.hash_info": [[350, 7, 1, "", "algorithm"], [350, 7, 1, "", "hash_bits"], [350, 7, 1, "", "imag"], [350, 7, 1, "", "inf"], [350, 7, 1, "", "modulus"], [350, 7, 1, "", "nan"], [350, 7, 1, "", "seed_bits"], [350, 7, 1, "", "width"]], "sys.int_info": [[350, 7, 1, "", "bits_per_digit"], [350, 7, 1, "", "default_max_str_digits"], [350, 7, 1, "", "sizeof_digit"], [350, 7, 1, "", "str_digits_check_threshold"]], "sys.monitoring": [[351, 9, 1, "", "DISABLE"], [351, 9, 1, "", "MISSING"], [351, 12, 1, "", "free_tool_id"], [351, 12, 1, "", "get_events"], [351, 12, 1, "", "get_local_events"], [351, 12, 1, "", "get_tool"], [351, 12, 1, "", "register_callback"], [351, 12, 1, "", "restart_events"], [351, 12, 1, "", "set_events"], [351, 12, 1, "", "set_local_events"], [351, 12, 1, "", "use_tool_id"]], "sys.thread_info": [[350, 7, 1, "", "lock"], [350, 7, 1, "", "name"], [350, 7, 1, "", "version"]], "sysconfig": [[353, 12, 1, "", "_get_preferred_schemes"], [353, 12, 1, "", "get_config_h_filename"], [353, 12, 1, "", "get_config_var"], [353, 12, 1, "", "get_config_vars"], [353, 12, 1, "", "get_default_scheme"], [353, 12, 1, "", "get_makefile_filename"], [353, 12, 1, "", "get_path"], [353, 12, 1, "", "get_path_names"], [353, 12, 1, "", "get_paths"], [353, 12, 1, "", "get_platform"], [353, 12, 1, "", "get_preferred_scheme"], [353, 12, 1, "", "get_python_version"], [353, 12, 1, "", "get_scheme_names"], [353, 12, 1, "", "is_python_build"], [353, 12, 1, "", "parse_config_h"]], "syslog": [[354, 12, 1, "", "closelog"], [354, 12, 1, "", "openlog"], [354, 12, 1, "", "setlogmask"], [354, 12, 1, "", "syslog"]], "tabnanny": [[355, 6, 1, "", "NannyNag"], [355, 12, 1, "", "check"], [355, 9, 1, "", "filename_only"], [355, 12, 1, "", "process_tokens"], [355, 9, 1, "", "verbose"]], "tarfile": [[356, 9, 1, "", "AREGTYPE"], [356, 6, 1, "", "AbsoluteLinkError"], [356, 6, 1, "", "AbsolutePathError"], [356, 9, 1, "", "BLKTYPE"], [356, 9, 1, "", "CHRTYPE"], [356, 9, 1, "", "CONTTYPE"], [356, 6, 1, "", "CompressionError"], [356, 9, 1, "", "DEFAULT_FORMAT"], [356, 9, 1, "", "DIRTYPE"], [356, 9, 1, "", "ENCODING"], [356, 6, 1, "", "ExtractError"], [356, 9, 1, "", "FIFOTYPE"], [356, 6, 1, "", "FilterError"], [356, 9, 1, "", "GNUTYPE_LONGLINK"], [356, 9, 1, "", "GNUTYPE_LONGNAME"], [356, 9, 1, "", "GNUTYPE_SPARSE"], [356, 9, 1, "", "GNU_FORMAT"], [356, 6, 1, "", "HeaderError"], [356, 9, 1, "", "LNKTYPE"], [356, 6, 1, "", "LinkOutsideDestinationError"], [356, 6, 1, "", "OutsideDestinationError"], [356, 9, 1, "", "PAX_FORMAT"], [356, 9, 1, "", "REGTYPE"], [356, 6, 1, "", "ReadError"], [356, 9, 1, "", "SYMTYPE"], [356, 6, 1, "", "SpecialFileError"], [356, 6, 1, "", "StreamError"], [356, 6, 1, "", "TarError"], [356, 11, 1, "", "TarFile"], [356, 11, 1, "", "TarInfo"], [356, 9, 1, "", "USTAR_FORMAT"], [356, 12, 1, "", "data_filter"], [356, 12, 1, "", "fully_trusted_filter"], [356, 12, 1, "", "is_tarfile"], [356, 12, 1, "", "open"], [356, 12, 1, "", "tar_filter"], [356, 14, 1, "cmdoption-tarfile-create", "--create"], [356, 14, 1, "cmdoption-tarfile-extract", "--extract"], [356, 14, 1, "cmdoption-tarfile-filter", "--filter"], [356, 14, 1, "cmdoption-tarfile-list", "--list"], [356, 14, 1, "cmdoption-tarfile-test", "--test"], [356, 14, 1, "cmdoption-tarfile-v", "--verbose"], [356, 14, 1, "cmdoption-tarfile-c", "-c"], [356, 14, 1, "cmdoption-tarfile-e", "-e"], [356, 14, 1, "cmdoption-tarfile-l", "-l"], [356, 14, 1, "cmdoption-tarfile-t", "-t"], [356, 14, 1, "cmdoption-tarfile-v", "-v"]], "tarfile.FilterError": [[356, 7, 1, "", "tarinfo"]], "tarfile.TarFile": [[356, 8, 1, "", "add"], [356, 8, 1, "", "addfile"], [356, 8, 1, "", "close"], [356, 7, 1, "", "errorlevel"], [356, 8, 1, "", "extract"], [356, 8, 1, "", "extractall"], [356, 8, 1, "", "extractfile"], [356, 7, 1, "", "extraction_filter"], [356, 8, 1, "", "getmember"], [356, 8, 1, "", "getmembers"], [356, 8, 1, "", "getnames"], [356, 8, 1, "", "gettarinfo"], [356, 8, 1, "", "list"], [356, 8, 1, "", "next"], [356, 8, 1, "", "open"], [356, 7, 1, "", "pax_headers"]], "tarfile.TarInfo": [[356, 7, 1, "", "chksum"], [356, 7, 1, "", "devmajor"], [356, 7, 1, "", "devminor"], [356, 8, 1, "", "frombuf"], [356, 8, 1, "", "fromtarfile"], [356, 7, 1, "", "gid"], [356, 7, 1, "", "gname"], [356, 8, 1, "", "isblk"], [356, 8, 1, "", "ischr"], [356, 8, 1, "", "isdev"], [356, 8, 1, "", "isdir"], [356, 8, 1, "", "isfifo"], [356, 8, 1, "", "isfile"], [356, 8, 1, "", "islnk"], [356, 8, 1, "", "isreg"], [356, 8, 1, "", "issym"], [356, 7, 1, "", "linkname"], [356, 7, 1, "", "mode"], [356, 7, 1, "", "mtime"], [356, 7, 1, "", "name"], [356, 7, 1, "", "offset"], [356, 7, 1, "", "offset_data"], [356, 7, 1, "", "pax_headers"], [356, 8, 1, "", "replace"], [356, 7, 1, "", "size"], [356, 7, 1, "", "sparse"], [356, 8, 1, "", "tobuf"], [356, 7, 1, "", "type"], [356, 7, 1, "", "uid"], [356, 7, 1, "", "uname"]], "telnetlib": [[357, 11, 1, "", "Telnet"]], "telnetlib.Telnet": [[357, 8, 1, "", "close"], [357, 8, 1, "", "expect"], [357, 8, 1, "", "fileno"], [357, 8, 1, "", "get_socket"], [357, 8, 1, "", "interact"], [357, 8, 1, "", "msg"], [357, 8, 1, "", "mt_interact"], [357, 8, 1, "", "open"], [357, 8, 1, "", "read_all"], [357, 8, 1, "", "read_eager"], [357, 8, 1, "", "read_lazy"], [357, 8, 1, "", "read_sb_data"], [357, 8, 1, "", "read_some"], [357, 8, 1, "", "read_until"], [357, 8, 1, "", "read_very_eager"], [357, 8, 1, "", "read_very_lazy"], [357, 8, 1, "", "set_debuglevel"], [357, 8, 1, "", "set_option_negotiation_callback"], [357, 8, 1, "", "write"]], "tempfile": [[358, 12, 1, "", "NamedTemporaryFile"], [358, 11, 1, "", "SpooledTemporaryFile"], [358, 11, 1, "", "TemporaryDirectory"], [358, 12, 1, "", "TemporaryFile"], [358, 12, 1, "", "gettempdir"], [358, 12, 1, "", "gettempdirb"], [358, 12, 1, "", "gettempprefix"], [358, 12, 1, "", "gettempprefixb"], [358, 12, 1, "", "mkdtemp"], [358, 12, 1, "", "mkstemp"], [358, 12, 1, "", "mktemp"], [358, 9, 1, "", "tempdir"]], "tempfile.SpooledTemporaryFile": [[358, 8, 1, "", "rollover"]], "tempfile.TemporaryDirectory": [[358, 8, 1, "", "cleanup"], [358, 7, 1, "", "name"]], "termios": [[359, 9, 1, "", "TCSADRAIN"], [359, 9, 1, "", "TCSAFLUSH"], [359, 9, 1, "", "TCSANOW"], [359, 12, 1, "", "tcdrain"], [359, 12, 1, "", "tcflow"], [359, 12, 1, "", "tcflush"], [359, 12, 1, "", "tcgetattr"], [359, 12, 1, "", "tcgetwinsize"], [359, 12, 1, "", "tcsendbreak"], [359, 12, 1, "", "tcsetattr"], [359, 12, 1, "", "tcsetwinsize"]], "test": [[360, 10, 0, "-", "regrtest"], [360, 10, 0, "-", "support"]], "test.support": [[360, 9, 1, "", "ALWAYS_EQ"], [360, 9, 1, "", "HAVE_DOCSTRINGS"], [360, 9, 1, "", "INTERNET_TIMEOUT"], [360, 9, 1, "", "LARGEST"], [360, 9, 1, "", "LONG_TIMEOUT"], [360, 9, 1, "", "LOOPBACK_TIMEOUT"], [360, 9, 1, "", "MAX_Py_ssize_t"], [360, 9, 1, "", "MISSING_C_DOCSTRINGS"], [360, 11, 1, "", "Matcher"], [360, 9, 1, "", "NEVER_EQ"], [360, 9, 1, "", "PGO"], [360, 9, 1, "", "PIPE_MAX_SIZE"], [360, 9, 1, "", "Py_DEBUG"], [360, 6, 1, "", "ResourceDenied"], [360, 9, 1, "", "SHORT_TIMEOUT"], [360, 9, 1, "", "SMALLEST"], [360, 9, 1, "", "SOCK_MAX_SIZE"], [360, 11, 1, "", "SaveSignals"], [360, 11, 1, "", "SuppressCrashReport"], [360, 9, 1, "", "TEST_DATA_DIR"], [360, 9, 1, "", "TEST_HOME_DIR"], [360, 9, 1, "", "TEST_HTTP_URL"], [360, 9, 1, "", "TEST_SUPPORT_DIR"], [360, 6, 1, "", "TestFailed"], [360, 12, 1, "", "adjust_int_max_str_digits"], [360, 12, 1, "", "anticipate_failure"], [360, 12, 1, "", "args_from_interpreter_flags"], [360, 12, 1, "", "bigaddrspacetest"], [360, 12, 1, "", "bigmemtest"], [360, 12, 1, "", "busy_retry"], [360, 10, 0, "-", "bytecode_helper"], [360, 12, 1, "", "calcobjsize"], [360, 12, 1, "", "calcvobjsize"], [360, 12, 1, "", "captured_stderr"], [360, 12, 1, "", "captured_stdin"], [360, 12, 1, "", "captured_stdout"], [360, 12, 1, "", "catch_unraisable_exception"], [360, 12, 1, "", "check__all__"], [360, 12, 1, "", "check_disallow_instantiation"], [360, 12, 1, "", "check_free_after_iterating"], [360, 12, 1, "", "check_impl_detail"], [360, 12, 1, "", "check_syntax_error"], [360, 12, 1, "", "checksizeof"], [360, 12, 1, "", "cpython_only"], [360, 12, 1, "", "detect_api_mismatch"], [360, 12, 1, "", "disable_faulthandler"], [360, 12, 1, "", "disable_gc"], [360, 12, 1, "", "findfile"], [360, 12, 1, "", "flush_std_streams"], [360, 12, 1, "", "gc_collect"], [360, 12, 1, "", "get_attribute"], [360, 12, 1, "", "get_original_stdout"], [360, 12, 1, "", "get_pagesize"], [360, 12, 1, "", "impl_detail"], [360, 10, 0, "-", "import_helper"], [360, 9, 1, "", "is_android"], [360, 9, 1, "", "is_jython"], [360, 12, 1, "", "is_resource_enabled"], [360, 12, 1, "", "load_package_tests"], [360, 9, 1, "", "max_memuse"], [360, 12, 1, "", "missing_compiler_executable"], [360, 12, 1, "", "no_tracing"], [360, 12, 1, "", "open_urlresource"], [360, 12, 1, "", "optim_args_from_interpreter_flags"], [360, 10, 0, "-", "os_helper"], [360, 12, 1, "", "patch"], [360, 12, 1, "", "print_warning"], [360, 12, 1, "", "python_is_optimized"], [360, 9, 1, "", "real_max_memuse"], [360, 12, 1, "", "reap_children"], [360, 12, 1, "", "record_original_stdout"], [360, 12, 1, "", "refcount_test"], [360, 12, 1, "", "requires"], [360, 12, 1, "", "requires_IEEE_754"], [360, 12, 1, "", "requires_bz2"], [360, 12, 1, "", "requires_docstrings"], [360, 12, 1, "", "requires_freebsd_version"], [360, 12, 1, "", "requires_gzip"], [360, 12, 1, "", "requires_limited_api"], [360, 12, 1, "", "requires_linux_version"], [360, 12, 1, "", "requires_lzma"], [360, 12, 1, "", "requires_mac_version"], [360, 12, 1, "", "requires_resource"], [360, 12, 1, "", "requires_zlib"], [360, 12, 1, "", "run_in_subinterp"], [360, 12, 1, "", "run_with_locale"], [360, 12, 1, "", "run_with_tz"], [360, 10, 0, "-", "script_helper"], [360, 12, 1, "", "set_memlimit"], [360, 12, 1, "", "setswitchinterval"], [360, 12, 1, "", "skip_if_broken_multiprocessing_synchronize"], [360, 12, 1, "", "sleeping_retry"], [360, 10, 0, "-", "socket_helper"], [360, 12, 1, "", "sortdict"], [360, 12, 1, "", "swap_attr"], [360, 12, 1, "", "swap_item"], [360, 12, 1, "", "system_must_validate_cert"], [360, 10, 0, "-", "threading_helper"], [360, 9, 1, "", "unix_shell"], [360, 9, 1, "", "verbose"], [360, 12, 1, "", "wait_process"], [360, 10, 0, "-", "warnings_helper"], [360, 12, 1, "", "with_pymalloc"]], "test.support.Matcher": [[360, 8, 1, "", "match_value"], [360, 8, 1, "", "matches"]], "test.support.SaveSignals": [[360, 8, 1, "", "restore"], [360, 8, 1, "", "save"]], "test.support.bytecode_helper": [[360, 11, 1, "", "BytecodeTestCase"]], "test.support.bytecode_helper.BytecodeTestCase": [[360, 8, 1, "", "assertInBytecode"], [360, 8, 1, "", "assertNotInBytecode"], [360, 8, 1, "", "get_disassembly_as_string"]], "test.support.import_helper": [[360, 11, 1, "", "CleanImport"], [360, 11, 1, "", "DirsOnSysPath"], [360, 12, 1, "", "forget"], [360, 12, 1, "", "import_fresh_module"], [360, 12, 1, "", "import_module"], [360, 12, 1, "", "make_legacy_pyc"], [360, 12, 1, "", "modules_cleanup"], [360, 12, 1, "", "modules_setup"], [360, 12, 1, "", "unload"]], "test.support.os_helper": [[360, 11, 1, "", "EnvironmentVarGuard"], [360, 9, 1, "", "FS_NONASCII"], [360, 11, 1, "", "FakePath"], [360, 9, 1, "", "SAVEDCWD"], [360, 9, 1, "", "TESTFN"], [360, 9, 1, "", "TESTFN_NONASCII"], [360, 9, 1, "", "TESTFN_UNDECODABLE"], [360, 9, 1, "", "TESTFN_UNENCODABLE"], [360, 9, 1, "", "TESTFN_UNICODE"], [360, 12, 1, "", "can_symlink"], [360, 12, 1, "", "can_xattr"], [360, 12, 1, "", "change_cwd"], [360, 12, 1, "", "create_empty_file"], [360, 12, 1, "", "fd_count"], [360, 12, 1, "", "fs_is_case_insensitive"], [360, 12, 1, "", "make_bad_fd"], [360, 12, 1, "", "rmdir"], [360, 12, 1, "", "rmtree"], [360, 12, 1, "", "skip_unless_symlink"], [360, 12, 1, "", "skip_unless_xattr"], [360, 12, 1, "", "temp_cwd"], [360, 12, 1, "", "temp_dir"], [360, 12, 1, "", "temp_umask"], [360, 12, 1, "", "unlink"]], "test.support.os_helper.EnvironmentVarGuard": [[360, 8, 1, "", "set"], [360, 8, 1, "", "unset"]], "test.support.script_helper": [[360, 12, 1, "", "assert_python_failure"], [360, 12, 1, "", "assert_python_ok"], [360, 12, 1, "", "interpreter_requires_environment"], [360, 12, 1, "", "kill_python"], [360, 12, 1, "", "make_pkg"], [360, 12, 1, "", "make_script"], [360, 12, 1, "", "make_zip_pkg"], [360, 12, 1, "", "make_zip_script"], [360, 12, 1, "", "run_python_until_end"], [360, 12, 1, "", "spawn_python"]], "test.support.socket_helper": [[360, 9, 1, "", "IPV6_ENABLED"], [360, 12, 1, "", "bind_port"], [360, 12, 1, "", "bind_unix_socket"], [360, 12, 1, "", "find_unused_port"], [360, 12, 1, "", "skip_unless_bind_unix_socket"], [360, 12, 1, "", "transient_internet"]], "test.support.threading_helper": [[360, 12, 1, "", "catch_threading_exception"], [360, 12, 1, "", "join_thread"], [360, 12, 1, "", "reap_threads"], [360, 12, 1, "", "start_threads"], [360, 12, 1, "", "threading_cleanup"], [360, 12, 1, "", "threading_setup"], [360, 12, 1, "", "wait_threads_exit"]], "test.support.warnings_helper": [[360, 11, 1, "", "WarningsRecorder"], [360, 12, 1, "", "check_no_resource_warning"], [360, 12, 1, "", "check_syntax_warning"], [360, 12, 1, "", "check_warnings"], [360, 12, 1, "", "ignore_warnings"]], "textwrap": [[362, 11, 1, "", "TextWrapper"], [362, 12, 1, "", "dedent"], [362, 12, 1, "", "fill"], [362, 12, 1, "", "indent"], [362, 12, 1, "", "shorten"], [362, 12, 1, "", "wrap"]], "textwrap.TextWrapper": [[362, 7, 1, "", "break_long_words"], [362, 7, 1, "", "break_on_hyphens"], [362, 7, 1, "", "drop_whitespace"], [362, 7, 1, "", "expand_tabs"], [362, 8, 1, "", "fill"], [362, 7, 1, "", "fix_sentence_endings"], [362, 7, 1, "", "initial_indent"], [362, 7, 1, "", "max_lines"], [362, 7, 1, "", "placeholder"], [362, 7, 1, "", "replace_whitespace"], [362, 7, 1, "", "subsequent_indent"], [362, 7, 1, "", "tabsize"], [362, 7, 1, "", "width"], [362, 8, 1, "", "wrap"]], "threading": [[363, 11, 1, "", "Barrier"], [363, 11, 1, "", "BoundedSemaphore"], [363, 6, 1, "", "BrokenBarrierError"], [363, 11, 1, "", "Condition"], [363, 11, 1, "", "Event"], [363, 11, 1, "", "Lock"], [363, 11, 1, "", "RLock"], [363, 11, 1, "", "Semaphore"], [363, 9, 1, "", "TIMEOUT_MAX"], [363, 11, 1, "", "Thread"], [363, 11, 1, "", "Timer"], [363, 9, 1, "", "__excepthook__"], [363, 12, 1, "", "active_count"], [363, 12, 1, "", "current_thread"], [363, 12, 1, "", "enumerate"], [363, 12, 1, "", "excepthook"], [363, 12, 1, "", "get_ident"], [363, 12, 1, "", "get_native_id"], [363, 12, 1, "", "getprofile"], [363, 12, 1, "", "gettrace"], [363, 11, 1, "", "local"], [363, 12, 1, "", "main_thread"], [363, 12, 1, "", "setprofile"], [363, 12, 1, "", "setprofile_all_threads"], [363, 12, 1, "", "settrace"], [363, 12, 1, "", "settrace_all_threads"], [363, 12, 1, "", "stack_size"]], "threading.Barrier": [[363, 8, 1, "", "abort"], [363, 7, 1, "", "broken"], [363, 7, 1, "", "n_waiting"], [363, 7, 1, "", "parties"], [363, 8, 1, "", "reset"], [363, 8, 1, "", "wait"]], "threading.Condition": [[363, 8, 1, "", "acquire"], [363, 8, 1, "", "notify"], [363, 8, 1, "", "notify_all"], [363, 8, 1, "", "release"], [363, 8, 1, "", "wait"], [363, 8, 1, "", "wait_for"]], "threading.Event": [[363, 8, 1, "", "clear"], [363, 8, 1, "", "is_set"], [363, 8, 1, "", "set"], [363, 8, 1, "", "wait"]], "threading.Lock": [[363, 8, 1, "", "acquire"], [363, 8, 1, "", "locked"], [363, 8, 1, "", "release"]], "threading.RLock": [[363, 8, 1, "", "acquire"], [363, 8, 1, "", "release"]], "threading.Semaphore": [[363, 8, 1, "", "acquire"], [363, 8, 1, "", "release"]], "threading.Thread": [[363, 7, 1, "", "daemon"], [363, 8, 1, "", "getName"], [363, 7, 1, "", "ident"], [363, 8, 1, "", "isDaemon"], [363, 8, 1, "", "is_alive"], [363, 8, 1, "", "join"], [363, 7, 1, "", "name"], [363, 7, 1, "", "native_id"], [363, 8, 1, "", "run"], [363, 8, 1, "", "setDaemon"], [363, 8, 1, "", "setName"], [363, 8, 1, "", "start"]], "threading.Timer": [[363, 8, 1, "", "cancel"]], "time": [[364, 9, 1, "", "CLOCK_BOOTTIME"], [364, 9, 1, "", "CLOCK_HIGHRES"], [364, 9, 1, "", "CLOCK_MONOTONIC"], [364, 9, 1, "", "CLOCK_MONOTONIC_RAW"], [364, 9, 1, "", "CLOCK_PROCESS_CPUTIME_ID"], [364, 9, 1, "", "CLOCK_PROF"], [364, 9, 1, "", "CLOCK_REALTIME"], [364, 9, 1, "", "CLOCK_TAI"], [364, 9, 1, "", "CLOCK_THREAD_CPUTIME_ID"], [364, 9, 1, "", "CLOCK_UPTIME"], [364, 9, 1, "", "CLOCK_UPTIME_RAW"], [364, 9, 1, "", "altzone"], [364, 12, 1, "", "asctime"], [364, 12, 1, "", "clock_getres"], [364, 12, 1, "", "clock_gettime"], [364, 12, 1, "", "clock_gettime_ns"], [364, 12, 1, "", "clock_settime"], [364, 12, 1, "", "clock_settime_ns"], [364, 12, 1, "", "ctime"], [364, 9, 1, "", "daylight"], [364, 12, 1, "", "get_clock_info"], [364, 12, 1, "", "gmtime"], [364, 12, 1, "", "localtime"], [364, 12, 1, "", "mktime"], [364, 12, 1, "", "monotonic"], [364, 12, 1, "", "monotonic_ns"], [364, 12, 1, "", "perf_counter"], [364, 12, 1, "", "perf_counter_ns"], [364, 12, 1, "", "process_time"], [364, 12, 1, "", "process_time_ns"], [364, 12, 1, "", "pthread_getcpuclockid"], [364, 12, 1, "", "sleep"], [364, 12, 1, "", "strftime"], [364, 12, 1, "", "strptime"], [364, 11, 1, "", "struct_time"], [364, 12, 1, "", "thread_time"], [364, 12, 1, "", "thread_time_ns"], [364, 12, 1, "", "time"], [364, 12, 1, "", "time_ns"], [364, 9, 1, "", "timezone"], [364, 9, 1, "", "tzname"], [364, 12, 1, "", "tzset"]], "time.struct_time": [[364, 7, 1, "", "tm_day"], [364, 7, 1, "", "tm_gmtoff"], [364, 7, 1, "", "tm_hour"], [364, 7, 1, "", "tm_isdst"], [364, 7, 1, "", "tm_min"], [364, 7, 1, "", "tm_mon"], [364, 7, 1, "", "tm_sec"], [364, 7, 1, "", "tm_wday"], [364, 7, 1, "", "tm_yday"], [364, 7, 1, "", "tm_year"], [364, 7, 1, "", "tm_zone"]], "timeit": [[365, 11, 1, "", "Timer"], [365, 12, 1, "", "default_timer"], [365, 12, 1, "", "repeat"], [365, 12, 1, "", "timeit"], [365, 14, 1, "cmdoption-timeit-h", "--help"], [365, 14, 1, "cmdoption-timeit-n", "--number"], [365, 14, 1, "cmdoption-timeit-p", "--process"], [365, 14, 1, "cmdoption-timeit-r", "--repeat"], [365, 14, 1, "cmdoption-timeit-s", "--setup"], [365, 14, 1, "cmdoption-timeit-u", "--unit"], [365, 14, 1, "cmdoption-timeit-v", "--verbose"], [365, 14, 1, "cmdoption-timeit-h", "-h"], [365, 14, 1, "cmdoption-timeit-n", "-n"], [365, 14, 1, "cmdoption-timeit-p", "-p"], [365, 14, 1, "cmdoption-timeit-r", "-r"], [365, 14, 1, "cmdoption-timeit-s", "-s"], [365, 14, 1, "cmdoption-timeit-u", "-u"], [365, 14, 1, "cmdoption-timeit-v", "-v"]], "timeit.Timer": [[365, 8, 1, "", "autorange"], [365, 8, 1, "", "print_exc"], [365, 8, 1, "", "repeat"], [365, 8, 1, "", "timeit"]], "tkinter": [[367, 12, 1, "", "Tcl"], [367, 11, 1, "", "Tk"], [368, 10, 0, "-", "colorchooser"], [187, 10, 0, "-", "commondialog"], [369, 10, 0, "-", "dnd"], [187, 10, 0, "-", "filedialog"], [370, 10, 0, "-", "font"], [371, 10, 0, "-", "messagebox"], [372, 10, 0, "-", "scrolledtext"], [187, 10, 0, "-", "simpledialog"], [373, 10, 0, "-", "tix"], [374, 10, 0, "-", "ttk"]], "tkinter.Tk": [[367, 7, 1, "", "children"], [367, 7, 1, "", "master"], [367, 7, 1, "", "tk"]], "tkinter.colorchooser": [[368, 11, 1, "", "Chooser"], [368, 12, 1, "", "askcolor"]], "tkinter.commondialog": [[187, 11, 1, "", "Dialog"]], "tkinter.commondialog.Dialog": [[187, 8, 1, "", "show"]], "tkinter.dnd": [[369, 11, 1, "", "DndHandler"], [369, 12, 1, "", "dnd_start"]], "tkinter.dnd.DndHandler": [[369, 8, 1, "", "cancel"], [369, 8, 1, "", "finish"], [369, 8, 1, "", "on_motion"], [369, 8, 1, "", "on_release"]], "tkinter.filedialog": [[187, 11, 1, "", "Directory"], [187, 11, 1, "", "FileDialog"], [187, 11, 1, "", "LoadFileDialog"], [187, 11, 1, "", "Open"], [187, 11, 1, "", "SaveAs"], [187, 11, 1, "", "SaveFileDialog"], [187, 12, 1, "", "askdirectory"], [187, 12, 1, "", "askopenfile"], [187, 12, 1, "", "askopenfilename"], [187, 12, 1, "", "askopenfilenames"], [187, 12, 1, "", "askopenfiles"], [187, 12, 1, "", "asksaveasfile"], [187, 12, 1, "", "asksaveasfilename"]], "tkinter.filedialog.FileDialog": [[187, 8, 1, "", "cancel_command"], [187, 8, 1, "", "dirs_double_event"], [187, 8, 1, "", "dirs_select_event"], [187, 8, 1, "", "files_double_event"], [187, 8, 1, "", "files_select_event"], [187, 8, 1, "", "filter_command"], [187, 8, 1, "", "get_filter"], [187, 8, 1, "", "get_selection"], [187, 8, 1, "", "go"], [187, 8, 1, "", "ok_event"], [187, 8, 1, "", "quit"], [187, 8, 1, "", "set_filter"], [187, 8, 1, "", "set_selection"]], "tkinter.filedialog.LoadFileDialog": [[187, 8, 1, "", "ok_command"]], "tkinter.filedialog.SaveFileDialog": [[187, 8, 1, "", "ok_command"]], "tkinter.font": [[370, 9, 1, "", "BOLD"], [370, 11, 1, "", "Font"], [370, 9, 1, "", "ITALIC"], [370, 9, 1, "", "NORMAL"], [370, 9, 1, "", "ROMAN"], [370, 12, 1, "", "families"], [370, 12, 1, "", "names"], [370, 12, 1, "", "nametofont"]], "tkinter.font.Font": [[370, 8, 1, "", "actual"], [370, 8, 1, "", "cget"], [370, 8, 1, "", "config"], [370, 8, 1, "", "copy"], [370, 8, 1, "", "measure"], [370, 8, 1, "", "metrics"]], "tkinter.messagebox": [[371, 9, 1, "", "ABORT"], [371, 9, 1, "", "ABORTRETRYIGNORE"], [371, 9, 1, "", "CANCEL"], [371, 9, 1, "", "ERROR"], [371, 9, 1, "", "IGNORE"], [371, 9, 1, "", "INFO"], [371, 11, 1, "", "Message"], [371, 9, 1, "", "NO"], [371, 9, 1, "", "OK"], [371, 9, 1, "", "OKCANCEL"], [371, 9, 1, "", "QUESTION"], [371, 9, 1, "", "RETRY"], [371, 9, 1, "", "RETRYCANCEL"], [371, 9, 1, "", "WARNING"], [371, 9, 1, "", "YES"], [371, 9, 1, "", "YESNO"], [371, 9, 1, "", "YESNOCANCEL"], [371, 12, 1, "", "askokcancel"], [371, 12, 1, "", "askquestion"], [371, 12, 1, "", "askretrycancel"], [371, 12, 1, "", "askyesno"], [371, 12, 1, "", "askyesnocancel"], [371, 12, 1, "", "showerror"], [371, 12, 1, "", "showinfo"], [371, 12, 1, "", "showwarning"]], "tkinter.messagebox.Message": [[371, 8, 1, "", "show"]], "tkinter.scrolledtext": [[372, 11, 1, "", "ScrolledText"]], "tkinter.scrolledtext.ScrolledText": [[372, 7, 1, "", "frame"], [372, 7, 1, "", "vbar"]], "tkinter.simpledialog": [[187, 11, 1, "", "Dialog"], [187, 12, 1, "", "askfloat"], [187, 12, 1, "", "askinteger"], [187, 12, 1, "", "askstring"]], "tkinter.simpledialog.Dialog": [[187, 8, 1, "", "body"], [187, 8, 1, "", "buttonbox"]], "tkinter.tix": [[373, 11, 1, "", "Balloon"], [373, 11, 1, "", "ButtonBox"], [373, 11, 1, "", "CheckList"], [373, 11, 1, "", "ComboBox"], [373, 11, 1, "", "Control"], [373, 11, 1, "", "DirList"], [373, 11, 1, "", "DirSelectBox"], [373, 11, 1, "", "DirSelectDialog"], [373, 11, 1, "", "DirTree"], [373, 11, 1, "", "ExFileSelectBox"], [373, 11, 1, "", "FileEntry"], [373, 11, 1, "", "FileSelectBox"], [373, 11, 1, "", "Form"], [373, 11, 1, "", "HList"], [373, 11, 1, "", "InputOnly"], [373, 11, 1, "", "LabelEntry"], [373, 11, 1, "", "LabelFrame"], [373, 11, 1, "", "ListNoteBook"], [373, 11, 1, "", "Meter"], [373, 11, 1, "", "NoteBook"], [373, 11, 1, "", "OptionMenu"], [373, 11, 1, "", "PanedWindow"], [373, 11, 1, "", "PopupMenu"], [373, 11, 1, "", "Select"], [373, 11, 1, "", "StdButtonBox"], [373, 11, 1, "", "TList"], [373, 11, 1, "", "Tk"], [373, 11, 1, "", "Tree"], [373, 11, 1, "", "tixCommand"]], "tkinter.tix.tixCommand": [[373, 8, 1, "", "tix_addbitmapdir"], [373, 8, 1, "", "tix_cget"], [373, 8, 1, "", "tix_configure"], [373, 8, 1, "", "tix_filedialog"], [373, 8, 1, "", "tix_getbitmap"], [373, 8, 1, "", "tix_getimage"], [373, 8, 1, "", "tix_option_get"], [373, 8, 1, "", "tix_resetoptions"]], "tkinter.ttk": [[374, 11, 1, "", "Combobox"], [374, 11, 1, "", "Notebook"], [374, 11, 1, "", "Progressbar"], [374, 11, 1, "", "Spinbox"], [374, 11, 1, "", "Style"], [374, 11, 1, "", "Treeview"], [374, 11, 1, "", "Widget"]], "tkinter.ttk.Combobox": [[374, 8, 1, "", "current"], [374, 8, 1, "", "get"], [374, 8, 1, "", "set"]], "tkinter.ttk.Notebook": [[374, 8, 1, "", "add"], [374, 8, 1, "", "enable_traversal"], [374, 8, 1, "", "forget"], [374, 8, 1, "", "hide"], [374, 8, 1, "", "identify"], [374, 8, 1, "", "index"], [374, 8, 1, "", "insert"], [374, 8, 1, "", "select"], [374, 8, 1, "", "tab"], [374, 8, 1, "", "tabs"]], "tkinter.ttk.Progressbar": [[374, 8, 1, "", "start"], [374, 8, 1, "", "step"], [374, 8, 1, "", "stop"]], "tkinter.ttk.Spinbox": [[374, 8, 1, "", "get"], [374, 8, 1, "", "set"]], "tkinter.ttk.Style": [[374, 8, 1, "", "configure"], [374, 8, 1, "", "element_create"], [374, 8, 1, "", "element_names"], [374, 8, 1, "", "element_options"], [374, 8, 1, "", "layout"], [374, 8, 1, "", "lookup"], [374, 8, 1, "", "map"], [374, 8, 1, "", "theme_create"], [374, 8, 1, "", "theme_names"], [374, 8, 1, "", "theme_settings"], [374, 8, 1, "", "theme_use"]], "tkinter.ttk.Treeview": [[374, 8, 1, "", "bbox"], [374, 8, 1, "", "column"], [374, 8, 1, "", "delete"], [374, 8, 1, "", "detach"], [374, 8, 1, "", "exists"], [374, 8, 1, "", "focus"], [374, 8, 1, "", "get_children"], [374, 8, 1, "", "heading"], [374, 8, 1, "", "identify"], [374, 8, 1, "", "identify_column"], [374, 8, 1, "", "identify_element"], [374, 8, 1, "", "identify_region"], [374, 8, 1, "", "identify_row"], [374, 8, 1, "", "index"], [374, 8, 1, "", "insert"], [374, 8, 1, "", "item"], [374, 8, 1, "", "move"], [374, 8, 1, "", "next"], [374, 8, 1, "", "parent"], [374, 8, 1, "", "prev"], [374, 8, 1, "", "reattach"], [374, 8, 1, "", "see"], [374, 8, 1, "", "selection"], [374, 8, 1, "", "selection_add"], [374, 8, 1, "", "selection_remove"], [374, 8, 1, "", "selection_set"], [374, 8, 1, "", "selection_toggle"], [374, 8, 1, "", "set"], [374, 8, 1, "", "set_children"], [374, 8, 1, "", "tag_bind"], [374, 8, 1, "", "tag_configure"], [374, 8, 1, "", "tag_has"], [374, 8, 1, "", "xview"], [374, 8, 1, "", "yview"]], "tkinter.ttk.Widget": [[374, 8, 1, "", "identify"], [374, 8, 1, "", "instate"], [374, 8, 1, "", "state"]], "token": [[375, 9, 1, "", "AMPER"], [375, 9, 1, "", "AMPEREQUAL"], [375, 9, 1, "", "ASYNC"], [375, 9, 1, "", "AT"], [375, 9, 1, "", "ATEQUAL"], [375, 9, 1, "", "AWAIT"], [375, 9, 1, "", "CIRCUMFLEX"], [375, 9, 1, "", "CIRCUMFLEXEQUAL"], [375, 9, 1, "", "COLON"], [375, 9, 1, "", "COLONEQUAL"], [375, 9, 1, "", "COMMA"], [375, 9, 1, "", "COMMENT"], [375, 9, 1, "", "DEDENT"], [375, 9, 1, "", "DOT"], [375, 9, 1, "", "DOUBLESLASH"], [375, 9, 1, "", "DOUBLESLASHEQUAL"], [375, 9, 1, "", "DOUBLESTAR"], [375, 9, 1, "", "DOUBLESTAREQUAL"], [375, 9, 1, "", "ELLIPSIS"], [375, 9, 1, "", "ENCODING"], [375, 9, 1, "", "ENDMARKER"], [375, 9, 1, "", "EQEQUAL"], [375, 9, 1, "", "EQUAL"], [375, 9, 1, "", "ERRORTOKEN"], [375, 9, 1, "", "EXCLAMATION"], [375, 9, 1, "", "FSTRING_END"], [375, 9, 1, "", "FSTRING_MIDDLE"], [375, 9, 1, "", "FSTRING_START"], [375, 9, 1, "", "GREATER"], [375, 9, 1, "", "GREATEREQUAL"], [375, 9, 1, "", "INDENT"], [375, 12, 1, "", "ISEOF"], [375, 12, 1, "", "ISNONTERMINAL"], [375, 12, 1, "", "ISTERMINAL"], [375, 9, 1, "", "LBRACE"], [375, 9, 1, "", "LEFTSHIFT"], [375, 9, 1, "", "LEFTSHIFTEQUAL"], [375, 9, 1, "", "LESS"], [375, 9, 1, "", "LESSEQUAL"], [375, 9, 1, "", "LPAR"], [375, 9, 1, "", "LSQB"], [375, 9, 1, "", "MINEQUAL"], [375, 9, 1, "", "MINUS"], [375, 9, 1, "", "NAME"], [375, 9, 1, "", "NEWLINE"], [375, 9, 1, "", "NL"], [375, 9, 1, "", "NOTEQUAL"], [375, 9, 1, "", "NT_OFFSET"], [375, 9, 1, "", "NUMBER"], [375, 9, 1, "", "N_TOKENS"], [375, 9, 1, "", "OP"], [375, 9, 1, "", "PERCENT"], [375, 9, 1, "", "PERCENTEQUAL"], [375, 9, 1, "", "PLUS"], [375, 9, 1, "", "PLUSEQUAL"], [375, 9, 1, "", "RARROW"], [375, 9, 1, "", "RBRACE"], [375, 9, 1, "", "RIGHTSHIFT"], [375, 9, 1, "", "RIGHTSHIFTEQUAL"], [375, 9, 1, "", "RPAR"], [375, 9, 1, "", "RSQB"], [375, 9, 1, "", "SEMI"], [375, 9, 1, "", "SLASH"], [375, 9, 1, "", "SLASHEQUAL"], [375, 9, 1, "", "SOFT_KEYWORD"], [375, 9, 1, "", "STAR"], [375, 9, 1, "", "STAREQUAL"], [375, 9, 1, "", "STRING"], [375, 9, 1, "", "TILDE"], [375, 9, 1, "", "TYPE_COMMENT"], [375, 9, 1, "", "TYPE_IGNORE"], [375, 9, 1, "", "VBAR"], [375, 9, 1, "", "VBAREQUAL"], [375, 9, 1, "", "tok_name"]], "tokenize": [[376, 6, 1, "", "TokenError"], [376, 12, 1, "", "detect_encoding"], [376, 12, 1, "", "generate_tokens"], [376, 12, 1, "", "open"], [376, 12, 1, "", "tokenize"], [376, 12, 1, "", "untokenize"], [376, 14, 1, "cmdoption-tokenize-e", "--exact"], [376, 14, 1, "cmdoption-tokenize-h", "--help"], [376, 14, 1, "cmdoption-tokenize-e", "-e"], [376, 14, 1, "cmdoption-tokenize-h", "-h"]], "tomllib": [[377, 6, 1, "", "TOMLDecodeError"], [377, 12, 1, "", "load"], [377, 12, 1, "", "loads"]], "trace": [[378, 11, 1, "", "CoverageResults"], [378, 11, 1, "", "Trace"], [378, 14, 1, "cmdoption-trace-c", "--count"], [378, 14, 1, "cmdoption-trace-C", "--coverdir"], [378, 14, 1, "cmdoption-trace-f", "--file"], [378, 14, 1, "cmdoption-trace-help", "--help"], [378, 14, 1, "cmdoption-trace-ignore-dir", "--ignore-dir"], [378, 14, 1, "cmdoption-trace-ignore-module", "--ignore-module"], [378, 14, 1, "cmdoption-trace-l", "--listfuncs"], [378, 14, 1, "cmdoption-trace-m", "--missing"], [378, 14, 1, "cmdoption-trace-R", "--no-report"], [378, 14, 1, "cmdoption-trace-r", "--report"], [378, 14, 1, "cmdoption-trace-s", "--summary"], [378, 14, 1, "cmdoption-trace-g", "--timing"], [378, 14, 1, "cmdoption-trace-t", "--trace"], [378, 14, 1, "cmdoption-trace-T", "--trackcalls"], [378, 14, 1, "cmdoption-trace-version", "--version"], [378, 14, 1, "cmdoption-trace-C", "-C"], [378, 14, 1, "cmdoption-trace-R", "-R"], [378, 14, 1, "cmdoption-trace-T", "-T"], [378, 14, 1, "cmdoption-trace-c", "-c"], [378, 14, 1, "cmdoption-trace-f", "-f"], [378, 14, 1, "cmdoption-trace-g", "-g"], [378, 14, 1, "cmdoption-trace-l", "-l"], [378, 14, 1, "cmdoption-trace-m", "-m"], [378, 14, 1, "cmdoption-trace-r", "-r"], [378, 14, 1, "cmdoption-trace-s", "-s"], [378, 14, 1, "cmdoption-trace-t", "-t"]], "trace.CoverageResults": [[378, 8, 1, "", "update"], [378, 8, 1, "", "write_results"]], "trace.Trace": [[378, 8, 1, "", "results"], [378, 8, 1, "", "run"], [378, 8, 1, "", "runctx"], [378, 8, 1, "", "runfunc"]], "traceback": [[379, 11, 1, "", "FrameSummary"], [379, 11, 1, "", "StackSummary"], [379, 11, 1, "", "TracebackException"], [379, 12, 1, "", "clear_frames"], [379, 12, 1, "", "extract_stack"], [379, 12, 1, "", "extract_tb"], [379, 12, 1, "", "format_exc"], [379, 12, 1, "", "format_exception"], [379, 12, 1, "", "format_exception_only"], [379, 12, 1, "", "format_list"], [379, 12, 1, "", "format_stack"], [379, 12, 1, "", "format_tb"], [379, 12, 1, "", "print_exc"], [379, 12, 1, "", "print_exception"], [379, 12, 1, "", "print_last"], [379, 12, 1, "", "print_stack"], [379, 12, 1, "", "print_tb"], [426, 7, 1, "", "tb_frame"], [426, 7, 1, "", "tb_lasti"], [426, 7, 1, "", "tb_lineno"], [426, 7, 1, "", "tb_next"], [379, 12, 1, "", "walk_stack"], [379, 12, 1, "", "walk_tb"]], "traceback.FrameSummary": [[379, 7, 1, "", "filename"], [379, 7, 1, "", "line"], [379, 7, 1, "", "lineno"], [379, 7, 1, "", "name"]], "traceback.StackSummary": [[379, 8, 1, "", "extract"], [379, 8, 1, "", "format"], [379, 8, 1, "", "format_frame_summary"], [379, 8, 1, "", "from_list"]], "traceback.TracebackException": [[379, 7, 1, "", "__cause__"], [379, 7, 1, "", "__context__"], [379, 7, 1, "", "__notes__"], [379, 7, 1, "", "__suppress_context__"], [379, 7, 1, "", "end_lineno"], [379, 7, 1, "", "end_offset"], [379, 7, 1, "", "exc_type"], [379, 7, 1, "", "exceptions"], [379, 7, 1, "", "filename"], [379, 8, 1, "", "format"], [379, 8, 1, "", "format_exception_only"], [379, 8, 1, "", "from_exception"], [379, 7, 1, "", "lineno"], [379, 7, 1, "", "msg"], [379, 7, 1, "", "offset"], [379, 8, 1, "", "print"], [379, 7, 1, "", "stack"], [379, 7, 1, "", "text"]], "tracemalloc": [[380, 11, 1, "", "DomainFilter"], [380, 11, 1, "", "Filter"], [380, 11, 1, "", "Frame"], [380, 11, 1, "", "Snapshot"], [380, 11, 1, "", "Statistic"], [380, 11, 1, "", "StatisticDiff"], [380, 11, 1, "", "Trace"], [380, 11, 1, "", "Traceback"], [380, 12, 1, "", "clear_traces"], [380, 12, 1, "", "get_object_traceback"], [380, 12, 1, "", "get_traceback_limit"], [380, 12, 1, "", "get_traced_memory"], [380, 12, 1, "", "get_tracemalloc_memory"], [380, 12, 1, "", "is_tracing"], [380, 12, 1, "", "reset_peak"], [380, 12, 1, "", "start"], [380, 12, 1, "", "stop"], [380, 12, 1, "", "take_snapshot"]], "tracemalloc.DomainFilter": [[380, 7, 1, "", "domain"], [380, 7, 1, "", "inclusive"]], "tracemalloc.Filter": [[380, 7, 1, "", "all_frames"], [380, 7, 1, "", "domain"], [380, 7, 1, "", "filename_pattern"], [380, 7, 1, "", "inclusive"], [380, 7, 1, "", "lineno"]], "tracemalloc.Frame": [[380, 7, 1, "", "filename"], [380, 7, 1, "", "lineno"]], "tracemalloc.Snapshot": [[380, 8, 1, "", "compare_to"], [380, 8, 1, "", "dump"], [380, 8, 1, "", "filter_traces"], [380, 8, 1, "", "load"], [380, 8, 1, "", "statistics"], [380, 7, 1, "", "traceback_limit"], [380, 7, 1, "", "traces"]], "tracemalloc.Statistic": [[380, 7, 1, "", "count"], [380, 7, 1, "", "size"], [380, 7, 1, "", "traceback"]], "tracemalloc.StatisticDiff": [[380, 7, 1, "", "count"], [380, 7, 1, "", "count_diff"], [380, 7, 1, "", "size"], [380, 7, 1, "", "size_diff"], [380, 7, 1, "", "traceback"]], "tracemalloc.Trace": [[380, 7, 1, "", "domain"], [380, 7, 1, "", "size"], [380, 7, 1, "", "traceback"]], "tracemalloc.Traceback": [[380, 8, 1, "", "format"], [380, 7, 1, "", "total_nframe"]], "tty": [[381, 12, 1, "", "cfmakecbreak"], [381, 12, 1, "", "cfmakeraw"], [381, 12, 1, "", "setcbreak"], [381, 12, 1, "", "setraw"]], "turtle": [[382, 11, 1, "", "RawPen"], [382, 11, 1, "", "RawTurtle"], [382, 11, 1, "", "Screen"], [382, 11, 1, "", "ScrolledCanvas"], [382, 11, 1, "", "Shape"], [382, 11, 1, "", "Turtle"], [382, 11, 1, "", "TurtleScreen"], [382, 11, 1, "", "Vec2D"], [382, 12, 1, "", "addshape"], [382, 12, 1, "", "back"], [382, 12, 1, "", "backward"], [382, 12, 1, "", "begin_fill"], [382, 12, 1, "", "begin_poly"], [382, 12, 1, "", "bgcolor"], [382, 12, 1, "", "bgpic"], [382, 12, 1, "", "bk"], [382, 12, 1, "", "bye"], [382, 12, 1, "", "circle"], [382, 12, 1, "", "clear"], [382, 12, 1, "", "clearscreen"], [382, 12, 1, "", "clearstamp"], [382, 12, 1, "", "clearstamps"], [382, 12, 1, "", "clone"], [382, 12, 1, "", "color"], [382, 12, 1, "", "colormode"], [382, 12, 1, "", "degrees"], [382, 12, 1, "", "delay"], [382, 12, 1, "", "distance"], [382, 12, 1, "", "done"], [382, 12, 1, "", "dot"], [382, 12, 1, "", "down"], [382, 12, 1, "", "end_fill"], [382, 12, 1, "", "end_poly"], [382, 12, 1, "", "exitonclick"], [382, 12, 1, "", "fd"], [382, 12, 1, "", "fillcolor"], [382, 12, 1, "", "filling"], [382, 12, 1, "", "forward"], [382, 12, 1, "", "get_poly"], [382, 12, 1, "", "get_shapepoly"], [382, 12, 1, "", "getcanvas"], [382, 12, 1, "", "getpen"], [382, 12, 1, "", "getscreen"], [382, 12, 1, "", "getshapes"], [382, 12, 1, "", "getturtle"], [382, 12, 1, "", "goto"], [382, 12, 1, "", "heading"], [382, 12, 1, "", "hideturtle"], [382, 12, 1, "", "home"], [382, 12, 1, "", "ht"], [382, 12, 1, "", "isdown"], [382, 12, 1, "", "isvisible"], [382, 12, 1, "", "left"], [382, 12, 1, "", "listen"], [382, 12, 1, "", "lt"], [382, 12, 1, "", "mainloop"], [382, 12, 1, "", "mode"], [382, 12, 1, "", "numinput"], [382, 12, 1, "", "onclick"], [382, 12, 1, "", "ondrag"], [382, 12, 1, "", "onkey"], [382, 12, 1, "", "onkeypress"], [382, 12, 1, "", "onkeyrelease"], [382, 12, 1, "", "onrelease"], [382, 12, 1, "", "onscreenclick"], [382, 12, 1, "", "ontimer"], [382, 12, 1, "", "pd"], [382, 12, 1, "", "pen"], [382, 12, 1, "", "pencolor"], [382, 12, 1, "", "pendown"], [382, 12, 1, "", "pensize"], [382, 12, 1, "", "penup"], [382, 12, 1, "", "pos"], [382, 12, 1, "", "position"], [382, 12, 1, "", "pu"], [382, 12, 1, "", "radians"], [382, 12, 1, "", "register_shape"], [382, 12, 1, "", "reset"], [382, 12, 1, "", "resetscreen"], [382, 12, 1, "", "resizemode"], [382, 12, 1, "", "right"], [382, 12, 1, "", "rt"], [382, 12, 1, "", "screensize"], [382, 12, 1, "", "seth"], [382, 12, 1, "", "setheading"], [382, 12, 1, "", "setpos"], [382, 12, 1, "", "setposition"], [382, 12, 1, "", "settiltangle"], [382, 12, 1, "", "setundobuffer"], [382, 12, 1, "", "setup"], [382, 12, 1, "", "setworldcoordinates"], [382, 12, 1, "", "setx"], [382, 12, 1, "", "sety"], [382, 12, 1, "", "shape"], [382, 12, 1, "", "shapesize"], [382, 12, 1, "", "shapetransform"], [382, 12, 1, "", "shearfactor"], [382, 12, 1, "", "showturtle"], [382, 12, 1, "", "speed"], [382, 12, 1, "", "st"], [382, 12, 1, "", "stamp"], [382, 12, 1, "", "teleport"], [382, 12, 1, "", "textinput"], [382, 12, 1, "", "tilt"], [382, 12, 1, "", "tiltangle"], [382, 12, 1, "", "title"], [382, 12, 1, "", "towards"], [382, 12, 1, "", "tracer"], [382, 12, 1, "", "turtles"], [382, 12, 1, "", "turtlesize"], [382, 12, 1, "", "undo"], [382, 12, 1, "", "undobufferentries"], [382, 12, 1, "", "up"], [382, 12, 1, "", "update"], [382, 12, 1, "", "width"], [382, 12, 1, "", "window_height"], [382, 12, 1, "", "window_width"], [382, 12, 1, "", "write"], [382, 12, 1, "", "write_docstringdict"], [382, 12, 1, "", "xcor"], [382, 12, 1, "", "ycor"]], "turtle.Shape": [[382, 8, 1, "", "addcomponent"]], "types": [[383, 9, 1, "", "AsyncGeneratorType"], [383, 9, 1, "", "BuiltinFunctionType"], [383, 9, 1, "", "BuiltinMethodType"], [383, 9, 1, "", "CellType"], [383, 9, 1, "", "ClassMethodDescriptorType"], [383, 11, 1, "", "CodeType"], [383, 9, 1, "", "CoroutineType"], [383, 12, 1, "", "DynamicClassAttribute"], [383, 9, 1, "", "EllipsisType"], [383, 9, 1, "", "FrameType"], [383, 9, 1, "", "FunctionType"], [383, 9, 1, "", "GeneratorType"], [383, 11, 1, "", "GenericAlias"], [383, 9, 1, "", "GetSetDescriptorType"], [383, 9, 1, "", "LambdaType"], [383, 11, 1, "", "MappingProxyType"], [383, 9, 1, "", "MemberDescriptorType"], [383, 9, 1, "", "MethodDescriptorType"], [383, 9, 1, "", "MethodType"], [383, 9, 1, "", "MethodWrapperType"], [383, 11, 1, "", "ModuleType"], [383, 9, 1, "", "NoneType"], [383, 9, 1, "", "NotImplementedType"], [383, 11, 1, "", "SimpleNamespace"], [383, 11, 1, "", "TracebackType"], [383, 11, 1, "", "UnionType"], [383, 9, 1, "", "WrapperDescriptorType"], [383, 12, 1, "", "coroutine"], [383, 12, 1, "", "get_original_bases"], [383, 12, 1, "", "new_class"], [383, 12, 1, "", "prepare_class"], [383, 12, 1, "", "resolve_bases"]], "types.MappingProxyType": [[383, 8, 1, "", "copy"], [383, 8, 1, "", "get"], [383, 8, 1, "", "items"], [383, 8, 1, "", "keys"], [383, 8, 1, "", "values"]], "types.ModuleType": [[383, 7, 1, "", "__doc__"], [383, 7, 1, "", "__loader__"], [383, 7, 1, "", "__name__"], [383, 7, 1, "", "__package__"], [383, 7, 1, "", "__spec__"]], "typing": [[384, 11, 1, "", "AbstractSet"], [384, 9, 1, "", "Annotated"], [384, 9, 1, "", "Any"], [384, 9, 1, "", "AnyStr"], [384, 11, 1, "", "AsyncContextManager"], [384, 11, 1, "", "AsyncGenerator"], [384, 11, 1, "", "AsyncIterable"], [384, 11, 1, "", "AsyncIterator"], [384, 11, 1, "", "Awaitable"], [384, 11, 1, "", "BinaryIO"], [384, 11, 1, "", "ByteString"], [384, 9, 1, "", "Callable"], [384, 11, 1, "", "ChainMap"], [384, 9, 1, "", "ClassVar"], [384, 11, 1, "", "Collection"], [384, 9, 1, "", "Concatenate"], [384, 11, 1, "", "Container"], [384, 11, 1, "", "ContextManager"], [384, 11, 1, "", "Coroutine"], [384, 11, 1, "", "Counter"], [384, 11, 1, "", "DefaultDict"], [384, 11, 1, "", "Deque"], [384, 11, 1, "", "Dict"], [384, 9, 1, "", "Final"], [384, 11, 1, "", "ForwardRef"], [384, 11, 1, "", "FrozenSet"], [384, 11, 1, "", "Generator"], [384, 11, 1, "", "Generic"], [384, 11, 1, "", "Hashable"], [384, 11, 1, "", "IO"], [384, 11, 1, "", "ItemsView"], [384, 11, 1, "", "Iterable"], [384, 11, 1, "", "Iterator"], [384, 11, 1, "", "KeysView"], [384, 11, 1, "", "List"], [384, 9, 1, "", "Literal"], [384, 9, 1, "", "LiteralString"], [384, 11, 1, "", "Mapping"], [384, 11, 1, "", "MappingView"], [384, 11, 1, "", "Match"], [384, 11, 1, "", "MutableMapping"], [384, 11, 1, "", "MutableSequence"], [384, 11, 1, "", "MutableSet"], [384, 11, 1, "", "NamedTuple"], [384, 9, 1, "", "Never"], [384, 11, 1, "", "NewType"], [384, 9, 1, "", "NoReturn"], [384, 9, 1, "", "NotRequired"], [384, 9, 1, "", "Optional"], [384, 11, 1, "", "OrderedDict"], [384, 11, 1, "", "ParamSpec"], [384, 9, 1, "", "ParamSpecArgs"], [384, 9, 1, "", "ParamSpecKwargs"], [384, 11, 1, "", "Pattern"], [384, 11, 1, "", "Protocol"], [384, 9, 1, "", "Required"], [384, 11, 1, "", "Reversible"], [384, 9, 1, "", "Self"], [384, 11, 1, "", "Sequence"], [384, 11, 1, "", "Set"], [384, 11, 1, "", "Sized"], [384, 11, 1, "", "SupportsAbs"], [384, 11, 1, "", "SupportsBytes"], [384, 11, 1, "", "SupportsComplex"], [384, 11, 1, "", "SupportsFloat"], [384, 11, 1, "", "SupportsIndex"], [384, 11, 1, "", "SupportsInt"], [384, 11, 1, "", "SupportsRound"], [384, 9, 1, "", "TYPE_CHECKING"], [384, 11, 1, "", "Text"], [384, 11, 1, "", "TextIO"], [384, 9, 1, "", "Tuple"], [384, 11, 1, "", "Type"], [384, 9, 1, "", "TypeAlias"], [384, 11, 1, "", "TypeAliasType"], [384, 9, 1, "", "TypeGuard"], [384, 11, 1, "", "TypeVar"], [384, 11, 1, "", "TypeVarTuple"], [384, 11, 1, "", "TypedDict"], [384, 9, 1, "", "Union"], [384, 9, 1, "", "Unpack"], [384, 11, 1, "", "ValuesView"], [384, 12, 1, "", "assert_never"], [384, 12, 1, "", "assert_type"], [384, 12, 1, "", "cast"], [384, 12, 1, "", "clear_overloads"], [384, 12, 1, "", "dataclass_transform"], [384, 12, 1, "", "final"], [384, 12, 1, "", "get_args"], [384, 12, 1, "", "get_origin"], [384, 12, 1, "", "get_overloads"], [384, 12, 1, "", "get_type_hints"], [384, 12, 1, "", "is_typeddict"], [384, 12, 1, "", "no_type_check"], [384, 12, 1, "", "no_type_check_decorator"], [384, 12, 1, "", "overload"], [384, 12, 1, "", "override"], [384, 12, 1, "", "reveal_type"], [384, 12, 1, "", "runtime_checkable"], [384, 12, 1, "", "type_check_only"]], "typing.NewType": [[384, 7, 1, "", "__module__"], [384, 7, 1, "", "__name__"], [384, 7, 1, "", "__supertype__"]], "typing.ParamSpec": [[384, 7, 1, "", "__name__"], [384, 7, 1, "", "args"], [384, 7, 1, "", "kwargs"]], "typing.TypeAliasType": [[384, 7, 1, "", "__module__"], [384, 7, 1, "", "__name__"], [384, 7, 1, "", "__type_params__"], [384, 7, 1, "", "__value__"]], "typing.TypeVar": [[384, 7, 1, "", "__bound__"], [384, 7, 1, "", "__constraints__"], [384, 7, 1, "", "__contravariant__"], [384, 7, 1, "", "__covariant__"], [384, 7, 1, "", "__infer_variance__"], [384, 7, 1, "", "__name__"]], "typing.TypeVarTuple": [[384, 7, 1, "", "__name__"]], "typing.TypedDict": [[384, 7, 1, "", "__optional_keys__"], [384, 7, 1, "", "__required_keys__"], [384, 7, 1, "", "__total__"]], "unicodedata": [[385, 12, 1, "", "bidirectional"], [385, 12, 1, "", "category"], [385, 12, 1, "", "combining"], [385, 12, 1, "", "decimal"], [385, 12, 1, "", "decomposition"], [385, 12, 1, "", "digit"], [385, 12, 1, "", "east_asian_width"], [385, 12, 1, "", "is_normalized"], [385, 12, 1, "", "lookup"], [385, 12, 1, "", "mirrored"], [385, 12, 1, "", "name"], [385, 12, 1, "", "normalize"], [385, 12, 1, "", "numeric"], [385, 9, 1, "", "ucd_3_2_0"], [385, 9, 1, "", "unidata_version"]], "unittest": [[386, 11, 1, "", "FunctionTestCase"], [386, 11, 1, "", "IsolatedAsyncioTestCase"], [386, 6, 1, "", "SkipTest"], [386, 11, 1, "", "TestCase"], [386, 11, 1, "", "TestLoader"], [386, 11, 1, "", "TestResult"], [386, 11, 1, "", "TestSuite"], [386, 11, 1, "", "TextTestResult"], [386, 11, 1, "", "TextTestRunner"], [386, 12, 1, "", "addModuleCleanup"], [386, 9, 1, "", "defaultTestLoader"], [386, 12, 1, "", "doModuleCleanups"], [386, 8, 1, "", "enterModuleContext"], [386, 12, 1, "", "expectedFailure"], [386, 12, 1, "", "installHandler"], [386, 12, 1, "", "main"], [387, 10, 0, "-", "mock"], [386, 12, 1, "", "registerResult"], [386, 12, 1, "", "removeHandler"], [386, 12, 1, "", "removeResult"], [386, 12, 1, "", "skip"], [386, 12, 1, "", "skipIf"], [386, 12, 1, "", "skipUnless"], [386, 14, 1, "cmdoption-unittest-b", "--buffer"], [386, 14, 1, "cmdoption-unittest-c", "--catch"], [386, 14, 1, "cmdoption-unittest-durations", "--durations"], [386, 14, 1, "cmdoption-unittest-f", "--failfast"], [386, 14, 1, "cmdoption-unittest-locals", "--locals"], [386, 14, 1, "cmdoption-unittest-b", "-b"], [386, 14, 1, "cmdoption-unittest-c", "-c"], [386, 14, 1, "cmdoption-unittest-f", "-f"], [386, 14, 1, "cmdoption-unittest-k", "-k"]], "unittest.IsolatedAsyncioTestCase": [[386, 8, 1, "", "addAsyncCleanup"], [386, 8, 1, "", "asyncSetUp"], [386, 8, 1, "", "asyncTearDown"], [386, 8, 1, "", "enterAsyncContext"], [386, 8, 1, "", "run"]], "unittest.TestCase": [[386, 8, 1, "", "addClassCleanup"], [386, 8, 1, "", "addCleanup"], [386, 8, 1, "", "addTypeEqualityFunc"], [386, 8, 1, "", "assertAlmostEqual"], [386, 8, 1, "", "assertCountEqual"], [386, 8, 1, "", "assertDictEqual"], [386, 8, 1, "", "assertEqual"], [386, 8, 1, "", "assertFalse"], [386, 8, 1, "", "assertGreater"], [386, 8, 1, "", "assertGreaterEqual"], [386, 8, 1, "", "assertIn"], [386, 8, 1, "", "assertIs"], [386, 8, 1, "", "assertIsInstance"], [386, 8, 1, "", "assertIsNone"], [386, 8, 1, "", "assertIsNot"], [386, 8, 1, "", "assertIsNotNone"], [386, 8, 1, "", "assertLess"], [386, 8, 1, "", "assertLessEqual"], [386, 8, 1, "", "assertListEqual"], [386, 8, 1, "", "assertLogs"], [386, 8, 1, "", "assertMultiLineEqual"], [386, 8, 1, "", "assertNoLogs"], [386, 8, 1, "", "assertNotAlmostEqual"], [386, 8, 1, "", "assertNotEqual"], [386, 8, 1, "", "assertNotIn"], [386, 8, 1, "", "assertNotIsInstance"], [386, 8, 1, "", "assertNotRegex"], [386, 8, 1, "", "assertRaises"], [386, 8, 1, "", "assertRaisesRegex"], [386, 8, 1, "", "assertRegex"], [386, 8, 1, "", "assertSequenceEqual"], [386, 8, 1, "", "assertSetEqual"], [386, 8, 1, "", "assertTrue"], [386, 8, 1, "", "assertTupleEqual"], [386, 8, 1, "", "assertWarns"], [386, 8, 1, "", "assertWarnsRegex"], [386, 8, 1, "", "countTestCases"], [386, 8, 1, "", "debug"], [386, 8, 1, "", "defaultTestResult"], [386, 8, 1, "", "doClassCleanups"], [386, 8, 1, "", "doCleanups"], [386, 8, 1, "", "enterClassContext"], [386, 8, 1, "", "enterContext"], [386, 8, 1, "", "fail"], [386, 7, 1, "", "failureException"], [386, 8, 1, "", "id"], [386, 7, 1, "", "longMessage"], [386, 7, 1, "", "maxDiff"], [386, 7, 1, "", "output"], [386, 7, 1, "", "records"], [386, 8, 1, "", "run"], [386, 8, 1, "", "setUp"], [386, 8, 1, "", "setUpClass"], [386, 8, 1, "", "shortDescription"], [386, 8, 1, "", "skipTest"], [386, 8, 1, "", "subTest"], [386, 8, 1, "", "tearDown"], [386, 8, 1, "", "tearDownClass"]], "unittest.TestLoader": [[386, 8, 1, "", "discover"], [386, 7, 1, "", "errors"], [386, 8, 1, "", "getTestCaseNames"], [386, 8, 1, "", "loadTestsFromModule"], [386, 8, 1, "", "loadTestsFromName"], [386, 8, 1, "", "loadTestsFromNames"], [386, 8, 1, "", "loadTestsFromTestCase"], [386, 7, 1, "", "sortTestMethodsUsing"], [386, 7, 1, "", "suiteClass"], [386, 7, 1, "", "testMethodPrefix"], [386, 7, 1, "", "testNamePatterns"]], "unittest.TestResult": [[386, 8, 1, "", "addDuration"], [386, 8, 1, "", "addError"], [386, 8, 1, "", "addExpectedFailure"], [386, 8, 1, "", "addFailure"], [386, 8, 1, "", "addSkip"], [386, 8, 1, "", "addSubTest"], [386, 8, 1, "", "addSuccess"], [386, 8, 1, "", "addUnexpectedSuccess"], [386, 7, 1, "", "buffer"], [386, 7, 1, "", "collectedDurations"], [386, 7, 1, "", "errors"], [386, 7, 1, "", "expectedFailures"], [386, 7, 1, "", "failfast"], [386, 7, 1, "", "failures"], [386, 7, 1, "", "shouldStop"], [386, 7, 1, "", "skipped"], [386, 8, 1, "", "startTest"], [386, 8, 1, "", "startTestRun"], [386, 8, 1, "", "stop"], [386, 8, 1, "", "stopTest"], [386, 8, 1, "", "stopTestRun"], [386, 7, 1, "", "tb_locals"], [386, 7, 1, "", "testsRun"], [386, 7, 1, "", "unexpectedSuccesses"], [386, 8, 1, "", "wasSuccessful"]], "unittest.TestSuite": [[386, 8, 1, "", "__iter__"], [386, 8, 1, "", "addTest"], [386, 8, 1, "", "addTests"], [386, 8, 1, "", "countTestCases"], [386, 8, 1, "", "debug"], [386, 8, 1, "", "run"]], "unittest.TextTestRunner": [[386, 8, 1, "", "_makeResult"], [386, 8, 1, "", "run"]], "unittest.mock": [[387, 9, 1, "", "ANY"], [387, 11, 1, "", "AsyncMock"], [387, 9, 1, "", "DEFAULT"], [387, 9, 1, "", "FILTER_DIR"], [387, 11, 1, "", "MagicMock"], [387, 11, 1, "", "Mock"], [387, 11, 1, "", "NonCallableMagicMock"], [387, 11, 1, "", "NonCallableMock"], [387, 11, 1, "", "PropertyMock"], [387, 12, 1, "", "call"], [387, 12, 1, "", "create_autospec"], [387, 12, 1, "", "mock_open"], [387, 12, 1, "", "patch"], [387, 12, 1, "", "seal"], [387, 9, 1, "", "sentinel"]], "unittest.mock.AsyncMock": [[387, 8, 1, "", "assert_any_await"], [387, 8, 1, "", "assert_awaited"], [387, 8, 1, "", "assert_awaited_once"], [387, 8, 1, "", "assert_awaited_once_with"], [387, 8, 1, "", "assert_awaited_with"], [387, 8, 1, "", "assert_has_awaits"], [387, 8, 1, "", "assert_not_awaited"], [387, 7, 1, "", "await_args"], [387, 7, 1, "", "await_args_list"], [387, 7, 1, "", "await_count"], [387, 8, 1, "", "reset_mock"]], "unittest.mock.Mock": [[387, 7, 1, "", "__class__"], [387, 8, 1, "", "__dir__"], [387, 8, 1, "", "_get_child_mock"], [387, 8, 1, "", "assert_any_call"], [387, 8, 1, "", "assert_called"], [387, 8, 1, "", "assert_called_once"], [387, 8, 1, "", "assert_called_once_with"], [387, 8, 1, "", "assert_called_with"], [387, 8, 1, "", "assert_has_calls"], [387, 8, 1, "", "assert_not_called"], [387, 8, 1, "", "attach_mock"], [387, 7, 1, "", "call_args"], [387, 7, 1, "", "call_args_list"], [387, 7, 1, "", "call_count"], [387, 7, 1, "", "called"], [387, 8, 1, "", "configure_mock"], [387, 7, 1, "", "method_calls"], [387, 8, 1, "", "mock_add_spec"], [387, 7, 1, "", "mock_calls"], [387, 8, 1, "", "reset_mock"], [387, 7, 1, "", "return_value"], [387, 7, 1, "", "side_effect"]], "unittest.mock.call": [[387, 8, 1, "", "call_list"]], "unittest.mock.patch": [[387, 12, 1, "", "dict"], [387, 12, 1, "", "multiple"], [387, 12, 1, "", "object"], [387, 12, 1, "", "stopall"]], "urllib": [[391, 10, 0, "-", "error"], [392, 10, 0, "-", "parse"], [393, 10, 0, "-", "request"], [393, 10, 0, "-", "response"], [394, 10, 0, "-", "robotparser"]], "urllib.error": [[391, 6, 1, "", "ContentTooShortError"], [391, 6, 1, "", "HTTPError"], [391, 6, 1, "", "URLError"]], "urllib.error.ContentTooShortError": [[391, 7, 1, "", "content"]], "urllib.error.HTTPError": [[391, 7, 1, "", "code"], [391, 7, 1, "", "fp"], [391, 7, 1, "", "headers"], [391, 7, 1, "", "reason"], [391, 7, 1, "", "url"]], "urllib.error.URLError": [[391, 7, 1, "", "reason"]], "urllib.parse": [[392, 11, 1, "", "DefragResult"], [392, 11, 1, "", "DefragResultBytes"], [392, 11, 1, "", "ParseResult"], [392, 11, 1, "", "ParseResultBytes"], [392, 11, 1, "", "SplitResult"], [392, 11, 1, "", "SplitResultBytes"], [392, 12, 1, "", "parse_qs"], [392, 12, 1, "", "parse_qsl"], [392, 12, 1, "", "quote"], [392, 12, 1, "", "quote_from_bytes"], [392, 12, 1, "", "quote_plus"], [392, 12, 1, "", "unquote"], [392, 12, 1, "", "unquote_plus"], [392, 12, 1, "", "unquote_to_bytes"], [392, 12, 1, "", "unwrap"], [392, 12, 1, "", "urldefrag"], [392, 12, 1, "", "urlencode"], [392, 12, 1, "", "urljoin"], [392, 12, 1, "", "urlparse"], [392, 12, 1, "", "urlsplit"], [392, 12, 1, "", "urlunparse"], [392, 12, 1, "", "urlunsplit"]], "urllib.parse.urllib.parse.SplitResult": [[392, 8, 1, "", "geturl"]], "urllib.request": [[393, 11, 1, "", "AbstractBasicAuthHandler"], [393, 11, 1, "", "AbstractDigestAuthHandler"], [393, 11, 1, "", "BaseHandler"], [393, 11, 1, "", "CacheFTPHandler"], [393, 11, 1, "", "DataHandler"], [393, 11, 1, "", "FTPHandler"], [393, 11, 1, "", "FancyURLopener"], [393, 11, 1, "", "FileHandler"], [393, 11, 1, "", "HTTPBasicAuthHandler"], [393, 11, 1, "", "HTTPCookieProcessor"], [393, 11, 1, "", "HTTPDefaultErrorHandler"], [393, 11, 1, "", "HTTPDigestAuthHandler"], [393, 11, 1, "", "HTTPErrorProcessor"], [393, 11, 1, "", "HTTPHandler"], [393, 11, 1, "", "HTTPPasswordMgr"], [393, 11, 1, "", "HTTPPasswordMgrWithDefaultRealm"], [393, 11, 1, "", "HTTPPasswordMgrWithPriorAuth"], [393, 11, 1, "", "HTTPRedirectHandler"], [393, 11, 1, "", "HTTPSHandler"], [393, 11, 1, "", "OpenerDirector"], [393, 11, 1, "", "ProxyBasicAuthHandler"], [393, 11, 1, "", "ProxyDigestAuthHandler"], [393, 11, 1, "", "ProxyHandler"], [393, 11, 1, "", "Request"], [393, 11, 1, "", "URLopener"], [393, 11, 1, "", "UnknownHandler"], [393, 12, 1, "", "build_opener"], [393, 12, 1, "", "getproxies"], [393, 12, 1, "", "install_opener"], [393, 12, 1, "", "pathname2url"], [393, 12, 1, "", "url2pathname"], [393, 12, 1, "", "urlcleanup"], [393, 12, 1, "", "urlopen"], [393, 12, 1, "", "urlretrieve"]], "urllib.request.AbstractBasicAuthHandler": [[393, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.AbstractDigestAuthHandler": [[393, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.BaseHandler": [[393, 8, 1, "", "add_parent"], [393, 8, 1, "", "close"], [393, 8, 1, "", "default_open"], [393, 8, 1, "", "http_error_default"], [393, 7, 1, "", "parent"], [393, 8, 1, "", "unknown_open"]], "urllib.request.CacheFTPHandler": [[393, 8, 1, "", "setMaxConns"], [393, 8, 1, "", "setTimeout"]], "urllib.request.DataHandler": [[393, 8, 1, "", "data_open"]], "urllib.request.FTPHandler": [[393, 8, 1, "", "ftp_open"]], "urllib.request.FancyURLopener": [[393, 8, 1, "", "prompt_user_passwd"]], "urllib.request.FileHandler": [[393, 8, 1, "", "file_open"]], "urllib.request.HTTPBasicAuthHandler": [[393, 8, 1, "", "http_error_401"]], "urllib.request.HTTPCookieProcessor": [[393, 7, 1, "", "cookiejar"]], "urllib.request.HTTPDigestAuthHandler": [[393, 8, 1, "", "http_error_401"]], "urllib.request.HTTPErrorProcessor": [[393, 8, 1, "", "http_response"], [393, 8, 1, "", "https_response"]], "urllib.request.HTTPHandler": [[393, 8, 1, "", "http_open"]], "urllib.request.HTTPPasswordMgr": [[393, 8, 1, "", "add_password"], [393, 8, 1, "", "find_user_password"]], "urllib.request.HTTPPasswordMgrWithPriorAuth": [[393, 8, 1, "", "add_password"], [393, 8, 1, "", "find_user_password"], [393, 8, 1, "", "is_authenticated"], [393, 8, 1, "", "update_authenticated"]], "urllib.request.HTTPRedirectHandler": [[393, 8, 1, "", "http_error_301"], [393, 8, 1, "", "http_error_302"], [393, 8, 1, "", "http_error_303"], [393, 8, 1, "", "http_error_307"], [393, 8, 1, "", "http_error_308"], [393, 8, 1, "", "redirect_request"]], "urllib.request.HTTPSHandler": [[393, 8, 1, "", "https_open"]], "urllib.request.OpenerDirector": [[393, 8, 1, "", "add_handler"], [393, 8, 1, "", "error"], [393, 8, 1, "", "open"]], "urllib.request.ProxyBasicAuthHandler": [[393, 8, 1, "", "http_error_407"]], "urllib.request.ProxyDigestAuthHandler": [[393, 8, 1, "", "http_error_407"]], "urllib.request.Request": [[393, 8, 1, "", "add_header"], [393, 8, 1, "", "add_unredirected_header"], [393, 7, 1, "", "data"], [393, 7, 1, "", "full_url"], [393, 8, 1, "", "get_full_url"], [393, 8, 1, "", "get_header"], [393, 8, 1, "", "get_method"], [393, 8, 1, "", "has_header"], [393, 8, 1, "", "header_items"], [393, 7, 1, "", "host"], [393, 7, 1, "", "method"], [393, 7, 1, "", "origin_req_host"], [393, 8, 1, "", "remove_header"], [393, 7, 1, "", "selector"], [393, 8, 1, "", "set_proxy"], [393, 7, 1, "", "type"], [393, 7, 1, "", "unverifiable"]], "urllib.request.URLopener": [[393, 8, 1, "", "open"], [393, 8, 1, "", "open_unknown"], [393, 8, 1, "", "retrieve"], [393, 7, 1, "", "version"]], "urllib.request.UnknownHandler": [[393, 8, 1, "", "unknown_open"]], "urllib.response": [[393, 11, 1, "", "addinfourl"]], "urllib.response.addinfourl": [[393, 7, 1, "", "code"], [393, 8, 1, "", "getcode"], [393, 8, 1, "", "geturl"], [393, 7, 1, "", "headers"], [393, 8, 1, "", "info"], [393, 7, 1, "", "status"], [393, 7, 1, "", "url"]], "urllib.robotparser": [[394, 11, 1, "", "RobotFileParser"]], "urllib.robotparser.RobotFileParser": [[394, 8, 1, "", "can_fetch"], [394, 8, 1, "", "crawl_delay"], [394, 8, 1, "", "modified"], [394, 8, 1, "", "mtime"], [394, 8, 1, "", "parse"], [394, 8, 1, "", "read"], [394, 8, 1, "", "request_rate"], [394, 8, 1, "", "set_url"], [394, 8, 1, "", "site_maps"]], "uu": [[395, 6, 1, "", "Error"], [395, 12, 1, "", "decode"], [395, 12, 1, "", "encode"]], "uuid": [[396, 9, 1, "", "NAMESPACE_DNS"], [396, 9, 1, "", "NAMESPACE_OID"], [396, 9, 1, "", "NAMESPACE_URL"], [396, 9, 1, "", "NAMESPACE_X500"], [396, 9, 1, "", "RESERVED_FUTURE"], [396, 9, 1, "", "RESERVED_MICROSOFT"], [396, 9, 1, "", "RESERVED_NCS"], [396, 9, 1, "", "RFC_4122"], [396, 11, 1, "", "SafeUUID"], [396, 11, 1, "", "UUID"], [396, 12, 1, "", "getnode"], [396, 12, 1, "", "uuid1"], [396, 12, 1, "", "uuid3"], [396, 12, 1, "", "uuid4"], [396, 12, 1, "", "uuid5"], [396, 14, 1, "cmdoption-uuid-h", "--help"], [396, 14, 1, "cmdoption-uuid-name", "--name"], [396, 14, 1, "cmdoption-uuid-namespace", "--namespace"], [396, 14, 1, "cmdoption-uuid-uuid", "--uuid"], [396, 14, 1, "cmdoption-uuid-N", "-N"], [396, 14, 1, "cmdoption-uuid-h", "-h"], [396, 14, 1, "cmdoption-uuid-n", "-n"], [396, 14, 1, "cmdoption-uuid-u", "-u"]], "uuid.SafeUUID": [[396, 7, 1, "", "safe"], [396, 7, 1, "", "unknown"], [396, 7, 1, "", "unsafe"]], "uuid.UUID": [[396, 7, 1, "", "bytes"], [396, 7, 1, "", "bytes_le"], [396, 7, 1, "", "clock_seq"], [396, 7, 1, "", "clock_seq_hi_variant"], [396, 7, 1, "", "clock_seq_low"], [396, 7, 1, "", "fields"], [396, 7, 1, "", "hex"], [396, 7, 1, "", "int"], [396, 7, 1, "", "is_safe"], [396, 7, 1, "", "node"], [396, 7, 1, "", "time"], [396, 7, 1, "", "time_hi_version"], [396, 7, 1, "", "time_low"], [396, 7, 1, "", "time_mid"], [396, 7, 1, "", "urn"], [396, 7, 1, "", "variant"], [396, 7, 1, "", "version"]], "venv": [[397, 11, 1, "", "EnvBuilder"], [397, 12, 1, "", "create"]], "venv.EnvBuilder": [[397, 8, 1, "", "create"], [397, 8, 1, "", "create_configuration"], [397, 8, 1, "", "ensure_directories"], [397, 8, 1, "", "install_scripts"], [397, 8, 1, "", "post_setup"], [397, 8, 1, "", "setup_python"], [397, 8, 1, "", "setup_scripts"], [397, 8, 1, "", "upgrade_dependencies"]], "warnings": [[398, 11, 1, "", "catch_warnings"], [398, 12, 1, "", "filterwarnings"], [398, 12, 1, "", "formatwarning"], [398, 12, 1, "", "resetwarnings"], [398, 12, 1, "", "showwarning"], [398, 12, 1, "", "simplefilter"], [398, 12, 1, "", "warn"], [398, 12, 1, "", "warn_explicit"]], "wave": [[399, 6, 1, "", "Error"], [399, 11, 1, "", "Wave_read"], [399, 11, 1, "", "Wave_write"], [399, 12, 1, "", "open"]], "wave.Wave_read": [[399, 8, 1, "", "close"], [399, 8, 1, "", "getcompname"], [399, 8, 1, "", "getcomptype"], [399, 8, 1, "", "getframerate"], [399, 8, 1, "", "getmark"], [399, 8, 1, "", "getmarkers"], [399, 8, 1, "", "getnchannels"], [399, 8, 1, "", "getnframes"], [399, 8, 1, "", "getparams"], [399, 8, 1, "", "getsampwidth"], [399, 8, 1, "", "readframes"], [399, 8, 1, "", "rewind"], [399, 8, 1, "", "setpos"], [399, 8, 1, "", "tell"]], "wave.Wave_write": [[399, 8, 1, "", "close"], [399, 8, 1, "", "setcomptype"], [399, 8, 1, "", "setframerate"], [399, 8, 1, "", "setnchannels"], [399, 8, 1, "", "setnframes"], [399, 8, 1, "", "setparams"], [399, 8, 1, "", "setsampwidth"], [399, 8, 1, "", "tell"], [399, 8, 1, "", "writeframes"], [399, 8, 1, "", "writeframesraw"]], "weakref": [[400, 9, 1, "", "CallableProxyType"], [400, 9, 1, "", "ProxyType"], [400, 9, 1, "", "ProxyTypes"], [400, 9, 1, "", "ReferenceType"], [400, 11, 1, "", "WeakKeyDictionary"], [400, 11, 1, "", "WeakMethod"], [400, 11, 1, "", "WeakSet"], [400, 11, 1, "", "WeakValueDictionary"], [400, 11, 1, "", "finalize"], [400, 12, 1, "", "getweakrefcount"], [400, 12, 1, "", "getweakrefs"], [400, 12, 1, "", "proxy"], [400, 11, 1, "", "ref"]], "weakref.WeakKeyDictionary": [[400, 8, 1, "", "keyrefs"]], "weakref.WeakValueDictionary": [[400, 8, 1, "", "valuerefs"]], "weakref.finalize": [[400, 8, 1, "", "__call__"], [400, 7, 1, "", "alive"], [400, 7, 1, "", "atexit"], [400, 8, 1, "", "detach"], [400, 8, 1, "", "peek"]], "weakref.ref": [[400, 7, 1, "", "__callback__"]], "webbrowser": [[401, 6, 1, "", "Error"], [401, 12, 1, "", "get"], [401, 7, 1, "", "name"], [401, 12, 1, "", "open"], [401, 12, 1, "", "open_new"], [401, 12, 1, "", "open_new_tab"], [401, 12, 1, "", "register"]], "webbrowser.controller": [[401, 8, 1, "", "open"], [401, 8, 1, "", "open_new"], [401, 8, 1, "", "open_new_tab"]], "winreg": [[403, 12, 1, "", "CloseKey"], [403, 12, 1, "", "ConnectRegistry"], [403, 12, 1, "", "CreateKey"], [403, 12, 1, "", "CreateKeyEx"], [403, 12, 1, "", "DeleteKey"], [403, 12, 1, "", "DeleteKeyEx"], [403, 12, 1, "", "DeleteValue"], [403, 12, 1, "", "DisableReflectionKey"], [403, 12, 1, "", "EnableReflectionKey"], [403, 12, 1, "", "EnumKey"], [403, 12, 1, "", "EnumValue"], [403, 12, 1, "", "ExpandEnvironmentStrings"], [403, 12, 1, "", "FlushKey"], [403, 9, 1, "", "HKEY_CLASSES_ROOT"], [403, 9, 1, "", "HKEY_CURRENT_CONFIG"], [403, 9, 1, "", "HKEY_CURRENT_USER"], [403, 9, 1, "", "HKEY_DYN_DATA"], [403, 9, 1, "", "HKEY_LOCAL_MACHINE"], [403, 9, 1, "", "HKEY_PERFORMANCE_DATA"], [403, 9, 1, "", "HKEY_USERS"], [403, 9, 1, "", "KEY_ALL_ACCESS"], [403, 9, 1, "", "KEY_CREATE_LINK"], [403, 9, 1, "", "KEY_CREATE_SUB_KEY"], [403, 9, 1, "", "KEY_ENUMERATE_SUB_KEYS"], [403, 9, 1, "", "KEY_EXECUTE"], [403, 9, 1, "", "KEY_NOTIFY"], [403, 9, 1, "", "KEY_QUERY_VALUE"], [403, 9, 1, "", "KEY_READ"], [403, 9, 1, "", "KEY_SET_VALUE"], [403, 9, 1, "", "KEY_WOW64_32KEY"], [403, 9, 1, "", "KEY_WOW64_64KEY"], [403, 9, 1, "", "KEY_WRITE"], [403, 12, 1, "", "LoadKey"], [403, 12, 1, "", "OpenKey"], [403, 12, 1, "", "OpenKeyEx"], [403, 12, 1, "", "QueryInfoKey"], [403, 12, 1, "", "QueryReflectionKey"], [403, 12, 1, "", "QueryValue"], [403, 12, 1, "", "QueryValueEx"], [403, 9, 1, "", "REG_BINARY"], [403, 9, 1, "", "REG_DWORD"], [403, 9, 1, "", "REG_DWORD_BIG_ENDIAN"], [403, 9, 1, "", "REG_DWORD_LITTLE_ENDIAN"], [403, 9, 1, "", "REG_EXPAND_SZ"], [403, 9, 1, "", "REG_FULL_RESOURCE_DESCRIPTOR"], [403, 9, 1, "", "REG_LINK"], [403, 9, 1, "", "REG_MULTI_SZ"], [403, 9, 1, "", "REG_NONE"], [403, 9, 1, "", "REG_QWORD"], [403, 9, 1, "", "REG_QWORD_LITTLE_ENDIAN"], [403, 9, 1, "", "REG_RESOURCE_LIST"], [403, 9, 1, "", "REG_RESOURCE_REQUIREMENTS_LIST"], [403, 9, 1, "", "REG_SZ"], [403, 12, 1, "", "SaveKey"], [403, 12, 1, "", "SetValue"], [403, 12, 1, "", "SetValueEx"]], "winreg.PyHKEY": [[403, 8, 1, "", "Close"], [403, 8, 1, "", "Detach"], [403, 8, 1, "", "__enter__"], [403, 8, 1, "", "__exit__"]], "winsound": [[404, 12, 1, "", "Beep"], [404, 9, 1, "", "MB_ICONASTERISK"], [404, 9, 1, "", "MB_ICONEXCLAMATION"], [404, 9, 1, "", "MB_ICONHAND"], [404, 9, 1, "", "MB_ICONQUESTION"], [404, 9, 1, "", "MB_OK"], [404, 12, 1, "", "MessageBeep"], [404, 12, 1, "", "PlaySound"], [404, 9, 1, "", "SND_ALIAS"], [404, 9, 1, "", "SND_ASYNC"], [404, 9, 1, "", "SND_FILENAME"], [404, 9, 1, "", "SND_LOOP"], [404, 9, 1, "", "SND_MEMORY"], [404, 9, 1, "", "SND_NODEFAULT"], [404, 9, 1, "", "SND_NOSTOP"], [404, 9, 1, "", "SND_NOWAIT"], [404, 9, 1, "", "SND_PURGE"]], "wsgiref": [[405, 10, 0, "-", "handlers"], [405, 10, 0, "-", "headers"], [405, 10, 0, "-", "simple_server"], [405, 10, 0, "-", "types"], [405, 10, 0, "-", "util"], [405, 10, 0, "-", "validate"]], "wsgiref.handlers": [[405, 11, 1, "", "BaseCGIHandler"], [405, 11, 1, "", "BaseHandler"], [405, 11, 1, "", "CGIHandler"], [405, 11, 1, "", "IISCGIHandler"], [405, 11, 1, "", "SimpleHandler"], [405, 12, 1, "", "read_environ"]], "wsgiref.handlers.BaseHandler": [[405, 8, 1, "", "_flush"], [405, 8, 1, "", "_write"], [405, 8, 1, "", "add_cgi_vars"], [405, 7, 1, "", "error_body"], [405, 7, 1, "", "error_headers"], [405, 8, 1, "", "error_output"], [405, 7, 1, "", "error_status"], [405, 8, 1, "", "get_scheme"], [405, 8, 1, "", "get_stderr"], [405, 8, 1, "", "get_stdin"], [405, 7, 1, "", "http_version"], [405, 8, 1, "", "log_exception"], [405, 7, 1, "", "origin_server"], [405, 7, 1, "", "os_environ"], [405, 8, 1, "", "run"], [405, 8, 1, "", "sendfile"], [405, 7, 1, "", "server_software"], [405, 8, 1, "", "setup_environ"], [405, 7, 1, "", "traceback_limit"], [405, 7, 1, "", "wsgi_file_wrapper"], [405, 7, 1, "", "wsgi_multiprocess"], [405, 7, 1, "", "wsgi_multithread"], [405, 7, 1, "", "wsgi_run_once"]], "wsgiref.headers": [[405, 11, 1, "", "Headers"]], "wsgiref.headers.Headers": [[405, 8, 1, "", "add_header"], [405, 8, 1, "", "get_all"]], "wsgiref.simple_server": [[405, 11, 1, "", "WSGIRequestHandler"], [405, 11, 1, "", "WSGIServer"], [405, 12, 1, "", "demo_app"], [405, 12, 1, "", "make_server"]], "wsgiref.simple_server.WSGIRequestHandler": [[405, 8, 1, "", "get_environ"], [405, 8, 1, "", "get_stderr"], [405, 8, 1, "", "handle"]], "wsgiref.simple_server.WSGIServer": [[405, 8, 1, "", "get_app"], [405, 8, 1, "", "set_app"]], "wsgiref.types": [[405, 11, 1, "", "ErrorStream"], [405, 11, 1, "", "FileWrapper"], [405, 11, 1, "", "InputStream"], [405, 11, 1, "", "StartResponse"], [405, 9, 1, "", "WSGIApplication"], [405, 9, 1, "", "WSGIEnvironment"]], "wsgiref.util": [[405, 11, 1, "", "FileWrapper"], [405, 12, 1, "", "application_uri"], [405, 12, 1, "", "guess_scheme"], [405, 12, 1, "", "is_hop_by_hop"], [405, 12, 1, "", "request_uri"], [405, 12, 1, "", "setup_testing_defaults"], [405, 12, 1, "", "shift_path_info"]], "wsgiref.validate": [[405, 12, 1, "", "validator"]], "xdrlib": [[406, 6, 1, "", "ConversionError"], [406, 6, 1, "", "Error"], [406, 11, 1, "", "Packer"], [406, 11, 1, "", "Unpacker"]], "xdrlib.Packer": [[406, 8, 1, "", "get_buffer"], [406, 8, 1, "", "pack_array"], [406, 8, 1, "", "pack_bytes"], [406, 8, 1, "", "pack_double"], [406, 8, 1, "", "pack_farray"], [406, 8, 1, "", "pack_float"], [406, 8, 1, "", "pack_fopaque"], [406, 8, 1, "", "pack_fstring"], [406, 8, 1, "", "pack_list"], [406, 8, 1, "", "pack_opaque"], [406, 8, 1, "", "pack_string"], [406, 8, 1, "", "reset"]], "xdrlib.Unpacker": [[406, 8, 1, "", "done"], [406, 8, 1, "", "get_buffer"], [406, 8, 1, "", "get_position"], [406, 8, 1, "", "reset"], [406, 8, 1, "", "set_position"], [406, 8, 1, "", "unpack_array"], [406, 8, 1, "", "unpack_bytes"], [406, 8, 1, "", "unpack_double"], [406, 8, 1, "", "unpack_farray"], [406, 8, 1, "", "unpack_float"], [406, 8, 1, "", "unpack_fopaque"], [406, 8, 1, "", "unpack_fstring"], [406, 8, 1, "", "unpack_list"], [406, 8, 1, "", "unpack_opaque"], [406, 8, 1, "", "unpack_string"]], "xml": [[408, 10, 0, "-", "dom"], [412, 10, 0, "-", "sax"]], "xml.dom.Attr": [[408, 7, 1, "", "localName"], [408, 7, 1, "", "name"], [408, 7, 1, "", "prefix"], [408, 7, 1, "", "value"]], "xml.dom.Comment": [[408, 7, 1, "", "data"]], "xml.dom": [[408, 6, 1, "", "DOMException"], [408, 6, 1, "", "DomstringSizeErr"], [408, 9, 1, "", "EMPTY_NAMESPACE"], [408, 6, 1, "", "HierarchyRequestErr"], [408, 6, 1, "", "IndexSizeErr"], [408, 6, 1, "", "InuseAttributeErr"], [408, 6, 1, "", "InvalidAccessErr"], [408, 6, 1, "", "InvalidCharacterErr"], [408, 6, 1, "", "InvalidModificationErr"], [408, 6, 1, "", "InvalidStateErr"], [408, 6, 1, "", "NamespaceErr"], [408, 6, 1, "", "NoDataAllowedErr"], [408, 6, 1, "", "NoModificationAllowedErr"], [408, 6, 1, "", "NotFoundErr"], [408, 6, 1, "", "NotSupportedErr"], [408, 6, 1, "", "SyntaxErr"], [408, 6, 1, "", "WrongDocumentErr"], [408, 9, 1, "", "XHTML_NAMESPACE"], [408, 9, 1, "", "XMLNS_NAMESPACE"], [408, 9, 1, "", "XML_NAMESPACE"], [408, 12, 1, "", "getDOMImplementation"], [409, 10, 0, "-", "minidom"], [410, 10, 0, "-", "pulldom"], [408, 12, 1, "", "registerDOMImplementation"]], "xml.dom.DOMImplementation": [[408, 8, 1, "", "createDocument"], [408, 8, 1, "", "createDocumentType"], [408, 8, 1, "", "hasFeature"]], "xml.dom.Document": [[408, 8, 1, "", "createAttribute"], [408, 8, 1, "", "createAttributeNS"], [408, 8, 1, "", "createComment"], [408, 8, 1, "", "createElement"], [408, 8, 1, "", "createElementNS"], [408, 8, 1, "", "createProcessingInstruction"], [408, 8, 1, "", "createTextNode"], [408, 7, 1, "", "documentElement"], [408, 8, 1, "", "getElementsByTagName"], [408, 8, 1, "", "getElementsByTagNameNS"]], "xml.dom.DocumentType": [[408, 7, 1, "", "entities"], [408, 7, 1, "", "internalSubset"], [408, 7, 1, "", "name"], [408, 7, 1, "", "notations"], [408, 7, 1, "", "publicId"], [408, 7, 1, "", "systemId"]], "xml.dom.Element": [[408, 8, 1, "", "getAttribute"], [408, 8, 1, "", "getAttributeNS"], [408, 8, 1, "", "getAttributeNode"], [408, 8, 1, "", "getAttributeNodeNS"], [408, 8, 1, "", "getElementsByTagName"], [408, 8, 1, "", "getElementsByTagNameNS"], [408, 8, 1, "", "hasAttribute"], [408, 8, 1, "", "hasAttributeNS"], [408, 8, 1, "", "removeAttribute"], [408, 8, 1, "", "removeAttributeNS"], [408, 8, 1, "", "removeAttributeNode"], [408, 8, 1, "", "setAttribute"], [408, 8, 1, "", "setAttributeNS"], [408, 8, 1, "", "setAttributeNode"], [408, 8, 1, "", "setAttributeNodeNS"], [408, 7, 1, "", "tagName"]], "xml.dom.NamedNodeMap": [[408, 8, 1, "", "item"], [408, 7, 1, "", "length"]], "xml.dom.Node": [[408, 8, 1, "", "appendChild"], [408, 7, 1, "", "attributes"], [408, 7, 1, "", "childNodes"], [408, 8, 1, "", "cloneNode"], [408, 7, 1, "", "firstChild"], [408, 8, 1, "", "hasAttributes"], [408, 8, 1, "", "hasChildNodes"], [408, 8, 1, "", "insertBefore"], [408, 8, 1, "", "isSameNode"], [408, 7, 1, "", "lastChild"], [408, 7, 1, "", "localName"], [408, 7, 1, "", "namespaceURI"], [408, 7, 1, "", "nextSibling"], [408, 7, 1, "", "nodeName"], [408, 7, 1, "", "nodeType"], [408, 7, 1, "", "nodeValue"], [408, 8, 1, "", "normalize"], [408, 7, 1, "", "parentNode"], [408, 7, 1, "", "prefix"], [408, 7, 1, "", "previousSibling"], [408, 8, 1, "", "removeChild"], [408, 8, 1, "", "replaceChild"]], "xml.dom.NodeList": [[408, 8, 1, "", "item"], [408, 7, 1, "", "length"]], "xml.dom.ProcessingInstruction": [[408, 7, 1, "", "data"], [408, 7, 1, "", "target"]], "xml.dom.Text": [[408, 7, 1, "", "data"]], "xml.dom.minidom.Node": [[409, 8, 1, "", "toprettyxml"], [409, 8, 1, "", "toxml"], [409, 8, 1, "", "unlink"], [409, 8, 1, "", "writexml"]], "xml.dom.minidom": [[409, 12, 1, "", "parse"], [409, 12, 1, "", "parseString"]], "xml.dom.pulldom": [[410, 11, 1, "", "DOMEventStream"], [410, 11, 1, "", "PullDom"], [410, 11, 1, "", "SAX2DOM"], [410, 9, 1, "", "default_bufsize"], [410, 12, 1, "", "parse"], [410, 12, 1, "", "parseString"]], "xml.dom.pulldom.DOMEventStream": [[410, 8, 1, "", "expandNode"], [410, 8, 1, "", "getEvent"], [410, 8, 1, "", "reset"]], "xml.etree": [[411, 10, 0, "-", "ElementInclude"], [411, 10, 0, "-", "ElementTree"]], "xml.etree.ElementInclude": [[411, 12, 1, "", "default_loader"], [411, 12, 1, "", "include"]], "xml.etree.ElementTree": [[411, 11, 1, "", "C14NWriterTarget"], [411, 12, 1, "", "Comment"], [411, 11, 1, "", "Element"], [411, 11, 1, "", "ElementTree"], [411, 11, 1, "", "ParseError"], [411, 12, 1, "", "ProcessingInstruction"], [411, 11, 1, "", "QName"], [411, 12, 1, "", "SubElement"], [411, 11, 1, "", "TreeBuilder"], [411, 12, 1, "", "XML"], [411, 12, 1, "", "XMLID"], [411, 11, 1, "", "XMLParser"], [411, 11, 1, "", "XMLPullParser"], [411, 12, 1, "", "canonicalize"], [411, 12, 1, "", "dump"], [411, 12, 1, "", "fromstring"], [411, 12, 1, "", "fromstringlist"], [411, 12, 1, "", "indent"], [411, 12, 1, "", "iselement"], [411, 12, 1, "", "iterparse"], [411, 12, 1, "", "parse"], [411, 12, 1, "", "register_namespace"], [411, 12, 1, "", "tostring"], [411, 12, 1, "", "tostringlist"]], "xml.etree.ElementTree.Element": [[411, 8, 1, "", "append"], [411, 7, 1, "", "attrib"], [411, 8, 1, "", "clear"], [411, 8, 1, "", "extend"], [411, 8, 1, "", "find"], [411, 8, 1, "", "findall"], [411, 8, 1, "", "findtext"], [411, 8, 1, "", "get"], [411, 8, 1, "", "insert"], [411, 8, 1, "", "items"], [411, 8, 1, "", "iter"], [411, 8, 1, "", "iterfind"], [411, 8, 1, "", "itertext"], [411, 8, 1, "", "keys"], [411, 8, 1, "", "makeelement"], [411, 8, 1, "", "remove"], [411, 8, 1, "", "set"], [411, 7, 1, "", "tag"], [411, 7, 1, "", "tail"], [411, 7, 1, "", "text"]], "xml.etree.ElementTree.ElementTree": [[411, 8, 1, "", "_setroot"], [411, 8, 1, "", "find"], [411, 8, 1, "", "findall"], [411, 8, 1, "", "findtext"], [411, 8, 1, "", "getroot"], [411, 8, 1, "", "iter"], [411, 8, 1, "", "iterfind"], [411, 8, 1, "", "parse"], [411, 8, 1, "", "write"]], "xml.etree.ElementTree.ParseError": [[411, 7, 1, "", "code"], [411, 7, 1, "", "position"]], "xml.etree.ElementTree.TreeBuilder": [[411, 8, 1, "", "close"], [411, 8, 1, "", "comment"], [411, 8, 1, "", "data"], [411, 8, 1, "", "doctype"], [411, 8, 1, "", "end"], [411, 8, 1, "", "end_ns"], [411, 8, 1, "", "pi"], [411, 8, 1, "", "start"], [411, 8, 1, "", "start_ns"]], "xml.etree.ElementTree.XMLParser": [[411, 8, 1, "", "close"], [411, 8, 1, "", "feed"]], "xml.etree.ElementTree.XMLPullParser": [[411, 8, 1, "", "close"], [411, 8, 1, "", "feed"], [411, 8, 1, "", "read_events"]], "xml.parsers": [[312, 10, 0, "-", "expat"]], "xml.parsers.expat": [[312, 12, 1, "", "ErrorString"], [312, 6, 1, "", "ExpatError"], [312, 12, 1, "", "ParserCreate"], [312, 9, 1, "", "XMLParserType"], [312, 6, 1, "", "error"], [312, 10, 0, "-", "errors"], [312, 10, 0, "-", "model"]], "xml.parsers.expat.ExpatError": [[312, 7, 1, "", "code"], [312, 7, 1, "", "lineno"], [312, 7, 1, "", "offset"]], "xml.parsers.expat.errors": [[312, 9, 1, "", "XML_ERROR_ABORTED"], [312, 9, 1, "", "XML_ERROR_AMPLIFICATION_LIMIT_BREACH"], [312, 9, 1, "", "XML_ERROR_ASYNC_ENTITY"], [312, 9, 1, "", "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"], [312, 9, 1, "", "XML_ERROR_BAD_CHAR_REF"], [312, 9, 1, "", "XML_ERROR_BINARY_ENTITY_REF"], [312, 9, 1, "", "XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"], [312, 9, 1, "", "XML_ERROR_DUPLICATE_ATTRIBUTE"], [312, 9, 1, "", "XML_ERROR_ENTITY_DECLARED_IN_PE"], [312, 9, 1, "", "XML_ERROR_EXTERNAL_ENTITY_HANDLING"], [312, 9, 1, "", "XML_ERROR_FEATURE_REQUIRES_XML_DTD"], [312, 9, 1, "", "XML_ERROR_FINISHED"], [312, 9, 1, "", "XML_ERROR_INCOMPLETE_PE"], [312, 9, 1, "", "XML_ERROR_INCORRECT_ENCODING"], [312, 9, 1, "", "XML_ERROR_INVALID_ARGUMENT"], [312, 9, 1, "", "XML_ERROR_INVALID_TOKEN"], [312, 9, 1, "", "XML_ERROR_JUNK_AFTER_DOC_ELEMENT"], [312, 9, 1, "", "XML_ERROR_MISPLACED_XML_PI"], [312, 9, 1, "", "XML_ERROR_NOT_STANDALONE"], [312, 9, 1, "", "XML_ERROR_NOT_SUSPENDED"], [312, 9, 1, "", "XML_ERROR_NO_BUFFER"], [312, 9, 1, "", "XML_ERROR_NO_ELEMENTS"], [312, 9, 1, "", "XML_ERROR_NO_MEMORY"], [312, 9, 1, "", "XML_ERROR_PARAM_ENTITY_REF"], [312, 9, 1, "", "XML_ERROR_PARTIAL_CHAR"], [312, 9, 1, "", "XML_ERROR_PUBLICID"], [312, 9, 1, "", "XML_ERROR_RECURSIVE_ENTITY_REF"], [312, 9, 1, "", "XML_ERROR_RESERVED_NAMESPACE_URI"], [312, 9, 1, "", "XML_ERROR_RESERVED_PREFIX_XML"], [312, 9, 1, "", "XML_ERROR_RESERVED_PREFIX_XMLNS"], [312, 9, 1, "", "XML_ERROR_SUSPENDED"], [312, 9, 1, "", "XML_ERROR_SUSPEND_PE"], [312, 9, 1, "", "XML_ERROR_SYNTAX"], [312, 9, 1, "", "XML_ERROR_TAG_MISMATCH"], [312, 9, 1, "", "XML_ERROR_TEXT_DECL"], [312, 9, 1, "", "XML_ERROR_UNBOUND_PREFIX"], [312, 9, 1, "", "XML_ERROR_UNCLOSED_CDATA_SECTION"], [312, 9, 1, "", "XML_ERROR_UNCLOSED_TOKEN"], [312, 9, 1, "", "XML_ERROR_UNDECLARING_PREFIX"], [312, 9, 1, "", "XML_ERROR_UNDEFINED_ENTITY"], [312, 9, 1, "", "XML_ERROR_UNEXPECTED_STATE"], [312, 9, 1, "", "XML_ERROR_UNKNOWN_ENCODING"], [312, 9, 1, "", "XML_ERROR_XML_DECL"], [312, 9, 1, "", "codes"], [312, 9, 1, "", "messages"]], "xml.parsers.expat.xmlparser": [[312, 8, 1, "", "AttlistDeclHandler"], [312, 8, 1, "", "CharacterDataHandler"], [312, 8, 1, "", "CommentHandler"], [312, 7, 1, "", "CurrentByteIndex"], [312, 7, 1, "", "CurrentColumnNumber"], [312, 7, 1, "", "CurrentLineNumber"], [312, 8, 1, "", "DefaultHandler"], [312, 8, 1, "", "DefaultHandlerExpand"], [312, 8, 1, "", "ElementDeclHandler"], [312, 8, 1, "", "EndCdataSectionHandler"], [312, 8, 1, "", "EndDoctypeDeclHandler"], [312, 8, 1, "", "EndElementHandler"], [312, 8, 1, "", "EndNamespaceDeclHandler"], [312, 8, 1, "", "EntityDeclHandler"], [312, 7, 1, "", "ErrorByteIndex"], [312, 7, 1, "", "ErrorCode"], [312, 7, 1, "", "ErrorColumnNumber"], [312, 7, 1, "", "ErrorLineNumber"], [312, 8, 1, "", "ExternalEntityParserCreate"], [312, 8, 1, "", "ExternalEntityRefHandler"], [312, 8, 1, "", "GetBase"], [312, 8, 1, "", "GetInputContext"], [312, 8, 1, "", "NotStandaloneHandler"], [312, 8, 1, "", "NotationDeclHandler"], [312, 8, 1, "", "Parse"], [312, 8, 1, "", "ParseFile"], [312, 8, 1, "", "ProcessingInstructionHandler"], [312, 8, 1, "", "SetBase"], [312, 8, 1, "", "SetParamEntityParsing"], [312, 8, 1, "", "StartCdataSectionHandler"], [312, 8, 1, "", "StartDoctypeDeclHandler"], [312, 8, 1, "", "StartElementHandler"], [312, 8, 1, "", "StartNamespaceDeclHandler"], [312, 8, 1, "", "UnparsedEntityDeclHandler"], [312, 8, 1, "", "UseForeignDTD"], [312, 8, 1, "", "XmlDeclHandler"], [312, 7, 1, "", "buffer_size"], [312, 7, 1, "", "buffer_text"], [312, 7, 1, "", "buffer_used"], [312, 7, 1, "", "ordered_attributes"], [312, 7, 1, "", "specified_attributes"]], "xml.sax": [[412, 6, 1, "", "SAXException"], [412, 6, 1, "", "SAXNotRecognizedException"], [412, 6, 1, "", "SAXNotSupportedException"], [412, 6, 1, "", "SAXParseException"], [413, 10, 0, "-", "handler"], [412, 12, 1, "", "make_parser"], [412, 12, 1, "", "parse"], [412, 12, 1, "", "parseString"], [415, 10, 0, "-", "saxutils"], [414, 10, 0, "-", "xmlreader"]], "xml.sax.SAXException": [[412, 8, 1, "", "getException"], [412, 8, 1, "", "getMessage"]], "xml.sax.handler": [[413, 11, 1, "", "ContentHandler"], [413, 11, 1, "", "DTDHandler"], [413, 11, 1, "", "EntityResolver"], [413, 11, 1, "", "ErrorHandler"], [413, 11, 1, "", "LexicalHandler"], [413, 9, 1, "", "all_features"], [413, 9, 1, "", "all_properties"], [413, 9, 1, "", "feature_external_ges"], [413, 9, 1, "", "feature_external_pes"], [413, 9, 1, "", "feature_namespace_prefixes"], [413, 9, 1, "", "feature_namespaces"], [413, 9, 1, "", "feature_string_interning"], [413, 9, 1, "", "feature_validation"], [413, 9, 1, "", "property_declaration_handler"], [413, 9, 1, "", "property_dom_node"], [413, 9, 1, "", "property_lexical_handler"], [413, 9, 1, "", "property_xml_string"]], "xml.sax.handler.ContentHandler": [[413, 8, 1, "", "characters"], [413, 8, 1, "", "endDocument"], [413, 8, 1, "", "endElement"], [413, 8, 1, "", "endElementNS"], [413, 8, 1, "", "endPrefixMapping"], [413, 8, 1, "", "ignorableWhitespace"], [413, 8, 1, "", "processingInstruction"], [413, 8, 1, "", "setDocumentLocator"], [413, 8, 1, "", "skippedEntity"], [413, 8, 1, "", "startDocument"], [413, 8, 1, "", "startElement"], [413, 8, 1, "", "startElementNS"], [413, 8, 1, "", "startPrefixMapping"]], "xml.sax.handler.DTDHandler": [[413, 8, 1, "", "notationDecl"], [413, 8, 1, "", "unparsedEntityDecl"]], "xml.sax.handler.EntityResolver": [[413, 8, 1, "", "resolveEntity"]], "xml.sax.handler.ErrorHandler": [[413, 8, 1, "", "error"], [413, 8, 1, "", "fatalError"], [413, 8, 1, "", "warning"]], "xml.sax.handler.LexicalHandler": [[413, 8, 1, "", "comment"], [413, 8, 1, "", "endCDATA"], [413, 8, 1, "", "endDTD"], [413, 8, 1, "", "startCDATA"], [413, 8, 1, "", "startDTD"]], "xml.sax.saxutils": [[415, 11, 1, "", "XMLFilterBase"], [415, 11, 1, "", "XMLGenerator"], [415, 12, 1, "", "escape"], [415, 12, 1, "", "prepare_input_source"], [415, 12, 1, "", "quoteattr"], [415, 12, 1, "", "unescape"]], "xml.sax.xmlreader.Attributes": [[414, 8, 1, "", "getLength"], [414, 8, 1, "", "getNames"], [414, 8, 1, "", "getType"], [414, 8, 1, "", "getValue"]], "xml.sax.xmlreader": [[414, 11, 1, "", "AttributesImpl"], [414, 11, 1, "", "AttributesNSImpl"], [414, 11, 1, "", "IncrementalParser"], [414, 11, 1, "", "InputSource"], [414, 11, 1, "", "Locator"], [414, 11, 1, "", "XMLReader"]], "xml.sax.xmlreader.AttributesNS": [[414, 8, 1, "", "getNameByQName"], [414, 8, 1, "", "getQNameByName"], [414, 8, 1, "", "getQNames"], [414, 8, 1, "", "getValueByQName"]], "xml.sax.xmlreader.IncrementalParser": [[414, 8, 1, "", "close"], [414, 8, 1, "", "feed"], [414, 8, 1, "", "reset"]], "xml.sax.xmlreader.InputSource": [[414, 8, 1, "", "getByteStream"], [414, 8, 1, "", "getCharacterStream"], [414, 8, 1, "", "getEncoding"], [414, 8, 1, "", "getPublicId"], [414, 8, 1, "", "getSystemId"], [414, 8, 1, "", "setByteStream"], [414, 8, 1, "", "setCharacterStream"], [414, 8, 1, "", "setEncoding"], [414, 8, 1, "", "setPublicId"], [414, 8, 1, "", "setSystemId"]], "xml.sax.xmlreader.Locator": [[414, 8, 1, "", "getColumnNumber"], [414, 8, 1, "", "getLineNumber"], [414, 8, 1, "", "getPublicId"], [414, 8, 1, "", "getSystemId"]], "xml.sax.xmlreader.XMLReader": [[414, 8, 1, "", "getContentHandler"], [414, 8, 1, "", "getDTDHandler"], [414, 8, 1, "", "getEntityResolver"], [414, 8, 1, "", "getErrorHandler"], [414, 8, 1, "", "getFeature"], [414, 8, 1, "", "getProperty"], [414, 8, 1, "", "parse"], [414, 8, 1, "", "setContentHandler"], [414, 8, 1, "", "setDTDHandler"], [414, 8, 1, "", "setEntityResolver"], [414, 8, 1, "", "setErrorHandler"], [414, 8, 1, "", "setFeature"], [414, 8, 1, "", "setLocale"], [414, 8, 1, "", "setProperty"]], "xmlrpc": [[417, 10, 0, "-", "client"], [418, 10, 0, "-", "server"]], "xmlrpc.client": [[417, 11, 1, "", "Binary"], [417, 11, 1, "", "DateTime"], [417, 11, 1, "", "Fault"], [417, 11, 1, "", "MultiCall"], [417, 11, 1, "", "ProtocolError"], [417, 11, 1, "", "ServerProxy"], [417, 12, 1, "", "dumps"], [417, 12, 1, "", "loads"]], "xmlrpc.client.Binary": [[417, 7, 1, "", "data"], [417, 8, 1, "", "decode"], [417, 8, 1, "", "encode"]], "xmlrpc.client.DateTime": [[417, 8, 1, "", "decode"], [417, 8, 1, "", "encode"]], "xmlrpc.client.Fault": [[417, 7, 1, "", "faultCode"], [417, 7, 1, "", "faultString"]], "xmlrpc.client.ProtocolError": [[417, 7, 1, "", "errcode"], [417, 7, 1, "", "errmsg"], [417, 7, 1, "", "headers"], [417, 7, 1, "", "url"]], "xmlrpc.client.ServerProxy.system": [[417, 8, 1, "", "listMethods"], [417, 8, 1, "", "methodHelp"], [417, 8, 1, "", "methodSignature"]], "xmlrpc.server": [[418, 11, 1, "", "CGIXMLRPCRequestHandler"], [418, 11, 1, "", "DocCGIXMLRPCRequestHandler"], [418, 11, 1, "", "DocXMLRPCRequestHandler"], [418, 11, 1, "", "DocXMLRPCServer"], [418, 11, 1, "", "SimpleXMLRPCRequestHandler"], [418, 11, 1, "", "SimpleXMLRPCServer"]], "xmlrpc.server.CGIXMLRPCRequestHandler": [[418, 8, 1, "", "handle_request"], [418, 8, 1, "", "register_function"], [418, 8, 1, "", "register_instance"], [418, 8, 1, "", "register_introspection_functions"], [418, 8, 1, "", "register_multicall_functions"]], "xmlrpc.server.DocCGIXMLRPCRequestHandler": [[418, 8, 1, "", "set_server_documentation"], [418, 8, 1, "", "set_server_name"], [418, 8, 1, "", "set_server_title"]], "xmlrpc.server.DocXMLRPCServer": [[418, 8, 1, "", "set_server_documentation"], [418, 8, 1, "", "set_server_name"], [418, 8, 1, "", "set_server_title"]], "xmlrpc.server.SimpleXMLRPCRequestHandler": [[418, 7, 1, "", "rpc_paths"]], "xmlrpc.server.SimpleXMLRPCServer": [[418, 8, 1, "", "register_function"], [418, 8, 1, "", "register_instance"], [418, 8, 1, "", "register_introspection_functions"], [418, 8, 1, "", "register_multicall_functions"]], "zipapp": [[419, 12, 1, "", "create_archive"], [419, 12, 1, "", "get_interpreter"], [419, 14, 1, "cmdoption-zipapp-c", "--compress"], [419, 14, 1, "cmdoption-zipapp-h", "--help"], [419, 14, 1, "cmdoption-zipapp-info", "--info"], [419, 14, 1, "cmdoption-zipapp-m", "--main"], [419, 14, 1, "cmdoption-zipapp-o", "--output"], [419, 14, 1, "cmdoption-zipapp-p", "--python"], [419, 14, 1, "cmdoption-zipapp-c", "-c"], [419, 14, 1, "cmdoption-zipapp-h", "-h"], [419, 14, 1, "cmdoption-zipapp-m", "-m"], [419, 14, 1, "cmdoption-zipapp-o", "-o"], [419, 14, 1, "cmdoption-zipapp-p", "-p"]], "zipfile": [[420, 6, 1, "", "BadZipFile"], [420, 6, 1, "", "BadZipfile"], [420, 6, 1, "", "LargeZipFile"], [420, 11, 1, "", "Path"], [420, 11, 1, "", "PyZipFile"], [420, 9, 1, "", "ZIP_BZIP2"], [420, 9, 1, "", "ZIP_DEFLATED"], [420, 9, 1, "", "ZIP_LZMA"], [420, 9, 1, "", "ZIP_STORED"], [420, 11, 1, "", "ZipFile"], [420, 11, 1, "", "ZipInfo"], [420, 12, 1, "", "is_zipfile"], [420, 14, 1, "cmdoption-zipfile-create", "--create"], [420, 14, 1, "cmdoption-zipfile-extract", "--extract"], [420, 14, 1, "cmdoption-zipfile-list", "--list"], [420, 14, 1, "cmdoption-zipfile-metadata-encoding", "--metadata-encoding"], [420, 14, 1, "cmdoption-zipfile-test", "--test"], [420, 14, 1, "cmdoption-zipfile-c", "-c"], [420, 14, 1, "cmdoption-zipfile-e", "-e"], [420, 14, 1, "cmdoption-zipfile-l", "-l"], [420, 14, 1, "cmdoption-zipfile-t", "-t"]], "zipfile.Path": [[420, 8, 1, "", "exists"], [420, 8, 1, "", "is_dir"], [420, 8, 1, "", "is_file"], [420, 8, 1, "", "iterdir"], [420, 8, 1, "", "joinpath"], [420, 7, 1, "", "name"], [420, 8, 1, "", "open"], [420, 8, 1, "", "read_bytes"], [420, 8, 1, "", "read_text"], [420, 9, 1, "", "stem"], [420, 9, 1, "", "suffix"], [420, 9, 1, "", "suffixes"]], "zipfile.PyZipFile": [[420, 8, 1, "", "writepy"]], "zipfile.ZipFile": [[420, 8, 1, "", "close"], [420, 7, 1, "", "comment"], [420, 7, 1, "", "debug"], [420, 8, 1, "", "extract"], [420, 8, 1, "", "extractall"], [420, 7, 1, "", "filename"], [420, 8, 1, "", "getinfo"], [420, 8, 1, "", "infolist"], [420, 8, 1, "", "mkdir"], [420, 8, 1, "", "namelist"], [420, 8, 1, "", "open"], [420, 8, 1, "", "printdir"], [420, 8, 1, "", "read"], [420, 8, 1, "", "setpassword"], [420, 8, 1, "", "testzip"], [420, 8, 1, "", "write"], [420, 8, 1, "", "writestr"]], "zipfile.ZipInfo": [[420, 7, 1, "", "CRC"], [420, 7, 1, "", "comment"], [420, 7, 1, "", "compress_size"], [420, 7, 1, "", "compress_type"], [420, 7, 1, "", "create_system"], [420, 7, 1, "", "create_version"], [420, 7, 1, "", "date_time"], [420, 7, 1, "", "external_attr"], [420, 7, 1, "", "extra"], [420, 7, 1, "", "extract_version"], [420, 7, 1, "", "file_size"], [420, 7, 1, "", "filename"], [420, 7, 1, "", "flag_bits"], [420, 8, 1, "", "from_file"], [420, 7, 1, "", "header_offset"], [420, 7, 1, "", "internal_attr"], [420, 8, 1, "", "is_dir"], [420, 7, 1, "", "reserved"], [420, 7, 1, "", "volume"]], "zipimport": [[421, 6, 1, "", "ZipImportError"], [421, 11, 1, "", "zipimporter"]], "zipimport.zipimporter": [[421, 7, 1, "", "archive"], [421, 8, 1, "", "create_module"], [421, 8, 1, "", "exec_module"], [421, 8, 1, "", "find_spec"], [421, 8, 1, "", "get_code"], [421, 8, 1, "", "get_data"], [421, 8, 1, "", "get_filename"], [421, 8, 1, "", "get_source"], [421, 8, 1, "", "invalidate_caches"], [421, 8, 1, "", "is_package"], [421, 8, 1, "", "load_module"], [421, 7, 1, "", "prefix"]], "zlib.Compress": [[422, 8, 1, "", "compress"], [422, 8, 1, "", "copy"], [422, 8, 1, "", "flush"]], "zlib.Decompress": [[422, 8, 1, "", "copy"], [422, 8, 1, "", "decompress"], [422, 7, 1, "", "eof"], [422, 8, 1, "", "flush"], [422, 7, 1, "", "unconsumed_tail"], [422, 7, 1, "", "unused_data"]], "zlib": [[422, 9, 1, "", "ZLIB_RUNTIME_VERSION"], [422, 9, 1, "", "ZLIB_VERSION"], [422, 12, 1, "", "adler32"], [422, 12, 1, "", "compress"], [422, 12, 1, "", "compressobj"], [422, 12, 1, "", "crc32"], [422, 12, 1, "", "decompress"], [422, 12, 1, "", "decompressobj"], [422, 6, 1, "", "error"]], "zoneinfo": [[423, 6, 1, "", "InvalidTZPathWarning"], [423, 9, 1, "", "TZPATH"], [423, 11, 1, "", "ZoneInfo"], [423, 6, 1, "", "ZoneInfoNotFoundError"], [423, 12, 1, "", "available_timezones"], [423, 12, 1, "", "reset_tzpath"]], "zoneinfo.ZoneInfo": [[423, 8, 1, "", "clear_cache"], [423, 8, 1, "", "from_file"], [423, 7, 1, "", "key"], [423, 8, 1, "", "no_cache"]], "json.tool": [[260, 14, 1, "cmdoption-json.tool-indent", "--compact"], [260, 14, 1, "cmdoption-json.tool-h", "--help"], [260, 14, 1, "cmdoption-json.tool-indent", "--indent"], [260, 14, 1, "cmdoption-json.tool-json-lines", "--json-lines"], [260, 14, 1, "cmdoption-json.tool-no-ensure-ascii", "--no-ensure-ascii"], [260, 14, 1, "cmdoption-json.tool-indent", "--no-indent"], [260, 14, 1, "cmdoption-json.tool-sort-keys", "--sort-keys"], [260, 14, 1, "cmdoption-json.tool-indent", "--tab"], [260, 14, 1, "cmdoption-json.tool-h", "-h"], [260, 14, 1, "cmdoption-json.tool-arg-infile", "infile"], [260, 14, 1, "cmdoption-json.tool-arg-outfile", "outfile"]], "python--m-py_compile": [[309, 14, 1, "cmdoption-python-m-py_compile", "-"], [309, 14, 1, "cmdoption-python-m-py_compile-q", "--quiet"], [309, 14, 1, "cmdoption-python-m-py_compile-q", "-q"], [309, 14, 1, "cmdoption-python-m-py_compile-arg-file", "&lt;file&gt;"]], "python--m-sqlite3-[-h]-[-v]-[filename]-[sql]": [[338, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-h", "--help"], [338, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-v", "--version"], [338, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-h", "-h"], [338, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-v", "-v"]], "unittest-discover": [[386, 14, 1, "cmdoption-unittest-discover-p", "--pattern"], [386, 14, 1, "cmdoption-unittest-discover-s", "--start-directory"], [386, 14, 1, "cmdoption-unittest-discover-t", "--top-level-directory"], [386, 14, 1, "cmdoption-unittest-discover-v", "--verbose"], [386, 14, 1, "cmdoption-unittest-discover-p", "-p"], [386, 14, 1, "cmdoption-unittest-discover-s", "-s"], [386, 14, 1, "cmdoption-unittest-discover-t", "-t"], [386, 14, 1, "cmdoption-unittest-discover-v", "-v"]]}, "objtypes": {"0": "c:member", "1": "c:macro", "2": "c:function", "3": "c:functionParam", "4": "c:type", "5": "c:struct", "6": "py:exception", "7": "py:attribute", "8": "py:method", "9": "py:data", "10": "py:module", "11": "py:class", "12": "py:function", "13": "std:pdbcommand", "14": "std:cmdoption", "15": "std:envvar", "16": "std:opcode", "17": "std:monitoring-event", "18": "std:2to3fixer"}, "objnames": {"0": ["c", "member", "C \u6210\u54e1\u51fd\u6578"], "1": ["c", "macro", "C \u5de8\u96c6"], "2": ["c", "function", "C \u51fd\u5f0f"], "3": ["c", "functionParam", "C \u51fd\u5f0f\u53c3\u6578"], "4": ["c", "type", "C \u578b\u5225"], "5": ["c", "struct", "C \u7d50\u69cb"], "6": ["py", "exception", "Python \u4f8b\u5916"], "7": ["py", "attribute", "Python \u5c6c\u6027"], "8": ["py", "method", "Python \u65b9\u6cd5"], "9": ["py", "data", "Python \u8cc7\u6599"], "10": ["py", "module", "Python \u6a21\u7d44"], "11": ["py", "class", "Python \u985e\u5225"], "12": ["py", "function", "Python \u51fd\u5f0f"], "13": ["std", "pdbcommand", "pdbcommand"], "14": ["std", "cmdoption", "\u7a0b\u5f0f\u9078\u9805"], "15": ["std", "envvar", "\u74b0\u5883\u8b8a\u6578"], "16": ["std", "opcode", "opcode"], "17": ["std", "monitoring-event", "monitoring-event"], "18": ["std", "2to3fixer", "2to3fixer"]}, "titleterms": {"python": [0, 1, 15, 32, 33, 34, 35, 42, 68, 70, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 95, 96, 99, 102, 103, 107, 109, 110, 112, 156, 157, 161, 174, 178, 186, 189, 191, 212, 252, 261, 262, 264, 265, 272, 291, 295, 297, 306, 309, 310, 313, 322, 328, 331, 338, 352, 353, 356, 360, 365, 367, 375, 376, 378, 382, 419, 424, 431, 435, 436, 438, 443, 446, 447, 448, 449, 450, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "bug": [1, 33, 85, 374], "abstract": [2, 75, 99, 120, 159, 248, 251, 466], "object": [2, 8, 9, 17, 23, 24, 27, 42, 44, 49, 50, 56, 58, 60, 61, 63, 64, 75, 79, 84, 85, 93, 94, 98, 99, 100, 101, 118, 124, 130, 137, 155, 175, 177, 181, 184, 188, 201, 204, 206, 224, 233, 253, 257, 260, 265, 266, 279, 281, 291, 293, 297, 299, 310, 317, 319, 323, 326, 328, 336, 338, 342, 346, 351, 357, 363, 382, 384, 387, 393, 400, 401, 403, 406, 408, 414, 417, 420, 426, 463, 464, 466, 467, 471, 475], "layer": [2, 66, 108, 476], "heap": [3, 61, 63, 99, 234], "api": [4, 5, 8, 10, 14, 30, 32, 33, 34, 42, 57, 73, 86, 94, 113, 121, 122, 124, 128, 165, 191, 194, 205, 208, 228, 249, 297, 338, 342, 346, 380, 397, 408, 411, 419, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "abi": [4, 57, 470, 473, 479], "pars": [5, 118, 205, 290, 302, 312, 329, 375, 392, 411, 467, 470, 473, 478, 479, 480], "argument": [5, 85, 90, 118, 174, 290, 291, 346, 351, 388, 426, 439, 459, 475, 477], "string": [5, 64, 78, 84, 85, 94, 104, 107, 257, 290, 317, 342, 343, 344, 345, 346, 423, 433, 439, 444, 460, 463, 464, 466, 468, 471, 472, 474, 477, 478, 479, 480], "and": [5, 7, 23, 25, 33, 58, 64, 71, 72, 73, 75, 76, 77, 79, 85, 92, 93, 94, 95, 99, 101, 104, 107, 108, 118, 123, 124, 126, 130, 131, 137, 144, 149, 152, 156, 159, 167, 174, 181, 184, 192, 197, 204, 213, 214, 224, 228, 233, 241, 245, 248, 250, 253, 257, 258, 260, 264, 266, 268, 273, 281, 290, 291, 297, 302, 306, 311, 317, 322, 326, 330, 331, 335, 338, 339, 342, 345, 351, 356, 362, 363, 364, 367, 369, 380, 382, 383, 384, 386, 387, 388, 408, 409, 411, 417, 423, 426, 427, 428, 430, 433, 454, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "buffer": [5, 7, 48, 63, 101, 131, 253, 256, 297, 318, 426, 472, 474, 479], "build": [5, 71, 73, 77, 384, 410, 411, 454, 461, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "valu": [5, 73, 84, 85, 94, 95, 118, 165, 174, 179, 184, 260, 290, 338, 403, 425, 426, 428], "boolean": [6, 94, 290, 342, 428, 463], "protocol": [7, 10, 40, 47, 48, 49, 54, 75, 99, 131, 165, 240, 246, 254, 303, 333, 386, 430, 472, 474, 476, 477, 479], "structur": [7, 63, 101, 165, 174, 271, 384, 392, 427, 433], "request": [7, 336, 391, 393, 477], "type": [7, 58, 61, 63, 64, 75, 76, 94, 95, 99, 103, 107, 118, 120, 174, 179, 181, 253, 274, 290, 297, 338, 342, 367, 373, 383, 384, 403, 405, 408, 425, 426, 434, 462, 463, 464, 465, 466, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480], "independ": [7, 464], "field": [7, 174, 179, 384, 470], "readon": 7, "format": [7, 100, 101, 245, 266, 281, 297, 342, 343, 345, 356, 419, 444, 450, 466, 467, 468, 469, 476, 477], "shape": [7, 382], "stride": 7, "suboffset": 7, "contigu": 7, "compound": [7, 382, 425], "complex": [7, 152, 342, 388, 426], "array": [7, 8, 85, 119, 145, 174, 260, 470, 472, 474, 477], "numpi": 7, "style": [7, 101, 226, 342, 359, 374, 439, 465], "pil": 7, "relat": [7, 108, 248, 430, 465, 466, 472], "function": [7, 25, 27, 45, 64, 73, 85, 93, 94, 95, 99, 104, 106, 118, 152, 161, 167, 174, 179, 189, 224, 249, 257, 259, 265, 266, 273, 280, 286, 297, 316, 317, 321, 338, 346, 351, 382, 383, 386, 398, 417, 425, 426, 428, 439, 460, 461, 464, 465, 466, 468, 474, 476, 477, 478], "byte": [8, 9, 107, 161, 174, 342, 345, 392, 433, 466, 476], "call": [10, 73, 85, 95, 174, 213, 290, 387, 388, 428, 476, 479], "tp_call": 10, "vectorcal": [10, 479], "capsul": [11, 467], "cell": [12, 175], "extra": 13, "inform": [13, 92, 101, 279, 291, 320, 353], "unicod": [14, 23, 64, 107, 156, 356, 385, 460, 462, 463, 468, 473, 474], "context": [17, 101, 133, 167, 168, 184, 191, 211, 245, 281, 338, 339, 342, 398, 426, 464, 465, 466, 474], "variabl": [17, 33, 100, 167, 168, 174, 179, 233, 290, 291, 353, 367, 459, 467, 477], "coroutin": [19, 137, 253, 383, 425, 426, 476], "datetim": [20, 181, 471, 473, 474, 477, 478, 479, 480], "descriptor": [21, 93, 124, 179, 186, 212, 291, 387, 426, 462, 475, 477], "print": [23, 118, 290, 379, 466, 468], "clear": 23, "rais": [23, 85, 100, 290, 434], "except": [23, 73, 85, 100, 101, 108, 118, 167, 191, 197, 211, 257, 290, 317, 331, 423, 425, 441, 465, 466, 467, 468, 471, 474], "issu": [23, 99, 212, 356, 459, 466], "warn": [23, 191, 265, 360, 398, 423, 461, 467, 471, 477, 478], "queri": [23, 28, 290, 291, 330, 338], "the": [23, 28, 33, 42, 66, 73, 76, 84, 85, 92, 95, 99, 100, 101, 103, 104, 107, 118, 124, 130, 149, 174, 186, 191, 194, 212, 213, 214, 228, 231, 249, 253, 265, 268, 280, 281, 290, 291, 294, 295, 306, 330, 335, 338, 342, 346, 350, 351, 352, 363, 367, 380, 382, 384, 388, 398, 408, 409, 411, 414, 419, 423, 425, 426, 428, 430, 434, 454, 459, 462, 463, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480], "error": [23, 73, 85, 108, 124, 156, 184, 186, 197, 279, 290, 312, 356, 391, 441, 442, 463, 472], "indic": 23, "signal": [23, 84, 124, 184, 212, 331, 386, 474, 476, 478, 480], "handl": [23, 101, 108, 124, 133, 175, 192, 241, 270, 290, 297, 338, 386, 403, 463, 466, 467, 475, 476], "recurs": 23, "control": [23, 28, 76, 338, 359, 382, 398, 401], "standard": [23, 156, 187, 210, 252, 260, 290, 342, 345, 383, 409, 430, 463, 480], "categori": [23, 398], "file": [24, 35, 64, 85, 100, 101, 103, 107, 118, 124, 147, 165, 186, 187, 191, 212, 214, 233, 245, 248, 249, 256, 266, 268, 270, 276, 280, 291, 302, 304, 318, 330, 352, 356, 367, 373, 420, 426, 449, 454, 459, 463, 473, 475, 476, 477, 478, 479], "float": [25, 184, 342, 426, 433, 464], "point": [25, 94, 184, 249, 433], "pack": [25, 345], "unpack": [25, 406, 439, 476], "frame": [26, 380, 426, 471, 477], "intern": [26, 266, 342, 426], "support": [28, 33, 41, 45, 50, 51, 64, 75, 76, 94, 95, 101, 103, 107, 126, 147, 153, 165, 167, 168, 228, 276, 310, 339, 356, 360, 369, 387, 410, 411, 412, 463, 466, 475, 476, 477, 478, 479, 480], "cyclic": [28, 76], "garbag": [28, 76, 99, 225, 460], "collect": [28, 76, 99, 158, 159, 189, 384, 460, 467, 470, 473, 474, 475, 476, 477, 478, 479, 480], "collector": [28, 225], "state": [28, 33, 99, 212, 242, 253, 281, 297, 356, 374, 382], "generat": [29, 78, 95, 199, 253, 290, 302, 311, 342, 388, 426, 428, 438, 462, 463, 464, 465, 476, 477], "pyhash": 30, "initi": [33, 34, 45, 73, 352, 476, 479], "final": [33, 75, 167, 400, 425, 465, 475, 481], "thread": [33, 84, 101, 113, 124, 137, 184, 256, 265, 331, 360, 363, 367, 450, 470, 471, 472, 473, 474, 475, 476, 478, 479], "befor": 33, "global": [33, 84, 99, 297, 351, 423, 434], "configur": [33, 34, 100, 101, 266, 332, 342, 353, 382, 423, 467, 473, 479], "interpret": [33, 99, 153, 155, 178, 253, 340, 345, 383, 419, 465, 466, 467, 472], "process": [33, 99, 101, 124, 130, 179, 271, 281, 291, 339, 361, 460, 466], "wide": 33, "paramet": [33, 73, 85, 101, 120, 174, 179, 291, 367, 384, 425, 439, 472, 479], "lock": [33, 136, 363, 474], "releas": [33, 467, 474, 475, 476, 477, 478, 479, 480, 481], "gil": [33, 472], "from": [33, 73, 79, 84, 85, 93, 99, 100, 101, 137, 152, 167, 174, 204, 216, 280, 346, 382, 420, 421, 459, 463, 466], "extens": [33, 58, 71, 73, 75, 76, 77, 99, 109, 177, 245, 264, 300, 474, 476], "code": [33, 85, 107, 108, 118, 124, 155, 157, 245, 248, 253, 342, 351, 386, 398, 426, 439, 459, 463, 471, 473, 474, 476, 480], "non": [33, 104, 260, 338, 339, 411, 475], "creat": [33, 61, 64, 79, 84, 85, 94, 95, 98, 101, 124, 137, 204, 233, 290, 338, 419, 426, 475], "caution": 33, "about": [33, 85, 149, 191, 460], "fork": 33, "sub": [33, 63, 118], "per": [33, 99, 351, 466, 472], "caveat": [33, 264, 419], "asynchron": [33, 253, 331, 336, 384, 426, 428, 477], "notif": [33, 93], "profil": [33, 306], "trace": [33, 378, 380], "advanc": [33, 100, 191, 466], "debugg": [33, 295], "local": [33, 64, 228, 264, 351, 363, 459, 464, 470, 471, 472, 476, 477, 478], "storag": [33, 478], "specif": [33, 75, 95, 156, 332, 343, 374, 382, 403, 463, 464, 465, 466, 467], "tss": 33, "dynam": [33, 93, 174, 383, 427], "alloc": [33, 42, 61, 75, 380, 463, 475], "tls": [33, 124, 339], "pywidestringlist": 34, "pystatus": 34, "pypreconfig": 34, "preiniti": 34, "with": [34, 71, 78, 79, 84, 85, 92, 94, 98, 99, 101, 124, 135, 156, 167, 174, 184, 212, 241, 253, 265, 297, 329, 330, 338, 346, 363, 375, 384, 388, 400, 411, 419, 420, 425, 426, 427, 465, 466, 474, 476, 478, 479], "pyconfig": 34, "isol": [34, 99], "path": [34, 248, 292, 294, 352, 353, 420, 430, 459, 470, 472, 477, 479], "py_runmain": 34, "py_getargcargv": 34, "multi": [34, 45, 256, 339, 450, 464, 473, 476], "phase": [34, 45, 476], "privat": [34, 126], "provision": [34, 474], "includ": 35, "iter": [37, 85, 94, 95, 202, 216, 257, 342, 386, 426, 428, 438, 464, 468, 476], "list": [38, 78, 85, 95, 98, 145, 318, 342, 425, 428, 439, 440, 447, 450, 460, 466, 468], "map": [40, 51, 63, 64, 165, 249, 274, 276, 342, 408, 425, 426], "data": [41, 76, 85, 94, 95, 100, 103, 107, 108, 174, 179, 268, 296, 297, 305, 345, 363, 367, 423, 450, 459, 464, 468, 471, 479], "marshal": [41, 272, 297, 475], "domain": [42, 156], "raw": [42, 64, 85, 256, 317], "memori": [42, 268, 276, 339, 342, 380, 475, 476], "interfac": [42, 78, 79, 98, 149, 188, 189, 225, 257, 291, 309, 318, 335, 356, 366, 367, 378, 386, 393, 404, 414, 420, 473], "default": [42, 85, 118, 179, 290, 338, 339, 356, 387, 398, 420, 459, 467, 475], "custom": [42, 93, 94, 100, 101, 118, 126, 130, 165, 174, 178, 201, 257, 266, 268, 281, 297, 306, 338, 426, 459, 475, 477, 478], "debug": [42, 95, 124, 149, 191, 245, 454, 467, 479], "hook": [42, 248, 318, 332, 430, 461, 463, 479], "on": [42, 77, 84, 85, 95, 98, 149, 212, 224, 228, 245, 331, 335, 339, 342, 346, 351, 461], "pymalloc": [42, 463], "arena": 42, "tracemalloc": [42, 380, 475, 477, 478, 480], "memoryview": [43, 342, 467, 474], "instanc": [44, 85, 93, 94, 98, 179, 195, 297, 342, 426], "method": [44, 64, 73, 76, 78, 79, 84, 85, 93, 94, 99, 104, 118, 124, 167, 171, 281, 286, 290, 294, 335, 338, 342, 382, 387, 388, 400, 408, 426, 428, 438, 444, 460, 464, 465, 468, 476, 477, 478, 480], "modul": [45, 73, 84, 85, 92, 95, 98, 99, 100, 101, 104, 149, 166, 179, 228, 248, 257, 265, 277, 281, 294, 297, 306, 310, 322, 338, 346, 352, 367, 382, 386, 421, 426, 430, 448, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 473, 476, 477, 478], "singl": [45, 84, 101, 167], "low": [45, 113, 335, 472], "level": [45, 66, 72, 100, 101, 104, 113, 149, 257, 260, 265, 326, 327, 335, 346, 476], "creation": [45, 98, 291, 336, 383, 397, 426, 477], "lookup": [45, 93, 426], "none": [46, 426], "number": [47, 63, 85, 108, 152, 167, 219, 260, 287, 291, 426, 447, 466], "implement": [50, 79, 84, 101, 124, 167, 248, 260, 319, 409, 426, 432, 474, 477, 478], "for": [51, 64, 73, 85, 92, 100, 101, 107, 118, 124, 147, 152, 153, 159, 167, 174, 175, 177, 188, 226, 241, 248, 251, 264, 290, 297, 317, 321, 326, 331, 336, 339, 356, 360, 376, 382, 383, 384, 398, 404, 410, 411, 412, 413, 414, 425, 426, 428, 430, 439, 459, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480], "perf": [51, 102], "reflect": 53, "sequenc": [54, 60, 63, 85, 342, 346, 425, 426, 440], "ellipsi": [56, 342, 426], "base": [58, 85, 101, 131, 155, 156, 159, 211, 228, 248, 251, 281, 363, 413, 430, 466, 467, 473, 478], "macro": 58, "access": [58, 64, 94, 99, 165, 174, 249, 250, 263, 264, 266, 353, 364, 403, 417, 426, 462, 472, 478], "attribut": [58, 75, 76, 85, 92, 93, 94, 101, 233, 253, 265, 290, 291, 338, 342, 350, 388, 414, 426, 428, 430, 461, 462, 477, 478], "of": [58, 84, 85, 93, 94, 95, 98, 99, 100, 101, 103, 147, 165, 167, 179, 186, 253, 257, 277, 281, 291, 297, 330, 331, 342, 346, 350, 352, 380, 382, 384, 388, 397, 398, 417, 420, 426, 427, 433, 454, 459, 460, 467, 468, 472, 475, 476, 477, 478, 479], "member": [58, 93, 94, 253], "flag": [58, 94, 104, 118, 167, 191, 253, 290, 317, 454], "defin": [58, 75, 76, 85, 98, 99, 266, 290, 384, 473], "getter": [58, 99], "setter": [58, 99], "tupl": [60, 78, 85, 158, 342, 350, 384, 440], "struct": [60, 345, 474, 475, 477], "quick": [63, 118, 165, 184, 382], "refer": [63, 73, 75, 85, 95, 107, 174, 281, 290, 306, 338, 367, 382, 400, 411, 428, 430, 450, 461], "tp": 63, "slot": [63, 64, 99], "typedef": 63, "pytypeobject": 63, "definit": [63, 93, 257, 425, 438, 477], "pyobject": 63, "pyvarobject": 63, "static": [63, 85, 93, 99, 103, 253, 426, 471, 472], "async": [63, 120, 425, 476], "charact": [64, 104, 175, 260, 345], "properti": [64, 93, 107, 466], "encod": [64, 107, 156, 196, 260, 338, 392, 433, 446, 463, 470, 477], "system": [64, 72, 149, 210, 213, 291, 311, 346, 420, 430, 454, 461, 475, 476, 477], "wchar_t": 64, "built": [64, 95, 342, 383, 426, 460, 464, 478], "in": [64, 72, 73, 77, 79, 84, 85, 95, 99, 100, 101, 103, 107, 124, 137, 156, 167, 174, 179, 191, 245, 268, 289, 290, 294, 338, 342, 363, 382, 383, 384, 408, 426, 459, 460, 461, 464, 468, 470, 471, 472, 475, 476, 477, 478, 479, 480], "codec": [64, 156, 463, 470, 473, 474, 475], "generic": [64, 75, 342, 384, 425, 426, 453, 471, 478, 480], "utf": [64, 156, 291, 338, 459, 477, 478], "32": 64, "16": 64, "escap": 64, "latin": 64, "ascii": [64, 144, 176, 392], "mbcs": [64, 156], "window": [64, 77, 86, 92, 129, 156, 175, 187, 245, 301, 346, 367, 382, 402, 403, 404, 459, 463, 466, 467, 471, 474, 477, 478, 481], "veri": [66, 72], "high": [66, 72, 327, 346], "setuptool": 71, "app": 72, "embed": [72, 352, 460], "beyond": [72, 118], "an": [72, 73, 79, 84, 85, 93, 101, 107, 167, 181, 192, 194, 203, 248, 260, 346, 397, 459, 467], "overview": [72, 93, 249, 425], "pure": [72, 93], "extend": [72, 85, 126, 249, 290, 291, 397, 460, 463], "compil": [72, 73, 104, 157, 161, 423, 454, 479], "link": [72, 118, 174], "under": 72, "unix": [72, 77, 84, 124, 149, 171, 182, 218, 229, 301, 354, 389, 458], "like": [72, 101, 230], "intermezzo": 73, "tabl": [73, 279, 297], "linkag": 73, "extract": [73, 356, 420], "keyword": [73, 85, 179, 261, 433, 439, 470, 476, 477], "arbitrari": [73, 79, 100, 290, 439, 471], "count": 73, "ownership": 73, "rule": [73, 329, 331, 462], "thin": 73, "ice": 73, "null": [73, 342], "pointer": [73, 174], "write": [73, 85, 107, 126, 131, 268, 317, 338, 356, 465, 466], "provid": [73, 76, 100, 297, 353], "cpython": [74, 78, 97, 470, 471, 472, 475, 477, 478, 479, 480], "runtim": [74, 86, 280, 313, 423, 478, 479], "assort": 75, "topic": 75, "de": [75, 147], "present": [75, 468], "manag": [75, 93, 99, 101, 133, 167, 168, 195, 242, 281, 338, 342, 367, 373, 398, 426, 465, 466], "comparison": [75, 94, 98, 106, 214, 257, 297, 428, 461, 468], "weak": [75, 400, 450, 461], "more": [75, 92, 98, 101, 104, 382, 388, 472], "suggest": 75, "tutori": [76, 93, 100, 174, 184, 290, 338], "basic": [76, 108, 191, 373, 418, 426], "adding": [76, 101, 290, 467, 477], "to": [76, 79, 84, 85, 94, 99, 100, 101, 103, 107, 152, 188, 248, 249, 257, 263, 264, 266, 274, 291, 294, 297, 306, 338, 346, 353, 367, 382, 384, 387, 388, 460, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480], "exampl": [76, 93, 101, 153, 159, 165, 167, 186, 188, 191, 198, 277, 290, 317, 330, 356, 379, 393, 397, 417], "finer": [76, 94, 474], "over": [76, 85, 216], "subclass": [76, 85, 94, 101, 241, 319, 388, 426], "other": [76, 79, 85, 94, 98, 100, 101, 118, 137, 257, 280, 290, 297, 342, 351, 384, 433, 460, 461, 463, 467, 468, 475, 476, 477, 478], "cookbook": [77, 94, 101], "approach": [77, 468, 470], "differ": [77, 85, 94, 103, 188, 233, 380, 382], "between": [77, 85, 107, 144, 281, 290, 433], "use": [77, 84, 85, 94, 98, 100, 101, 103, 104, 149, 161, 167, 194, 233, 268, 277, 280, 281, 306, 312, 338, 346, 351, 363, 373, 375, 382, 386, 393, 423, 426, 465, 466, 472, 479], "dlls": [77, 174], "practic": [77, 85, 93, 324], "self": [78, 85, 339, 471, 479], "express": [78, 79, 95, 104, 107, 317, 428, 434, 464, 465, 479], "index": [78, 85, 367, 463, 465], "len": 78, "join": [78, 433], "switch": 78, "case": [78, 99, 386, 425, 461], "lambda": [78, 85, 95, 428, 439], "dictionari": [78, 101, 266, 388, 428, 440, 467, 469, 473, 474, 480], "sort": [78, 85, 106], "spec": [78, 430], "goto": 78, "if": [78, 85, 100, 181, 248, 425, 439], "while": [78, 425], "def": 78, "class": [78, 79, 85, 93, 94, 99, 101, 118, 155, 156, 159, 179, 197, 211, 214, 228, 248, 251, 279, 281, 297, 306, 310, 314, 327, 342, 345, 382, 383, 384, 386, 393, 413, 423, 425, 426, 433, 438, 462, 465, 466, 471, 474, 477], "how": [79, 84, 85, 94, 101, 191, 290, 338, 367, 382], "can": [79, 84, 85, 248, 297], "evalu": [79, 427, 428, 477, 478], "py_buildvalu": 79, "pyerr_print": 79, "stdout": [79, 84], "stderr": [79, 84], "do": [79, 84, 85, 367], "make": [79, 85, 99, 103, 317, 382, 460, 467, 472, 476, 477], "linux": [79, 102, 109, 291, 301, 458], "__builtin_new": 79, "__pure_virtu": 79, "some": 79, "through": 79, "inherit": [79, 179, 291, 382, 438, 462, 475], "beta": [80, 481], "www": [80, 84], "org": [80, 459], "monti": 80, "gui": [81, 101, 279, 457], "tkinter": [81, 187, 245, 367, 368, 369, 370, 371, 372, 373, 374, 471, 472, 476, 477, 478, 479], "tk": [81, 366, 367, 373, 374, 467], "key": [81, 106, 233, 245, 281, 339, 474], "bind": [81, 245, 338, 367, 427], "find": [84, 85, 174, 277, 317, 411, 459], "or": [84, 85, 101, 118, 124, 174, 181, 342, 346, 378, 379, 425, 439], "applic": [84, 92, 93, 101, 156, 228, 245, 345, 419, 457, 459, 465, 476], "perform": [84, 85, 104, 256, 297, 454, 468], "task": [84, 122, 124, 126, 137], "math": [84, 273, 471, 472, 473, 474, 476, 477, 478, 479, 480], "py": [84, 103, 112, 471], "socket": [84, 101, 105, 108, 124, 131, 134, 335, 339, 360, 424, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480], "regex": 84, "script": [84, 149, 277, 382, 459, 465], "curs": [84, 92, 175, 176, 177, 470, 474, 476, 479, 480], "termcap": 84, "is": [84, 85, 92, 100, 181, 306, 464, 468], "there": [84, 85], "equival": [84, 85, 93], "onexit": 84, "whi": [84, 85, 464], "don": 84, "my": [84, 85], "handler": [84, 100, 101, 108, 124, 138, 156, 212, 265, 266, 267, 331, 336, 367, 405, 413], "work": [84, 85, 124, 184, 191, 338, 384, 420], "document": [84, 199, 311, 408, 411, 418, 439, 466, 467, 474, 475, 479, 481], "doc": 84, "get": [84, 85, 98, 130, 380, 382, 457], "keypress": [84, 86], "at": 84, "time": [84, 100, 101, 181, 364, 423, 463, 471, 473, 474, 476, 477, 478, 479, 480], "parcel": 84, "out": [84, 99, 297, 479], "among": 84, "bunch": 84, "worker": [84, 281], "what": [84, 85, 92, 100, 191, 290, 297, 306, 367, 460], "kind": [84, 93], "mutat": 84, "are": [84, 85, 94, 191, 290, 475], "safe": [84, 99, 475], "seem": 84, "os": [84, 211, 291, 292, 294, 346, 360, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "read": [84, 99, 107, 124, 131, 250, 268, 356], "pipe": [84, 124, 281, 299], "popen": [84, 346, 473], "rs232": 84, "doesn": 84, "close": [84, 93], "sys": [84, 118, 350, 351, 352, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480], "stdin": 84, "realli": 84, "it": [84, 85, 108, 191, 290], "network": [84, 98, 101, 124, 257, 258, 335, 336, 467], "internet": [84, 254, 344], "cgi": [84, 149, 150, 476], "submiss": 84, "post": [84, 179], "html": [84, 236, 237, 238, 473, 474, 475], "avoid": [84, 99, 101], "block": [84, 101, 103, 339, 380, 411, 425, 468], "connect": [84, 124, 131, 266, 281, 335, 338], "you": [84, 85, 103, 480], "persist": [84, 296, 297, 328], "unboundlocalerror": 85, "loop": [85, 124, 126, 131], "all": [85, 281, 290, 317, 380, 467, 476, 477], "return": [85, 93, 174, 434, 459], "same": [85, 101, 388, 479], "result": [85, 340, 392], "best": [85, 324, 339], "import": [85, 112, 120, 209, 248, 249, 265, 266, 267, 360, 367, 388, 421, 430, 434, 448, 461, 463, 464, 465, 466, 471, 474, 475], "share": [85, 174, 281, 474], "pass": [85, 95, 101, 174, 434, 439], "option": [85, 103, 118, 191, 226, 245, 290, 356, 367, 374, 378, 420, 453, 454, 477], "one": [85, 99, 147], "anoth": 85, "output": [85, 101, 245, 330, 450], "by": [85, 174, 277, 393, 467, 475], "higher": [85, 149, 224], "order": [85, 174, 179, 224, 266, 290, 345, 388, 428, 467, 468, 469, 477], "up": [85, 108, 167, 248], "comma": [85, 463], "oper": [85, 95, 106, 224, 241, 257, 280, 289, 291, 330, 339, 342, 428, 433, 462, 468, 471, 475, 476, 480], "preced": [85, 428], "possibl": [85, 382], "obfusc": 85, "liner": 85, "doe": [85, 367], "slash": 85, "mean": 85, "22": 85, "10": [85, 88, 380, 470, 477, 478, 479, 481], "int": [85, 342], "liter": [85, 107, 120, 425, 428, 433, 444, 466, 471, 474, 477], "instead": [85, 103, 468], "syntaxerror": [85, 470], "modifi": [85, 104, 378, 459], "place": [85, 289], "perl": 85, "chomp": 85, "remov": [85, 459, 465, 466, 467, 476, 477, 478, 479, 480], "trail": 85, "newlin": [85, 463], "scanf": [85, 317], "sscanf": 85, "unicodedecodeerror": 85, "unicodeencodeerro": 85, "end": [85, 92], "odd": 85, "backslash": [85, 104], "program": [85, 92, 107, 175, 228, 264, 281, 367, 427, 457], "too": 85, "slow": 85, "speed": 85, "most": 85, "effici": [85, 330], "way": 85, "concaten": [85, 433], "mani": 85, "togeth": [85, 290], "convert": [85, 107, 144, 338, 346], "negat": 85, "revers": [85, 464], "duplic": [85, 94], "multipl": [85, 99, 100, 101, 216, 387, 388, 462, 476], "item": [85, 374], "multidimension": 85, "appli": [85, 388], "a_tupl": 85, "when": [85, 94, 98], "addit": [85, 205, 342, 383, 459, 476], "want": 85, "complic": 85, "schwartzian": 85, "transform": [85, 156, 471], "check": [85, 103, 191, 248, 290, 317, 388, 426, 480], "given": 85, "deleg": [85, 99, 474], "deriv": [85, 94, 233], "that": [85, 93, 94, 95, 101, 264], "organ": [85, 386], "easier": 85, "chang": [85, 99, 100, 228, 382, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480], "overload": 85, "constructor": [85, 126, 228, 346], "tri": [85, 167, 425, 465], "__spam": 85, "_someclassname__spam": 85, "__del__": [85, 400], "but": 85, "not": [85, 99, 342, 382], "delet": [85, 460], "id": [85, 364], "appear": [85, 382], "be": [85, 248, 297], "uniqu": [85, 94], "reli": 85, "ident": [85, 428], "test": [85, 95, 149, 191, 339, 360, 386, 388, 398, 428, 476, 481], "cach": [85, 430, 479], "pyc": [85, 473, 478], "current": [85, 124, 253, 380], "name": [85, 93, 94, 104, 118, 156, 260, 291, 350, 356, 383, 426, 427, 428, 463, 474], "have": 85, "mutual": [85, 118], "each": 85, "__import__": 85, "pyd": 86, "dll": 86, "tab": [86, 374, 445], "ms": [86, 280, 402], "win": 86, "crt": 86, "l1": 86, "annot": [88, 342, 427, 434, 439, 477, 478], "__annotations__": 88, "argpars": [89, 118, 467, 470, 473, 475, 476, 478], "clinic": [90, 475], "start": [92, 165, 184, 281, 382], "pad": 92, "display": [92, 100, 124, 175, 380, 428, 461], "text": [92, 103, 156, 175, 191, 245, 263, 317, 338, 342, 361, 362, 372, 408, 468], "color": [92, 245, 382], "user": [92, 212, 245, 266, 306, 353, 366, 384, 466], "input": [92, 175, 187, 216, 376, 382], "howto": [93, 94, 95, 107], "primer": 93, "simpl": [93, 104, 191, 233, 329, 434, 462, 463], "constant": [93, 175, 276, 312, 338, 346, 364, 375, 403], "thought": 93, "complet": [93, 245, 318, 321, 326, 445], "valid": [93, 405], "technic": 93, "introduct": [93, 107, 306], "invoc": [93, 346], "super": 93, "summari": [93, 279, 474, 475, 476, 477, 478, 479, 480], "logic": [93, 184, 257, 433], "automat": [93, 94, 245], "orm": 93, "__slots__": [93, 426, 470], "enum": [94, 209, 470, 471, 472, 475, 476, 477, 478], "programmat": [94, 248, 378], "enumer": [94, 463], "their": [94, 317, 388], "ensur": 94, "allow": 94, "restrict": [94, 297, 328, 393, 427], "dataclass": [94, 179, 470, 471, 478], "pickl": [94, 170, 297, 298, 423, 463, 474, 475, 476, 477, 479], "intenum": 94, "strenum": 94, "intflag": 94, "__new__": 94, "vs": [94, 317, 384, 468], "__init__": [94, 179], "__dunder__": [94, 209], "_sunder_": [94, 209], "_private__nam": 94, "mix": 94, "combin": [94, 339], "minutia": 94, "aka": 94, "omit": 94, "auto": 94, "descript": [94, 159, 312], "orderedenum": 94, "duplicatefreeenum": 94, "planet": 94, "timeperiod": 94, "enumtyp": 94, "formal": [95, 472], "provabl": 95, "modular": 95, "eas": 95, "compos": 95, "comprehens": [95, 120, 440, 460, 472, 477], "into": [95, 101, 382, 392], "itertool": [95, 259, 470, 472, 473, 474, 478, 479], "new": [95, 290, 398, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480], "element": [95, 408, 411], "select": [95, 101, 187, 326, 339, 424, 473, 474, 475], "combinator": 95, "group": [95, 104, 118, 137, 211, 231, 290, 386, 425], "functool": [95, 224, 471, 473, 474, 475, 476, 478, 479], "small": 95, "revis": 95, "histori": [95, 318, 445], "acknowledg": 95, "general": [95, 290, 331, 476], "dtrace": [97, 477], "systemtap": [97, 477], "tapset": 97, "ipaddress": [98, 257, 474, 475, 476, 478, 480], "address": [98, 257, 281], "note": [98, 184, 205, 331, 335, 336, 339, 374], "ip": [98, 257], "version": [98, 103, 249, 290, 356, 398, 459, 473], "host": [98, 257], "inspect": [98, 253, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480], "as": [98, 100, 101, 167, 257, 345, 382, 425, 426, 465, 466, 479], "detail": [98, 159, 264, 266], "fail": [98, 476], "who": 99, "should": [99, 480], "this": 99, "background": [99, 264, 290], "enter": 99, "surpris": [99, 174], "edg": [99, 326], "opt": 99, "limit": [99, 260, 320, 342, 420, 459], "tp_travers": 99, "lower": 99, "tp_dealloc": 99, "overrid": [99, 398, 472], "tp_free": 99, "pyobject_new": 99, "regular": [99, 104, 107, 317, 430], "lifetim": [99, 126], "open": [99, 101, 108, 124, 250], "scope": [99, 427, 438, 461, 462], "lossless": 99, "convers": [99, 152, 174, 257, 273, 342, 364, 428, 464], "log": [100, 101, 265, 266, 267, 281, 450, 463, 467, 471, 473, 474, 475, 476, 477, 478, 479], "messag": [100, 101, 194, 203, 205, 228, 233, 264, 269, 371, 472], "date": [100, 124, 181, 463], "next": [100, 481], "step": 100, "flow": 100, "logger": [100, 101, 265], "formatt": [100, 101, 265], "happen": 100, "no": [100, 475], "librari": [100, 101, 110, 161, 174, 252, 257, 354, 466, 481], "dure": 100, "optim": 100, "resourc": [100, 101, 250, 251, 320, 420, 472, 475, 478], "destin": 101, "server": [101, 124, 131, 243, 336, 339, 417, 418, 473, 478], "deal": 101, "send": 101, "receiv": 101, "event": [101, 124, 126, 136, 323, 331, 351, 363, 367, 374, 382], "across": 101, "run": [101, 124, 137, 245, 386, 459], "listen": [101, 281], "product": 101, "contextu": 101, "your": [101, 103, 149, 174, 228, 290, 480], "loggeradapt": [101, 265], "impart": 101, "than": 101, "dict": [101, 342, 387, 388, 477], "filter": [101, 265, 268, 356, 378, 380, 398], "contextvar": [101, 168, 478], "concurr": [101, 123, 137, 162, 163, 164, 473, 476, 477, 478, 480], "futur": [101, 111, 124, 126, 127, 164, 434, 467, 473, 476, 477, 478, 480], "processpoolexecutor": [101, 164], "deploy": 101, "web": [101, 241, 401, 473], "gunicorn": 101, "uwsgi": 101, "rotat": 101, "altern": [101, 319, 432, 459], "logrecord": [101, 265], "queuehandl": [101, 266, 267], "zeromq": 101, "queuelisten": [101, 266, 267], "namer": 101, "elabor": 101, "multiprocess": [101, 281, 282, 466, 474, 475, 476, 477, 478, 479, 480], "insert": 101, "bom": [101, 156], "sent": 101, "sysloghandl": [101, 267], "dictconfig": 101, "particular": 101, "throughout": 101, "factori": [101, 137, 179, 257, 338], "speak": 101, "them": 101, "condit": [101, 136, 290, 363, 428, 440, 465], "email": [101, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 473, 474, 475, 476, 477], "utc": 101, "gmt": 101, "via": [101, 338, 459], "cli": 101, "starter": 101, "templat": [101, 187, 299, 450], "qt": 101, "syslog": [101, 354], "rfc5424": 101, "treat": 101, "stream": [101, 122, 131, 156, 216, 256, 297], "pattern": [101, 104, 120, 218, 382, 425, 426], "nullhandl": [101, 267], "lot": 101, "sure": 103, "specifi": [103, 174, 268, 384, 419, 467, 469], "proper": 103, "setup": 103, "divis": [103, 462], "versus": [103, 104, 426], "binari": [103, 109, 144, 156, 256, 342, 345, 417, 428, 450], "featur": [103, 279, 384, 427, 465, 467, 470, 472, 475, 476, 477, 478, 479, 480], "detect": 103, "prevent": 103, "compat": [103, 329], "regress": [103, 360], "which": [103, 191], "depend": [103, 330, 398], "transit": 103, "updat": [103, 398, 467, 480], "denot": 103, "continu": [103, 174, 434, 439], "integr": [103, 265, 426], "stay": 103, "consid": 103, "match": [104, 118, 120, 218, 317, 388, 425, 426, 439], "repeat": [104, 260], "thing": 104, "plagu": 104, "power": [104, 152, 273, 428], "metacharact": 104, "captur": [104, 425], "lookahead": 104, "assert": [104, 388, 434], "split": 104, "search": [104, 245, 249, 317, 352, 430], "replac": [104, 167, 245, 346, 430], "common": [104, 149, 342, 468], "problem": [104, 149], "greedi": 104, "re": [104, 179, 317, 386, 471, 474, 475, 476, 477, 478], "verbos": [104, 388], "feedback": 104, "ipc": 105, "decor": [106, 167, 387, 464, 466, 472], "undecor": 106, "sourc": [107, 245, 248, 253, 376, 423, 463], "compar": [107, 400], "filenam": [107, 218, 274], "tip": [107, 264], "awar": [107, 181, 476], "unknown": 107, "urllib": [108, 390, 391, 392, 393, 394, 470, 473, 474, 475, 476, 477, 478, 479, 480], "articl": 108, "url": [108, 390, 392, 393], "header": [108, 200, 201, 405, 474], "urlerror": 108, "httperror": 108, "wrap": [108, 362, 367], "info": 108, "geturl": 108, "authent": [108, 281], "proxi": [108, 281, 387], "pip": [109, 208, 451, 467, 475], "2to3": 110, "fixer": 110, "lib2to3": 110, "__future__": [111, 461], "__main__": [112, 430, 478], "__name__": 112, "idiomat": 112, "_thread": [113, 470], "abc": [114, 159, 248, 251, 287, 384, 470, 473, 474, 475, 476, 480], "aifc": [115, 475, 478], "aiff": 115, "parser": [118, 165, 205, 226, 238, 290, 312, 412, 414, 466, 480], "command": [118, 153, 161, 188, 189, 226, 290, 291, 295, 309, 346, 356, 376, 378, 386, 420, 459, 467, 473, 475, 477], "line": [118, 153, 161, 188, 189, 216, 226, 263, 290, 291, 309, 318, 356, 376, 378, 386, 420, 433, 459, 464, 467, 473], "core": [118, 460, 478, 481], "add_argu": 118, "argumentpars": 118, "prog": 118, "usag": [118, 191, 277, 320, 376, 378, 417], "epilog": 118, "parent": 118, "formatter_class": 118, "prefix_char": 118, "fromfile_prefix_char": 118, "argument_default": 118, "allow_abbrev": 118, "conflict_handl": 118, "add_help": 118, "exit_on_error": 118, "action": [118, 290], "narg": 118, "const": 118, "choic": 118, "requir": [118, 174, 249, 454], "metavar": 118, "dest": 118, "parse_arg": 118, "syntax": [118, 120, 411, 441, 466, 468, 472, 474, 476, 477], "invalid": [118, 430], "contain": [118, 159, 257, 426], "abbrevi": 118, "prefix": [118, 257, 353, 480], "argv": 118, "namespac": [118, 382, 411, 426, 430, 438, 474], "util": [118, 167, 174, 207, 248, 286, 300, 307, 360, 383, 405, 415], "filetyp": 118, "exclus": 118, "help": [118, 245, 290, 311, 382], "partial": [118, 224, 388, 410, 465], "exit": [118, 138], "intermix": 118, "upgrad": [118, 124], "optpars": [118, 290, 463], "ast": [120, 466, 473, 477, 479, 480], "tree": [120, 233, 375, 410, 411], "grammar": 120, "node": [120, 408], "subscript": [120, 428], "await": [120, 123, 137, 426, 428, 476], "asyncio": [121, 123, 133, 168, 424, 470, 471, 472, 475, 476, 477, 478, 479, 480], "hello": [121, 124, 367], "world": [121, 124, 367], "queue": [122, 132, 234, 281, 314, 440, 478], "subprocess": [122, 124, 131, 135, 245, 346, 464, 474, 475, 476, 477, 478], "synchron": [122, 136, 281], "multithread": 123, "never": 123, "retriev": [123, 253, 379], "stop": 124, "schedul": [124, 137, 291, 323], "callback": [124, 174, 290, 351, 463], "delay": 124, "transfer": 124, "watch": 124, "direct": [124, 191, 248, 384, 461], "dns": 124, "execut": [124, 162, 191, 245, 322, 331, 351, 378, 426, 427, 459, 465], "pool": [124, 281], "enabl": [124, 467, 475], "mode": [124, 184, 186, 233, 291, 467, 478], "call_soon": 124, "call_lat": 124, "set": [124, 130, 245, 248, 331, 342, 351, 367, 382, 426, 428, 440, 459, 463, 464], "sigint": 124, "sigterm": 124, "polici": [128, 130, 206, 474], "maco": [129, 245, 301, 454, 479, 480, 481], "watcher": 130, "transport": 131, "hierarchi": [131, 211, 466, 474], "onli": [131, 179, 245, 439, 470, 478, 479], "datagram": 131, "tcp": [131, 134], "echo": [131, 134], "client": [131, 240, 241, 246, 281, 303, 333, 339, 417, 467, 473, 475, 476, 477, 478], "udp": 131, "exist": 131, "subprocess_exec": 131, "subprocessprotocol": 131, "prioriti": 132, "lifo": 132, "runner": 133, "keyboard": 133, "interrupt": [133, 420], "streamread": [134, 156], "streamwrit": [134, 156], "http": [134, 239, 240, 241, 242, 243, 405, 467, 473, 474, 475, 476, 477, 478, 480], "interact": [135, 155, 191, 427, 461, 465], "primit": [136, 137, 281, 384], "semaphor": [136, 363], "boundedsemaphor": 136, "barrier": [136, 363], "cancel": 137, "sleep": 137, "eager": 137, "shield": 137, "timeout": [137, 212, 335], "wait": [137, 326], "introspect": [137, 253, 384], "atexit": 138, "audioop": [139, 424, 475], "base64": [141, 470, 474, 475], "base16": 141, "base32": 141, "base85": 141, "secur": [141, 149, 233, 243, 266, 339, 346, 392, 454, 467, 470, 475, 478, 479, 480, 481], "consider": [141, 243, 266, 339, 346, 430], "bdb": [142, 470], "binascii": [144, 474, 477, 478], "bisect": [145, 470], "algorithm": [145, 249, 268, 382, 475], "builtin": [146, 427, 468, 479, 481], "bz2": [147, 474, 476], "bzip2": 147, "compress": [147, 268], "increment": [147, 156, 266], "shot": 147, "calendar": [148, 472, 478], "care": 149, "instal": [149, 279, 353, 457, 459, 460, 475], "solut": 149, "cgitb": 150, "traceback": [150, 212, 379, 380, 426, 470, 471, 475, 476, 477], "chunk": 151, "iff": 151, "cmath": [152, 476, 477], "mathemat": 152, "polar": 152, "coordin": 152, "logarithm": [152, 273], "trigonometr": [152, 273], "hyperbol": [152, 273], "classif": 152, "cmd": 153, "orient": [153, 382], "consol": [155, 280, 477], "registri": [156, 403, 459], "stateless": 156, "decod": [156, 260], "incrementalencod": 156, "incrementaldecod": 156, "streamreaderwrit": 156, "streamrecod": 156, "idna": 156, "internation": [156, 200, 228], "ansi": 156, "codepag": 156, "utf_8_sig": 156, "signatur": [156, 253], "codeop": 157, "chainmap": 158, "counter": 158, "dequ": 158, "defaultdict": 158, "namedtupl": 158, "ordereddict": 158, "userdict": 158, "userlist": 158, "userstr": 158, "recip": [159, 167, 184, 259, 338], "colorsi": [160, 475], "compileal": [161, 476, 478, 480], "public": [161, 382], "executor": 164, "threadpoolexecutor": 164, "configpars": [165, 472, 473, 476], "datatyp": [165, 463], "fallback": 165, "ini": [165, 459], "interpol": 165, "behaviour": 165, "legaci": [165, 346, 393, 478], "rawconfigpars": 165, "site": [166, 332, 466, 470, 473, 477], "contextlib": [167, 384, 465, 466, 470, 471, 473, 474, 475, 476, 477, 478], "statement": [167, 363, 378, 425, 426, 434, 465, 466], "catch": 167, "__enter__": 167, "clean": 167, "ani": [167, 384, 387], "reusabl": 167, "reentrant": 167, "manual": [168, 306, 367], "copi": [169, 330], "shallow": 169, "deep": 169, "copyreg": 170, "crypt": [171, 474, 478], "hash": [171, 233, 342, 475, 478], "csv": [173, 472, 473, 476, 479], "dialect": 173, "ctype": [174, 281, 465, 466, 473, 479], "foreign": 174, "load": [174, 187, 386, 430], "fundament": 174, "variad": [174, 471], "own": 174, "prototyp": 174, "union": [174, 342], "align": [174, 345], "bit": [174, 253, 403, 468], "incomplet": 174, "export": 174, "size": [174, 233, 291, 330, 345, 380], "termin": [175, 291, 307, 330], "textpad": 175, "widget": [175, 367, 372, 373, 374, 467], "textbox": 175, "panel": 177, "stack": [177, 253, 379, 440], "content": [179, 195, 312], "init": [179, 318], "frozen": [179, 471], "mutabl": [179, 342, 388, 426], "naiv": [181, 341], "avail": [181, 398], "determin": [181, 426], "timedelta": 181, "tzinfo": 181, "timezon": [181, 364], "strftime": 181, "strptime": 181, "dbm": [182, 473, 475, 476, 477, 478], "databas": [182, 231, 279, 385], "gnu": [182, 228, 318, 321], "ndbm": 182, "dumb": 182, "decim": [184, 450, 464, 473, 474, 477, 478], "fix": [184, 290, 461, 463, 467], "arithmet": [184, 257, 428], "operand": 184, "round": 184, "mitig": 184, "off": [184, 351], "increas": 184, "precis": [184, 472], "special": [184, 273, 342, 382, 384, 426, 430, 463, 468], "faq": [184, 471], "develop": [186, 245, 460, 466, 478], "effect": [186, 388], "resourcewarn": 186, "bad": 186, "dialog": 187, "simpledialog": 187, "filedialog": 187, "nativ": [187, 345], "save": 187, "commondialog": 187, "difflib": [188, 476], "helper": [188, 346, 384, 387], "comput": [188, 380], "delta": 188, "sequencematch": 188, "ndiff": 188, "dis": [189, 472, 473, 475, 478], "bytecod": [189, 430, 471, 477, 478, 479, 480], "analysi": [189, 329, 433], "instruct": 189, "opcod": [189, 471], "doctest": [191, 464, 470, 475, 476], "docstr": [191, 382], "examin": 191, "recogn": 191, "unittest": [191, 386, 387, 388, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "doctestfind": 191, "doctestpars": 191, "doctestrunn": 191, "outputcheck": 191, "soapbox": 191, "mime": [192, 195, 199, 204, 274, 315], "packag": [192, 249, 250, 300, 430, 448, 459, 461, 463, 465, 466, 474], "charset": 193, "repres": [194, 203], "compat32": 194, "contentmanag": 195, "defect": 197, "headerregistri": 201, "scratch": 204, "feedpars": 205, "miscellan": [207, 268, 281, 291, 373, 453, 468], "ensurepip": [208, 467, 472, 475], "bootstrap": [208, 467, 475], "errno": 210, "symbol": 210, "concret": [211, 294, 384], "faulthandl": [212, 470, 474, 476, 477], "dump": 212, "fault": [212, 417], "after": 212, "fcntl": [213, 471, 480], "ioctl": 213, "filecmp": [214, 475], "directori": [214, 279, 291, 330, 466, 473, 476], "dircmp": 214, "fileinput": [216, 470, 477], "fnmatch": 218, "fraction": [219, 466, 471, 472, 473], "ration": 219, "ftplib": [221, 472, 474, 480], "ftp": [221, 473], "ftp_tls": 221, "callabl": [224, 253, 338, 384, 426], "gc": [225, 470, 474, 475, 478, 479, 480], "getopt": 226, "getpass": 227, "gettext": [228, 478, 479], "multilingu": 228, "servic": [228, 262, 313], "nulltransl": 228, "gnutransl": 228, "solari": 228, "catalog": [228, 264], "languag": [228, 262, 382, 460], "fli": 228, "defer": 228, "translat": [228, 382], "glob": [229, 470, 475, 476], "graphlib": [230, 480], "graph": 230, "grp": [231, 477], "gzip": [232, 422, 472, 473, 476, 479], "hashlib": [233, 465, 470, 471, 472, 473, 475, 477, 480], "digest": 233, "shake": 233, "length": [233, 342], "blake2": 233, "random": [233, 263, 291, 316, 472, 473, 477, 480], "person": 233, "credit": 233, "heapq": [234, 476], "hmac": [235, 470, 474, 475, 478], "entiti": 237, "xhtml": 238, "htmlparser": 238, "httpconnect": 240, "httprespons": 240, "httpmessag": 240, "cookiejar": 241, "cooki": [241, 242, 424], "filecookiejar": 241, "co": 241, "browser": [241, 310, 401], "cookiepolici": 241, "defaultcookiepolici": 241, "morsel": 242, "idl": [245, 460, 467, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481], "menu": 245, "shell": [245, 299, 329, 346], "editor": 245, "edit": [245, 445], "menus": 245, "navig": [245, 367], "indent": [245, 433], "calltip": 245, "startup": [245, 318], "failur": [245, 386], "without": 245, "prefer": 245, "idlelib": [245, 470, 471, 475, 476, 477, 478, 479, 480], "imaplib": [246, 473, 474, 476, 480], "imap4": 246, "imghdr": [247, 476], "importlib": [248, 249, 250, 251, 430, 467, 470, 472, 474, 475, 476, 477, 478, 480], "machineri": 248, "lazi": [248, 427, 471], "approxim": [248, 476], "import_modul": 248, "metadata": [249, 461, 463, 465, 470], "entri": [249, 426, 430], "distribut": [249, 457], "discoveri": [249, 386], "fetch": 253, "webassembl": [255, 454], "io": [256, 384, 472, 473, 474, 476, 478, 479], "reentranc": 256, "ipv4": 257, "ipv6": 257, "manipul": [257, 290], "conveni": [257, 401, 417], "integ": [257, 342, 433, 462, 464, 466], "net": 257, "mask": 257, "interprocess": 258, "communic": 258, "json": [260, 297, 444, 466, 476, 477, 479], "complianc": 260, "interoper": 260, "infinit": 260, "nan": 260, "within": 260, "top": [260, 380], "linecach": [263, 470, 476], "hint": [264, 356, 472, 476, 480], "writer": 264, "emb": 264, "safeti": 265, "config": 266, "schema": 266, "extern": [266, 297], "resolut": [266, 427, 478], "streamhandl": 267, "filehandl": [267, 393], "watchedfilehandl": 267, "baserotatinghandl": 267, "rotatingfilehandl": 267, "timedrotatingfilehandl": 267, "sockethandl": 267, "datagramhandl": 267, "nteventloghandl": 267, "smtphandler": 267, "memoryhandl": 267, "httphandler": [267, 393], "lzma": [268, 474, 476], "decompress": [268, 420], "chain": [268, 339, 441], "mailbox": [269, 473], "mbox": 269, "mh": 269, "babyl": 269, "mmdf": 269, "maildirmessag": 269, "mboxmessag": 269, "mhmessag": 269, "babylmessag": 269, "mmdfmessag": 269, "mailcap": 270, "markup": 271, "tool": [271, 294, 351, 467, 472, 479, 481], "angular": 273, "mimetyp": [274, 478], "mmap": [276, 474, 475, 479], "madv_": 276, "map_": 276, "modulefind": 277, "msilib": [279, 478], "microsoft": [279, 459], "view": [279, 342, 467, 468], "record": [279, 380, 450], "cab": 279, "precomput": 279, "msvcrt": 280, "routin": [280, 354], "vc": 280, "parallel": [281, 363, 479], "exchang": 281, "sharedctyp": 281, "remot": 281, "cleanup": [281, 290], "dummi": 281, "guidelin": 281, "spawn": [281, 346], "forkserv": 281, "shared_memori": 282, "netrc": 284, "nis": 285, "sun": [285, 347], "yellow": 285, "page": 285, "nntplib": [286, 474, 480], "nntp": [286, 473], "terminolog": 290, "posit": [290, 317, 382, 426, 439, 479], "understand": [290, 367], "store": [290, 459], "put": 290, "guid": [290, 338], "popul": 290, "conflict": 290, "trivial": 290, "environ": [291, 352, 397, 423, 459, 467, 476, 477], "ossaudiodev": 293, "oss": 293, "audio": 293, "devic": 293, "mixer": 293, "pathlib": [294, 470, 471, 472, 475, 476, 477, 478, 479, 480], "correspond": [294, 382], "pdb": [295, 472, 473, 474, 475, 477, 478, 480], "relationship": [297, 460], "unpickl": 297, "dispatch": 297, "reduct": 297, "band": [297, 479], "consum": 297, "pickletool": [298, 477], "pipelin": [299, 346], "pkgutil": 300, "platform": [301, 330, 374, 461, 470, 478], "java": 301, "plistlib": [302, 466, 475, 479], "appl": [302, 479, 480], "plist": 302, "poplib": [303, 473, 475, 476, 480], "pop3": 303, "posix": [304, 359], "larg": 304, "pprint": [305, 470, 475, 479, 480], "pretti": [305, 380], "printer": 305, "prettyprint": 305, "instant": 306, "cprofil": [306, 478, 479], "stat": [306, 340, 474, 475], "determinist": 306, "timer": [306, 363], "pti": [307, 475], "pseudo": 307, "pwd": 308, "py_compil": [309, 470, 478, 479], "pyclbr": [310, 470], "pydoc": [311, 473, 474, 475, 477, 478, 480], "onlin": 311, "xml": [312, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 424, 460, 470, 472, 474, 475, 476, 477, 478, 479, 480], "expat": [312, 424], "fast": [312, 479], "xmlparser": [312, 411], "expaterror": 312, "model": [312, 367, 408, 427, 461], "simplequeu": 314, "quopri": 315, "bookkeep": 316, "reproduc": 316, "pair": 317, "simul": 317, "phonebook": 317, "mung": 317, "adverb": 317, "notat": [317, 432, 466], "token": [317, 324, 375, 376, 433, 472, 479], "readlin": [318, 321, 332, 476, 477], "reprlib": [319, 473], "repr": [319, 430], "rlcomplet": [321, 477], "runpi": 322, "locat": [322, 414], "sched": [323, 474], "secret": [324, 477], "dev": [326, 478], "poll": 326, "trigger": 326, "epol": 326, "kqueue": [326, 424], "kevent": 326, "selector": [327, 373, 475, 476], "multiplex": 327, "shelv": [328, 470, 475], "shlex": [329, 474, 477, 479], "lexic": [329, 433], "improv": [329, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 475, 477], "shutil": [330, 471, 472, 473, 474, 475, 476, 479], "copytre": 330, "rmtree": 330, "archiv": [330, 356, 419, 420, 421, 463], "base_dir": 330, "sigpip": 331, "sitecustom": 332, "usercustom": 332, "smtplib": [333, 474, 475, 476, 480], "smtp": 333, "sndhdr": [334, 476], "accept": 335, "socketserv": [336, 474, 477, 478], "framework": [336, 461, 474], "tcpserver": 336, "udpserv": 336, "mixin": 336, "spwd": 337, "shadow": 337, "sqlite3": [338, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478], "sqlite": 338, "db": 338, "cursor": 338, "row": 338, "blob": 338, "prepareprotocol": 338, "adapt": 338, "deprec": [338, 384, 460, 463, 464, 466, 467, 469, 473, 475, 476, 477, 478], "placehold": 338, "sql": 338, "regist": [338, 351], "shortcut": 338, "uri": 338, "transact": 338, "autocommit": 338, "isolation_level": 338, "ssl": [339, 466, 470, 472, 473, 474, 475, 476, 477, 478, 479], "certif": [339, 467, 473, 475], "ca": 339, "sign": 339, "side": [339, 388], "bio": [339, 476], "session": 339, "cipher": 339, "statist": [341, 380, 470, 472, 475, 477, 479], "spread": 341, "normaldist": 341, "mont": 341, "carlo": 341, "bayesian": 341, "classifi": 341, "kernel": 341, "densiti": 341, "estim": 341, "numer": [342, 426, 433, 477], "bitwis": [342, 428], "bool": 342, "rang": [342, 439], "immut": [342, 426], "str": 342, "printf": 342, "bytearray": [342, 476], "frozenset": 342, "alia": 342, "genericalia": 342, "notimpl": [342, 426], "affect": 342, "recommend": 342, "stringprep": 344, "prepar": [344, 426], "frequent": 346, "older": [346, 356], "bin": 346, "sh": 346, "substitut": [346, 464], "famili": 346, "popen2": 346, "popen3": 346, "disabl": [346, 351], "vfork": 346, "posix_spawn": 346, "sunau": [347, 475, 478], "au": 347, "au_read": 347, "au_writ": 347, "symtabl": 349, "float_info": 350, "monitor": [351, 472], "identifi": [351, 374, 428, 433], "ancillari": 351, "stop_iter": 351, "turn": 351, "virtual": [352, 374, 397, 459, 476], "_pth": 352, "sysconfig": [353, 467, 471, 473, 476], "scheme": 353, "posix_us": 353, "nt_user": 353, "osx_framework_us": 353, "home": 353, "posix_hom": 353, "posix_prefix": 353, "nt": [353, 463], "tabnanni": 355, "tarfil": [356, 470, 471, 473, 474, 475, 476, 479, 480], "tar": 356, "tarinfo": 356, "further": 356, "verif": [356, 467, 475], "telnetlib": [357, 477], "telnet": 357, "tempfil": [358, 471, 472, 473, 474], "termio": 359, "tti": [359, 381], "socket_help": 360, "script_help": 360, "bytecode_help": 360, "threading_help": 360, "os_help": 360, "import_help": 360, "warnings_help": 360, "textwrap": [362, 474, 475], "fill": [362, 382], "rlock": 363, "clock": 364, "timeit": [365, 476, 477], "graphic": [366, 382], "tcl": 367, "architectur": 367, "life": 367, "preserv": [367, 477], "concept": 367, "handi": 367, "packer": [367, 406], "coupl": 367, "imag": [367, 373], "colorchoos": 368, "dnd": 369, "drag": 369, "drop": 369, "font": 370, "messagebox": 371, "prompt": 371, "scrolledtext": 372, "scroll": 372, "tix": 373, "hierarch": 373, "listbox": 373, "tabular": 373, "form": [373, 384, 428], "geometri": 373, "ttk": [374, 467], "theme": [374, 467], "scrollabl": 374, "label": 374, "combobox": 374, "spinbox": 374, "notebook": 374, "progressbar": 374, "separ": [374, 463, 467, 469], "sizegrip": 374, "treeview": 374, "tag": [374, 473], "column": 374, "layout": [374, 450], "tomllib": 377, "toml": 377, "track": [378, 388], "main": [378, 454, 466], "tracebackexcept": 379, "stacksummari": 379, "framesummari": 379, "peak": 380, "domainfilt": 380, "snapshot": 380, "statisticdiff": 380, "turtl": 382, "star": 382, "pen": 382, "turtlescreen": 382, "screen": 382, "rawturtl": 382, "motion": 382, "tell": 382, "measur": 382, "draw": 382, "visibl": 382, "anim": 382, "explan": 382, "turtledemo": [382, 473], "demo": [382, 472, 479, 481], "sinc": 382, "pep": [384, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "newtyp": 384, "nomin": 384, "subtyp": 384, "alias": [384, 425], "recognis": 384, "timelin": 384, "major": 384, "unicodedata": [385, 471, 472, 476, 477, 478, 479, 480], "old": [386, 462], "skip": 386, "expect": 386, "distinguish": 386, "subtest": 386, "load_test": 386, "fixtur": 386, "setupclass": 386, "teardownclass": 386, "setupmodul": 386, "teardownmodul": 386, "mock": [387, 388, 476, 477, 478], "patcher": 387, "patch": [387, 388], "test_prefix": 387, "nest": [387, 388, 461, 462], "where": 387, "magicmock": [387, 388], "magic": 387, "sentinel": 387, "create_autospec": 387, "filter_dir": 387, "mock_open": 387, "autospecc": 387, "seal": 387, "side_effect": 388, "everi": 388, "unbound": 388, "cope": 388, "less": 388, "compon": 392, "quot": 392, "openerdirector": 393, "basehandl": 393, "httpredirecthandl": 393, "httpcookieprocessor": 393, "proxyhandl": 393, "httppasswordmgr": 393, "httppasswordmgrwithpriorauth": 393, "abstractbasicauthhandl": 393, "httpbasicauthhandl": 393, "proxybasicauthhandl": 393, "abstractdigestauthhandl": 393, "httpdigestauthhandl": 393, "proxydigestauthhandl": 393, "httpshandler": 393, "datahandl": 393, "ftphandler": 393, "cacheftphandl": 393, "unknownhandl": 393, "httperrorprocessor": 393, "respons": 393, "robotpars": [394, 477], "robot": 394, "txt": 394, "xdrlib": [395, 406], "uuencod": [395, 424], "uuid": [396, 472, 478], "rfc": 396, "4122": 396, "venv": [397, 471, 475, 477, 479, 480], "envbuild": 397, "describ": 398, "temporarili": 398, "suppress": [398, 474], "wave": [399, 475, 478], "wav": 399, "wave_read": 399, "wave_writ": 399, "weakref": [400, 475, 479], "webbrows": [401, 472, 474], "winreg": [403, 477], "hkey_": 403, "right": 403, "64": 403, "winsound": [404, 477], "sound": 404, "play": 404, "wsgiref": [405, 465, 476], "wsgi": 405, "simple_serv": 405, "xdr": 406, "defusedxml": 407, "dom": [408, 409, 410, 460], "domimplement": 408, "nodelist": 408, "documenttyp": 408, "attr": 408, "namednodemap": 408, "comment": [408, 433], "cdatasect": 408, "processinginstruct": 408, "conform": 408, "accessor": 408, "minidom": 409, "minim": 409, "pulldom": 410, "domeventstream": 410, "etre": [411, 472, 474, 475, 478], "elementtre": [411, 465, 467, 472, 473, 474], "pull": 411, "interest": 411, "xpath": 411, "xinclud": 411, "qname": 411, "treebuild": 411, "xmlpullpars": 411, "sax": [412, 413, 414, 415, 476], "sax2": [412, 460], "saxexcept": 412, "contenthandl": 413, "dtdhandler": 413, "entityresolv": 413, "errorhandl": 413, "lexicalhandl": 413, "xmlreader": 414, "incrementalpars": 414, "inputsourc": 414, "attributesn": 414, "saxutil": 415, "xmlrpc": [416, 417, 418, 476, 477, 478, 479], "rpc": [417, 418], "serverproxi": 417, "protocolerror": 417, "multical": 417, "simplexmlrpcserv": 418, "cgixmlrpcrequesthandl": 418, "docxmlrpcserv": 418, "doccgixmlrpcrequesthandl": 418, "zipapp": [419, 476, 478], "zip": [419, 420, 421, 463], "standalon": 419, "zipfil": [420, 471, 473, 475, 476, 477, 478], "pyzipfil": 420, "zipinfo": 420, "pitfal": 420, "itself": 420, "behavior": [420, 475, 476, 477, 478, 479], "zipimport": [421, 470, 472], "zlib": [422, 424, 474, 477], "zoneinfo": [423, 480], "iana": 423, "represent": [423, 442, 474], "serial": 423, "12": [424, 470, 471, 472, 479, 481], "psf": 424, "beopen": 424, "com": 424, "cnri": 424, "cwi": 424, "zero": 424, "claus": [424, 425], "bsd": 424, "mersenn": 424, "twister": 424, "uudecod": 424, "test_epol": 424, "siphash24": 424, "strtod": 424, "dtoa": 424, "openssl": [424, 458, 471], "libffi": 424, "cfuhash": 424, "libmpdec": 424, "w3c": 424, "c14n": 424, "els": [425, 439], "guard": [425, 470], "irrefut": 425, "wildcard": [425, 449, 470], "real": 426, "also": 426, "known": [426, 459], "slice": [426, 428, 463], "invok": 426, "metaclass": 426, "resolv": 426, "mro": 426, "appropri": 426, "bodi": 426, "emul": 426, "purpos": 426, "__class_getitem__": 426, "__getitem__": 426, "atom": 428, "parenthes": 428, "yield": [428, 434], "primari": 428, "unari": 428, "shift": 428, "membership": 428, "assign": [428, 434, 460, 479], "finder": 430, "loader": 430, "meta": 430, "submodul": 430, "__path__": 430, "__spec__": 430, "physic": 433, "declar": [433, 470], "explicit": [433, 466, 474, 475], "implicit": [433, 474], "blank": 433, "whitespac": 433, "reserv": 433, "imaginari": 433, "delimit": 433, "augment": [434, 460], "del": [434, 440], "break": [434, 439], "nonloc": 434, "dir": 448, "linker": 454, "cross": 454, "makefil": 454, "preprocessor": 454, "ide": [455, 457], "mac": [457, 466, 467, 479, 480], "freebsd": [458, 467], "openbsd": 458, "full": 459, "max_path": 459, "redirect": 459, "temporari": 459, "nuget": 459, "embedd": 459, "bundl": 459, "excursus": 459, "launcher": [459, 471, 476], "shebang": 459, "diagnost": 459, "dri": 459, "pywin32": 459, "cx_freez": 459, "cycl": 460, "minor": 460, "port": [460, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480], "distutil": [460, 463, 470, 472, 476, 477, 478, 480], "easi": 460, "pyxml": 460, "227": [461, 462], "236": 461, "207": 461, "rich": 461, "230": 461, "229": 461, "205": 461, "232": 461, "235": 461, "insensit": 461, "217": 461, "208": 461, "coercion": [461, 478], "241": 461, "252": 462, "253": 462, "diamond": 462, "234": 462, "255": [462, 463], "237": [462, 464], "unifi": [462, 464, 465], "long": [462, 464], "238": 462, "218": [463, 464], "263": 463, "273": 463, "277": 463, "278": 463, "univers": 463, "279": 463, "282": 463, "285": 463, "293": 463, "301": 463, "302": 463, "305": 463, "307": 463, "enhanc": [463, 466, 467, 477], "289": 464, "292": 464, "simpler": [464, 477], "318": 464, "322": 464, "324": 464, "327": 464, "need": 464, "328": [464, 465], "331": 464, "cookielib": 464, "308": 465, "309": 465, "314": 465, "softwar": 465, "v1": [465, 473], "absolut": 465, "338": 465, "341": 465, "342": 465, "343": [465, 466], "352": 465, "353": 465, "ssize_t": 465, "357": 465, "__index__": 465, "tracker": 466, "roundup": 466, "restructuredtext": 466, "sphinx": 466, "366": 466, "370": 466, "371": 466, "3101": [466, 468], "3105": 466, "3110": 466, "3112": 466, "3116": 466, "3118": [466, 474], "3119": 466, "3127": 466, "3129": 466, "3141": 466, "future_builtin": 466, "javascript": 466, "irix": 466, "372": [467, 469], "378": [467, 469], "thousand": [467, 469], "389": [467, 473], "391": [467, 473], "3106": 467, "3137": 467, "added": 467, "mainten": 467, "two": 467, "434": 467, "branch": 467, "466": 467, "477": 467, "backport": 467, "453": [467, 475], "476": [467, 475], "stdlib": [467, 475], "493": 467, "https": 467, "migrat": 467, "regen": [467, 476, 477], "target": [467, 476, 477], "touch": [467, 476, 477], "stumbl": 468, "alreadi": 468, "indentationerror": 470, "attributeerror": 470, "nameerror": 470, "626": 470, "634": 470, "encodingwarn": 470, "604": 470, "612": 470, "613": 470, "typealia": 470, "647": 470, "asynchat": [470, 472, 477], "asyncor": [470, 472, 473, 477], "smtpd": [470, 472, 474, 475, 476], "652": 470, "notabl": [470, 471, 476, 477, 478, 479, 480], "11": [471, 478, 479, 480, 481], "657": 471, "654": 471, "678": 471, "exe": 471, "646": 471, "655": 471, "typeddict": [471, 472], "673": 471, "675": 471, "681": 471, "563": [471, 478], "cheaper": 471, "659": 471, "jit": 471, "695": 472, "701": 472, "syntact": 472, "684": 472, "669": 472, "impact": 472, "688": 472, "709": 472, "inlin": 472, "692": 472, "kwarg": 472, "698": 472, "13": [472, 477], "14": [472, 477, 478, 479, 480], "15": 472, "imp": 472, "384": 473, "stabl": 473, "3148": 473, "3147": 473, "repositori": 473, "3149": 473, "so": 473, "3333": 473, "gateway": 473, "highlight": [474, 475, 476, 477, 478, 479, 480], "405": 474, "420": 474, "393": 474, "flexibl": 474, "397": 474, "3151": 474, "rework": 474, "380": 474, "subgener": 474, "409": 474, "414": 474, "3155": 474, "qualifi": 474, "412": 474, "362": 474, "421": 474, "simplenamespac": 474, "grain": 474, "446": 475, "newli": 475, "451": 475, "modulespec": 475, "445": 475, "442": 475, "456": 475, "interchang": 475, "436": 475, "longer": 475, "492": 476, "465": 476, "dedic": 476, "infix": 476, "matrix": 476, "448": 476, "461": 476, "percent": 476, "484": 476, "471": 476, "scandir": 476, "better": 476, "faster": 476, "475": 476, "retri": 476, "eintr": 476, "479": 476, "stopiter": 476, "insid": 476, "485": 476, "equal": 476, "486": 476, "488": 476, "elimin": 476, "pyo": 476, "489": 476, "negoti": 476, "unsupport": 476, "498": 477, "526": 477, "515": 477, "underscor": 477, "525": 477, "530": 477, "487": 477, "519": 477, "495": 477, "disambigu": 477, "529": 477, "filesystem": [477, 479], "528": 477, "520": 477, "468": 477, "523": 477, "pythonmalloc": 477, "probe": 477, "postpon": 478, "538": 478, "540": 478, "forc": 478, "553": 478, "breakpoint": 478, "539": 478, "562": 478, "564": 478, "nanosecond": 478, "565": 478, "show": 478, "deprecationwarn": [478, 480], "560": 478, "552": 478, "545": 478, "uu": 478, "macpath": 478, "578": 479, "audit": 479, "587": 479, "590": 479, "big": [479, 480], "sur": [479, 480], "silicon": [479, 480], "17": [479, 480], "merg": 480, "suffix": 480, "changelog": 481, "candid": 481, "alpha": 481}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"\u5177\u9ad4\u7269\u4ef6\u5c64": [[16, "concrete-objects-layer"]], "\u57fa\u790e\u7269\u4ef6": [[16, "fundamental-objects"]], "\u6578\u503c\u7269\u4ef6": [[16, "numeric-objects"]], "\u5e8f\u5217\u7269\u4ef6": [[16, "sequence-objects"]], "\u5bb9\u5668\u7269\u4ef6": [[16, "container-objects"]], "\u51fd\u5f0f\u7269\u4ef6": [[16, "function-objects"], [310, "function-objects"]], "\u5176\u4ed6\u7269\u4ef6": [[16, "other-objects"], [5, "other-objects"]], "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316": [[18, "string-conversion-and-formatting"]], "PyHash API": [[30, "pyhash-api"]], "\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6": [[0, "about-these-documents"]], "Python \u6587\u4ef6\u7684\u8ca2\u737b\u8005\u5011": [[0, "contributors-to-the-python-documentation"]], "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6": [[6, "boolean-objects"]], "Supporting Cyclic Garbage Collection": [[28, "supporting-cyclic-garbage-collection"]], "Controlling the Garbage Collector State": [[28, "controlling-the-garbage-collector-state"]], "Querying Garbage Collector State": [[28, "querying-garbage-collector-state"]], "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6": [[25, "floating-point-objects"]], "Pack and Unpack functions": [[25, "pack-and-unpack-functions"]], "Pack functions": [[25, "pack-functions"]], "Unpack functions": [[25, "unpack-functions"]], "Initialization, Finalization, and Threads": [[33, "initialization-finalization-and-threads"]], "Before Python Initialization": [[33, "before-python-initialization"]], "Global configuration variables": [[33, "global-configuration-variables"]], "Initializing and finalizing the interpreter": [[33, "initializing-and-finalizing-the-interpreter"]], "Process-wide parameters": [[33, "process-wide-parameters"]], "Thread State and the Global Interpreter Lock": [[33, "thread-state-and-the-global-interpreter-lock"]], "Releasing the GIL from extension code": [[33, "releasing-the-gil-from-extension-code"]], "Non-Python created threads": [[33, "non-python-created-threads"]], "Cautions about fork()": [[33, "cautions-about-fork"]], "\u9ad8\u968e API": [[33, "high-level-api"], [121, null]], "\u4f4e\u968e API": [[33, "low-level-api"], [121, null]], "Sub-interpreter support": [[33, "sub-interpreter-support"]], "A Per-Interpreter GIL": [[33, "a-per-interpreter-gil"]], "Bugs and caveats": [[33, "bugs-and-caveats"]], "Asynchronous Notifications": [[33, "asynchronous-notifications"]], "Profiling and Tracing": [[33, "profiling-and-tracing"]], "Advanced Debugger Support": [[33, "advanced-debugger-support"]], "Thread Local Storage Support": [[33, "thread-local-storage-support"]], "Thread Specific Storage (TSS) API": [[33, "thread-specific-storage-tss-api"]], "Dynamic Allocation": [[33, "dynamic-allocation"]], "\u65b9\u6cd5": [[33, "methods"]], "Thread Local Storage (TLS) API": [[33, "thread-local-storage-tls-api"]], "Capsules": [[11, "capsules"], [467, "capsules"]], "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)": [[2, "abstract-objects-layer"]], "\u8655\u7406\u932f\u8aa4 (Bug)": [[1, "dealing-with-bugs"]], "\u8aaa\u660e\u6587\u4ef6\u7684\u932f\u8aa4": [[1, "documentation-bugs"]], "\u4f7f\u7528 Python \u554f\u984c\u8ffd\u8e64\u7cfb\u7d71": [[1, "using-the-python-issue-tracker"]], "\u958b\u59cb\u8b93\u81ea\u5df1\u8ca2\u737b Python": [[1, "getting-started-contributing-to-python-yourself"]], "Cell \u7269\u4ef6": [[12, "cell-objects"]], "\u51fd\u5f0f\u7269\u4ef6 (Function Objects)": [[27, "function-objects"]], "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[7, "buffer-protocol"]], "Buffer structure": [[7, "buffer-structure"]], "Buffer request types": [[7, "buffer-request-types"]], "request-independent fields": [[7, "request-independent-fields"]], "readonly, format": [[7, "readonly-format"]], "shape, strides, suboffsets": [[7, "shape-strides-suboffsets"]], "contiguity requests": [[7, "contiguity-requests"]], "compound requests": [[7, "compound-requests"]], "Complex arrays": [[7, "complex-arrays"]], "NumPy-style: shape and strides": [[7, "numpy-style-shape-and-strides"]], "PIL-style: shape, strides and suboffsets": [[7, "pil-style-shape-strides-and-suboffsets"]], "Buffer-related functions": [[7, "buffer-related-functions"]], "\u7522\u751f\u5668 (Generator) \u7269\u4ef6": [[29, "generator-objects"]], "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6": [[21, "descriptor-objects"]], "\u4f4d\u5143\u7d44\u9663\u5217\u7269\u4ef6 (Byte Array Objects)": [[8, "byte-array-objects"]], "\u578b\u5225\u6aa2\u67e5\u5de8\u96c6": [[8, "type-check-macros"]], "\u76f4\u63a5 API \u51fd\u5f0f": [[8, "direct-api-functions"]], "\u5de8\u96c6": [[8, "macros"]], "\u5f15\u5165\u6a21\u7d44": [[31, "importing-modules"], [278, "importing-modules"]], "DateTime \u7269\u4ef6": [[20, "datetime-objects"]], "\u547c\u53eb\u5354\u5b9a (Call Protocol)": [[10, "call-protocol"]], "tp_call \u5354\u5b9a": [[10, "the-tp-call-protocol"]], "Vectorcall \u5354\u5b9a": [[10, "the-vectorcall-protocol"]], "\u905e\u8ff4\u63a7\u5236": [[10, "recursion-control"]], "Vectorcall \u652f\u63f4 API": [[10, "vectorcall-support-api"]], "\u7269\u4ef6\u547c\u53eb API": [[10, "object-calling-api"]], "\u547c\u53eb\u652f\u63f4 API": [[10, "call-support-api"]], "API \u548c ABI \u7248\u672c\u7ba1\u7406": [[4, "api-and-abi-versioning"]], "\u8907\u6578\u7269\u4ef6": [[15, "complex-number-objects"]], "\u4f5c\u70ba C \u7d50\u69cb\u7684\u8907\u6578": [[15, "complex-numbers-as-c-structures"]], "\u4f5c\u70ba Python \u7269\u4ef6\u7684\u8907\u6578": [[15, "complex-numbers-as-python-objects"]], "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6": [[19, "coroutine-objects"]], "\u5b57\u5178\u7269\u4ef6": [[22, "dictionary-objects"]], "\u7a0b\u5f0f\u78bc\u7269\u4ef6": [[13, "code-objects"]], "Extra information": [[13, "extra-information"]], "\u4f4d\u5143\u7d44\u7269\u4ef6 (Bytes Objects)": [[9, "bytes-objects"]], "Python/C API \u53c3\u8003\u624b\u518a": [[32, "python-c-api-reference-manual"]], "Frame \u7269\u4ef6": [[26, "frame-objects"]], "Internal Frames": [[26, "internal-frames"]], "\u4f8b\u5916\u8655\u7406": [[23, "exception-handling"]], "Printing and clearing": [[23, "printing-and-clearing"]], "Raising exceptions": [[23, "raising-exceptions"]], "Issuing warnings": [[23, "issuing-warnings"]], "Querying the error indicator": [[23, "querying-the-error-indicator"]], "Signal Handling": [[23, "signal-handling"], [386, "signal-handling"]], "\u4f8b\u5916\u985e\u5225": [[23, "exception-classes"], [164, "exception-classes"]], "\u4f8b\u5916\u7269\u4ef6": [[23, "exception-objects"]], "Unicode Exception Objects": [[23, "unicode-exception-objects"]], "Recursion Control": [[23, "recursion-control"]], "Standard Exceptions": [[23, "standard-exceptions"]], "Standard Warning Categories": [[23, "standard-warning-categories"]], "Context Variables Objects": [[17, "context-variables-objects"]], "\u6a94\u6848\u7269\u4ef6 (File Objects)": [[24, "file-objects"]], "\u5256\u6790\u5f15\u6578\u8207\u5efa\u7f6e\u6578\u503c": [[5, "parsing-arguments-and-building-values"]], "Parsing arguments": [[5, "parsing-arguments"], [290, "parsing-arguments"]], "Strings and buffers": [[5, "strings-and-buffers"]], "\u6578\u5b57": [[5, "numbers"]], "API \u51fd\u5f0f": [[5, "api-functions"]], "Building values": [[5, "building-values"]], "\u7de8\u89e3\u78bc\u5668\u8a3b\u518a\u8868\u548c\u652f\u63f4\u51fd\u5f0f": [[14, "codec-registry-and-support-functions"]], "\u7de8\u89e3\u78bc\u5668\u67e5\u627e API": [[14, "codec-lookup-api"]], "\u7528\u65bc Unicode \u7de8\u78bc\u932f\u8aa4\u8655\u7406\u7a0b\u5f0f\u7684\u8a3b\u518a API": [[14, "registry-api-for-unicode-encoding-error-handlers"]], "\u5728 heap \u4e0a\u5206\u914d\u7269\u4ef6": [[3, "allocating-objects-on-the-heap"]], "Python \u5e38\u898b\u554f\u984c": [[82, "python-frequently-asked-questions"]], "\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python": [[72, "embedding-python-in-another-application"]], "Very High Level Embedding": [[72, "very-high-level-embedding"]], "Beyond Very High Level Embedding: An overview": [[72, "beyond-very-high-level-embedding-an-overview"]], "Pure Embedding": [[72, "pure-embedding"]], "Extending Embedded Python": [[72, "extending-embedded-python"]], "Embedding Python in C++": [[72, "embedding-python-in-c"]], "Compiling and Linking under Unix-like systems": [[72, "compiling-and-linking-under-unix-like-systems"]], "\u64f4\u5145/\u5d4c\u5165\u5e38\u898b\u554f\u984c\u96c6": [[79, "extending-embedding-faq"]], "\u76ee\u9304": [[79, "id1"], [86, "id1"], [80, "id1"], [93, "id1"], [84, "id1"], [85, "id1"], [78, "id1"], [81, "id1"], [245, "menus"]], "\u6211\u53ef\u4ee5\u5728 C \u4e2d\u5efa\u7acb\u81ea\u5df1\u7684\u51fd\u5f0f\u55ce\uff1f": [[79, "can-i-create-my-own-functions-in-c"]], "\u6211\u53ef\u4ee5\u5728 C++ \u4e2d\u5efa\u7acb\u81ea\u5df1\u7684\u51fd\u5f0f\u55ce\uff1f": [[79, "id2"]], "\u5beb C \u5f88\u96e3\uff1b\u9084\u6709\u5176\u4ed6\u9078\u64c7\u55ce\uff1f": [[79, "writing-c-is-hard-are-there-any-alternatives"]], "\u5982\u4f55\u5f9e C \u57f7\u884c\u4efb\u610f Python \u9673\u8ff0\u5f0f\uff1f": [[79, "how-can-i-execute-arbitrary-python-statements-from-c"]], "How can I evaluate an arbitrary Python expression from C?": [[79, "how-can-i-evaluate-an-arbitrary-python-expression-from-c"]], "\u5982\u4f55\u5f9e Python \u7269\u4ef6\u4e2d\u63d0\u53d6 C \u503c\uff1f": [[79, "how-do-i-extract-c-values-from-a-python-object"]], "\u5982\u4f55\u4f7f\u7528 Py_BuildValue() \u5efa\u7acb\u4efb\u610f\u9577\u5ea6\u7684\u5143\u7d44\uff1f": [[79, "how-do-i-use-py-buildvalue-to-create-a-tuple-of-arbitrary-length"]], "\u5982\u4f55\u5f9e C \u547c\u53eb\u7269\u4ef6\u7684\u65b9\u6cd5\uff1f": [[79, "how-do-i-call-an-object-s-method-from-c"]], "\u6211\u5982\u4f55\u6355\u6349 PyErr_Print() \u7684\u8f38\u51fa\uff08\u6216\u4efb\u4f55\u5370\u51fa\u5230 stdout/stderr \u7684\u6771\u897f\uff09\uff1f": [[79, "how-do-i-catch-the-output-from-pyerr-print-or-anything-that-prints-to-stdout-stderr"]], "\u5982\u4f55\u5f9e C \u5b58\u53d6\u7528 Python \u7de8\u5beb\u7684\u6a21\u7d44\uff1f": [[79, "how-do-i-access-a-module-written-in-python-from-c"]], "How do I interface to C++ objects from Python?": [[79, "how-do-i-interface-to-c-objects-from-python"]], "\u6211\u4f7f\u7528\u5b89\u88dd\u6a94\u6848\u65b0\u589e\u4e86\u4e00\u500b\u6a21\u7d44\uff0c\u4f46 make \u5931\u6557\u4e86\uff1b\u70ba\u4ec0\u9ebc\uff1f": [[79, "i-added-a-module-using-the-setup-file-and-the-make-fails-why"]], "\u5982\u4f55\u70ba\u64f4\u5145\u5957\u4ef6\u9664\u932f\uff1f": [[79, "how-do-i-debug-an-extension"]], "\u6211\u60f3\u5728\u6211\u7684 Linux \u7cfb\u7d71\u4e0a\u7de8\u8b6f\u4e00\u500b Python \u6a21\u7d44\uff0c\u4f46\u662f\u7f3a\u5c11\u4e00\u4e9b\u6a94\u6848\u3002\u70ba\u4ec0\u9ebc\uff1f": [[79, "i-want-to-compile-a-python-module-on-my-linux-system-but-some-files-are-missing-why"]], "\u5982\u4f55\u5f9e\u300c\u7121\u6548\u8f38\u5165\u300d\u5340\u5206\u51fa\u300c\u4e0d\u5b8c\u6574\u8f38\u5165\u300d\uff1f": [[79, "how-do-i-tell-incomplete-input-from-invalid-input"]], "\u5982\u4f55\u627e\u5230\u672a\u5b9a\u7fa9\u7684 g++ \u7b26\u865f __builtin_new \u6216 __pure_virtual\uff1f": [[79, "how-do-i-find-undefined-g-symbols-builtin-new-or-pure-virtual"]], "Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?": [[79, "can-i-create-an-object-class-with-some-methods-implemented-in-c-and-others-in-python-e-g-through-inheritance"]], "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9": [[68, "python-documentation-contents"]], "\u767c\u5e03 Python \u6a21\u7d44": [[70, "distributing-python-modules"]], "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3": [[91, "porting-extension-modules-to-python-3"]], "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6": [[83, "why-is-python-installed-on-my-computer-faq"]], "\u4ec0\u9ebc\u662f Python\uff1f": [[83, "what-is-python"], [80, "what-is-python"]], "\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a?": [[83, "why-is-python-installed-on-my-machine"]], "\u6211\u80fd\u5920\u81ea\u884c\u522a\u9664 Python \u55ce\uff1f": [[83, "can-i-delete-python"]], "Enum HOWTO": [[94, "enum-howto"]], "Programmatic access to enumeration members and their attributes": [[94, "programmatic-access-to-enumeration-members-and-their-attributes"]], "Duplicating enum members and values": [[94, "duplicating-enum-members-and-values"]], "Ensuring unique enumeration values": [[94, "ensuring-unique-enumeration-values"]], "Using automatic values": [[94, "using-automatic-values"]], "Iteration": [[94, "iteration"], [257, "iteration"]], "Comparisons": [[94, "comparisons"], [98, "comparisons"], [428, "comparisons"]], "Allowed members and attributes of enumerations": [[94, "allowed-members-and-attributes-of-enumerations"]], "Restricted Enum subclassing": [[94, "restricted-enum-subclassing"]], "Dataclass support": [[94, "dataclass-support"]], "Pickling": [[94, "pickling"]], "Functional API": [[94, "functional-api"], [249, "functional-api"]], "Derived Enumerations": [[94, "derived-enumerations"]], "IntEnum": [[94, "intenum"]], "StrEnum": [[94, "strenum"]], "IntFlag": [[94, "intflag"]], "Flag": [[94, "flag"]], "Others": [[94, "others"]], "When to use __new__() vs. __init__()": [[94, "when-to-use-new-vs-init"]], "Finer Points": [[94, "finer-points"]], "Supported __dunder__ names": [[94, "supported-dunder-names"]], "Supported _sunder_ names": [[94, "supported-sunder-names"]], "_Private__names": [[94, "private-names"]], "Enum member type": [[94, "enum-member-type"]], "Creating members that are mixed with other data types": [[94, "creating-members-that-are-mixed-with-other-data-types"]], "Boolean value of Enum classes and members": [[94, "boolean-value-of-enum-classes-and-members"]], "Enum classes with methods": [[94, "enum-classes-with-methods"]], "Combining members of Flag": [[94, "combining-members-of-flag"]], "Flag and IntFlag minutia": [[94, "flag-and-intflag-minutia"]], "How are Enums and Flags different?": [[94, "how-are-enums-and-flags-different"]], "Enum Classes": [[94, "enum-classes"]], "Flag Classes": [[94, "flag-classes"]], "Enum Members (aka instances)": [[94, "enum-members-aka-instances"]], "Flag Members": [[94, "flag-members"]], "Enum Cookbook": [[94, "enum-cookbook"]], "Omitting values": [[94, "omitting-values"]], "Using auto": [[94, "using-auto"]], "Using object": [[94, "using-object"]], "Using a descriptive string": [[94, "using-a-descriptive-string"]], "Using a custom __new__()": [[94, "using-a-custom-new"]], "OrderedEnum": [[94, "orderedenum"]], "DuplicateFreeEnum": [[94, "duplicatefreeenum"]], "Planet": [[94, "planet"]], "TimePeriod": [[94, "timeperiod"]], "Subclassing EnumType": [[94, "subclassing-enumtype"]], "\u8853\u8a9e\u8868": [[87, "glossary"]], "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6": [[86, "python-on-windows-faq"]], "\u5982\u4f55\u5728 Windows \u4f5c\u696d\u7cfb\u7d71\u88e1\u904b\u884c Python \u7a0b\u5f0f\uff1f": [[86, "how-do-i-run-a-python-program-under-windows"]], "\u5982\u4f55\u4f7f Python \u8173\u672c\u53ef\u4ee5\u57f7\u884c\uff1f": [[86, "how-do-i-make-python-scripts-executable"]], "\u70ba\u4ec0\u9ebc Python \u6709\u6642\u9700\u8981\u9019\u9ebc\u9577\u7684\u6642\u9593\u624d\u80fd\u958b\u59cb\uff1f": [[86, "why-does-python-sometimes-take-so-long-to-start"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u88fd\u4f5c\u53ef\u57f7\u884c\u6a94\uff1f": [[86, "how-do-i-make-an-executable-from-a-python-script"]], "*.pyd \u6a94\u662f\u5426\u8207 DLL \u76f8\u540c\uff1f": [[86, "is-a-pyd-file-the-same-as-a-dll"]], "\u5982\u4f55\u5c07 Python \u5d4c\u5165 Windows \u61c9\u7528\u7a0b\u5f0f\u4e2d\uff1f": [[86, "how-can-i-embed-python-into-a-windows-application"]], "\u5982\u4f55\u9632\u6b62\u7de8\u8f2f\u5668\u5728\u6211\u7684 Python \u539f\u59cb\u78bc\u4e2d\u63d2\u5165 tab\uff1f": [[86, "how-do-i-keep-editors-from-inserting-tabs-into-my-python-source"]], "\u5982\u4f55\u5728\u4e0d\u963b\u585e\u7684\u60c5\u6cc1\u4e0b\u6aa2\u67e5 keypress\uff1f": [[86, "how-do-i-check-for-a-keypress-without-blocking"]], "\u5982\u4f55\u89e3\u6c7a\u907a\u6f0f api-ms-win-crt-runtime-l1-1-0.dll \u7684\u932f\u8aa4\uff1f": [[86, "how-do-i-solve-the-missing-api-ms-win-crt-runtime-l1-1-0-dll-error"]], "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668": [[74, "extending-and-embedding-the-python-interpreter"]], "\u63a8\u85a6\u7684\u7b2c\u4e09\u65b9\u5de5\u5177": [[74, "recommended-third-party-tools"]], "\u4e0d\u4f7f\u7528\u7b2c\u4e09\u65b9\u5de5\u5177\u5efa\u7acb\u64f4\u5145": [[74, "creating-extensions-without-third-party-tools"]], "\u5728\u66f4\u5927\u7684\u61c9\u7528\u7a0b\u5f0f\u4e2d\u5d4c\u5165 CPython \u904b\u884c\u74b0\u5883 (runtime)": [[74, "embedding-the-cpython-runtime-in-a-larger-application"]], "\u8a3b\u91cb (annotation) \u6700\u4f73\u5be6\u8e10": [[88, "annotations-best-practices"]], "\u6458\u8981": [[88, null], [92, null], [93, "abstract"], [104, null], [103, null], [105, null]], "\u5728 Python 3.10 \u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u5b58\u53d6\u7269\u4ef6\u7684\u8a3b\u91cb\u5b57\u5178": [[88, "accessing-the-annotations-dict-of-an-object-in-python-3-10-and-newer"]], "\u5728 Python 3.9 \u53ca\u66f4\u65e9\u7248\u672c\u4e2d\u5b58\u53d6\u7269\u4ef6\u7684\u8a3b\u91cb\u5b57\u5178": [[88, "accessing-the-annotations-dict-of-an-object-in-python-3-9-and-older"]], "\u624b\u52d5\u53d6\u6d88\u5b57\u4e32\u5316\u8a3b\u91cb": [[88, "manually-un-stringizing-stringized-annotations"]], "\u4efb\u4f55 Python \u7248\u672c\u4e2d __annotations__ \u7684\u6700\u4f73\u5be6\u8e10": [[88, "best-practices-for-annotations-in-any-python-version"]], "__annotations__ \u5947\u7570\u4e4b\u8655": [[88, "annotations-quirks"]], "Defining Extension Types: Assorted Topics": [[75, "defining-extension-types-assorted-topics"]], "Finalization and De-allocation": [[75, "finalization-and-de-allocation"]], "Object Presentation": [[75, "object-presentation"]], "Attribute Management": [[75, "attribute-management"]], "Generic Attribute Management": [[75, "generic-attribute-management"]], "Type-specific Attribute Management": [[75, "type-specific-attribute-management"]], "Object Comparison": [[75, "object-comparison"]], "Abstract Protocol Support": [[75, "abstract-protocol-support"]], "Weak Reference Support": [[75, "weak-reference-support"]], "More Suggestions": [[75, "more-suggestions"]], "Curses Programming with Python": [[92, "curses-programming-with-python"]], "What is curses?": [[92, "what-is-curses"]], "The Python curses module": [[92, "the-python-curses-module"]], "Starting and ending a curses application": [[92, "starting-and-ending-a-curses-application"]], "Windows and Pads": [[92, "windows-and-pads"]], "Displaying Text": [[92, "displaying-text"]], "Attributes and Color": [[92, "attributes-and-color"]], "User Input": [[92, "user-input"]], "For More Information": [[92, "for-more-information"]], "Logging Cookbook": [[101, "logging-cookbook"]], "Using logging in multiple modules": [[101, "using-logging-in-multiple-modules"]], "Logging from multiple threads": [[101, "logging-from-multiple-threads"]], "Multiple handlers and formatters": [[101, "multiple-handlers-and-formatters"]], "Logging to multiple destinations": [[101, "logging-to-multiple-destinations"]], "Custom handling of levels": [[101, "custom-handling-of-levels"]], "Configuration server example": [[101, "configuration-server-example"]], "Dealing with handlers that block": [[101, "dealing-with-handlers-that-block"]], "Sending and receiving logging events across a network": [[101, "sending-and-receiving-logging-events-across-a-network"]], "Running a logging socket listener in production": [[101, "running-a-logging-socket-listener-in-production"]], "Adding contextual information to your logging output": [[101, "adding-contextual-information-to-your-logging-output"]], "Using LoggerAdapters to impart contextual information": [[101, "using-loggeradapters-to-impart-contextual-information"]], "Using objects other than dicts to pass contextual information": [[101, "using-objects-other-than-dicts-to-pass-contextual-information"]], "Using Filters to impart contextual information": [[101, "using-filters-to-impart-contextual-information"]], "Use of contextvars": [[101, "use-of-contextvars"]], "Imparting contextual information in handlers": [[101, "imparting-contextual-information-in-handlers"]], "Logging to a single file from multiple processes": [[101, "logging-to-a-single-file-from-multiple-processes"]], "Using concurrent.futures.ProcessPoolExecutor": [[101, "using-concurrent-futures-processpoolexecutor"]], "Deploying Web applications using Gunicorn and uWSGI": [[101, "deploying-web-applications-using-gunicorn-and-uwsgi"]], "Using file rotation": [[101, "using-file-rotation"]], "Use of alternative formatting styles": [[101, "use-of-alternative-formatting-styles"]], "Customizing LogRecord": [[101, "customizing-logrecord"]], "Subclassing QueueHandler - a ZeroMQ example": [[101, "subclassing-queuehandler-a-zeromq-example"]], "Subclassing QueueListener - a ZeroMQ example": [[101, "subclassing-queuelistener-a-zeromq-example"]], "An example dictionary-based configuration": [[101, "an-example-dictionary-based-configuration"]], "Using a rotator and namer to customize log rotation processing": [[101, "using-a-rotator-and-namer-to-customize-log-rotation-processing"]], "A more elaborate multiprocessing example": [[101, "a-more-elaborate-multiprocessing-example"]], "Inserting a BOM into messages sent to a SysLogHandler": [[101, "inserting-a-bom-into-messages-sent-to-a-sysloghandler"]], "Implementing structured logging": [[101, "implementing-structured-logging"]], "Customizing handlers with dictConfig()": [[101, "customizing-handlers-with-dictconfig"]], "Using particular formatting styles throughout your application": [[101, "using-particular-formatting-styles-throughout-your-application"]], "Using LogRecord factories": [[101, "using-logrecord-factories"]], "Using custom message objects": [[101, "using-custom-message-objects"]], "Configuring filters with dictConfig()": [[101, "configuring-filters-with-dictconfig"]], "Customized exception formatting": [[101, "customized-exception-formatting"]], "Speaking logging messages": [[101, "speaking-logging-messages"]], "Buffering logging messages and outputting them conditionally": [[101, "buffering-logging-messages-and-outputting-them-conditionally"]], "Sending logging messages to email, with buffering": [[101, "sending-logging-messages-to-email-with-buffering"]], "Formatting times using UTC (GMT) via configuration": [[101, "formatting-times-using-utc-gmt-via-configuration"]], "Using a context manager for selective logging": [[101, "using-a-context-manager-for-selective-logging"]], "A CLI application starter template": [[101, "a-cli-application-starter-template"]], "A Qt GUI for logging": [[101, "a-qt-gui-for-logging"]], "Logging to syslog with RFC5424 support": [[101, "logging-to-syslog-with-rfc5424-support"]], "How to treat a logger like an output stream": [[101, "how-to-treat-a-logger-like-an-output-stream"]], "Patterns to avoid": [[101, "patterns-to-avoid"]], "Opening the same log file multiple times": [[101, "opening-the-same-log-file-multiple-times"]], "Using loggers as attributes in a class or passing them as parameters": [[101, "using-loggers-as-attributes-in-a-class-or-passing-them-as-parameters"]], "Adding handlers other than NullHandler to a logger in a library": [[101, "adding-handlers-other-than-nullhandler-to-a-logger-in-a-library"]], "Creating a lot of loggers": [[101, "creating-a-lot-of-loggers"]], "Other resources": [[101, "other-resources"], [100, "other-resources"]], "Building C and C++ Extensions on Windows": [[77, "building-c-and-c-extensions-on-windows"]], "A Cookbook Approach": [[77, "a-cookbook-approach"]], "Differences Between Unix and Windows": [[77, "differences-between-unix-and-windows"]], "Using DLLs in Practice": [[77, "using-dlls-in-practice"]], "\u51fd\u5f0f\u7de8\u7a0b HOWTO": [[95, "functional-programming-howto"]], "\u7c21\u4ecb": [[95, "introduction"], [35, "introduction"], [104, "introduction"], [108, "introduction"], [432, "introduction"], [461, "introduction"], [462, "introduction"], [451, "introduction"], [460, "introduction"], [327, "introduction"], [281, "introduction"], [255, "introduction"], [248, "introduction"], [149, "introduction"]], "Formal provability": [[95, "formal-provability"]], "Modularity": [[95, "modularity"]], "Ease of debugging and testing": [[95, "ease-of-debugging-and-testing"]], "Composability": [[95, "composability"]], "Iterators": [[95, "iterators"]], "Data Types That Support Iterators": [[95, "data-types-that-support-iterators"]], "Generator expressions and list comprehensions": [[95, "generator-expressions-and-list-comprehensions"]], "Generators": [[95, "generators"]], "Passing values into a generator": [[95, "passing-values-into-a-generator"]], "Built-in functions": [[95, "built-in-functions"], [426, "built-in-functions"]], "The itertools module": [[95, "the-itertools-module"]], "Creating new iterators": [[95, "creating-new-iterators"]], "Calling functions on elements": [[95, "calling-functions-on-elements"]], "Selecting elements": [[95, "selecting-elements"]], "Combinatoric functions": [[95, "combinatoric-functions"]], "Grouping elements": [[95, "grouping-elements"]], "The functools module": [[95, "the-functools-module"]], "The operator module": [[95, "the-operator-module"]], "Small functions and the lambda expression": [[95, "small-functions-and-the-lambda-expression"]], "Revision History and Acknowledgements": [[95, "revision-history-and-acknowledgements"]], "References": [[95, "references"], [107, "references"], [107, "id2"], [107, "id3"], [430, "references"]], "General": [[95, "general"]], "Python-specific": [[95, "python-specific"]], "Python \u8aaa\u660e\u6587\u4ef6": [[95, "python-documentation"]], "Argparse \u6559\u5b78": [[89, "argparse-tutorial"]], "\u6982\u5ff5": [[89, "concepts"]], "\u57fa\u672c\u7528\u6cd5": [[89, "the-basics"], [109, "basic-usage"], [294, "basic-use"], [260, "basic-usage"]], "\u4f4d\u7f6e\u5f15\u6578\u7684\u4ecb\u7d39": [[89, "introducing-positional-arguments"]], "\u53ef\u9078\u5f15\u6578\u7684\u4ecb\u7d39": [[89, "introducing-optional-arguments"]], "\u77ed\u9078\u9805": [[89, "short-options"]], "\u7d44\u5408\u4f4d\u7f6e\u5f15\u6578\u548c\u53ef\u9078\u5f15\u6578": [[89, "combining-positional-and-optional-arguments"]], "\u66f4\u9032\u968e\u4e00\u9ede": [[89, "getting-a-little-more-advanced"]], "\u6307\u5b9a\u4e0d\u660e\u78ba\u7684\u5f15\u6578": [[89, "specifying-ambiguous-arguments"]], "\u76f8\u4e92\u885d\u7a81\u7684\u9078\u9805": [[89, "conflicting-options"]], "\u5982\u4f55\u7ffb\u8b6f argparse \u8f38\u51fa": [[89, "how-to-translate-the-argparse-output"]], "\u7d50\u8ad6": [[89, "conclusion"]], "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9": [[96, "python-howtos"]], "\u4ee5 C \u6216 C++ \u64f4\u5145 Python": [[73, "extending-python-with-c-or-c"]], "\u4e00\u500b\u7c21\u55ae\u7bc4\u4f8b": [[73, "a-simple-example"], [100, "a-simple-example"]], "Intermezzo: Errors and Exceptions": [[73, "intermezzo-errors-and-exceptions"]], "\u56de\u5230\u7bc4\u4f8b": [[73, "back-to-the-example"]], "The Module's Method Table and Initialization Function": [[73, "the-module-s-method-table-and-initialization-function"]], "Compilation and Linkage": [[73, "compilation-and-linkage"]], "Calling Python Functions from C": [[73, "calling-python-functions-from-c"]], "Extracting Parameters in Extension Functions": [[73, "extracting-parameters-in-extension-functions"]], "Keyword Parameters for Extension Functions": [[73, "keyword-parameters-for-extension-functions"]], "Building Arbitrary Values": [[73, "building-arbitrary-values"]], "Reference Counts": [[73, "reference-counts"]], "Reference Counting in Python": [[73, "reference-counting-in-python"]], "Ownership Rules": [[73, "ownership-rules"]], "Thin Ice": [[73, "thin-ice"]], "NULL Pointers": [[73, "null-pointers"]], "Writing Extensions in C++": [[73, "writing-extensions-in-c"]], "Providing a C API for an Extension Module": [[73, "providing-a-c-api-for-an-extension-module"]], "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6": [[80, "general-python-faq"]], "\u4e00\u822c\u8cc7\u8a0a": [[80, "general-information"]], "\u4ec0\u9ebc\u662f Python \u8edf\u9ad4\u57fa\u91d1\u6703\uff1f": [[80, "what-is-the-python-software-foundation"]], "\u4f7f\u7528 Python \u6642\u6709\u4efb\u4f55\u7248\u6b0a\u9650\u5236\u55ce\uff1f": [[80, "are-there-copyright-restrictions-on-the-use-of-python"]], "\u7576\u521d\u70ba\u4ec0\u9ebc Python \u6703\u88ab\u5275\u9020\u51fa\u4f86\uff1f": [[80, "why-was-python-created-in-the-first-place"]], "\u4ec0\u9ebc\u662f Python \u64c5\u9577\u7684\u4e8b\u60c5\uff1f": [[80, "what-is-python-good-for"]], "Python \u7684\u7248\u672c\u7de8\u865f\u7cfb\u7d71\u662f\u5982\u4f55\u904b\u4f5c\u7684\uff1f": [[80, "how-does-the-python-version-numbering-scheme-work"]], "\u6211\u8981\u5982\u4f55\u5f97\u5230 Python \u7684\u539f\u59cb\u78bc\u8907\u672c\uff1f": [[80, "how-do-i-obtain-a-copy-of-the-python-source"]], "\u6211\u8981\u5982\u4f55\u53d6\u5f97 Python \u7684\u8aaa\u660e\u6587\u4ef6\uff1f": [[80, "how-do-i-get-documentation-on-python"]], "\u6211\u5f9e\u4f86\u6c92\u6709\u5beb\u904e\u7a0b\u5f0f\uff0c\u6709\u6c92\u6709 Python \u7684\u6559\u5b78\uff1f": [[80, "i-ve-never-programmed-before-is-there-a-python-tutorial"]], "\u6709\u6c92\u6709 Python \u5c08\u5c6c\u7684\u65b0\u805e\u7fa4\u7d44\u6216\u90f5\u4ef6\u8a0e\u8ad6\u7fa4\uff1f": [[80, "is-there-a-newsgroup-or-mailing-list-devoted-to-python"]], "\u5982\u4f55\u53d6\u5f97 Python \u7684 beta \u6e2c\u8a66\u7248\u672c\uff1f": [[80, "how-do-i-get-a-beta-test-version-of-python"]], "\u5982\u4f55\u63d0\u4ea4 Python \u7684\u932f\u8aa4\u5831\u544a\u548c\u4fee\u88dc\u7a0b\u5f0f\uff1f": [[80, "how-do-i-submit-bug-reports-and-patches-for-python"]], "\u662f\u5426\u6709\u95dc\u65bc Python \u7684\u4efb\u4f55\u5df2\u51fa\u7248\u6587\u7ae0\u53ef\u4f9b\u53c3\u8003\uff1f": [[80, "are-there-any-published-articles-about-python-that-i-can-reference"]], "\u6709\u6c92\u6709\u95dc\u65bc Python \u7684\u66f8\uff1f": [[80, "are-there-any-books-on-python"]], "www.python.org \u7684\u771f\u5be6\u4f4d\u7f6e\u5728\u54ea\u88e1\uff1f": [[80, "where-in-the-world-is-www-python-org-located"]], "\u70ba\u4ec0\u9ebc\u8981\u53d6\u540d\u70ba Python\uff1f": [[80, "why-is-it-called-python"]], "\u6211\u9700\u8981\u559c\u6b61\u300cMonty Python \u7684\u98db\u884c\u99ac\u6232\u5718\u300d\u55ce\uff1f": [[80, "do-i-have-to-like-monty-python-s-flying-circus"]], "\u5728\u771f\u5be6\u4e16\u754c\u4e2d\u7684 Python": [[80, "python-in-the-real-world"]], "Python \u7684\u7a69\u5b9a\u6027\u5982\u4f55\uff1f": [[80, "how-stable-is-python"]], "\u6709\u591a\u5c11\u4eba\u5728\u4f7f\u7528 Python\uff1f": [[80, "how-many-people-are-using-python"]], "\u6709\u6c92\u6709\u4efb\u4f55\u91cd\u8981\u7684\u5c08\u6848\u4f7f\u7528 Python \u5b8c\u6210\u958b\u767c\uff1f": [[80, "have-any-significant-projects-been-done-in-python"]], "Python \u672a\u4f86\u9810\u671f\u6703\u6709\u54ea\u4e9b\u65b0\u7684\u958b\u767c\uff1f": [[80, "what-new-developments-are-expected-for-python-in-the-future"]], "\u5c0d Python \u63d0\u51fa\u4e0d\u76f8\u5bb9\u7684\u8b8a\u66f4\u5efa\u8b70\u662f\u5426\u9069\u7576\uff1f": [[80, "is-it-reasonable-to-propose-incompatible-changes-to-python"]], "Python \u5c0d\u65bc\u5165\u9580\u7684\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u800c\u8a00\u662f\u5426\u70ba\u597d\u7684\u8a9e\u8a00\uff1f": [[80, "is-python-a-good-language-for-beginning-programmers"]], "\u4f7f\u7528 DTrace \u548c SystemTap \u6aa2\u6e2c CPython": [[97, "instrumenting-cpython-with-dtrace-and-systemtap"]], "\u555f\u7528\u975c\u614b\u6a19\u8a18": [[97, "enabling-the-static-markers"]], "\u975c\u614b DTrace \u63a2\u91dd": [[97, "static-dtrace-probes"]], "\u975c\u614b SystemTap \u6a19\u8a18": [[97, "static-systemtap-markers"]], "\u53ef\u7528\u7684\u975c\u614b\u6a19\u8a18": [[97, "available-static-markers"]], "SystemTap Tapsets": [[97, "systemtap-tapsets"]], "\u7bc4\u4f8b": [[97, "examples"], [34, "example"], [63, "examples"], [42, "examples"], [134, "examples"], [135, "examples"], [124, "examples"], [131, "examples"], [118, "example"], [132, "examples"], [411, "example"], [411, "id3"], [419, "examples"], [421, "examples"], [376, "examples"], [396, "example"], [405, "examples"], [400, "example"], [380, "examples"], [377, "examples"], [365, "examples"], [356, "examples"], [345, "examples"], [354, "examples"], [358, "examples"], [359, "example"], [307, "example"], [316, "examples"], [331, "examples"], [327, "examples"], [335, "example"], [339, "examples"], [336, "examples"], [328, "example"], [318, "example"], [312, "example"], [281, "examples"], [302, "examples"], [297, "example"], [297, "examples"], [305, "example"], [242, "example"], [268, "examples"], [238, "examples"], [269, "examples"], [241, "examples"], [248, "examples"], [240, "examples"], [212, "example"], [233, "examples"], [171, "examples"], [173, "examples"], [170, "example"], [145, "examples"]], "ipaddress \u6a21\u7d44\u4ecb\u7d39": [[98, "an-introduction-to-the-ipaddress-module"]], "\u7e3d\u652c": [[98, null]], "Creating Address/Network/Interface objects": [[98, "creating-address-network-interface-objects"]], "A Note on IP Versions": [[98, "a-note-on-ip-versions"]], "IP Host Addresses": [[98, "ip-host-addresses"]], "Defining Networks": [[98, "defining-networks"]], "Host Interfaces": [[98, "host-interfaces"]], "Inspecting Address/Network/Interface Objects": [[98, "inspecting-address-network-interface-objects"]], "Networks as lists of Addresses": [[98, "networks-as-lists-of-addresses"]], "Using IP Addresses with other modules": [[98, "using-ip-addresses-with-other-modules"]], "Getting more detail when instance creation fails": [[98, "getting-more-detail-when-instance-creation-fails"]], "\u7248\u6b0a\u5ba3\u544a": [[69, "copyright"]], "Argument Clinic \u6307\u5357": [[90, "argument-clinic-how-to"]], "\u5efa\u7acb C \u8207 C++ \u64f4\u5145\u5957\u4ef6": [[71, "building-c-and-c-extensions"]], "Building C and C++ Extensions with setuptools": [[71, "building-c-and-c-extensions-with-setuptools"]], "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44": [[100, "logging-howto"]], "\u57fa\u790e Logging \u6307\u5357": [[100, "basic-logging-tutorial"]], "\u4ec0\u9ebc\u6642\u5019\u4f7f\u7528 logging": [[100, "when-to-use-logging"]], "Logging to a file": [[100, "logging-to-a-file"]], "Logging from multiple modules": [[100, "logging-from-multiple-modules"]], "Logging variable data": [[100, "logging-variable-data"]], "Changing the format of displayed messages": [[100, "changing-the-format-of-displayed-messages"]], "Displaying the date/time in messages": [[100, "displaying-the-date-time-in-messages"]], "Next Steps": [[100, "next-steps"]], "Advanced Logging Tutorial": [[100, "advanced-logging-tutorial"]], "Logging Flow": [[100, "logging-flow"]], "Loggers": [[100, "loggers"]], "Handlers": [[100, "handlers"]], "Formatters": [[100, "formatters"]], "Configuring Logging": [[100, "configuring-logging"]], "What happens if no configuration is provided": [[100, "what-happens-if-no-configuration-is-provided"]], "Configuring Logging for a Library": [[100, "configuring-logging-for-a-library"]], "Logging Levels": [[100, "logging-levels"], [265, "logging-levels"]], "Custom Levels": [[100, "custom-levels"]], "Useful Handlers": [[100, "useful-handlers"]], "Exceptions raised during logging": [[100, "exceptions-raised-during-logging"]], "Using arbitrary objects as messages": [[100, "using-arbitrary-objects-as-messages"]], "Optimization": [[100, "optimization"]], "Defining Extension Types: Tutorial": [[76, "defining-extension-types-tutorial"]], "The Basics": [[76, "the-basics"]], "Adding data and methods to the Basic example": [[76, "adding-data-and-methods-to-the-basic-example"]], "Providing finer control over data attributes": [[76, "providing-finer-control-over-data-attributes"]], "Supporting cyclic garbage collection": [[76, "supporting-cyclic-garbage-collection"]], "Subclassing other types": [[76, "subclassing-other-types"]], "\u63cf\u8ff0\u5668 HowTo \u6307\u5357": [[93, "descriptor-howto-guide"]], "Primer": [[93, "primer"]], "Simple example: A descriptor that returns a constant": [[93, "simple-example-a-descriptor-that-returns-a-constant"]], "Dynamic lookups": [[93, "dynamic-lookups"]], "Managed attributes": [[93, "managed-attributes"]], "Customized names": [[93, "customized-names"]], "Closing thoughts": [[93, "closing-thoughts"]], "Complete Practical Example": [[93, "complete-practical-example"]], "Validator class": [[93, "validator-class"]], "Custom validators": [[93, "custom-validators"]], "Practical application": [[93, "practical-application"]], "Technical Tutorial": [[93, "technical-tutorial"]], "Definition and introduction": [[93, "definition-and-introduction"]], "\u63cf\u8ff0\u5668\u5354\u5b9a": [[93, "descriptor-protocol"]], "Overview of descriptor invocation": [[93, "overview-of-descriptor-invocation"]], "Invocation from an instance": [[93, "invocation-from-an-instance"]], "Invocation from a class": [[93, "invocation-from-a-class"]], "Invocation from super": [[93, "invocation-from-super"]], "Summary of invocation logic": [[93, "summary-of-invocation-logic"]], "Automatic name notification": [[93, "automatic-name-notification"]], "ORM \u7bc4\u4f8b": [[93, "orm-example"]], "Pure Python Equivalents": [[93, "pure-python-equivalents"]], "Properties": [[93, "properties"]], "Functions and methods": [[93, "functions-and-methods"]], "Kinds of methods": [[93, "kinds-of-methods"]], "Static methods": [[93, "static-methods"]], "Class methods": [[93, "class-methods"]], "Member objects and __slots__": [[93, "member-objects-and-slots"]], "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c": [[84, "library-and-extension-faq"]], "\u5e38\u898b\u51fd\u5f0f\u554f\u984c": [[84, "general-library-questions"]], "How do I find a module or application to perform task X?": [[84, "how-do-i-find-a-module-or-application-to-perform-task-x"]], "\u54ea\u88e1\u53ef\u4ee5\u627e\u5230 math.py (socket.py, regex.py, \u7b49...) \u4f86\u6e90\u6a94\u6848\uff1f": [[84, "where-is-the-math-py-socket-py-regex-py-etc-source-file"]], "\u6211\u5982\u4f55\u4f7f Python script \u57f7\u884c\u5728 Unix\uff1f": [[84, "how-do-i-make-a-python-script-executable-on-unix"]], "\u662f\u5426\u6709\u9069\u7528\u65bc Python \u7684 curses/termcap \u5957\u4ef6\uff1f": [[84, "is-there-a-curses-termcap-package-for-python"]], "Is there an equivalent to C's onexit() in Python?": [[84, "is-there-an-equivalent-to-c-s-onexit-in-python"]], "Why don't my signal handlers work?": [[84, "why-don-t-my-signal-handlers-work"]], "\u5e38\u898b\u8ab2\u984c": [[84, "common-tasks"]], "\u5982\u4f55\u6e2c\u8a66 Python \u7a0b\u5f0f\u6216\u5143\u4ef6\uff1f": [[84, "how-do-i-test-a-python-program-or-component"]], "How do I create documentation from doc strings?": [[84, "how-do-i-create-documentation-from-doc-strings"]], "How do I get a single keypress at a time?": [[84, "how-do-i-get-a-single-keypress-at-a-time"]], "\u57f7\u884c\u7dd2": [[84, "threads"]], "\u5982\u4f55\u4f7f\u7528\u57f7\u884c\u7dd2\u7de8\u5beb\u7a0b\u5f0f\uff1f": [[84, "how-do-i-program-using-threads"]], "\u6211\u7684\u57f7\u884c\u7dd2\u4f3c\u4e4e\u90fd\u6c92\u6709\u904b\u884c\uff1a\u70ba\u4ec0\u9ebc\uff1f": [[84, "none-of-my-threads-seem-to-run-why"]], "How do I parcel out work among a bunch of worker threads?": [[84, "how-do-i-parcel-out-work-among-a-bunch-of-worker-threads"]], "What kinds of global value mutation are thread-safe?": [[84, "what-kinds-of-global-value-mutation-are-thread-safe"]], "\u4e0d\u80fd\u64fa\u812b\u5168\u5c40\u76f4\u8b6f\u5668\u9396\u55ce\uff1f": [[84, "can-t-we-get-rid-of-the-global-interpreter-lock"]], "\u8f38\u5165\u8207\u8f38\u51fa": [[84, "input-and-output"]], "\u5982\u4f55\u522a\u9664\u6a94\u6848\uff1f\uff08\u4ee5\u53ca\u5176\u4ed6\u6a94\u6848\u554f\u984c...\uff09": [[84, "how-do-i-delete-a-file-and-other-file-questions"]], "\u5982\u4f55\u8907\u88fd\u6a94\u6848\uff1f": [[84, "how-do-i-copy-a-file"]], "\u5982\u4f55\u8b80\u53d6\uff08\u6216\u5beb\u5165\uff09\u4e8c\u9032\u4f4d\u5236\u8cc7\u6599\uff1f": [[84, "how-do-i-read-or-write-binary-data"]], "I can't seem to use os.read() on a pipe created with os.popen(); why?": [[84, "i-can-t-seem-to-use-os-read-on-a-pipe-created-with-os-popen-why"]], "\u5982\u4f55\u5b58\u53d6\u5e8f\u5217 (RS232) \u9023\u63a5\u57e0\uff1f": [[84, "how-do-i-access-the-serial-rs232-port"]], "Why doesn't closing sys.stdout (stdin, stderr) really close it?": [[84, "why-doesn-t-closing-sys-stdout-stdin-stderr-really-close-it"]], "\u7db2\u8def (Network)/\u7db2\u969b\u7db2\u8def (Internet) \u7a0b\u5f0f": [[84, "network-internet-programming"]], "Python \u6709\u54ea\u4e9b WWW \u5de5\u5177\uff1f": [[84, "what-www-tools-are-there-for-python"]], "\u5982\u4f55\u6a21\u64ec CGI \u8868\u55ae\u9001\u51fa (submission) (METHOD=POST)\uff1f": [[84, "how-can-i-mimic-cgi-form-submission-method-post"]], "\u6211\u61c9\u8a72\u4f7f\u7528\u4ec0\u9ebc\u6a21\u7d44\u4f86\u8f14\u52a9\u7522\u751f HTML\uff1f": [[84, "what-module-should-i-use-to-help-with-generating-html"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u767c\u9001\u90f5\u4ef6\uff1f": [[84, "how-do-i-send-mail-from-a-python-script"]], "How do I avoid blocking in the connect() method of a socket?": [[84, "how-do-i-avoid-blocking-in-the-connect-method-of-a-socket"]], "\u8cc7\u6599\u5eab": [[84, "databases"]], "Python \u4e2d\u662f\u5426\u6709\u4efb\u4f55\u8cc7\u6599\u5eab\u5957\u4ef6\u7684\u4ecb\u9762\uff1f": [[84, "are-there-any-interfaces-to-database-packages-in-python"]], "How do you implement persistent objects in Python?": [[84, "how-do-you-implement-persistent-objects-in-python"]], "\u6578\u5b78\u548c\u6578\u503c": [[84, "mathematics-and-numerics"]], "\u5982\u4f55\u5728 Python \u4e2d\u751f\u6210\u96a8\u6a5f\u6578\uff1f": [[84, "how-do-i-generate-random-numbers-in-python"]], "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6": [[85, "programming-faq"]], "\u5e38\u898b\u554f\u984c": [[85, "general-questions"]], "\u662f\u5426\u6709\u53ef\u4ee5\u4f7f\u7528\u5728\u7a0b\u5f0f\u78bc\u968e\u6bb5,\u5177\u6709\u4e2d\u65b7\u9ede,\u6b65\u9a5f\u57f7\u884c\u7b49\u529f\u80fd\u7684\u9664\u932f\u5668\uff1f": [[85, "is-there-a-source-code-level-debugger-with-breakpoints-single-stepping-etc"]], "\u6709\u6c92\u6709\u5de5\u5177\u80fd\u5920\u5e6b\u5fd9\u627e bug \u6216\u57f7\u884c\u975c\u614b\u5206\u6790\uff1f": [[85, "are-there-tools-to-help-find-bugs-or-perform-static-analysis"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u5efa\u7acb\u7368\u7acb\u7684\u4e8c\u9032\u4f4d\u6a94\u6848\uff1f": [[85, "how-can-i-create-a-stand-alone-binary-from-a-python-script"]], "Python \u7a0b\u5f0f\u78bc\u662f\u5426\u6709\u7de8\u78bc\u6a19\u6e96\u6216\u98a8\u683c\u6307\u5357\uff1f": [[85, "are-there-coding-standards-or-a-style-guide-for-python-programs"]], "\u6838\u5fc3\u8a9e\u8a00": [[85, "core-language"]], "\u70ba\u4ec0\u9ebc\u7576\u8b8a\u6578\u6709\u503c\u6642\uff0c\u6211\u4ecd\u5f97\u5230\u932f\u8aa4\u8a0a\u606f UnboundLocalError\uff1f": [[85, "why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"]], "Python \u7684\u5340\u57df\u8b8a\u6578\u548c\u5168\u57df\u8b8a\u6578\u6709\u4ec0\u9ebc\u898f\u5247\uff1f": [[85, "what-are-the-rules-for-local-and-global-variables-in-python"]], "Why do lambdas defined in a loop with different values all return the same result?": [[85, "why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result"]], "\u5982\u4f55\u8de8\u6a21\u7d44\u5171\u4eab\u5168\u57df\u8b8a\u6578\uff1f": [[85, "how-do-i-share-global-variables-across-modules"]], "What are the \"best practices\" for using import in a module?": [[85, "what-are-the-best-practices-for-using-import-in-a-module"]], "Why are default values shared between objects?": [[85, "why-are-default-values-shared-between-objects"]], "How can I pass optional or keyword parameters from one function to another?": [[85, "how-can-i-pass-optional-or-keyword-parameters-from-one-function-to-another"]], "\u5f15\u6578 (arguments) \u548c\u53c3\u6578 (parameters) \u6709\u4ec0\u9ebc\u5340\u5225\uff1f": [[85, "what-is-the-difference-between-arguments-and-parameters"]], "\u70ba\u4ec0\u9ebc\u66f4\u6539 list 'y' \u4e5f\u6703\u66f4\u6539 list 'x'\uff1f": [[85, "why-did-changing-list-y-also-change-list-x"]], "How do I write a function with output parameters (call by reference)?": [[85, "how-do-i-write-a-function-with-output-parameters-call-by-reference"]], "How do you make a higher order function in Python?": [[85, "how-do-you-make-a-higher-order-function-in-python"]], "\u5982\u4f55\u5728 Python \u4e2d\u8907\u88fd\u7269\u4ef6\uff1f": [[85, "how-do-i-copy-an-object-in-python"]], "\u5982\u4f55\u627e\u5230\u7269\u4ef6\u7684\u65b9\u6cd5\u6216\u5c6c\u6027\uff1f": [[85, "how-can-i-find-the-methods-or-attributes-of-an-object"]], "\u6211\u7684\u7a0b\u5f0f\u78bc\u5982\u4f55\u767c\u73fe\u7269\u4ef6\u7684\u540d\u7a31\uff1f": [[85, "how-can-my-code-discover-the-name-of-an-object"]], "What's up with the comma operator's precedence?": [[85, "what-s-up-with-the-comma-operator-s-precedence"]], "\u662f\u5426\u6709\u7b49\u6548\u65bc C \u7684 \"?:\" \u4e09\u5143\u904b\u7b97\u5b50\uff1f": [[85, "is-there-an-equivalent-of-c-s-ternary-operator"]], "Is it possible to write obfuscated one-liners in Python?": [[85, "is-it-possible-to-write-obfuscated-one-liners-in-python"]], "What does the slash(/) in the parameter list of a function mean?": [[85, "what-does-the-slash-in-the-parameter-list-of-a-function-mean"]], "\u6578\u5b57\u548c\u5b57\u4e32": [[85, "numbers-and-strings"]], "\u5982\u4f55\u6307\u5b9a\u5341\u516d\u9032\u4f4d\u548c\u516b\u9032\u4f4d\u6574\u6578\uff1f": [[85, "how-do-i-specify-hexadecimal-and-octal-integers"]], "\u70ba\u4ec0\u9ebc -22 // 10 \u56de\u50b3 -3\uff1f": [[85, "why-does-22-10-return-3"]], "How do I get int literal attribute instead of SyntaxError?": [[85, "how-do-i-get-int-literal-attribute-instead-of-syntaxerror"]], "\u5982\u4f55\u5c07\u5b57\u4e32\u8f49\u63db\u70ba\u6578\u5b57\uff1f": [[85, "how-do-i-convert-a-string-to-a-number"]], "\u5982\u4f55\u5c07\u6578\u5b57\u8f49\u63db\u70ba\u5b57\u4e32\uff1f": [[85, "how-do-i-convert-a-number-to-a-string"]], "How do I modify a string in place?": [[85, "how-do-i-modify-a-string-in-place"]], "How do I use strings to call functions/methods?": [[85, "how-do-i-use-strings-to-call-functions-methods"]], "Is there an equivalent to Perl's chomp() for removing trailing newlines from strings?": [[85, "is-there-an-equivalent-to-perl-s-chomp-for-removing-trailing-newlines-from-strings"]], "Is there a scanf() or sscanf() equivalent?": [[85, "is-there-a-scanf-or-sscanf-equivalent"]], "'UnicodeDecodeError' \u6216 'UnicodeEncodeErro' \u932f\u8aa4\u662f\u4ec0\u9ebc\u610f\u601d\uff1f": [[85, "what-does-unicodedecodeerror-or-unicodeencodeerror-error-mean"]], "Can I end a raw string with an odd number of backslashes?": [[85, "can-i-end-a-raw-string-with-an-odd-number-of-backslashes"]], "Performance": [[85, "performance"], [468, "performance"], [297, "performance"], [256, "performance"]], "My program is too slow. How do I speed it up?": [[85, "my-program-is-too-slow-how-do-i-speed-it-up"]], "What is the most efficient way to concatenate many strings together?": [[85, "what-is-the-most-efficient-way-to-concatenate-many-strings-together"]], "Sequences (Tuples/Lists)": [[85, "sequences-tuples-lists"]], "How do I convert between tuples and lists?": [[85, "how-do-i-convert-between-tuples-and-lists"]], "What's a negative index?": [[85, "what-s-a-negative-index"]], "How do I iterate over a sequence in reverse order?": [[85, "how-do-i-iterate-over-a-sequence-in-reverse-order"]], "How do you remove duplicates from a list?": [[85, "how-do-you-remove-duplicates-from-a-list"]], "How do you remove multiple items from a list": [[85, "how-do-you-remove-multiple-items-from-a-list"]], "How do you make an array in Python?": [[85, "how-do-you-make-an-array-in-python"]], "How do I create a multidimensional list?": [[85, "how-do-i-create-a-multidimensional-list"]], "How do I apply a method or function to a sequence of objects?": [[85, "how-do-i-apply-a-method-or-function-to-a-sequence-of-objects"]], "Why does a_tuple[i] += ['item'] raise an exception when the addition works?": [[85, "why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works"]], "I want to do a complicated sort: can you do a Schwartzian Transform in Python?": [[85, "i-want-to-do-a-complicated-sort-can-you-do-a-schwartzian-transform-in-python"]], "How can I sort one list by values from another list?": [[85, "how-can-i-sort-one-list-by-values-from-another-list"]], "\u7269\u4ef6": [[85, "objects"]], "\u4ec0\u9ebc\u662f\u985e\u5225 (class)\uff1f": [[85, "what-is-a-class"]], "\u4ec0\u9ebc\u662f\u65b9\u6cd5 (method)\uff1f": [[85, "what-is-a-method"]], "What is self?": [[85, "what-is-self"]], "How do I check if an object is an instance of a given class or of a subclass of it?": [[85, "how-do-i-check-if-an-object-is-an-instance-of-a-given-class-or-of-a-subclass-of-it"]], "What is delegation?": [[85, "what-is-delegation"]], "How do I call a method defined in a base class from a derived class that extends it?": [[85, "how-do-i-call-a-method-defined-in-a-base-class-from-a-derived-class-that-extends-it"]], "How can I organize my code to make it easier to change the base class?": [[85, "how-can-i-organize-my-code-to-make-it-easier-to-change-the-base-class"]], "How do I create static class data and static class methods?": [[85, "how-do-i-create-static-class-data-and-static-class-methods"]], "How can I overload constructors (or methods) in Python?": [[85, "how-can-i-overload-constructors-or-methods-in-python"]], "I try to use __spam and I get an error about _SomeClassName__spam.": [[85, "i-try-to-use-spam-and-i-get-an-error-about-someclassname-spam"]], "My class defines __del__ but it is not called when I delete the object.": [[85, "my-class-defines-del-but-it-is-not-called-when-i-delete-the-object"]], "How do I get a list of all instances of a given class?": [[85, "how-do-i-get-a-list-of-all-instances-of-a-given-class"]], "Why does the result of id() appear to be not unique?": [[85, "why-does-the-result-of-id-appear-to-be-not-unique"]], "When can I rely on identity tests with the is operator?": [[85, "when-can-i-rely-on-identity-tests-with-the-is-operator"]], "\u5b50\u985e\u5225\u5982\u4f55\u63a7\u5236\u4e0d\u53ef\u8b8a\u5be6\u4f8b\u4e2d\u5b58\u5132\u7684\u8cc7\u6599\uff1f": [[85, "how-can-a-subclass-control-what-data-is-stored-in-an-immutable-instance"]], "How do I cache method calls?": [[85, "how-do-i-cache-method-calls"]], "\u6a21\u7d44": [[85, "modules"], [426, "modules"], [428, "examples"], [471, "modules"], [342, "modules"]], "How do I create a .pyc file?": [[85, "how-do-i-create-a-pyc-file"]], "How do I find the current module name?": [[85, "how-do-i-find-the-current-module-name"]], "How can I have modules that mutually import each other?": [[85, "how-can-i-have-modules-that-mutually-import-each-other"]], "__import__('x.y.z') \u56de\u50b3 <module 'x'>\uff0c\u90a3\u6211\u600e\u9ebc\u5f97\u5230 z\uff1f": [[85, "import-x-y-z-returns-module-x-how-do-i-get-z"]], "\u7576\u6211\u7de8\u8f2f\u9700\u8981\u5f15\u5165\u7684\u6a21\u7d44\u4e26\u91cd\u65b0\u5f15\u5165\u5b83\u6642\uff0c\u66f4\u52d5\u6c92\u6709\u53cd\u61c9\u51fa\u4f86\u3002\u70ba\u4ec0\u9ebc\u6703\u9019\u6a23\uff1f": [[85, "when-i-edit-an-imported-module-and-reimport-it-the-changes-don-t-show-up-why-does-this-happen"]], "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6": [[78, "design-and-history-faq"]], "\u70ba\u4ec0\u9ebc Python \u4f7f\u7528\u7e2e\u6392\u5c07\u9673\u8ff0\u5f0f\u9032\u884c\u5206\u7d44\uff1f": [[78, "why-does-python-use-indentation-for-grouping-of-statements"]], "\u70ba\u4ec0\u9ebc\u6211\u6703\u5f9e\u7c21\u55ae\u7684\u6578\u5b78\u904b\u7b97\u5f97\u5230\u5947\u602a\u7684\u7d50\u679c\uff1f": [[78, "why-am-i-getting-strange-results-with-simple-arithmetic-operations"]], "\u70ba\u4f55\u6d6e\u9ede\u6578\u904b\u7b97\u5982\u6b64\u4e0d\u7cbe\u78ba\uff1f": [[78, "why-are-floating-point-calculations-so-inaccurate"]], "\u70ba\u4ec0\u9ebc Python \u5b57\u4e32\u4e0d\u53ef\u8b8a\u52d5\uff1f": [[78, "why-are-python-strings-immutable"]], "\u70ba\u4f55\u300cself\u300d\u5728\u65b9\u6cd5 (method) \u5b9a\u7fa9\u548c\u547c\u53eb\u6642\u4e00\u5b9a\u8981\u660e\u78ba\u4f7f\u7528\uff1f": [[78, "why-must-self-be-used-explicitly-in-method-definitions-and-calls"]], "\u70ba\u4f55\u6211\u4e0d\u80fd\u5728\u904b\u7b97\u5f0f (expression) \u4e2d\u4f7f\u7528\u6307\u6d3e\u904b\u7b97\uff1f": [[78, "why-can-t-i-use-an-assignment-in-an-expression"]], "\u70ba\u4f55 Python \u5c0d\u65bc\u4e00\u4e9b\u529f\u80fd\u5be6\u4f5c\u4f7f\u7528\u65b9\u6cd5\uff08\u50cf\u662f list.index()\uff09\uff0c\u53e6\u4e00\u4e9b\u4f7f\u7528\u51fd\u5f0f\uff08\u50cf\u662f len(list)\uff09\uff1f": [[78, "why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list"]], "\u70ba\u4f55 join() \u662f\u5b57\u4e32\u65b9\u6cd5\u800c\u975e\u4e32\u5217 (list) \u6216\u5143\u7d44 (tuple) \u65b9\u6cd5\uff1f": [[78, "why-is-join-a-string-method-instead-of-a-list-or-tuple-method"]], "\u4f8b\u5916\u8655\u7406\u6709\u591a\u5feb\uff1f": [[78, "how-fast-are-exceptions"]], "\u70ba\u4ec0\u9ebc Python \u5167\u6c92\u6709 switch \u6216 case \u9673\u8ff0\u5f0f\uff1f": [[78, "why-isn-t-there-a-switch-or-case-statement-in-python"]], "\u70ba\u4f55\u4e0d\u80fd\u5728\u76f4\u8b6f\u5668\u4e0a\u6a21\u64ec\u57f7\u884c\u7dd2\uff0c\u800c\u8981\u4f7f\u7528\u4f5c\u696d\u7cfb\u7d71\u7684\u7279\u5b9a\u5be6\u4f5c\u65b9\u5f0f\uff1f": [[78, "can-t-you-emulate-threads-in-the-interpreter-instead-of-relying-on-an-os-specific-thread-implementation"]], "\u70ba\u4f55 lambda \u904b\u7b97\u5f0f\u4e0d\u80fd\u5305\u542b\u9673\u8ff0\u5f0f\uff1f": [[78, "why-can-t-lambda-expressions-contain-statements"]], "Python \u53ef\u4ee5\u88ab\u7de8\u8b6f\u6210\u6a5f\u5668\u8a9e\u8a00\u3001C \u8a9e\u8a00\u6216\u5176\u4ed6\u7a2e\u8a9e\u8a00\u55ce\uff1f": [[78, "can-python-be-compiled-to-machine-code-c-or-some-other-language"]], "Python \u5982\u4f55\u7ba1\u7406\u8a18\u61b6\u9ad4\uff1f": [[78, "how-does-python-manage-memory"]], "\u70ba\u4f55 CPython \u4e0d\u4f7f\u7528\u66f4\u591a\u50b3\u7d71\u7684\u5783\u573e\u56de\u6536\u6a5f\u5236\uff1f": [[78, "why-doesn-t-cpython-use-a-more-traditional-garbage-collection-scheme"]], "\u7576 CPython \u7d50\u675f\u6642\uff0c\u70ba\u4f55\u6240\u6709\u7684\u8a18\u61b6\u9ad4\u4e0d\u6703\u88ab\u91cb\u653e\uff1f": [[78, "why-isn-t-all-memory-freed-when-cpython-exits"]], "\u70ba\u4f55\u8981\u628a\u5143\u7d44 (tuple) \u548c\u4e32\u5217 (list) \u5206\u6210\u5169\u500b\u8cc7\u6599\u578b\u614b\uff1f": [[78, "why-are-there-separate-tuple-and-list-data-types"]], "\u4e32\u5217 (list) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[78, "how-are-lists-implemented-in-cpython"]], "\u5b57\u5178 (dictionaries) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[78, "how-are-dictionaries-implemented-in-cpython"]], "\u70ba\u4f55\u5b57\u5178\u7684\u9375\u4e00\u5b9a\u662f\u4e0d\u53ef\u8b8a\u7684\uff1f": [[78, "why-must-dictionary-keys-be-immutable"]], "\u70ba\u4f55 list.sort() \u4e0d\u662f\u56de\u50b3\u6392\u5e8f\u904e\u7684\u4e32\u5217\uff1f": [[78, "why-doesn-t-list-sort-return-the-sorted-list"]], "\u5982\u4f55\u5728 Python \u4e2d\u6307\u5b9a\u548c\u5f37\u5236\u4f7f\u7528\u4e00\u500b\u4ecb\u9762\u898f\u7bc4 (interface spec)\uff1f": [[78, "how-do-you-specify-and-enforce-an-interface-spec-in-python"]], "\u70ba\u4f55\u6c92\u6709 goto \u8a9e\u6cd5\uff1f": [[78, "why-is-there-no-goto"]], "\u70ba\u4f55\u7d14\u5b57\u4e32 (r-string) \u4e0d\u80fd\u4ee5\u53cd\u659c\u7dda\u7d50\u5c3e\uff1f": [[78, "why-can-t-raw-strings-r-strings-end-with-a-backslash"]], "\u70ba\u4f55 Python \u6c92\u6709\u5c6c\u6027\u8ce6\u503c\u7684 with \u9673\u8ff0\u5f0f\uff1f": [[78, "why-doesn-t-python-have-a-with-statement-for-attribute-assignments"]], "\u70ba\u4f55\u7522\u751f\u5668 (generator) \u4e0d\u652f\u63f4 with \u9673\u8ff0\u5f0f\uff1f": [[78, "why-don-t-generators-support-the-with-statement"]], "\u70ba\u4f55 if\u3001while\u3001def\u3001class \u9673\u8ff0\u5f0f\u88e1\u9700\u8981\u5192\u865f\uff1f": [[78, "why-are-colons-required-for-the-if-while-def-class-statements"]], "\u70ba\u4f55 Python \u5141\u8a31\u5728\u4e32\u5217\u548c\u5143\u7d44\u672b\u7aef\u52a0\u4e0a\u9017\u865f\uff1f": [[78, "why-does-python-allow-commas-at-the-end-of-lists-and-tuples"]], "Isolating Extension Modules": [[99, "isolating-extension-modules"]], "Abstract": [[99, null]], "Who should read this": [[99, "who-should-read-this"]], "Background": [[99, "background"], [290, "background"]], "Enter Per-Module State": [[99, "enter-per-module-state"]], "Isolated Module Objects": [[99, "isolated-module-objects"]], "Surprising Edge Cases": [[99, "surprising-edge-cases"]], "Making Modules Safe with Multiple Interpreters": [[99, "making-modules-safe-with-multiple-interpreters"]], "Managing Global State": [[99, "managing-global-state"]], "Managing Per-Module State": [[99, "managing-per-module-state"]], "Opt-Out: Limiting to One Module Object per Process": [[99, "opt-out-limiting-to-one-module-object-per-process"]], "Module State Access from Functions": [[99, "module-state-access-from-functions"]], "Heap Types": [[99, "heap-types"], [63, "heap-types"]], "Changing Static Types to Heap Types": [[99, "changing-static-types-to-heap-types"]], "Defining Heap Types": [[99, "defining-heap-types"]], "Garbage-Collection Protocol": [[99, "garbage-collection-protocol"]], "tp_traverse in Python 3.8 and lower": [[99, "tp-traverse-in-python-3-8-and-lower"]], "Delegating tp_traverse": [[99, "delegating-tp-traverse"]], "Defining tp_dealloc": [[99, "defining-tp-dealloc"]], "Not overriding tp_free": [[99, "not-overriding-tp-free"]], "Avoiding PyObject_New": [[99, "avoiding-pyobject-new"]], "Module State Access from Classes": [[99, "module-state-access-from-classes"]], "Module State Access from Regular Methods": [[99, "module-state-access-from-regular-methods"]], "Module State Access from Slot Methods, Getters and Setters": [[99, "module-state-access-from-slot-methods-getters-and-setters"]], "Lifetime of the Module State": [[99, "lifetime-of-the-module-state"]], "Open Issues": [[99, "open-issues"]], "Per-Class Scope": [[99, "per-class-scope"]], "Lossless Conversion to Heap Types": [[99, "lossless-conversion-to-heap-types"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6": [[81, "graphic-user-interface-faq"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (GUI) \u7684\u5e38\u898b\u554f\u984c": [[81, "general-gui-questions"]], "Python \u6709\u54ea\u4e9b GUI \u5957\u4ef6\uff1f": [[81, "what-gui-toolkits-exist-for-python"]], "Tkinter \u7684\u554f\u7b54": [[81, "tkinter-questions"]], "\u5982\u4f55\u51cd\u7d50 Tkinter \u61c9\u7528\u7a0b\u5f0f\uff1f": [[81, "how-do-i-freeze-tkinter-applications"]], "\u662f\u5426\u53ef\u4ee5\u5728\u7b49\u5f85 I/O \u6642\u8655\u7406 Tk \u4e8b\u4ef6\uff1f": [[81, "can-i-have-tk-events-handled-while-waiting-for-i-o"]], "\u6211\u7121\u6cd5\u8b93\u9375\u7e6b\u7d50 (key binding) \u5728 Tkinter \u4e2d\u4f5c\u7528\uff1a\u70ba\u4ec0\u9ebc\uff1f": [[81, "i-can-t-get-key-bindings-to-work-in-tkinter-why"]], "\u5207\u7247\u7269\u4ef6": [[56, "slice-objects"]], "Ellipsis Object": [[56, "ellipsis-object"]], "\u901a\u7528\u7269\u4ef6\u7d50\u69cb": [[58, "common-object-structures"]], "Base object types and macros": [[58, "base-object-types-and-macros"]], "\u5be6\u4f5c\u51fd\u5f0f\u8207\u65b9\u6cd5": [[58, "implementing-functions-and-methods"]], "Accessing attributes of extension types": [[58, "accessing-attributes-of-extension-types"]], "Member flags": [[58, "member-flags"]], "Member types": [[58, "member-types"]], "Defining Getters and Setters": [[58, "defining-getters-and-setters"]], "C API \u7a69\u5b9a\u6027": [[57, "c-api-stability"]], "\u4e0d\u7a69\u5b9a\u7684 C API": [[57, "unstable-c-api"]], "\u7a69\u5b9a\u7684\u61c9\u7528\u7a0b\u5f0f\u4e8c\u9032\u4f4d\u4ecb\u9762": [[57, "stable-application-binary-interface"]], "\u53d7\u9650 C API": [[57, "limited-c-api"]], "\u7a69\u5b9a ABI": [[57, "stable-abi"]], "\u53d7\u9650 API \u7bc4\u570d\u548c\u6027\u80fd": [[57, "limited-api-scope-and-performance"]], "\u53d7\u9650 API \u6ce8\u610f\u4e8b\u9805": [[57, "limited-api-caveats"]], "\u5e73\u53f0\u6ce8\u610f\u4e8b\u9805": [[57, "platform-considerations"]], "\u53d7\u9650 API \u7684\u5167\u5bb9": [[57, "contents-of-limited-api"]], "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[48, "old-buffer-protocol"]], "MemoryView \u7269\u4ef6": [[43, "index-0"]], "Tuple\uff08\u5143\u7d44\uff09\u7269\u4ef6": [[60, "tuple-objects"]], "Struct Sequence Objects": [[60, "struct-sequence-objects"]], "List\uff08\u4e32\u5217\uff09\u7269\u4ef6": [[38, "list-objects"]], "Object Protocol": [[49, "object-protocol"]], "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177": [[59, "operating-system-utilities"]], "\u7cfb\u7d71\u51fd\u5f0f": [[59, "system-functions"]], "\u884c\u7a0b\u63a7\u5236": [[59, "process-control"]], "\u5f31\u53c3\u7167\u7269\u4ef6": [[67, "weak-reference-objects"]], "Support for Perf Maps": [[51, "support-for-perf-maps"]], "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)": [[44, "instance-method-objects"]], "\u65b9\u6cd5\u7269\u4ef6 (Method Objects)": [[44, "method-objects"]], "None \u7269\u4ef6": [[46, "the-none-object"]], "\u758a\u4ee3\u5668\u5354\u8b70": [[36, "iterator-protocol"]], "Unicode \u7269\u4ef6\u8207\u7de8\u89e3\u78bc\u5668": [[64, "unicode-objects-and-codecs"]], "Unicode Objects": [[64, "unicode-objects"]], "Unicode Type": [[64, "unicode-type"]], "Unicode Character Properties": [[64, "unicode-character-properties"]], "Creating and accessing Unicode strings": [[64, "creating-and-accessing-unicode-strings"]], "Locale Encoding": [[64, "locale-encoding"]], "File System Encoding": [[64, "file-system-encoding"]], "wchar_t Support": [[64, "wchar-t-support"]], "Built-in Codecs": [[64, "built-in-codecs"]], "Generic Codecs": [[64, "generic-codecs"]], "UTF-8 \u7de8\u89e3\u78bc\u5668": [[64, "utf-8-codecs"]], "UTF-32 \u7de8\u89e3\u78bc\u5668": [[64, "utf-32-codecs"]], "UTF-16 \u7de8\u89e3\u78bc\u5668": [[64, "utf-16-codecs"]], "UTF-7 \u7de8\u89e3\u78bc\u5668": [[64, "utf-7-codecs"]], "Unicode-Escape Codecs": [[64, "unicode-escape-codecs"]], "Raw-Unicode-Escape Codecs": [[64, "raw-unicode-escape-codecs"]], "Latin-1 \u7de8\u89e3\u78bc\u5668": [[64, "latin-1-codecs"]], "ASCII \u7de8\u89e3\u78bc\u5668": [[64, "ascii-codecs"]], "Character Map Codecs": [[64, "character-map-codecs"]], "MBCS codecs for Windows": [[64, "mbcs-codecs-for-windows"]], "Methods & Slots": [[64, "methods-slots"]], "Methods and Slot Functions": [[64, "methods-and-slot-functions"]], "\u96c6\u5408\u7269\u4ef6": [[55, "set-objects"]], "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44": [[45, "module-objects"]], "Initializing C modules": [[45, "initializing-c-modules"]], "Single-phase initialization": [[45, "single-phase-initialization"]], "Multi-phase initialization": [[45, "multi-phase-initialization"]], "Low-level module creation functions": [[45, "low-level-module-creation-functions"]], "Support functions": [[45, "support-functions"]], "Module lookup": [[45, "module-lookup"]], "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6": [[37, "iterator-objects"]], "\u7de8\u5beb\u6a19\u6e96": [[35, "coding-standards"]], "\u5f15\u5165\u6a94\u6848 (include files)": [[35, "include-files"]], "\u6709\u7528\u7684\u5de8\u96c6": [[35, "useful-macros"]], "\u7269\u4ef6\u3001\u578b\u5225\u548c\u53c3\u7167\u8a08\u6578": [[35, "objects-types-and-reference-counts"]], "\u53c3\u7167\u8a08\u6578": [[35, "reference-counts"], [52, "reference-counting"]], "\u53c3\u7167\u8a08\u6578\u8a73\u7d30\u8cc7\u8a0a": [[35, "reference-count-details"]], "\u578b\u5225": [[35, "types"]], "\u4f8b\u5916": [[35, "exceptions"], [122, "exceptions"], [125, "exceptions"], [132, "exceptions"], [427, "exceptions"], [411, "exceptions"], [408, "exceptions"], [406, "exceptions"], [346, "exceptions"], [341, "exceptions"], [335, "exceptions"], [338, "exceptions"], [339, "exceptions"], [269, "exceptions"], [260, "exceptions"], [230, "exceptions"], [165, "exceptions"]], "\u5d4c\u5165\u5f0fPython": [[35, "embedding-python"]], "\u9664\u932f\u5efa\u7f6e": [[35, "debugging-builds"]], "Sequence Protocol": [[54, "sequence-protocol"]], "Number Protocol": [[47, "number-protocol"]], "\u6574\u6578\u7269\u4ef6": [[39, "integer-objects"]], "\u5de5\u5177": [[65, "utilities"]], "\u578b\u5225\u63d0\u793a\u7269\u4ef6": [[62, "objects-for-type-hinting"]], "Python Initialization Configuration": [[34, "python-initialization-configuration"]], "PyWideStringList": [[34, "pywidestringlist"]], "PyStatus": [[34, "pystatus"]], "PyPreConfig": [[34, "pypreconfig"]], "Preinitialize Python with PyPreConfig": [[34, "preinitialize-python-with-pypreconfig"]], "PyConfig": [[34, "pyconfig"]], "Initialization with PyConfig": [[34, "initialization-with-pyconfig"]], "Isolated Configuration": [[34, "isolated-configuration"]], "Python Configuration": [[34, "python-configuration"]], "Python Path Configuration": [[34, "python-path-configuration"]], "Py_RunMain()": [[34, "py-runmain"]], "Py_GetArgcArgv()": [[34, "py-getargcargv"]], "Multi-Phase Initialization Private Provisional API": [[34, "multi-phase-initialization-private-provisional-api"]], "Data marshalling support": [[41, "data-marshalling-support"]], "\u578b\u5225\u7269\u4ef6": [[63, "type-objects"]], "Quick Reference": [[63, "quick-reference"]], "\"tp slots\"": [[63, "tp-slots"]], "sub-slots": [[63, "sub-slots"]], "slot typedefs": [[63, "slot-typedefs"]], "PyTypeObject Definition": [[63, "pytypeobject-definition"]], "PyObject Slots": [[63, "pyobject-slots"]], "PyVarObject Slots": [[63, "pyvarobject-slots"]], "PyTypeObject Slots": [[63, "pytypeobject-slots"]], "Static Types": [[63, "static-types"]], "Number Object Structures": [[63, "number-object-structures"]], "Mapping Object Structures": [[63, "mapping-object-structures"]], "Sequence Object Structures": [[63, "sequence-object-structures"]], "Buffer Object Structures": [[63, "buffer-object-structures"]], "Async Object Structures": [[63, "async-object-structures"]], "Slot Type typedefs": [[63, "slot-type-typedefs"]], "\u8a18\u61b6\u9ad4\u7ba1\u7406": [[42, "memory-management"]], "\u7e3d\u89bd": [[42, "overview"], [256, "overview"]], "Allocator Domains": [[42, "allocator-domains"]], "Raw Memory Interface": [[42, "raw-memory-interface"]], "Memory Interface": [[42, "memory-interface"]], "Object allocators": [[42, "object-allocators"]], "Default Memory Allocators": [[42, "default-memory-allocators"]], "Customize Memory Allocators": [[42, "customize-memory-allocators"]], "Debug hooks on the Python memory allocators": [[42, "debug-hooks-on-the-python-memory-allocators"]], "The pymalloc allocator": [[42, "the-pymalloc-allocator"]], "Customize pymalloc Arena Allocator": [[42, "customize-pymalloc-arena-allocator"]], "tracemalloc C API": [[42, "tracemalloc-c-api"]], "Reflection": [[53, "reflection"]], "The Very High Level Layer": [[66, "the-very-high-level-layer"]], "Type Objects": [[61, "type-objects"], [342, "type-objects"]], "Creating Heap-Allocated Types": [[61, "creating-heap-allocated-types"]], "Object Implementation Support": [[50, "object-implementation-support"]], "Mapping Protocol": [[40, "mapping-protocol"]], "\u5e73\u81fa\u652f\u63f4": [[129, "platform-support"]], "\u6240\u6709\u5e73\u53f0": [[129, "all-platforms"]], "Windows": [[129, "windows"], [481, "windows"], [481, "id8"], [481, "id15"], [481, "id21"], [481, "id35"], [481, "id45"], [481, "id60"], [481, "id67"], [481, "id77"], [481, "id87"], [481, "id96"], [481, "id106"], [481, "id112"], [481, "id122"], [481, "id132"], [481, "id141"], [481, "id153"], [481, "id162"], [481, "id171"], [481, "id179"], [481, "id188"], [481, "id196"], [481, "id204"], [481, "id214"], [481, "id225"], [481, "id235"], [481, "id244"], [481, "id254"], [481, "id272"], [481, "id283"], [481, "id293"], [481, "id303"], [481, "id313"], [481, "id324"], [481, "id335"], [481, "id350"], [481, "id360"], [481, "id371"], [481, "id382"], [481, "id393"], [481, "id401"], [481, "id409"], [481, "id420"], [481, "id434"], [481, "id444"], [481, "id455"], [481, "id464"], [481, "id471"], [481, "id479"], [481, "id496"], [481, "id505"], [481, "id518"], [481, "id528"], [481, "id541"], [481, "id554"], [481, "id560"], [481, "id567"], [481, "id581"], [481, "id586"], [481, "id597"], [481, "id602"], [481, "id619"], [481, "id630"], [481, "id643"], [481, "id653"], [481, "id665"], [481, "id668"], [481, "id675"], [481, "id720"], [481, "id729"]], "Windows \u7684\u5b50\u884c\u7a0b\u652f\u63f4": [[129, "subprocess-support-on-windows"]], "macOS": [[129, "macos"], [481, "macos"], [481, "id16"], [481, "id22"], [481, "id36"], [481, "id46"], [481, "id68"], [481, "id78"], [481, "id97"], [481, "id113"], [481, "id123"], [481, "id133"], [481, "id142"], [481, "id154"], [481, "id163"], [481, "id180"], [481, "id189"], [481, "id197"], [481, "id205"], [481, "id215"], [481, "id226"], [481, "id245"], [481, "id255"], [481, "id263"], [481, "id273"], [481, "id284"], [481, "id294"], [481, "id304"], [481, "id314"], [481, "id325"], [481, "id351"], [481, "id361"], [481, "id372"], [481, "id383"], [481, "id410"], [481, "id427"], [481, "id435"], [481, "id445"], [481, "id456"], [481, "id465"], [481, "id480"], [481, "id506"], [481, "id519"], [481, "id529"]], "\u4e32\u6d41": [[134, "streams"]], "StreamReader": [[134, "streamreader"]], "StreamWriter": [[134, "streamwriter"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u5ba2\u6236\u7aef": [[134, "tcp-echo-client-using-streams"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u4f3a\u670d\u5668": [[134, "tcp-echo-server-using-streams"]], "\u7372\u53d6 HTTP \u6a19\u982d": [[134, "get-http-headers"]], "\u8a3b\u518a\u4e00\u500b\u4f7f\u7528\u4e32\u6d41\u4f86\u7b49\u5f85\u8cc7\u6599\u7684\u958b\u653e socket": [[134, "register-an-open-socket-to-wait-for-data-using-streams"]], "\u5b50\u884c\u7a0b": [[135, "subprocesses"]], "\u5efa\u7acb\u5b50\u884c\u7a0b": [[135, "creating-subprocesses"]], "\u5e38\u6578": [[135, "constants"], [384, "constant"], [403, "constants"], [335, "constants"], [339, "constants"], [273, "constants"], [233, "constants"], [181, "constants"], [184, "constants"], [152, "constants"]], "Interacting with Subprocesses": [[135, "interacting-with-subprocesses"]], "\u5b50\u884c\u7a0b\u8207\u7dda\u7a0b": [[135, "subprocess-and-threads"]], "Futures": [[127, "futures"]], "Future \u51fd\u5f0f": [[127, "future-functions"]], "Future \u7269\u4ef6": [[127, "future-object"], [164, "future-objects"]], "abc --- \u62bd\u8c61\u57fa\u5e95\u985e\u5225": [[114, "module-abc"]], "\u9ad8\u968e API \u7d22\u5f15": [[122, "high-level-api-index"]], "\u4efb\u52d9 (Tasks)": [[122, "tasks"]], "\u4f47\u5217 (Queues)": [[122, "queues"], [132, "queues"]], "\u5b50\u884c\u7a0b (Subprocesses)": [[122, "subprocesses"]], "\u4e32\u6d41 (Streams)": [[122, "streams"]], "\u540c\u6b65\u5316 (Synchronization)": [[122, "synchronization"]], "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58": [[117, "data-compression-and-archiving"]], "__future__ --- Future \u9673\u8ff0\u5f0f\u5b9a\u7fa9": [[111, "module-__future__"]], "\u6a21\u7d44\u5167\u5bb9": [[111, "module-contents"], [408, "module-contents"], [384, "module-contents"], [331, "module-contents"], [335, "module-contents"], [317, "module-contents"], [332, "module-contents"], [209, "module-contents"], [173, "module-contents"]], "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3": [[110, "to3-automated-python-2-to-3-code-translation"]], "\u4f7f\u7528 2to3": [[110, "using-2to3"]], "Fixers": [[110, "fixers"]], "lib2to3 --- 2to3's library": [[110, "module-lib2to3"]], "Runners (\u57f7\u884c\u5668)": [[133, "runners"]], "\u904b\u884c\u4e00\u500b asyncio \u7a0b\u5f0f": [[133, "running-an-asyncio-program"]], "Runner context manager": [[133, "runner-context-manager"]], "Handling Keyboard Interruption": [[133, "handling-keyboard-interruption"]], "Python \u5c0d Linux perf \u5206\u6790\u5668\u7684\u652f\u63f4": [[102, "python-support-for-the-linux-perf-profiler"]], "\u5982\u4f55\u555f\u7528 perf \u5206\u6790\u652f\u63f4": [[102, "how-to-enable-perf-profiling-support"]], "\u5982\u4f55\u7372\u5f97\u6700\u4f73\u7d50\u679c": [[102, "how-to-obtain-the-best-results"]], "\u4f4e\u968e API \u7d22\u5f15": [[128, "low-level-api-index"]], "\u7372\u53d6\u4e8b\u4ef6\u8ff4\u5708": [[128, "obtaining-the-event-loop"]], "\u4e8b\u4ef6\u8ff4\u5708\u65b9\u6cd5": [[128, "event-loop-methods"]], "\u50b3\u8f38": [[128, "transports"]], "\u5354\u5b9a": [[128, "protocols"], [384, "protocols"]], "\u4e8b\u4ef6\u8ff4\u5708 Policies": [[128, "event-loop-policies"]], "__main__ --- \u9802\u5c64\u7a0b\u5f0f\u78bc\u74b0\u5883": [[112, "module-__main__"]], "__name__ == '__main__'": [[112, "name-main"]], "\u4ec0\u9ebc\u662f\u300c\u9802\u5c64\u7a0b\u5f0f\u78bc\u74b0\u5883\u300d\uff1f": [[112, "what-is-the-top-level-code-environment"]], "\u6163\u7528 (Idiomatic) \u7528\u6cd5": [[112, "idiomatic-usage"], [112, "id1"]], "\u6253\u5305\u6642\u9808\u8003\u616e\u7684\u4e8b\u60c5": [[112, "packaging-considerations"]], "Python \u5957\u4ef6\u4e2d\u7684 __main__.py": [[112, "main-py-in-python-packages"]], "import __main__": [[112, "import-main"]], "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f": [[104, "regular-expression-howto"]], "Simple Patterns": [[104, "simple-patterns"]], "Matching Characters": [[104, "matching-characters"]], "Repeating Things": [[104, "repeating-things"]], "Using Regular Expressions": [[104, "using-regular-expressions"]], "Compiling Regular Expressions": [[104, "compiling-regular-expressions"]], "The Backslash Plague": [[104, "the-backslash-plague"]], "Performing Matches": [[104, "performing-matches"]], "Module-Level Functions": [[104, "module-level-functions"], [265, "module-level-functions"]], "Compilation Flags": [[104, "compilation-flags"]], "More Pattern Power": [[104, "more-pattern-power"]], "More Metacharacters": [[104, "more-metacharacters"]], "Grouping": [[104, "grouping"]], "Non-capturing and Named Groups": [[104, "non-capturing-and-named-groups"]], "Lookahead Assertions": [[104, "lookahead-assertions"]], "Modifying Strings": [[104, "modifying-strings"]], "Splitting Strings": [[104, "splitting-strings"]], "Search and Replace": [[104, "search-and-replace"], [245, "search-and-replace"]], "Common Problems": [[104, "common-problems"]], "Use String Methods": [[104, "use-string-methods"]], "match() versus search()": [[104, "match-versus-search"]], "Greedy versus Non-Greedy": [[104, "greedy-versus-non-greedy"]], "Using re.VERBOSE": [[104, "using-re-verbose"]], "Feedback": [[104, "feedback"]], "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90": [[108, "howto-fetch-internet-resources-using-the-urllib-package"]], "Related Articles": [[108, null]], "\u5f9e URL \u53d6\u5f97\u8cc7\u6e90": [[108, "fetching-urls"]], "Data": [[108, "data"]], "Headers": [[108, "headers"]], "Handling Exceptions": [[108, "handling-exceptions"]], "URLError": [[108, "urlerror"]], "HTTPError": [[108, "httperror"]], "Error Codes": [[108, "error-codes"]], "Wrapping it Up": [[108, "wrapping-it-up"]], "Number 1": [[108, "number-1"]], "Number 2": [[108, "number-2"]], "info and geturl": [[108, "info-and-geturl"]], "Openers and Handlers": [[108, "openers-and-handlers"]], "Basic Authentication": [[108, "id5"]], "Proxies": [[108, "proxies"]], "Sockets and Layers": [[108, "sockets-and-layers"]], "\u8a3b\u89e3": [[108, "footnotes"], [346, "notes"]], "Policies": [[130, "policies"]], "Getting and Setting the Policy": [[130, "getting-and-setting-the-policy"]], "Policy Objects": [[130, "policy-objects"]], "Process Watchers": [[130, "process-watchers"]], "Custom Policies": [[130, "custom-policies"]], "Event Loop": [[124, "event-loop"]], "Event Loop Methods": [[124, "event-loop-methods"]], "Running and stopping the loop": [[124, "running-and-stopping-the-loop"]], "Scheduling callbacks": [[124, "scheduling-callbacks"]], "Scheduling delayed callbacks": [[124, "scheduling-delayed-callbacks"]], "Creating Futures and Tasks": [[124, "creating-futures-and-tasks"]], "Opening network connections": [[124, "opening-network-connections"]], "Creating network servers": [[124, "creating-network-servers"]], "Transferring files": [[124, "transferring-files"]], "TLS Upgrade": [[124, "tls-upgrade"]], "Watching file descriptors": [[124, "watching-file-descriptors"]], "Working with socket objects directly": [[124, "working-with-socket-objects-directly"]], "DNS": [[124, "dns"]], "Working with pipes": [[124, "working-with-pipes"]], "Unix signals": [[124, "unix-signals"]], "Executing code in thread or process pools": [[124, "executing-code-in-thread-or-process-pools"]], "Error Handling API": [[124, "error-handling-api"]], "Enabling debug mode": [[124, "enabling-debug-mode"]], "Running Subprocesses": [[124, "running-subprocesses"]], "Callback Handles": [[124, "callback-handles"]], "Server Objects": [[124, "server-objects"], [336, "server-objects"]], "Event Loop Implementations": [[124, "event-loop-implementations"]], "Hello World with call_soon()": [[124, "hello-world-with-call-soon"]], "Display the current date with call_later()": [[124, "display-the-current-date-with-call-later"]], "Watch a file descriptor for read events": [[124, "watch-a-file-descriptor-for-read-events"]], "Set signal handlers for SIGINT and SIGTERM": [[124, "set-signal-handlers-for-sigint-and-sigterm"]], "Transports and Protocols": [[131, "transports-and-protocols"]], "Transports": [[131, "transports"]], "Transports Hierarchy": [[131, "transports-hierarchy"]], "Base Transport": [[131, "base-transport"]], "Read-only Transports": [[131, "read-only-transports"]], "Write-only Transports": [[131, "write-only-transports"]], "Datagram Transports": [[131, "datagram-transports"]], "Subprocess Transports": [[131, "subprocess-transports"]], "Protocols": [[131, "protocols"]], "Base Protocols": [[131, "base-protocols"]], "Base Protocol": [[131, "base-protocol"]], "Streaming Protocols": [[131, "streaming-protocols"]], "Buffered Streaming Protocols": [[131, "buffered-streaming-protocols"]], "Datagram Protocols": [[131, "datagram-protocols"]], "Subprocess Protocols": [[131, "subprocess-protocols"]], "TCP Echo Server": [[131, "tcp-echo-server"]], "TCP Echo Client": [[131, "tcp-echo-client"]], "UDP Echo Server": [[131, "udp-echo-server"]], "UDP Echo Client": [[131, "udp-echo-client"]], "Connecting Existing Sockets": [[131, "connecting-existing-sockets"]], "loop.subprocess_exec() and SubprocessProtocol": [[131, "loop-subprocess-exec-and-subprocessprotocol"]], "ast --- \u62bd\u8c61\u8a9e\u6cd5\u6a39 (Abstract Syntax Trees)": [[120, "module-ast"]], "\u62bd\u8c61\u6587\u6cd5 (Abstract Grammar)": [[120, "abstract-grammar"]], "\u7bc0\u9ede (Node) \u985e\u5225": [[120, "node-classes"]], "\u6839\u7bc0\u9ede": [[120, "root-nodes"]], "\u6587\u672c (Literals)": [[120, "literals"]], "\u8b8a\u6578": [[120, "variables"]], "\u904b\u7b97\u5f0f": [[120, "expressions"]], "\u4e0b\u6a19 (Subscripting)": [[120, "subscripting"]], "\u7d9c\u5408\u904b\u7b97\u5f0f (comprehensions)": [[120, "comprehensions"]], "\u9673\u8ff0\u5f0f": [[120, "statements"]], "\u5f15\u5165 (imports)": [[120, "imports"]], "\u6d41\u7a0b\u63a7\u5236": [[120, "control-flow"]], "\u6a21\u5f0f\u5339\u914d (pattern matching)": [[120, "pattern-matching"]], "\u578b\u5225\u53c3\u6578 (type parameters)": [[120, "type-parameters"]], "\u51fd\u5f0f\u548c\u985e\u5225\u5b9a\u7fa9": [[120, "function-and-class-definitions"]], "async \u548c await": [[120, "async-and-await"]], "ast \u8f14\u52a9\u7a0b\u5f0f": [[120, "ast-helpers"]], "\u7de8\u8b6f\u5668\u65d7\u6a19": [[120, "compiler-flags"], [454, "compiler-flags"]], "\u547d\u4ee4\u5217\u7528\u6cd5": [[120, "command-line-usage"], [298, "command-line-usage"], [245, "command-line-usage"], [148, "command-line-usage"]], "\u4f7f\u7528 asyncio \u958b\u767c": [[123, "developing-with-asyncio"]], "\u9664\u932f\u6a21\u5f0f": [[123, "debug-mode"]], "\u4e26\u884c\u6027\u548c\u591a\u57f7\u884c\u7dd2 (Concurrency and Multithreading)": [[123, "concurrency-and-multithreading"]], "\u57f7\u884c\u963b\u585e\u7684\u7a0b\u5f0f": [[123, "running-blocking-code"]], "\u65e5\u8a8c\u8a18\u9304": [[123, "logging"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7b49\u5f85\u7684 (never-awaited) \u5354\u7a0b": [[123, "detect-never-awaited-coroutines"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7372\u53d6\u7684 (never-retrieved) \u4f8b\u5916": [[123, "detect-never-retrieved-exceptions"]], "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9": [[116, "generic-operating-system-services"]], "\u5b89\u88dd Python \u6a21\u7d44": [[109, "installing-python-modules"]], "\u95dc\u9375\u8853\u8a9e": [[109, "key-terms"]], "\u6211\u8a72\u5982\u4f55...\uff1f": [[109, "how-do-i"]], "...\u5728 Python 3.4 \u4e4b\u524d\u7684 Python \u7248\u672c\u4e2d\u5b89\u88dd pip\uff1f": [[109, "install-pip-in-versions-of-python-prior-to-python-3-4"]], "...\u53ea\u70ba\u76ee\u524d\u7684\u4f7f\u7528\u8005\u5b89\u88dd\u5957\u4ef6\uff1f": [[109, "install-packages-just-for-the-current-user"]], "...\u5b89\u88dd\u79d1\u5b78\u7684 Python \u5957\u4ef6\uff1f": [[109, "install-scientific-python-packages"]], "...\u5e73\u884c\u5b89\u88dd\u591a\u500b Python \u7248\u672c\u4e26\u4f7f\u7528\u5b83\u5011\uff1f": [[109, "work-with-multiple-versions-of-python-installed-in-parallel"]], "\u5e38\u898b\u7684\u5b89\u88dd\u554f\u984c": [[109, "common-installation-issues"]], "\u5728 Linux \u4e0a\u5b89\u88dd\u5957\u4ef6\u81f3\u7cfb\u7d71 Python": [[109, "installing-into-the-system-python-on-linux"]], "\u672a\u5b89\u88dd pip": [[109, "pip-not-installed"]], "\u5b89\u88dd\u4e8c\u9032\u5236\u64f4\u5145 (binary extension)": [[109, "installing-binary-extensions"]], "\u5982\u4f55\u5c07 Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230 Python 3": [[103, "how-to-port-python-2-code-to-python-3"]], "\u7c21\u77ed\u7684\u8aaa\u660e": [[103, "the-short-explanation"]], "\u8a73\u7d30\u7684": [[103, "details"]], "Different versions of Python 2": [[103, "different-versions-of-python-2"]], "Make sure you specify the proper version support in your setup.py file": [[103, "make-sure-you-specify-the-proper-version-support-in-your-setup-py-file"]], "\u6709\u597d\u7684\u6e2c\u8a66\u8986\u84cb\u7387": [[103, "have-good-test-coverage"]], "\u6ce8\u610f Python 2 & 3 \u7684\u5dee\u7570": [[103, "be-aware-of-the-differences-between-python-2-and-3"]], "\u66f4\u65b0\u4f60\u7684\u7a0b\u5f0f\u78bc": [[103, "update-your-code"]], "Division": [[103, "division"]], "Text versus binary data": [[103, "text-versus-binary-data"]], "Use feature detection instead of version detection": [[103, "use-feature-detection-instead-of-version-detection"]], "Prevent compatibility regressions": [[103, "prevent-compatibility-regressions"]], "Check which dependencies block your transition": [[103, "check-which-dependencies-block-your-transition"]], "Update your setup.py file to denote Python 3 compatibility": [[103, "update-your-setup-py-file-to-denote-python-3-compatibility"]], "Use continuous integration to stay compatible": [[103, "use-continuous-integration-to-stay-compatible"]], "Consider using optional static type checking": [[103, "consider-using-optional-static-type-checking"]], "argparse --- Parser for command-line options, arguments and sub-commands": [[118, "module-argparse"]], "\u6559\u5b78": [[118, null], [411, "tutorial"], [382, "tutorial"]], "Core Functionality": [[118, "core-functionality"]], "Quick Links for add_argument()": [[118, "quick-links-for-add-argument"]], "\u5efa\u7acb\u4e00\u500b\u5256\u6790\u5668": [[118, "creating-a-parser"]], "\u589e\u52a0\u5f15\u6578": [[118, "adding-arguments"]], "\u5256\u6790\u5f15\u6578": [[118, "parsing-arguments"]], "ArgumentParser \u7269\u4ef6": [[118, "argumentparser-objects"]], "prog": [[118, "prog"]], "usage": [[118, "usage"]], "\u63cf\u8ff0": [[118, "description"]], "epilog": [[118, "epilog"]], "parents": [[118, "parents"]], "formatter_class": [[118, "formatter-class"]], "prefix_chars": [[118, "prefix-chars"]], "fromfile_prefix_chars": [[118, "fromfile-prefix-chars"]], "argument_default": [[118, "argument-default"]], "allow_abbrev": [[118, "allow-abbrev"]], "conflict_handler": [[118, "conflict-handler"]], "add_help": [[118, "add-help"]], "exit_on_error": [[118, "exit-on-error"]], "The add_argument() method": [[118, "the-add-argument-method"]], "name or flags": [[118, "name-or-flags"]], "action": [[118, "action"]], "nargs": [[118, "nargs"]], "const": [[118, "const"]], "default": [[118, "default"]], "type": [[118, "type"]], "choices": [[118, "choices"]], "required": [[118, "required"]], "\u5e6b\u52a9": [[118, "help"]], "metavar": [[118, "metavar"]], "dest": [[118, "dest"]], "Action classes": [[118, "action-classes"]], "The parse_args() method": [[118, "the-parse-args-method"]], "Option value syntax": [[118, "option-value-syntax"]], "Invalid arguments": [[118, "invalid-arguments"]], "Arguments containing -": [[118, "arguments-containing"]], "Argument abbreviations (prefix matching)": [[118, "argument-abbreviations-prefix-matching"]], "Beyond sys.argv": [[118, "beyond-sys-argv"]], "The Namespace object": [[118, "the-namespace-object"]], "Other utilities": [[118, "other-utilities"]], "Sub-commands": [[118, "sub-commands"]], "FileType \u7269\u4ef6": [[118, "filetype-objects"]], "Argument groups": [[118, "argument-groups"]], "Mutual exclusion": [[118, "mutual-exclusion"]], "Parser defaults": [[118, "parser-defaults"]], "Printing help": [[118, "printing-help"]], "Partial parsing": [[118, "partial-parsing"]], "Customizing file parsing": [[118, "customizing-file-parsing"]], "Exiting methods": [[118, "exiting-methods"]], "Intermixed parsing": [[118, "intermixed-parsing"]], "Upgrading optparse code": [[118, "upgrading-optparse-code"]], "Exceptions": [[118, "exceptions"], [317, "exceptions"], [290, "exceptions"]], "asyncio --- \u975e\u540c\u6b65 I/O": [[121, "module-asyncio"]], "Hello World!": [[121, null]], "\u6307\u5357\u8207\u6559\u5b78": [[121, null]], "aifc --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848": [[115, "module-aifc"]], "Queue": [[132, "queue"]], "Priority Queue\uff08\u512a\u5148\u4f47\u5217\uff09": [[132, "priority-queue"]], "LIFO Queue": [[132, "lifo-queue"]], "Unicode HOWTO": [[107, "unicode-howto"]], "Introduction to Unicode": [[107, "introduction-to-unicode"]], "\u5b9a\u7fa9": [[107, "definitions"]], "Encodings": [[107, "encodings"]], "Python's Unicode Support": [[107, "python-s-unicode-support"]], "The String Type": [[107, "the-string-type"]], "Converting to Bytes": [[107, "converting-to-bytes"]], "Unicode Literals in Python Source Code": [[107, "unicode-literals-in-python-source-code"]], "Unicode Properties": [[107, "unicode-properties"]], "Comparing Strings": [[107, "comparing-strings"]], "Unicode Regular Expressions": [[107, "unicode-regular-expressions"]], "Reading and Writing Unicode Data": [[107, "reading-and-writing-unicode-data"]], "Unicode filenames": [[107, "unicode-filenames"]], "Tips for Writing Unicode-aware Programs": [[107, "tips-for-writing-unicode-aware-programs"]], "Converting Between File Encodings": [[107, "converting-between-file-encodings"]], "Files in an Unknown Encoding": [[107, "files-in-an-unknown-encoding"]], "\u81f4\u8b1d": [[107, "acknowledgements"], [466, "acknowledgements"], [461, "acknowledgements"], [465, "acknowledgements"], [464, "acknowledgements"], [462, "acknowledgements"], [463, "acknowledgements"], [467, "acknowledgements"], [460, "acknowledgements"], [228, "acknowledgements"]], "Extending": [[126, "extending"]], "Writing a Custom Event Loop": [[126, "writing-a-custom-event-loop"]], "Future and Task private constructors": [[126, "future-and-task-private-constructors"]], "Task lifetime support": [[126, "task-lifetime-support"]], "Socket \u7a0b\u5f0f\u8a2d\u8a08\u6307\u5357": [[105, "socket-programming-howto"]], "Sockets": [[105, "sockets"], [424, "sockets"]], "\u6b77\u53f2": [[105, "history"]], "\u5efa\u7acb\u4e00\u500b Socket": [[105, "creating-a-socket"]], "IPC": [[105, "ipc"]], "\u4f7f\u7528\u4e00\u500b Socket": [[105, "using-a-socket"]], "\u4e8c\u9032\u4f4d\u8cc7\u6599": [[105, "binary-data"]], "\u7d50\u675f\u9023\u7dda": [[105, "disconnecting"]], "Sockets \u4f55\u6642\u92b7\u6bc0": [[105, "when-sockets-die"]], "\u975e\u963b\u585e\u7684 Sockets": [[105, "non-blocking-sockets"]], "\u5982\u4f55\u6392\u5e8f": [[106, "sorting-how-to"]], "\u57fa\u790e\u6392\u5e8f": [[106, "sorting-basics"]], "\u9375\u51fd\u5f0f (key functions)": [[106, "key-functions"]], "Operator \u6a21\u7d44\u7684\u51fd\u5f0f": [[106, "operator-module-functions"]], "\u5347\u51aa\u8207\u964d\u51aa": [[106, "ascending-and-descending"]], "\u6392\u5e8f\u7a69\u5b9a\u6027\u8207\u8907\u5408\u6392\u5e8f": [[106, "sort-stability-and-complex-sorts"]], "\u88dd\u98fe-\u6392\u5e8f-\u79fb\u9664\u88dd\u98fe (decorate-sort-undecorate)": [[106, "decorate-sort-undecorate"]], "\u6bd4\u8f03\u51fd\u5f0f (comparison functions)": [[106, "comparison-functions"]], "\u96dc\u9805\u8aaa\u660e": [[106, "odds-and-ends"]], "array --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217": [[119, "module-array"]], "_thread --- Low-level threading API": [[113, "module-_thread"]], "Lexical analysis": [[433, "lexical-analysis"]], "Line structure": [[433, "line-structure"]], "Logical lines": [[433, "logical-lines"]], "Physical lines": [[433, "physical-lines"]], "Comments": [[433, "comments"]], "Encoding declarations": [[433, "encoding-declarations"]], "Explicit line joining": [[433, "explicit-line-joining"]], "Implicit line joining": [[433, "implicit-line-joining"]], "Blank lines": [[433, "blank-lines"]], "Indentation": [[433, "indentation"]], "Whitespace between tokens": [[433, "whitespace-between-tokens"]], "Other tokens": [[433, "other-tokens"]], "Identifiers and keywords": [[433, "identifiers"]], "\u95dc\u9375\u5b57": [[433, "keywords"]], "\u8edf\u95dc\u9375\u5b57": [[433, "soft-keywords"]], "Reserved classes of identifiers": [[433, "reserved-classes-of-identifiers"]], "Literals": [[433, "literals"], [428, "literals"]], "String and Bytes literals": [[433, "string-and-bytes-literals"]], "\u8df3\u812b\u5e8f\u5217": [[433, "escape-sequences"]], "String literal concatenation": [[433, "string-literal-concatenation"]], "f-string\uff08f \u5b57\u4e32\uff09": [[433, "formatted-string-literals"]], "Numeric literals": [[433, "numeric-literals"]], "Integer literals": [[433, "integer-literals"]], "Floating point literals": [[433, "floating-point-literals"]], "Imaginary literals": [[433, "imaginary-literals"]], "Operators": [[433, "operators"], [257, "operators"], [257, "id1"], [257, "id2"]], "Delimiters": [[433, "delimiters"]], "Execution model": [[427, "execution-model"]], "Structure of a program": [[427, "structure-of-a-program"]], "Naming and binding": [[427, "naming-and-binding"]], "Binding of names": [[427, "binding-of-names"]], "Resolution of names": [[427, "resolution-of-names"]], "Annotation scopes": [[427, "annotation-scopes"]], "Lazy evaluation": [[427, "lazy-evaluation"]], "Builtins and restricted execution": [[427, "builtins-and-restricted-execution"]], "Interaction with dynamic features": [[427, "interaction-with-dynamic-features"]], "xml.etree.ElementTree --- The ElementTree XML API": [[411, "module-xml.etree.ElementTree"]], "XML tree and elements": [[411, "xml-tree-and-elements"]], "\u5256\u6790 XML": [[411, "parsing-xml"]], "Pull API for non-blocking parsing": [[411, "pull-api-for-non-blocking-parsing"]], "Finding interesting elements": [[411, "finding-interesting-elements"]], "\u6539\u52d5 XML \u6a94\u6848": [[411, "modifying-an-xml-file"]], "Building XML documents": [[411, "building-xml-documents"]], "Parsing XML with Namespaces": [[411, "parsing-xml-with-namespaces"]], "XPath \u652f\u63f4": [[411, "xpath-support"]], "Supported XPath syntax": [[411, "supported-xpath-syntax"]], "Reference": [[411, "reference"], [411, "id4"], [338, "reference"], [281, "reference"]], "\u51fd\u5f0f": [[411, "functions"], [411, "elementinclude-functions"], [423, "functions"], [403, "functions"], [380, "functions"], [364, "functions"], [342, "functions"], [335, "functions"], [248, "functions"], [177, "functions"], [175, "functions"], [149, "functions"]], "XInclude support": [[411, "xinclude-support"]], "Element \u7269\u4ef6": [[411, "element-objects"]], "ElementTree \u7269\u4ef6": [[411, "elementtree-objects"]], "QName \u7269\u4ef6": [[411, "qname-objects"]], "TreeBuilder \u7269\u4ef6": [[411, "treebuilder-objects"]], "XMLParser \u7269\u4ef6": [[411, "xmlparser-objects"], [312, "xmlparser-objects"]], "XMLPullParser \u7269\u4ef6": [[411, "xmlpullparser-objects"]], "xmlrpc.client --- XML-RPC client access": [[417, "module-xmlrpc.client"]], "ServerProxy \u7269\u4ef6": [[417, "serverproxy-objects"]], "\u65e5\u671f\u6642\u9593\u7269\u4ef6": [[417, "datetime-objects"]], "Binary Objects": [[417, "binary-objects"]], "Fault Objects": [[417, "fault-objects"]], "ProtocolError \u7269\u4ef6": [[417, "protocolerror-objects"]], "MultiCall \u7269\u4ef6": [[417, "multicall-objects"]], "Convenience Functions": [[417, "convenience-functions"]], "Example of Client Usage": [[417, "example-of-client-usage"]], "Example of Client and Server Usage": [[417, "example-of-client-and-server-usage"]], "zipapp \u2014 \u7ba1\u7406\u53ef\u57f7\u884c\u7684 Python zip \u5c01\u5b58\u6a94\u6848": [[419, "module-zipapp"]], "\u57fa\u672c\u7bc4\u4f8b": [[419, "basic-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762": [[419, "command-line-interface"]], "Python API": [[419, "python-api"]], "Specifying the Interpreter": [[419, "specifying-the-interpreter"]], "Creating Standalone Applications with zipapp": [[419, "creating-standalone-applications-with-zipapp"]], "Caveats": [[419, "caveats"]], "The Python Zip Application Archive Format": [[419, "the-python-zip-application-archive-format"]], "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a": [[431, "the-python-language-reference"]], "\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8": [[429, "full-grammar-specification"]], "zoneinfo --- IANA \u6642\u5340\u652f\u63f4": [[423, "module-zoneinfo"]], "Using ZoneInfo": [[423, "using-zoneinfo"]], "Data sources": [[423, "data-sources"]], "Configuring the data sources": [[423, "configuring-the-data-sources"]], "Compile-time configuration": [[423, "compile-time-configuration"]], "Environment configuration": [[423, "environment-configuration"]], "Runtime configuration": [[423, "runtime-configuration"]], "The ZoneInfo class": [[423, "the-zoneinfo-class"]], "String representations": [[423, "string-representations"]], "Pickle serialization": [[423, "pickle-serialization"]], "Globals": [[423, "globals"]], "Exceptions and warnings": [[423, "exceptions-and-warnings"]], "xmlrpc.server --- Basic XML-RPC servers": [[418, "module-xmlrpc.server"]], "SimpleXMLRPCServer \u7269\u4ef6": [[418, "simplexmlrpcserver-objects"]], "SimpleXMLRPCServer \u7bc4\u4f8b": [[418, "simplexmlrpcserver-example"]], "CGIXMLRPCRequestHandler": [[418, "cgixmlrpcrequesthandler"]], "Documenting XMLRPC server": [[418, "documenting-xmlrpc-server"]], "DocXMLRPCServer \u7269\u4ef6": [[418, "docxmlrpcserver-objects"]], "DocCGIXMLRPCRequestHandler": [[418, "doccgixmlrpcrequesthandler"]], "xml.sax --- Support for SAX2 parsers": [[412, "module-xml.sax"]], "SAXException \u7269\u4ef6": [[412, "saxexception-objects"]], "Simple statements": [[434, "simple-statements"]], "Expression statements": [[434, "expression-statements"]], "Assignment statements": [[434, "assignment-statements"]], "Augmented assignment statements": [[434, "augmented-assignment-statements"]], "Annotated assignment statements": [[434, "annotated-assignment-statements"]], "The assert statement": [[434, "the-assert-statement"]], "The pass statement": [[434, "the-pass-statement"]], "The del statement": [[434, "the-del-statement"]], "The return statement": [[434, "the-return-statement"]], "The yield statement": [[434, "the-yield-statement"]], "The raise statement": [[434, "the-raise-statement"]], "The break statement": [[434, "the-break-statement"]], "The continue statement": [[434, "the-continue-statement"]], "The import statement": [[434, "the-import-statement"]], "Future statements": [[434, "future-statements"]], "The global statement": [[434, "the-global-statement"]], "The nonlocal statement": [[434, "the-nonlocal-statement"]], "The type statement": [[434, "the-type-statement"]], "zlib --- \u76f8\u5bb9\u65bc gzip \u7684\u58d3\u7e2e": [[422, "module-zlib"]], "\u8cc7\u6599\u6a21\u578b": [[426, "data-model"]], "Objects, values and types": [[426, "objects-values-and-types"]], "\u6a19\u6e96\u578b\u5225\u968e\u5c64": [[426, "the-standard-type-hierarchy"]], "None": [[426, "none"]], "NotImplemented": [[426, "notimplemented"]], "Ellipsis": [[426, "ellipsis"]], "numbers.Number": [[426, "numbers-number"]], "numbers.Integral": [[426, "numbers-integral"]], "numbers.Real (float)": [[426, "numbers-real-float"]], "numbers.Complex (complex)": [[426, "numbers-complex-complex"]], "Sequences": [[426, "sequences"]], "Immutable sequences": [[426, "immutable-sequences"]], "Mutable sequences": [[426, "mutable-sequences"]], "Set types": [[426, "set-types"]], "Mappings": [[426, "mappings"]], "\u5b57\u5178": [[426, "dictionaries"]], "Callable types": [[426, "callable-types"]], "\u81ea\u8a02\u51fd\u5f0f": [[426, "user-defined-functions"]], "\u7279\u6b8a\u552f\u8b80\u5c6c\u6027": [[426, "special-read-only-attributes"], [426, "index-58"], [426, "index-64"]], "\u7279\u6b8a\u53ef\u5beb\u5c6c\u6027": [[426, "special-writable-attributes"], [426, "index-65"]], "Instance methods": [[426, "instance-methods"]], "Generator functions": [[426, "generator-functions"]], "Coroutine functions": [[426, "coroutine-functions"]], "Asynchronous generator functions": [[426, "asynchronous-generator-functions"], [428, "asynchronous-generator-functions"]], "Built-in methods": [[426, "built-in-methods"]], "Classes": [[426, "classes"], [345, "classes"], [327, "classes"]], "Class Instances": [[426, "class-instances"]], "Custom classes": [[426, "custom-classes"]], "Class instances": [[426, "id3"]], "I/O objects (also known as file objects)": [[426, "i-o-objects-also-known-as-file-objects"]], "Internal types": [[426, "internal-types"]], "Code objects": [[426, "code-objects"]], "\u7528\u65bc\u7a0b\u5f0f\u78bc\u7269\u4ef6\u7684\u65b9\u6cd5": [[426, "methods-on-code-objects"]], "Frame objects": [[426, "frame-objects"]], "Frame object methods": [[426, "frame-object-methods"]], "Traceback objects": [[426, "traceback-objects"]], "Slice objects": [[426, "slice-objects"]], "Static method objects": [[426, "static-method-objects"]], "Class method objects": [[426, "class-method-objects"]], "Special method names": [[426, "special-method-names"]], "Basic customization": [[426, "basic-customization"]], "Customizing attribute access": [[426, "customizing-attribute-access"]], "Customizing module attribute access": [[426, "customizing-module-attribute-access"]], "Implementing Descriptors": [[426, "implementing-descriptors"]], "Invoking Descriptors": [[426, "invoking-descriptors"]], "__slots__": [[426, "slots"], [470, "slots"]], "Customizing class creation": [[426, "customizing-class-creation"]], "Metaclasses": [[426, "metaclasses"]], "Resolving MRO entries": [[426, "resolving-mro-entries"]], "Determining the appropriate metaclass": [[426, "determining-the-appropriate-metaclass"]], "Preparing the class namespace": [[426, "preparing-the-class-namespace"]], "Executing the class body": [[426, "executing-the-class-body"]], "Creating the class object": [[426, "creating-the-class-object"]], "Uses for metaclasses": [[426, "uses-for-metaclasses"]], "Customizing instance and subclass checks": [[426, "customizing-instance-and-subclass-checks"]], "Emulating generic types": [[426, "emulating-generic-types"]], "The purpose of __class_getitem__": [[426, "the-purpose-of-class-getitem"]], "__class_getitem__ versus __getitem__": [[426, "class-getitem-versus-getitem"]], "Emulating callable objects": [[426, "emulating-callable-objects"]], "Emulating container types": [[426, "emulating-container-types"]], "Emulating numeric types": [[426, "emulating-numeric-types"]], "With Statement Context Managers": [[426, "with-statement-context-managers"]], "Customizing positional arguments in class pattern matching": [[426, "customizing-positional-arguments-in-class-pattern-matching"]], "Emulating buffer types": [[426, "emulating-buffer-types"]], "Special method lookup": [[426, "special-method-lookup"]], "\u5354\u7a0b": [[426, "coroutines"], [425, "coroutines"], [137, "coroutines"]], "Awaitable Objects": [[426, "awaitable-objects"]], "Coroutine Objects": [[426, "coroutine-objects"]], "Asynchronous Iterators": [[426, "asynchronous-iterators"]], "Asynchronous Context Managers": [[426, "asynchronous-context-managers"]], "xml.sax.saxutils --- SAX Utilities": [[415, "module-xml.sax.saxutils"]], "Compound statements": [[425, "compound-statements"]], "The if statement": [[425, "the-if-statement"]], "The while statement": [[425, "the-while-statement"]], "The for statement": [[425, "the-for-statement"]], "The try statement": [[425, "the-try-statement"]], "except clause": [[425, "except-clause"]], "except* clause": [[425, "except-star"]], "else clause": [[425, "else-clause"]], "finally clause": [[425, "finally-clause"]], "The with statement": [[425, "the-with-statement"]], "The match statement": [[425, "the-match-statement"]], "Overview": [[425, "overview"], [249, "overview"]], "Guards": [[425, "guards"]], "Irrefutable Case Blocks": [[425, "irrefutable-case-blocks"]], "Patterns": [[425, "patterns"]], "OR Patterns": [[425, "or-patterns"]], "AS Patterns": [[425, "as-patterns"]], "Literal Patterns": [[425, "literal-patterns"]], "Capture Patterns": [[425, "capture-patterns"]], "Wildcard Patterns": [[425, "wildcard-patterns"]], "Value Patterns": [[425, "value-patterns"]], "Group Patterns": [[425, "group-patterns"]], "Sequence Patterns": [[425, "sequence-patterns"]], "Mapping Patterns": [[425, "mapping-patterns"]], "Class Patterns": [[425, "class-patterns"]], "\u51fd\u5f0f\u5b9a\u7fa9": [[425, "function-definitions"]], "Class definitions": [[425, "class-definitions"]], "Coroutine function definition": [[425, "coroutine-function-definition"]], "The async for statement": [[425, "the-async-for-statement"]], "The async with statement": [[425, "the-async-with-statement"]], "Type parameter lists": [[425, "type-parameter-lists"]], "Generic functions": [[425, "generic-functions"]], "Generic classes": [[425, "generic-classes"]], "Generic type aliases": [[425, "generic-type-aliases"]], "xml.sax.handler --- Base classes for SAX handlers": [[413, "module-xml.sax.handler"]], "ContentHandler \u7269\u4ef6": [[413, "contenthandler-objects"]], "DTDHandler \u7269\u4ef6": [[413, "dtdhandler-objects"]], "EntityResolver \u7269\u4ef6": [[413, "entityresolver-objects"]], "ErrorHandler \u7269\u4ef6": [[413, "errorhandler-objects"]], "LexicalHandler \u7269\u4ef6": [[413, "lexicalhandler-objects"]], "Expressions": [[428, "expressions"]], "Arithmetic conversions": [[428, "arithmetic-conversions"]], "Atoms": [[428, "atoms"]], "Identifiers (Names)": [[428, "atom-identifiers"]], "Parenthesized forms": [[428, "parenthesized-forms"]], "Displays for lists, sets and dictionaries": [[428, "displays-for-lists-sets-and-dictionaries"]], "List displays": [[428, "list-displays"]], "Set displays": [[428, "set-displays"]], "Dictionary displays": [[428, "dictionary-displays"]], "Generator expressions": [[428, "generator-expressions"]], "Yield expressions": [[428, "yield-expressions"]], "Generator-iterator methods": [[428, "generator-iterator-methods"]], "Asynchronous generator-iterator methods": [[428, "asynchronous-generator-iterator-methods"]], "Primaries": [[428, "primaries"]], "Attribute references": [[428, "attribute-references"]], "Subscriptions": [[428, "subscriptions"]], "Slicings": [[428, "slicings"]], "Calls": [[428, "calls"]], "Await expression": [[428, "await-expression"]], "The power operator": [[428, "the-power-operator"]], "Unary arithmetic and bitwise operations": [[428, "unary-arithmetic-and-bitwise-operations"]], "Binary arithmetic operations": [[428, "binary-arithmetic-operations"]], "Shifting operations": [[428, "shifting-operations"]], "Binary bitwise operations": [[428, "binary-bitwise-operations"]], "Value comparisons": [[428, "value-comparisons"]], "Membership test operations": [[428, "membership-test-operations"]], "Identity comparisons": [[428, "is-not"]], "Boolean operations": [[428, "boolean-operations"]], "Assignment expressions": [[428, "assignment-expressions"], [479, "assignment-expressions"]], "Conditional expressions": [[428, "conditional-expressions"]], "Lambdas": [[428, "lambda"]], "Expression lists": [[428, "expression-lists"]], "Evaluation order": [[428, "evaluation-order"]], "Operator precedence": [[428, "operator-precedence"]], "zipimport --- Import modules from Zip archives": [[421, "module-zipimport"]], "zipimporter \u7269\u4ef6": [[421, "zipimporter-objects"]], "\u9644\u9304": [[436, "appendix"]], "\u4e92\u52d5\u6a21\u5f0f": [[436, "interactive-mode"], [446, "interactive-mode"]], "\u932f\u8aa4\u8655\u7406": [[436, "error-handling"]], "\u53ef\u57f7\u884c\u7684 Python \u8173\u672c": [[436, "executable-python-scripts"]], "\u4e92\u52d5\u5f0f\u555f\u52d5\u6a94\u6848": [[436, "the-interactive-startup-file"]], "\u5ba2\u88fd\u5316\u6a21\u7d44": [[436, "the-customization-modules"]], "\u6cbf\u9769\u8207\u6388\u6b0a": [[424, "history-and-license"]], "\u8edf\u9ad4\u6cbf\u9769": [[424, "history-of-the-software"]], "\u95dc\u65bc\u5b58\u53d6\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4f7f\u7528 Python \u7684\u5408\u7d04\u689d\u6b3e": [[424, "terms-and-conditions-for-accessing-or-otherwise-using-python"]], "\u7528\u65bc PYTHON 3.12.2 \u7684 PSF \u6388\u6b0a\u5408\u7d04": [[424, "psf-license-agreement-for-python-release"]], "\u7528\u65bc PYTHON 2.0 \u7684 BEOPEN.COM \u6388\u6b0a\u5408\u7d04": [[424, "beopen-com-license-agreement-for-python-2-0"]], "\u7528\u65bc PYTHON 1.6.1 \u7684 CNRI \u6388\u6b0a\u5408\u7d04": [[424, "cnri-license-agreement-for-python-1-6-1"]], "\u7528\u65bc PYTHON 0.9.0 \u81f3 1.2 \u7684 CWI \u6388\u6b0a\u5408\u7d04": [[424, "cwi-license-agreement-for-python-0-9-0-through-1-2"]], "\u7528\u65bc PYTHON 3.12.2 \u8aaa\u660e\u6587\u4ef6\u5167\u7a0b\u5f0f\u78bc\u7684 ZERO-CLAUSE BSD \u6388\u6b0a": [[424, "zero-clause-bsd-license-for-code-in-the-python-release-documentation"]], "\u88ab\u6536\u9304\u8edf\u9ad4\u7684\u6388\u6b0a\u8207\u81f4\u8b1d": [[424, "licenses-and-acknowledgements-for-incorporated-software"]], "Mersenne Twister": [[424, "mersenne-twister"]], "\u975e\u540c\u6b65 socket \u670d\u52d9": [[424, "asynchronous-socket-services"]], "Cookie \u7ba1\u7406": [[424, "cookie-management"]], "\u57f7\u884c\u8ffd\u8e64": [[424, "execution-tracing"]], "UUencode \u8207 UUdecode \u51fd\u5f0f": [[424, "uuencode-and-uudecode-functions"]], "XML \u9060\u7aef\u7a0b\u5e8f\u547c\u53eb": [[424, "xml-remote-procedure-calls"]], "test_epoll": [[424, "test-epoll"]], "Select kqueue": [[424, "select-kqueue"]], "SipHash24": [[424, "siphash24"]], "strtod \u8207 dtoa": [[424, "strtod-and-dtoa"]], "OpenSSL": [[424, "openssl"], [471, "openssl"]], "expat": [[424, "expat"]], "libffi": [[424, "libffi"]], "zlib": [[424, "zlib"], [477, "zlib"], [474, "zlib"]], "cfuhash": [[424, "cfuhash"]], "libmpdec": [[424, "libmpdec"]], "W3C C14N \u6e2c\u8a66\u5957\u4ef6": [[424, "w3c-c14n-test-suite"]], "Audioop": [[424, "audioop"]], "asyncio": [[424, "asyncio"], [477, "asyncio"], [478, "asyncio"], [478, "whatsnew37-asyncio-deprecated"], [480, "asyncio"], [476, "asyncio"], [479, "asyncio"], [475, "asyncio"], [470, "asyncio"], [472, "asyncio"], [471, "asyncio"]], "Alternate Implementations": [[432, "alternate-implementations"]], "Notation": [[432, "notation"]], "zipfile --- Work with ZIP archives": [[420, "module-zipfile"]], "ZipFile \u7269\u4ef6": [[420, "zipfile-objects"]], "Path Objects": [[420, "path-objects"]], "PyZipFile \u7269\u4ef6": [[420, "pyzipfile-objects"]], "ZipInfo \u7269\u4ef6": [[420, "zipinfo-objects"]], "Command-Line Interface": [[420, "command-line-interface"], [356, "command-line-interface"], [309, "command-line-interface"]], "Command-line options": [[420, "command-line-options"], [356, "command-line-options"]], "Decompression pitfalls": [[420, "decompression-pitfalls"]], "From file itself": [[420, "from-file-itself"]], "File System limitations": [[420, "file-system-limitations"]], "Resources limitations": [[420, "resources-limitations"]], "Interruption": [[420, "interruption"]], "Default behaviors of extraction": [[420, "default-behaviors-of-extraction"]], "\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236": [[439, "more-control-flow-tools"]], "if \u9673\u8ff0\u5f0f": [[439, "if-statements"]], "for \u9673\u8ff0\u5f0f": [[439, "for-statements"]], "range() \u51fd\u5f0f": [[439, "the-range-function"]], "\u8ff4\u5708\u5167\u7684 break \u548c continue \u9673\u8ff0\u5f0f\u53ca else \u5b50\u53e5": [[439, "break-and-continue-statements-and-else-clauses-on-loops"]], "pass \u9673\u8ff0\u5f0f": [[439, "pass-statements"]], "match \u9673\u8ff0\u5f0f": [[439, "match-statements"]], "\u5b9a\u7fa9\u51fd\u5f0f (function)": [[439, "defining-functions"]], "\u6df1\u5165\u4e86\u89e3\u51fd\u5f0f\u5b9a\u7fa9": [[439, "more-on-defining-functions"]], "\u9810\u8a2d\u5f15\u6578\u503c": [[439, "default-argument-values"]], "\u95dc\u9375\u5b57\u5f15\u6578": [[439, "keyword-arguments"]], "\u7279\u6b8a\u53c3\u6578": [[439, "special-parameters"]], "\u4f4d\u7f6e\u6216\u95dc\u9375\u5b57\u5f15\u6578 (Positional-or-Keyword Arguments)": [[439, "positional-or-keyword-arguments"]], "\u50c5\u9650\u4f4d\u7f6e\u53c3\u6578 (Positional-Only Parameters)": [[439, "positional-only-parameters"]], "\u50c5\u9650\u95dc\u9375\u5b57\u5f15\u6578 (Keyword-Only Arguments)": [[439, "keyword-only-arguments"]], "\u51fd\u5f0f\u7bc4\u4f8b": [[439, "function-examples"]], "\u56de\u9867": [[439, "recap"]], "\u4efb\u610f\u5f15\u6578\u5217\u8868 (Arbitrary Argument Lists)": [[439, "arbitrary-argument-lists"]], "\u62c6\u89e3\u5f15\u6578\u5217\u8868\uff08Unpacking Argument Lists\uff09": [[439, "unpacking-argument-lists"]], "Lambda \u904b\u7b97\u5f0f": [[439, "lambda-expressions"]], "\u8aaa\u660e\u6587\u4ef6\u5b57\u4e32 (Documentation Strings)": [[439, "documentation-strings"]], "\u51fd\u5f0f\u8a3b\u91cb (Function Annotations)": [[439, "function-annotations"]], "\u9593\u594f\u66f2\uff1a\u7a0b\u5f0f\u78bc\u98a8\u683c (Coding Style)": [[439, "intermezzo-coding-style"]], "Class\uff08\u985e\u5225\uff09": [[438, "classes"]], "\u95dc\u65bc\u540d\u7a31\u8207\u7269\u4ef6\u7684\u4e00\u6bb5\u8a71": [[438, "a-word-about-names-and-objects"]], "Python \u4f5c\u7528\u57df (Scope) \u53ca\u547d\u540d\u7a7a\u9593 (Namespace)": [[438, "python-scopes-and-namespaces"]], "\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u9593\u7684\u7bc4\u4f8b": [[438, "scopes-and-namespaces-example"]], "\u521d\u898b class": [[438, "a-first-look-at-classes"]], "Class definition\uff08\u985e\u5225\u5b9a\u7fa9\uff09\u8a9e\u6cd5": [[438, "class-definition-syntax"]], "Class \u7269\u4ef6": [[438, "class-objects"]], "\u5be6\u4f8b\u7269\u4ef6": [[438, "instance-objects"]], "Method \u7269\u4ef6": [[438, "method-objects"]], "Class \u53ca\u5be6\u4f8b\u8b8a\u6578": [[438, "class-and-instance-variables"]], "\u96a8\u610f\u7684\u5099\u8a3b": [[438, "random-remarks"]], "\u7e7c\u627f (Inheritance)": [[438, "inheritance"]], "\u591a\u91cd\u7e7c\u627f": [[438, "multiple-inheritance"]], "\u79c1\u6709\u8b8a\u6578": [[438, "private-variables"]], "\u88dc\u5145\u8aaa\u660e": [[438, "odds-and-ends"]], "\u758a\u4ee3\u5668 (Iterator)": [[438, "iterators"]], "\u7522\u751f\u5668 (Generator)": [[438, "generators"]], "\u7522\u751f\u5668\u904b\u7b97\u5f0f": [[438, "generator-expressions"]], "xml.sax.xmlreader --- Interface for XML parsers": [[414, "module-xml.sax.xmlreader"]], "XMLReader \u7269\u4ef6": [[414, "xmlreader-objects"]], "IncrementalParser \u7269\u4ef6": [[414, "incrementalparser-objects"]], "Locator Objects": [[414, "locator-objects"]], "InputSource \u7269\u4ef6": [[414, "inputsource-objects"]], "The Attributes Interface": [[414, "the-attributes-interface"]], "The AttributesNS Interface": [[414, "the-attributesns-interface"]], "xml.dom.minidom --- Minimal DOM implementation": [[409, "module-xml.dom.minidom"]], "DOM \u7269\u4ef6": [[409, "dom-objects"]], "DOM \u7bc4\u4f8b": [[409, "dom-example"]], "minidom and the DOM standard": [[409, "minidom-and-the-dom-standard"]], "\u6700\u9ad8\u5c64\u7d1a\u5143\u4ef6": [[435, "top-level-components"]], "\u5b8c\u6574\u7684 Python \u7a0b\u5f0f": [[435, "complete-python-programs"]], "\u6a94\u6848\u8f38\u5165": [[435, "file-input"]], "\u4e92\u52d5\u5f0f\u8f38\u5165": [[435, "interactive-input"]], "\u904b\u7b97\u5f0f\u8f38\u5165": [[435, "expression-input"]], "xml.dom.pulldom --- Support for building partial DOM trees": [[410, "module-xml.dom.pulldom"]], "DOMEventStream \u7269\u4ef6": [[410, "domeventstream-objects"]], "The import system": [[430, "the-import-system"]], "importlib": [[430, "importlib"], [477, "importlib"], [477, "id3"], [478, "importlib"], [478, "id6"], [480, "importlib"], [476, "importlib"], [475, "importlib"], [472, "importlib"]], "Packages": [[430, "packages"]], "Regular packages": [[430, "regular-packages"]], "Namespace packages": [[430, "namespace-packages"]], "Searching": [[430, "searching"]], "The module cache": [[430, "the-module-cache"]], "Finders and loaders": [[430, "finders-and-loaders"]], "Import hooks": [[430, "import-hooks"]], "The meta path": [[430, "the-meta-path"]], "Loading": [[430, "loading"]], "Loaders": [[430, "loaders"]], "Submodules": [[430, "submodules"]], "Module spec": [[430, "module-spec"]], "Import-related module attributes": [[430, "import-related-module-attributes"]], "module.__path__": [[430, "module-path"]], "Module reprs": [[430, "module-reprs"]], "Cached bytecode invalidation": [[430, "cached-bytecode-invalidation"]], "The Path Based Finder": [[430, "the-path-based-finder"]], "Path entry finders": [[430, "path-entry-finders"]], "Path entry finder protocol": [[430, "path-entry-finder-protocol"]], "Replacing the standard import system": [[430, "replacing-the-standard-import-system"]], "Package Relative Imports": [[430, "package-relative-imports"]], "Special considerations for __main__": [[430, "special-considerations-for-main"]], "__main__.__spec__": [[430, "main-spec"]], "\u6dfa\u5617\u6ecb\u5473": [[437, "whetting-your-appetite"]], "\u932f\u8aa4\u548c\u4f8b\u5916": [[441, "errors-and-exceptions"]], "\u8a9e\u6cd5\u932f\u8aa4 (Syntax Error)": [[441, "syntax-errors"]], "\u4f8b\u5916 (Exception)": [[441, "exceptions"]], "\u8655\u7406\u4f8b\u5916": [[441, "handling-exceptions"]], "\u5f15\u767c\u4f8b\u5916": [[441, "raising-exceptions"]], "\u4f8b\u5916\u93c8\u63a5 (Exception Chaining)": [[441, "exception-chaining"]], "\u4f7f\u7528\u8005\u81ea\u5b9a\u7684\u4f8b\u5916": [[441, "user-defined-exceptions"]], "\u5b9a\u7fa9\u6e05\u7406\u52d5\u4f5c": [[441, "defining-clean-up-actions"]], "\u9810\u5b9a\u7fa9\u7684\u6e05\u7406\u52d5\u4f5c": [[441, "predefined-clean-up-actions"]], "\u5f15\u767c\u53ca\u8655\u7406\u591a\u500b\u7121\u95dc\u7684\u4f8b\u5916": [[441, "raising-and-handling-multiple-unrelated-exceptions"]], "\u7528\u8a3b\u89e3\u4f7f\u4f8b\u5916\u66f4\u8a73\u7d30": [[441, "enriching-exceptions-with-notes"]], "xml.dom --- The Document Object Model API": [[408, "module-xml.dom"]], "Objects in the DOM": [[408, "objects-in-the-dom"]], "DOMImplementation \u7269\u4ef6": [[408, "domimplementation-objects"]], "Node Objects": [[408, "node-objects"]], "NodeList \u7269\u4ef6": [[408, "nodelist-objects"]], "DocumentType \u7269\u4ef6": [[408, "documenttype-objects"]], "Document Objects": [[408, "document-objects"]], "Element Objects": [[408, "element-objects"]], "Attr Objects": [[408, "attr-objects"]], "NamedNodeMap \u7269\u4ef6": [[408, "namednodemap-objects"]], "Comment Objects": [[408, "comment-objects"]], "Text and CDATASection Objects": [[408, "text-and-cdatasection-objects"]], "ProcessingInstruction \u7269\u4ef6": [[408, "processinginstruction-objects"]], "Conformance": [[408, "conformance"]], "Type Mapping": [[408, "type-mapping"]], "Accessor Methods": [[408, "accessor-methods"]], "xmlrpc --- XMLRPC \u4f3a\u670d\u5668\u8207\u7528\u6236\u6a21\u7d44": [[416, "xmlrpc-xmlrpc-server-and-client-modules"]], "\u8cc7\u6599\u7d50\u69cb": [[440, "data-structures"]], "\u9032\u4e00\u6b65\u4e86\u89e3 List\uff08\u4e32\u5217\uff09": [[440, "more-on-lists"]], "\u5c07 List \u4f5c\u70ba Stack\uff08\u5806\u758a\uff09\u4f7f\u7528": [[440, "using-lists-as-stacks"]], "\u5c07 List \u4f5c\u70ba Queue\uff08\u4f47\u5217\uff09\u4f7f\u7528": [[440, "using-lists-as-queues"]], "List Comprehensions\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[440, "list-comprehensions"]], "\u5de2\u72c0\u7684 List Comprehensions": [[440, "nested-list-comprehensions"]], "del \u9673\u8ff0\u5f0f": [[440, "the-del-statement"]], "Tuples \u548c\u5e8f\u5217 (Sequences)": [[440, "tuples-and-sequences"]], "\u96c6\u5408 (Sets)": [[440, "sets"]], "\u5b57\u5178\uff08Dictionary\uff09": [[440, "dictionaries"]], "\u8ff4\u5708\u6280\u5de7": [[440, "looping-techniques"]], "\u6df1\u5165\u4e86\u89e3\u689d\u4ef6 (Condition)": [[440, "more-on-conditions"]], "\u5e8f\u5217\u548c\u5176\u4ed6\u8cc7\u6599\u985e\u578b\u4e4b\u6bd4\u8f03": [[440, "comparing-sequences-and-other-types"]], "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[477, "what-s-new-in-python-3-6"]], "Summary -- Release highlights": [[477, "summary-release-highlights"], [480, "summary-release-highlights"], [476, "summary-release-highlights"], [479, "summary-release-highlights"], [474, "summary-release-highlights"]], "New Features": [[477, "new-features"], [478, "new-features"], [480, "new-features"], [480, "id1"], [476, "new-features"], [479, "new-features"], [475, "new-features"]], "PEP 498: Formatted string literals": [[477, "pep-498-formatted-string-literals"]], "PEP 526: Syntax for variable annotations": [[477, "pep-526-syntax-for-variable-annotations"]], "PEP 515: Underscores in Numeric Literals": [[477, "pep-515-underscores-in-numeric-literals"]], "PEP 525: Asynchronous Generators": [[477, "pep-525-asynchronous-generators"]], "PEP 530: Asynchronous Comprehensions": [[477, "pep-530-asynchronous-comprehensions"]], "PEP 487: Simpler customization of class creation": [[477, "pep-487-simpler-customization-of-class-creation"]], "PEP 487: Descriptor Protocol Enhancements": [[477, "pep-487-descriptor-protocol-enhancements"]], "PEP 519: Adding a file system path protocol": [[477, "pep-519-adding-a-file-system-path-protocol"]], "PEP 495: Local Time Disambiguation": [[477, "pep-495-local-time-disambiguation"]], "PEP 529: Change Windows filesystem encoding to UTF-8": [[477, "pep-529-change-windows-filesystem-encoding-to-utf-8"]], "PEP 528: Change Windows console encoding to UTF-8": [[477, "pep-528-change-windows-console-encoding-to-utf-8"]], "PEP 520: Preserving Class Attribute Definition Order": [[477, "pep-520-preserving-class-attribute-definition-order"]], "PEP 468: Preserving Keyword Argument Order": [[477, "pep-468-preserving-keyword-argument-order"]], "New dict implementation": [[477, "new-dict-implementation"]], "PEP 523: Adding a frame evaluation API to CPython": [[477, "pep-523-adding-a-frame-evaluation-api-to-cpython"]], "PYTHONMALLOC environment variable": [[477, "pythonmalloc-environment-variable"]], "DTrace and SystemTap probing support": [[477, "dtrace-and-systemtap-probing-support"]], "\u5176\u4ed6\u8a9e\u8a00\u66f4\u52d5": [[477, "other-language-changes"], [478, "other-language-changes"], [480, "other-language-changes"], [476, "other-language-changes"], [479, "other-language-changes"], [475, "other-language-changes"], [466, "other-language-changes"], [465, "other-language-changes"], [473, "other-language-changes"], [470, "other-language-changes"], [464, "other-language-changes"], [472, "other-language-changes"], [463, "other-language-changes"], [469, "other-language-changes"], [467, "other-language-changes"], [474, "other-language-changes"], [471, "other-language-changes"]], "\u65b0\u6a21\u7d44": [[477, "new-modules"], [478, "new-modules"], [480, "new-modules"], [475, "new-modules"], [470, "new-modules"], [474, "new-modules"]], "secrets": [[477, "secrets"]], "\u6539\u9032\u7684\u6a21\u7d44": [[477, "improved-modules"], [478, "improved-modules"], [480, "improved-modules"], [476, "improved-modules"], [479, "improved-modules"], [475, "improved-modules"], [470, "improved-modules"], [472, "improved-modules"], [474, "improved-modules"], [471, "improved-modules"]], "array": [[477, "array"], [470, "array"], [472, "array"], [474, "array"]], "ast": [[477, "ast"], [480, "ast"], [479, "ast"], [473, "ast"]], "binascii": [[477, "binascii"], [478, "binascii"], [474, "binascii"]], "cmath": [[477, "cmath"], [476, "cmath"]], "collections": [[477, "collections"], [478, "collections"], [478, "id3"], [476, "collections"], [479, "collections"], [475, "collections"], [473, "collections"], [474, "collections"]], "concurrent.futures": [[477, "concurrent-futures"], [478, "concurrent-futures"], [480, "concurrent-futures"], [476, "concurrent-futures"]], "contextlib": [[477, "contextlib"], [478, "contextlib"], [476, "contextlib"], [475, "contextlib"], [473, "contextlib"], [470, "contextlib"], [474, "contextlib"], [471, "contextlib"]], "datetime": [[477, "datetime"], [478, "datetime"], [480, "datetime"], [479, "datetime"], [474, "datetime"], [471, "datetime"]], "decimal": [[477, "decimal"], [478, "decimal"], [474, "decimal"]], "distutils": [[477, "distutils"], [477, "id2"], [478, "distutils"], [480, "distutils"], [476, "distutils"], [470, "distutils"], [472, "distutils"]], "email": [[477, "email"], [476, "email"], [475, "email"], [473, "email"], [474, "email"]], "encodings": [[477, "encodings"], [470, "encodings"]], "enum": [[477, "enum"], [478, "enum"], [478, "id5"], [476, "enum"], [475, "enum"], [470, "enum"], [472, "enum"], [471, "enum"]], "faulthandler": [[477, "faulthandler"], [476, "faulthandler"], [470, "faulthandler"], [474, "faulthandler"]], "fileinput": [[477, "fileinput"], [470, "fileinput"]], "hashlib": [[477, "hashlib"], [480, "hashlib"], [475, "hashlib"], [473, "hashlib"], [470, "hashlib"], [472, "hashlib"], [471, "hashlib"]], "http.client": [[477, "http-client"], [478, "http-client"], [476, "http-client"], [473, "http-client"]], "idlelib and IDLE": [[477, "idlelib-and-idle"], [478, "idlelib-and-idle"], [476, "idlelib-and-idle"]], "inspect": [[477, "inspect"], [480, "inspect"], [476, "inspect"], [479, "inspect"], [475, "inspect"], [473, "inspect"], [470, "inspect"], [472, "inspect"], [474, "inspect"], [471, "inspect"]], "json": [[477, "json"], [476, "json"]], "logging": [[477, "logging"], [478, "logging"], [476, "logging"], [479, "logging"], [475, "logging"], [473, "logging"], [474, "logging"], [471, "logging"]], "math": [[477, "math"], [478, "math"], [480, "math"], [476, "math"], [479, "math"], [473, "math"], [472, "math"], [474, "math"], [471, "math"]], "multiprocessing": [[477, "multiprocessing"], [478, "multiprocessing"], [480, "multiprocessing"], [476, "multiprocessing"], [479, "multiprocessing"], [475, "multiprocessing"], [474, "multiprocessing"]], "os": [[477, "os"], [477, "id4"], [478, "os"], [480, "os"], [476, "os"], [479, "os"], [475, "os"], [473, "os"], [470, "os"], [472, "os"], [474, "os"], [471, "os"]], "pathlib": [[477, "pathlib"], [478, "pathlib"], [480, "pathlib"], [476, "pathlib"], [479, "pathlib"], [475, "pathlib"], [470, "pathlib"], [472, "pathlib"], [471, "pathlib"]], "pdb": [[477, "pdb"], [478, "pdb"], [480, "pdb"], [475, "pdb"], [473, "pdb"], [472, "pdb"], [474, "pdb"]], "pickle": [[477, "pickle"], [476, "pickle"], [479, "pickle"], [475, "pickle"], [474, "pickle"]], "pickletools": [[477, "pickletools"]], "pydoc": [[477, "pydoc"], [478, "pydoc"], [480, "pydoc"], [475, "pydoc"], [473, "pydoc"], [474, "pydoc"]], "random": [[477, "random"], [480, "random"], [473, "random"], [472, "random"]], "re": [[477, "re"], [477, "id5"], [478, "re"], [476, "re"], [475, "re"], [474, "re"], [471, "re"]], "readline": [[477, "readline"], [476, "readline"]], "rlcompleter": [[477, "rlcompleter"]], "shlex": [[477, "shlex"], [479, "shlex"], [474, "shlex"]], "site": [[477, "site"], [473, "site"], [470, "site"]], "sqlite3": [[477, "sqlite3"], [478, "sqlite3"], [476, "sqlite3"], [475, "sqlite3"], [473, "sqlite3"], [470, "sqlite3"], [472, "sqlite3"], [472, "id2"], [474, "sqlite3"], [471, "sqlite3"]], "socket": [[477, "socket"], [478, "socket"], [478, "id8"], [480, "socket"], [476, "socket"], [479, "socket"], [475, "socket"], [473, "socket"], [470, "socket"], [474, "socket"], [471, "socket"]], "socketserver": [[477, "socketserver"], [478, "socketserver"], [474, "socketserver"]], "ssl": [[477, "ssl"], [477, "id6"], [478, "ssl"], [478, "id9"], [476, "ssl"], [479, "ssl"], [475, "ssl"], [473, "ssl"], [470, "ssl"], [472, "ssl"], [474, "ssl"]], "statistics": [[477, "statistics"], [479, "statistics"], [475, "statistics"], [470, "statistics"], [472, "statistics"]], "struct": [[477, "struct"], [475, "struct"], [474, "struct"]], "subprocess": [[477, "subprocess"], [478, "subprocess"], [476, "subprocess"], [475, "subprocess"], [474, "subprocess"]], "sys": [[477, "sys"], [478, "sys"], [478, "id10"], [480, "sys"], [476, "sys"], [479, "sys"], [475, "sys"], [470, "sys"], [472, "sys"], [474, "sys"], [471, "sys"]], "telnetlib": [[477, "telnetlib"]], "time": [[477, "time"], [478, "time"], [480, "time"], [476, "time"], [479, "time"], [474, "time"], [471, "time"]], "timeit": [[477, "timeit"], [476, "timeit"]], "tkinter": [[477, "tkinter"], [477, "id7"], [478, "tkinter"], [476, "tkinter"], [479, "tkinter"], [472, "tkinter"], [471, "tkinter"]], "traceback": [[477, "traceback"], [476, "traceback"], [475, "traceback"], [470, "traceback"], [471, "traceback"]], "tracemalloc": [[477, "tracemalloc"], [478, "tracemalloc"], [480, "tracemalloc"], [475, "tracemalloc"]], "typing": [[477, "typing"], [480, "typing"], [480, "id4"], [476, "typing"], [479, "typing"], [470, "typing"], [472, "typing"], [471, "typing"]], "unicodedata": [[477, "unicodedata"], [478, "unicodedata"], [480, "unicodedata"], [476, "unicodedata"], [479, "unicodedata"], [472, "unicodedata"], [471, "unicodedata"]], "unittest.mock": [[477, "unittest-mock"], [478, "unittest-mock"], [476, "unittest-mock"]], "urllib.request": [[477, "urllib-request"]], "urllib.robotparser": [[477, "urllib-robotparser"]], "venv": [[477, "venv"], [477, "whatsnew36-venv"], [480, "venv"], [479, "venv"], [475, "venv"], [471, "venv"]], "warnings": [[477, "warnings"], [478, "warnings"], [471, "warnings"]], "winreg": [[477, "winreg"]], "winsound": [[477, "winsound"]], "xmlrpc.client": [[477, "xmlrpc-client"]], "zipfile": [[477, "zipfile"], [478, "zipfile"], [476, "zipfile"], [475, "zipfile"], [471, "zipfile"]], "\u6700\u4f73\u5316": [[477, "optimizations"], [478, "optimizations"], [480, "optimizations"], [476, "optimizations"], [479, "optimizations"], [466, "optimizations"], [465, "optimizations"], [473, "optimizations"], [470, "optimizations"], [464, "optimizations"], [472, "optimizations"], [463, "optimizations"], [469, "optimizations"], [467, "optimizations"], [474, "optimizations"], [471, "optimizations"]], "Build and C API Changes": [[477, "build-and-c-api-changes"], [476, "build-and-c-api-changes"], [479, "build-and-c-api-changes"], [466, "build-and-c-api-changes"], [465, "build-and-c-api-changes"], [473, "build-and-c-api-changes"], [464, "build-and-c-api-changes"], [463, "build-and-c-api-changes"], [469, "build-and-c-api-changes"], [467, "build-and-c-api-changes"], [468, "build-and-c-api-changes"]], "Other Improvements": [[477, "other-improvements"], [475, "other-improvements"]], "\u5df2\u68c4\u7528": [[477, "deprecated"], [480, "deprecated"], [476, "deprecated"], [479, "deprecated"], [475, "deprecated"], [470, "deprecated"], [470, "id3"], [472, "deprecated"], [472, "id6"], [474, "deprecated"], [471, "deprecated"], [471, "whatsnew311-c-api-deprecated"]], "\u65b0\u95dc\u9375\u5b57": [[477, "new-keywords"]], "Deprecated Python behavior": [[477, "deprecated-python-behavior"]], "Deprecated Python modules, functions and methods": [[477, "deprecated-python-modules-functions-and-methods"], [478, "deprecated-python-modules-functions-and-methods"], [476, "deprecated-python-modules-functions-and-methods"]], "asynchat": [[477, "asynchat"]], "asyncore": [[477, "asyncore"], [473, "asyncore"]], "dbm": [[477, "dbm"], [478, "dbm"], [478, "id4"], [476, "dbm"], [475, "dbm"], [473, "dbm"]], "grp": [[477, "grp"]], "xml": [[477, "xml"], [478, "xml"], [480, "xml"], [479, "xml"], [470, "xml"]], "Deprecated functions and types of the C API": [[477, "deprecated-functions-and-types-of-the-c-api"], [478, "deprecated-functions-and-types-of-the-c-api"]], "Deprecated Build Options": [[477, "deprecated-build-options"]], "\u5df2\u79fb\u9664": [[477, "removed"], [480, "removed"], [480, "id3"], [476, "removed"], [475, "removed"], [472, "removed"], [472, "id10"], [471, "removed"], [471, "whatsnew311-c-api-removed"]], "API and Feature Removals": [[477, "api-and-feature-removals"], [478, "api-and-feature-removals"], [476, "api-and-feature-removals"], [479, "api-and-feature-removals"]], "Porting to Python 3.6": [[477, "porting-to-python-3-6"]], "Changes in 'python' Command Behavior": [[477, "changes-in-python-command-behavior"], [475, "changes-in-python-command-behavior"]], "Changes in the Python API": [[477, "changes-in-the-python-api"], [478, "changes-in-the-python-api"], [480, "changes-in-the-python-api"], [476, "changes-in-the-python-api"], [479, "changes-in-the-python-api"], [479, "id2"], [472, "changes-in-the-python-api"]], "C API \u4e2d\u7684\u6539\u52d5": [[477, "changes-in-the-c-api"], [478, "changes-in-the-c-api"], [480, "changes-in-the-c-api"], [476, "changes-in-the-c-api"], [479, "changes-in-the-c-api"], [475, "changes-in-the-c-api"], [470, "changes-in-the-c-api"]], "CPython bytecode changes": [[477, "cpython-bytecode-changes"], [478, "cpython-bytecode-changes"], [480, "cpython-bytecode-changes"], [479, "cpython-bytecode-changes"]], "Notable changes in Python 3.6.2": [[477, "notable-changes-in-python-3-6-2"]], "New make regen-all build target": [[477, "new-make-regen-all-build-target"], [476, "new-make-regen-all-build-target"], [467, "new-make-regen-all-build-target"]], "Removal of make touch build target": [[477, "removal-of-make-touch-build-target"], [476, "removal-of-make-touch-build-target"], [467, "removal-of-make-touch-build-target"]], "Notable changes in Python 3.6.4": [[477, "notable-changes-in-python-3-6-4"]], "Notable changes in Python 3.6.5": [[477, "notable-changes-in-python-3-6-5"]], "Notable changes in Python 3.6.7": [[477, "notable-changes-in-python-3-6-7"]], "Notable changes in Python 3.6.10": [[477, "notable-changes-in-python-3-6-10"]], "Notable changes in Python 3.6.13": [[477, "notable-changes-in-python-3-6-13"]], "Notable changes in Python 3.6.14": [[477, "notable-changes-in-python-3-6-14"]], "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[478, "what-s-new-in-python-3-7"]], "Summary -- Release Highlights": [[478, "summary-release-highlights"], [475, "summary-release-highlights"]], "PEP 563: Postponed Evaluation of Annotations": [[478, "pep-563-postponed-evaluation-of-annotations"]], "PEP 538: Legacy C Locale Coercion": [[478, "pep-538-legacy-c-locale-coercion"]], "PEP 540: Forced UTF-8 Runtime Mode": [[478, "pep-540-forced-utf-8-runtime-mode"]], "PEP 553: Built-in breakpoint()": [[478, "pep-553-built-in-breakpoint"]], "PEP 539: New C API for Thread-Local Storage": [[478, "pep-539-new-c-api-for-thread-local-storage"]], "PEP 562: Customization of Access to Module Attributes": [[478, "pep-562-customization-of-access-to-module-attributes"]], "PEP 564: New Time Functions With Nanosecond Resolution": [[478, "pep-564-new-time-functions-with-nanosecond-resolution"]], "PEP 565: Show DeprecationWarning in __main__": [[478, "pep-565-show-deprecationwarning-in-main"]], "PEP 560: Core Support for typing module and Generic Types": [[478, "pep-560-core-support-for-typing-module-and-generic-types"]], "PEP 552: Hash-based .pyc Files": [[478, "pep-552-hash-based-pyc-files"]], "PEP 545\uff1aPython \u6587\u4ef6\u7ffb\u8b6f": [[478, "pep-545-python-documentation-translations"]], "Python Development Mode (-X dev)": [[478, "python-development-mode-x-dev"]], "contextvars": [[478, "contextvars"]], "dataclasses": [[478, "dataclasses"], [470, "dataclasses"], [471, "dataclasses"]], "importlib.resources": [[478, "importlib-resources"], [472, "importlib-resources"]], "argparse": [[478, "argparse"], [476, "argparse"], [475, "argparse"], [470, "argparse"]], "calendar": [[478, "calendar"], [472, "calendar"]], "compileall": [[478, "compileall"], [480, "compileall"], [476, "compileall"]], "cProfile": [[478, "cprofile"], [479, "cprofile"]], "crypt": [[478, "crypt"], [474, "crypt"]], "dis": [[478, "dis"], [475, "dis"], [473, "dis"], [472, "dis"]], "functools": [[478, "functools"], [476, "functools"], [479, "functools"], [475, "functools"], [473, "functools"], [474, "functools"], [471, "functools"]], "gc": [[478, "gc"], [480, "gc"], [479, "gc"], [475, "gc"], [470, "gc"], [474, "gc"]], "hmac": [[478, "hmac"], [475, "hmac"], [470, "hmac"], [474, "hmac"]], "http.server": [[478, "http-server"]], "io": [[478, "io"], [476, "io"], [479, "io"], [473, "io"], [472, "io"], [474, "io"]], "ipaddress": [[478, "ipaddress"], [480, "ipaddress"], [476, "ipaddress"], [475, "ipaddress"], [474, "ipaddress"]], "itertools": [[478, "itertools"], [479, "itertools"], [473, "itertools"], [470, "itertools"], [472, "itertools"], [474, "itertools"]], "locale": [[478, "locale"], [478, "id7"], [476, "locale"], [472, "locale"], [471, "locale"]], "mimetypes": [[478, "mimetypes"]], "msilib": [[478, "msilib"]], "py_compile": [[478, "py-compile"], [479, "py-compile"], [470, "py-compile"]], "queue": [[478, "queue"]], "signal": [[478, "signal"], [480, "signal"], [476, "signal"], [474, "signal"]], "string": [[478, "string"], [471, "string"]], "types": [[478, "types"], [476, "types"], [475, "types"], [470, "types"], [472, "types"], [474, "types"]], "unittest": [[478, "unittest"], [476, "unittest"], [479, "unittest"], [475, "unittest"], [473, "unittest"], [470, "unittest"], [472, "unittest"], [472, "id3"], [474, "unittest"], [471, "unittest"]], "urllib.parse": [[478, "urllib-parse"], [480, "urllib-parse"], [480, "id5"], [479, "urllib-parse"], [473, "urllib-parse"], [470, "urllib-parse"]], "uu": [[478, "uu"]], "uuid": [[478, "uuid"], [472, "uuid"]], "xml.etree": [[478, "xml-etree"], [475, "xml-etree"]], "xmlrpc.server": [[478, "xmlrpc-server"]], "zipapp": [[478, "zipapp"], [476, "zipapp"]], "C API \u8b8a\u66f4": [[478, "c-api-changes"], [480, "c-api-changes"], [470, "c-api-changes"], [472, "c-api-changes"], [471, "c-api-changes"]], "Build Changes": [[478, "build-changes"], [480, "build-changes"], [472, "build-changes"]], "Other CPython Implementation Changes": [[478, "other-cpython-implementation-changes"]], "Deprecated Python Behavior": [[478, "deprecated-python-behavior"], [476, "deprecated-python-behavior"]], "aifc": [[478, "aifc"], [475, "aifc"]], "gettext": [[478, "gettext"], [479, "gettext"]], "macpath": [[478, "macpath"]], "threading": [[478, "threading"], [476, "threading"], [479, "threading"], [475, "threading"], [473, "threading"], [470, "threading"], [472, "threading"], [474, "threading"], [471, "threading"]], "sunau": [[478, "sunau"], [475, "sunau"]], "wave": [[478, "wave"], [475, "wave"]], "Platform Support Removals": [[478, "platform-support-removals"]], "Module Removals": [[478, "module-removals"]], "Windows-only Changes": [[478, "windows-only-changes"], [478, "id12"]], "Porting to Python 3.7": [[478, "porting-to-python-3-7"]], "Changes in Python Behavior": [[478, "changes-in-python-behavior"]], "Other CPython implementation changes": [[478, "id13"]], "Notable changes in Python 3.7.1": [[478, "notable-changes-in-python-3-7-1"]], "Notable changes in Python 3.7.2": [[478, "notable-changes-in-python-3-7-2"]], "Notable changes in Python 3.7.6": [[478, "notable-changes-in-python-3-7-6"]], "Notable changes in Python 3.7.10": [[478, "notable-changes-in-python-3-7-10"]], "Notable changes in Python 3.7.11": [[478, "notable-changes-in-python-3-7-11"]], "Notable security feature in 3.7.14": [[478, "notable-security-feature-in-3-7-14"]], "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[480, "what-s-new-in-python-3-9"]], "You should check for DeprecationWarning in your code": [[480, "you-should-check-for-deprecationwarning-in-your-code"]], "Dictionary Merge & Update Operators": [[480, "dictionary-merge-update-operators"]], "New String Methods to Remove Prefixes and Suffixes": [[480, "new-string-methods-to-remove-prefixes-and-suffixes"]], "Type Hinting Generics in Standard Collections": [[480, "type-hinting-generics-in-standard-collections"]], "New Parser": [[480, "new-parser"]], "zoneinfo": [[480, "zoneinfo"]], "graphlib": [[480, "graphlib"]], "curses": [[480, "curses"], [476, "curses"], [479, "curses"], [470, "curses"], [474, "curses"]], "fcntl": [[480, "fcntl"], [471, "fcntl"]], "ftplib": [[480, "ftplib"], [472, "ftplib"], [474, "ftplib"]], "http": [[480, "http"], [476, "http"], [475, "http"], [474, "http"]], "IDLE and idlelib": [[480, "idle-and-idlelib"], [479, "idle-and-idlelib"]], "imaplib": [[480, "imaplib"], [476, "imaplib"], [473, "imaplib"], [474, "imaplib"]], "nntplib": [[480, "nntplib"], [474, "nntplib"]], "poplib": [[480, "poplib"], [476, "poplib"], [475, "poplib"], [473, "poplib"]], "pprint": [[480, "pprint"], [479, "pprint"], [475, "pprint"], [470, "pprint"]], "smtplib": [[480, "smtplib"], [476, "smtplib"], [475, "smtplib"], [474, "smtplib"]], "Porting to Python 3.9": [[480, "porting-to-python-3-9"], [480, "id2"]], "Notable changes in Python 3.9.1": [[480, "notable-changes-in-python-3-9-1"]], "macOS 11.0 (Big Sur) and Apple Silicon Mac support": [[480, "macos-11-0-big-sur-and-apple-silicon-mac-support"], [479, "macos-11-0-big-sur-and-apple-silicon-mac-support"]], "Notable changes in Python 3.9.2": [[480, "notable-changes-in-python-3-9-2"]], "collections.abc": [[480, "collections-abc"], [476, "collections-abc"], [470, "collections-abc"]], "Notable changes in Python 3.9.3": [[480, "notable-changes-in-python-3-9-3"]], "Notable changes in Python 3.9.5": [[480, "notable-changes-in-python-3-9-5"]], "Notable security feature in 3.9.14": [[480, "notable-security-feature-in-3-9-14"]], "Notable changes in 3.9.17": [[480, "notable-changes-in-3-9-17"]], "tarfile": [[480, "tarfile"], [476, "tarfile"], [479, "tarfile"], [479, "id3"], [475, "tarfile"], [473, "tarfile"], [470, "tarfile"], [474, "tarfile"], [471, "tarfile"]], "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09": [[481, "changelog"]], "Python next": [[481, "python-next"]], "Security": [[481, "security"], [481, "id2"], [481, "id29"], [481, "id39"], [481, "id49"], [481, "id62"], [481, "id71"], [481, "id90"], [481, "id99"], [481, "id116"], [481, "id126"], [481, "id135"], [481, "id147"], [481, "id208"], [481, "id219"], [481, "id229"], [481, "id238"], [481, "id248"], [481, "id266"], [481, "id277"], [481, "id287"], [481, "id297"], [481, "id307"], [481, "id318"], [481, "id329"], [481, "id344"], [481, "id354"], [481, "id365"], [481, "id376"], [481, "id387"], [481, "id403"], [481, "id438"], [481, "id449"], [481, "id490"], [481, "id512"], [481, "id535"], [481, "id544"], [481, "id545"], [481, "id604"], [481, "id613"], [481, "id623"], [481, "id633"], [481, "id637"], [481, "id645"], [481, "id658"]], "Core and Builtins": [[481, "core-and-builtins"], [481, "id3"], [481, "id10"], [481, "id18"], [481, "id24"], [481, "id30"], [481, "id40"], [481, "id50"], [481, "id57"], [481, "id63"], [481, "id72"], [481, "id82"], [481, "id91"], [481, "id101"], [481, "id107"], [481, "id117"], [481, "id127"], [481, "id136"], [481, "id148"], [481, "id157"], [481, "id166"], [481, "id174"], [481, "id183"], [481, "id191"], [481, "id199"], [481, "id209"], [481, "id220"], [481, "id230"], [481, "id239"], [481, "id249"], [481, "id258"], [481, "id267"], [481, "id278"], [481, "id288"], [481, "id298"], [481, "id308"], [481, "id319"], [481, "id330"], [481, "id338"], [481, "id345"], [481, "id355"], [481, "id366"], [481, "id377"], [481, "id388"], [481, "id397"], [481, "id404"], [481, "id416"], [481, "id422"], [481, "id429"], [481, "id439"], [481, "id450"], [481, "id459"], [481, "id467"], [481, "id474"], [481, "id484"], [481, "id491"], [481, "id500"], [481, "id513"], [481, "id523"], [481, "id536"], [481, "id546"], [481, "id555"], [481, "id557"], [481, "id565"], [481, "id569"], [481, "id574"], [481, "id579"], [481, "id584"], [481, "id590"], [481, "id598"], [481, "id605"], [481, "id614"], [481, "id624"], [481, "id634"], [481, "id638"], [481, "id646"], [481, "id655"], [481, "id659"], [481, "id667"], [481, "id669"], [481, "id680"], [481, "id682"], [481, "id684"], [481, "id689"], [481, "id692"], [481, "id697"], [481, "id699"], [481, "id705"], [481, "id711"], [481, "id716"], [481, "id721"]], "Library": [[481, "library"], [481, "id4"], [481, "id11"], [481, "id19"], [481, "id25"], [481, "id31"], [481, "id41"], [481, "id51"], [481, "id58"], [481, "id64"], [481, "id73"], [481, "id83"], [481, "id92"], [481, "id102"], [481, "id108"], [481, "id118"], [481, "id128"], [481, "id137"], [481, "id149"], [481, "id158"], [481, "id167"], [481, "id175"], [481, "id184"], [481, "id192"], [481, "id200"], [481, "id210"], [481, "id221"], [481, "id231"], [481, "id240"], [481, "id250"], [481, "id259"], [481, "id268"], [481, "id279"], [481, "id289"], [481, "id299"], [481, "id309"], [481, "id320"], [481, "id331"], [481, "id339"], [481, "id346"], [481, "id356"], [481, "id367"], [481, "id378"], [481, "id389"], [481, "id398"], [481, "id405"], [481, "id414"], [481, "id417"], [481, "id423"], [481, "id430"], [481, "id440"], [481, "id451"], [481, "id460"], [481, "id468"], [481, "id475"], [481, "id485"], [481, "id492"], [481, "id501"], [481, "id514"], [481, "id524"], [481, "id533"], [481, "id537"], [481, "id547"], [481, "id558"], [481, "id570"], [481, "id575"], [481, "id580"], [481, "id585"], [481, "id591"], [481, "id599"], [481, "id606"], [481, "id615"], [481, "id625"], [481, "id635"], [481, "id636"], [481, "id639"], [481, "id647"], [481, "id660"], [481, "id670"], [481, "id678"], [481, "id681"], [481, "id683"], [481, "id685"], [481, "id690"], [481, "id693"], [481, "id698"], [481, "id700"], [481, "id706"], [481, "id712"], [481, "id717"], [481, "id722"]], "Documentation": [[481, "documentation"], [481, "id5"], [481, "id12"], [481, "id20"], [481, "id26"], [481, "id32"], [481, "id42"], [481, "id52"], [481, "id65"], [481, "id74"], [481, "id84"], [481, "id93"], [481, "id103"], [481, "id109"], [481, "id119"], [481, "id129"], [481, "id138"], [481, "id150"], [481, "id159"], [481, "id168"], [481, "id176"], [481, "id185"], [481, "id193"], [481, "id201"], [481, "id211"], [481, "id222"], [481, "id232"], [481, "id241"], [481, "id251"], [481, "id260"], [481, "id269"], [481, "id280"], [481, "id290"], [481, "id300"], [481, "id310"], [481, "id321"], [481, "id332"], [481, "id340"], [481, "id347"], [481, "id357"], [481, "id368"], [481, "id379"], [481, "id390"], [481, "id399"], [481, "id406"], [481, "id418"], [481, "id424"], [481, "id431"], [481, "id441"], [481, "id452"], [481, "id461"], [481, "id469"], [481, "id476"], [481, "id486"], [481, "id493"], [481, "id502"], [481, "id515"], [481, "id525"], [481, "id538"], [481, "id551"], [481, "id562"], [481, "id572"], [481, "id576"], [481, "id611"], [481, "id617"], [481, "id627"], [481, "id640"], [481, "id650"], [481, "id662"], [481, "id672"], [481, "id687"], [481, "id695"], [481, "id703"], [481, "id726"]], "Tests": [[481, "tests"], [481, "id6"], [481, "id13"], [481, "id27"], [481, "id33"], [481, "id43"], [481, "id53"], [481, "id59"], [481, "id75"], [481, "id85"], [481, "id94"], [481, "id104"], [481, "id110"], [481, "id120"], [481, "id130"], [481, "id139"], [481, "id151"], [481, "id160"], [481, "id169"], [481, "id177"], [481, "id186"], [481, "id194"], [481, "id202"], [481, "id212"], [481, "id223"], [481, "id233"], [481, "id242"], [481, "id252"], [481, "id261"], [481, "id270"], [481, "id281"], [481, "id291"], [481, "id301"], [481, "id311"], [481, "id322"], [481, "id333"], [481, "id348"], [481, "id358"], [481, "id369"], [481, "id380"], [481, "id391"], [481, "id400"], [481, "id407"], [481, "id425"], [481, "id432"], [481, "id442"], [481, "id453"], [481, "id462"], [481, "id470"], [481, "id477"], [481, "id494"], [481, "id503"], [481, "id510"], [481, "id516"], [481, "id526"], [481, "id539"], [481, "id553"], [481, "id563"], [481, "id577"], [481, "id583"], [481, "id589"], [481, "id594"], [481, "id601"], [481, "id612"], [481, "id618"], [481, "id628"], [481, "id641"], [481, "id651"], [481, "id656"], [481, "id663"], [481, "id673"], [481, "id688"], [481, "id694"], [481, "id702"], [481, "id708"], [481, "id714"], [481, "id727"]], "Build": [[481, "build"], [481, "id7"], [481, "id14"], [481, "id28"], [481, "id34"], [481, "id44"], [481, "id54"], [481, "id66"], [481, "id76"], [481, "id86"], [481, "id95"], [481, "id105"], [481, "id111"], [481, "id121"], [481, "id131"], [481, "id140"], [481, "id152"], [481, "id161"], [481, "id170"], [481, "id178"], [481, "id187"], [481, "id195"], [481, "id203"], [481, "id213"], [481, "id224"], [481, "id234"], [481, "id243"], [481, "id253"], [481, "id262"], [481, "id271"], [481, "id282"], [481, "id292"], [481, "id302"], [481, "id312"], [481, "id323"], [481, "id334"], [481, "id341"], [481, "id349"], [481, "id359"], [481, "id370"], [481, "id381"], [481, "id392"], [481, "id408"], [481, "id419"], [481, "id426"], [481, "id433"], [481, "id443"], [481, "id454"], [481, "id463"], [481, "id478"], [481, "id487"], [481, "id495"], [481, "id504"], [481, "id511"], [481, "id517"], [481, "id527"], [481, "id534"], [481, "id540"], [481, "id550"], [481, "id556"], [481, "id564"], [481, "id568"], [481, "id578"], [481, "id582"], [481, "id588"], [481, "id595"], [481, "id603"], [481, "id609"], [481, "id620"], [481, "id629"], [481, "id642"], [481, "id654"], [481, "id664"], [481, "id674"], [481, "id677"], [481, "id679"], [481, "id691"], [481, "id696"], [481, "id707"], [481, "id713"], [481, "id718"], [481, "id724"]], "Tools/Demos": [[481, "tools-demos"], [481, "id9"], [481, "id23"], [481, "id37"], [481, "id47"], [481, "id55"], [481, "id80"], [481, "id88"], [481, "id114"], [481, "id124"], [481, "id144"], [481, "id155"], [481, "id164"], [481, "id217"], [481, "id264"], [481, "id275"], [481, "id305"], [481, "id316"], [481, "id327"], [481, "id363"], [481, "id374"], [481, "id385"], [481, "id395"], [481, "id412"], [481, "id437"], [481, "id447"], [481, "id458"], [481, "id472"], [481, "id482"], [481, "id498"], [481, "id508"], [481, "id521"], [481, "id531"], [481, "id543"], [481, "id552"], [481, "id566"], [481, "id573"], [481, "id596"], [481, "id610"], [481, "id622"], [481, "id631"], [481, "id652"], [481, "id666"], [481, "id676"], [481, "id704"], [481, "id709"], [481, "id715"], [481, "id728"]], "Python 3.12.2 final": [[481, "python-3-12-2-final"]], "IDLE": [[481, "idle"], [481, "id17"], [481, "id69"], [481, "id79"], [481, "id143"], [481, "id172"], [481, "id181"], [481, "id206"], [481, "id216"], [481, "id227"], [481, "id236"], [481, "id246"], [481, "id256"], [481, "id274"], [481, "id285"], [481, "id295"], [481, "id315"], [481, "id326"], [481, "id336"], [481, "id342"], [481, "id352"], [481, "id362"], [481, "id373"], [481, "id384"], [481, "id394"], [481, "id402"], [481, "id411"], [481, "id421"], [481, "id428"], [481, "id436"], [481, "id446"], [481, "id457"], [481, "id481"], [481, "id488"], [481, "id497"], [481, "id507"], [481, "id520"], [481, "id530"], [481, "id542"], [481, "id548"], [481, "id559"], [481, "id592"], [481, "id600"], [481, "id607"], [481, "id616"], [481, "id626"], [481, "id648"], [481, "id657"], [481, "id661"], [481, "id671"], [481, "id686"], [481, "id701"], [481, "id723"], [473, "idle"], [469, "idle"], [245, "idle"]], "Python 3.12.1 final": [[481, "python-3-12-1-final"]], "C API": [[481, "c-api"], [481, "id38"], [481, "id48"], [481, "id56"], [481, "id61"], [481, "id70"], [481, "id81"], [481, "id89"], [481, "id98"], [481, "id115"], [481, "id125"], [481, "id134"], [481, "id146"], [481, "id156"], [481, "id165"], [481, "id173"], [481, "id182"], [481, "id190"], [481, "id198"], [481, "id207"], [481, "id218"], [481, "id228"], [481, "id237"], [481, "id247"], [481, "id257"], [481, "id265"], [481, "id276"], [481, "id286"], [481, "id296"], [481, "id306"], [481, "id317"], [481, "id328"], [481, "id337"], [481, "id343"], [481, "id353"], [481, "id364"], [481, "id375"], [481, "id386"], [481, "id396"], [481, "id413"], [481, "id415"], [481, "id448"], [481, "id466"], [481, "id473"], [481, "id483"], [481, "id489"], [481, "id499"], [481, "id509"], [481, "id522"], [481, "id532"], [481, "id549"], [481, "id561"], [481, "id571"], [481, "id587"], [481, "id593"], [481, "id608"], [481, "id621"], [481, "id632"], [481, "id644"], [481, "id649"], [481, "id710"], [481, "id719"], [481, "id725"]], "Python 3.12.0 final": [[481, "python-3-12-0-final"]], "Python 3.12.0 release candidate 3": [[481, "python-3-12-0-release-candidate-3"]], "Python 3.12.0 release candidate 2": [[481, "python-3-12-0-release-candidate-2"]], "Python 3.12.0 release candidate 1": [[481, "python-3-12-0-release-candidate-1"]], "Python 3.12.0 beta 4": [[481, "python-3-12-0-beta-4"]], "Python 3.12.0 beta 3": [[481, "python-3-12-0-beta-3"]], "Python 3.12.0 beta 2": [[481, "python-3-12-0-beta-2"]], "Python 3.12.0 beta 1": [[481, "python-3-12-0-beta-1"]], "Python 3.12.0 alpha 7": [[481, "python-3-12-0-alpha-7"]], "Python 3.12.0 alpha 6": [[481, "python-3-12-0-alpha-6"]], "Python 3.12.0 alpha 5": [[481, "python-3-12-0-alpha-5"]], "Python 3.12.0 alpha 4": [[481, "python-3-12-0-alpha-4"]], "Python 3.12.0 alpha 3": [[481, "python-3-12-0-alpha-3"]], "Python 3.12.0 alpha 2": [[481, "python-3-12-0-alpha-2"]], "Python 3.12.0 alpha 1": [[481, "python-3-12-0-alpha-1"]], "Python 3.11.0 beta 1": [[481, "python-3-11-0-beta-1"]], "Python 3.11.0 alpha 7": [[481, "python-3-11-0-alpha-7"]], "Python 3.11.0 alpha 6": [[481, "python-3-11-0-alpha-6"]], "Python 3.11.0 alpha 5": [[481, "python-3-11-0-alpha-5"]], "Python 3.11.0 alpha 4": [[481, "python-3-11-0-alpha-4"]], "Python 3.11.0 alpha 3": [[481, "python-3-11-0-alpha-3"]], "Python 3.11.0 alpha 2": [[481, "python-3-11-0-alpha-2"]], "Python 3.11.0 alpha 1": [[481, "python-3-11-0-alpha-1"]], "Python 3.10.0 beta 1": [[481, "python-3-10-0-beta-1"]], "Python 3.10.0 alpha 7": [[481, "python-3-10-0-alpha-7"]], "Python 3.10.0 alpha 6": [[481, "python-3-10-0-alpha-6"]], "Python 3.10.0 alpha 5": [[481, "python-3-10-0-alpha-5"]], "Python 3.10.0 alpha 4": [[481, "python-3-10-0-alpha-4"]], "Python 3.10.0 alpha 3": [[481, "python-3-10-0-alpha-3"]], "Python 3.10.0 alpha 2": [[481, "python-3-10-0-alpha-2"]], "Python 3.10.0 alpha 1": [[481, "python-3-10-0-alpha-1"]], "Python 3.9.0 beta 1": [[481, "python-3-9-0-beta-1"]], "Python 3.9.0 alpha 6": [[481, "python-3-9-0-alpha-6"]], "Python 3.9.0 alpha 5": [[481, "python-3-9-0-alpha-5"]], "Python 3.9.0 alpha 4": [[481, "python-3-9-0-alpha-4"]], "Python 3.9.0 alpha 3": [[481, "python-3-9-0-alpha-3"]], "Python 3.9.0 alpha 2": [[481, "python-3-9-0-alpha-2"]], "Python 3.9.0 alpha 1": [[481, "python-3-9-0-alpha-1"]], "Python 3.8.0 beta 1": [[481, "python-3-8-0-beta-1"]], "Python 3.8.0 alpha 4": [[481, "python-3-8-0-alpha-4"]], "Python 3.8.0 alpha 3": [[481, "python-3-8-0-alpha-3"]], "Python 3.8.0 alpha 2": [[481, "python-3-8-0-alpha-2"]], "Python 3.8.0 alpha 1": [[481, "python-3-8-0-alpha-1"]], "Python 3.7.0 final": [[481, "python-3-7-0-final"]], "Python 3.7.0 release candidate 1": [[481, "python-3-7-0-release-candidate-1"]], "Python 3.7.0 beta 5": [[481, "python-3-7-0-beta-5"]], "Python 3.7.0 beta 4": [[481, "python-3-7-0-beta-4"]], "Python 3.7.0 beta 3": [[481, "python-3-7-0-beta-3"]], "Python 3.7.0 beta 2": [[481, "python-3-7-0-beta-2"]], "Python 3.7.0 beta 1": [[481, "python-3-7-0-beta-1"]], "Python 3.7.0 alpha 4": [[481, "python-3-7-0-alpha-4"]], "Python 3.7.0 alpha 3": [[481, "python-3-7-0-alpha-3"]], "Python 3.7.0 alpha 2": [[481, "python-3-7-0-alpha-2"]], "Python 3.7.0 alpha 1": [[481, "python-3-7-0-alpha-1"]], "Python 3.6.6 final": [[481, "python-3-6-6-final"]], "Python 3.6.6 release candidate 1": [[481, "python-3-6-6-release-candidate-1"]], "Python 3.6.5 final": [[481, "python-3-6-5-final"]], "Python 3.6.5 release candidate 1": [[481, "python-3-6-5-release-candidate-1"]], "Python 3.6.4 final": [[481, "python-3-6-4-final"]], "Python 3.6.4 release candidate 1": [[481, "python-3-6-4-release-candidate-1"]], "Python 3.6.3 final": [[481, "python-3-6-3-final"]], "Python 3.6.3 release candidate 1": [[481, "python-3-6-3-release-candidate-1"]], "Python 3.6.2 final": [[481, "python-3-6-2-final"]], "Python 3.6.2 release candidate 2": [[481, "python-3-6-2-release-candidate-2"]], "Python 3.6.2 release candidate 1": [[481, "python-3-6-2-release-candidate-1"]], "Python 3.6.1 final": [[481, "python-3-6-1-final"]], "Python 3.6.1 release candidate 1": [[481, "python-3-6-1-release-candidate-1"]], "Python 3.6.0 final": [[481, "python-3-6-0-final"]], "Python 3.6.0 release candidate 2": [[481, "python-3-6-0-release-candidate-2"]], "Python 3.6.0 release candidate 1": [[481, "python-3-6-0-release-candidate-1"]], "Python 3.6.0 beta 4": [[481, "python-3-6-0-beta-4"]], "Python 3.6.0 beta 3": [[481, "python-3-6-0-beta-3"]], "Python 3.6.0 beta 2": [[481, "python-3-6-0-beta-2"]], "Python 3.6.0 beta 1": [[481, "python-3-6-0-beta-1"]], "Python 3.6.0 alpha 4": [[481, "python-3-6-0-alpha-4"]], "Python 3.6.0 alpha 3": [[481, "python-3-6-0-alpha-3"]], "Python 3.6.0 alpha 2": [[481, "python-3-6-0-alpha-2"]], "Python 3.6.0 alpha 1": [[481, "python-3-6-0-alpha-1"]], "Python 3.5.5 final": [[481, "python-3-5-5-final"]], "Python 3.5.5 release candidate 1": [[481, "python-3-5-5-release-candidate-1"]], "Python 3.5.4 final": [[481, "python-3-5-4-final"]], "Python 3.5.4 release candidate 1": [[481, "python-3-5-4-release-candidate-1"]], "Python 3.5.3 final": [[481, "python-3-5-3-final"]], "Python 3.5.3 release candidate 1": [[481, "python-3-5-3-release-candidate-1"]], "Python 3.5.2 final": [[481, "python-3-5-2-final"]], "Python 3.5.2 release candidate 1": [[481, "python-3-5-2-release-candidate-1"]], "Python 3.5.1 final": [[481, "python-3-5-1-final"]], "Python 3.5.1 release candidate 1": [[481, "python-3-5-1-release-candidate-1"]], "Python 3.5.0 final": [[481, "python-3-5-0-final"]], "Python 3.5.0 release candidate 4": [[481, "python-3-5-0-release-candidate-4"]], "Python 3.5.0 release candidate 3": [[481, "python-3-5-0-release-candidate-3"]], "Python 3.5.0 release candidate 2": [[481, "python-3-5-0-release-candidate-2"]], "Python 3.5.0 release candidate 1": [[481, "python-3-5-0-release-candidate-1"]], "Python 3.5.0 beta 4": [[481, "python-3-5-0-beta-4"]], "Python 3.5.0 beta 3": [[481, "python-3-5-0-beta-3"]], "Python 3.5.0 beta 2": [[481, "python-3-5-0-beta-2"]], "Python 3.5.0 beta 1": [[481, "python-3-5-0-beta-1"]], "Python 3.5.0 alpha 4": [[481, "python-3-5-0-alpha-4"]], "Python 3.5.0 alpha 3": [[481, "python-3-5-0-alpha-3"]], "Python 3.5.0 alpha 2": [[481, "python-3-5-0-alpha-2"]], "Python 3.5.0 alpha 1": [[481, "python-3-5-0-alpha-1"]], "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f": [[482, "what-s-new-in-python"]], "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[476, "what-s-new-in-python-3-5"], [475, "what-s-new-in-python-3-4"]], "PEP 492 - Coroutines with async and await syntax": [[476, "pep-492-coroutines-with-async-and-await-syntax"]], "PEP 465 - A dedicated infix operator for matrix multiplication": [[476, "pep-465-a-dedicated-infix-operator-for-matrix-multiplication"]], "PEP 448 - Additional Unpacking Generalizations": [[476, "pep-448-additional-unpacking-generalizations"]], "PEP 461 - percent formatting support for bytes and bytearray": [[476, "pep-461-percent-formatting-support-for-bytes-and-bytearray"]], "PEP 484 - Type Hints": [[476, "pep-484-type-hints"]], "PEP 471 - os.scandir() function -- a better and faster directory iterator": [[476, "pep-471-os-scandir-function-a-better-and-faster-directory-iterator"]], "PEP 475: Retry system calls failing with EINTR": [[476, "pep-475-retry-system-calls-failing-with-eintr"]], "PEP 479: Change StopIteration handling inside generators": [[476, "pep-479-change-stopiteration-handling-inside-generators"]], "PEP 485: A function for testing approximate equality": [[476, "pep-485-a-function-for-testing-approximate-equality"]], "PEP 486: Make the Python Launcher aware of virtual environments": [[476, "pep-486-make-the-python-launcher-aware-of-virtual-environments"]], "PEP 488: Elimination of PYO files": [[476, "pep-488-elimination-of-pyo-files"]], "PEP 489: Multi-phase extension module initialization": [[476, "pep-489-multi-phase-extension-module-initialization"]], "\u65b0\u589e\u6a21\u7d44": [[476, "new-modules"], [479, "new-modules"], [472, "new-modules"], [460, "new-modules"], [471, "new-modules"]], "bz2": [[476, "bz2"], [474, "bz2"]], "cgi": [[476, "cgi"]], "code": [[476, "code"]], "configparser": [[476, "configparser"], [473, "configparser"], [472, "configparser"]], "csv": [[476, "csv"], [479, "csv"], [473, "csv"], [472, "csv"]], "difflib": [[476, "difflib"]], "doctest": [[476, "doctest"], [475, "doctest"], [470, "doctest"], [464, "doctest"]], "glob": [[476, "glob"], [475, "glob"], [470, "glob"]], "gzip": [[476, "gzip"], [479, "gzip"], [472, "gzip"]], "heapq": [[476, "heapq"]], "imghdr": [[476, "imghdr"]], "linecache": [[476, "linecache"], [470, "linecache"]], "lzma": [[476, "lzma"], [474, "lzma"]], "operator": [[476, "operator"], [475, "operator"], [471, "operator"]], "selectors": [[476, "selectors"], [475, "selectors"]], "shutil": [[476, "shutil"], [479, "shutil"], [475, "shutil"], [473, "shutil"], [472, "shutil"], [474, "shutil"], [471, "shutil"]], "smtpd": [[476, "smtpd"], [475, "smtpd"], [472, "smtpd"], [474, "smtpd"]], "sndhdr": [[476, "sndhdr"]], "Memory BIO Support": [[476, "memory-bio-support"], [339, "memory-bio-support"]], "Application-Layer Protocol Negotiation Support": [[476, "application-layer-protocol-negotiation-support"]], "Other Changes": [[476, "other-changes"]], "sysconfig": [[476, "sysconfig"], [473, "sysconfig"], [471, "sysconfig"]], "urllib": [[476, "urllib"], [475, "urllib"], [474, "urllib"]], "wsgiref": [[476, "wsgiref"]], "xmlrpc": [[476, "xmlrpc"], [479, "xmlrpc"]], "xml.sax": [[476, "xml-sax"]], "Other module-level changes": [[476, "other-module-level-changes"]], "New Keywords": [[476, "new-keywords"]], "Unsupported Operating Systems": [[476, "unsupported-operating-systems"]], "Porting to Python 3.5": [[476, "porting-to-python-3-5"]], "Changes in Python behavior": [[476, "changes-in-python-behavior"], [479, "changes-in-python-behavior"]], "Notable changes in Python 3.5.4": [[476, "notable-changes-in-python-3-5-4"]], "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[479, "what-s-new-in-python-3-8"]], "Positional-only parameters": [[479, "positional-only-parameters"]], "Parallel filesystem cache for compiled bytecode files": [[479, "parallel-filesystem-cache-for-compiled-bytecode-files"]], "Debug build uses the same ABI as release build": [[479, "debug-build-uses-the-same-abi-as-release-build"]], "f-strings support = for self-documenting expressions and debugging": [[479, "f-strings-support-for-self-documenting-expressions-and-debugging"]], "PEP 578: Python Runtime Audit Hooks": [[479, "pep-578-python-runtime-audit-hooks"]], "PEP 587: Python Initialization Configuration": [[479, "pep-587-python-initialization-configuration"]], "PEP 590: Vectorcall: a fast calling protocol for CPython": [[479, "pep-590-vectorcall-a-fast-calling-protocol-for-cpython"]], "Pickle protocol 5 with out-of-band data buffers": [[479, "pickle-protocol-5-with-out-of-band-data-buffers"]], "builtins\uff08\u5167\u5efa\uff09": [[479, "builtins"]], "ctypes": [[479, "ctypes"], [473, "ctypes"]], "json.tool": [[479, "json-tool"]], "mmap": [[479, "mmap"], [475, "mmap"], [474, "mmap"]], "os.path": [[479, "os-path"], [470, "os-path"], [472, "os-path"]], "plistlib": [[479, "plistlib"], [475, "plistlib"]], "tokenize": [[479, "tokenize"], [472, "tokenize"]], "weakref": [[479, "weakref"], [475, "weakref"]], "Porting to Python 3.8": [[479, "porting-to-python-3-8"]], "Demos and Tools": [[479, "demos-and-tools"], [472, "demos-and-tools"]], "Notable changes in Python 3.8.1": [[479, "notable-changes-in-python-3-8-1"]], "Notable changes in Python 3.8.2": [[479, "notable-changes-in-python-3-8-2"]], "Notable changes in Python 3.8.3": [[479, "notable-changes-in-python-3-8-3"]], "Notable changes in Python 3.8.8": [[479, "notable-changes-in-python-3-8-8"]], "Notable changes in Python 3.8.9": [[479, "notable-changes-in-python-3-8-9"]], "Notable changes in Python 3.8.10": [[479, "notable-changes-in-python-3-8-10"], [479, "id1"]], "Notable changes in Python 3.8.12": [[479, "notable-changes-in-python-3-8-12"]], "Notable security feature in 3.8.14": [[479, "notable-security-feature-in-3-8-14"]], "Notable changes in 3.8.17": [[479, "notable-changes-in-3-8-17"]], "xdrlib --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[406, "module-xdrlib"]], "Packer Objects": [[406, "packer-objects"]], "Unpacker Objects": [[406, "unpacker-objects"]], "unittest --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6": [[386, "module-unittest"]], "\u7c21\u55ae\u7bc4\u4f8b": [[386, "basic-example"], [354, "simple-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762 (Command-Line Interface)": [[386, "command-line-interface"]], "\u547d\u4ee4\u5217\u6a21\u5f0f\u9078\u9805": [[386, "command-line-options"]], "Test Discovery\uff08\u6e2c\u8a66\u63a2\u7d22\uff09": [[386, "test-discovery"]], "Organizing test code": [[386, "organizing-test-code"]], "Re-using old test code": [[386, "re-using-old-test-code"]], "Skipping tests and expected failures": [[386, "skipping-tests-and-expected-failures"]], "Distinguishing test iterations using subtests": [[386, "distinguishing-test-iterations-using-subtests"]], "Classes and functions": [[386, "classes-and-functions"]], "Test cases": [[386, "test-cases"]], "Grouping tests": [[386, "grouping-tests"]], "Loading and running tests": [[386, "loading-and-running-tests"]], "load_tests Protocol": [[386, "load-tests-protocol"]], "Class and Module Fixtures": [[386, "class-and-module-fixtures"]], "setUpClass and tearDownClass": [[386, "setupclass-and-teardownclass"]], "setUpModule and tearDownModule": [[386, "setupmodule-and-teardownmodule"]], "urllib.error --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225": [[391, "module-urllib.error"]], "trace --- Trace or track Python statement execution": [[378, "module-trace"]], "Command-Line Usage": [[378, "command-line-usage"], [376, "command-line-usage"]], "Main options": [[378, "main-options"]], "Modifiers": [[378, "modifiers"]], "Filters": [[378, "filters"]], "Programmatic Interface": [[378, "programmatic-interface"]], "typing --- \u652f\u63f4\u578b\u5225\u63d0\u793a": [[384, "typing-support-for-type-hints"]], "\u76f8\u95dc\u7684 PEPs": [[384, "relevant-peps"]], "\u578b\u5225\u5225\u540d": [[384, "type-aliases"]], "NewType": [[384, "newtype"]], "\u8a3b\u91cb callable \u7269\u4ef6": [[384, "annotating-callable-objects"]], "\u6cdb\u578b": [[384, "generics"]], "\u8a3b\u91cb\u5143\u7d44 (tuple)": [[384, "annotating-tuples"]], "The type of class objects": [[384, "the-type-of-class-objects"]], "User-defined generic types": [[384, "user-defined-generic-types"]], "Any \u578b\u5225": [[384, "the-any-type"]], "Nominal vs structural subtyping": [[384, "nominal-vs-structural-subtyping"]], "Special typing primitives": [[384, "special-typing-primitives"]], "Special types": [[384, "special-types"]], "Special forms": [[384, "special-forms"]], "Building generic types and type aliases": [[384, "building-generic-types-and-type-aliases"]], "Other special directives": [[384, "other-special-directives"]], "ABCs for working with IO": [[384, "abcs-for-working-with-io"]], "\u51fd\u5f0f\u8207\u88dd\u98fe\u5668": [[384, "functions-and-decorators"]], "Recognised parameters for field specifiers": [[384, "id7"]], "Introspection helpers": [[384, "introspection-helpers"]], "\u68c4\u7528\u7684\u5225\u540d": [[384, "deprecated-aliases"]], "\u5167\u5efa\u578b\u5225\u7684\u5225\u540d": [[384, "aliases-to-built-in-types"]], "collections \u4e2d\u578b\u5225\u7684\u5225\u540d": [[384, "aliases-to-types-in-collections"]], "Aliases to other concrete types": [[384, "aliases-to-other-concrete-types"]], "collections.abc \u4e2d\u5bb9\u5668 ABC \u7684\u5225\u540d": [[384, "aliases-to-container-abcs-in-collections-abc"]], "Aliases to asynchronous ABCs in collections.abc": [[384, "aliases-to-asynchronous-abcs-in-collections-abc"]], "Aliases to other ABCs in collections.abc": [[384, "aliases-to-other-abcs-in-collections-abc"]], "contextlib ABC \u7684\u5225\u540d": [[384, "aliases-to-contextlib-abcs"]], "Deprecation Timeline of Major Features": [[384, "deprecation-timeline-of-major-features"]], "tokenize --- Tokenizer for Python source": [[376, "module-tokenize"]], "Tokenizing Input": [[376, "tokenizing-input"]], "unittest.mock --- \u5165\u9580\u6307\u5357": [[388, "unittest-mock-getting-started"]], "\u4f7f\u7528 Mock \u7684\u65b9\u5f0f": [[388, "using-mock"]], "\u4f7f\u7528 Mock \u4f86 patching \u65b9\u6cd5": [[388, "mock-patching-methods"]], "\u5c0d\u7269\u4ef6\u7684\u65b9\u6cd5\u547c\u53eb\u4f7f\u7528 mock": [[388, "mock-for-method-calls-on-an-object"]], "Mock \u985e\u5225": [[388, "mocking-classes"], [387, "the-mock-class"]], "\u547d\u540d\u4f60\u7684 mock": [[388, "naming-your-mocks"]], "\u8ffd\u8e64\u6240\u6709\u547c\u53eb": [[388, "tracking-all-calls"]], "\u8a2d\u5b9a\u56de\u50b3\u503c\u548c\u5c6c\u6027": [[388, "setting-return-values-and-attributes"]], "\u900f\u904e mock \u5f15\u767c\u4f8b\u5916": [[388, "raising-exceptions-with-mocks"]], "Side effect \u51fd\u5f0f\u4ee5\u53ca\u53ef\u758a\u4ee3\u7269\u4ef6": [[388, "side-effect-functions-and-iterables"]], "Mock \u975e\u540c\u6b65\u53ef\u758a\u4ee3\u7269\u4ef6": [[388, "mocking-asynchronous-iterators"]], "Mock \u975e\u540c\u6b65\u60c5\u5883\u7ba1\u7406\u5668": [[388, "mocking-asynchronous-context-manager"]], "\u5f9e\u73fe\u6709\u7269\u4ef6\u5efa\u7acb mock": [[388, "creating-a-mock-from-an-existing-object"]], "\u4f7f\u7528 side_effect \u56de\u50b3\u5404\u5225\u6a94\u6848\u5167\u5bb9": [[388, "using-side-effect-to-return-per-file-content"]], "Patch \u88dd\u98fe\u5668": [[388, "patch-decorators"]], "\u66f4\u591a\u7bc4\u4f8b": [[388, "further-examples"]], "Mock \u934a\u63a5\u547c\u53eb": [[388, "mocking-chained-calls"]], "Partial mocking": [[388, "partial-mocking"]], "Mocking a Generator Method": [[388, "mocking-a-generator-method"]], "Applying the same patch to every test method": [[388, "applying-the-same-patch-to-every-test-method"]], "Mocking Unbound Methods": [[388, "mocking-unbound-methods"]], "Checking multiple calls with mock": [[388, "checking-multiple-calls-with-mock"]], "Coping with mutable arguments": [[388, "coping-with-mutable-arguments"]], "Nesting Patches": [[388, "nesting-patches"]], "Mocking a dictionary with MagicMock": [[388, "mocking-a-dictionary-with-magicmock"]], "Mock subclasses and their attributes": [[388, "mock-subclasses-and-their-attributes"]], "Mocking imports with patch.dict": [[388, "mocking-imports-with-patch-dict"]], "Tracking order of calls and less verbose call assertions": [[388, "tracking-order-of-calls-and-less-verbose-call-assertions"]], "More complex argument matching": [[388, "more-complex-argument-matching"]], "uuid --- RFC 4122 \u5b9a\u7fa9\u7684 UUID \u7269\u4ef6": [[396, "module-uuid"]], "\u547d\u4ee4\u5217\u7684\u7528\u6cd5": [[396, "command-line-usage"]], "\u547d\u4ee4\u5217\u7684\u7bc4\u4f8b": [[396, "command-line-example"]], "xdrlib --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[395, "module-uu"]], "tkinter.ttk --- Tk themed widgets": [[374, "module-tkinter.ttk"]], "\u4f7f\u7528 Ttk": [[374, "using-ttk"]], "Ttk Widgets": [[374, "ttk-widgets"]], "Widget": [[374, "widget"]], "\u6a19\u6e96\u9078\u9805": [[374, "standard-options"]], "Scrollable Widget Options": [[374, "scrollable-widget-options"]], "Label Options": [[374, "label-options"]], "\u76f8\u5bb9\u6027\u9078\u9805": [[374, "compatibility-options"]], "Widget States": [[374, "widget-states"]], "ttk.Widget": [[374, "ttk-widget"]], "Combobox": [[374, "combobox"]], "\u9078\u9805": [[374, "options"], [374, "id1"], [374, "id3"], [374, "id5"], [374, "id6"], [374, "id7"]], "Virtual events": [[374, "virtual-events"], [374, "id2"]], "ttk.Combobox": [[374, "ttk-combobox"]], "Spinbox": [[374, "spinbox"]], "ttk.Spinbox": [[374, "ttk-spinbox"]], "Notebook": [[374, "notebook"]], "Tab Options": [[374, "tab-options"]], "Tab Identifiers": [[374, "tab-identifiers"]], "\u865b\u64ec\u4e8b\u4ef6": [[374, "id4"], [374, "id8"]], "ttk.Notebook": [[374, "ttk-notebook"]], "Progressbar": [[374, "progressbar"]], "ttk.Progressbar": [[374, "ttk-progressbar"]], "Separator": [[374, "separator"]], "Sizegrip": [[374, "sizegrip"]], "Platform-specific notes": [[374, "platform-specific-notes"]], "Bugs": [[374, "bugs"]], "Treeview": [[374, "treeview"]], "Item Options": [[374, "item-options"]], "Tag Options": [[374, "tag-options"]], "Column Identifiers": [[374, "column-identifiers"]], "ttk.Treeview": [[374, "ttk-treeview"]], "Ttk Styling": [[374, "ttk-styling"]], "Layouts": [[374, "layouts"]], "types --- Dynamic type creation and names for built-in types": [[383, "module-types"]], "Dynamic Type Creation": [[383, "dynamic-type-creation"]], "Standard Interpreter Types": [[383, "standard-interpreter-types"]], "Additional Utility Classes and Functions": [[383, "additional-utility-classes-and-functions"]], "Coroutine Utility Functions": [[383, "coroutine-utility-functions"]], "winsound --- Sound-playing interface for Windows": [[404, "module-winsound"]], "wave --- \u8b80\u5beb WAV \u6a94\u6848": [[399, "module-wave"]], "Wave_read \u7269\u4ef6": [[399, "wave-read-objects"]], "Wave_write \u7269\u4ef6": [[399, "wave-write-objects"]], "token --- Constants used with Python parse trees": [[375, "module-token"]], "traceback --- Print or retrieve a stack traceback": [[379, "module-traceback"]], "TracebackException \u7269\u4ef6": [[379, "tracebackexception-objects"]], "StackSummary \u7269\u4ef6": [[379, "stacksummary-objects"]], "FrameSummary \u7269\u4ef6": [[379, "framesummary-objects"]], "Traceback Examples": [[379, "traceback-examples"]], "turtle --- \u9f9c\u5716\u5b78 (Turtle graphics)": [[382, "module-turtle"]], "\u4ecb\u7d39": [[382, "introduction"]], "Turtle star": [[382, null]], "\u555f\u52d5\u4e00\u500b\u70cf\u9f9c\u74b0\u5883": [[382, "starting-a-turtle-environment"]], "\u57fa\u672c\u7e6a\u5716": [[382, "basic-drawing"]], "Pen control": [[382, "pen-control"], [382, "id1"]], "The turtle's position": [[382, "the-turtle-s-position"]], "Making algorithmic patterns": [[382, "making-algorithmic-patterns"]], "How to...": [[382, "how-to"]], "Get started as quickly as possible": [[382, "get-started-as-quickly-as-possible"]], "Use the turtle module namespace": [[382, "use-the-turtle-module-namespace"]], "Use turtle graphics in a script": [[382, "use-turtle-graphics-in-a-script"]], "Use object-oriented turtle graphics": [[382, "use-object-oriented-turtle-graphics"]], "Turtle graphics reference": [[382, "turtle-graphics-reference"]], "Turtle methods": [[382, "turtle-methods"]], "Methods of TurtleScreen/Screen": [[382, "methods-of-turtlescreen-screen"]], "Methods of RawTurtle/Turtle and corresponding functions": [[382, "methods-of-rawturtle-turtle-and-corresponding-functions"]], "Turtle motion": [[382, "turtle-motion"]], "Tell Turtle's state": [[382, "tell-turtle-s-state"]], "Settings for measurement": [[382, "settings-for-measurement"]], "Drawing state": [[382, "drawing-state"]], "Color control": [[382, "color-control"]], "Filling": [[382, "filling"]], "More drawing control": [[382, "more-drawing-control"]], "Turtle state": [[382, "turtle-state"]], "Visibility": [[382, "visibility"]], "Appearance": [[382, "appearance"]], "Using events": [[382, "using-events"]], "Special Turtle methods": [[382, "special-turtle-methods"]], "Compound shapes": [[382, "compound-shapes"]], "Methods of TurtleScreen/Screen and corresponding functions": [[382, "methods-of-turtlescreen-screen-and-corresponding-functions"]], "Window control": [[382, "window-control"]], "Animation control": [[382, "animation-control"]], "Using screen events": [[382, "using-screen-events"]], "Input methods": [[382, "input-methods"]], "Settings and special methods": [[382, "settings-and-special-methods"]], "Methods specific to Screen, not inherited from TurtleScreen": [[382, "methods-specific-to-screen-not-inherited-from-turtlescreen"]], "Public classes": [[382, "public-classes"]], "Explanation": [[382, "explanation"]], "Help and configuration": [[382, "help-and-configuration"]], "How to use help": [[382, "how-to-use-help"]], "Translation of docstrings into different languages": [[382, "translation-of-docstrings-into-different-languages"]], "How to configure Screen and Turtles": [[382, "how-to-configure-screen-and-turtles"]], "turtledemo --- Demo scripts": [[382, "module-turtledemo"]], "Changes since Python 2.6": [[382, "changes-since-python-2-6"]], "Changes since Python 3.0": [[382, "changes-since-python-3-0"]], "unittest.mock \u2014 mock \u7269\u4ef6\u51fd\u5f0f\u5eab": [[387, "module-unittest.mock"]], "\u5feb\u901f\u5c0e\u5f15": [[387, "quick-guide"]], "\u547c\u53eb": [[387, "calling"]], "\u522a\u9664\u5c6c\u6027": [[387, "deleting-attributes"]], "Mock \u540d\u7a31\u8207\u540d\u7a31\u5c6c\u6027": [[387, "mock-names-and-the-name-attribute"]], "\u5982\u540c\u5c6c\u6027\u4e00\u822c\u9644\u52a0 mock": [[387, "attaching-mocks-as-attributes"]], "Patchers": [[387, "the-patchers"]], "patch": [[387, "patch"]], "patch.object": [[387, "patch-object"]], "patch.dict": [[387, "patch-dict"]], "patch.multiple": [[387, "patch-multiple"]], "patch \u65b9\u6cd5\uff1a\u555f\u52d5\u8207\u505c\u6b62": [[387, "patch-methods-start-and-stop"]], "patch \u5167\u5efa\u51fd\u5f0f": [[387, "patch-builtins"]], "TEST_PREFIX": [[387, "test-prefix"]], "Nesting Patch Decorators": [[387, "nesting-patch-decorators"]], "Where to patch": [[387, "where-to-patch"]], "Patching Descriptors and Proxy Objects": [[387, "patching-descriptors-and-proxy-objects"]], "MagicMock and magic method support": [[387, "magicmock-and-magic-method-support"]], "Mocking Magic Methods": [[387, "mocking-magic-methods"]], "Magic Mock": [[387, "magic-mock"]], "Helpers": [[387, "helpers"]], "sentinel": [[387, "sentinel"]], "DEFAULT": [[387, "default"]], "call": [[387, "call"]], "create_autospec": [[387, "create-autospec"]], "ANY": [[387, "any"]], "FILTER_DIR": [[387, "filter-dir"]], "mock_open": [[387, "mock-open"]], "Autospeccing": [[387, "autospeccing"]], "Sealing mocks": [[387, "sealing-mocks"]], "webbrowser --- Convenient web-browser controller": [[401, "module-webbrowser"]], "Browser Controller Objects": [[401, "browser-controller-objects"]], "winreg --- Windows registry access": [[403, "module-winreg"]], "HKEY_* Constants": [[403, "hkey-constants"]], "Access Rights": [[403, "access-rights"]], "64-bit Specific": [[403, "bit-specific"]], "Value Types": [[403, "value-types"]], "Registry Handle Objects": [[403, "registry-handle-objects"]], "urllib.robotparser --- robots.txt \u7684\u5256\u6790\u5668": [[394, "module-urllib.robotparser"]], "Unix \u7279\u6709\u670d\u52d9": [[389, "unix-specific-services"]], "urllib --- URL \u8655\u7406\u6a21\u7d44": [[390, "module-urllib"]], "urllib.request --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab": [[393, "module-urllib.request"]], "Request Objects": [[393, "request-objects"]], "OpenerDirector \u7269\u4ef6": [[393, "openerdirector-objects"]], "BaseHandler \u7269\u4ef6": [[393, "basehandler-objects"]], "HTTPRedirectHandler \u7269\u4ef6": [[393, "httpredirecthandler-objects"]], "HTTPCookieProcessor \u7269\u4ef6": [[393, "httpcookieprocessor-objects"]], "ProxyHandler \u7269\u4ef6": [[393, "proxyhandler-objects"]], "HTTPPasswordMgr \u7269\u4ef6": [[393, "httppasswordmgr-objects"]], "HTTPPasswordMgrWithPriorAuth \u7269\u4ef6": [[393, "httppasswordmgrwithpriorauth-objects"]], "AbstractBasicAuthHandler \u7269\u4ef6": [[393, "abstractbasicauthhandler-objects"]], "HTTPBasicAuthHandler \u7269\u4ef6": [[393, "httpbasicauthhandler-objects"]], "ProxyBasicAuthHandler \u7269\u4ef6": [[393, "proxybasicauthhandler-objects"]], "AbstractDigestAuthHandler \u7269\u4ef6": [[393, "abstractdigestauthhandler-objects"]], "HTTPDigestAuthHandler \u7269\u4ef6": [[393, "httpdigestauthhandler-objects"]], "ProxyDigestAuthHandler \u7269\u4ef6": [[393, "proxydigestauthhandler-objects"]], "HTTPHandler \u7269\u4ef6": [[393, "httphandler-objects"]], "HTTPSHandler \u7269\u4ef6": [[393, "httpshandler-objects"]], "FileHandler \u7269\u4ef6": [[393, "filehandler-objects"]], "DataHandler \u7269\u4ef6": [[393, "datahandler-objects"]], "FTPHandler \u7269\u4ef6": [[393, "ftphandler-objects"]], "CacheFTPHandler \u7269\u4ef6": [[393, "cacheftphandler-objects"]], "UnknownHandler \u7269\u4ef6": [[393, "unknownhandler-objects"]], "HTTPErrorProcessor \u7269\u4ef6": [[393, "httperrorprocessor-objects"]], "Examples": [[393, "examples"]], "Legacy interface": [[393, "legacy-interface"]], "urllib.request Restrictions": [[393, "urllib-request-restrictions"]], "urllib.response --- Response classes used by urllib": [[393, "module-urllib.response"]], "XML \u8655\u7406\u6a21\u7d44": [[407, "module-xml"]], "XML \u6f0f\u6d1e": [[407, "xml-vulnerabilities"]], "defusedxml \u5957\u4ef6": [[407, "the-defusedxml-package"]], "wsgiref --- WSGI \u5de5\u5177\u8207\u53c3\u8003\u5be6\u4f5c": [[405, "module-wsgiref"]], "wsgiref.util -- WSGI \u74b0\u5883\u5de5\u5177": [[405, "module-wsgiref.util"]], "wsgiref.headers -- WSGI \u56de\u61c9\u6a19\u982d\u5de5\u5177": [[405, "module-wsgiref.headers"]], "wsgiref.simple_server -- \u4e00\u500b\u7c21\u55ae\u7684 WSGI HTTP \u4f3a\u670d\u5668": [[405, "module-wsgiref.simple_server"]], "wsgiref.validate --- WSGI \u7b26\u5408\u6027\u6aa2\u67e5": [[405, "module-wsgiref.validate"]], "wsgiref.handlers -- \u4f3a\u670d\u5668 / \u9598\u9053\u57fa\u672c\u985e\u5225": [[405, "module-wsgiref.handlers"]], "wsgiref.types -- \u7528\u65bc\u975c\u614b\u578b\u5225\u6aa2\u67e5\u7684 WSGI \u578b\u5225": [[405, "module-wsgiref.types"]], "weakref --- Weak references": [[400, "module-weakref"]], "Weak Reference Objects": [[400, "weak-reference-objects"]], "Finalizer Objects": [[400, "finalizer-objects"]], "Comparing finalizers with __del__() methods": [[400, "comparing-finalizers-with-del-methods"]], "unicodedata --- Unicode Database": [[385, "module-unicodedata"]], "MS Windows \u7279\u6709\u670d\u52d9": [[402, "ms-windows-specific-services"]], "tracemalloc --- Trace memory allocations": [[380, "module-tracemalloc"]], "Display the top 10": [[380, "display-the-top-10"]], "Compute differences": [[380, "compute-differences"]], "Get the traceback of a memory block": [[380, "get-the-traceback-of-a-memory-block"]], "Pretty top": [[380, "pretty-top"]], "Record the current and peak size of all traced memory blocks": [[380, "record-the-current-and-peak-size-of-all-traced-memory-blocks"]], "API": [[380, "api"], [397, "api"]], "DomainFilter": [[380, "domainfilter"]], "Filter": [[380, "filter"]], "Frame": [[380, "frame"]], "Snapshot": [[380, "snapshot"]], "Statistic": [[380, "statistic"]], "StatisticDiff": [[380, "statisticdiff"]], "Trace": [[380, "trace"]], "Traceback": [[380, "traceback"]], "venv --- Creation of virtual environments": [[397, "module-venv"]], "\u5efa\u7acb\u865b\u64ec\u74b0\u5883": [[397, "creating-virtual-environments"], [451, "creating-virtual-environments"]], "\u865b\u64ec\u74b0\u5883\u5982\u4f55\u904b\u4f5c": [[397, "how-venvs-work"]], "An example of extending EnvBuilder": [[397, "an-example-of-extending-envbuilder"]], "warnings --- Warning control": [[398, "module-warnings"]], "Warning Categories": [[398, "warning-categories"]], "The Warnings Filter": [[398, "the-warnings-filter"]], "Describing Warning Filters": [[398, "describing-warning-filters"]], "Default Warning Filter": [[398, "default-warning-filter"]], "Overriding the default filter": [[398, "overriding-the-default-filter"]], "Temporarily Suppressing Warnings": [[398, "temporarily-suppressing-warnings"]], "Testing Warnings": [[398, "testing-warnings"]], "Updating Code For New Versions of Dependencies": [[398, "updating-code-for-new-versions-of-dependencies"]], "Available Functions": [[398, "available-functions"]], "Available Context Managers": [[398, "available-context-managers"]], "urllib.parse --- Parse URLs into components": [[392, "module-urllib.parse"]], "URL Parsing": [[392, "url-parsing"]], "URL parsing security": [[392, "url-parsing-security"]], "Parsing ASCII Encoded Bytes": [[392, "parsing-ascii-encoded-bytes"]], "Structured Parse Results": [[392, "structured-parse-results"]], "URL Quoting": [[392, "url-quoting"]], "tty --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f": [[381, "module-tty"]], "tomllib --- \u5256\u6790 TOML \u6a94\u6848": [[377, "module-tomllib"]], "\u8f49\u63db\u8868": [[377, "conversion-table"]], "PEP 453: Explicit Bootstrapping of PIP in Python Installations": [[475, "pep-453-explicit-bootstrapping-of-pip-in-python-installations"]], "Bootstrapping pip By Default": [[475, "bootstrapping-pip-by-default"], [467, "bootstrapping-pip-by-default"]], "Documentation Changes": [[475, "documentation-changes"], [467, "documentation-changes"]], "PEP 446: Newly Created File Descriptors Are Non-Inheritable": [[475, "pep-446-newly-created-file-descriptors-are-non-inheritable"]], "Improvements to Codec Handling": [[475, "improvements-to-codec-handling"]], "PEP 451: A ModuleSpec Type for the Import System": [[475, "pep-451-a-modulespec-type-for-the-import-system"]], "ensurepip": [[475, "ensurepip"], [472, "ensurepip"]], "abc": [[475, "abc"], [473, "abc"], [474, "abc"]], "audioop": [[475, "audioop"]], "base64": [[475, "base64"], [470, "base64"], [474, "base64"]], "colorsys": [[475, "colorsys"]], "filecmp": [[475, "filecmp"]], "html": [[475, "html"], [473, "html"], [474, "html"]], "idlelib \u8207 IDLE": [[475, "idlelib-and-idle"]], "marshal": [[475, "marshal"]], "pty": [[475, "pty"]], "resource": [[475, "resource"]], "select": [[475, "select"], [473, "select"], [474, "select"]], "shelve": [[475, "shelve"], [470, "shelve"]], "stat": [[475, "stat"], [474, "stat"]], "textwrap": [[475, "textwrap"], [474, "textwrap"]], "CPython \u5be6\u4f5c\u8b8a\u66f4": [[475, "cpython-implementation-changes"]], "PEP 445: Customization of CPython Memory Allocators": [[475, "pep-445-customization-of-cpython-memory-allocators"]], "PEP 442: Safe Object Finalization": [[475, "pep-442-safe-object-finalization"]], "PEP 456: Secure and Interchangeable Hash Algorithm": [[475, "pep-456-secure-and-interchangeable-hash-algorithm"]], "PEP 436: Argument Clinic": [[475, "pep-436-argument-clinic"]], "Other Build and C API Changes": [[475, "other-build-and-c-api-changes"]], "\u986f\u8457\u6700\u4f73\u5316": [[475, "significant-optimizations"]], "Deprecations in the Python API": [[475, "deprecations-in-the-python-api"]], "\u5df2\u68c4\u7528\u529f\u80fd": [[475, "deprecated-features"]], "Operating Systems No Longer Supported": [[475, "operating-systems-no-longer-supported"]], "API \u8207\u529f\u80fd\u7684\u79fb\u9664": [[475, "api-and-feature-removals"]], "\u7a0b\u5f0f\u78bc\u7684\u6e05\u9664": [[475, "code-cleanups"]], "Porting to Python 3.4": [[475, "porting-to-python-3-4"]], "Python API \u7684\u8b8a\u66f4": [[475, "changes-in-the-python-api"]], "3.4.3 \u4e2d\u7684\u8b8a\u66f4": [[475, "changed-in-3-4-3"]], "PEP 476: Enabling certificate verification by default for stdlib http clients": [[475, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"], [467, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"]], "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[466, "what-s-new-in-python-2-6"]], "Python 3.0": [[466, "python-3-0"]], "Changes to the Development Process": [[466, "changes-to-the-development-process"]], "New Issue Tracker: Roundup": [[466, "new-issue-tracker-roundup"]], "New Documentation Format: reStructuredText Using Sphinx": [[466, "new-documentation-format-restructuredtext-using-sphinx"]], "PEP 343: The 'with' statement": [[466, "pep-343-the-with-statement"], [465, "pep-343-the-with-statement"]], "Writing Context Managers": [[466, "writing-context-managers"], [465, "writing-context-managers"]], "The contextlib module": [[466, "the-contextlib-module"], [465, "the-contextlib-module"]], "PEP 366: Explicit Relative Imports From a Main Module": [[466, "pep-366-explicit-relative-imports-from-a-main-module"]], "PEP 370: Per-user site-packages Directory": [[466, "pep-370-per-user-site-packages-directory"]], "PEP 371: The multiprocessing Package": [[466, "pep-371-the-multiprocessing-package"]], "PEP 3101: Advanced String Formatting": [[466, "pep-3101-advanced-string-formatting"]], "PEP 3105: print As a Function": [[466, "pep-3105-print-as-a-function"]], "PEP 3110: Exception-Handling Changes": [[466, "pep-3110-exception-handling-changes"]], "PEP 3112: Byte Literals": [[466, "pep-3112-byte-literals"]], "PEP 3116: New I/O Library": [[466, "pep-3116-new-i-o-library"]], "PEP 3118\uff1a\u4fee\u8a02\u7de9\u885d\u5354\u5b9a": [[466, "pep-3118-revised-buffer-protocol"]], "PEP 3119: Abstract Base Classes": [[466, "pep-3119-abstract-base-classes"]], "PEP 3127: Integer Literal Support and Syntax": [[466, "pep-3127-integer-literal-support-and-syntax"]], "PEP 3129: Class Decorators": [[466, "pep-3129-class-decorators"]], "PEP 3141: A Type Hierarchy for Numbers": [[466, "pep-3141-a-type-hierarchy-for-numbers"]], "The fractions Module": [[466, "the-fractions-module"]], "Interpreter Changes": [[466, "interpreter-changes"], [467, "interpreter-changes"]], "New and Improved Modules": [[466, "new-and-improved-modules"], [461, "new-and-improved-modules"], [462, "new-and-improved-modules"], [467, "new-and-improved-modules"]], "The ast module": [[466, "the-ast-module"]], "The future_builtins module": [[466, "the-future-builtins-module"]], "The json module: JavaScript Object Notation": [[466, "the-json-module-javascript-object-notation"]], "The plistlib module: A Property-List Parser": [[466, "the-plistlib-module-a-property-list-parser"]], "ctypes Enhancements": [[466, "ctypes-enhancements"]], "Improved SSL Support": [[466, "improved-ssl-support"]], "Deprecations and Removals": [[466, "deprecations-and-removals"]], "Port-Specific Changes: Windows": [[466, "port-specific-changes-windows"], [467, "port-specific-changes-windows"]], "Port-Specific Changes: Mac OS X": [[466, "port-specific-changes-mac-os-x"], [467, "port-specific-changes-mac-os-x"]], "Port-Specific Changes: IRIX": [[466, "port-specific-changes-irix"]], "Porting to Python 2.6": [[466, "porting-to-python-2-6"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd": [[449, "brief-tour-of-the-standard-library"]], "\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762": [[449, "operating-system-interface"]], "\u6a94\u6848\u4e4b\u842c\u7528\u5b57\u5143 (File Wildcards)": [[449, "file-wildcards"]], "\u547d\u4ee4\u5217\u5f15\u6578": [[449, "command-line-arguments"]], "\u932f\u8aa4\u8f38\u51fa\u91cd\u65b0\u5c0e\u5411\u8207\u7a0b\u5f0f\u7d42\u6b62": [[449, "error-output-redirection-and-program-termination"]], "\u5b57\u4e32\u6a23\u5f0f\u6bd4\u5c0d": [[449, "string-pattern-matching"]], "\u6578\u5b78\u76f8\u95dc": [[449, "mathematics"]], "\u7db2\u8def\u5b58\u53d6": [[449, "internet-access"]], "\u65e5\u671f\u8207\u6642\u9593": [[449, "dates-and-times"]], "\u8cc7\u6599\u58d3\u7e2e": [[449, "data-compression"]], "\u6548\u80fd\u91cf\u6e2c": [[449, "performance-measurement"]], "\u54c1\u8cea\u63a7\u7ba1": [[449, "quality-control"]], "\u6a19\u6e96\u6a21\u7d44\u5eab": [[449, "batteries-included"]], "\u8f38\u5165\u548c\u8f38\u51fa": [[444, "input-and-output"]], "\u66f4\u83ef\u9e97\u7684\u8f38\u51fa\u683c\u5f0f": [[444, "fancier-output-formatting"]], "\u683c\u5f0f\u5316\u7684\u5b57\u4e32\u6587\u672c (Formatted String Literals)": [[444, "formatted-string-literals"]], "\u5b57\u4e32\u7684 format() method": [[444, "the-string-format-method"]], "\u624b\u52d5\u683c\u5f0f\u5316\u5b57\u4e32": [[444, "manual-string-formatting"]], "\u683c\u5f0f\u5316\u5b57\u4e32\u7684\u820a\u65b9\u6cd5": [[444, "old-string-formatting"]], "\u8b80\u5beb\u6a94\u6848": [[444, "reading-and-writing-files"]], "\u6a94\u6848\u7269\u4ef6\u7684 method": [[444, "methods-of-file-objects"]], "\u4f7f\u7528 json \u5132\u5b58\u7d50\u69cb\u5316\u8cc7\u6599": [[444, "saving-structured-data-with-json"]], "\u4f7f\u7528 Python \u76f4\u8b6f\u5668": [[446, "using-the-python-interpreter"]], "\u555f\u52d5\u76f4\u8b6f\u5668": [[446, "invoking-the-interpreter"]], "\u50b3\u905e\u5f15\u6578": [[446, "argument-passing"]], "\u76f4\u8b6f\u5668\u8207\u5b83\u7684\u74b0\u5883": [[446, "the-interpreter-and-its-environment"]], "\u539f\u59cb\u78bc\u7684\u5b57\u5143\u7de8\u78bc (encoding)": [[446, "source-code-encoding"]], "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[461, "what-s-new-in-python-2-1"]], "PEP 227: Nested Scopes": [[461, "pep-227-nested-scopes"], [462, "pep-227-nested-scopes"]], "PEP 236: __future__ Directives": [[461, "pep-236-future-directives"]], "PEP 207: Rich Comparisons": [[461, "pep-207-rich-comparisons"]], "PEP 230: Warning Framework": [[461, "pep-230-warning-framework"]], "PEP 229: New Build System": [[461, "pep-229-new-build-system"]], "PEP 205: Weak References": [[461, "pep-205-weak-references"]], "PEP 232: Function Attributes": [[461, "pep-232-function-attributes"]], "PEP 235: Importing Modules on Case-Insensitive Platforms": [[461, "pep-235-importing-modules-on-case-insensitive-platforms"]], "PEP 217: Interactive Display Hook": [[461, "pep-217-interactive-display-hook"]], "PEP 208: New Coercion Model": [[461, "pep-208-new-coercion-model"]], "PEP 241: Metadata in Python Packages": [[461, "pep-241-metadata-in-python-packages"]], "Other Changes and Fixes": [[461, "other-changes-and-fixes"], [463, "other-changes-and-fixes"], [467, "other-changes-and-fixes"]], "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[465, "what-s-new-in-python-2-5"]], "PEP 308: Conditional Expressions": [[465, "pep-308-conditional-expressions"]], "PEP 309: Partial Function Application": [[465, "pep-309-partial-function-application"]], "PEP 314: Metadata for Python Software Packages v1.1": [[465, "pep-314-metadata-for-python-software-packages-v1-1"]], "PEP 328: Absolute and Relative Imports": [[465, "pep-328-absolute-and-relative-imports"]], "PEP 338: Executing Modules as Scripts": [[465, "pep-338-executing-modules-as-scripts"]], "PEP 341: Unified try/except/finally": [[465, "pep-341-unified-try-except-finally"]], "PEP 342: New Generator Features": [[465, "pep-342-new-generator-features"]], "PEP 352: Exceptions as New-Style Classes": [[465, "pep-352-exceptions-as-new-style-classes"]], "PEP 353: Using ssize_t as the index type": [[465, "pep-353-using-ssize-t-as-the-index-type"]], "PEP 357: The '__index__' method": [[465, "pep-357-the-index-method"]], "Interactive Interpreter Changes": [[465, "interactive-interpreter-changes"]], "New, Improved, and Removed Modules": [[465, "new-improved-and-removed-modules"]], "ctypes \u5957\u4ef6": [[465, "the-ctypes-package"]], "ElementTree \u5957\u4ef6": [[465, "the-elementtree-package"]], "hashlib \u5957\u4ef6": [[465, "the-hashlib-package"]], "sqlite3 \u5957\u4ef6": [[465, "the-sqlite3-package"]], "wsgiref \u5957\u4ef6": [[465, "the-wsgiref-package"]], "Port-Specific Changes": [[465, "port-specific-changes"], [464, "port-specific-changes"], [463, "port-specific-changes"]], "Porting to Python 2.5": [[465, "porting-to-python-2-5"]], "\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb": [[447, "an-informal-introduction-to-python"]], "\u628a Python \u7576\u4f5c\u8a08\u7b97\u6a5f\u4f7f\u7528": [[447, "using-python-as-a-calculator"]], "\u6578\u5b57 (Number)": [[447, "numbers"]], "\u6587\u5b57": [[447, "text"]], "List\uff08\u4e32\u5217\uff09": [[447, "lists"], [342, "lists"]], "\u521d\u63a2\u7a0b\u5f0f\u8a2d\u8a08\u7684\u524d\u5e7e\u6b65": [[447, "first-steps-towards-programming"]], "\u5728 Windows \u4e0a\u4f7f\u7528 Python": [[459, "using-python-on-windows"]], "The full installer": [[459, "the-full-installer"]], "\u5b89\u88dd\u6b65\u9a5f": [[459, "installation-steps"]], "Removing the MAX_PATH Limitation": [[459, "removing-the-max-path-limitation"]], "\u5b89\u88dd\u6392\u9664\u4f7f\u7528\u8005\u4ecb\u9762": [[459, "installing-without-ui"]], "\u7576\u5b89\u88dd\u6642\u4e0d\u4e0b\u8f09": [[459, "installing-without-downloading"]], "Modifying an install": [[459, "modifying-an-install"]], "The Microsoft Store package": [[459, "the-microsoft-store-package"]], "Known issues": [[459, "known-issues"]], "Redirection of local data, registry, and temporary paths": [[459, "redirection-of-local-data-registry-and-temporary-paths"]], "nuget.org \u5957\u4ef6": [[459, "the-nuget-org-packages"]], "The embeddable package": [[459, "the-embeddable-package"]], "Python Application": [[459, "python-application"]], "\u5d4c\u5165 Python": [[459, "embedding-python"]], "Alternative bundles": [[459, "alternative-bundles"]], "\u8a2d\u5b9a Python": [[459, "configuring-python"]], "Excursus: Setting environment variables": [[459, "excursus-setting-environment-variables"]], "Finding the Python executable": [[459, "finding-the-python-executable"]], "UTF-8 \u6a21\u5f0f": [[459, "utf-8-mode"]], "Python Launcher for Windows": [[459, "python-launcher-for-windows"]], "\u958b\u59cb": [[459, "getting-started"]], "From the command-line": [[459, "from-the-command-line"]], "\u865b\u64ec\u74b0\u5883\uff08Virtual environment\uff09": [[459, "virtual-environments"]], "From a script": [[459, "from-a-script"]], "\u5f9e\u6a94\u6848\u95dc\u806f": [[459, "from-file-associations"]], "Shebang Lines": [[459, "shebang-lines"]], "Arguments in shebang lines": [[459, "arguments-in-shebang-lines"]], "Customization": [[459, "customization"]], "Customization via INI files": [[459, "customization-via-ini-files"]], "Customizing default Python versions": [[459, "customizing-default-python-versions"]], "Diagnostics": [[459, "diagnostics"]], "Dry Run": [[459, "dry-run"]], "\u5b89\u88dd\u96a8\u9078": [[459, "install-on-demand"]], "Return codes": [[459, "return-codes"]], "Finding modules": [[459, "finding-modules"]], "Additional modules": [[459, "additional-modules"]], "PyWin32": [[459, "pywin32"]], "cx_Freeze": [[459, "cx-freeze"]], "\u7de8\u8b6f Python \u5728 Windows": [[459, "compiling-python-on-windows"]], "\u5176\u4ed6\u5e73\u53f0": [[459, "other-platforms"]], "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[473, "what-s-new-in-python-3-2"]], "PEP 384: Defining a Stable ABI": [[473, "pep-384-defining-a-stable-abi"]], "PEP 389: Argparse Command Line Parsing Module": [[473, "pep-389-argparse-command-line-parsing-module"]], "PEP 391:  Dictionary Based Configuration for Logging": [[473, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3148:  The concurrent.futures module": [[473, "pep-3148-the-concurrent-futures-module"]], "PEP 3147:  PYC Repository Directories": [[473, "pep-3147-pyc-repository-directories"]], "PEP 3149: ABI Version Tagged .so Files": [[473, "pep-3149-abi-version-tagged-so-files"]], "PEP 3333: Python Web Server Gateway Interface v1.0.1": [[473, "pep-3333-python-web-server-gateway-interface-v1-0-1"]], "New, Improved, and Deprecated Modules": [[473, "new-improved-and-deprecated-modules"], [464, "new-improved-and-deprecated-modules"], [463, "new-improved-and-deprecated-modules"], [469, "new-improved-and-deprecated-modules"]], "elementtree": [[473, "elementtree"]], "datetime \u548c time": [[473, "datetime-and-time"]], "reprlib": [[473, "reprlib"]], "decimal and fractions": [[473, "decimal-and-fractions"]], "ftp": [[473, "ftp"]], "popen": [[473, "popen"]], "gzip \u548c zipfile": [[473, "gzip-and-zipfile"]], "nntp": [[473, "nntp"]], "certificates": [[473, "certificates"]], "tempfile": [[473, "tempfile"], [472, "tempfile"], [474, "tempfile"], [471, "tempfile"]], "mailbox": [[473, "mailbox"]], "turtledemo": [[473, "turtledemo"]], "Multi-threading": [[473, "multi-threading"], [256, "multi-threading"]], "Unicode": [[473, "unicode"], [460, "unicode"]], "Codecs": [[473, "codecs"]], "\u6587\u4ef6": [[473, "documentation"]], "Code Repository": [[473, "code-repository"]], "Porting to Python 3.2": [[473, "porting-to-python-3-2"]], "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[470, "what-s-new-in-python-3-10"]], "\u6458\u8981 -- \u767c\u5e03\u91cd\u9ede": [[470, "summary-release-highlights"]], "\u65b0\u529f\u80fd": [[470, "new-features"], [470, "id1"]], "\u5e36\u62ec\u865f\u7684\u60c5\u5883\u7ba1\u7406\u5668": [[470, "parenthesized-context-managers"]], "\u66f4\u597d\u7684\u932f\u8aa4\u8a0a\u606f": [[470, "better-error-messages"]], "SyntaxErrors": [[470, "syntaxerrors"]], "IndentationErrors": [[470, "indentationerrors"]], "AttributeErrors": [[470, "attributeerrors"]], "NameErrors": [[470, "nameerrors"]], "PEP 626\uff1a\u7528\u65bc\u9664\u932f\u548c\u5176\u4ed6\u5de5\u5177\u7684\u7cbe\u78ba\u5217\u865f": [[470, "pep-626-precise-line-numbers-for-debugging-and-other-tools"]], "PEP 634\uff1a\u7d50\u69cb\u6a21\u5f0f\u5339\u914d": [[470, "pep-634-structural-pattern-matching"]], "\u8a9e\u6cd5\u548c\u64cd\u4f5c": [[470, "syntax-and-operations"]], "\u5ba3\u544a\u5f0f\u65b9\u6cd5 (Declarative approach)": [[470, "declarative-approach"]], "\u7c21\u55ae\u6a21\u5f0f\uff1a\u8207\u5b57\u9762\u503c\u5339\u914d": [[470, "simple-pattern-match-to-a-literal"]], "\u6c92\u6709\u842c\u7528\u5b57\u5143 (wildcard) \u7684\u884c\u70ba": [[470, "behavior-without-the-wildcard"]], "\u5177\u6709\u5b57\u9762\u503c\u548c\u8b8a\u6578\u7684\u6a21\u5f0f": [[470, "patterns-with-a-literal-and-variable"]], "\u6a21\u5f0f\u548c\u985e\u5225": [[470, "patterns-and-classes"]], "\u5177\u6709\u4f4d\u7f6e\u53c3\u6578\u7684\u6a21\u5f0f": [[470, "patterns-with-positional-parameters"]], "\u5de2\u72c0\u6a21\u5f0f": [[470, "nested-patterns"]], "\u8907\u96dc\u6a21\u5f0f\u548c\u842c\u7528\u5b57\u5143": [[470, "complex-patterns-and-the-wildcard"]], "Guard": [[470, "guard"]], "\u5176\u4ed6\u4e3b\u8981\u529f\u80fd": [[470, "other-key-features"]], "\u53ef\u9078\u7684 EncodingWarning \u548c encoding=\"locale\" \u9078\u9805": [[470, "optional-encodingwarning-and-encoding-locale-option"]], "\u8207\u578b\u5225\u63d0\u793a\u76f8\u95dc\u7684\u65b0\u529f\u80fd": [[470, "new-features-related-to-type-hints"]], "PEP 604\uff1a\u65b0\u578b\u806f\u96c6\u904b\u7b97\u5b50": [[470, "pep-604-new-type-union-operator"]], "PEP 612\uff1a\u53c3\u6578\u898f\u7bc4\u8b8a\u6578": [[470, "pep-612-parameter-specification-variables"]], "PEP 613\uff1a\u578b\u5225\u5225\u540d (TypeAlias)": [[470, "pep-613-typealias"]], "PEP 647\uff1a\u4f7f\u7528\u8005\u5b9a\u7fa9\u7684\u578b\u5225\u9632\u8b77": [[470, "pep-647-user-defined-type-guards"]], "asynchat, asyncore, smtpd": [[470, "asynchat-asyncore-smtpd"]], "bdb": [[470, "bdb"]], "bisect": [[470, "bisect"]], "codecs": [[470, "codecs"], [474, "codecs"]], "\u50c5\u9650\u95dc\u9375\u5b57\u6b04\u4f4d (Keyword-only fields)": [[470, "keyword-only-fields"]], "IDLE \u548c idlelib": [[470, "idle-and-idlelib"]], "importlib.metadata": [[470, "importlib-metadata"]], "platform": [[470, "platform"]], "pyclbr": [[470, "pyclbr"]], "_thread": [[470, "thread"]], "zipimport": [[470, "zipimport"], [472, "zipimport"]], "\u5df2\u522a\u9664": [[470, "removed"], [470, "id4"]], "\u79fb\u690d\u5230 Python 3.10": [[470, "porting-to-python-3-10"], [470, "id2"]], "Python \u8a9e\u6cd5\u7684\u8b8a\u5316": [[470, "changes-in-the-python-syntax"]], "Python API \u7684\u8b8a\u5316": [[470, "changes-in-the-python-api"]], "CPython \u4f4d\u5143\u7d44\u78bc\u66f4\u6539": [[470, "cpython-bytecode-changes"]], "\u5efa\u7f6e\u8b8a\u66f4": [[470, "build-changes"], [471, "build-changes"]], "PEP 652\uff1a\u7dad\u8b77\u7a69\u5b9a ABI": [[470, "pep-652-maintaining-the-stable-abi"]], "Notable security feature in 3.10.7": [[470, "notable-security-feature-in-3-10-7"]], "Notable security feature in 3.10.8": [[470, "notable-security-feature-in-3-10-8"]], "Notable changes in 3.10.12": [[470, "notable-changes-in-3-10-12"]], "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[464, "what-s-new-in-python-2-4"]], "PEP 218: Built-In Set Objects": [[464, "pep-218-built-in-set-objects"]], "PEP 237: Unifying Long Integers and Integers": [[464, "pep-237-unifying-long-integers-and-integers"], [462, "pep-237-unifying-long-integers-and-integers"]], "PEP 289: Generator Expressions": [[464, "pep-289-generator-expressions"]], "PEP 292: Simpler String Substitutions": [[464, "pep-292-simpler-string-substitutions"]], "PEP 318: Decorators for Functions and Methods": [[464, "pep-318-decorators-for-functions-and-methods"]], "PEP 322: Reverse Iteration": [[464, "pep-322-reverse-iteration"]], "PEP 324: New subprocess Module": [[464, "pep-324-new-subprocess-module"]], "PEP 327: Decimal Data Type": [[464, "pep-327-decimal-data-type"]], "Why is Decimal needed?": [[464, "why-is-decimal-needed"]], "Decimal \u578b\u5225": [[464, "the-decimal-type"]], "Context \u578b\u5225": [[464, "the-context-type"]], "PEP 328: Multi-line Imports": [[464, "pep-328-multi-line-imports"]], "PEP 331: Locale-Independent Float/String Conversions": [[464, "pep-331-locale-independent-float-string-conversions"]], "cookielib": [[464, "cookielib"]], "Porting to Python 2.4": [[464, "porting-to-python-2-4"]], "\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db": [[445, "interactive-input-editing-and-history-substitution"]], "Tab \u9375\u81ea\u52d5\u5b8c\u6210 (Tab Completion) \u548c\u6b77\u53f2\u8a18\u9304\u7de8\u8f2f (History Editing)": [[445, "tab-completion-and-history-editing"]], "\u4e92\u52d5\u5f0f\u76f4\u8b6f\u5668\u7684\u66ff\u4ee3\u65b9\u6848": [[445, "alternatives-to-the-interactive-interpreter"]], "Python \u6559\u5b78": [[443, "the-python-tutorial"]], "\u6a21\u7d44 (Module)": [[448, "modules"]], "\u6df1\u5165\u4e86\u89e3\u6a21\u7d44": [[448, "more-on-modules"]], "\u628a\u6a21\u7d44\u7576\u4f5c\u8173\u672c\u57f7\u884c": [[448, "executing-modules-as-scripts"]], "\u6a21\u7d44\u7684\u641c\u5c0b\u8def\u5f91": [[448, "the-module-search-path"]], "\u300c\u7de8\u8b6f\u300dPython \u6a94\u6848": [[448, "compiled-python-files"]], "\u6a19\u6e96\u6a21\u7d44": [[448, "standard-modules"]], "dir() \u51fd\u5f0f": [[448, "the-dir-function"]], "\u5957\u4ef6 (Package)": [[448, "packages"]], "\u5f9e\u5957\u4ef6\u4e2d import *": [[448, "importing-from-a-package"]], "\u5957\u4ef6\u5167\u5f15\u7528": [[448, "intra-package-references"]], "\u591a\u76ee\u9304\u4e2d\u7684\u5957\u4ef6": [[448, "packages-in-multiple-directories"]], "Python 3.12 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[472, "what-s-new-in-python-3-12"]], "\u767c\u5e03\u91cd\u9ede\u6458\u8981": [[472, "summary-release-highlights"], [471, "summary-release-highlights"]], "\u65b0\u589e\u7279\u6027": [[472, "new-features"], [472, "id4"], [471, "new-features"], [471, "whatsnew311-c-api-new-features"]], "PEP 695: Type Parameter Syntax": [[472, "pep-695-type-parameter-syntax"]], "PEP 701: Syntactic formalization of f-strings": [[472, "pep-701-syntactic-formalization-of-f-strings"]], "PEP 684: A Per-Interpreter GIL": [[472, "pep-684-a-per-interpreter-gil"]], "PEP 669: Low impact monitoring for CPython": [[472, "pep-669-low-impact-monitoring-for-cpython"]], "PEP 688: Making the buffer protocol accessible in Python": [[472, "pep-688-making-the-buffer-protocol-accessible-in-python"]], "PEP 709: Comprehension inlining": [[472, "pep-709-comprehension-inlining"]], "Improved Error Messages": [[472, "improved-error-messages"]], "New Features Related to Type Hints": [[472, "new-features-related-to-type-hints"]], "PEP 692: Using TypedDict for more precise **kwargs typing": [[472, "pep-692-using-typeddict-for-more-precise-kwargs-typing"]], "PEP 698: Override Decorator for Static Typing": [[472, "pep-698-override-decorator-for-static-typing"]], "fractions": [[472, "fractions"], [471, "fractions"]], "CPython \u4f4d\u5143\u7d44\u78bc\u8b8a\u66f4": [[472, "cpython-bytecode-changes"]], "Python 3.13 \u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[472, "pending-removal-in-python-3-13"]], "Python 3.14 \u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[472, "pending-removal-in-python-3-14"], [472, "id7"]], "Python 3.15 \u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[472, "pending-removal-in-python-3-15"], [472, "id8"]], "\u672a\u4f86\u7248\u672c\u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[472, "pending-removal-in-future-versions"], [472, "id9"]], "asynchat \u548c asyncore": [[472, "asynchat-and-asyncore"]], "imp": [[472, "imp"]], "webbrowser": [[472, "webbrowser"], [474, "webbrowser"]], "xml.etree.ElementTree": [[472, "xml-etree-elementtree"], [474, "xml-etree-elementtree"]], "\u5176\u4ed6": [[472, "others"]], "Porting to Python 3.12": [[472, "porting-to-python-3-12"], [472, "id5"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd": [[450, "brief-tour-of-the-standard-library-part-ii"]], "\u8f38\u51fa\u683c\u5f0f\u5316 (Output Formatting)": [[450, "output-formatting"]], "\u6a21\u677f\u5316 (Templating)": [[450, "templating"]], "\u4e8c\u9032\u5236\u8cc7\u6599\u8a18\u9304\u7de8\u6392 (Binary Data Record Layouts)": [[450, "working-with-binary-data-record-layouts"]], "\u591a\u57f7\u884c\u7dd2 (Multi-threading)": [[450, "multi-threading"]], "\u65e5\u8a8c\u8a18\u9304 (Logging)": [[450, "logging"]], "\u5f31\u5f15\u7528 (Weak References)": [[450, "weak-references"]], "\u4f7f\u7528\u65bc List \u7684\u5de5\u5177": [[450, "tools-for-working-with-lists"]], "\u5341\u9032\u5236 (Decimal) \u6d6e\u9ede\u6578\u904b\u7b97": [[450, "decimal-floating-point-arithmetic"]], "\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236": [[442, "floating-point-arithmetic-issues-and-limitations"]], "\u8868\u793a\u6cd5\u8aa4\u5dee (Representation Error)": [[442, "representation-error"]], "\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f": [[452, "what-now"]], "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[462, "what-s-new-in-python-2-2"]], "PEPs 252 and 253: Type and Class Changes": [[462, "peps-252-and-253-type-and-class-changes"]], "Old and New Classes": [[462, "old-and-new-classes"]], "Descriptors": [[462, "descriptors"]], "Multiple Inheritance: The Diamond Rule": [[462, "multiple-inheritance-the-diamond-rule"]], "Attribute Access": [[462, "attribute-access"]], "\u76f8\u95dc\u9023\u7d50": [[462, "related-links"]], "PEP 234\uff1a\u758a\u4ee3\u5668": [[462, "pep-234-iterators"]], "PEP 255: Simple Generators": [[462, "pep-255-simple-generators"], [463, "pep-255-simple-generators"]], "PEP 238: Changing the Division Operator": [[462, "pep-238-changing-the-division-operator"]], "Unicode \u8b8a\u66f4": [[462, "unicode-changes"]], "\u76f4\u8b6f\u5668\u7684\u8b8a\u66f4\u8207\u4fee\u6b63": [[462, "interpreter-changes-and-fixes"]], "\u5176\u4ed6\u6539\u52d5\u8207\u4fee\u6b63": [[462, "other-changes-and-fixes"]], "\u7de8\u8f2f\u5668\u8207 IDE": [[455, "editors-and-ides"]], "\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python": [[458, "using-python-on-unix-platforms"]], "\u7372\u5f97\u4e26\u5b89\u88dd Python \u7684\u6700\u65b0\u7248\u672c": [[458, "getting-and-installing-the-latest-version-of-python"]], "\u5728 Linux \u4e0a": [[458, "on-linux"]], "\u5728 FreeBSD \u548c OpenBSD \u4e0a": [[458, "on-freebsd-and-openbsd"]], "\u5efa\u7f6e Python": [[458, "building-python"]], "\u8207 Python \u76f8\u95dc\u7684\u8def\u5f91\u548c\u6a94\u6848": [[458, "python-related-paths-and-files"]], "\u96dc\u9805": [[458, "miscellaneous"], [471, "misc"]], "\u5ba2\u88fd\u5316 OpenSSL": [[458, "custom-openssl"]], "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[463, "what-s-new-in-python-2-3"]], "PEP 218: A Standard Set Datatype": [[463, "pep-218-a-standard-set-datatype"]], "PEP 263: Source Code Encodings": [[463, "pep-263-source-code-encodings"]], "PEP 273: Importing Modules from ZIP Archives": [[463, "pep-273-importing-modules-from-zip-archives"]], "PEP 277: Unicode file name support for Windows NT": [[463, "pep-277-unicode-file-name-support-for-windows-nt"]], "PEP 278: Universal Newline Support": [[463, "pep-278-universal-newline-support"]], "PEP 279: enumerate()": [[463, "pep-279-enumerate"]], "PEP 282: The logging Package": [[463, "pep-282-the-logging-package"]], "PEP 285: A Boolean Type": [[463, "pep-285-a-boolean-type"]], "PEP 293: Codec Error Handling Callbacks": [[463, "pep-293-codec-error-handling-callbacks"]], "PEP 301: Package Index and Metadata for Distutils": [[463, "pep-301-package-index-and-metadata-for-distutils"]], "PEP 302: New Import Hooks": [[463, "pep-302-new-import-hooks"]], "PEP 305: Comma-separated Files": [[463, "pep-305-comma-separated-files"]], "PEP 307: Pickle Enhancements": [[463, "pep-307-pickle-enhancements"]], "Extended Slices": [[463, "extended-slices"]], "String Changes": [[463, "string-changes"]], "Date/Time Type": [[463, "date-time-type"]], "The optparse Module": [[463, "the-optparse-module"]], "Pymalloc: A Specialized Object Allocator": [[463, "pymalloc-a-specialized-object-allocator"]], "Porting to Python 2.3": [[463, "porting-to-python-2-3"]], "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528": [[456, "python-setup-and-usage"]], "\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6": [[451, "virtual-environments-and-packages"]], "\u7528 pip \u7ba1\u7406\u5957\u4ef6": [[451, "managing-packages-with-pip"]], "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[469, "what-s-new-in-python-3-1"]], "PEP 372: Ordered Dictionaries": [[469, "pep-372-ordered-dictionaries"]], "PEP 378: Format Specifier for Thousands Separator": [[469, "pep-378-format-specifier-for-thousands-separator"], [467, "pep-378-format-specifier-for-thousands-separator"]], "Porting to Python 3.1": [[469, "porting-to-python-3-1"]], "\u547d\u4ee4\u5217\u8207\u74b0\u5883": [[453, "command-line-and-environment"]], "\u547d\u4ee4\u5217": [[453, "command-line"]], "\u4ecb\u9762\u9078\u9805": [[453, "interface-options"]], "Generic options": [[453, "generic-options"]], "Miscellaneous options": [[453, "miscellaneous-options"]], "\u4f60\u4e0d\u8a72\u4f7f\u7528\u7684\u9078\u9805": [[453, "options-you-shouldn-t-use"]], "\u74b0\u5883\u8b8a\u6578": [[453, "environment-variables"]], "\u9664\u932f\u6a21\u5f0f\u8b8a\u6578": [[453, "debug-mode-variables"]], "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[467, "what-s-new-in-python-2-7"]], "The Future for Python 2.x": [[467, "the-future-for-python-2-x"]], "Changes to the Handling of Deprecation Warnings": [[467, "changes-to-the-handling-of-deprecation-warnings"]], "Python 3.1 Features": [[467, "python-3-1-features"]], "PEP 372: Adding an Ordered Dictionary to collections": [[467, "pep-372-adding-an-ordered-dictionary-to-collections"]], "PEP 389: The argparse Module for Parsing Command Lines": [[467, "pep-389-the-argparse-module-for-parsing-command-lines"]], "PEP 391: Dictionary-Based Configuration For Logging": [[467, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3106: Dictionary Views": [[467, "pep-3106-dictionary-views"]], "PEP 3137: The memoryview Object": [[467, "pep-3137-the-memoryview-object"]], "New module: importlib": [[467, "new-module-importlib"]], "New module: sysconfig": [[467, "new-module-sysconfig"]], "ttk: Themed Widgets for Tk": [[467, "ttk-themed-widgets-for-tk"]], "Updated module: unittest": [[467, "updated-module-unittest"]], "Updated module: ElementTree 1.3": [[467, "updated-module-elementtree-1-3"]], "Port-Specific Changes: FreeBSD": [[467, "port-specific-changes-freebsd"]], "Porting to Python 2.7": [[467, "porting-to-python-2-7"]], "New Features Added to Python 2.7 Maintenance Releases": [[467, "new-features-added-to-python-2-7-maintenance-releases"]], "Two new environment variables for debug mode": [[467, "two-new-environment-variables-for-debug-mode"]], "PEP 434: IDLE Enhancement Exception for All Branches": [[467, "pep-434-idle-enhancement-exception-for-all-branches"]], "PEP 466: Network Security Enhancements for Python 2.7": [[467, "pep-466-network-security-enhancements-for-python-2-7"]], "PEP 477: Backport ensurepip (PEP 453) to Python 2.7": [[467, "pep-477-backport-ensurepip-pep-453-to-python-2-7"]], "PEP 493: HTTPS verification migration tools for Python 2.7": [[467, "pep-493-https-verification-migration-tools-for-python-2-7"]], "\u914d\u7f6e Python": [[454, "configure-python"]], "Build Requirements": [[454, "build-requirements"]], "\u7522\u751f\u7684\u6a94\u6848": [[454, "generated-files"]], "\u8a2d\u5b9a\u8173\u672c": [[454, "configure-script"]], "\u8a2d\u5b9a\u9078\u9805": [[454, "configure-options"]], "\u4e00\u822c\u9078\u9805": [[454, "general-options"]], "WebAssembly \u9078\u9805": [[454, "webassembly-options"]], "\u5b89\u88dd\u9078\u9805": [[454, "install-options"]], "Performance options": [[454, "performance-options"]], "Python Debug Build": [[454, "python-debug-build"]], "Debug options": [[454, "debug-options"]], "Linker options": [[454, "linker-options"]], "\u51fd\u5f0f\u5eab\u9078\u9805": [[454, "libraries-options"]], "Security Options": [[454, "security-options"]], "macOS \u9078\u9805": [[454, "macos-options"]], "Cross Compiling Options": [[454, "cross-compiling-options"]], "Python Build System": [[454, "python-build-system"]], "Main files of the build system": [[454, "main-files-of-the-build-system"]], "\u4e3b\u8981\u5efa\u7f6e\u6b65\u9a5f": [[454, "main-build-steps"]], "\u4e3b\u8981 Makefile \u76ee\u6a19": [[454, "main-makefile-targets"]], "C \u64f4\u5145\u6a21\u7d44": [[454, "c-extensions"]], "Compiler and linker flags": [[454, "compiler-and-linker-flags"]], "Preprocessor flags": [[454, "preprocessor-flags"]], "Linker flags": [[454, "linker-flags"]], "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[468, "what-s-new-in-python-3-0"]], "Common Stumbling Blocks": [[468, "common-stumbling-blocks"]], "Print Is A Function": [[468, "print-is-a-function"]], "Views And Iterators Instead Of Lists": [[468, "views-and-iterators-instead-of-lists"]], "Ordering Comparisons": [[468, "ordering-comparisons"]], "\u6574\u6578": [[468, "integers"]], "Text Vs. Data Instead Of Unicode Vs. 8-bit": [[468, "text-vs-data-instead-of-unicode-vs-8-bit"]], "\u8a9e\u6cd5\u8b8a\u66f4\u6982\u8981": [[468, "overview-of-syntax-changes"]], "New Syntax": [[468, "new-syntax"]], "\u8a9e\u6cd5\u8b8a\u66f4": [[468, "changed-syntax"]], "\u5df2\u88ab\u79fb\u9664\u7684\u8a9e\u6cd5": [[468, "removed-syntax"]], "Changes Already Present In Python 2.6": [[468, "changes-already-present-in-python-2-6"]], "\u51fd\u5f0f\u5eab\u8b8a\u66f4": [[468, "library-changes"]], "PEP 3101: A New Approach To String Formatting": [[468, "pep-3101-a-new-approach-to-string-formatting"]], "Changes To Exceptions": [[468, "changes-to-exceptions"]], "Miscellaneous Other Changes": [[468, "miscellaneous-other-changes"]], "Operators And Special Methods": [[468, "operators-and-special-methods"]], "Builtins": [[468, "builtins"]], "Porting To Python 3.0": [[468, "porting-to-python-3-0"]], "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[474, "what-s-new-in-python-3-3"]], "PEP 405\uff1a\u865b\u64ec\u74b0\u5883": [[474, "pep-405-virtual-environments"]], "PEP 420: Implicit Namespace Packages": [[474, "pep-420-implicit-namespace-packages"]], "PEP 3118: New memoryview implementation and buffer protocol documentation": [[474, "pep-3118-new-memoryview-implementation-and-buffer-protocol-documentation"]], "\u529f\u80fd": [[474, "features"], [474, "id1"]], "API \u8b8a\u66f4": [[474, "api-changes"], [474, "id2"]], "PEP 393: Flexible String Representation": [[474, "pep-393-flexible-string-representation"]], "\u529f\u80fd\u6027": [[474, "functionality"]], "\u6027\u80fd\u548c\u8cc7\u6e90\u4f7f\u7528\u60c5\u6cc1": [[474, "performance-and-resource-usage"]], "PEP 397\uff1a\u9069\u7528\u65bc Windows \u7684 Python \u555f\u52d5\u5668": [[474, "pep-397-python-launcher-for-windows"]], "PEP 3151: Reworking the OS and IO exception hierarchy": [[474, "pep-3151-reworking-the-os-and-io-exception-hierarchy"]], "PEP 380: Syntax for Delegating to a Subgenerator": [[474, "pep-380-syntax-for-delegating-to-a-subgenerator"]], "PEP 409: Suppressing exception context": [[474, "pep-409-suppressing-exception-context"]], "PEP 414: Explicit Unicode literals": [[474, "pep-414-explicit-unicode-literals"]], "PEP 3155: Qualified name for classes and functions": [[474, "pep-3155-qualified-name-for-classes-and-functions"]], "PEP 412: Key-Sharing Dictionary": [[474, "pep-412-key-sharing-dictionary"]], "PEP 362\uff1a\u51fd\u5f0f\u7c3d\u540d\u7269\u4ef6": [[474, "pep-362-function-signature-object"]], "PEP 421\uff1a\u65b0\u589e sys.implementation": [[474, "pep-421-adding-sys-implementation"]], "SimpleNamespace": [[474, "simplenamespace"]], "\u4f7f\u7528 importlib \u4f5c\u70ba import \u7684\u5be6\u4f5c": [[474, "using-importlib-as-the-implementation-of-import"]], "\u65b0 API": [[474, "new-apis"]], "\u660e\u986f\u7684\u8b8a\u66f4": [[474, "visible-changes"]], "A Finer-Grained Import Lock": [[474, "a-finer-grained-import-lock"]], "\u5167\u5efa\u51fd\u5f0f\u548c\u578b\u5225": [[474, "builtin-functions-and-types"]], "Policy Framework": [[474, "policy-framework"]], "Provisional Policy with New Header API": [[474, "provisional-policy-with-new-header-api"]], "\u5176\u4ed6 API \u8b8a\u66f4": [[474, "other-api-changes"]], "sched": [[474, "sched"]], "\u5efa\u7f6e\u548c C API \u66f4\u6539": [[474, "build-and-c-api-changes"]], "\u4e0d\u652f\u63f4\u7684\u4f5c\u696d\u7cfb\u7d71": [[474, "unsupported-operating-systems"]], "\u5df2\u68c4\u7528\u7684 Python \u6a21\u7d44\u3001\u51fd\u5f0f\u548c\u65b9\u6cd5": [[474, "deprecated-python-modules-functions-and-methods"]], "C API \u4e2d\u5df2\u68c4\u7528\u7684\u51fd\u5f0f\u548c\u578b\u5225": [[474, "deprecated-functions-and-types-of-the-c-api"]], "\u5df2\u68c4\u7528\u7684\u529f\u80fd": [[474, "deprecated-features"]], "\u79fb\u690d\u5230 Python 3.3": [[474, "porting-to-python-3-3"]], "\u79fb\u690d Python \u7a0b\u5f0f\u78bc": [[474, "porting-python-code"]], "Porting C code": [[474, "porting-c-code"]], "Building C extensions": [[474, "building-c-extensions"]], "\u547d\u4ee4\u5217\u958b\u95dc\u66f4\u6539": [[474, "command-line-switch-changes"]], "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[460, "what-s-new-in-python-2-0"]], "What About Python 1.6?": [[460, "what-about-python-1-6"]], "New Development Process": [[460, "new-development-process"]], "\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff08List Comprehension\uff09": [[460, "list-comprehensions"]], "Augmented Assignment": [[460, "augmented-assignment"]], "String Methods": [[460, "string-methods"], [342, "string-methods"]], "Garbage Collection of Cycles": [[460, "garbage-collection-of-cycles"]], "Other Core Changes": [[460, "other-core-changes"]], "Minor Language Changes": [[460, "minor-language-changes"]], "Changes to Built-in Functions": [[460, "changes-to-built-in-functions"]], "Porting to 2.0": [[460, "porting-to-2-0"]], "Extending/Embedding Changes": [[460, "extending-embedding-changes"]], "Distutils: Making Modules Easy to Install": [[460, "distutils-making-modules-easy-to-install"]], "XML \u6a21\u7d44": [[460, "xml-modules"]], "SAX2 \u652f\u63f4": [[460, "sax2-support"]], "DOM \u652f\u63f4": [[460, "dom-support"]], "Relationship to PyXML": [[460, "relationship-to-pyxml"]], "\u6a21\u7d44\u8b8a\u66f4": [[460, "module-changes"]], "IDLE Improvements": [[460, "idle-improvements"]], "Deleted and Deprecated Modules": [[460, "deleted-and-deprecated-modules"]], "Python 3.11 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[471, "what-s-new-in-python-3-11"]], "PEP 657\uff1a\u56de\u6eaf (traceback) \u4e2d\u66f4\u7d30\u7dfb\u7684\u932f\u8aa4\u4f4d\u7f6e": [[471, "pep-657-fine-grained-error-locations-in-tracebacks"]], "PEP 654\uff1a\u4f8b\u5916\u7fa4\u7d44\u8207 except*": [[471, "pep-654-exception-groups-and-except"]], "PEP 678\uff1a\u904b\u7528\u4f8b\u5916\u8a3b\u89e3\u4f7f\u5176\u66f4\u52a0\u8a73\u76e1": [[471, "pep-678-exceptions-can-be-enriched-with-notes"]], "Windows py.exe \u555f\u52d5\u7a0b\u5f0f (launcher) \u7684\u6539\u9032": [[471, "windows-py-exe-launcher-improvements"]], "\u578b\u5225\u63d0\u793a\u76f8\u95dc\u7684\u65b0\u7279\u6027": [[471, "new-features-related-to-type-hints"]], "PEP 646\uff1a\u53ef\u8b8a\u53c3\u6578\u6cdb\u578b (variadic generics)": [[471, "pep-646-variadic-generics"]], "PEP 655\uff1a\u6a19\u8a18\u7368\u7acb TypedDict \u9805\u76ee\u70ba\u5fc5\u8981\u6216\u4e0d\u5fc5\u8981": [[471, "pep-655-marking-individual-typeddict-items-as-required-or-not-required"]], "PEP 673\uff1aSelf \u578b\u5225": [[471, "pep-673-self-type"]], "PEP 675\uff1a\u4efb\u610f\u7684\u6587\u672c\u5b57\u4e32\u578b\u5225 (Arbitrary literal string type)": [[471, "pep-675-arbitrary-literal-string-type"]], "PEP 681\uff1a\u8cc7\u6599\u985e\u5225\u8f49\u63db (Data class transforms)": [[471, "pep-681-data-class-transforms"]], "PEP 563 \u53ef\u80fd\u4e0d\u662f\u672a\u4f86": [[471, "pep-563-may-not-be-the-future"]], "\u5176\u4ed6 CPython \u5be6\u4f5c\u66f4\u52d5": [[471, "other-cpython-implementation-changes"]], "IDLE \u8207 idlelib": [[471, "whatsnew311-idle"]], "\u66f4\u5feb\u7684 CPython": [[471, "faster-cpython"]], "\u66f4\u5feb\u7684\u555f\u52d5": [[471, "faster-startup"]], "\u51cd\u7d50\u5f15\u5165 (Frozen imports) / \u975c\u614b\u7a0b\u5f0f\u78bc\u7269\u4ef6 (Static code objects)": [[471, "frozen-imports-static-code-objects"]], "\u66f4\u5feb\u7684\u904b\u884c\u7a0b\u5f0f": [[471, "faster-runtime"]], "\u6240\u9700\u8cc7\u6e90\u66f4\u5c11 (cheaper) \u4e14\u60f0\u6027\u7684 (lazy)) Python \u5e40 (frame)": [[471, "cheaper-lazy-python-frames"]], "\u884c\u5167 Python \u51fd\u5f0f\u547c\u53eb": [[471, "inlined-python-function-calls"]], "PEP 659\uff1a\u7279\u5316\u7684\u9069\u61c9\u6027\u76f4\u8b6f\u5668": [[471, "pep-659-specializing-adaptive-interpreter"]], "FAQ": [[471, "faq"]], "\u6211\u8a72\u5982\u4f55\u5728\u7a0b\u5f0f\u78bc\u4e2d\u7372\u53d6\u9019\u4e9b\u52a0\u901f\uff1f": [[471, "how-should-i-write-my-code-to-utilize-these-speedups"]], "Python 3.11 \u6703\u4e0d\u6703\u4f7f\u7528\u66f4\u591a\u8a18\u61b6\u9ad4\uff1f": [[471, "will-cpython-3-11-use-more-memory"]], "\u6211\u5728\u6211\u7684\u7a0b\u5f0f\u7576\u4e2d\u6c92\u611f\u89ba\u5230\u4efb\u4f55\u52a0\u901f\uff0c\u70ba\u4ec0\u9ebc\uff1f": [[471, "i-don-t-see-any-speedups-in-my-workload-why"]], "\u6709\u7528\u5230 JIT \u7de8\u8b6f\u5668\u55ce\uff1f": [[471, "is-there-a-jit-compiler"]], "\u95dc\u65bc": [[471, "about"]], "CPython \u4f4d\u5143\u7d44\u78bc (bytecode) \u8b8a\u66f4": [[471, "cpython-bytecode-changes"]], "\u65b0\u589e opcode": [[471, "new-opcodes"]], "\u88ab\u53d6\u4ee3\u7684\u64cd\u4f5c\u78bc (opcode)": [[471, "replaced-opcodes"]], "\u6709\u66f4\u52d5/\u88ab\u79fb\u9664\u7684 opcode": [[471, "changed-removed-opcodes"]], "\u8a9e\u8a00/\u5167\u5efa": [[471, "language-builtins"]], "\u6a19\u6e96\u51fd\u5f0f\u5eab": [[471, "standard-library"]], "Python 3.12 \u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[471, "pending-removal-in-python-3-12"], [471, "whatsnew311-c-api-pending-removal"]], "\u79fb\u690d\u81f3 Python 3.11": [[471, "porting-to-python-3-11"], [471, "whatsnew311-c-api-porting"]], "Notable changes in 3.11.4": [[471, "notable-changes-in-3-11-4"]], "Notable changes in 3.11.5": [[471, "notable-changes-in-3-11-5"]], "\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python": [[457, "using-python-on-a-mac"]], "Getting and Installing Python": [[457, "getting-and-installing-python"]], "\u5982\u4f55\u57f7\u884c Python \u8173\u672c": [[457, "how-to-run-a-python-script"]], "\u900f\u904e GUI \u57f7\u884c\u8173\u672c": [[457, "running-scripts-with-a-gui"]], "\u8a2d\u5b9a": [[457, "configuration"]], "\u6574\u5408\u5316\u958b\u767c\u5de5\u5177 (IDE)": [[457, "the-ide"]], "\u5b89\u88dd\u984d\u5916\u7684 Python \u5957\u4ef6": [[457, "installing-additional-python-packages"]], "GUI Programming": [[457, "gui-programming"]], "Distributing Python Applications": [[457, "distributing-python-applications"]], "\u5176\u4ed6\u8cc7\u6e90": [[457, "other-resources"]], "tkinter.tix --- Tk \u64f4\u5145\u5c0f\u5de5\u5177": [[373, "module-tkinter.tix"]], "Using Tix": [[373, "using-tix"]], "Tix Widgets": [[373, "tix-widgets"]], "Basic Widgets": [[373, "basic-widgets"]], "File Selectors": [[373, "file-selectors"]], "Hierarchical ListBox": [[373, "hierarchical-listbox"]], "Tabular ListBox": [[373, "tabular-listbox"]], "Manager Widgets": [[373, "manager-widgets"]], "Image Types": [[373, "image-types"]], "Miscellaneous Widgets": [[373, "miscellaneous-widgets"]], "Form Geometry Manager": [[373, "form-geometry-manager"]], "Tix \u6307\u4ee4": [[373, "tix-commands"]], "textwrap --- Text wrapping and filling": [[362, "module-textwrap"]], "sys --- \u7cfb\u7d71\u7279\u5b9a\u7684\u53c3\u6578\u8207\u51fd\u5f0f": [[350, "module-sys"]], "Attributes of the float_info named tuple": [[350, "id2"]], "time --- Time access and conversions": [[364, "module-time"]], "Clock ID Constants": [[364, "clock-id-constants"]], "Timezone Constants": [[364, "timezone-constants"]], "sysconfig --- Provide access to Python's configuration information": [[353, "module-sysconfig"]], "Configuration variables": [[353, "configuration-variables"]], "Installation paths": [[353, "installation-paths"]], "User scheme": [[353, "user-scheme"]], "posix_user": [[353, "posix-user"]], "nt_user": [[353, "nt-user"]], "osx_framework_user": [[353, "osx-framework-user"]], "Home scheme": [[353, "home-scheme"]], "posix_home": [[353, "posix-home"]], "Prefix scheme": [[353, "prefix-scheme"]], "posix_prefix": [[353, "posix-prefix"]], "nt": [[353, "nt"]], "\u5b89\u88dd\u8def\u5f91\u51fd\u5f0f": [[353, "installation-path-functions"]], "\u5176\u4ed6\u51fd\u5f0f": [[353, "other-functions"], [335, "other-functions"], [324, "other-functions"]], "\u5c07 sysconfig \u4f5c\u70ba\u8173\u672c\u4f7f\u7528": [[353, "using-sysconfig-as-a-script"]], "tkinter.scrolledtext --- Scrolled Text Widget": [[372, "module-tkinter.scrolledtext"]], "string --- \u5e38\u898b\u7684\u5b57\u4e32\u64cd\u4f5c": [[343, "module-string"]], "\u5b57\u4e32\u5e38\u6578": [[343, "string-constants"]], "\u81ea\u8a02\u5b57\u4e32\u683c\u5f0f": [[343, "custom-string-formatting"]], "\u683c\u5f0f\u5316\u6587\u5b57\u8a9e\u6cd5": [[343, "format-string-syntax"]], "\u683c\u5f0f\u898f\u683c (Format Specification) \u8ff7\u4f60\u8a9e\u8a00": [[343, "format-specification-mini-language"]], "\u683c\u5f0f\u7bc4\u4f8b": [[343, "format-examples"]], "\u6a21\u677f\u5b57\u4e32": [[343, "template-strings"]], "\u8f14\u52a9\u51fd\u5f0f": [[343, "helper-functions"]], "stringprep --- Internet String Preparation": [[344, "module-stringprep"]], "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9": [[361, "text-processing-services"]], "tabnanny --- \u5075\u6e2c\u4e0d\u826f\u7e2e\u6392": [[355, "module-tabnanny"]], "\u4ee5 Tk \u6253\u9020\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (Graphical User Interfaces)": [[366, "graphical-user-interfaces-with-tk"]], "tkinter --- Python interface to Tcl/Tk": [[367, "module-tkinter"]], "Architecture": [[367, "architecture"]], "Tkinter Modules": [[367, "tkinter-modules"]], "Tkinter Life Preserver": [[367, "tkinter-life-preserver"]], "A Hello World Program": [[367, "a-hello-world-program"]], "Important Tk Concepts": [[367, "important-tk-concepts"]], "Understanding How Tkinter Wraps Tcl/Tk": [[367, "understanding-how-tkinter-wraps-tcl-tk"]], "How do I...? What option does...?": [[367, "how-do-i-what-option-does"]], "Navigating the Tcl/Tk Reference Manual": [[367, "navigating-the-tcl-tk-reference-manual"]], "Threading model": [[367, "threading-model"]], "Handy Reference": [[367, "handy-reference"]], "Setting Options": [[367, "setting-options"]], "The Packer": [[367, "the-packer"]], "Packer Options": [[367, "packer-options"]], "Coupling Widget Variables": [[367, "coupling-widget-variables"]], "The Window Manager": [[367, "the-window-manager"]], "Tk Option Data Types": [[367, "tk-option-data-types"]], "Bindings and Events": [[367, "bindings-and-events"]], "The index Parameter": [[367, "the-index-parameter"]], "Images": [[367, "images"]], "File Handlers": [[367, "file-handlers"]], "symtable --- \u5b58\u53d6\u7de8\u8b6f\u5668\u7684\u7b26\u865f\u8868": [[349, "module-symtable"]], "\u7522\u751f\u7b26\u865f\u8868": [[349, "generating-symbol-tables"]], "\u6aa2\u67e5\u7b26\u865f\u8868": [[349, "examining-symbol-tables"]], "timeit --- \u6e2c\u91cf\u5c0f\u91cf\u7a0b\u5f0f\u7247\u6bb5\u7684\u57f7\u884c\u6642\u9593": [[365, "module-timeit"]], "\u57fa\u790e\u7bc4\u4f8b": [[365, "basic-examples"], [234, "basic-examples"]], "Python \u4ecb\u9762": [[365, "python-interface"]], "\u547d\u4ee4\u5217\u4ecb\u9762": [[365, "command-line-interface"], [338, "command-line-interface"], [332, "command-line-interface"], [253, "command-line-interface"], [260, "module-json.tool"], [208, "command-line-interface"], [232, "command-line-interface"]], "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44": [[348, "superseded-modules"]], "sys.monitoring --- Execution event monitoring": [[351, "module-sys.monitoring"]], "Tool identifiers": [[351, "tool-identifiers"]], "Registering and using tools": [[351, "registering-and-using-tools"]], "Events": [[351, "events"]], "Local events": [[351, "local-events"]], "Ancillary events": [[351, "ancillary-events"]], "Other events": [[351, "other-events"]], "The STOP_ITERATION event": [[351, "the-stop-iteration-event"]], "Turning events on and off": [[351, "turning-events-on-and-off"]], "Setting events globally": [[351, "setting-events-globally"]], "Per code object events": [[351, "per-code-object-events"]], "Disabling events": [[351, "disabling-events"]], "Registering callback functions": [[351, "registering-callback-functions"]], "Callback function arguments": [[351, "callback-function-arguments"]], "stat --- Interpreting stat() results": [[340, "module-stat"]], "tkinter.dnd --- Drag and drop support": [[369, "module-tkinter.dnd"]], "tkinter.colorchooser --- \u984f\u8272\u9078\u64c7\u5c0d\u8a71\u6846": [[368, "module-tkinter.colorchooser"]], "The initialization of the sys.path module search path": [[352, "the-initialization-of-the-sys-path-module-search-path"]], "Virtual environments": [[352, "virtual-environments"]], "_pth files": [[352, "pth-files"]], "Embedded Python": [[352, "embedded-python"]], "tkinter.messagebox --- Tkinter message prompts": [[371, "module-tkinter.messagebox"]], "test --- Python \u7684\u56de\u6b78\u6e2c\u8a66 (regression tests) \u5957\u4ef6": [[360, "module-test"]], "\u64b0\u5beb test \u5957\u4ef6\u7684\u55ae\u5143\u6e2c\u8a66": [[360, "writing-unit-tests-for-the-test-package"]], "\u4f7f\u7528\u547d\u4ee4\u5217\u4ecb\u9762\u57f7\u884c\u6e2c\u8a66": [[360, "module-test.regrtest"]], "test.support --- Python \u6e2c\u8a66\u5957\u4ef6\u7684\u5de5\u5177": [[360, "module-test.support"]], "test.support.socket_helper --- \u7528\u65bc socket \u6e2c\u8a66\u7684\u5de5\u5177": [[360, "module-test.support.socket_helper"]], "test.support.script_helper --- \u7528\u65bc Python \u57f7\u884c\u6e2c\u8a66\u7684\u5de5\u5177": [[360, "module-test.support.script_helper"]], "test.support.bytecode_helper --- \u7528\u65bc\u6e2c\u8a66\u4f4d\u5143\u7d44\u78bc\u80fd\u6b63\u78ba\u7522\u751f\u7684\u652f\u63f4\u5de5\u5177": [[360, "module-test.support.bytecode_helper"]], "test.support.threading_helper --- Utilities for threading tests": [[360, "module-test.support.threading_helper"]], "test.support.os_helper --- \u7528\u65bc os \u6e2c\u8a66\u7684\u5de5\u5177": [[360, "module-test.support.os_helper"]], "test.support.import_helper --- \u7528\u65bc import \u6e2c\u8a66\u7684\u5de5\u5177": [[360, "module-test.support.import_helper"]], "test.support.warnings_helper --- \u7528\u65bc warnings \u6e2c\u8a66\u7684\u5de5\u5177": [[360, "module-test.support.warnings_helper"]], "sunau --- \u8b80\u5beb Sun AU \u6a94\u6848": [[347, "module-sunau"]], "AU_read \u7269\u4ef6": [[347, "au-read-objects"]], "AU_write \u7269\u4ef6": [[347, "au-write-objects"]], "telnetlib --- Telnet \u5ba2\u6236\u7aef": [[357, "module-telnetlib"]], "Telnet Objects": [[357, "telnet-objects"]], "Telnet \u7bc4\u4f8b": [[357, "telnet-example"]], "tarfile --- Read and write tar archive files": [[356, "module-tarfile"]], "TarFile \u7269\u4ef6": [[356, "tarfile-objects"]], "TarInfo \u7269\u4ef6": [[356, "tarinfo-objects"]], "Extraction filters": [[356, "extraction-filters"]], "Default named filters": [[356, "default-named-filters"]], "Filter errors": [[356, "filter-errors"]], "Hints for further verification": [[356, "hints-for-further-verification"]], "Supporting older Python versions": [[356, "supporting-older-python-versions"]], "Stateful extraction filter example": [[356, "stateful-extraction-filter-example"]], "Supported tar formats": [[356, "supported-tar-formats"]], "Unicode issues": [[356, "unicode-issues"]], "struct --- Interpret bytes as packed binary data": [[345, "module-struct"]], "\u51fd\u5f0f\u8207\u4f8b\u5916": [[345, "functions-and-exceptions"]], "Format Strings": [[345, "format-strings"]], "Byte Order, Size, and Alignment": [[345, "byte-order-size-and-alignment"]], "Format Characters": [[345, "format-characters"]], "Applications": [[345, "applications"]], "Native Formats": [[345, "native-formats"]], "Standard Formats": [[345, "standard-formats"]], "\u5167\u5efa\u578b\u5225": [[342, "built-in-types"]], "\u771f\u503c\u6aa2\u6e2c": [[342, "truth-value-testing"]], "Boolean\uff08\u5e03\u6797\uff09\u904b\u7b97 --- and, or, not": [[342, "boolean-operations-and-or-not"]], "\u6bd4\u8f03\u904b\u7b97": [[342, "comparisons"]], "Numeric Types --- int, float, complex": [[342, "numeric-types-int-float-complex"]], "Bitwise Operations on Integer Types": [[342, "bitwise-operations-on-integer-types"]], "Additional Methods on Integer Types": [[342, "additional-methods-on-integer-types"]], "Additional Methods on Float": [[342, "additional-methods-on-float"]], "Hashing of numeric types": [[342, "hashing-of-numeric-types"]], "Boolean Type - bool": [[342, "boolean-type-bool"]], "Iterator Types": [[342, "iterator-types"]], "Generator Types": [[342, "generator-types"]], "Sequence Types --- list, tuple, range": [[342, "sequence-types-list-tuple-range"]], "Common Sequence Operations": [[342, "common-sequence-operations"]], "Immutable Sequence Types": [[342, "immutable-sequence-types"]], "Mutable Sequence Types": [[342, "mutable-sequence-types"]], "Tuples": [[342, "tuples"]], "Ranges": [[342, "ranges"]], "Text Sequence Type --- str": [[342, "text-sequence-type-str"]], "printf-style String Formatting": [[342, "printf-style-string-formatting"]], "Binary Sequence Types --- bytes, bytearray, memoryview": [[342, "binary-sequence-types-bytes-bytearray-memoryview"]], "Bytes Objects": [[342, "bytes-objects"]], "Bytearray Objects": [[342, "bytearray-objects"]], "Bytes and Bytearray Operations": [[342, "bytes-and-bytearray-operations"]], "printf-style Bytes Formatting": [[342, "printf-style-bytes-formatting"]], "Memory Views": [[342, "memory-views"]], "Set Types --- set, frozenset": [[342, "set-types-set-frozenset"]], "Mapping Types --- dict": [[342, "mapping-types-dict"]], "\u5b57\u5178\u8996\u5716\u7269\u4ef6": [[342, "dictionary-view-objects"]], "Context Manager Types": [[342, "context-manager-types"]], "Type Annotation Types --- Generic Alias, Union": [[342, "type-annotation-types-generic-alias-union"]], "Generic Alias Type": [[342, "generic-alias-type"]], "Standard Generic Classes": [[342, "standard-generic-classes"]], "Special Attributes of GenericAlias objects": [[342, "special-attributes-of-genericalias-objects"]], "Union Type": [[342, "union-type"]], "Other Built-in Types": [[342, "other-built-in-types"]], "Classes and Class Instances": [[342, "classes-and-class-instances"]], "Methods": [[342, "methods"], [286, "methods"], [294, "methods"]], "Code Objects": [[342, "code-objects"]], "The Null Object": [[342, "the-null-object"]], "The Ellipsis Object": [[342, "the-ellipsis-object"]], "The NotImplemented Object": [[342, "the-notimplemented-object"]], "Internal Objects": [[342, "internal-objects"]], "Special Attributes": [[342, "special-attributes"]], "Integer string conversion length limitation": [[342, "integer-string-conversion-length-limitation"]], "Affected APIs": [[342, "affected-apis"]], "Configuring the limit": [[342, "configuring-the-limit"]], "Recommended configuration": [[342, "recommended-configuration"]], "subprocess --- \u5b50\u884c\u7a0b\u7ba1\u7406": [[346, "module-subprocess"]], "Using the subprocess Module": [[346, "using-the-subprocess-module"]], "Frequently Used Arguments": [[346, "frequently-used-arguments"]], "Popen Constructor": [[346, "popen-constructor"]], "Security Considerations": [[346, "security-considerations"], [243, "security-considerations"], [141, "security-considerations"]], "Popen Objects": [[346, "popen-objects"]], "Windows Popen Helpers": [[346, "windows-popen-helpers"]], "Windows Constants": [[346, "windows-constants"]], "Older high-level API": [[346, "older-high-level-api"]], "Replacing Older Functions with the subprocess Module": [[346, "replacing-older-functions-with-the-subprocess-module"]], "Replacing /bin/sh shell command substitution": [[346, "replacing-bin-sh-shell-command-substitution"]], "Replacing shell pipeline": [[346, "replacing-shell-pipeline"]], "Replacing os.system()": [[346, "replacing-os-system"]], "Replacing the os.spawn family": [[346, "replacing-the-os-spawn-family"]], "Replacing os.popen(), os.popen2(), os.popen3()": [[346, "replacing-os-popen-os-popen2-os-popen3"]], "Replacing functions from the popen2 module": [[346, "replacing-functions-from-the-popen2-module"]], "Legacy Shell Invocation Functions": [[346, "legacy-shell-invocation-functions"]], "Converting an argument sequence to a string on Windows": [[346, "converting-an-argument-sequence-to-a-string-on-windows"]], "Disabling use of vfork() or posix_spawn()": [[346, "disabling-use-of-vfork-or-posix-spawn"]], "threading --- Thread-based parallelism": [[363, "module-threading"]], "Thread-Local Data": [[363, "thread-local-data"]], "Thread Objects": [[363, "thread-objects"]], "Lock Objects": [[363, "lock-objects"]], "RLock \u7269\u4ef6": [[363, "rlock-objects"]], "Condition Objects": [[363, "condition-objects"]], "Semaphore Objects": [[363, "semaphore-objects"]], "Semaphore \u7bc4\u4f8b": [[363, "semaphore-example"]], "Event Objects": [[363, "event-objects"]], "Timer Objects": [[363, "timer-objects"]], "Barrier Objects": [[363, "barrier-objects"]], "Using locks, conditions, and semaphores in the with statement": [[363, "using-locks-conditions-and-semaphores-in-the-with-statement"]], "syslog --- Unix syslog library routines": [[354, "module-syslog"]], "tempfile --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304": [[358, "module-tempfile"]], "\u5df2\u68c4\u7528\u7684\u51fd\u5f0f\u548c\u8b8a\u6578": [[358, "deprecated-functions-and-variables"]], "tkinter.font --- Tkinter \u5b57\u578b\u5305\u88dd\u5668": [[370, "module-tkinter.font"]], "statistics --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f": [[341, "module-statistics"]], "\u5e73\u5747\u503c\u8207\u4e2d\u592e\u4f4d\u7f6e\u91cf\u6578": [[341, "averages-and-measures-of-central-location"]], "\u96e2\u5ea6 (spread) \u7684\u6e2c\u91cf": [[341, "measures-of-spread"]], "\u5169\u500b\u8f38\u5165\u4e4b\u9593\u7684\u95dc\u4fc2\u7d71\u8a08": [[341, "statistics-for-relations-between-two-inputs"]], "\u51fd\u5f0f\u7d30\u7bc0": [[341, "function-details"]], "NormalDist \u7269\u4ef6": [[341, "normaldist-objects"]], "NormalDist \u7bc4\u4f8b\u8207\u9326\u56ca\u5999\u8a08": [[341, "normaldist-examples-and-recipes"]], "\u7d93\u5178\u6a5f\u7387\u554f\u984c": [[341, "classic-probability-problems"]], "\u7528\u65bc\u6a21\u64ec\u7684\u8499\u5730\u5361\u7f85 (Monte Carlo) \u8f38\u5165": [[341, "monte-carlo-inputs-for-simulations"]], "\u8fd1\u4f3c\u4e8c\u9805\u5206\u5e03": [[341, "approximating-binomial-distributions"]], "\u55ae\u7d14\u8c9d\u6c0f\u5206\u985e\u5668 (Naive bayesian classifier)": [[341, "naive-bayesian-classifier"]], "\u6838\u5bc6\u5ea6\u4f30\u8a08 (Kernel density estimation)": [[341, "kernel-density-estimation"]], "termios --- POSIX style tty control": [[359, "module-termios"]], "pty --- Pseudo-terminal utilities": [[307, "module-pty"]], "shutil \u2014 \u9ad8\u968e\u6a94\u6848\u64cd\u4f5c": [[330, "module-shutil"]], "Directory and files operations": [[330, "directory-and-files-operations"]], "Platform-dependent efficient copy operations": [[330, "platform-dependent-efficient-copy-operations"]], "copytree example": [[330, "copytree-example"]], "rmtree \u7bc4\u4f8b": [[330, "rmtree-example"]], "Archiving operations": [[330, "archiving-operations"]], "Archiving example": [[330, "archiving-example"]], "Archiving example with base_dir": [[330, "archiving-example-with-base-dir"]], "Querying the size of the output terminal": [[330, "querying-the-size-of-the-output-terminal"]], "random --- \u751f\u6210\u507d\u96a8\u6a5f\u6578": [[316, "module-random"]], "\u7c3f\u8a18\u51fd\u5f0f (bookkeeping functions)": [[316, "bookkeeping-functions"]], "\u56de\u50b3\u4f4d\u5143\u7d44\u7684\u51fd\u5f0f": [[316, "functions-for-bytes"]], "\u56de\u50b3\u6574\u6578\u7684\u51fd\u5f0f": [[316, "functions-for-integers"]], "\u56de\u50b3\u5e8f\u5217\u7684\u51fd\u5f0f": [[316, "functions-for-sequences"]], "\u96e2\u6563\u5206\u5e03": [[316, "discrete-distributions"]], "\u5be6\u6578\u5206\u5e03": [[316, "real-valued-distributions"]], "\u66ff\u4ee3\u7522\u751f\u5668": [[316, "alternative-generator"]], "\u95dc\u65bc Reproducibility\uff08\u5fa9\u73fe\u6027\uff09\u7684\u6ce8\u610f\u4e8b\u9805": [[316, "notes-on-reproducibility"]], "\u4f7f\u7528\u65b9\u6848": [[316, "recipes"]], "signal --- Set handlers for asynchronous events": [[331, "module-signal"]], "General rules": [[331, "general-rules"]], "Execution of Python signal handlers": [[331, "execution-of-python-signal-handlers"]], "Signals and threads": [[331, "signals-and-threads"]], "Note on SIGPIPE": [[331, "note-on-sigpipe"]], "Note on Signal Handlers and Exceptions": [[331, "note-on-signal-handlers-and-exceptions"]], "selectors --- High-level I/O multiplexing": [[327, "module-selectors"]], "\u5b89\u5168\u6027\u6ce8\u610f\u4e8b\u9805": [[325, "security-considerations"]], "socket --- Low-level networking interface": [[335, "module-socket"]], "Socket \u7cfb\u5217\u5bb6\u65cf": [[335, "socket-families"]], "\u5efa\u7acb sockets": [[335, "creating-sockets"]], "Socket \u7269\u4ef6": [[335, "socket-objects"]], "Notes on socket timeouts": [[335, "notes-on-socket-timeouts"]], "Timeouts and the connect method": [[335, "timeouts-and-the-connect-method"]], "Timeouts and the accept method": [[335, "timeouts-and-the-accept-method"]], "queue --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09": [[314, "module-queue"]], "\u4f47\u5217\u7269\u4ef6": [[314, "queue-objects"]], "SimpleQueue \u7269\u4ef6": [[314, "simplequeue-objects"]], "sqlite3 --- SQLite \u8cc7\u6599\u5eab\u7684 DB-API 2.0 \u4ecb\u9762": [[338, "module-sqlite3"]], "Tutorial": [[338, "tutorial"], [290, "tutorial"]], "Module functions": [[338, "module-functions"]], "Module constants": [[338, "module-constants"]], "Connection \u7269\u4ef6": [[338, "connection-objects"]], "Cursor \u7269\u4ef6": [[338, "cursor-objects"]], "Row \u7269\u4ef6": [[338, "row-objects"]], "Blob \u7269\u4ef6": [[338, "blob-objects"]], "PrepareProtocol \u7269\u4ef6": [[338, "prepareprotocol-objects"]], "SQLite and Python types": [[338, "sqlite-and-python-types"]], "Default adapters and converters (deprecated)": [[338, "default-adapters-and-converters-deprecated"]], "How-to guides": [[338, "how-to-guides"]], "How to use placeholders to bind values in SQL queries": [[338, "how-to-use-placeholders-to-bind-values-in-sql-queries"]], "How to adapt custom Python types to SQLite values": [[338, "how-to-adapt-custom-python-types-to-sqlite-values"]], "How to write adaptable objects": [[338, "how-to-write-adaptable-objects"]], "How to register adapter callables": [[338, "how-to-register-adapter-callables"]], "How to convert SQLite values to custom Python types": [[338, "how-to-convert-sqlite-values-to-custom-python-types"]], "Adapter and converter recipes": [[338, "adapter-and-converter-recipes"]], "How to use connection shortcut methods": [[338, "how-to-use-connection-shortcut-methods"]], "How to use the connection context manager": [[338, "how-to-use-the-connection-context-manager"]], "How to work with SQLite URIs": [[338, "how-to-work-with-sqlite-uris"]], "How to create and use row factories": [[338, "how-to-create-and-use-row-factories"]], "How to handle non-UTF-8 text encodings": [[338, "how-to-handle-non-utf-8-text-encodings"]], "\u89e3\u91cb": [[338, "explanation"]], "Transaction control": [[338, "transaction-control"]], "Transaction control via the autocommit attribute": [[338, "transaction-control-via-the-autocommit-attribute"]], "Transaction control via the isolation_level attribute": [[338, "transaction-control-via-the-isolation-level-attribute"]], "re --- \u6b63\u898f\u8868\u793a\u5f0f (regular expression) \u64cd\u4f5c": [[317, "module-re"]], "\u6b63\u898f\u8868\u793a\u5f0f\u8a9e\u6cd5": [[317, "regular-expression-syntax"]], "Flags": [[317, "flags"]], "Functions": [[317, "functions"]], "Regular Expression Objects": [[317, "regular-expression-objects"]], "Match Objects": [[317, "match-objects"]], "Regular Expression Examples": [[317, "regular-expression-examples"]], "Checking for a Pair": [[317, "checking-for-a-pair"]], "Simulating scanf()": [[317, "simulating-scanf"]], "search() vs. match()": [[317, "search-vs-match"]], "Making a Phonebook": [[317, "making-a-phonebook"]], "Text Munging": [[317, "text-munging"]], "Finding all Adverbs": [[317, "finding-all-adverbs"]], "Finding all Adverbs and their Positions": [[317, "finding-all-adverbs-and-their-positions"]], "Raw String Notation": [[317, "raw-string-notation"]], "Writing a Tokenizer": [[317, "writing-a-tokenizer"]], "sched --- Event scheduler": [[323, "module-sched"]], "Scheduler Objects": [[323, "scheduler-objects"]], "ssl --- socket \u7269\u4ef6\u7684 TLS/SSL \u5305\u88dd\u5668": [[339, "module-ssl"]], "\u51fd\u5f0f\u3001\u5e38\u6578\u8207\u4f8b\u5916": [[339, "functions-constants-and-exceptions"]], "Socket \u5efa\u7acb": [[339, "socket-creation"]], "\u8a9e\u5883\u5efa\u7acb": [[339, "context-creation"]], "\u96a8\u6a5f\u7522\u751f": [[339, "random-generation"]], "\u8a8d\u8b49\u8655\u7406": [[339, "certificate-handling"]], "SSL Sockets": [[339, "ssl-sockets"]], "SSL Contexts": [[339, "ssl-contexts"]], "Certificates": [[339, "certificates"]], "Certificate chains": [[339, "certificate-chains"]], "CA certificates": [[339, "ca-certificates"]], "Combined key and certificate": [[339, "combined-key-and-certificate"]], "Self-signed certificates": [[339, "self-signed-certificates"]], "Testing for SSL support": [[339, "testing-for-ssl-support"]], "Client-side operation": [[339, "client-side-operation"]], "Server-side operation": [[339, "server-side-operation"]], "Notes on non-blocking sockets": [[339, "notes-on-non-blocking-sockets"]], "SSL session": [[339, "ssl-session"]], "Security considerations": [[339, "security-considerations"], [266, "security-considerations"]], "Best defaults": [[339, "best-defaults"]], "\u624b\u52d5\u8a2d\u5b9a": [[339, "manual-settings"]], "\u9a57\u8b49\u6191\u8b49": [[339, "verifying-certificates"]], "\u5354\u5b9a\u7248\u672c": [[339, "protocol-versions"]], "Cipher selection": [[339, "cipher-selection"]], "Multi-processing": [[339, "multi-processing"]], "TLS 1.3": [[339, "tls-1-3"]], "smtplib --- SMTP protocol client": [[333, "module-smtplib"]], "SMTP \u7269\u4ef6": [[333, "smtp-objects"]], "SMTP \u7bc4\u4f8b": [[333, "smtp-example"]], "quopri --- \u7de8\u78bc\u548c\u89e3\u78bc MIME \u53ef\u5217\u5370\u5b57\u5143\u8cc7\u6599": [[315, "module-quopri"]], "select --- Waiting for I/O completion": [[326, "module-select"]], "/dev/poll Polling Objects": [[326, "dev-poll-polling-objects"]], "Edge and Level Trigger Polling (epoll) Objects": [[326, "edge-and-level-trigger-polling-epoll-objects"]], "Polling Objects": [[326, "polling-objects"]], "Kqueue Objects": [[326, "kqueue-objects"]], "Kevent Objects": [[326, "kevent-objects"]], "pyclbr --- Python module browser support": [[310, "module-pyclbr"]], "Class Objects": [[310, "class-objects"]], "py_compile \u2014 \u7de8\u8b6f Python \u4f86\u6e90\u6a94\u6848": [[309, "module-py_compile"]], "spwd --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab": [[337, "module-spwd"]], "pwd --- \u5bc6\u78bc\u8cc7\u6599\u5eab": [[308, "module-pwd"]], "secrets --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578": [[324, "module-secrets"]], "\u4e82\u6578": [[324, "random-numbers"]], "\u7522\u751f\u6b0a\u6756\uff08token\uff09": [[324, "generating-tokens"]], "\u6b0a\u6756\u61c9\u7576\u4f7f\u7528\u591a\u5c11\u500b\u4f4d\u5143\u7d44\uff1f": [[324, "how-many-bytes-should-tokens-use"]], "\u61c9\u7528\u6280\u5de7\u548c\u5178\u7bc4\u5be6\u52d9\uff08best practices\uff09": [[324, "recipes-and-best-practices"]], "resource --- Resource usage information": [[320, "module-resource"]], "Resource Limits": [[320, "resource-limits"]], "Resource Usage": [[320, "resource-usage"]], "sndhdr --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225": [[334, "module-sndhdr"]], "pydoc --- Documentation generator and online help system": [[311, "module-pydoc"]], "site --- Site-specific configuration hook": [[332, "module-site"]], "sitecustomize": [[332, "module-sitecustomize"]], "usercustomize": [[332, "module-usercustomize"]], "Readline configuration": [[332, "readline-configuration"]], "runpy --- Locating and executing Python modules": [[322, "module-runpy"]], "socketserver --- A framework for network servers": [[336, "module-socketserver"]], "Server Creation Notes": [[336, "server-creation-notes"]], "Request Handler Objects": [[336, "request-handler-objects"]], "socketserver.TCPServer \u7bc4\u4f8b": [[336, "socketserver-tcpserver-example"]], "socketserver.UDPServer \u7bc4\u4f8b": [[336, "socketserver-udpserver-example"]], "Asynchronous Mixins": [[336, "asynchronous-mixins"]], "The Python Profilers": [[306, "the-python-profilers"]], "Introduction to the profilers": [[306, "introduction-to-the-profilers"]], "Instant User's Manual": [[306, "instant-user-s-manual"]], "profile and cProfile Module Reference": [[306, "module-cProfile"]], "The Stats Class": [[306, "the-stats-class"]], "What Is Deterministic Profiling?": [[306, "what-is-deterministic-profiling"]], "\u9650\u5236": [[306, "limitations"]], "\u6821\u6b63": [[306, "calibration"]], "Using a custom timer": [[306, "using-a-custom-timer"]], "rlcompleter --- Completion function for GNU readline": [[321, "module-rlcompleter"]], "shlex --- Simple lexical analysis": [[329, "module-shlex"]], "shlex \u7269\u4ef6": [[329, "shlex-objects"]], "Parsing Rules": [[329, "parsing-rules"]], "Improved Compatibility with Shells": [[329, "improved-compatibility-with-shells"]], "shelve --- Python object persistence": [[328, "module-shelve"]], "Restrictions": [[328, "restrictions"]], "readline --- GNU readline interface": [[318, "module-readline"]], "Init file": [[318, "init-file"]], "Line buffer": [[318, "line-buffer"]], "History file": [[318, "history-file"]], "History list": [[318, "history-list"]], "Startup hooks": [[318, "startup-hooks"]], "Completion": [[318, "completion"]], "reprlib --- Alternate repr() implementation": [[319, "module-reprlib"]], "Repr \u7269\u4ef6": [[319, "repr-objects"]], "Subclassing Repr Objects": [[319, "subclassing-repr-objects"]], "Python Runtime Services": [[313, "python-runtime-services"]], "xml.parsers.expat --- Fast XML parsing using Expat": [[312, "module-xml.parsers.expat"]], "ExpatError \u4f8b\u5916": [[312, "expaterror-exceptions"]], "Content Model Descriptions": [[312, "module-xml.parsers.expat.model"]], "Expat error constants": [[312, "module-xml.parsers.expat.errors"]], "multiprocessing --- Process-based parallelism": [[281, "module-multiprocessing"]], "The Process class": [[281, "the-process-class"]], "Contexts and start methods": [[281, "contexts-and-start-methods"]], "Exchanging objects between processes": [[281, "exchanging-objects-between-processes"]], "Synchronization between processes": [[281, "synchronization-between-processes"]], "Sharing state between processes": [[281, "sharing-state-between-processes"]], "Using a pool of workers": [[281, "using-a-pool-of-workers"]], "Process \u8207\u4f8b\u5916": [[281, "process-and-exceptions"]], "Pipes and Queues": [[281, "pipes-and-queues"]], "Miscellaneous": [[281, "miscellaneous"], [268, "miscellaneous"]], "Connection Objects": [[281, "connection-objects"]], "Synchronization primitives": [[281, "synchronization-primitives"]], "Shared ctypes Objects": [[281, "shared-ctypes-objects"]], "The multiprocessing.sharedctypes module": [[281, "module-multiprocessing.sharedctypes"]], "Managers": [[281, "managers"]], "Customized managers": [[281, "customized-managers"]], "Using a remote manager": [[281, "using-a-remote-manager"]], "Proxy Objects": [[281, "proxy-objects"]], "Cleanup": [[281, "cleanup"], [290, "cleanup"]], "Process Pools": [[281, "module-multiprocessing.pool"]], "Listeners and Clients": [[281, "module-multiprocessing.connection"]], "Address Formats": [[281, "address-formats"]], "Authentication keys": [[281, "authentication-keys"]], "Logging": [[281, "logging"]], "The multiprocessing.dummy module": [[281, "module-multiprocessing.dummy"]], "Programming guidelines": [[281, "programming-guidelines"]], "All start methods": [[281, "all-start-methods"]], "The spawn and forkserver start methods": [[281, "the-spawn-and-forkserver-start-methods"]], "multiprocessing.shared_memory --- \u5c0d\u65bc\u5171\u4eab\u8a18\u61b6\u9ad4\u7684\u8de8\u884c\u7a0b\u76f4\u63a5\u5b58\u53d6": [[282, "module-multiprocessing.shared_memory"]], "numbers --- \u6578\u503c\u7684\u62bd\u8c61\u57fa\u5e95\u985e\u5225": [[287, "module-numbers"]], "\u6578\u503c\u7684\u968e\u5c64": [[287, "the-numeric-tower"]], "\u7d66\u578b\u5225\u5be6\u4f5c\u8005\u7684\u8a3b\u8a18": [[287, "notes-for-type-implementors"]], "\u52a0\u5165\u66f4\u591a\u6578\u503c ABC": [[287, "adding-more-numeric-abcs"]], "\u5be6\u4f5c\u7b97\u8853\u64cd\u4f5c": [[287, "implementing-the-arithmetic-operations"]], "msvcrt --- Useful routines from the MS VC++ runtime": [[280, "module-msvcrt"]], "File Operations": [[280, "file-operations"]], "Console I/O": [[280, "console-i-o"]], "Other Functions": [[280, "other-functions"]], "posix --- \u6700\u5e38\u898b\u7684 POSIX \u7cfb\u7d71\u547c\u53eb": [[304, "module-posix"]], "\u5c0d\u5927\u6a94\u6848 (Large File) \u7684\u652f\u63f4": [[304, "large-file-support"]], "\u503c\u5f97\u6ce8\u610f\u7684\u6a21\u7d44\u5167\u5bb9": [[304, "notable-module-contents"]], "poplib --- POP3 protocol client": [[303, "module-poplib"]], "POP3 \u7269\u4ef6": [[303, "pop3-objects"]], "POP3 \u7bc4\u4f8b": [[303, "pop3-example"]], "\u591a\u5a92\u9ad4\u670d\u52d9": [[275, "multimedia-services"]], "modulefinder --- Find modules used by a script": [[277, "module-modulefinder"]], "Example usage of ModuleFinder": [[277, "example-usage-of-modulefinder"]], "os --- \u5404\u7a2e\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762": [[291, "module-os"]], "File Names, Command Line Arguments, and Environment Variables": [[291, "file-names-command-line-arguments-and-environment-variables"]], "Python UTF-8 Mode": [[291, "python-utf-8-mode"]], "Process Parameters": [[291, "process-parameters"]], "File Object Creation": [[291, "file-object-creation"]], "File Descriptor Operations": [[291, "file-descriptor-operations"]], "Querying the size of a terminal": [[291, "querying-the-size-of-a-terminal"]], "Inheritance of File Descriptors": [[291, "inheritance-of-file-descriptors"]], "Files and Directories": [[291, "files-and-directories"]], "Linux extended attributes": [[291, "linux-extended-attributes"]], "\u884c\u7a0b\u7ba1\u7406": [[291, "process-management"]], "Interface to the scheduler": [[291, "interface-to-the-scheduler"]], "Miscellaneous System Information": [[291, "miscellaneous-system-information"]], "Random numbers": [[291, "random-numbers"]], "os.path --- \u5e38\u898b\u7684\u8def\u5f91\u540d\u64cd\u4f5c": [[292, "module-os.path"]], "mimetypes --- Map filenames to MIME types": [[274, "module-mimetypes"]], "MimeTypes \u7269\u4ef6": [[274, "mimetypes-objects"]], "pipes --- shell pipelines \u4ecb\u9762": [[299, "module-pipes"]], "Template Objects": [[299, "template-objects"]], "plistlib --- Generate and parse Apple .plist files": [[302, "module-plistlib"]], "mmap --- Memory-mapped file support": [[276, "module-mmap"]], "MADV_* Constants": [[276, "madv-constants"]], "MAP_* \u5e38\u6578": [[276, "map-constants"]], "netrc --- netrc \u6a94\u6848\u8655\u7406": [[284, "module-netrc"]], "netrc \u7269\u4ef6": [[284, "netrc-objects"]], "nntplib --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef": [[286, "module-nntplib"]], "NNTP \u7269\u4ef6": [[286, "nntp-objects"]], "\u5c6c\u6027": [[286, "attributes"]], "Utility functions": [[286, "utility-functions"], [174, "utility-functions"]], "math --- \u6578\u5b78\u51fd\u5f0f": [[273, "module-math"]], "\u6578\u8ad6\u8207\u8868\u73fe\u51fd\u5f0f": [[273, "number-theoretic-and-representation-functions"]], "Power and logarithmic functions": [[273, "power-and-logarithmic-functions"], [152, "power-and-logarithmic-functions"]], "Trigonometric functions": [[273, "trigonometric-functions"], [152, "trigonometric-functions"]], "Angular conversion": [[273, "angular-conversion"]], "Hyperbolic functions": [[273, "hyperbolic-functions"], [152, "hyperbolic-functions"]], "Special functions": [[273, "special-functions"]], "msilib --- \u8b80\u5beb Microsoft Installer \u6a94\u6848": [[279, "module-msilib"]], "Database Objects": [[279, "database-objects"]], "View Objects": [[279, "view-objects"]], "Summary Information Objects": [[279, "summary-information-objects"]], "Record Objects": [[279, "record-objects"]], "Errors": [[279, "errors"]], "CAB \u7269\u4ef6": [[279, "cab-objects"]], "Directory Objects": [[279, "directory-objects"]], "Features": [[279, "features"]], "GUI classes": [[279, "gui-classes"]], "Precomputed tables": [[279, "precomputed-tables"]], "pickletools --- pickle \u958b\u767c\u8005\u7684\u5de5\u5177": [[298, "module-pickletools"]], "\u547d\u4ee4\u5217\u9078\u9805": [[298, "command-line-options"], [260, "command-line-options"], [232, "command-line-options"]], "\u7a0b\u5f0f\u5316\u4ecb\u9762": [[298, "programmatic-interface"]], "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44": [[288, "numeric-and-mathematical-modules"]], "Data Persistence": [[296, "data-persistence"]], "pickle --- Python \u7269\u4ef6\u5e8f\u5217\u5316": [[297, "module-pickle"]], "Relationship to other Python modules": [[297, "relationship-to-other-python-modules"]], "Comparison with marshal": [[297, "comparison-with-marshal"]], "Comparison with json": [[297, "comparison-with-json"]], "Data stream format": [[297, "data-stream-format"]], "\u6a21\u7d44\u4ecb\u9762": [[297, "module-interface"]], "What can be pickled and unpickled?": [[297, "what-can-be-pickled-and-unpickled"]], "Pickling Class Instances": [[297, "pickling-class-instances"]], "Persistence of External Objects": [[297, "persistence-of-external-objects"]], "Dispatch Tables": [[297, "dispatch-tables"]], "Handling Stateful Objects": [[297, "handling-stateful-objects"]], "Custom Reduction for Types, Functions, and Other Objects": [[297, "custom-reduction-for-types-functions-and-other-objects"]], "Out-of-band Buffers": [[297, "out-of-band-buffers"]], "Provider API": [[297, "provider-api"]], "Consumer API": [[297, "consumer-api"]], "Restricting Globals": [[297, "restricting-globals"]], "pathlib --- \u7269\u4ef6\u5c0e\u5411\u6a94\u6848\u7cfb\u7d71\u8def\u5f91": [[294, "module-pathlib"]], "\u7d14\u8def\u5f91": [[294, "pure-paths"]], "\u901a\u7528\u5c6c\u6027": [[294, "general-properties"]], "\u904b\u7b97\u5b50": [[294, "operators"]], "\u5c0d\u500b\u5225\u7d44\u6210\u7684\u5b58\u53d6": [[294, "accessing-individual-parts"]], "\u65b9\u6cd5\u8207\u5c6c\u6027": [[294, "methods-and-properties"]], "Concrete paths": [[294, "concrete-paths"]], "Correspondence to tools in the os module": [[294, "correspondence-to-tools-in-the-os-module"]], "pdb --- The Python Debugger": [[295, "module-pdb"]], "Debugger Commands": [[295, "debugger-commands"]], "marshal --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316": [[272, "module-marshal"]], "ossaudiodev --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6": [[293, "module-ossaudiodev"]], "Audio Device Objects": [[293, "audio-device-objects"]], "Mixer Device Objects": [[293, "mixer-device-objects"]], "platform ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599": [[301, "module-platform"]], "\u8de8\u5e73\u53f0": [[301, "cross-platform"]], "Java \u5e73\u53f0": [[301, "java-platform"]], "Windows \u5e73\u53f0": [[301, "windows-platform"]], "macOS \u5e73\u53f0": [[301, "macos-platform"]], "Unix \u5e73\u53f0": [[301, "unix-platforms"]], "Linux \u5e73\u53f0": [[301, "linux-platforms"]], "optparse --- Parser for command line options": [[290, "module-optparse"]], "Terminology": [[290, "terminology"]], "What are options for?": [[290, "what-are-options-for"]], "What are positional arguments for?": [[290, "what-are-positional-arguments-for"]], "Understanding option actions": [[290, "understanding-option-actions"]], "The store action": [[290, "the-store-action"]], "Handling boolean (flag) options": [[290, "handling-boolean-flag-options"]], "Other actions": [[290, "other-actions"]], "Default values": [[290, "default-values"]], "Generating help": [[290, "generating-help"]], "Grouping Options": [[290, "grouping-options"]], "Printing a version string": [[290, "printing-a-version-string"]], "How optparse handles errors": [[290, "how-optparse-handles-errors"]], "Putting it all together": [[290, "putting-it-all-together"]], "Reference Guide": [[290, "reference-guide"]], "Creating the parser": [[290, "creating-the-parser"]], "Populating the parser": [[290, "populating-the-parser"]], "Defining options": [[290, "defining-options"]], "Option attributes": [[290, "option-attributes"]], "Standard option actions": [[290, "standard-option-actions"]], "Standard option types": [[290, "standard-option-types"]], "Querying and manipulating your option parser": [[290, "querying-and-manipulating-your-option-parser"]], "Conflicts between options": [[290, "conflicts-between-options"]], "Other methods": [[290, "other-methods"]], "Option Callbacks": [[290, "option-callbacks"]], "Defining a callback option": [[290, "defining-a-callback-option"]], "How callbacks are called": [[290, "how-callbacks-are-called"]], "Raising errors in a callback": [[290, "raising-errors-in-a-callback"]], "Callback example 1: trivial callback": [[290, "callback-example-1-trivial-callback"]], "Callback example 2: check option order": [[290, "callback-example-2-check-option-order"]], "Callback example 3: check option order (generalized)": [[290, "callback-example-3-check-option-order-generalized"]], "Callback example 4: check arbitrary condition": [[290, "callback-example-4-check-arbitrary-condition"]], "Callback example 5: fixed arguments": [[290, "callback-example-5-fixed-arguments"]], "Callback example 6: variable arguments": [[290, "callback-example-6-variable-arguments"]], "Extending optparse": [[290, "extending-optparse"]], "Adding new types": [[290, "adding-new-types"]], "Adding new actions": [[290, "adding-new-actions"]], "pprint --- Data pretty printer": [[305, "module-pprint"]], "PrettyPrinter \u7269\u4ef6": [[305, "prettyprinter-objects"]], "pkgutil --- Package extension utility": [[300, "module-pkgutil"]], "\u7db2\u969b\u7db2\u8def\u8cc7\u6599\u8655\u7406": [[283, "internet-data-handling"]], "nis --- Sun NIS (Yellow Pages) \u4ecb\u9762": [[285, "module-nis"]], "operator --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f": [[289, "module-operator"]], "\u904b\u7b97\u5b50\u8207\u51fd\u5f0f\u9593\u7684\u5c0d\u6620": [[289, "mapping-operators-to-functions"]], "\u539f\u5730 (in-place) \u904b\u7b97\u5b50": [[289, "in-place-operators"]], "logging.config --- Logging configuration": [[266, "module-logging.config"]], "Important": [[266, null], [267, null], [265, "index-0"], [209, null]], "Configuration functions": [[266, "configuration-functions"]], "Configuration dictionary schema": [[266, "configuration-dictionary-schema"]], "Dictionary Schema Details": [[266, "dictionary-schema-details"]], "Incremental Configuration": [[266, "incremental-configuration"]], "Object connections": [[266, "object-connections"]], "User-defined objects": [[266, "user-defined-objects"]], "Handler configuration order": [[266, "handler-configuration-order"]], "Access to external objects": [[266, "access-to-external-objects"]], "Access to internal objects": [[266, "access-to-internal-objects"]], "Import resolution and custom importers": [[266, "import-resolution-and-custom-importers"]], "Configuring QueueHandler and QueueListener": [[266, "configuring-queuehandler-and-queuelistener"]], "Configuration file format": [[266, "configuration-file-format"]], "mailcap --- Mailcap file handling": [[270, "module-mailcap"]], "imghdr --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e": [[247, "module-imghdr"]], "http --- HTTP \u6a21\u7d44": [[239, "module-http"]], "HTTP \u72c0\u614b\u78bc": [[239, "http-status-codes"]], "HTTP \u72c0\u614b\u5206\u985e": [[239, "http-status-category"]], "HTTP \u65b9\u6cd5": [[239, "http-methods"]], "locale \u2014 \u570b\u969b\u5316\u670d\u52d9": [[264, "module-locale"]], "Background, details, hints, tips and caveats": [[264, "background-details-hints-tips-and-caveats"]], "For extension writers and programs that embed Python": [[264, "for-extension-writers-and-programs-that-embed-python"]], "Access to message catalogs": [[264, "access-to-message-catalogs"]], "itertools --- \u5efa\u7acb\u7522\u751f\u9ad8\u6548\u7387\u8ff4\u5708\u4e4b\u758a\u4ee3\u5668\u7684\u51fd\u5f0f": [[259, "module-itertools"]], "Itertool functions": [[259, "itertool-functions"]], "Itertools Recipes": [[259, "itertools-recipes"]], "\u570b\u969b\u5316": [[244, "internationalization"]], "importlib.resources -- Package resource reading, opening and access": [[250, "module-importlib.resources"]], "\u5df2\u68c4\u7528\u51fd\u5f0f": [[250, "deprecated-functions"]], "File menu (Shell and Editor)": [[245, "file-menu-shell-and-editor"]], "Edit menu (Shell and Editor)": [[245, "edit-menu-shell-and-editor"]], "Format menu (Editor window only)": [[245, "format-menu-editor-window-only"]], "Run menu (Editor window only)": [[245, "run-menu-editor-window-only"]], "Shell menu (Shell window only)": [[245, "shell-menu-shell-window-only"]], "Debug menu (Shell window only)": [[245, "debug-menu-shell-window-only"]], "Options menu (Shell and Editor)": [[245, "options-menu-shell-and-editor"]], "Window menu (Shell and Editor)": [[245, "window-menu-shell-and-editor"]], "Help menu (Shell and Editor)": [[245, "help-menu-shell-and-editor"]], "Context menus": [[245, "context-menus"]], "Editing and Navigation": [[245, "editing-and-navigation"]], "Editor windows": [[245, "editor-windows"]], "Key bindings": [[245, "key-bindings"]], "Automatic indentation": [[245, "automatic-indentation"]], "Completions": [[245, "completions"]], "Calltips": [[245, "calltips"]], "Code Context": [[245, "code-context"]], "Shell window": [[245, "shell-window"]], "Text colors": [[245, "text-colors"]], "Startup and Code Execution": [[245, "startup-and-code-execution"]], "Startup failure": [[245, "startup-failure"]], "Running user code": [[245, "running-user-code"]], "User output in Shell": [[245, "user-output-in-shell"]], "Developing tkinter applications": [[245, "developing-tkinter-applications"]], "Running without a subprocess": [[245, "running-without-a-subprocess"]], "Help and Preferences": [[245, "help-and-preferences"]], "Help sources": [[245, "help-sources"]], "Setting preferences": [[245, "setting-preferences"]], "IDLE on macOS": [[245, "idle-on-macos"]], "Extensions": [[245, "extensions"]], "idlelib": [[245, "module-idlelib"]], "http.cookies --- HTTP state management": [[242, "module-http.cookies"]], "Cookie \u7269\u4ef6": [[242, "cookie-objects"], [241, "cookie-objects"]], "Morsel \u7269\u4ef6": [[242, "morsel-objects"]], "Structured Markup Processing Tools": [[271, "structured-markup-processing-tools"]], "lzma --- Compression using the LZMA algorithm": [[268, "module-lzma"]], "Reading and writing compressed files": [[268, "reading-and-writing-compressed-files"]], "Compressing and decompressing data in memory": [[268, "compressing-and-decompressing-data-in-memory"]], "Specifying custom filter chains": [[268, "specifying-custom-filter-chains"]], "Python Language Services": [[262, "python-language-services"]], "html.parser --- \u7c21\u55ae\u7684 HTML \u548c XHTML \u5256\u6790\u5668": [[238, "module-html.parser"]], "HTML \u5256\u6790\u5668\u61c9\u7528\u7a0b\u5f0f\u7bc4\u4f8b": [[238, "example-html-parser-application"]], "HTMLParser \u65b9\u6cd5": [[238, "htmlparser-methods"]], "logging.handlers --- Logging handlers": [[267, "module-logging.handlers"]], "StreamHandler": [[267, "streamhandler"]], "FileHandler": [[267, "filehandler"]], "NullHandler": [[267, "nullhandler"]], "WatchedFileHandler": [[267, "watchedfilehandler"]], "BaseRotatingHandler": [[267, "baserotatinghandler"]], "RotatingFileHandler": [[267, "rotatingfilehandler"]], "TimedRotatingFileHandler": [[267, "timedrotatingfilehandler"]], "SocketHandler": [[267, "sockethandler"]], "DatagramHandler": [[267, "datagramhandler"]], "SysLogHandler": [[267, "sysloghandler"]], "NTEventLogHandler": [[267, "nteventloghandler"]], "SMTPHandler": [[267, "smtphandler"]], "MemoryHandler": [[267, "memoryhandler"]], "HTTPHandler": [[267, "httphandler"]], "QueueHandler": [[267, "queuehandler"]], "QueueListener": [[267, "queuelistener"]], "mailbox --- \u4ee5\u5404\u7a2e\u683c\u5f0f\u64cd\u4f5c\u90f5\u4ef6\u4fe1\u7bb1": [[269, "module-mailbox"]], "Mailbox \u7269\u4ef6": [[269, "mailbox-objects"], [269, "maildir-objects"]], "mbox \u7269\u4ef6": [[269, "mbox-objects"]], "MH \u7269\u4ef6": [[269, "mh-objects"]], "Babyl \u7269\u4ef6": [[269, "babyl-objects"]], "MMDF \u7269\u4ef6": [[269, "mmdf-objects"]], "Message \u7269\u4ef6": [[269, "message-objects"]], "MaildirMessage \u7269\u4ef6": [[269, "maildirmessage-objects"]], "mboxMessage \u7269\u4ef6": [[269, "mboxmessage-objects"]], "MHMessage \u7269\u4ef6": [[269, "mhmessage-objects"]], "BabylMessage \u7269\u4ef6": [[269, "babylmessage-objects"]], "MMDFMessage \u7269\u4ef6": [[269, "mmdfmessage-objects"]], "ipaddress --- IPv4/IPv6 manipulation library": [[257, "module-ipaddress"]], "Convenience factory functions": [[257, "convenience-factory-functions"]], "IP Addresses": [[257, "ip-addresses"]], "Address objects": [[257, "address-objects"]], "Conversion to Strings and Integers": [[257, "conversion-to-strings-and-integers"]], "Comparison operators": [[257, "comparison-operators"]], "Arithmetic operators": [[257, "arithmetic-operators"]], "IP Network definitions": [[257, "ip-network-definitions"]], "Prefix, net mask and host mask": [[257, "prefix-net-mask-and-host-mask"]], "Network objects": [[257, "network-objects"]], "Logical operators": [[257, "logical-operators"], [257, "id3"]], "Networks as containers of addresses": [[257, "networks-as-containers-of-addresses"]], "Interface objects": [[257, "interface-objects"]], "Other Module Level Functions": [[257, "other-module-level-functions"]], "Custom Exceptions": [[257, "custom-exceptions"]], "\u53ef\u7528\u6027\u4e4b\u8a3b\u91cb": [[255, "notes-on-availability"]], "WebAssembly \u5e73\u53f0": [[255, "webassembly-platforms"]], "imaplib --- IMAP4 protocol client": [[246, "module-imaplib"]], "IMAP4 \u7269\u4ef6": [[246, "imap4-objects"]], "IMAP4 \u7bc4\u4f8b": [[246, "imap4-example"]], "inspect --- \u6aa2\u8996\u6d3b\u52d5\u7269\u4ef6": [[253, "inspect-inspect-live-objects"]], "Types and members": [[253, "types-and-members"]], "Retrieving source code": [[253, "retrieving-source-code"]], "Introspecting callables with the Signature object": [[253, "introspecting-callables-with-the-signature-object"]], "\u985e\u5225\u8207\u51fd\u5f0f": [[253, "classes-and-functions"]], "The interpreter stack": [[253, "the-interpreter-stack"]], "Fetching attributes statically": [[253, "fetching-attributes-statically"]], "Current State of Generators, Coroutines, and Asynchronous Generators": [[253, "current-state-of-generators-coroutines-and-asynchronous-generators"]], "Code Objects Bit Flags": [[253, "code-objects-bit-flags"]], "Buffer flags": [[253, "buffer-flags"]], "Networking and Interprocess Communication": [[258, "networking-and-interprocess-communication"]], "\u7db2\u8def\u5354\u5b9a (Internet protocols) \u53ca\u652f\u63f4": [[254, "internet-protocols-and-support"]], "linecache --- Random access to text lines": [[263, "module-linecache"]], "keyword --- \u6aa2\u9a57 Python \u95dc\u9375\u5b57": [[261, "module-keyword"]], "logging --- Python \u7684\u65e5\u8a8c\u8a18\u9304\u5de5\u5177": [[265, "module-logging"]], "Logger Objects": [[265, "logger-objects"]], "Handler Objects": [[265, "handler-objects"]], "Formatter Objects": [[265, "formatter-objects"]], "Filter Objects": [[265, "filter-objects"]], "LogRecord \u7269\u4ef6": [[265, "logrecord-objects"]], "LogRecord attributes": [[265, "logrecord-attributes"]], "LoggerAdapter \u7269\u4ef6": [[265, "loggeradapter-objects"]], "Thread Safety": [[265, "thread-safety"]], "Module-Level Attributes": [[265, "module-level-attributes"]], "Integration with the warnings module": [[265, "integration-with-the-warnings-module"]], "json --- JSON \u7de8\u78bc\u5668\u8207\u89e3\u78bc\u5668": [[260, "module-json"]], "Encoders and Decoders": [[260, "encoders-and-decoders"]], "Standard Compliance and Interoperability": [[260, "standard-compliance-and-interoperability"]], "Character Encodings": [[260, "character-encodings"]], "Infinite and NaN Number Values": [[260, "infinite-and-nan-number-values"]], "Repeated Names Within an Object": [[260, "repeated-names-within-an-object"]], "Top-level Non-Object, Non-Array Values": [[260, "top-level-non-object-non-array-values"]], "Implementation Limitations": [[260, "implementation-limitations"]], "http.cookiejar --- Cookie handling for HTTP clients": [[241, "module-http.cookiejar"]], "CookieJar \u8207 FileCookieJar \u7269\u4ef6": [[241, "cookiejar-and-filecookiejar-objects"]], "FileCookieJar subclasses and co-operation with web browsers": [[241, "filecookiejar-subclasses-and-co-operation-with-web-browsers"]], "CookiePolicy \u7269\u4ef6": [[241, "cookiepolicy-objects"]], "DefaultCookiePolicy \u7269\u4ef6": [[241, "defaultcookiepolicy-objects"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)": [[252, "the-python-standard-library"]], "importlib --- import \u7684\u5be6\u4f5c": [[248, "module-importlib"]], "importlib.abc -- Abstract base classes related to import": [[248, "module-importlib.abc"]], "importlib.machinery -- Importers and path hooks": [[248, "module-importlib.machinery"]], "importlib.util -- Utility code for importers": [[248, "module-importlib.util"]], "Importing programmatically": [[248, "importing-programmatically"]], "Checking if a module can be imported": [[248, "checking-if-a-module-can-be-imported"]], "Importing a source file directly": [[248, "importing-a-source-file-directly"]], "Implementing lazy imports": [[248, "implementing-lazy-imports"]], "Setting up an importer": [[248, "setting-up-an-importer"]], "Approximating importlib.import_module()": [[248, "approximating-importlib-import-module"]], "importlib.resources.abc -- Abstract base classes for resources": [[251, "module-importlib.resources.abc"]], "io \u2014 \u8655\u7406\u8cc7\u6599\u4e32\u6d41\u7684\u6838\u5fc3\u5de5\u5177": [[256, "module-io"]], "\u6587\u5b57 I/O": [[256, "text-i-o"], [256, "id1"], [256, "id3"]], "\u4e8c\u9032\u4f4d (Binary) I/O": [[256, "binary-i-o"], [256, "id2"]], "\u539f\u59cb (Raw) I/O": [[256, "raw-i-o"]], "\u6587\u5b57\u7de8\u78bc": [[256, "text-encoding"]], "\u9078\u64c7\u6027\u52a0\u5165\u7684\u7de8\u78bc\u8b66\u544a": [[256, "opt-in-encodingwarning"]], "\u9ad8\u968e\u6a21\u7d44\u4ecb\u9762": [[256, "high-level-module-interface"]], "\u985e\u5225\u968e\u5c64": [[256, "class-hierarchy"]], "I/O \u57fa\u790e\u985e\u5225": [[256, "i-o-base-classes"]], "Raw File I/O": [[256, "raw-file-i-o"]], "Buffered Streams": [[256, "buffered-streams"]], "Reentrancy": [[256, "reentrancy"]], "http.client --- HTTP protocol client": [[240, "module-http.client"]], "HTTPConnection \u7269\u4ef6": [[240, "httpconnection-objects"]], "HTTPResponse \u7269\u4ef6": [[240, "httpresponse-objects"]], "HTTPMessage \u7269\u4ef6": [[240, "httpmessage-objects"]], "importlib.metadata -- Accessing package metadata": [[249, "module-importlib.metadata"]], "Entry points": [[249, "entry-points"]], "Distribution metadata": [[249, "distribution-metadata"]], "Distribution versions": [[249, "distribution-versions"]], "Distribution files": [[249, "distribution-files"]], "Distribution requirements": [[249, "distribution-requirements"]], "Mapping import to distribution packages": [[249, "mapping-import-to-distribution-packages"]], "Distributions": [[249, "distributions"]], "Distribution Discovery": [[249, "distribution-discovery"]], "Extending the search algorithm": [[249, "extending-the-search-algorithm"]], "http.server \u2014 HTTP \u4f3a\u670d\u5668": [[243, "module-http.server"]], "faulthandler --- Dump the Python traceback": [[212, "module-faulthandler"]], "Dumping the traceback": [[212, "dumping-the-traceback"]], "Fault handler state": [[212, "fault-handler-state"]], "Dumping the tracebacks after a timeout": [[212, "dumping-the-tracebacks-after-a-timeout"]], "Dumping the traceback on a user signal": [[212, "dumping-the-traceback-on-a-user-signal"]], "Issue with file descriptors": [[212, "issue-with-file-descriptors"]], "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44": [[222, "functional-programming-modules"]], "ensurepip --- pip \u5b89\u88dd\u5668\u7684\u521d\u59cb\u5efa\u7f6e (bootstrapping)": [[208, "module-ensurepip"]], "\u6a21\u7d44 API": [[208, "module-api"]], "\u5167\u5efa\u7684\u4f8b\u5916": [[211, "built-in-exceptions"]], "Exception context": [[211, "exception-context"]], "\u7e7c\u627f\u81ea\u5167\u5efa\u7684\u4f8b\u5916": [[211, "inheriting-from-built-in-exceptions"]], "Base classes": [[211, "base-classes"]], "Concrete exceptions": [[211, "concrete-exceptions"]], "OS exceptions": [[211, "os-exceptions"]], "\u8b66\u544a": [[211, "warnings"]], "Exception groups": [[211, "exception-groups"]], "Exception hierarchy": [[211, "exception-hierarchy"]], "gzip --- gzip \u6a94\u6848\u7684\u652f\u63f4": [[232, "module-gzip"]], "\u7528\u6cd5\u7bc4\u4f8b": [[232, "examples-of-usage"], [147, "examples-of-usage"]], "fnmatch --- Unix filename pattern matching": [[218, "module-fnmatch"]], "graphlib \u2014-- \u4f7f\u7528\u985e\u5716 (graph-like) \u7d50\u69cb\u9032\u884c\u64cd\u4f5c\u7684\u529f\u80fd": [[230, "module-graphlib"]], "hashlib --- Secure hashes and message digests": [[233, "module-hashlib"]], "\u96dc\u6e4a\u6f14\u7b97\u6cd5": [[233, "hash-algorithms"]], "\u7528\u6cd5": [[233, "usage"]], "\u5efa\u69cb\u51fd\u5f0f": [[233, "constructors"]], "Attributes": [[233, "attributes"]], "Hash Objects": [[233, "hash-objects"]], "SHAKE variable length digests": [[233, "shake-variable-length-digests"]], "File hashing": [[233, "file-hashing"]], "Key derivation": [[233, "key-derivation"]], "BLAKE2": [[233, "blake2"]], "Creating hash objects": [[233, "creating-hash-objects"]], "Simple hashing": [[233, "simple-hashing"]], "Using different digest sizes": [[233, "using-different-digest-sizes"]], "Keyed hashing": [[233, "keyed-hashing"]], "Randomized hashing": [[233, "randomized-hashing"]], "Personalization": [[233, "personalization"]], "Tree mode": [[233, "tree-mode"]], "Credits": [[233, "credits"]], "glob --- Unix \u98a8\u683c\u7684\u8def\u5f91\u540d\u7a31\u6a21\u5f0f\u64f4\u5c55": [[229, "module-glob"]], "enum --- \u5c0d\u5217\u8209\u7684\u652f\u63f4": [[209, "module-enum"]], "\u8cc7\u6599\u578b\u5225": [[209, "data-types"], [180, "data-types"]], "\u652f\u63f4 __dunder__ \u540d\u7a31": [[209, "supported-dunder-names"]], "\u652f\u63f4 _sunder_ \u540d\u7a31": [[209, "supported-sunder-names"]], "\u901a\u7528\u9805\u76ee\u8207\u88dd\u98fe\u5668": [[209, "utilities-and-decorators"]], "\u5099\u8a3b": [[209, "notes"]], "fractions --- Rational numbers": [[219, "module-fractions"]], "email.mime: Creating email and MIME objects from scratch": [[204, "module-email.mime"]], "gc --- \u5783\u573e\u56de\u6536\u5668\u4ecb\u9762 (Garbage Collector interface)": [[225, "module-gc"]], "email.utils: Miscellaneous utilities": [[207, "module-email.utils"]], "html --- \u8d85\u9023\u7d50\u6a19\u8a18\u8a9e\u8a00 (HTML) \u652f\u63f4": [[236, "module-html"]], "email.policy: Policy Objects": [[206, "module-email.policy"]], "filecmp --- File and Directory Comparisons": [[214, "module-filecmp"]], "The dircmp class": [[214, "the-dircmp-class"]], "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6": [[217, "file-and-directory-access"]], "functools --- Higher-order functions and operations on callable objects": [[224, "module-functools"]], "partial \u7269\u4ef6": [[224, "partial-objects"]], "errno --- Standard errno system symbols": [[210, "module-errno"]], "heapq --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5": [[234, "module-heapq"]], "\u512a\u5148\u4f47\u5217\u5be6\u4f5c\u7d30\u7bc0": [[234, "priority-queue-implementation-notes"]], "\u539f\u7406": [[234, "theory"]], "html.entities --- HTML \u4e00\u822c\u5be6\u9ad4\u7684\u5b9a\u7fa9": [[237, "module-html.entities"]], "gettext --- Multilingual internationalization services": [[228, "module-gettext"]], "GNU gettext API": [[228, "gnu-gettext-api"]], "Class-based API": [[228, "class-based-api"]], "The NullTranslations class": [[228, "the-nulltranslations-class"]], "The GNUTranslations class": [[228, "the-gnutranslations-class"]], "Solaris message catalog support": [[228, "solaris-message-catalog-support"]], "The Catalog constructor": [[228, "the-catalog-constructor"]], "Internationalizing your programs and modules": [[228, "internationalizing-your-programs-and-modules"]], "Localizing your module": [[228, "localizing-your-module"]], "Localizing your application": [[228, "localizing-your-application"]], "Changing languages on the fly": [[228, "changing-languages-on-the-fly"]], "Deferred translations": [[228, "deferred-translations"]], "hmac --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49": [[235, "module-hmac"]], "fcntl --- The fcntl and ioctl system calls": [[213, "module-fcntl"]], "getopt --- C-style parser for command line options": [[226, "module-getopt"]], "fileinput --- Iterate over lines from multiple input streams": [[216, "module-fileinput"]], "\u5167\u5efa\u51fd\u5f0f": [[223, "built-in-functions"]], "\u7a0b\u5f0f\u6846\u67b6": [[220, "program-frameworks"]], "grp --- The group database": [[231, "module-grp"]], "\u6a94\u6848\u683c\u5f0f": [[215, "file-formats"]], "getpass --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177": [[227, "module-getpass"]], "email.parser: Parsing email messages": [[205, "module-email.parser"]], "FeedParser API": [[205, "feedparser-api"]], "Parser API": [[205, "parser-api"]], "Additional notes": [[205, "additional-notes"]], "ftplib --- FTP \u5354\u5b9a\u7528\u6236\u7aef": [[221, "module-ftplib"]], "\u53c3\u8003": [[221, "reference"]], "FTP \u7269\u4ef6": [[221, "ftp-objects"]], "FTP_TLS \u7269\u4ef6": [[221, "ftp-tls-objects"]], "\u6a21\u7d44\u8b8a\u6578": [[221, "module-variables"]], "curses.ascii --- ASCII \u5b57\u5143\u7684\u5de5\u5177\u7a0b\u5f0f": [[176, "module-curses.ascii"]], "email.generator: Generating MIME documents": [[199, "module-email.generator"]], "dbm --- Unix \"databases\" \u7684\u4ecb\u9762": [[182, "module-dbm"]], "dbm.gnu --- GNU \u8cc7\u6599\u5eab\u7ba1\u7406\u5668": [[182, "module-dbm.gnu"]], "dbm.ndbm --- \u65b0\u8cc7\u6599\u5eab\u7ba1\u7406\u5668": [[182, "module-dbm.ndbm"]], "dbm.dumb --- \u53ef\u651c\u5f0f DBM \u5be6\u4f5c": [[182, "module-dbm.dumb"]], "crypt --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f": [[171, "module-crypt"]], "Hashing Methods": [[171, "hashing-methods"]], "\u6a21\u7d44\u5c6c\u6027": [[171, "module-attributes"]], "\u6a21\u7d44\u51fd\u5f0f": [[171, "module-functions"], [164, "module-functions"]], "csv --- CSV \u6a94\u6848\u8b80\u53d6\u53ca\u5beb\u5165": [[173, "module-csv"]], "Dialect \u8207\u683c\u5f0f\u53c3\u6578": [[173, "dialects-and-formatting-parameters"]], "\u8b80\u53d6\u5668\u7269\u4ef6": [[173, "reader-objects"]], "\u5beb\u5165\u5668\u7269\u4ef6": [[173, "writer-objects"]], "dataclasses --- Data Classes": [[179, "module-dataclasses"]], "Module contents": [[179, "module-contents"]], "Post-init processing": [[179, "post-init-processing"]], "Class variables": [[179, "class-variables"]], "Init-only variables": [[179, "init-only-variables"]], "Frozen instances": [[179, "frozen-instances"]], "Inheritance": [[179, "inheritance"]], "Re-ordering of keyword-only parameters in __init__()": [[179, "re-ordering-of-keyword-only-parameters-in-init"]], "Default factory functions": [[179, "default-factory-functions"]], "Mutable default values": [[179, "mutable-default-values"]], "Descriptor-typed fields": [[179, "descriptor-typed-fields"]], "copyreg --- \u8a3b\u518a pickle \u652f\u63f4\u51fd\u5f0f": [[170, "module-copyreg"]], "email.message.Message: Representing an email message using the compat32 API": [[194, "email-message-message-representing-an-email-message-using-the-compat32-api"]], "\u958b\u767c\u5de5\u5177": [[185, "development-tools"]], "email.charset: \u8868\u793a\u5b57\u5143\u96c6\u5408": [[193, "module-email.charset"]], "email.header: Internationalized headers": [[200, "module-email.header"]], "datetime --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225": [[181, "module-datetime"]], "Aware and Naive Objects": [[181, "aware-and-naive-objects"]], "Available Types": [[181, "available-types"]], "\u5e38\u898b\u5c6c\u6027": [[181, "common-properties"]], "Determining if an Object is Aware or Naive": [[181, "determining-if-an-object-is-aware-or-naive"]], "timedelta \u7269\u4ef6": [[181, "timedelta-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1atimedelta": [[181, "examples-of-usage-timedelta"]], "date \u7269\u4ef6": [[181, "date-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1adate": [[181, "examples-of-usage-date"]], "datetime \u7269\u4ef6": [[181, "datetime-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1adatetime": [[181, "examples-of-usage-datetime"]], "time \u7269\u4ef6": [[181, "time-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1atime": [[181, "examples-of-usage-time"]], "tzinfo \u7269\u4ef6": [[181, "tzinfo-objects"]], "timezone \u7269\u4ef6": [[181, "timezone-objects"]], "strftime() \u8207 strptime() \u7684\u884c\u70ba": [[181, "strftime-and-strptime-behavior"]], "strftime() \u8207 strptime() \u683c\u5f0f\u78bc": [[181, "strftime-and-strptime-format-codes"]], "\u6280\u8853\u7d30\u7bc0": [[181, "technical-detail"]], "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03": [[190, "software-packaging-and-distribution"]], "email.errors: Exception and Defect classes": [[197, "module-email.errors"]], "decimal --- Decimal fixed point and floating point arithmetic": [[184, "module-decimal"]], "Quick-start Tutorial": [[184, "quick-start-tutorial"]], "Decimal objects": [[184, "decimal-objects"]], "Logical operands": [[184, "logical-operands"]], "Context objects": [[184, "context-objects"]], "Rounding modes": [[184, "rounding-modes"]], "Signals": [[184, "signals"]], "Floating Point Notes": [[184, "floating-point-notes"]], "Mitigating round-off error with increased precision": [[184, "mitigating-round-off-error-with-increased-precision"]], "Special values": [[184, "special-values"]], "Working with threads": [[184, "working-with-threads"]], "Recipes": [[184, "recipes"]], "Decimal FAQ": [[184, "decimal-faq"]], "dis --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668": [[189, "module-dis"]], "Command-line interface": [[189, "command-line-interface"]], "Bytecode analysis": [[189, "bytecode-analysis"]], "Analysis functions": [[189, "analysis-functions"]], "Python Bytecode Instructions": [[189, "python-bytecode-instructions"]], "Opcode collections": [[189, "opcode-collections"]], "Tkinter Dialogs": [[187, "tkinter-dialogs"]], "tkinter.simpledialog --- Standard Tkinter input dialogs": [[187, "module-tkinter.simpledialog"]], "tkinter.filedialog --- File selection dialogs": [[187, "module-tkinter.filedialog"]], "Native Load/Save Dialogs": [[187, "native-load-save-dialogs"]], "tkinter.commondialog --- Dialog window templates": [[187, "module-tkinter.commondialog"]], "Custom Python Interpreters": [[178, "custom-python-interpreters"]], "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790": [[183, "debugging-and-profiling"]], "email: Examples": [[198, "email-examples"]], "difflib --- Helpers for computing deltas": [[188, "module-difflib"]], "SequenceMatcher \u7269\u4ef6": [[188, "sequencematcher-objects"]], "SequenceMatcher \u7bc4\u4f8b": [[188, "sequencematcher-examples"]], "Differ Objects": [[188, "differ-objects"]], "Differ Example": [[188, "differ-example"]], "A command-line interface to difflib": [[188, "a-command-line-interface-to-difflib"]], "ndiff \u7bc4\u4f8b\uff1a": [[188, "ndiff-example"]], "ctypes --- A foreign function library for Python": [[174, "module-ctypes"]], "ctypes tutorial": [[174, "ctypes-tutorial"]], "Loading dynamic link libraries": [[174, "loading-dynamic-link-libraries"]], "Accessing functions from loaded dlls": [[174, "accessing-functions-from-loaded-dlls"]], "Calling functions": [[174, "calling-functions"]], "Fundamental data types": [[174, "fundamental-data-types"], [174, "ctypes-fundamental-data-types-2"]], "Calling functions, continued": [[174, "calling-functions-continued"]], "Calling variadic functions": [[174, "calling-variadic-functions"]], "Calling functions with your own custom data types": [[174, "calling-functions-with-your-own-custom-data-types"]], "Specifying the required argument types (function prototypes)": [[174, "specifying-the-required-argument-types-function-prototypes"]], "Return types": [[174, "return-types"]], "Passing pointers (or: passing parameters by reference)": [[174, "passing-pointers-or-passing-parameters-by-reference"]], "Structures and unions": [[174, "structures-and-unions"]], "Structure/union alignment and byte order": [[174, "structure-union-alignment-and-byte-order"]], "Bit fields in structures and unions": [[174, "bit-fields-in-structures-and-unions"]], "Arrays": [[174, "arrays"]], "Pointers": [[174, "pointers"]], "Type conversions": [[174, "type-conversions"]], "Incomplete Types": [[174, "incomplete-types"]], "Callback functions": [[174, "callback-functions"]], "Accessing values exported from dlls": [[174, "accessing-values-exported-from-dlls"]], "Surprises": [[174, "surprises"]], "Variable-sized data types": [[174, "variable-sized-data-types"]], "ctypes reference": [[174, "ctypes-reference"]], "Finding shared libraries": [[174, "finding-shared-libraries"]], "Loading shared libraries": [[174, "loading-shared-libraries"]], "Foreign functions": [[174, "foreign-functions"]], "Function prototypes": [[174, "function-prototypes"]], "Data types": [[174, "data-types"]], "Structured data types": [[174, "structured-data-types"]], "Arrays and pointers": [[174, "arrays-and-pointers"]], "email.iterators: Iterators": [[202, "module-email.iterators"]], "\u52a0\u5bc6\u670d\u52d9": [[172, "cryptographic-services"]], "email --- An email and MIME handling package": [[192, "module-email"]], "email.encoders: Encoders": [[196, "module-email.encoders"]], "email.message: Representing an email message": [[203, "module-email.message"]], "curses.panel --- A panel stack extension for curses": [[177, "module-curses.panel"]], "Panel Objects": [[177, "panel-objects"]], "curses --- Terminal handling for character-cell displays": [[175, "module-curses"]], "Window Objects": [[175, "window-objects"]], "Constants": [[175, "constants"]], "curses.textpad --- Text input widget for curses programs": [[175, "module-curses.textpad"]], "Textbox objects": [[175, "textbox-objects"]], "email.contentmanager: Managing MIME Content": [[195, "module-email.contentmanager"]], "Content Manager Instances": [[195, "content-manager-instances"]], "doctest --- Test interactive Python examples": [[191, "module-doctest"]], "Simple Usage: Checking Examples in Docstrings": [[191, "simple-usage-checking-examples-in-docstrings"]], "Simple Usage: Checking Examples in a Text File": [[191, "simple-usage-checking-examples-in-a-text-file"]], "How It Works": [[191, "how-it-works"]], "Which Docstrings Are Examined?": [[191, "which-docstrings-are-examined"]], "How are Docstring Examples Recognized?": [[191, "how-are-docstring-examples-recognized"]], "What's the Execution Context?": [[191, "what-s-the-execution-context"]], "What About Exceptions?": [[191, "what-about-exceptions"]], "Option Flags": [[191, "option-flags"]], "Directives": [[191, "directives"]], "Warnings": [[191, "warnings"]], "Basic API": [[191, "basic-api"]], "Unittest API": [[191, "unittest-api"]], "Advanced API": [[191, "advanced-api"]], "DocTest \u7269\u4ef6": [[191, "doctest-objects"]], "Example \u7269\u4ef6": [[191, "example-objects"]], "DocTestFinder \u7269\u4ef6": [[191, "doctestfinder-objects"]], "DocTestParser \u7269\u4ef6": [[191, "doctestparser-objects"]], "DocTestRunner \u7269\u4ef6": [[191, "doctestrunner-objects"]], "OutputChecker \u7269\u4ef6": [[191, "outputchecker-objects"]], "Debugging": [[191, "debugging"]], "Soapbox": [[191, "soapbox"]], "Python Development Mode": [[186, "python-development-mode"]], "Effects of the Python Development Mode": [[186, "effects-of-the-python-development-mode"]], "ResourceWarning \u7bc4\u4f8b": [[186, "resourcewarning-example"]], "Bad file descriptor error example": [[186, "bad-file-descriptor-error-example"]], "email.headerregistry: Custom Header Objects": [[201, "module-email.headerregistry"]], "\u7a3d\u6838\u4e8b\u4ef6\u8868": [[140, "audit-events-table"]], "copy --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c": [[169, "module-copy"]], "chunk --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599": [[151, "module-chunk"]], "\u4e26\u884c\u57f7\u884c (Concurrent Execution)": [[162, "concurrent-execution"]], "cgitb --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f": [[150, "module-cgitb"]], "base64 \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc": [[141, "module-base64"]], "contextlib --- Utilities for with-statement contexts": [[167, "module-contextlib"]], "Utilities": [[167, "utilities"]], "Examples and Recipes": [[167, "examples-and-recipes"], [159, "examples-and-recipes"]], "Supporting a variable number of context managers": [[167, "supporting-a-variable-number-of-context-managers"]], "Catching exceptions from __enter__ methods": [[167, "catching-exceptions-from-enter-methods"]], "Cleaning up in an __enter__ implementation": [[167, "cleaning-up-in-an-enter-implementation"]], "Replacing any use of try-finally and flag variables": [[167, "replacing-any-use-of-try-finally-and-flag-variables"]], "Using a context manager as a function decorator": [[167, "using-a-context-manager-as-a-function-decorator"]], "Single use, reusable and reentrant context managers": [[167, "single-use-reusable-and-reentrant-context-managers"]], "Reentrant context managers": [[167, "reentrant-context-managers"]], "Reusable context managers": [[167, "reusable-context-managers"]], "colorsys --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db": [[160, "module-colorsys"]], "audioop --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848": [[139, "module-audioop"]], "compileall --- Byte-compile Python libraries": [[161, "module-compileall"]], "Command-line use": [[161, "command-line-use"]], "Public functions": [[161, "public-functions"]], "concurrent \u5957\u4ef6": [[163, "the-concurrent-package"]], "\u5167\u5efa\u5e38\u6578": [[166, "built-in-constants"]], "\u7531 site module\uff08\u6a21\u7d44\uff09\u6240\u6dfb\u589e\u7684\u5e38\u6578": [[166, "constants-added-by-the-site-module"]], "cgi --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4": [[149, "module-cgi"]], "Using the cgi module": [[149, "using-the-cgi-module"]], "Higher Level Interface": [[149, "higher-level-interface"]], "Caring about security": [[149, "caring-about-security"]], "Installing your CGI script on a Unix system": [[149, "installing-your-cgi-script-on-a-unix-system"]], "Testing your CGI script": [[149, "testing-your-cgi-script"]], "Debugging CGI scripts": [[149, "debugging-cgi-scripts"]], "Common problems and solutions": [[149, "common-problems-and-solutions"]], "binascii --- Convert between binary and ASCII": [[144, "module-binascii"]], "bdb --- \u5075\u932f\u5668\u6846\u67b6": [[142, "module-bdb"]], "concurrent.futures -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9": [[164, "module-concurrent.futures"]], "Executor \u7269\u4ef6": [[164, "executor-objects"]], "ThreadPoolExecutor": [[164, "threadpoolexecutor"]], "ThreadPoolExecutor \u7bc4\u4f8b": [[164, "threadpoolexecutor-example"]], "ProcessPoolExecutor": [[164, "processpoolexecutor"]], "ProcessPoolExecutor \u7bc4\u4f8b": [[164, "processpoolexecutor-example"]], "\u4e8c\u9032\u4f4d\u8cc7\u6599\u670d\u52d9": [[143, "binary-data-services"]], "calendar --- \u65e5\u66c6\u76f8\u95dc\u51fd\u5f0f": [[148, "module-calendar"]], "builtins --- \u5167\u5efa\u7269\u4ef6": [[146, "module-builtins"]], "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)": [[136, "synchronization-primitives"]], "Lock": [[136, "lock"]], "Event": [[136, "event"]], "Condition": [[136, "condition"]], "Semaphore": [[136, "semaphore"]], "BoundedSemaphore": [[136, "boundedsemaphore"]], "Barrier": [[136, "barrier"]], "bisect --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)": [[145, "module-bisect"]], "\u6548\u80fd\u8003\u91cf": [[145, "performance-notes"]], "\u641c\u5c0b\u4e00\u500b\u5df2\u6392\u5e8f\u7684 list": [[145, "searching-sorted-lists"]], "codecs --- Codec registry and base classes": [[156, "module-codecs"]], "Codec Base Classes": [[156, "codec-base-classes"]], "Error Handlers": [[156, "error-handlers"]], "Stateless Encoding and Decoding": [[156, "stateless-encoding-and-decoding"]], "Incremental Encoding and Decoding": [[156, "incremental-encoding-and-decoding"]], "IncrementalEncoder \u7269\u4ef6": [[156, "incrementalencoder-objects"]], "IncrementalDecoder \u7269\u4ef6": [[156, "incrementaldecoder-objects"]], "Stream Encoding and Decoding": [[156, "stream-encoding-and-decoding"]], "StreamWriter \u7269\u4ef6": [[156, "streamwriter-objects"]], "StreamReader \u7269\u4ef6": [[156, "streamreader-objects"]], "StreamReaderWriter \u7269\u4ef6": [[156, "streamreaderwriter-objects"]], "StreamRecoder \u7269\u4ef6": [[156, "streamrecoder-objects"]], "Encodings and Unicode": [[156, "encodings-and-unicode"]], "Standard Encodings": [[156, "standard-encodings"]], "Python Specific Encodings": [[156, "python-specific-encodings"]], "Text Encodings": [[156, "text-encodings"]], "Binary Transforms": [[156, "binary-transforms"]], "Text Transforms": [[156, "text-transforms"]], "encodings.idna --- Internationalized Domain Names in Applications": [[156, "module-encodings.idna"]], "encodings.mbcs --- Windows ANSI codepage": [[156, "module-encodings.mbcs"]], "encodings.utf_8_sig --- UTF-8 codec with BOM signature": [[156, "module-encodings.utf_8_sig"]], "code --- Interpreter base classes": [[155, "module-code"]], "Interactive Interpreter Objects": [[155, "interactive-interpreter-objects"]], "Interactive Console Objects": [[155, "interactive-console-objects"]], "contextvars --- Context Variables": [[168, "module-contextvars"]], "Context Variables": [[168, "context-variables"]], "Manual Context Management": [[168, "manual-context-management"]], "asyncio support": [[168, "asyncio-support"]], "cmath --- Mathematical functions for complex numbers": [[152, "module-cmath"]], "Conversions to and from polar coordinates": [[152, "conversions-to-and-from-polar-coordinates"]], "Classification functions": [[152, "classification-functions"]], "bz2 --- Support for bzip2 compression": [[147, "module-bz2"]], "(De)compression of files": [[147, "de-compression-of-files"]], "Incremental (de)compression": [[147, "incremental-de-compression"]], "One-shot (de)compression": [[147, "one-shot-de-compression"]], "collections --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b": [[158, "module-collections"]], "ChainMap \u7269\u4ef6": [[158, "chainmap-objects"]], "ChainMap \u7bc4\u4f8b\u548c\u7528\u6cd5": [[158, "chainmap-examples-and-recipes"]], "Counter \u7269\u4ef6": [[158, "counter-objects"]], "deque \u7269\u4ef6": [[158, "deque-objects"]], "deque \u7528\u6cd5": [[158, "deque-recipes"]], "defaultdict \u7269\u4ef6": [[158, "defaultdict-objects"]], "defaultdict \u7bc4\u4f8b": [[158, "defaultdict-examples"]], "namedtuple() \u64c1\u6709\u5177\u540d\u6b04\u4f4d\u4e4b tuple \u7684\u5de5\u5ee0\u51fd\u5f0f": [[158, "namedtuple-factory-function-for-tuples-with-named-fields"]], "OrderedDict \u7269\u4ef6": [[158, "ordereddict-objects"]], "OrderedDict \u7bc4\u4f8b\u8207\u7528\u6cd5": [[158, "ordereddict-examples-and-recipes"]], "UserDict \u7269\u4ef6": [[158, "userdict-objects"]], "UserList \u7269\u4ef6": [[158, "userlist-objects"]], "UserString \u7269\u4ef6": [[158, "userstring-objects"]], "collections.abc --- Abstract Base Classes for Containers": [[159, "module-collections.abc"]], "Collections Abstract Base Classes": [[159, "collections-abstract-base-classes"]], "Collections Abstract Base Classes -- Detailed Descriptions": [[159, "collections-abstract-base-classes-detailed-descriptions"]], "Coroutines and Tasks": [[137, "coroutines-and-tasks"]], "Awaitables": [[137, "awaitables"]], "Creating Tasks": [[137, "creating-tasks"]], "Task Cancellation": [[137, "task-cancellation"]], "Task Groups": [[137, "task-groups"]], "Sleeping": [[137, "sleeping"]], "Running Tasks Concurrently": [[137, "running-tasks-concurrently"]], "Eager Task Factory": [[137, "eager-task-factory"]], "Shielding From Cancellation": [[137, "shielding-from-cancellation"]], "Timeouts": [[137, "timeouts"]], "Waiting Primitives": [[137, "waiting-primitives"]], "Running in Threads": [[137, "running-in-threads"]], "Scheduling From Other Threads": [[137, "scheduling-from-other-threads"]], "Introspection": [[137, "introspection"]], "Task Object": [[137, "task-object"]], "\u6a21\u7d44\u547d\u4ee4\u5217\u4ecb\u9762": [[154, "modules-command-line-interface-cli"]], "atexit --- Exit handlers": [[138, "module-atexit"]], "atexit \u7bc4\u4f8b": [[138, "atexit-example"]], "cmd --- Support for line-oriented command interpreters": [[153, "module-cmd"]], "Cmd \u7269\u4ef6": [[153, "cmd-objects"]], "Cmd Example": [[153, "cmd-example"]], "codeop --- Compile Python code": [[157, "module-codeop"]], "configparser --- \u8a2d\u5b9a\u6a94\u5256\u6790\u5668": [[165, "module-configparser"]], "Quick Start": [[165, "quick-start"]], "Supported Datatypes": [[165, "supported-datatypes"]], "Fallback Values": [[165, "fallback-values"]], "Supported INI File Structure": [[165, "supported-ini-file-structure"]], "Interpolation of values": [[165, "interpolation-of-values"]], "Mapping Protocol Access": [[165, "mapping-protocol-access"]], "Customizing Parser Behaviour": [[165, "customizing-parser-behaviour"]], "Legacy API Examples": [[165, "legacy-api-examples"]], "ConfigParser \u7269\u4ef6": [[165, "configparser-objects"]], "RawConfigParser \u7269\u4ef6": [[165, "rawconfigparser-objects"]]}, "indexentries": {"pyobject_del (c function)": [[3, "c.PyObject_Del"]], "pyobject_init (c function)": [[3, "c.PyObject_Init"]], "pyobject_initvar (c function)": [[3, "c.PyObject_InitVar"]], "pyobject_new (c macro)": [[3, "c.PyObject_New"]], "pyobject_newvar (c macro)": [[3, "c.PyObject_NewVar"]], "_pyobject_new (c function)": [[3, "c._PyObject_New"]], "_pyobject_newvar (c function)": [[3, "c._PyObject_NewVar"]], "_py_nonestruct (c var)": [[3, "c._Py_NoneStruct"]], "py_major_version (c macro)": [[4, "c.PY_MAJOR_VERSION"]], "py_micro_version (c macro)": [[4, "c.PY_MICRO_VERSION"]], "py_minor_version (c macro)": [[4, "c.PY_MINOR_VERSION"]], "py_release_level (c macro)": [[4, "c.PY_RELEASE_LEVEL"]], "py_release_serial (c macro)": [[4, "c.PY_RELEASE_SERIAL"]], "py_version_hex (c macro)": [[4, "c.PY_VERSION_HEX"]], "py_version (c var)": [[4, "c.Py_Version"]], "pyarg_parse (c function)": [[5, "c.PyArg_Parse"]], "pyarg_parsetuple (c function)": [[5, "c.PyArg_ParseTuple"], [73, "index-2"]], "pyarg_parsetupleandkeywords (c function)": [[5, "c.PyArg_ParseTupleAndKeywords"], [73, "index-3"]], "pyarg_unpacktuple (c function)": [[5, "c.PyArg_UnpackTuple"]], "pyarg_vaparse (c function)": [[5, "c.PyArg_VaParse"]], "pyarg_vaparsetupleandkeywords (c function)": [[5, "c.PyArg_VaParseTupleAndKeywords"]], "pyarg_validatekeywordarguments (c function)": [[5, "c.PyArg_ValidateKeywordArguments"]], "py_buildvalue (c function)": [[5, "c.Py_BuildValue"]], "py_vabuildvalue (c function)": [[5, "c.Py_VaBuildValue"]], "pybool_check (c function)": [[6, "c.PyBool_Check"]], "pybool_fromlong (c function)": [[6, "c.PyBool_FromLong"]], "pybool_type (c var)": [[6, "c.PyBool_Type"]], "py_false (c var)": [[6, "c.Py_False"]], "py_return_false (c macro)": [[6, "c.Py_RETURN_FALSE"]], "py_return_true (c macro)": [[6, "c.Py_RETURN_TRUE"]], "py_true (c var)": [[6, "c.Py_True"]], "(\u8acb\u898b\u7de9\u885d\u5354\u5b9a)": [[7, "index-0"]], "c-contiguous\uff08c \u9023\u7e8c\u7684\uff09": [[7, "index-2"], [87, "index-10"]], "fortran contiguous\uff08fortran \u9023\u7e8c\u7684\uff09": [[7, "index-2"], [87, "index-10"]], "pybuf_any_contiguous (c macro)": [[7, "c.PyBUF_ANY_CONTIGUOUS"]], "pybuf_contig (c macro)": [[7, "c.PyBUF_CONTIG"]], "pybuf_contig_ro (c macro)": [[7, "c.PyBUF_CONTIG_RO"]], "pybuf_c_contiguous (c macro)": [[7, "c.PyBUF_C_CONTIGUOUS"]], "pybuf_format (c macro)": [[7, "c.PyBUF_FORMAT"]], "pybuf_full (c macro)": [[7, "c.PyBUF_FULL"]], "pybuf_full_ro (c macro)": [[7, "c.PyBUF_FULL_RO"]], "pybuf_f_contiguous (c macro)": [[7, "c.PyBUF_F_CONTIGUOUS"]], "pybuf_indirect (c macro)": [[7, "c.PyBUF_INDIRECT"]], "pybuf_max_ndim (c macro)": [[7, "c.PyBUF_MAX_NDIM"]], "pybuf_nd (c macro)": [[7, "c.PyBUF_ND"]], "pybuf_records (c macro)": [[7, "c.PyBUF_RECORDS"]], "pybuf_records_ro (c macro)": [[7, "c.PyBUF_RECORDS_RO"]], "pybuf_simple (c macro)": [[7, "c.PyBUF_SIMPLE"]], "pybuf_strided (c macro)": [[7, "c.PyBUF_STRIDED"]], "pybuf_strided_ro (c macro)": [[7, "c.PyBUF_STRIDED_RO"]], "pybuf_strides (c macro)": [[7, "c.PyBUF_STRIDES"]], "pybuf_writable (c macro)": [[7, "c.PyBUF_WRITABLE"]], "pybufferprocs (c type)": [[7, "index-1"], [63, "c.PyBufferProcs"]], "pybuffer_fillcontiguousstrides (c function)": [[7, "c.PyBuffer_FillContiguousStrides"]], "pybuffer_fillinfo (c function)": [[7, "c.PyBuffer_FillInfo"]], "pybuffer_fromcontiguous (c function)": [[7, "c.PyBuffer_FromContiguous"]], "pybuffer_getpointer (c function)": [[7, "c.PyBuffer_GetPointer"]], "pybuffer_iscontiguous (c function)": [[7, "c.PyBuffer_IsContiguous"]], "pybuffer_release (c function)": [[7, "c.PyBuffer_Release"]], "pybuffer_sizefromformat (c function)": [[7, "c.PyBuffer_SizeFromFormat"]], "pybuffer_tocontiguous (c function)": [[7, "c.PyBuffer_ToContiguous"]], "pyobject_checkbuffer (c function)": [[7, "c.PyObject_CheckBuffer"]], "pyobject_copydata (c function)": [[7, "c.PyObject_CopyData"]], "pyobject_getbuffer (c function)": [[7, "c.PyObject_GetBuffer"]], "py_buffer (c type)": [[7, "c.Py_buffer"]], "py_buffer.buf (c member)": [[7, "c.Py_buffer.buf"]], "py_buffer.format (c member)": [[7, "c.Py_buffer.format"]], "py_buffer.internal (c member)": [[7, "c.Py_buffer.internal"]], "py_buffer.itemsize (c member)": [[7, "c.Py_buffer.itemsize"]], "py_buffer.len (c member)": [[7, "c.Py_buffer.len"]], "py_buffer.ndim (c member)": [[7, "c.Py_buffer.ndim"]], "py_buffer.obj (c member)": [[7, "c.Py_buffer.obj"]], "py_buffer.readonly (c member)": [[7, "c.Py_buffer.readonly"]], "py_buffer.shape (c member)": [[7, "c.Py_buffer.shape"]], "py_buffer.strides (c member)": [[7, "c.Py_buffer.strides"]], "py_buffer.suboffsets (c member)": [[7, "c.Py_buffer.suboffsets"]], "buffer interface\uff08\u7de9\u885d\u4ecb\u9762\uff09": [[7, "index-0"]], "buffer object\uff08\u7de9\u885d\u7269\u4ef6\uff09": [[7, "index-0"]], "buffer protocol\uff08\u7de9\u885d\u5354\u5b9a\uff09": [[7, "index-0"]], "contiguous\uff08\u9023\u7e8c\u7684\uff09": [[7, "index-2"], [87, "term-contiguous"]], "pybytearrayobject (c type)": [[8, "c.PyByteArrayObject"]], "pybytearray_as_string (c function)": [[8, "c.PyByteArray_AS_STRING"]], "pybytearray_asstring (c function)": [[8, "c.PyByteArray_AsString"]], "pybytearray_check (c function)": [[8, "c.PyByteArray_Check"]], "pybytearray_checkexact (c function)": [[8, "c.PyByteArray_CheckExact"]], "pybytearray_concat (c function)": [[8, "c.PyByteArray_Concat"]], "pybytearray_fromobject (c function)": [[8, "c.PyByteArray_FromObject"]], "pybytearray_fromstringandsize (c function)": [[8, "c.PyByteArray_FromStringAndSize"]], "pybytearray_get_size (c function)": [[8, "c.PyByteArray_GET_SIZE"]], "pybytearray_resize (c function)": [[8, "c.PyByteArray_Resize"]], "pybytearray_size (c function)": [[8, "c.PyByteArray_Size"]], "pybytearray_type (c var)": [[8, "c.PyByteArray_Type"]], "bytearray\uff08\u4f4d\u5143\u7d44\u9663\u5217\uff09": [[8, "index-0"], [342, "index-23"], [342, "index-40"], [342, "index-42"], [342, "index-43"], [342, "index-45"], [426, "index-26"]], "object\uff08\u7269\u4ef6\uff09": [[8, "index-0"], [9, "index-0"], [11, "index-0"], [13, "index-0"], [15, "index-0"], [16, "index-0"], [16, "index-1"], [16, "index-2"], [22, "index-0"], [24, "index-0"], [25, "index-0"], [27, "index-0"], [35, "index-3"], [38, "index-0"], [39, "index-0"], [43, "index-0"], [44, "index-0"], [44, "index-1"], [46, "index-0"], [55, "index-0"], [60, "index-0"], [61, "index-0"], [75, "index-0"], [87, "term-object"], [223, "index-12"], [272, "index-1"], [335, "index-0"], [342, "index-11"], [342, "index-19"], [342, "index-22"], [342, "index-23"], [342, "index-25"], [342, "index-26"], [342, "index-27"], [342, "index-28"], [342, "index-29"], [342, "index-40"], [342, "index-41"], [342, "index-42"], [342, "index-51"], [342, "index-52"], [342, "index-56"], [342, "index-59"], [342, "index-61"], [342, "index-62"], [342, "index-8"], [350, "index-8"], [379, "index-0"], [425, "index-11"], [425, "index-28"], [425, "index-42"], [425, "index-6"], [426, "index-0"], [426, "index-10"], [426, "index-12"], [426, "index-13"], [426, "index-14"], [426, "index-15"], [426, "index-17"], [426, "index-20"], [426, "index-22"], [426, "index-25"], [426, "index-27"], [426, "index-28"], [426, "index-29"], [426, "index-30"], [426, "index-31"], [426, "index-33"], [426, "index-34"], [426, "index-37"], [426, "index-42"], [426, "index-43"], [426, "index-44"], [426, "index-47"], [426, "index-51"], [426, "index-53"], [426, "index-57"], [426, "index-59"], [426, "index-6"], [426, "index-63"], [426, "index-66"], [426, "index-7"], [426, "index-8"], [426, "index-80"], [426, "index-9"], [426, "index-99"], [428, "index-15"], [428, "index-16"], [428, "index-17"], [428, "index-20"], [428, "index-22"], [428, "index-31"], [428, "index-35"], [428, "index-40"], [428, "index-42"], [428, "index-45"], [428, "index-47"], [428, "index-52"], [428, "index-53"], [428, "index-54"], [428, "index-55"], [428, "index-7"], [428, "index-80"], [428, "index-92"], [434, "index-10"], [434, "index-11"], [434, "index-28"], [434, "index-3"], [434, "index-4"], [434, "index-9"], [438, "index-0"], [444, "index-0"]], "pybytesobject (c type)": [[9, "c.PyBytesObject"]], "pybytes_as_string (c function)": [[9, "c.PyBytes_AS_STRING"]], "pybytes_asstring (c function)": [[9, "c.PyBytes_AsString"]], "pybytes_asstringandsize (c function)": [[9, "c.PyBytes_AsStringAndSize"]], "pybytes_check (c function)": [[9, "c.PyBytes_Check"]], "pybytes_checkexact (c function)": [[9, "c.PyBytes_CheckExact"]], "pybytes_concat (c function)": [[9, "c.PyBytes_Concat"]], "pybytes_concatanddel (c function)": [[9, "c.PyBytes_ConcatAndDel"]], "pybytes_fromformat (c function)": [[9, "c.PyBytes_FromFormat"]], "pybytes_fromformatv (c function)": [[9, "c.PyBytes_FromFormatV"]], "pybytes_fromobject (c function)": [[9, "c.PyBytes_FromObject"]], "pybytes_fromstring (c function)": [[9, "c.PyBytes_FromString"]], "pybytes_fromstringandsize (c function)": [[9, "c.PyBytes_FromStringAndSize"]], "pybytes_get_size (c function)": [[9, "c.PyBytes_GET_SIZE"]], "pybytes_size (c function)": [[9, "c.PyBytes_Size"]], "pybytes_type (c var)": [[9, "c.PyBytes_Type"]], "_pybytes_resize (c function)": [[9, "c._PyBytes_Resize"]], "bytes\uff08\u4f4d\u5143\u7d44\uff09": [[9, "index-0"], [49, "index-3"], [342, "index-31"], [342, "index-40"], [342, "index-41"], [342, "index-43"], [342, "index-45"], [426, "index-21"], [426, "index-77"]], "pep 590": [[10, "index-2"], [470, "index-113"], [471, "index-119"], [479, "index-37"], [480, "index-18"], [480, "index-8"], [481, "index-102"], [481, "index-103"], [481, "index-136"], [481, "index-137"], [481, "index-163"], [481, "index-170"], [481, "index-179"], [481, "index-180"], [481, "index-182"], [481, "index-209"], [481, "index-35"], [481, "index-66"], [481, "index-76"], [481, "index-82"], [481, "index-87"]], "py_vectorcall_arguments_offset (c macro)": [[10, "c.PY_VECTORCALL_ARGUMENTS_OFFSET"]], "pycallable_check (c function)": [[10, "c.PyCallable_Check"]], "pyobject_call (c function)": [[10, "c.PyObject_Call"]], "pyobject_callfunction (c function)": [[10, "c.PyObject_CallFunction"]], "pyobject_callfunctionobjargs (c function)": [[10, "c.PyObject_CallFunctionObjArgs"]], "pyobject_callmethod (c function)": [[10, "c.PyObject_CallMethod"]], "pyobject_callmethodnoargs (c function)": [[10, "c.PyObject_CallMethodNoArgs"]], "pyobject_callmethodobjargs (c function)": [[10, "c.PyObject_CallMethodObjArgs"]], "pyobject_callmethodonearg (c function)": [[10, "c.PyObject_CallMethodOneArg"]], "pyobject_callnoargs (c function)": [[10, "c.PyObject_CallNoArgs"]], "pyobject_callobject (c function)": [[10, "c.PyObject_CallObject"], [73, "index-1"]], "pyobject_callonearg (c function)": [[10, "c.PyObject_CallOneArg"]], "pyobject_vectorcall (c function)": [[10, "c.PyObject_Vectorcall"]], "pyobject_vectorcalldict (c function)": [[10, "c.PyObject_VectorcallDict"]], "pyobject_vectorcallmethod (c function)": [[10, "c.PyObject_VectorcallMethod"]], "pyvectorcall_call (c function)": [[10, "c.PyVectorcall_Call"]], "pyvectorcall_function (c function)": [[10, "c.PyVectorcall_Function"]], "pyvectorcall_nargs (c function)": [[10, "c.PyVectorcall_NARGS"]], "python enhancement proposals": [[10, "index-2"], [23, "index-9"], [26, "index-0"], [30, "index-0"], [31, "index-3"], [33, "index-39"], [33, "index-40"], [33, "index-41"], [33, "index-47"], [33, "index-48"], [33, "index-69"], [33, "index-70"], [34, "index-0"], [34, "index-17"], [34, "index-33"], [34, "index-34"], [34, "index-37"], [34, "index-38"], [34, "index-7"], [35, "index-37"], [35, "index-38"], [35, "index-39"], [35, "index-40"], [45, "index-10"], [45, "index-7"], [45, "index-8"], [49, "index-4"], [49, "index-5"], [57, "index-3"], [59, "index-1"], [63, "index-3"], [63, "index-4"], [63, "index-5"], [64, "index-0"], [64, "index-1"], [64, "index-2"], [64, "index-3"], [64, "index-4"], [64, "index-5"], [66, "index-3"], [68, "index-23"], [71, "index-1"], [73, "index-0"], [75, "index-2"], [78, "index-2"], [80, "index-6"], [80, "index-7"], [80, "index-8"], [85, "index-2"], [85, "index-3"], [85, "index-6"], [86, "index-2"], [87, "index-100"], [87, "index-101"], [87, "index-102"], [87, "index-103"], [87, "index-104"], [87, "index-105"], [87, "index-106"], [87, "index-107"], [87, "index-108"], [87, "index-109"], [87, "index-110"], [87, "index-111"], [87, "index-112"], [87, "index-77"], [87, "index-78"], [87, "index-79"], [87, "index-80"], [87, "index-81"], [87, "index-82"], [87, "index-83"], [87, "index-84"], [87, "index-85"], [87, "index-86"], [87, "index-87"], [87, "index-88"], [87, "index-89"], [87, "index-90"], [87, "index-91"], [87, "index-92"], [87, "index-93"], [87, "index-94"], [87, "index-95"], [87, "index-96"], [87, "index-97"], [87, "index-98"], [87, "index-99"], [88, "index-2"], [95, "index-0"], [95, "index-2"], [95, "index-4"], [107, "index-0"], [110, "index-0"], [110, "index-1"], [111, "index-24"], [111, "index-25"], [111, "index-26"], [111, "index-27"], [111, "index-28"], [111, "index-29"], [111, "index-30"], [111, "index-31"], [111, "index-32"], [111, "index-33"], [111, "index-34"], [111, "index-35"], [114, "index-4"], [114, "index-5"], [115, "index-4"], [120, "index-14"], [120, "index-15"], [120, "index-16"], [120, "index-17"], [120, "index-18"], [120, "index-19"], [124, "index-0"], [124, "index-1"], [124, "index-2"], [127, "index-2"], [139, "index-3"], [140, "index-3"], [149, "index-8"], [150, "index-4"], [151, "index-3"], [152, "index-0"], [156, "index-2"], [156, "index-5"], [158, "index-10"], [158, "index-11"], [158, "index-8"], [158, "index-9"], [159, "index-0"], [159, "index-1"], [159, "index-2"], [159, "index-3"], [159, "index-4"], [159, "index-7"], [161, "index-0"], [161, "index-2"], [161, "index-3"], [164, "index-2"], [167, "index-2"], [168, "index-2"], [171, "index-1"], [173, "index-7"], [179, "index-0"], [179, "index-1"], [179, "index-2"], [189, "index-0"], [208, "index-2"], [211, "index-10"], [211, "index-11"], [211, "index-12"], [211, "index-3"], [211, "index-6"], [211, "index-7"], [211, "index-8"], [211, "index-9"], [219, "index-0"], [223, "index-10"], [223, "index-14"], [223, "index-15"], [223, "index-18"], [224, "index-0"], [225, "index-2"], [245, "index-7"], [247, "index-2"], [248, "index-0"], [248, "index-1"], [248, "index-10"], [248, "index-11"], [248, "index-12"], [248, "index-13"], [248, "index-14"], [248, "index-16"], [248, "index-17"], [248, "index-18"], [248, "index-19"], [248, "index-2"], [248, "index-20"], [248, "index-21"], [248, "index-22"], [248, "index-23"], [248, "index-24"], [248, "index-25"], [248, "index-26"], [248, "index-3"], [248, "index-4"], [248, "index-5"], [248, "index-6"], [248, "index-7"], [248, "index-8"], [248, "index-9"], [249, "index-0"], [253, "index-0"], [253, "index-1"], [253, "index-2"], [253, "index-3"], [256, "index-1"], [256, "index-8"], [263, "index-1"], [264, "index-6"], [264, "index-7"], [265, "index-1"], [270, "index-0"], [273, "index-0"], [279, "index-3"], [285, "index-2"], [286, "index-12"], [287, "index-2"], [291, "index-22"], [291, "index-24"], [291, "index-25"], [291, "index-27"], [291, "index-44"], [291, "index-5"], [291, "index-53"], [291, "index-55"], [291, "index-6"], [291, "index-7"], [293, "index-4"], [294, "index-3"], [297, "index-2"], [297, "index-3"], [297, "index-4"], [297, "index-8"], [299, "index-2"], [300, "index-0"], [300, "index-10"], [300, "index-11"], [300, "index-2"], [300, "index-3"], [300, "index-5"], [300, "index-6"], [300, "index-7"], [309, "index-1"], [309, "index-2"], [309, "index-4"], [309, "index-5"], [320, "index-0"], [322, "index-1"], [322, "index-2"], [322, "index-3"], [322, "index-5"], [322, "index-6"], [322, "index-7"], [322, "index-8"], [324, "index-0"], [326, "index-0"], [326, "index-3"], [326, "index-4"], [326, "index-5"], [326, "index-6"], [326, "index-7"], [327, "index-0"], [330, "index-2"], [331, "index-0"], [331, "index-1"], [332, "index-9"], [334, "index-3"], [335, "index-1"], [335, "index-10"], [335, "index-11"], [335, "index-12"], [335, "index-13"], [335, "index-2"], [335, "index-4"], [335, "index-5"], [335, "index-7"], [335, "index-8"], [335, "index-9"], [337, "index-2"], [338, "index-0"], [338, "index-10"], [338, "index-11"], [338, "index-12"], [338, "index-14"], [338, "index-2"], [338, "index-3"], [338, "index-4"], [338, "index-5"], [338, "index-8"], [338, "index-9"], [339, "index-28"], [342, "index-49"], [342, "index-50"], [342, "index-57"], [342, "index-58"], [342, "index-60"], [342, "index-71"], [342, "index-72"], [343, "index-0"], [343, "index-1"], [343, "index-18"], [343, "index-19"], [343, "index-20"], [343, "index-21"], [346, "index-0"], [347, "index-2"], [350, "index-0"], [350, "index-13"], [350, "index-14"], [350, "index-15"], [350, "index-16"], [350, "index-19"], [350, "index-20"], [350, "index-25"], [350, "index-26"], [350, "index-30"], [350, "index-31"], [350, "index-32"], [350, "index-42"], [350, "index-43"], [350, "index-44"], [350, "index-9"], [351, "index-0"], [356, "index-0"], [357, "index-5"], [360, "index-3"], [360, "index-4"], [364, "index-8"], [376, "index-0"], [376, "index-1"], [383, "index-0"], [383, "index-1"], [383, "index-2"], [383, "index-3"], [383, "index-5"], [383, "index-6"], [384, "index-100"], [384, "index-135"], [384, "index-136"], [384, "index-137"], [384, "index-138"], [384, "index-139"], [384, "index-140"], [384, "index-141"], [384, "index-142"], [384, "index-143"], [384, "index-144"], [384, "index-145"], [384, "index-146"], [384, "index-147"], [384, "index-148"], [384, "index-149"], [384, "index-150"], [384, "index-151"], [384, "index-152"], [384, "index-153"], [384, "index-154"], [384, "index-155"], [384, "index-156"], [384, "index-157"], [384, "index-158"], [384, "index-159"], [384, "index-160"], [384, "index-161"], [384, "index-162"], [384, "index-163"], [384, "index-164"], [384, "index-165"], [384, "index-166"], [384, "index-167"], [384, "index-168"], [384, "index-25"], [384, "index-26"], [384, "index-27"], [384, "index-28"], [384, "index-32"], [384, "index-33"], [384, "index-34"], [384, "index-35"], [384, "index-38"], [384, "index-39"], [384, "index-40"], [384, "index-41"], [384, "index-42"], [384, "index-43"], [384, "index-44"], [384, "index-45"], [384, "index-46"], [384, "index-47"], [384, "index-48"], [384, "index-49"], [384, "index-50"], [384, "index-51"], [384, "index-52"], [384, "index-54"], [384, "index-55"], [384, "index-57"], [384, "index-59"], [384, "index-60"], [384, "index-61"], [384, "index-62"], [384, "index-63"], [384, "index-64"], [384, "index-65"], [384, "index-66"], [384, "index-67"], [384, "index-68"], [384, "index-69"], [384, "index-70"], [384, "index-71"], [384, "index-72"], [384, "index-73"], [384, "index-74"], [384, "index-75"], [384, "index-76"], [384, "index-77"], [384, "index-78"], [384, "index-79"], [384, "index-80"], [384, "index-81"], [384, "index-82"], [384, "index-83"], [384, "index-84"], [384, "index-85"], [384, "index-86"], [384, "index-87"], [384, "index-88"], [384, "index-89"], [384, "index-90"], [384, "index-91"], [384, "index-92"], [384, "index-93"], [384, "index-95"], [384, "index-96"], [384, "index-97"], [384, "index-98"], [384, "index-99"], [395, "index-3"], [397, "index-9"], [400, "index-1"], [400, "index-2"], [400, "index-4"], [405, "index-38"], [405, "index-39"], [405, "index-40"], [405, "index-41"], [405, "index-42"], [405, "index-44"], [405, "index-45"], [405, "index-46"], [405, "index-47"], [405, "index-49"], [405, "index-50"], [405, "index-51"], [405, "index-52"], [405, "index-53"], [405, "index-54"], [405, "index-55"], [405, "index-56"], [406, "index-7"], [421, "index-0"], [421, "index-1"], [421, "index-2"], [423, "index-0"], [423, "index-1"], [425, "index-17"], [425, "index-19"], [425, "index-20"], [425, "index-24"], [425, "index-25"], [425, "index-26"], [425, "index-30"], [425, "index-33"], [425, "index-36"], [425, "index-37"], [425, "index-38"], [425, "index-39"], [425, "index-40"], [425, "index-41"], [425, "index-44"], [425, "index-45"], [425, "index-46"], [425, "index-47"], [425, "index-52"], [426, "index-107"], [426, "index-108"], [426, "index-109"], [426, "index-111"], [426, "index-115"], [426, "index-62"], [426, "index-85"], [426, "index-87"], [426, "index-90"], [426, "index-93"], [426, "index-94"], [426, "index-95"], [426, "index-96"], [427, "index-11"], [427, "index-12"], [428, "index-14"], [428, "index-19"], [428, "index-21"], [428, "index-26"], [428, "index-27"], [428, "index-28"], [428, "index-29"], [428, "index-30"], [428, "index-51"], [428, "index-79"], [428, "index-87"], [428, "index-89"], [428, "index-94"], [429, "index-0"], [430, "index-1"], [430, "index-11"], [430, "index-12"], [430, "index-13"], [430, "index-14"], [430, "index-15"], [430, "index-19"], [430, "index-2"], [430, "index-20"], [430, "index-21"], [430, "index-22"], [430, "index-23"], [430, "index-24"], [430, "index-25"], [430, "index-26"], [430, "index-27"], [430, "index-6"], [433, "index-1"], [433, "index-11"], [433, "index-12"], [433, "index-21"], [433, "index-26"], [434, "index-13"], [434, "index-16"], [434, "index-17"], [434, "index-41"], [434, "index-42"], [434, "index-46"], [434, "index-48"], [439, "index-15"], [439, "index-16"], [439, "index-17"], [439, "index-18"], [448, "index-16"], [453, "index-0"], [453, "index-10"], [453, "index-15"], [453, "index-37"], [453, "index-38"], [453, "index-50"], [453, "index-51"], [453, "index-54"], [453, "index-55"], [453, "index-7"], [454, "index-0"], [454, "index-1"], [454, "index-34"], [455, "index-0"], [459, "index-0"], [459, "index-16"], [459, "index-17"], [459, "index-19"], [459, "index-21"], [459, "index-38"], [460, "index-0"], [460, "index-1"], [460, "index-2"], [460, "index-3"], [461, "index-0"], [461, "index-1"], [461, "index-10"], [461, "index-12"], [461, "index-13"], [461, "index-14"], [461, "index-15"], [461, "index-16"], [461, "index-17"], [461, "index-2"], [461, "index-3"], [461, "index-4"], [461, "index-5"], [461, "index-6"], [461, "index-7"], [461, "index-8"], [461, "index-9"], [462, "index-0"], [462, "index-1"], [462, "index-10"], [462, "index-11"], [462, "index-12"], [462, "index-13"], [462, "index-14"], [462, "index-16"], [462, "index-2"], [462, "index-22"], [462, "index-25"], [462, "index-26"], [462, "index-3"], [462, "index-4"], [462, "index-5"], [462, "index-6"], [462, "index-8"], [462, "index-9"], [463, "index-0"], [463, "index-1"], [463, "index-10"], [463, "index-11"], [463, "index-12"], [463, "index-13"], [463, "index-14"], [463, "index-15"], [463, "index-16"], [463, "index-17"], [463, "index-18"], [463, "index-19"], [463, "index-2"], [463, "index-20"], [463, "index-21"], [463, "index-22"], [463, "index-23"], [463, "index-3"], [463, "index-4"], [463, "index-5"], [463, "index-6"], [463, "index-7"], [463, "index-9"], [464, "index-0"], [464, "index-1"], [464, "index-10"], [464, "index-11"], [464, "index-12"], [464, "index-13"], [464, "index-14"], [464, "index-15"], [464, "index-16"], [464, "index-17"], [464, "index-2"], [464, "index-3"], [464, "index-4"], [464, "index-5"], [464, "index-6"], [464, "index-8"], [464, "index-9"], [465, "index-0"], [465, "index-1"], [465, "index-10"], [465, "index-11"], [465, "index-12"], [465, "index-13"], [465, "index-14"], [465, "index-15"], [465, "index-16"], [465, "index-17"], [465, "index-18"], [465, "index-19"], [465, "index-2"], [465, "index-21"], [465, "index-24"], [465, "index-25"], [465, "index-26"], [465, "index-27"], [465, "index-28"], [465, "index-29"], [465, "index-3"], [465, "index-30"], [465, "index-31"], [465, "index-4"], [465, "index-5"], [465, "index-6"], [465, "index-7"], [465, "index-8"], [465, "index-9"], [466, "index-0"], [466, "index-1"], [466, "index-10"], [466, "index-11"], [466, "index-12"], [466, "index-14"], [466, "index-15"], [466, "index-16"], [466, "index-17"], [466, "index-18"], [466, "index-19"], [466, "index-2"], [466, "index-25"], [466, "index-3"], [466, "index-7"], [466, "index-8"], [466, "index-9"], [467, "index-0"], [467, "index-13"], [467, "index-14"], [467, "index-15"], [467, "index-16"], [467, "index-17"], [467, "index-18"], [467, "index-19"], [467, "index-2"], [467, "index-20"], [467, "index-21"], [467, "index-22"], [467, "index-23"], [467, "index-3"], [467, "index-4"], [467, "index-5"], [467, "index-6"], [467, "index-7"], [468, "index-0"], [468, "index-1"], [468, "index-10"], [468, "index-11"], [468, "index-12"], [468, "index-13"], [468, "index-14"], [468, "index-15"], [468, "index-16"], [468, "index-17"], [468, "index-18"], [468, "index-19"], [468, "index-2"], [468, "index-20"], [468, "index-22"], [468, "index-23"], [468, "index-24"], [468, "index-25"], [468, "index-26"], [468, "index-27"], [468, "index-28"], [468, "index-29"], [468, "index-3"], [468, "index-30"], [468, "index-31"], [468, "index-32"], [468, "index-34"], [468, "index-35"], [468, "index-38"], [468, "index-39"], [468, "index-4"], [468, "index-5"], [468, "index-6"], [468, "index-7"], [468, "index-8"], [468, "index-9"], [469, "index-0"], [469, "index-1"], [469, "index-2"], [469, "index-3"], [470, "index-100"], [470, "index-101"], [470, "index-102"], [470, "index-103"], [470, "index-104"], [470, "index-105"], [470, "index-106"], [470, "index-107"], [470, "index-108"], [470, "index-109"], [470, "index-110"], [470, "index-111"], [470, "index-112"], [470, "index-113"], [470, "index-114"], [470, "index-115"], [470, "index-116"], [470, "index-117"], [470, "index-118"], [470, "index-40"], [470, "index-80"], [470, "index-81"], [470, "index-82"], [470, "index-83"], [470, "index-84"], [470, "index-85"], [470, "index-86"], [470, "index-87"], [470, "index-88"], [470, "index-89"], [470, "index-90"], [470, "index-91"], [470, "index-92"], [470, "index-93"], [470, "index-94"], [470, "index-95"], [470, "index-96"], [470, "index-97"], [470, "index-99"], [471, "index-100"], [471, "index-101"], [471, "index-102"], [471, "index-104"], [471, "index-105"], [471, "index-106"], [471, "index-107"], [471, "index-108"], [471, "index-109"], [471, "index-110"], [471, "index-111"], [471, "index-112"], [471, "index-113"], [471, "index-114"], [471, "index-115"], [471, "index-116"], [471, "index-117"], [471, "index-118"], [471, "index-119"], [471, "index-120"], [471, "index-121"], [471, "index-41"], [471, "index-82"], [471, "index-84"], [471, "index-85"], [471, "index-86"], [471, "index-87"], [471, "index-89"], [471, "index-90"], [471, "index-91"], [471, "index-92"], [471, "index-93"], [471, "index-94"], [471, "index-95"], [471, "index-96"], [471, "index-97"], [471, "index-98"], [471, "index-99"], [472, "index-1"], [472, "index-10"], [472, "index-11"], [472, "index-12"], [472, "index-13"], [472, "index-15"], [472, "index-16"], [472, "index-17"], [472, "index-2"], [472, "index-20"], [472, "index-21"], [472, "index-22"], [472, "index-24"], [472, "index-25"], [472, "index-26"], [472, "index-27"], [472, "index-28"], [472, "index-29"], [472, "index-3"], [472, "index-30"], [472, "index-31"], [472, "index-32"], [472, "index-33"], [472, "index-34"], [472, "index-35"], [472, "index-36"], [472, "index-37"], [472, "index-38"], [472, "index-39"], [472, "index-4"], [472, "index-40"], [472, "index-41"], [472, "index-42"], [472, "index-43"], [472, "index-44"], [472, "index-45"], [472, "index-46"], [472, "index-48"], [472, "index-56"], [472, "index-57"], [472, "index-58"], [472, "index-59"], [472, "index-6"], [472, "index-60"], [472, "index-61"], [472, "index-8"], [472, "index-9"], [473, "index-0"], [473, "index-1"], [473, "index-14"], [473, "index-2"], [473, "index-3"], [473, "index-4"], [473, "index-5"], [473, "index-6"], [473, "index-9"], [474, "index-10"], [474, "index-12"], [474, "index-13"], [474, "index-14"], [474, "index-15"], [474, "index-18"], [474, "index-2"], [474, "index-20"], [474, "index-21"], [474, "index-22"], [474, "index-29"], [474, "index-3"], [474, "index-30"], [474, "index-32"], [474, "index-33"], [474, "index-36"], [474, "index-37"], [474, "index-38"], [474, "index-4"], [474, "index-51"], [474, "index-52"], [474, "index-53"], [474, "index-54"], [474, "index-55"], [474, "index-56"], [474, "index-57"], [474, "index-58"], [474, "index-59"], [474, "index-6"], [474, "index-60"], [474, "index-61"], [474, "index-62"], [474, "index-8"], [475, "index-0"], [475, "index-1"], [475, "index-10"], [475, "index-11"], [475, "index-12"], [475, "index-13"], [475, "index-14"], [475, "index-15"], [475, "index-16"], [475, "index-17"], [475, "index-18"], [475, "index-19"], [475, "index-2"], [475, "index-20"], [475, "index-21"], [475, "index-22"], [475, "index-23"], [475, "index-24"], [475, "index-25"], [475, "index-26"], [475, "index-27"], [475, "index-28"], [475, "index-29"], [475, "index-3"], [475, "index-30"], [475, "index-31"], [475, "index-32"], [475, "index-33"], [475, "index-34"], [475, "index-35"], [475, "index-36"], [475, "index-37"], [475, "index-38"], [475, "index-39"], [475, "index-4"], [475, "index-42"], [475, "index-43"], [475, "index-44"], [475, "index-45"], [475, "index-46"], [475, "index-47"], [475, "index-48"], [475, "index-49"], [475, "index-5"], [475, "index-51"], [475, "index-52"], [475, "index-6"], [475, "index-7"], [475, "index-8"], [475, "index-9"], [476, "index-0"], [476, "index-1"], [476, "index-10"], [476, "index-11"], [476, "index-12"], [476, "index-13"], [476, "index-14"], [476, "index-15"], [476, "index-16"], [476, "index-17"], [476, "index-18"], [476, "index-19"], [476, "index-2"], [476, "index-20"], [476, "index-21"], [476, "index-22"], [476, "index-23"], [476, "index-24"], [476, "index-25"], [476, "index-26"], [476, "index-27"], [476, "index-28"], [476, "index-29"], [476, "index-3"], [476, "index-30"], [476, "index-4"], [476, "index-45"], [476, "index-46"], [476, "index-47"], [476, "index-48"], [476, "index-49"], [476, "index-5"], [476, "index-50"], [476, "index-52"], [476, "index-6"], [476, "index-7"], [476, "index-8"], [476, "index-9"], [477, "index-0"], [477, "index-1"], [477, "index-10"], [477, "index-11"], [477, "index-12"], [477, "index-13"], [477, "index-14"], [477, "index-15"], [477, "index-16"], [477, "index-17"], [477, "index-18"], [477, "index-20"], [477, "index-22"], [477, "index-23"], [477, "index-24"], [477, "index-25"], [477, "index-26"], [477, "index-28"], [477, "index-29"], [477, "index-3"], [477, "index-30"], [477, "index-31"], [477, "index-32"], [477, "index-33"], [477, "index-34"], [477, "index-35"], [477, "index-36"], [477, "index-37"], [477, "index-4"], [477, "index-5"], [477, "index-6"], [477, "index-7"], [477, "index-8"], [477, "index-9"], [478, "index-0"], [478, "index-1"], [478, "index-10"], [478, "index-11"], [478, "index-13"], [478, "index-14"], [478, "index-15"], [478, "index-17"], [478, "index-18"], [478, "index-19"], [478, "index-2"], [478, "index-20"], [478, "index-21"], [478, "index-22"], [478, "index-23"], [478, "index-24"], [478, "index-28"], [478, "index-29"], [478, "index-3"], [478, "index-30"], [478, "index-32"], [478, "index-33"], [478, "index-37"], [478, "index-38"], [478, "index-41"], [478, "index-42"], [478, "index-5"], [478, "index-6"], [478, "index-7"], [478, "index-9"], [479, "index-10"], [479, "index-11"], [479, "index-12"], [479, "index-15"], [479, "index-16"], [479, "index-17"], [479, "index-18"], [479, "index-19"], [479, "index-23"], [479, "index-24"], [479, "index-26"], [479, "index-33"], [479, "index-34"], [479, "index-35"], [479, "index-36"], [479, "index-37"], [479, "index-38"], [479, "index-5"], [479, "index-8"], [480, "index-0"], [480, "index-1"], [480, "index-10"], [480, "index-11"], [480, "index-12"], [480, "index-13"], [480, "index-14"], [480, "index-15"], [480, "index-16"], [480, "index-17"], [480, "index-18"], [480, "index-19"], [480, "index-2"], [480, "index-20"], [480, "index-23"], [480, "index-24"], [480, "index-25"], [480, "index-26"], [480, "index-27"], [480, "index-29"], [480, "index-3"], [480, "index-4"], [480, "index-5"], [480, "index-6"], [480, "index-7"], [480, "index-8"], [480, "index-9"], [481, "index-0"], [481, "index-1"], [481, "index-10"], [481, "index-100"], [481, "index-101"], [481, "index-102"], [481, "index-103"], [481, "index-104"], [481, "index-106"], [481, "index-107"], [481, "index-108"], [481, "index-109"], [481, "index-11"], [481, "index-110"], [481, "index-111"], [481, "index-112"], [481, "index-113"], [481, "index-114"], [481, "index-115"], [481, "index-116"], [481, "index-117"], [481, "index-118"], [481, "index-119"], [481, "index-12"], [481, "index-120"], [481, "index-121"], [481, "index-122"], [481, "index-123"], [481, "index-124"], [481, "index-125"], [481, "index-126"], [481, "index-127"], [481, "index-128"], [481, "index-129"], [481, "index-13"], [481, "index-130"], [481, "index-131"], [481, "index-132"], [481, "index-133"], [481, "index-134"], [481, "index-136"], [481, "index-137"], [481, "index-138"], [481, "index-139"], [481, "index-14"], [481, "index-140"], [481, "index-141"], [481, "index-142"], [481, "index-143"], [481, "index-144"], [481, "index-145"], [481, "index-146"], [481, "index-147"], [481, "index-148"], [481, "index-149"], [481, "index-15"], [481, "index-150"], [481, "index-152"], [481, "index-153"], [481, "index-154"], [481, "index-155"], [481, "index-156"], [481, "index-157"], [481, "index-158"], [481, "index-159"], [481, "index-16"], [481, "index-160"], [481, "index-161"], [481, "index-162"], [481, "index-163"], [481, "index-164"], [481, "index-165"], [481, "index-166"], [481, "index-167"], [481, "index-168"], [481, "index-169"], [481, "index-17"], [481, "index-170"], [481, "index-171"], [481, "index-172"], [481, "index-173"], [481, "index-174"], [481, "index-176"], [481, "index-177"], [481, "index-178"], [481, "index-179"], [481, "index-18"], [481, "index-180"], [481, "index-181"], [481, "index-182"], [481, "index-183"], [481, "index-184"], [481, "index-185"], [481, "index-186"], [481, "index-187"], [481, "index-188"], [481, "index-189"], [481, "index-19"], [481, "index-191"], [481, "index-192"], [481, "index-193"], [481, "index-194"], [481, "index-195"], [481, "index-196"], [481, "index-197"], [481, "index-2"], [481, "index-20"], [481, "index-201"], [481, "index-203"], [481, "index-204"], [481, "index-205"], [481, "index-207"], [481, "index-208"], [481, "index-209"], [481, "index-21"], [481, "index-212"], [481, "index-214"], [481, "index-218"], [481, "index-219"], [481, "index-22"], [481, "index-220"], [481, "index-221"], [481, "index-222"], [481, "index-223"], [481, "index-226"], [481, "index-227"], [481, "index-228"], [481, "index-23"], [481, "index-231"], [481, "index-232"], [481, "index-233"], [481, "index-236"], [481, "index-237"], [481, "index-238"], [481, "index-239"], [481, "index-24"], [481, "index-240"], [481, "index-241"], [481, "index-242"], [481, "index-244"], [481, "index-245"], [481, "index-246"], [481, "index-247"], [481, "index-248"], [481, "index-249"], [481, "index-25"], [481, "index-250"], [481, "index-251"], [481, "index-252"], [481, "index-253"], [481, "index-256"], [481, "index-257"], [481, "index-258"], [481, "index-259"], [481, "index-26"], [481, "index-260"], [481, "index-261"], [481, "index-262"], [481, "index-263"], [481, "index-264"], [481, "index-265"], [481, "index-266"], [481, "index-267"], [481, "index-268"], [481, "index-269"], [481, "index-27"], [481, "index-270"], [481, "index-271"], [481, "index-272"], [481, "index-273"], [481, "index-274"], [481, "index-275"], [481, "index-276"], [481, "index-277"], [481, "index-278"], [481, "index-279"], [481, "index-28"], [481, "index-280"], [481, "index-281"], [481, "index-282"], [481, "index-283"], [481, "index-286"], [481, "index-287"], [481, "index-288"], [481, "index-289"], [481, "index-29"], [481, "index-290"], [481, "index-291"], [481, "index-292"], [481, "index-293"], [481, "index-294"], [481, "index-295"], [481, "index-296"], [481, "index-297"], [481, "index-298"], [481, "index-299"], [481, "index-3"], [481, "index-30"], [481, "index-300"], [481, "index-301"], [481, "index-302"], [481, "index-303"], [481, "index-31"], [481, "index-35"], [481, "index-36"], [481, "index-37"], [481, "index-38"], [481, "index-4"], [481, "index-40"], [481, "index-41"], [481, "index-43"], [481, "index-44"], [481, "index-45"], [481, "index-46"], [481, "index-47"], [481, "index-5"], [481, "index-50"], [481, "index-51"], [481, "index-54"], [481, "index-55"], [481, "index-56"], [481, "index-57"], [481, "index-58"], [481, "index-59"], [481, "index-6"], [481, "index-60"], [481, "index-61"], [481, "index-63"], [481, "index-64"], [481, "index-65"], [481, "index-66"], [481, "index-67"], [481, "index-68"], [481, "index-69"], [481, "index-7"], [481, "index-70"], [481, "index-71"], [481, "index-72"], [481, "index-73"], [481, "index-75"], [481, "index-76"], [481, "index-78"], [481, "index-79"], [481, "index-8"], [481, "index-80"], [481, "index-81"], [481, "index-82"], [481, "index-84"], [481, "index-86"], [481, "index-87"], [481, "index-88"], [481, "index-9"], [481, "index-90"], [481, "index-93"], [481, "index-94"], [481, "index-95"], [481, "index-96"], [481, "index-97"], [481, "index-98"], [481, "index-99"], [482, "index-23"]], "vectorcallfunc (c type)": [[10, "c.vectorcallfunc"]], "capsule": [[11, "index-0"]], "pycapsule (c type)": [[11, "c.PyCapsule"]], "pycapsule_checkexact (c function)": [[11, "c.PyCapsule_CheckExact"]], "pycapsule_destructor (c type)": [[11, "c.PyCapsule_Destructor"]], "pycapsule_getcontext (c function)": [[11, "c.PyCapsule_GetContext"]], "pycapsule_getdestructor (c function)": [[11, "c.PyCapsule_GetDestructor"]], "pycapsule_getname (c function)": [[11, "c.PyCapsule_GetName"]], "pycapsule_getpointer (c function)": [[11, "c.PyCapsule_GetPointer"]], "pycapsule_import (c function)": [[11, "c.PyCapsule_Import"]], "pycapsule_isvalid (c function)": [[11, "c.PyCapsule_IsValid"]], "pycapsule_new (c function)": [[11, "c.PyCapsule_New"]], "pycapsule_setcontext (c function)": [[11, "c.PyCapsule_SetContext"]], "pycapsule_setdestructor (c function)": [[11, "c.PyCapsule_SetDestructor"]], "pycapsule_setname (c function)": [[11, "c.PyCapsule_SetName"]], "pycapsule_setpointer (c function)": [[11, "c.PyCapsule_SetPointer"]], "pycellobject (c type)": [[12, "c.PyCellObject"]], "pycell_check (c function)": [[12, "c.PyCell_Check"]], "pycell_get (c function)": [[12, "c.PyCell_GET"], [12, "c.PyCell_Get"]], "pycell_new (c function)": [[12, "c.PyCell_New"]], "pycell_set (c function)": [[12, "c.PyCell_SET"], [12, "c.PyCell_Set"]], "pycell_type (c var)": [[12, "c.PyCell_Type"]], "pycodeevent (c type)": [[13, "c.PyCodeEvent"]], "pycodeobject (c type)": [[13, "c.PyCodeObject"]], "pycode_addwatcher (c function)": [[13, "c.PyCode_AddWatcher"]], "pycode_addr2line (c function)": [[13, "c.PyCode_Addr2Line"]], "pycode_addr2location (c function)": [[13, "c.PyCode_Addr2Location"]], "pycode_check (c function)": [[13, "c.PyCode_Check"]], "pycode_clearwatcher (c function)": [[13, "c.PyCode_ClearWatcher"]], "pycode_getcellvars (c function)": [[13, "c.PyCode_GetCellvars"]], "pycode_getcode (c function)": [[13, "c.PyCode_GetCode"]], "pycode_getfreevars (c function)": [[13, "c.PyCode_GetFreevars"]], "pycode_getnumfree (c function)": [[13, "c.PyCode_GetNumFree"]], "pycode_getvarnames (c function)": [[13, "c.PyCode_GetVarnames"]], "pycode_new (c function)": [[13, "index-1"]], "pycode_newempty (c function)": [[13, "c.PyCode_NewEmpty"]], "pycode_newwithposonlyargs (c function)": [[13, "index-2"]], "pycode_type (c var)": [[13, "c.PyCode_Type"]], "pycode_watchcallback (c type)": [[13, "c.PyCode_WatchCallback"]], "pyunstable_code_getextra (c function)": [[13, "c.PyUnstable_Code_GetExtra"]], "pyunstable_code_new (c function)": [[13, "c.PyUnstable_Code_New"]], "pyunstable_code_newwithposonlyargs (c function)": [[13, "c.PyUnstable_Code_NewWithPosOnlyArgs"]], "pyunstable_code_setextra (c function)": [[13, "c.PyUnstable_Code_SetExtra"]], "pyunstable_eval_requestcodeextraindex (c function)": [[13, "c.PyUnstable_Eval_RequestCodeExtraIndex"]], "_pycode_getextra (c function)": [[13, "index-4"]], "_pycode_setextra (c function)": [[13, "index-5"]], "_pyeval_requestcodeextraindex (c function)": [[13, "index-3"]], "code object\uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\uff09": [[13, "index-0"], [272, "index-1"], [342, "index-62"], [426, "index-57"]], "code\uff08\u7a0b\u5f0f\u78bc\uff09": [[13, "index-0"], [272, "index-1"], [342, "index-62"], [426, "index-57"], [427, "index-0"]], "pycodec_backslashreplaceerrors (c function)": [[14, "c.PyCodec_BackslashReplaceErrors"]], "pycodec_decode (c function)": [[14, "c.PyCodec_Decode"]], "pycodec_decoder (c function)": [[14, "c.PyCodec_Decoder"]], "pycodec_encode (c function)": [[14, "c.PyCodec_Encode"]], "pycodec_encoder (c function)": [[14, "c.PyCodec_Encoder"]], "pycodec_ignoreerrors (c function)": [[14, "c.PyCodec_IgnoreErrors"]], "pycodec_incrementaldecoder (c function)": [[14, "c.PyCodec_IncrementalDecoder"]], "pycodec_incrementalencoder (c function)": [[14, "c.PyCodec_IncrementalEncoder"]], "pycodec_knownencoding (c function)": [[14, "c.PyCodec_KnownEncoding"]], "pycodec_lookuperror (c function)": [[14, "c.PyCodec_LookupError"]], "pycodec_namereplaceerrors (c function)": [[14, "c.PyCodec_NameReplaceErrors"]], "pycodec_register (c function)": [[14, "c.PyCodec_Register"]], "pycodec_registererror (c function)": [[14, "c.PyCodec_RegisterError"]], "pycodec_replaceerrors (c function)": [[14, "c.PyCodec_ReplaceErrors"]], "pycodec_streamreader (c function)": [[14, "c.PyCodec_StreamReader"]], "pycodec_streamwriter (c function)": [[14, "c.PyCodec_StreamWriter"]], "pycodec_stricterrors (c function)": [[14, "c.PyCodec_StrictErrors"]], "pycodec_unregister (c function)": [[14, "c.PyCodec_Unregister"]], "pycodec_xmlcharrefreplaceerrors (c function)": [[14, "c.PyCodec_XMLCharRefReplaceErrors"]], "pycomplexobject (c type)": [[15, "c.PyComplexObject"]], "pycomplex_asccomplex (c function)": [[15, "c.PyComplex_AsCComplex"]], "pycomplex_check (c function)": [[15, "c.PyComplex_Check"]], "pycomplex_checkexact (c function)": [[15, "c.PyComplex_CheckExact"]], "pycomplex_fromccomplex (c function)": [[15, "c.PyComplex_FromCComplex"]], "pycomplex_fromdoubles (c function)": [[15, "c.PyComplex_FromDoubles"]], "pycomplex_imagasdouble (c function)": [[15, "c.PyComplex_ImagAsDouble"]], "pycomplex_realasdouble (c function)": [[15, "c.PyComplex_RealAsDouble"]], "pycomplex_type (c var)": [[15, "c.PyComplex_Type"]], "py_complex (c type)": [[15, "c.Py_complex"]], "_py_c_diff (c function)": [[15, "c._Py_c_diff"]], "_py_c_neg (c function)": [[15, "c._Py_c_neg"]], "_py_c_pow (c function)": [[15, "c._Py_c_pow"]], "_py_c_prod (c function)": [[15, "c._Py_c_prod"]], "_py_c_quot (c function)": [[15, "c._Py_c_quot"]], "_py_c_sum (c function)": [[15, "c._Py_c_sum"]], "complex number\uff08\u8907\u6578\uff09": [[15, "index-0"], [87, "term-complex-number"], [342, "index-11"], [342, "index-12"]], "mapping\uff08\u5c0d\u6620\uff09": [[16, "index-2"], [87, "term-mapping"], [342, "index-52"], [426, "index-30"], [426, "index-53"], [428, "index-42"], [434, "index-11"]], "numeric\uff08\u6578\u503c\uff09": [[16, "index-0"], [342, "index-11"], [342, "index-12"], [342, "index-14"], [342, "index-15"], [342, "index-8"], [426, "index-53"], [426, "index-9"]], "sequence\uff08\u5e8f\u5217\uff09": [[16, "index-1"], [87, "term-sequence"], [342, "index-18"], [342, "index-19"], [342, "index-20"], [342, "index-22"], [342, "index-23"], [342, "index-24"], [425, "index-6"], [426, "index-15"], [426, "index-53"], [428, "index-42"], [428, "index-45"], [428, "index-80"], [434, "index-10"]], "pycontext (c type)": [[17, "c.PyContext"]], "pycontexttoken (c type)": [[17, "c.PyContextToken"]], "pycontexttoken_checkexact (c function)": [[17, "c.PyContextToken_CheckExact"]], "pycontexttoken_type (c var)": [[17, "c.PyContextToken_Type"]], "pycontextvar (c type)": [[17, "c.PyContextVar"]], "pycontextvar_checkexact (c function)": [[17, "c.PyContextVar_CheckExact"]], "pycontextvar_get (c function)": [[17, "c.PyContextVar_Get"]], "pycontextvar_new (c function)": [[17, "c.PyContextVar_New"]], "pycontextvar_reset (c function)": [[17, "c.PyContextVar_Reset"]], "pycontextvar_set (c function)": [[17, "c.PyContextVar_Set"]], "pycontextvar_type (c var)": [[17, "c.PyContextVar_Type"]], "pycontext_checkexact (c function)": [[17, "c.PyContext_CheckExact"]], "pycontext_copy (c function)": [[17, "c.PyContext_Copy"]], "pycontext_copycurrent (c function)": [[17, "c.PyContext_CopyCurrent"]], "pycontext_enter (c function)": [[17, "c.PyContext_Enter"]], "pycontext_exit (c function)": [[17, "c.PyContext_Exit"]], "pycontext_new (c function)": [[17, "c.PyContext_New"]], "pycontext_type (c var)": [[17, "c.PyContext_Type"]], "pyos_double_to_string (c function)": [[18, "c.PyOS_double_to_string"]], "pyos_snprintf (c function)": [[18, "c.PyOS_snprintf"]], "pyos_stricmp (c function)": [[18, "c.PyOS_stricmp"]], "pyos_string_to_double (c function)": [[18, "c.PyOS_string_to_double"]], "pyos_strnicmp (c function)": [[18, "c.PyOS_strnicmp"]], "pyos_strtol (c function)": [[18, "c.PyOS_strtol"]], "pyos_strtoul (c function)": [[18, "c.PyOS_strtoul"]], "pyos_vsnprintf (c function)": [[18, "c.PyOS_vsnprintf"]], "pycoroobject (c type)": [[19, "c.PyCoroObject"]], "pycoro_checkexact (c function)": [[19, "c.PyCoro_CheckExact"]], "pycoro_new (c function)": [[19, "c.PyCoro_New"]], "pycoro_type (c var)": [[19, "c.PyCoro_Type"]], "pydatetime_check (c function)": [[20, "c.PyDateTime_Check"]], "pydatetime_checkexact (c function)": [[20, "c.PyDateTime_CheckExact"]], "pydatetime_date_get_fold (c function)": [[20, "c.PyDateTime_DATE_GET_FOLD"]], "pydatetime_date_get_hour (c function)": [[20, "c.PyDateTime_DATE_GET_HOUR"]], "pydatetime_date_get_microsecond (c function)": [[20, "c.PyDateTime_DATE_GET_MICROSECOND"]], "pydatetime_date_get_minute (c function)": [[20, "c.PyDateTime_DATE_GET_MINUTE"]], "pydatetime_date_get_second (c function)": [[20, "c.PyDateTime_DATE_GET_SECOND"]], "pydatetime_date_get_tzinfo (c function)": [[20, "c.PyDateTime_DATE_GET_TZINFO"]], "pydatetime_delta_get_days (c function)": [[20, "c.PyDateTime_DELTA_GET_DAYS"]], "pydatetime_delta_get_microseconds (c function)": [[20, "c.PyDateTime_DELTA_GET_MICROSECONDS"]], "pydatetime_delta_get_seconds (c function)": [[20, "c.PyDateTime_DELTA_GET_SECONDS"]], "pydatetime_date (c type)": [[20, "c.PyDateTime_Date"]], "pydatetime_datetime (c type)": [[20, "c.PyDateTime_DateTime"]], "pydatetime_datetimetype (c var)": [[20, "c.PyDateTime_DateTimeType"]], "pydatetime_datetype (c var)": [[20, "c.PyDateTime_DateType"]], "pydatetime_delta (c type)": [[20, "c.PyDateTime_Delta"]], "pydatetime_deltatype (c var)": [[20, "c.PyDateTime_DeltaType"]], "pydatetime_fromdateandtime (c function)": [[20, "c.PyDateTime_FromDateAndTime"]], "pydatetime_fromdateandtimeandfold (c function)": [[20, "c.PyDateTime_FromDateAndTimeAndFold"]], "pydatetime_fromtimestamp (c function)": [[20, "c.PyDateTime_FromTimestamp"]], "pydatetime_get_day (c function)": [[20, "c.PyDateTime_GET_DAY"]], "pydatetime_get_month (c function)": [[20, "c.PyDateTime_GET_MONTH"]], "pydatetime_get_year (c function)": [[20, "c.PyDateTime_GET_YEAR"]], "pydatetime_time_get_fold (c function)": [[20, "c.PyDateTime_TIME_GET_FOLD"]], "pydatetime_time_get_hour (c function)": [[20, "c.PyDateTime_TIME_GET_HOUR"]], "pydatetime_time_get_microsecond (c function)": [[20, "c.PyDateTime_TIME_GET_MICROSECOND"]], "pydatetime_time_get_minute (c function)": [[20, "c.PyDateTime_TIME_GET_MINUTE"]], "pydatetime_time_get_second (c function)": [[20, "c.PyDateTime_TIME_GET_SECOND"]], "pydatetime_time_get_tzinfo (c function)": [[20, "c.PyDateTime_TIME_GET_TZINFO"]], "pydatetime_tzinfotype (c var)": [[20, "c.PyDateTime_TZInfoType"]], "pydatetime_time (c type)": [[20, "c.PyDateTime_Time"]], "pydatetime_timetype (c var)": [[20, "c.PyDateTime_TimeType"]], "pydatetime_timezone_utc (c var)": [[20, "c.PyDateTime_TimeZone_UTC"]], "pydate_check (c function)": [[20, "c.PyDate_Check"]], "pydate_checkexact (c function)": [[20, "c.PyDate_CheckExact"]], "pydate_fromdate (c function)": [[20, "c.PyDate_FromDate"]], "pydate_fromtimestamp (c function)": [[20, "c.PyDate_FromTimestamp"]], "pydelta_check (c function)": [[20, "c.PyDelta_Check"]], "pydelta_checkexact (c function)": [[20, "c.PyDelta_CheckExact"]], "pydelta_fromdsu (c function)": [[20, "c.PyDelta_FromDSU"]], "pytzinfo_check (c function)": [[20, "c.PyTZInfo_Check"]], "pytzinfo_checkexact (c function)": [[20, "c.PyTZInfo_CheckExact"]], "pytimezone_fromoffset (c function)": [[20, "c.PyTimeZone_FromOffset"]], "pytimezone_fromoffsetandname (c function)": [[20, "c.PyTimeZone_FromOffsetAndName"]], "pytime_check (c function)": [[20, "c.PyTime_Check"]], "pytime_checkexact (c function)": [[20, "c.PyTime_CheckExact"]], "pytime_fromtime (c function)": [[20, "c.PyTime_FromTime"]], "pytime_fromtimeandfold (c function)": [[20, "c.PyTime_FromTimeAndFold"]], "pydescr_isdata (c function)": [[21, "c.PyDescr_IsData"]], "pydescr_newclassmethod (c function)": [[21, "c.PyDescr_NewClassMethod"]], "pydescr_newgetset (c function)": [[21, "c.PyDescr_NewGetSet"]], "pydescr_newmember (c function)": [[21, "c.PyDescr_NewMember"]], "pydescr_newmethod (c function)": [[21, "c.PyDescr_NewMethod"]], "pydescr_newwrapper (c function)": [[21, "c.PyDescr_NewWrapper"]], "pyproperty_type (c var)": [[21, "c.PyProperty_Type"]], "pywrapper_new (c function)": [[21, "c.PyWrapper_New"]], "pydictobject (c type)": [[22, "c.PyDictObject"]], "pydictproxy_new (c function)": [[22, "c.PyDictProxy_New"]], "pydict_addwatcher (c function)": [[22, "c.PyDict_AddWatcher"]], "pydict_check (c function)": [[22, "c.PyDict_Check"]], "pydict_checkexact (c function)": [[22, "c.PyDict_CheckExact"]], "pydict_clear (c function)": [[22, "c.PyDict_Clear"]], "pydict_clearwatcher (c function)": [[22, "c.PyDict_ClearWatcher"]], "pydict_contains (c function)": [[22, "c.PyDict_Contains"]], "pydict_copy (c function)": [[22, "c.PyDict_Copy"]], "pydict_delitem (c function)": [[22, "c.PyDict_DelItem"]], "pydict_delitemstring (c function)": [[22, "c.PyDict_DelItemString"]], "pydict_getitem (c function)": [[22, "c.PyDict_GetItem"]], "pydict_getitemstring (c function)": [[22, "c.PyDict_GetItemString"]], "pydict_getitemwitherror (c function)": [[22, "c.PyDict_GetItemWithError"]], "pydict_items (c function)": [[22, "c.PyDict_Items"]], "pydict_keys (c function)": [[22, "c.PyDict_Keys"]], "pydict_merge (c function)": [[22, "c.PyDict_Merge"]], "pydict_mergefromseq2 (c function)": [[22, "c.PyDict_MergeFromSeq2"]], "pydict_new (c function)": [[22, "c.PyDict_New"]], "pydict_next (c function)": [[22, "c.PyDict_Next"]], "pydict_setdefault (c function)": [[22, "c.PyDict_SetDefault"]], "pydict_setitem (c function)": [[22, "c.PyDict_SetItem"]], "pydict_setitemstring (c function)": [[22, "c.PyDict_SetItemString"]], "pydict_size (c function)": [[22, "c.PyDict_Size"]], "pydict_type (c var)": [[22, "c.PyDict_Type"]], "pydict_unwatch (c function)": [[22, "c.PyDict_Unwatch"]], "pydict_update (c function)": [[22, "c.PyDict_Update"]], "pydict_values (c function)": [[22, "c.PyDict_Values"]], "pydict_watch (c function)": [[22, "c.PyDict_Watch"]], "pydict_watchcallback (c type)": [[22, "c.PyDict_WatchCallback"]], "pydict_watchevent (c type)": [[22, "c.PyDict_WatchEvent"]], "built-in function\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[22, "index-1"], [31, "index-1"], [31, "index-2"], [38, "index-1"], [38, "index-2"], [40, "index-0"], [47, "index-0"], [47, "index-1"], [47, "index-2"], [47, "index-3"], [47, "index-4"], [47, "index-5"], [55, "index-1"], [58, "index-0"], [58, "index-1"], [63, "index-1"], [63, "index-2"], [75, "index-3"], [189, "index-1"], [223, "index-2"], [305, "index-1"], [305, "index-2"], [342, "index-13"], [342, "index-20"], [342, "index-22"], [342, "index-52"], [342, "index-63"], [342, "index-64"], [342, "index-65"], [383, "index-4"], [425, "index-8"], [426, "index-1"], [426, "index-100"], [426, "index-101"], [426, "index-102"], [426, "index-103"], [426, "index-104"], [426, "index-105"], [426, "index-15"], [426, "index-19"], [426, "index-27"], [426, "index-30"], [426, "index-42"], [426, "index-55"], [426, "index-69"], [426, "index-77"], [426, "index-78"], [426, "index-80"], [426, "index-86"], [426, "index-98"], [428, "index-53"], [434, "index-3"], [434, "index-44"], [435, "index-6"], [444, "index-0"], [449, "index-0"]], "dictionary\uff08\u5b57\u5178\uff09": [[22, "index-0"], [87, "term-dictionary"], [342, "index-52"], [426, "index-31"], [426, "index-47"], [426, "index-80"], [428, "index-17"], [428, "index-18"], [428, "index-42"], [434, "index-11"]], "len": [[22, "index-1"], [38, "index-1"], [40, "index-0"], [49, "index-8"], [54, "index-0"], [55, "index-1"], [342, "index-20"], [342, "index-52"], [426, "index-15"], [426, "index-27"], [426, "index-30"], [426, "index-98"]], "keyboardinterrupt\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"]], "pep 3151": [[23, "index-9"], [211, "index-9"], [320, "index-0"], [326, "index-0"], [335, "index-2"], [474, "index-10"]], "pyerr_badargument (c function)": [[23, "c.PyErr_BadArgument"]], "pyerr_badinternalcall (c function)": [[23, "c.PyErr_BadInternalCall"]], "pyerr_checksignals (c function)": [[23, "c.PyErr_CheckSignals"]], "pyerr_clear (c function)": [[23, "c.PyErr_Clear"], [35, "index-12"], [35, "index-17"]], "pyerr_displayexception (c function)": [[23, "c.PyErr_DisplayException"]], "pyerr_exceptionmatches (c function)": [[23, "c.PyErr_ExceptionMatches"], [35, "index-17"]], "pyerr_fetch (c function)": [[23, "c.PyErr_Fetch"], [75, "index-1"]], "pyerr_format (c function)": [[23, "c.PyErr_Format"]], "pyerr_formatv (c function)": [[23, "c.PyErr_FormatV"]], "pyerr_getexcinfo (c function)": [[23, "c.PyErr_GetExcInfo"]], "pyerr_gethandledexception (c function)": [[23, "c.PyErr_GetHandledException"]], "pyerr_getraisedexception (c function)": [[23, "c.PyErr_GetRaisedException"]], "pyerr_givenexceptionmatches (c function)": [[23, "c.PyErr_GivenExceptionMatches"]], "pyerr_newexception (c function)": [[23, "c.PyErr_NewException"]], "pyerr_newexceptionwithdoc (c function)": [[23, "c.PyErr_NewExceptionWithDoc"]], "pyerr_nomemory (c function)": [[23, "c.PyErr_NoMemory"]], "pyerr_normalizeexception (c function)": [[23, "c.PyErr_NormalizeException"]], "pyerr_occurred (c function)": [[23, "c.PyErr_Occurred"], [35, "index-11"]], "pyerr_print (c function)": [[23, "c.PyErr_Print"]], "pyerr_printex (c function)": [[23, "c.PyErr_PrintEx"]], "pyerr_resourcewarning (c function)": [[23, "c.PyErr_ResourceWarning"]], "pyerr_restore (c function)": [[23, "c.PyErr_Restore"], [75, "index-1"]], "pyerr_setexcfromwindowserr (c function)": [[23, "c.PyErr_SetExcFromWindowsErr"]], "pyerr_setexcfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilename"]], "pyerr_setexcfromwindowserrwithfilenameobject (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObject"]], "pyerr_setexcfromwindowserrwithfilenameobjects (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects"]], "pyerr_setexcinfo (c function)": [[23, "c.PyErr_SetExcInfo"]], "pyerr_setfromerrno (c function)": [[23, "c.PyErr_SetFromErrno"]], "pyerr_setfromerrnowithfilename (c function)": [[23, "c.PyErr_SetFromErrnoWithFilename"]], "pyerr_setfromerrnowithfilenameobject (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObject"]], "pyerr_setfromerrnowithfilenameobjects (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObjects"]], "pyerr_setfromwindowserr (c function)": [[23, "c.PyErr_SetFromWindowsErr"]], "pyerr_setfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetFromWindowsErrWithFilename"]], "pyerr_sethandledexception (c function)": [[23, "c.PyErr_SetHandledException"]], "pyerr_setimporterror (c function)": [[23, "c.PyErr_SetImportError"]], "pyerr_setimporterrorsubclass (c function)": [[23, "c.PyErr_SetImportErrorSubclass"]], "pyerr_setinterrupt (c function)": [[23, "c.PyErr_SetInterrupt"]], "pyerr_setinterruptex (c function)": [[23, "c.PyErr_SetInterruptEx"]], "pyerr_setnone (c function)": [[23, "c.PyErr_SetNone"]], "pyerr_setobject (c function)": [[23, "c.PyErr_SetObject"]], "pyerr_setraisedexception (c function)": [[23, "c.PyErr_SetRaisedException"]], "pyerr_setstring (c function)": [[23, "c.PyErr_SetString"], [35, "index-12"]], "pyerr_syntaxlocation (c function)": [[23, "c.PyErr_SyntaxLocation"]], "pyerr_syntaxlocationex (c function)": [[23, "c.PyErr_SyntaxLocationEx"]], "pyerr_syntaxlocationobject (c function)": [[23, "c.PyErr_SyntaxLocationObject"]], "pyerr_warnex (c function)": [[23, "c.PyErr_WarnEx"]], "pyerr_warnexplicit (c function)": [[23, "c.PyErr_WarnExplicit"]], "pyerr_warnexplicitobject (c function)": [[23, "c.PyErr_WarnExplicitObject"]], "pyerr_warnformat (c function)": [[23, "c.PyErr_WarnFormat"]], "pyerr_writeunraisable (c function)": [[23, "c.PyErr_WriteUnraisable"]], "pyexc_arithmeticerror (c var)": [[23, "index-4"]], "pyexc_assertionerror (c var)": [[23, "index-4"]], "pyexc_attributeerror (c var)": [[23, "index-4"]], "pyexc_baseexception (c var)": [[23, "index-4"]], "pyexc_blockingioerror (c var)": [[23, "index-4"]], "pyexc_brokenpipeerror (c var)": [[23, "index-4"]], "pyexc_buffererror (c var)": [[23, "index-4"]], "pyexc_byteswarning (c var)": [[23, "index-7"]], "pyexc_childprocesserror (c var)": [[23, "index-4"]], "pyexc_connectionabortederror (c var)": [[23, "index-4"]], "pyexc_connectionerror (c var)": [[23, "index-4"]], "pyexc_connectionrefusederror (c var)": [[23, "index-4"]], "pyexc_connectionreseterror (c var)": [[23, "index-4"]], "pyexc_deprecationwarning (c var)": [[23, "index-7"]], "pyexc_eoferror (c var)": [[23, "index-4"]], "pyexc_environmenterror (c var)": [[23, "index-6"]], "pyexc_exception (c var)": [[23, "index-4"]], "pyexc_fileexistserror (c var)": [[23, "index-4"]], "pyexc_filenotfounderror (c var)": [[23, "index-4"]], "pyexc_floatingpointerror (c var)": [[23, "index-4"]], "pyexc_futurewarning (c var)": [[23, "index-7"]], "pyexc_generatorexit (c var)": [[23, "index-4"]], "pyexc_ioerror (c var)": [[23, "index-6"]], "pyexc_importerror (c var)": [[23, "index-4"]], "pyexc_importwarning (c var)": [[23, "index-7"]], "pyexc_indentationerror (c var)": [[23, "index-4"]], "pyexc_indexerror (c var)": [[23, "index-4"]], "pyexc_interruptederror (c var)": [[23, "index-4"]], "pyexc_isadirectoryerror (c var)": [[23, "index-4"]], "pyexc_keyerror (c var)": [[23, "index-4"]], "pyexc_keyboardinterrupt (c var)": [[23, "index-4"]], "pyexc_lookuperror (c var)": [[23, "index-4"]], "pyexc_memoryerror (c var)": [[23, "index-4"]], "pyexc_modulenotfounderror (c var)": [[23, "index-4"]], "pyexc_nameerror (c var)": [[23, "index-4"]], "pyexc_notadirectoryerror (c var)": [[23, "index-4"]], "pyexc_notimplementederror (c var)": [[23, "index-4"]], "pyexc_oserror (c var)": [[23, "index-4"]], "pyexc_overflowerror (c var)": [[23, "index-4"]], "pyexc_pendingdeprecationwarning (c var)": [[23, "index-7"]], "pyexc_permissionerror (c var)": [[23, "index-4"]], "pyexc_processlookuperror (c var)": [[23, "index-4"]], "pyexc_recursionerror (c var)": [[23, "index-4"]], "pyexc_referenceerror (c var)": [[23, "index-4"]], "pyexc_resourcewarning (c var)": [[23, "index-7"]], "pyexc_runtimeerror (c var)": [[23, "index-4"]], "pyexc_runtimewarning (c var)": [[23, "index-7"]], "pyexc_stopasynciteration (c var)": [[23, "index-4"]], "pyexc_stopiteration (c var)": [[23, "index-4"]], "pyexc_syntaxerror (c var)": [[23, "index-4"]], "pyexc_syntaxwarning (c var)": [[23, "index-7"]], "pyexc_systemerror (c var)": [[23, "index-4"]], "pyexc_systemexit (c var)": [[23, "index-4"]], "pyexc_taberror (c var)": [[23, "index-4"]], "pyexc_timeouterror (c var)": [[23, "index-4"]], "pyexc_typeerror (c var)": [[23, "index-4"]], "pyexc_unboundlocalerror (c var)": [[23, "index-4"]], "pyexc_unicodedecodeerror (c var)": [[23, "index-4"]], "pyexc_unicodeencodeerror (c var)": [[23, "index-4"]], "pyexc_unicodeerror (c var)": [[23, "index-4"]], "pyexc_unicodetranslateerror (c var)": [[23, "index-4"]], "pyexc_unicodewarning (c var)": [[23, "index-7"]], "pyexc_userwarning (c var)": [[23, "index-7"]], "pyexc_valueerror (c var)": [[23, "index-4"]], "pyexc_warning (c var)": [[23, "index-7"]], "pyexc_windowserror (c var)": [[23, "index-6"]], "pyexc_zerodivisionerror (c var)": [[23, "index-4"]], "pyexception_getargs (c function)": [[23, "c.PyException_GetArgs"]], "pyexception_getcause (c function)": [[23, "c.PyException_GetCause"]], "pyexception_getcontext (c function)": [[23, "c.PyException_GetContext"]], "pyexception_gettraceback (c function)": [[23, "c.PyException_GetTraceback"]], "pyexception_setargs (c function)": [[23, "c.PyException_SetArgs"]], "pyexception_setcause (c function)": [[23, "c.PyException_SetCause"]], "pyexception_setcontext (c function)": [[23, "c.PyException_SetContext"]], "pyexception_settraceback (c function)": [[23, "c.PyException_SetTraceback"]], "pysignal_setwakeupfd (c function)": [[23, "c.PySignal_SetWakeupFd"]], "pyunicodedecodeerror_create (c function)": [[23, "c.PyUnicodeDecodeError_Create"]], "pyunicodedecodeerror_getencoding (c function)": [[23, "c.PyUnicodeDecodeError_GetEncoding"]], "pyunicodedecodeerror_getend (c function)": [[23, "c.PyUnicodeDecodeError_GetEnd"]], "pyunicodedecodeerror_getobject (c function)": [[23, "c.PyUnicodeDecodeError_GetObject"]], "pyunicodedecodeerror_getreason (c function)": [[23, "c.PyUnicodeDecodeError_GetReason"]], "pyunicodedecodeerror_getstart (c function)": [[23, "c.PyUnicodeDecodeError_GetStart"]], "pyunicodedecodeerror_setend (c function)": [[23, "c.PyUnicodeDecodeError_SetEnd"]], "pyunicodedecodeerror_setreason (c function)": [[23, "c.PyUnicodeDecodeError_SetReason"]], "pyunicodedecodeerror_setstart (c function)": [[23, "c.PyUnicodeDecodeError_SetStart"]], "pyunicodeencodeerror_getencoding (c function)": [[23, "c.PyUnicodeEncodeError_GetEncoding"]], "pyunicodeencodeerror_getend (c function)": [[23, "c.PyUnicodeEncodeError_GetEnd"]], "pyunicodeencodeerror_getobject (c function)": [[23, "c.PyUnicodeEncodeError_GetObject"]], "pyunicodeencodeerror_getreason (c function)": [[23, "c.PyUnicodeEncodeError_GetReason"]], "pyunicodeencodeerror_getstart (c function)": [[23, "c.PyUnicodeEncodeError_GetStart"]], "pyunicodeencodeerror_setend (c function)": [[23, "c.PyUnicodeEncodeError_SetEnd"]], "pyunicodeencodeerror_setreason (c function)": [[23, "c.PyUnicodeEncodeError_SetReason"]], "pyunicodeencodeerror_setstart (c function)": [[23, "c.PyUnicodeEncodeError_SetStart"]], "pyunicodetranslateerror_getend (c function)": [[23, "c.PyUnicodeTranslateError_GetEnd"]], "pyunicodetranslateerror_getobject (c function)": [[23, "c.PyUnicodeTranslateError_GetObject"]], "pyunicodetranslateerror_getreason (c function)": [[23, "c.PyUnicodeTranslateError_GetReason"]], "pyunicodetranslateerror_getstart (c function)": [[23, "c.PyUnicodeTranslateError_GetStart"]], "pyunicodetranslateerror_setend (c function)": [[23, "c.PyUnicodeTranslateError_SetEnd"]], "pyunicodetranslateerror_setreason (c function)": [[23, "c.PyUnicodeTranslateError_SetReason"]], "pyunicodetranslateerror_setstart (c function)": [[23, "c.PyUnicodeTranslateError_SetStart"]], "pyunstable_exc_prepreraisestar (c function)": [[23, "c.PyUnstable_Exc_PrepReraiseStar"]], "py_enterrecursivecall (c function)": [[23, "c.Py_EnterRecursiveCall"]], "py_leaverecursivecall (c function)": [[23, "c.Py_LeaveRecursiveCall"]], "py_reprenter (c function)": [[23, "c.Py_ReprEnter"]], "py_reprleave (c function)": [[23, "c.Py_ReprLeave"]], "sigint (c macro)": [[23, "index-1"], [23, "index-2"]], "module\uff08\u6a21\u7d44\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [35, "index-18"], [45, "index-0"], [87, "term-module"], [113, "index-2"], [144, "index-0"], [152, "index-1"], [169, "index-0"], [170, "index-0"], [211, "index-5"], [218, "index-1"], [218, "index-3"], [223, "index-13"], [223, "index-8"], [240, "index-1"], [254, "index-1"], [263, "index-0"], [264, "index-0"], [272, "index-0"], [291, "index-23"], [291, "index-30"], [292, "index-2"], [295, "index-1"], [304, "index-0"], [308, "index-0"], [312, "index-1"], [322, "index-0"], [322, "index-4"], [328, "index-0"], [328, "index-1"], [332, "index-0"], [335, "index-14"], [350, "index-21"], [425, "index-11"], [426, "index-23"], [426, "index-24"], [426, "index-32"], [426, "index-4"], [426, "index-44"], [426, "index-45"], [426, "index-55"], [427, "index-10"], [428, "index-40"], [434, "index-34"], [435, "index-2"], [435, "index-3"], [444, "index-1"], [448, "index-0"], [448, "index-4"], [448, "index-7"]], "signal\uff08\u8a0a\u865f\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [113, "index-2"]], "strerror (c function)": [[23, "index-0"]], "eoferror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[24, "index-1"]], "pyfile_fromfd (c function)": [[24, "c.PyFile_FromFd"]], "pyfile_getline (c function)": [[24, "c.PyFile_GetLine"]], "pyfile_setopencodehook (c function)": [[24, "c.PyFile_SetOpenCodeHook"]], "pyfile_setopencodehook.py_opencodehookfunction (c type)": [[24, "c.PyFile_SetOpenCodeHook.Py_OpenCodeHookFunction"]], "pyfile_writeobject (c function)": [[24, "c.PyFile_WriteObject"]], "pyfile_writestring (c function)": [[24, "c.PyFile_WriteString"]], "pyobject_asfiledescriptor (c function)": [[24, "c.PyObject_AsFileDescriptor"]], "py_print_raw (c macro)": [[24, "index-2"], [49, "c.Py_PRINT_RAW"]], "file\uff08\u6a94\u6848\uff09": [[24, "index-0"], [165, "index-0"], [223, "index-6"], [274, "index-2"], [295, "index-2"], [302, "index-0"], [304, "index-1"], [309, "index-0"], [330, "index-0"], [332, "index-4"], [358, "index-0"], [444, "index-0"]], "pyfloatobject (c type)": [[25, "c.PyFloatObject"]], "pyfloat_as_double (c function)": [[25, "c.PyFloat_AS_DOUBLE"]], "pyfloat_asdouble (c function)": [[25, "c.PyFloat_AsDouble"]], "pyfloat_check (c function)": [[25, "c.PyFloat_Check"]], "pyfloat_checkexact (c function)": [[25, "c.PyFloat_CheckExact"]], "pyfloat_fromdouble (c function)": [[25, "c.PyFloat_FromDouble"]], "pyfloat_fromstring (c function)": [[25, "c.PyFloat_FromString"]], "pyfloat_getinfo (c function)": [[25, "c.PyFloat_GetInfo"]], "pyfloat_getmax (c function)": [[25, "c.PyFloat_GetMax"]], "pyfloat_getmin (c function)": [[25, "c.PyFloat_GetMin"]], "pyfloat_pack2 (c function)": [[25, "c.PyFloat_Pack2"]], "pyfloat_pack4 (c function)": [[25, "c.PyFloat_Pack4"]], "pyfloat_pack8 (c function)": [[25, "c.PyFloat_Pack8"]], "pyfloat_type (c var)": [[25, "c.PyFloat_Type"]], "pyfloat_unpack2 (c function)": [[25, "c.PyFloat_Unpack2"]], "pyfloat_unpack4 (c function)": [[25, "c.PyFloat_Unpack4"]], "pyfloat_unpack8 (c function)": [[25, "c.PyFloat_Unpack8"]], "floating point\uff08\u6d6e\u9ede\uff09": [[25, "index-0"], [426, "index-13"]], "pep 523": [[26, "index-0"], [33, "index-39"], [33, "index-40"], [471, "index-118"], [472, "index-41"], [477, "index-25"], [477, "index-26"], [480, "index-24"], [481, "index-252"], [481, "index-257"], [481, "index-265"], [481, "index-5"]], "pyframeobject (c type)": [[26, "c.PyFrameObject"]], "pyframe_check (c function)": [[26, "c.PyFrame_Check"]], "pyframe_getback (c function)": [[26, "c.PyFrame_GetBack"]], "pyframe_getbuiltins (c function)": [[26, "c.PyFrame_GetBuiltins"]], "pyframe_getcode (c function)": [[26, "c.PyFrame_GetCode"]], "pyframe_getgenerator (c function)": [[26, "c.PyFrame_GetGenerator"]], "pyframe_getglobals (c function)": [[26, "c.PyFrame_GetGlobals"]], "pyframe_getlasti (c function)": [[26, "c.PyFrame_GetLasti"]], "pyframe_getlinenumber (c function)": [[26, "c.PyFrame_GetLineNumber"]], "pyframe_getlocals (c function)": [[26, "c.PyFrame_GetLocals"]], "pyframe_getvar (c function)": [[26, "c.PyFrame_GetVar"]], "pyframe_getvarstring (c function)": [[26, "c.PyFrame_GetVarString"]], "pyframe_type (c var)": [[26, "c.PyFrame_Type"]], "pyunstable_interpreterframe_getcode (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetCode"]], "pyunstable_interpreterframe_getlasti (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetLasti"]], "pyunstable_interpreterframe_getline (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetLine"]], "_pyinterpreterframe (c struct)": [[26, "c._PyInterpreterFrame"]], "methodtype\uff08types \u6a21\u7d44\u4e2d\uff09": [[27, "index-1"], [44, "index-2"], [45, "index-1"]], "pyfunctionobject (c type)": [[27, "c.PyFunctionObject"]], "pyfunction_addwatcher (c function)": [[27, "c.PyFunction_AddWatcher"]], "pyfunction_check (c function)": [[27, "c.PyFunction_Check"]], "pyfunction_clearwatcher (c function)": [[27, "c.PyFunction_ClearWatcher"]], "pyfunction_getannotations (c function)": [[27, "c.PyFunction_GetAnnotations"]], "pyfunction_getclosure (c function)": [[27, "c.PyFunction_GetClosure"]], "pyfunction_getcode (c function)": [[27, "c.PyFunction_GetCode"]], "pyfunction_getdefaults (c function)": [[27, "c.PyFunction_GetDefaults"]], "pyfunction_getglobals (c function)": [[27, "c.PyFunction_GetGlobals"]], "pyfunction_getmodule (c function)": [[27, "c.PyFunction_GetModule"]], "pyfunction_new (c function)": [[27, "c.PyFunction_New"]], "pyfunction_newwithqualname (c function)": [[27, "c.PyFunction_NewWithQualName"]], "pyfunction_setannotations (c function)": [[27, "c.PyFunction_SetAnnotations"]], "pyfunction_setclosure (c function)": [[27, "c.PyFunction_SetClosure"]], "pyfunction_setdefaults (c function)": [[27, "c.PyFunction_SetDefaults"]], "pyfunction_setvectorcall (c function)": [[27, "c.PyFunction_SetVectorcall"]], "pyfunction_type (c var)": [[27, "c.PyFunction_Type"]], "pyfunction_watchcallback (c type)": [[27, "c.PyFunction_WatchCallback"]], "pyfunction_watchevent (c type)": [[27, "c.PyFunction_WatchEvent"]], "function\uff08\u51fd\u5f0f\uff09": [[27, "index-0"], [87, "term-function"], [439, "index-6"]], "pygc_collect (c function)": [[28, "c.PyGC_Collect"]], "pygc_disable (c function)": [[28, "c.PyGC_Disable"]], "pygc_enable (c function)": [[28, "c.PyGC_Enable"]], "pygc_isenabled (c function)": [[28, "c.PyGC_IsEnabled"]], "pyobject_gc_del (c function)": [[28, "c.PyObject_GC_Del"]], "pyobject_gc_isfinalized (c function)": [[28, "c.PyObject_GC_IsFinalized"]], "pyobject_gc_istracked (c function)": [[28, "c.PyObject_GC_IsTracked"]], "pyobject_gc_new (c macro)": [[28, "c.PyObject_GC_New"]], "pyobject_gc_newvar (c macro)": [[28, "c.PyObject_GC_NewVar"]], "pyobject_gc_resize (c macro)": [[28, "c.PyObject_GC_Resize"]], "pyobject_gc_track (c function)": [[28, "c.PyObject_GC_Track"]], "pyobject_gc_untrack (c function)": [[28, "c.PyObject_GC_UnTrack"]], "pyobject_is_gc (c function)": [[28, "c.PyObject_IS_GC"]], "pyunstable_gc_visitobjects (c function)": [[28, "c.PyUnstable_GC_VisitObjects"]], "pyunstable_object_gc_newwithextradata (c function)": [[28, "c.PyUnstable_Object_GC_NewWithExtraData"]], "py_visit (c function)": [[28, "c.Py_VISIT"]], "gcvisitobjects_t (c type)": [[28, "c.gcvisitobjects_t"]], "inquiry (c type)": [[28, "c.inquiry"]], "traverseproc (c type)": [[28, "c.traverseproc"]], "visitproc (c type)": [[28, "c.visitproc"]], "pygenobject (c type)": [[29, "c.PyGenObject"]], "pygen_check (c function)": [[29, "c.PyGen_Check"]], "pygen_checkexact (c function)": [[29, "c.PyGen_CheckExact"]], "pygen_new (c function)": [[29, "c.PyGen_New"]], "pygen_newwithqualname (c function)": [[29, "c.PyGen_NewWithQualName"]], "pygen_type (c var)": [[29, "c.PyGen_Type"]], "pep 456": [[30, "index-0"], [475, "index-13"], [475, "index-47"]], "pyhash_funcdef (c type)": [[30, "c.PyHash_FuncDef"]], "pyhash_funcdef.hash_bits (c member)": [[30, "c.PyHash_FuncDef.hash_bits"]], "pyhash_funcdef.name (c member)": [[30, "c.PyHash_FuncDef.name"]], "pyhash_funcdef.seed_bits (c member)": [[30, "c.PyHash_FuncDef.seed_bits"]], "pyhash_getfuncdef (c function)": [[30, "c.PyHash_GetFuncDef"]], "py_hash_t (c type)": [[30, "c.Py_hash_t"]], "py_uhash_t (c type)": [[30, "c.Py_uhash_t"]], "pep 3147": [[31, "index-3"], [85, "index-3"], [161, "index-0"], [161, "index-2"], [161, "index-3"], [248, "index-11"], [248, "index-21"], [248, "index-23"], [248, "index-24"], [309, "index-1"], [309, "index-4"], [322, "index-2"], [360, "index-3"], [430, "index-13"], [448, "index-16"], [473, "index-5"], [474, "index-18"]], "pyimport_addmodule (c function)": [[31, "c.PyImport_AddModule"]], "pyimport_addmoduleobject (c function)": [[31, "c.PyImport_AddModuleObject"]], "pyimport_appendinittab (c function)": [[31, "c.PyImport_AppendInittab"]], "pyimport_execcodemodule (c function)": [[31, "c.PyImport_ExecCodeModule"]], "pyimport_execcodemoduleex (c function)": [[31, "c.PyImport_ExecCodeModuleEx"]], "pyimport_execcodemoduleobject (c function)": [[31, "c.PyImport_ExecCodeModuleObject"]], "pyimport_execcodemodulewithpathnames (c function)": [[31, "c.PyImport_ExecCodeModuleWithPathnames"]], "pyimport_extendinittab (c function)": [[31, "c.PyImport_ExtendInittab"]], "pyimport_frozenmodules (c var)": [[31, "c.PyImport_FrozenModules"]], "pyimport_getimporter (c function)": [[31, "c.PyImport_GetImporter"]], "pyimport_getmagicnumber (c function)": [[31, "c.PyImport_GetMagicNumber"]], "pyimport_getmagictag (c function)": [[31, "c.PyImport_GetMagicTag"]], "pyimport_getmodule (c function)": [[31, "c.PyImport_GetModule"]], "pyimport_getmoduledict (c function)": [[31, "c.PyImport_GetModuleDict"]], "pyimport_import (c function)": [[31, "c.PyImport_Import"]], "pyimport_importfrozenmodule (c function)": [[31, "c.PyImport_ImportFrozenModule"]], "pyimport_importfrozenmoduleobject (c function)": [[31, "c.PyImport_ImportFrozenModuleObject"]], "pyimport_importmodule (c function)": [[31, "c.PyImport_ImportModule"]], "pyimport_importmoduleex (c function)": [[31, "c.PyImport_ImportModuleEx"]], "pyimport_importmodulelevel (c function)": [[31, "c.PyImport_ImportModuleLevel"]], "pyimport_importmodulelevelobject (c function)": [[31, "c.PyImport_ImportModuleLevelObject"]], "pyimport_importmodulenoblock (c function)": [[31, "c.PyImport_ImportModuleNoBlock"]], "pyimport_reloadmodule (c function)": [[31, "c.PyImport_ReloadModule"]], "__all__": [[31, "index-0"], [448, "index-8"]], "__all__\uff08\u5957\u4ef6\u8b8a\u6578\uff09": [[31, "index-0"]], "__import__": [[31, "index-1"]], "_frozen (c struct)": [[31, "c._frozen"]], "_inittab (c struct)": [[31, "c._inittab"]], "_inittab.name (c member)": [[31, "c._inittab.name"]], "compile\uff08\u7de8\u8b6f\uff09": [[31, "index-2"], [342, "index-63"], [383, "index-4"], [434, "index-44"]], "freeze utility\uff08\u51cd\u7d50\u5de5\u5177\uff09": [[31, "index-4"]], "modules\uff08sys \u6a21\u7d44\u4e2d\uff09": [[31, "index-0"], [33, "index-15"]], "package variable\uff08\u5957\u4ef6\u8b8a\u6578\uff09": [[31, "index-0"]], "pep 489": [[33, "index-41"], [45, "index-8"], [71, "index-1"], [73, "index-0"], [248, "index-17"], [248, "index-18"], [248, "index-19"], [248, "index-20"], [248, "index-26"], [248, "index-8"], [476, "index-26"], [476, "index-28"], [476, "index-45"], [481, "index-110"], [481, "index-111"], [481, "index-113"], [481, "index-116"], [481, "index-118"], [481, "index-119"], [481, "index-120"], [481, "index-121"], [481, "index-122"], [481, "index-123"], [481, "index-124"], [481, "index-125"], [481, "index-126"], [481, "index-127"], [481, "index-128"], [481, "index-129"], [481, "index-130"], [481, "index-131"], [481, "index-133"], [481, "index-138"], [481, "index-139"], [481, "index-140"], [481, "index-141"], [481, "index-142"], [481, "index-143"], [481, "index-144"], [481, "index-145"], [481, "index-146"], [481, "index-147"], [481, "index-148"], [481, "index-152"], [481, "index-153"], [481, "index-154"], [481, "index-158"], [481, "index-159"], [481, "index-160"], [481, "index-164"], [481, "index-165"], [481, "index-166"], [481, "index-167"], [481, "index-168"], [481, "index-176"], [481, "index-177"], [481, "index-178"], [481, "index-181"], [481, "index-183"], [481, "index-185"], [481, "index-192"], [481, "index-193"], [481, "index-194"], [481, "index-195"], [481, "index-196"], [481, "index-201"], [481, "index-28"]], "pep 528": [[33, "index-70"], [34, "index-17"], [459, "index-16"], [477, "index-22"]], "pep 529": [[33, "index-69"], [64, "index-5"], [291, "index-27"], [350, "index-44"], [350, "index-9"], [453, "index-54"], [459, "index-17"], [477, "index-20"], [479, "index-19"], [481, "index-205"], [481, "index-259"], [481, "index-61"]], "pep 539": [[33, "index-48"], [478, "index-14"], [478, "index-15"], [481, "index-246"]], "pep 554": [[33, "index-47"], [472, "index-10"]], "pythondebug": [[33, "index-62"], [34, "index-22"], [453, "envvar-PYTHONDEBUG"], [453, "index-2"], [454, "index-6"]], "pythondontwritebytecode": [[33, "index-63"], [34, "index-32"], [85, "index-4"], [350, "index-6"], [453, "envvar-PYTHONDONTWRITEBYTECODE"], [453, "index-1"], [466, "index-20"], [466, "index-24"]], "pythonhashseed": [[33, "index-3"], [33, "index-64"], [34, "index-11"], [426, "index-114"], [453, "envvar-PYTHONHASHSEED"], [453, "index-13"], [453, "index-14"], [453, "index-35"], [474, "index-23"], [474, "index-35"], [481, "index-235"]], "pythonhome": [[33, "index-30"], [33, "index-31"], [33, "index-66"], [34, "index-12"], [35, "index-43"], [35, "index-45"], [352, "index-2"], [352, "index-4"], [360, "index-0"], [453, "envvar-PYTHONHOME"], [453, "index-28"], [453, "index-29"], [453, "index-32"], [453, "index-4"], [459, "index-33"], [459, "index-35"], [459, "index-37"], [472, "index-62"], [477, "index-2"]], "pythoninspect": [[33, "index-67"], [34, "index-14"], [453, "envvar-PYTHONINSPECT"], [453, "index-6"], [463, "index-28"]], "pythonioencoding": [[33, "index-17"], [33, "index-18"], [34, "index-26"], [291, "index-1"], [350, "index-35"], [453, "envvar-PYTHONIOENCODING"], [453, "index-41"], [466, "index-21"], [475, "index-53"]], "pythonlegacywindowsfsencoding": [[33, "index-68"], [34, "index-1"], [350, "index-33"], [453, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [477, "index-19"]], "pythonlegacywindowsstdio": [[33, "index-9"], [34, "index-16"], [350, "index-37"], [453, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [453, "index-36"], [477, "index-21"]], "pythonnousersite": [[33, "index-71"], [34, "index-29"], [332, "index-6"], [453, "envvar-PYTHONNOUSERSITE"], [466, "index-6"]], "pythonoptimize": [[33, "index-72"], [34, "index-21"], [453, "envvar-PYTHONOPTIMIZE"], [453, "index-8"]], "pythonpath": [[33, "index-65"], [34, "index-20"], [35, "index-44"], [35, "index-46"], [71, "index-0"], [149, "index-4"], [350, "index-22"], [350, "index-23"], [352, "index-0"], [352, "index-1"], [360, "index-1"], [430, "index-17"], [430, "index-18"], [448, "index-14"], [448, "index-17"], [448, "index-18"], [453, "envvar-PYTHONPATH"], [453, "index-3"], [453, "index-31"], [453, "index-33"], [453, "index-34"], [457, "index-0"], [459, "index-11"], [459, "index-32"], [459, "index-34"], [459, "index-36"], [475, "index-55"], [475, "index-56"]], "pythonunbuffered": [[33, "index-73"], [34, "index-5"], [350, "index-38"], [453, "envvar-PYTHONUNBUFFERED"], [453, "index-52"], [481, "index-202"]], "pythonverbose": [[33, "index-74"], [34, "index-30"], [453, "envvar-PYTHONVERBOSE"], [453, "index-53"]], "pyeval_acquirelock (c function)": [[33, "c.PyEval_AcquireLock"]], "pyeval_acquirethread (c function)": [[33, "c.PyEval_AcquireThread"]], "pyeval_acquirethread()": [[33, "index-37"]], "pyeval_initthreads (c function)": [[33, "c.PyEval_InitThreads"]], "pyeval_initthreads()": [[33, "index-15"]], "pyeval_releaselock (c function)": [[33, "c.PyEval_ReleaseLock"]], "pyeval_releasethread (c function)": [[33, "c.PyEval_ReleaseThread"]], "pyeval_releasethread()": [[33, "index-37"]], "pyeval_restorethread (c function)": [[33, "c.PyEval_RestoreThread"], [33, "index-36"]], "pyeval_restorethread()": [[33, "index-37"]], "pyeval_savethread (c function)": [[33, "c.PyEval_SaveThread"], [33, "index-36"]], "pyeval_savethread()": [[33, "index-37"]], "pyeval_setprofile (c function)": [[33, "c.PyEval_SetProfile"]], "pyeval_setprofileallthreads (c function)": [[33, "c.PyEval_SetProfileAllThreads"]], "pyeval_settrace (c function)": [[33, "c.PyEval_SetTrace"]], "pyeval_settraceallthreads (c function)": [[33, "c.PyEval_SetTraceAllThreads"]], "pyeval_threadsinitialized (c function)": [[33, "c.PyEval_ThreadsInitialized"]], "pygilstate_check (c function)": [[33, "c.PyGILState_Check"]], "pygilstate_ensure (c function)": [[33, "c.PyGILState_Ensure"]], "pygilstate_getthisthreadstate (c function)": [[33, "c.PyGILState_GetThisThreadState"]], "pygilstate_release (c function)": [[33, "c.PyGILState_Release"]], "pyinterpreterconfig (c type)": [[33, "c.PyInterpreterConfig"]], "pyinterpreterconfig.allow_daemon_threads (c member)": [[33, "c.PyInterpreterConfig.allow_daemon_threads"]], "pyinterpreterconfig.allow_exec (c member)": [[33, "c.PyInterpreterConfig.allow_exec"]], "pyinterpreterconfig.allow_fork (c member)": [[33, "c.PyInterpreterConfig.allow_fork"]], "pyinterpreterconfig.allow_threads (c member)": [[33, "c.PyInterpreterConfig.allow_threads"]], "pyinterpreterconfig.check_multi_interp_extensions (c member)": [[33, "c.PyInterpreterConfig.check_multi_interp_extensions"]], "pyinterpreterconfig.gil (c member)": [[33, "c.PyInterpreterConfig.gil"]], "pyinterpreterconfig.use_main_obmalloc (c member)": [[33, "c.PyInterpreterConfig.use_main_obmalloc"]], "pyinterpreterconfig_default_gil (c macro)": [[33, "c.PyInterpreterConfig_DEFAULT_GIL"]], "pyinterpreterconfig_own_gil (c macro)": [[33, "c.PyInterpreterConfig_OWN_GIL"]], "pyinterpreterconfig_shared_gil (c macro)": [[33, "c.PyInterpreterConfig_SHARED_GIL"]], "pyinterpreterstate (c type)": [[33, "c.PyInterpreterState"]], "pyinterpreterstate_clear (c function)": [[33, "c.PyInterpreterState_Clear"]], "pyinterpreterstate_delete (c function)": [[33, "c.PyInterpreterState_Delete"]], "pyinterpreterstate_get (c function)": [[33, "c.PyInterpreterState_Get"]], "pyinterpreterstate_getdict (c function)": [[33, "c.PyInterpreterState_GetDict"]], "pyinterpreterstate_getid (c function)": [[33, "c.PyInterpreterState_GetID"]], "pyinterpreterstate_head (c function)": [[33, "c.PyInterpreterState_Head"]], "pyinterpreterstate_main (c function)": [[33, "c.PyInterpreterState_Main"]], "pyinterpreterstate_new (c function)": [[33, "c.PyInterpreterState_New"]], "pyinterpreterstate_next (c function)": [[33, "c.PyInterpreterState_Next"]], "pyinterpreterstate_threadhead (c function)": [[33, "c.PyInterpreterState_ThreadHead"]], "pysys_setargv (c function)": [[33, "c.PySys_SetArgv"], [33, "index-15"]], "pysys_setargvex (c function)": [[33, "c.PySys_SetArgvEx"], [33, "index-15"]], "pythreadstate (c type)": [[33, "c.PyThreadState"], [33, "index-34"]], "pythreadstate.interp (c member)": [[33, "c.PyThreadState.interp"]], "pythreadstate_clear (c function)": [[33, "c.PyThreadState_Clear"]], "pythreadstate_delete (c function)": [[33, "c.PyThreadState_Delete"]], "pythreadstate_deletecurrent (c function)": [[33, "c.PyThreadState_DeleteCurrent"]], "pythreadstate_entertracing (c function)": [[33, "c.PyThreadState_EnterTracing"]], "pythreadstate_get (c function)": [[33, "c.PyThreadState_Get"]], "pythreadstate_getdict (c function)": [[33, "c.PyThreadState_GetDict"]], "pythreadstate_getframe (c function)": [[33, "c.PyThreadState_GetFrame"]], "pythreadstate_getid (c function)": [[33, "c.PyThreadState_GetID"]], "pythreadstate_getinterpreter (c function)": [[33, "c.PyThreadState_GetInterpreter"]], "pythreadstate_leavetracing (c function)": [[33, "c.PyThreadState_LeaveTracing"]], "pythreadstate_new (c function)": [[33, "c.PyThreadState_New"]], "pythreadstate_next (c function)": [[33, "c.PyThreadState_Next"]], "pythreadstate_setasyncexc (c function)": [[33, "c.PyThreadState_SetAsyncExc"]], "pythreadstate_swap (c function)": [[33, "c.PyThreadState_Swap"]], "pythread_reinittls (c function)": [[33, "c.PyThread_ReInitTLS"]], "pythread_create_key (c function)": [[33, "c.PyThread_create_key"]], "pythread_delete_key (c function)": [[33, "c.PyThread_delete_key"]], "pythread_delete_key_value (c function)": [[33, "c.PyThread_delete_key_value"]], "pythread_get_key_value (c function)": [[33, "c.PyThread_get_key_value"]], "pythread_set_key_value (c function)": [[33, "c.PyThread_set_key_value"]], "pythread_tss_alloc (c function)": [[33, "c.PyThread_tss_alloc"]], "pythread_tss_create (c function)": [[33, "c.PyThread_tss_create"]], "pythread_tss_delete (c function)": [[33, "c.PyThread_tss_delete"]], "pythread_tss_free (c function)": [[33, "c.PyThread_tss_free"]], "pythread_tss_get (c function)": [[33, "c.PyThread_tss_get"]], "pythread_tss_is_created (c function)": [[33, "c.PyThread_tss_is_created"]], "pythread_tss_set (c function)": [[33, "c.PyThread_tss_set"]], "pytrace_call (c var)": [[33, "c.PyTrace_CALL"]], "pytrace_c_call (c var)": [[33, "c.PyTrace_C_CALL"]], "pytrace_c_exception (c var)": [[33, "c.PyTrace_C_EXCEPTION"]], "pytrace_c_return (c var)": [[33, "c.PyTrace_C_RETURN"]], "pytrace_exception (c var)": [[33, "c.PyTrace_EXCEPTION"]], "pytrace_line (c var)": [[33, "c.PyTrace_LINE"]], "pytrace_opcode (c var)": [[33, "c.PyTrace_OPCODE"]], "pytrace_return (c var)": [[33, "c.PyTrace_RETURN"]], "py_addpendingcall (c function)": [[33, "c.Py_AddPendingCall"]], "py_begin_allow_threads (c macro)": [[33, "c.Py_BEGIN_ALLOW_THREADS"], [33, "index-35"]], "py_block_threads (c macro)": [[33, "c.Py_BLOCK_THREADS"]], "py_byteswarningflag (c var)": [[33, "c.Py_BytesWarningFlag"]], "py_debugflag (c var)": [[33, "c.Py_DebugFlag"]], "py_dontwritebytecodeflag (c var)": [[33, "c.Py_DontWriteBytecodeFlag"]], "py_end_allow_threads (c macro)": [[33, "c.Py_END_ALLOW_THREADS"], [33, "index-35"]], "py_endinterpreter (c function)": [[33, "c.Py_EndInterpreter"]], "py_fatalerror()": [[33, "index-29"]], "py_finalize (c function)": [[33, "c.Py_Finalize"]], "py_finalizeex (c function)": [[33, "c.Py_FinalizeEx"], [33, "index-15"], [33, "index-43"], [33, "index-46"], [59, "index-3"], [59, "index-4"]], "py_frozenflag (c var)": [[33, "c.Py_FrozenFlag"]], "py_getbuildinfo (c function)": [[33, "c.Py_GetBuildInfo"]], "py_getcompiler (c function)": [[33, "c.Py_GetCompiler"]], "py_getcopyright (c function)": [[33, "c.Py_GetCopyright"]], "py_getexecprefix (c function)": [[33, "c.Py_GetExecPrefix"], [35, "index-23"]], "py_getpath (c function)": [[33, "c.Py_GetPath"], [35, "index-23"]], "py_getpath()": [[33, "index-19"], [33, "index-23"]], "py_getplatform (c function)": [[33, "c.Py_GetPlatform"]], "py_getprefix (c function)": [[33, "c.Py_GetPrefix"], [35, "index-23"]], "py_getprogramfullpath (c function)": [[33, "c.Py_GetProgramFullPath"], [35, "index-23"]], "py_getprogramname (c function)": [[33, "c.Py_GetProgramName"]], "py_getpythonhome (c function)": [[33, "c.Py_GetPythonHome"]], "py_getversion (c function)": [[33, "c.Py_GetVersion"]], "py_hashrandomizationflag (c var)": [[33, "c.Py_HashRandomizationFlag"]], "py_ignoreenvironmentflag (c var)": [[33, "c.Py_IgnoreEnvironmentFlag"]], "py_initialize (c function)": [[33, "c.Py_Initialize"], [33, "index-43"], [35, "index-18"]], "py_initialize()": [[33, "index-16"], [33, "index-19"]], "py_initializeex (c function)": [[33, "c.Py_InitializeEx"]], "py_inspectflag (c var)": [[33, "c.Py_InspectFlag"]], "py_interactiveflag (c var)": [[33, "c.Py_InteractiveFlag"]], "py_isinitialized (c function)": [[33, "c.Py_IsInitialized"], [35, "index-26"]], "py_isolatedflag (c var)": [[33, "c.Py_IsolatedFlag"]], "py_legacywindowsfsencodingflag (c var)": [[33, "c.Py_LegacyWindowsFSEncodingFlag"]], "py_legacywindowsstdioflag (c var)": [[33, "c.Py_LegacyWindowsStdioFlag"]], "py_newinterpreter (c function)": [[33, "c.Py_NewInterpreter"]], "py_newinterpreterfromconfig (c function)": [[33, "c.Py_NewInterpreterFromConfig"]], "py_nositeflag (c var)": [[33, "c.Py_NoSiteFlag"]], "py_nousersitedirectory (c var)": [[33, "c.Py_NoUserSiteDirectory"]], "py_optimizeflag (c var)": [[33, "c.Py_OptimizeFlag"]], "py_quietflag (c var)": [[33, "c.Py_QuietFlag"]], "py_setpath (c function)": [[33, "c.Py_SetPath"]], "py_setpath()": [[33, "index-22"]], "py_setprogramname (c function)": [[33, "c.Py_SetProgramName"], [35, "index-23"]], "py_setprogramname()": [[33, "index-15"], [33, "index-20"], [33, "index-21"]], "py_setpythonhome (c function)": [[33, "c.Py_SetPythonHome"]], "py_setstandardstreamencoding (c function)": [[33, "c.Py_SetStandardStreamEncoding"]], "py_unblock_threads (c macro)": [[33, "c.Py_UNBLOCK_THREADS"]], "py_unbufferedstdioflag (c var)": [[33, "c.Py_UnbufferedStdioFlag"]], "py_verboseflag (c var)": [[33, "c.Py_VerboseFlag"]], "py_tracefunc (c type)": [[33, "c.Py_tracefunc"]], "py_tss_needs_init (c macro)": [[33, "c.Py_tss_NEEDS_INIT"]], "py_tss_t (c type)": [[33, "c.Py_tss_t"]], "_pyframeevalfunction (c type)": [[33, "c._PyFrameEvalFunction"]], "_pyinterpreterstate_getevalframefunc (c function)": [[33, "c._PyInterpreterState_GetEvalFrameFunc"]], "_pyinterpreterstate_setevalframefunc (c function)": [[33, "c._PyInterpreterState_SetEvalFrameFunc"]], "__main__": [[33, "index-15"], [33, "index-42"], [33, "index-45"], [35, "index-18"], [112, "module-__main__"], [322, "index-0"], [322, "index-4"], [427, "index-10"], [435, "index-2"], [435, "index-3"]], "_thread": [[33, "index-38"], [113, "module-_thread"]], "argv\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-29"]], "builtins\uff08\u5167\u5efa\uff09": [[33, "index-15"], [33, "index-42"], [33, "index-45"], [35, "index-18"], [223, "index-13"], [435, "index-2"], [448, "index-7"]], "close (in module os)": [[33, "index-44"]], "copyright\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-26"]], "executable\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-21"]], "global interpreter lock\uff08\u5168\u57df\u76f4\u8b6f\u5668\u9396\uff09": [[33, "index-32"], [87, "term-global-interpreter-lock"]], "interpreter lock\uff08\u76f4\u8b6f\u5668\u9396\uff09": [[33, "index-32"]], "lock, interpreter\uff08\u9396\u3001\u76f4\u8b6f\u5668\uff09": [[33, "index-32"]], "main()": [[33, "index-16"], [33, "index-19"], [33, "index-29"]], "path\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-15"], [33, "index-22"], [33, "index-23"], [35, "index-18"]], "path\uff08\u8def\u5f91\uff09": [[33, "index-15"], [33, "index-22"], [33, "index-23"], [35, "index-18"], [263, "index-0"], [292, "index-0"], [294, "index-0"], [332, "index-0"], [332, "index-4"], [350, "index-21"], [430, "index-9"], [448, "index-0"]], "platform\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-25"]], "sdterr": [[33, "index-16"]], "search\uff08\u641c\u5c0b\uff09": [[33, "index-15"], [33, "index-22"], [33, "index-23"], [35, "index-18"], [263, "index-0"], [332, "index-0"], [350, "index-21"], [448, "index-0"]], "setswitchinterval (in module sys)": [[33, "index-33"]], "stderr\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-42"], [33, "index-45"]], "stdin": [[33, "index-16"]], "stdin\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-42"], [33, "index-45"]], "stdout": [[33, "index-16"]], "stdout\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-42"], [33, "index-45"]], "sys": [[33, "index-15"], [33, "index-42"], [33, "index-45"], [35, "index-18"], [223, "index-8"], [350, "module-sys"], [425, "index-11"], [435, "index-2"], [448, "index-4"]], "version\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-24"], [33, "index-27"], [33, "index-28"]], "\u6a21\u7d44": [[33, "index-15"], [33, "index-22"], [33, "index-23"], [33, "index-38"], [33, "index-42"], [33, "index-45"], [342, "index-15"], [342, "index-33"], [342, "index-40"], [342, "index-65"]], "\u74b0\u5883\u8b8a\u6578": [[33, "index-17"], [33, "index-18"], [33, "index-3"], [33, "index-30"], [33, "index-31"], [33, "index-62"], [33, "index-63"], [33, "index-64"], [33, "index-65"], [33, "index-66"], [33, "index-67"], [33, "index-68"], [33, "index-71"], [33, "index-72"], [33, "index-73"], [33, "index-74"], [33, "index-9"], [34, "index-1"], [34, "index-10"], [34, "index-11"], [34, "index-12"], [34, "index-13"], [34, "index-14"], [34, "index-15"], [34, "index-16"], [34, "index-18"], [34, "index-19"], [34, "index-2"], [34, "index-20"], [34, "index-21"], [34, "index-22"], [34, "index-23"], [34, "index-24"], [34, "index-25"], [34, "index-26"], [34, "index-27"], [34, "index-28"], [34, "index-29"], [34, "index-3"], [34, "index-30"], [34, "index-31"], [34, "index-32"], [34, "index-35"], [34, "index-36"], [34, "index-4"], [34, "index-5"], [34, "index-6"], [34, "index-8"], [34, "index-9"], [35, "index-41"], [35, "index-42"], [35, "index-43"], [35, "index-44"], [35, "index-45"], [35, "index-46"], [42, "index-1"], [42, "index-2"], [42, "index-3"], [42, "index-4"], [42, "index-5"], [63, "index-0"], [71, "index-0"], [84, "index-0"], [84, "index-1"], [85, "index-4"], [102, "index-2"], [123, "index-2"], [124, "index-5"], [149, "index-3"], [149, "index-4"], [149, "index-6"], [161, "index-1"], [175, "index-0"], [175, "index-1"], [175, "index-2"], [175, "index-3"], [175, "index-4"], [175, "index-5"], [175, "index-6"], [186, "index-0"], [186, "index-1"], [186, "index-2"], [186, "index-3"], [186, "index-4"], [186, "index-5"], [212, "index-0"], [223, "index-1"], [223, "index-16"], [226, "index-0"], [227, "index-6"], [227, "index-7"], [227, "index-8"], [228, "index-0"], [228, "index-1"], [228, "index-2"], [228, "index-3"], [228, "index-5"], [228, "index-6"], [228, "index-7"], [228, "index-8"], [245, "index-5"], [245, "index-6"], [256, "index-9"], [264, "index-1"], [264, "index-2"], [264, "index-3"], [291, "index-1"], [291, "index-10"], [291, "index-11"], [291, "index-2"], [291, "index-3"], [291, "index-33"], [291, "index-34"], [291, "index-35"], [291, "index-36"], [291, "index-39"], [291, "index-4"], [291, "index-40"], [291, "index-41"], [291, "index-42"], [291, "index-43"], [291, "index-52"], [292, "index-16"], [292, "index-17"], [292, "index-18"], [292, "index-19"], [292, "index-20"], [292, "index-21"], [293, "index-1"], [293, "index-2"], [309, "index-3"], [309, "index-6"], [309, "index-7"], [311, "index-1"], [311, "index-2"], [318, "index-0"], [325, "index-6"], [332, "index-3"], [332, "index-5"], [332, "index-6"], [332, "index-7"], [332, "index-8"], [339, "index-29"], [339, "index-30"], [342, "index-67"], [342, "index-68"], [346, "index-2"], [346, "index-3"], [346, "index-4"], [350, "index-17"], [350, "index-18"], [350, "index-22"], [350, "index-23"], [350, "index-24"], [350, "index-3"], [350, "index-33"], [350, "index-35"], [350, "index-36"], [350, "index-37"], [350, "index-38"], [350, "index-4"], [350, "index-5"], [350, "index-6"], [350, "index-7"], [352, "index-0"], [352, "index-1"], [352, "index-2"], [352, "index-3"], [352, "index-4"], [358, "index-7"], [358, "index-8"], [358, "index-9"], [360, "index-0"], [360, "index-1"], [360, "index-2"], [364, "index-13"], [364, "index-14"], [364, "index-15"], [364, "index-16"], [364, "index-17"], [364, "index-18"], [367, "index-0"], [367, "index-1"], [380, "index-0"], [380, "index-1"], [380, "index-2"], [393, "index-3"], [397, "index-10"], [397, "index-11"], [397, "index-12"], [398, "index-1"], [398, "index-2"], [398, "index-3"], [398, "index-4"], [398, "index-5"], [401, "index-0"], [401, "index-1"], [401, "index-2"], [401, "index-3"], [408, "index-0"], [423, "envvar-PYTHONTZPATH"], [423, "index-2"], [426, "index-114"], [426, "index-61"], [430, "index-18"], [436, "index-12"], [436, "index-13"], [448, "index-14"], [448, "index-15"], [448, "index-17"], [448, "index-18"], [453, "envvar-PYTHONASYNCIODEBUG"], [453, "envvar-PYTHONBREAKPOINT"], [453, "envvar-PYTHONCASEOK"], [453, "envvar-PYTHONCOERCECLOCALE"], [453, "envvar-PYTHONDEBUG"], [453, "envvar-PYTHONDEVMODE"], [453, "envvar-PYTHONDONTWRITEBYTECODE"], [453, "envvar-PYTHONDUMPREFS"], [453, "envvar-PYTHONDUMPREFSFILE-FILENAME"], [453, "envvar-PYTHONEXECUTABLE"], [453, "envvar-PYTHONFAULTHANDLER"], [453, "envvar-PYTHONHASHSEED"], [453, "envvar-PYTHONHOME"], [453, "envvar-PYTHONINSPECT"], [453, "envvar-PYTHONINTMAXSTRDIGITS"], [453, "envvar-PYTHONIOENCODING"], [453, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [453, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [453, "envvar-PYTHONMALLOC"], [453, "envvar-PYTHONMALLOCSTATS"], [453, "envvar-PYTHONNODEBUGRANGES"], [453, "envvar-PYTHONNOUSERSITE"], [453, "envvar-PYTHONOPTIMIZE"], [453, "envvar-PYTHONPATH"], [453, "envvar-PYTHONPERFSUPPORT"], [453, "envvar-PYTHONPLATLIBDIR"], [453, "envvar-PYTHONPROFILEIMPORTTIME"], [453, "envvar-PYTHONPYCACHEPREFIX"], [453, "envvar-PYTHONSAFEPATH"], [453, "envvar-PYTHONSTARTUP"], [453, "envvar-PYTHONTRACEMALLOC"], [453, "envvar-PYTHONUNBUFFERED"], [453, "envvar-PYTHONUSERBASE"], [453, "envvar-PYTHONUTF8"], [453, "envvar-PYTHONVERBOSE"], [453, "envvar-PYTHONWARNDEFAULTENCODING"], [453, "envvar-PYTHONWARNINGS"], [453, "index-1"], [453, "index-12"], [453, "index-13"], [453, "index-14"], [453, "index-18"], [453, "index-19"], [453, "index-2"], [453, "index-20"], [453, "index-21"], [453, "index-22"], [453, "index-23"], [453, "index-24"], [453, "index-25"], [453, "index-26"], [453, "index-27"], [453, "index-28"], [453, "index-29"], [453, "index-3"], [453, "index-30"], [453, "index-31"], [453, "index-32"], [453, "index-33"], [453, "index-34"], [453, "index-35"], [453, "index-36"], [453, "index-39"], [453, "index-4"], [453, "index-41"], [453, "index-42"], [453, "index-5"], [453, "index-52"], [453, "index-53"], [453, "index-6"], [453, "index-8"], [454, "envvar-BASECFLAGS"], [454, "envvar-BASECPPFLAGS"], [454, "envvar-BLDSHARED"], [454, "envvar-CC"], [454, "envvar-CCSHARED"], [454, "envvar-CFLAGS"], [454, "envvar-CFLAGSFORSHARED"], [454, "envvar-CFLAGS_ALIASING"], [454, "envvar-CFLAGS_NODIST"], [454, "envvar-COMPILEALL_OPTS"], [454, "envvar-CONFIGURE_CFLAGS"], [454, "envvar-CONFIGURE_CFLAGS_NODIST"], [454, "envvar-CONFIGURE_CPPFLAGS"], [454, "envvar-CONFIGURE_LDFLAGS"], [454, "envvar-CONFIGURE_LDFLAGS_NODIST"], [454, "envvar-CPPFLAGS"], [454, "envvar-CXX"], [454, "envvar-EXTRA_CFLAGS"], [454, "envvar-LDFLAGS"], [454, "envvar-LDFLAGS_NODIST"], [454, "envvar-LDSHARED"], [454, "envvar-LIBS"], [454, "envvar-LINKCC"], [454, "envvar-OPT"], [454, "envvar-PROFILE_TASK"], [454, "envvar-PURIFY"], [454, "envvar-PY_BUILTIN_MODULE_CFLAGS"], [454, "envvar-PY_CFLAGS"], [454, "envvar-PY_CFLAGS_NODIST"], [454, "envvar-PY_CORE_CFLAGS"], [454, "envvar-PY_CORE_LDFLAGS"], [454, "envvar-PY_CPPFLAGS"], [454, "envvar-PY_LDFLAGS"], [454, "envvar-PY_LDFLAGS_NODIST"], [454, "envvar-PY_STDMODULE_CFLAGS"], [454, "index-10"], [454, "index-11"], [454, "index-12"], [454, "index-13"], [454, "index-14"], [454, "index-15"], [454, "index-16"], [454, "index-17"], [454, "index-18"], [454, "index-19"], [454, "index-20"], [454, "index-21"], [454, "index-22"], [454, "index-23"], [454, "index-24"], [454, "index-25"], [454, "index-26"], [454, "index-27"], [454, "index-28"], [454, "index-33"], [454, "index-35"], [454, "index-36"], [454, "index-4"], [454, "index-6"], [454, "index-8"], [454, "index-9"], [457, "index-0"], [458, "index-2"], [459, "index-10"], [459, "index-11"], [459, "index-12"], [459, "index-13"], [459, "index-14"], [459, "index-15"], [459, "index-18"], [459, "index-2"], [459, "index-20"], [459, "index-22"], [459, "index-23"], [459, "index-24"], [459, "index-25"], [459, "index-26"], [459, "index-27"], [459, "index-28"], [459, "index-29"], [459, "index-3"], [459, "index-30"], [459, "index-31"], [459, "index-32"], [459, "index-33"], [459, "index-34"], [459, "index-35"], [459, "index-36"], [459, "index-37"], [459, "index-4"], [459, "index-40"], [459, "index-5"], [459, "index-6"], [459, "index-7"], [459, "index-8"], [459, "index-9"], [461, "index-11"], [463, "index-24"], [463, "index-25"], [463, "index-26"], [463, "index-27"], [463, "index-28"], [466, "index-20"], [466, "index-21"], [466, "index-24"], [466, "index-4"], [466, "index-5"], [466, "index-6"], [467, "index-1"], [467, "index-11"], [467, "index-8"], [470, "index-98"], [471, "index-103"], [471, "index-83"], [471, "index-88"], [472, "index-23"], [472, "index-62"], [473, "index-10"], [474, "index-23"], [474, "index-24"], [474, "index-35"], [475, "index-40"], [475, "index-41"], [475, "index-50"], [475, "index-53"], [475, "index-54"], [475, "index-55"], [475, "index-56"], [475, "index-57"], [475, "index-58"], [477, "index-19"], [477, "index-2"], [477, "index-21"], [477, "index-27"], [477, "index-38"], [478, "index-12"], [478, "index-26"], [478, "index-27"], [478, "index-31"], [478, "index-36"], [478, "index-4"], [478, "index-8"], [479, "index-13"], [479, "index-14"], [479, "index-2"], [479, "index-20"], [479, "index-21"], [479, "index-22"], [479, "index-3"], [480, "index-21"], [481, "index-105"], [481, "index-135"], [481, "index-151"], [481, "index-190"], [481, "index-198"], [481, "index-199"], [481, "index-200"], [481, "index-202"], [481, "index-206"], [481, "index-210"], [481, "index-211"], [481, "index-213"], [481, "index-215"], [481, "index-217"], [481, "index-224"], [481, "index-225"], [481, "index-229"], [481, "index-230"], [481, "index-234"], [481, "index-235"], [481, "index-243"], [481, "index-254"], [481, "index-255"], [481, "index-284"], [481, "index-285"], [481, "index-39"], [481, "index-48"], [481, "index-49"], [481, "index-52"], [481, "index-53"], [481, "index-62"], [481, "index-74"], [481, "index-77"], [481, "index-85"], [481, "index-92"]], "pep 432": [[34, "index-37"], [34, "index-38"], [478, "index-38"], [481, "index-248"]], "pep 538": [[34, "index-33"], [264, "index-6"], [453, "index-55"], [454, "index-34"], [478, "index-10"], [478, "index-3"], [478, "index-6"], [478, "index-7"], [481, "index-222"], [481, "index-226"], [481, "index-247"]], "pep 540": [[34, "index-34"], [264, "index-7"], [291, "index-55"], [478, "index-11"], [478, "index-9"], [481, "index-236"]], "pep 552": [[34, "index-7"], [248, "index-9"], [309, "index-5"], [471, "index-105"], [478, "index-22"], [478, "index-23"], [481, "index-219"], [481, "index-239"]], "pep 587": [[34, "index-0"], [479, "index-36"], [479, "index-5"], [481, "index-203"], [481, "index-208"], [481, "index-93"]], "pythoncoerceclocale": [[34, "index-36"], [291, "index-4"], [453, "envvar-PYTHONCOERCECLOCALE"], [454, "index-33"], [478, "index-4"]], "pythondevmode": [[34, "index-8"], [186, "index-0"], [453, "envvar-PYTHONDEVMODE"], [478, "index-26"]], "pythondumprefs": [[34, "index-9"], [63, "index-0"], [453, "envvar-PYTHONDUMPREFS"], [454, "index-36"], [479, "index-3"], [481, "index-213"]], "pythonexecutable": [[34, "index-23"], [453, "envvar-PYTHONEXECUTABLE"]], "pythonfaulthandler": [[34, "index-10"], [186, "index-4"], [212, "index-0"], [453, "envvar-PYTHONFAULTHANDLER"], [453, "index-19"], [474, "index-24"]], "pythonintmaxstrdigits": [[34, "index-15"], [342, "index-67"], [342, "index-68"], [350, "index-17"], [453, "envvar-PYTHONINTMAXSTRDIGITS"], [453, "index-21"], [481, "index-39"]], "pythonmallocstats": [[34, "index-18"], [42, "index-2"], [453, "envvar-PYTHONMALLOCSTATS"], [481, "index-285"]], "pythonnodebugranges": [[34, "index-6"], [426, "index-61"], [453, "envvar-PYTHONNODEBUGRANGES"], [453, "index-26"], [471, "index-88"]], "pythonperfsupport": [[34, "index-28"], [102, "index-2"], [453, "envvar-PYTHONPERFSUPPORT"], [453, "index-27"], [472, "index-23"]], "pythonplatlibdir": [[34, "index-19"], [352, "index-3"], [453, "envvar-PYTHONPLATLIBDIR"], [481, "index-151"]], "pythonprofileimporttime": [[34, "index-13"], [453, "envvar-PYTHONPROFILEIMPORTTIME"], [453, "index-22"], [478, "index-27"], [481, "index-243"]], "pythonpycacheprefix": [[34, "index-25"], [350, "index-7"], [453, "envvar-PYTHONPYCACHEPREFIX"], [453, "index-24"], [479, "index-2"], [481, "index-215"]], "pythonsafepath": [[34, "index-3"], [325, "index-6"], [350, "index-24"], [453, "envvar-PYTHONSAFEPATH"], [453, "index-12"], [471, "index-103"], [471, "index-83"], [481, "index-53"]], "pythontracemalloc": [[34, "index-27"], [380, "index-0"], [380, "index-1"], [380, "index-2"], [453, "envvar-PYTHONTRACEMALLOC"], [453, "index-20"]], "pythonutf8": [[34, "index-2"], [34, "index-35"], [291, "index-2"], [291, "index-3"], [350, "index-36"], [453, "envvar-PYTHONUTF8"], [453, "index-23"], [453, "index-42"], [459, "index-15"], [478, "index-8"]], "pythonwarnings": [[34, "index-31"], [186, "index-1"], [398, "index-1"], [398, "index-2"], [398, "index-3"], [398, "index-4"], [398, "index-5"], [453, "envvar-PYTHONWARNINGS"], [453, "index-18"], [467, "index-1"], [467, "index-8"], [473, "index-10"], [478, "index-36"], [481, "index-48"]], "pyconfig (c type)": [[34, "c.PyConfig"]], "pyconfig.argv (c member)": [[34, "c.PyConfig.argv"]], "pyconfig.base_exec_prefix (c member)": [[34, "c.PyConfig.base_exec_prefix"]], "pyconfig.base_executable (c member)": [[34, "c.PyConfig.base_executable"]], "pyconfig.base_prefix (c member)": [[34, "c.PyConfig.base_prefix"]], "pyconfig.buffered_stdio (c member)": [[34, "c.PyConfig.buffered_stdio"]], "pyconfig.bytes_warning (c member)": [[34, "c.PyConfig.bytes_warning"]], "pyconfig.check_hash_pycs_mode (c member)": [[34, "c.PyConfig.check_hash_pycs_mode"]], "pyconfig.code_debug_ranges (c member)": [[34, "c.PyConfig.code_debug_ranges"]], "pyconfig.configure_c_stdio (c member)": [[34, "c.PyConfig.configure_c_stdio"]], "pyconfig.dev_mode (c member)": [[34, "c.PyConfig.dev_mode"]], "pyconfig.dump_refs (c member)": [[34, "c.PyConfig.dump_refs"]], "pyconfig.exec_prefix (c member)": [[34, "c.PyConfig.exec_prefix"]], "pyconfig.executable (c member)": [[34, "c.PyConfig.executable"]], "pyconfig.faulthandler (c member)": [[34, "c.PyConfig.faulthandler"]], "pyconfig.filesystem_encoding (c member)": [[34, "c.PyConfig.filesystem_encoding"]], "pyconfig.filesystem_errors (c member)": [[34, "c.PyConfig.filesystem_errors"]], "pyconfig.hash_seed (c member)": [[34, "c.PyConfig.hash_seed"]], "pyconfig.home (c member)": [[34, "c.PyConfig.home"]], "pyconfig.import_time (c member)": [[34, "c.PyConfig.import_time"]], "pyconfig.inspect (c member)": [[34, "c.PyConfig.inspect"]], "pyconfig.install_signal_handlers (c member)": [[34, "c.PyConfig.install_signal_handlers"]], "pyconfig.int_max_str_digits (c member)": [[34, "c.PyConfig.int_max_str_digits"]], "pyconfig.interactive (c member)": [[34, "c.PyConfig.interactive"]], "pyconfig.isolated (c member)": [[34, "c.PyConfig.isolated"]], "pyconfig.legacy_windows_stdio (c member)": [[34, "c.PyConfig.legacy_windows_stdio"]], "pyconfig.malloc_stats (c member)": [[34, "c.PyConfig.malloc_stats"]], "pyconfig.module_search_paths (c member)": [[34, "c.PyConfig.module_search_paths"]], "pyconfig.module_search_paths_set (c member)": [[34, "c.PyConfig.module_search_paths_set"]], "pyconfig.optimization_level (c member)": [[34, "c.PyConfig.optimization_level"]], "pyconfig.orig_argv (c member)": [[34, "c.PyConfig.orig_argv"]], "pyconfig.parse_argv (c member)": [[34, "c.PyConfig.parse_argv"]], "pyconfig.parser_debug (c member)": [[34, "c.PyConfig.parser_debug"]], "pyconfig.pathconfig_warnings (c member)": [[34, "c.PyConfig.pathconfig_warnings"]], "pyconfig.perf_profiling (c member)": [[34, "c.PyConfig.perf_profiling"]], "pyconfig.platlibdir (c member)": [[34, "c.PyConfig.platlibdir"]], "pyconfig.prefix (c member)": [[34, "c.PyConfig.prefix"]], "pyconfig.program_name (c member)": [[34, "c.PyConfig.program_name"]], "pyconfig.pycache_prefix (c member)": [[34, "c.PyConfig.pycache_prefix"]], "pyconfig.pythonpath_env (c member)": [[34, "c.PyConfig.pythonpath_env"]], "pyconfig.quiet (c member)": [[34, "c.PyConfig.quiet"]], "pyconfig.run_command (c member)": [[34, "c.PyConfig.run_command"]], "pyconfig.run_filename (c member)": [[34, "c.PyConfig.run_filename"]], "pyconfig.run_module (c member)": [[34, "c.PyConfig.run_module"]], "pyconfig.safe_path (c member)": [[34, "c.PyConfig.safe_path"]], "pyconfig.show_ref_count (c member)": [[34, "c.PyConfig.show_ref_count"]], "pyconfig.site_import (c member)": [[34, "c.PyConfig.site_import"]], "pyconfig.skip_source_first_line (c member)": [[34, "c.PyConfig.skip_source_first_line"]], "pyconfig.stdio_encoding (c member)": [[34, "c.PyConfig.stdio_encoding"]], "pyconfig.stdio_errors (c member)": [[34, "c.PyConfig.stdio_errors"]], "pyconfig.tracemalloc (c member)": [[34, "c.PyConfig.tracemalloc"]], "pyconfig.use_environment (c member)": [[34, "c.PyConfig.use_environment"]], "pyconfig.use_hash_seed (c member)": [[34, "c.PyConfig.use_hash_seed"]], "pyconfig.user_site_directory (c member)": [[34, "c.PyConfig.user_site_directory"]], "pyconfig.verbose (c member)": [[34, "c.PyConfig.verbose"]], "pyconfig.warn_default_encoding (c member)": [[34, "c.PyConfig.warn_default_encoding"]], "pyconfig.warnoptions (c member)": [[34, "c.PyConfig.warnoptions"]], "pyconfig.write_bytecode (c member)": [[34, "c.PyConfig.write_bytecode"]], "pyconfig.xoptions (c member)": [[34, "c.PyConfig.xoptions"]], "pyconfig_clear (c function)": [[34, "c.PyConfig_Clear"]], "pyconfig_initisolatedconfig (c function)": [[34, "c.PyConfig_InitIsolatedConfig"]], "pyconfig_initpythonconfig (c function)": [[34, "c.PyConfig_InitPythonConfig"]], "pyconfig_read (c function)": [[34, "c.PyConfig_Read"]], "pyconfig_setargv (c function)": [[34, "c.PyConfig_SetArgv"]], "pyconfig_setbytesargv (c function)": [[34, "c.PyConfig_SetBytesArgv"]], "pyconfig_setbytesstring (c function)": [[34, "c.PyConfig_SetBytesString"]], "pyconfig_setstring (c function)": [[34, "c.PyConfig_SetString"]], "pyconfig_setwidestringlist (c function)": [[34, "c.PyConfig_SetWideStringList"]], "pypreconfig (c type)": [[34, "c.PyPreConfig"]], "pypreconfig.allocator (c member)": [[34, "c.PyPreConfig.allocator"]], "pypreconfig.coerce_c_locale (c member)": [[34, "c.PyPreConfig.coerce_c_locale"]], "pypreconfig.coerce_c_locale_warn (c member)": [[34, "c.PyPreConfig.coerce_c_locale_warn"]], "pypreconfig.configure_locale (c member)": [[34, "c.PyPreConfig.configure_locale"]], "pypreconfig.dev_mode (c member)": [[34, "c.PyPreConfig.dev_mode"]], "pypreconfig.isolated (c member)": [[34, "c.PyPreConfig.isolated"]], "pypreconfig.legacy_windows_fs_encoding (c member)": [[34, "c.PyPreConfig.legacy_windows_fs_encoding"]], "pypreconfig.parse_argv (c member)": [[34, "c.PyPreConfig.parse_argv"]], "pypreconfig.use_environment (c member)": [[34, "c.PyPreConfig.use_environment"]], "pypreconfig.utf8_mode (c member)": [[34, "c.PyPreConfig.utf8_mode"]], "pypreconfig_initisolatedconfig (c function)": [[34, "c.PyPreConfig_InitIsolatedConfig"]], "pypreconfig_initpythonconfig (c function)": [[34, "c.PyPreConfig_InitPythonConfig"]], "pystatus (c type)": [[34, "c.PyStatus"]], "pystatus.err_msg (c member)": [[34, "c.PyStatus.err_msg"]], "pystatus.exitcode (c member)": [[34, "c.PyStatus.exitcode"]], "pystatus.func (c member)": [[34, "c.PyStatus.func"]], "pystatus_error (c function)": [[34, "c.PyStatus_Error"]], "pystatus_exception (c function)": [[34, "c.PyStatus_Exception"]], "pystatus_exit (c function)": [[34, "c.PyStatus_Exit"]], "pystatus_iserror (c function)": [[34, "c.PyStatus_IsError"]], "pystatus_isexit (c function)": [[34, "c.PyStatus_IsExit"]], "pystatus_nomemory (c function)": [[34, "c.PyStatus_NoMemory"]], "pystatus_ok (c function)": [[34, "c.PyStatus_Ok"]], "pywidestringlist (c type)": [[34, "c.PyWideStringList"]], "pywidestringlist.items (c member)": [[34, "c.PyWideStringList.items"]], "pywidestringlist.length (c member)": [[34, "c.PyWideStringList.length"]], "pywidestringlist_append (c function)": [[34, "c.PyWideStringList_Append"]], "pywidestringlist_insert (c function)": [[34, "c.PyWideStringList_Insert"]], "py_exitstatusexception (c function)": [[34, "c.Py_ExitStatusException"]], "py_getargcargv (c function)": [[34, "c.Py_GetArgcArgv"]], "py_initializefromconfig (c function)": [[34, "c.Py_InitializeFromConfig"]], "py_preinitialize (c function)": [[34, "c.Py_PreInitialize"]], "py_preinitializefromargs (c function)": [[34, "c.Py_PreInitializeFromArgs"]], "py_preinitializefrombytesargs (c function)": [[34, "c.Py_PreInitializeFromBytesArgs"]], "py_runmain (c function)": [[34, "c.Py_RunMain"]], "_py_initializemain (c function)": [[34, "c._Py_InitializeMain"]], "__pyvenv_launcher__": [[34, "index-24"], [34, "index-4"]], "path": [[35, "index-41"], [35, "index-42"], [84, "index-0"], [84, "index-1"], [149, "index-3"], [149, "index-6"], [291, "index-33"], [291, "index-34"], [291, "index-35"], [291, "index-36"], [291, "index-39"], [291, "index-40"], [291, "index-41"], [291, "index-42"], [291, "index-52"], [332, "index-3"], [346, "index-2"], [397, "index-10"], [397, "index-11"], [397, "index-12"], [401, "index-3"], [436, "index-12"], [448, "index-15"], [453, "index-30"], [458, "index-2"], [459, "index-10"], [459, "index-12"], [459, "index-13"], [459, "index-14"], [459, "index-18"], [459, "index-2"], [459, "index-20"], [459, "index-22"], [459, "index-23"], [459, "index-25"], [459, "index-3"], [459, "index-40"], [459, "index-5"], [459, "index-9"], [475, "index-54"], [475, "index-57"], [475, "index-58"], [479, "index-22"], [481, "index-210"], [481, "index-211"], [481, "index-52"], [481, "index-77"]], "pep 353": [[35, "index-40"], [465, "index-16"], [465, "index-17"], [465, "index-29"], [470, "index-116"], [481, "index-156"]], "pep 7": [[35, "index-37"], [35, "index-38"], [35, "index-39"], [454, "index-0"], [477, "index-34"]], "pydoc_str (c macro)": [[35, "c.PyDoc_STR"]], "pydoc_strvar (c macro)": [[35, "c.PyDoc_STRVAR"]], "pylist_getitem (c function)": [[35, "index-7"], [38, "c.PyList_GetItem"]], "pylist_setitem (c function)": [[35, "index-5"], [38, "c.PyList_SetItem"]], "pymodinit_func (c macro)": [[35, "c.PyMODINIT_FUNC"]], "pysequence_getitem (c function)": [[35, "index-7"], [54, "c.PySequence_GetItem"]], "pytuple_setitem (c function)": [[35, "index-5"], [60, "c.PyTuple_SetItem"]], "py_abs (c macro)": [[35, "c.Py_ABS"]], "py_always_inline (c macro)": [[35, "c.Py_ALWAYS_INLINE"]], "py_charmask (c macro)": [[35, "c.Py_CHARMASK"]], "py_debug (c macro)": [[35, "c.Py_DEBUG"]], "py_decref (c function)": [[35, "index-4"], [52, "c.Py_DECREF"], [52, "c.Py_DecRef"]], "py_deprecated (c macro)": [[35, "c.Py_DEPRECATED"]], "py_getenv (c macro)": [[35, "c.Py_GETENV"]], "py_incref (c function)": [[35, "index-4"], [52, "c.Py_INCREF"], [52, "c.Py_IncRef"]], "py_max (c macro)": [[35, "c.Py_MAX"]], "py_member_size (c macro)": [[35, "c.Py_MEMBER_SIZE"]], "py_min (c macro)": [[35, "c.Py_MIN"]], "py_no_inline (c macro)": [[35, "c.Py_NO_INLINE"]], "py_stringify (c macro)": [[35, "c.Py_STRINGIFY"]], "py_unreachable (c macro)": [[35, "c.Py_UNREACHABLE"]], "py_unused (c macro)": [[35, "c.Py_UNUSED"]], "py_xdecref (c function)": [[35, "index-17"], [52, "c.Py_XDECREF"]], "py_ssize_t (c type)": [[35, "c.Py_ssize_t"]], "exc_info (in module sys)": [[35, "index-13"]], "incr_item()": [[35, "index-15"], [35, "index-16"]], "set_all()": [[35, "index-6"]], "sum_list()": [[35, "index-8"]], "sum_sequence()": [[35, "index-14"], [35, "index-9"]], "type\uff08\u578b\u5225\uff09": [[35, "index-3"], [49, "index-7"], [61, "index-0"], [87, "term-type"], [223, "index-0"], [223, "index-12"], [342, "index-0"], [342, "index-14"], [342, "index-16"], [342, "index-20"], [342, "index-22"], [342, "index-23"], [342, "index-24"], [342, "index-52"], [342, "index-59"], [342, "index-65"], [426, "index-1"], [426, "index-4"], [426, "index-86"], [428, "index-7"]], "pyaiter_check (c function)": [[36, "c.PyAIter_Check"]], "pyiter_check (c function)": [[36, "c.PyIter_Check"]], "pyiter_next (c function)": [[36, "c.PyIter_Next"]], "pyiter_send (c function)": [[36, "c.PyIter_Send"]], "pysendresult (c type)": [[36, "c.PySendResult"]], "pycalliter_check (c function)": [[37, "c.PyCallIter_Check"]], "pycalliter_new (c function)": [[37, "c.PyCallIter_New"]], "pycalliter_type (c var)": [[37, "c.PyCallIter_Type"]], "pyseqiter_check (c function)": [[37, "c.PySeqIter_Check"]], "pyseqiter_new (c function)": [[37, "c.PySeqIter_New"]], "pyseqiter_type (c var)": [[37, "c.PySeqIter_Type"]], "pylistobject (c type)": [[38, "c.PyListObject"]], "pylist_append (c function)": [[38, "c.PyList_Append"]], "pylist_astuple (c function)": [[38, "c.PyList_AsTuple"]], "pylist_check (c function)": [[38, "c.PyList_Check"]], "pylist_checkexact (c function)": [[38, "c.PyList_CheckExact"]], "pylist_get_item (c function)": [[38, "c.PyList_GET_ITEM"]], "pylist_get_size (c function)": [[38, "c.PyList_GET_SIZE"]], "pylist_getslice (c function)": [[38, "c.PyList_GetSlice"]], "pylist_insert (c function)": [[38, "c.PyList_Insert"]], "pylist_new (c function)": [[38, "c.PyList_New"]], "pylist_reverse (c function)": [[38, "c.PyList_Reverse"]], "pylist_set_item (c function)": [[38, "c.PyList_SET_ITEM"]], "pylist_setslice (c function)": [[38, "c.PyList_SetSlice"]], "pylist_size (c function)": [[38, "c.PyList_Size"]], "pylist_sort (c function)": [[38, "c.PyList_Sort"]], "pylist_type (c var)": [[38, "c.PyList_Type"]], "list\uff08\u4e32\u5217\uff09": [[38, "index-0"], [87, "term-list"], [342, "index-23"], [342, "index-24"], [342, "index-25"], [425, "index-6"], [426, "index-25"], [428, "index-15"], [428, "index-40"], [428, "index-42"], [428, "index-45"], [428, "index-91"], [434, "index-1"], [434, "index-10"], [434, "index-2"], [434, "index-21"], [434, "index-5"], [434, "index-6"]], "tuple\uff08\u5143\u7d44\uff09": [[38, "index-2"], [60, "index-0"], [342, "index-22"], [342, "index-26"], [426, "index-20"]], "long_max (c macro)": [[39, "index-1"]], "overflowerror\uff08\u5185\u5efa\u4f8b\u5916\uff09": [[39, "index-1"], [39, "index-2"], [39, "index-3"], [39, "index-4"], [39, "index-5"], [39, "index-6"]], "py_ssize_t_max (c macro)": [[39, "index-3"]], "pylongobject (c type)": [[39, "c.PyLongObject"]], "pylong_asdouble (c function)": [[39, "c.PyLong_AsDouble"]], "pylong_aslong (c function)": [[39, "c.PyLong_AsLong"]], "pylong_aslongandoverflow (c function)": [[39, "c.PyLong_AsLongAndOverflow"]], "pylong_aslonglong (c function)": [[39, "c.PyLong_AsLongLong"]], "pylong_aslonglongandoverflow (c function)": [[39, "c.PyLong_AsLongLongAndOverflow"]], "pylong_assize_t (c function)": [[39, "c.PyLong_AsSize_t"]], "pylong_asssize_t (c function)": [[39, "c.PyLong_AsSsize_t"]], "pylong_asunsignedlong (c function)": [[39, "c.PyLong_AsUnsignedLong"]], "pylong_asunsignedlonglong (c function)": [[39, "c.PyLong_AsUnsignedLongLong"]], "pylong_asunsignedlonglongmask (c function)": [[39, "c.PyLong_AsUnsignedLongLongMask"]], "pylong_asunsignedlongmask (c function)": [[39, "c.PyLong_AsUnsignedLongMask"]], "pylong_asvoidptr (c function)": [[39, "c.PyLong_AsVoidPtr"]], "pylong_check (c function)": [[39, "c.PyLong_Check"]], "pylong_checkexact (c function)": [[39, "c.PyLong_CheckExact"]], "pylong_fromdouble (c function)": [[39, "c.PyLong_FromDouble"]], "pylong_fromlong (c function)": [[39, "c.PyLong_FromLong"]], "pylong_fromlonglong (c function)": [[39, "c.PyLong_FromLongLong"]], "pylong_fromsize_t (c function)": [[39, "c.PyLong_FromSize_t"]], "pylong_fromssize_t (c function)": [[39, "c.PyLong_FromSsize_t"]], "pylong_fromstring (c function)": [[39, "c.PyLong_FromString"]], "pylong_fromunicodeobject (c function)": [[39, "c.PyLong_FromUnicodeObject"]], "pylong_fromunsignedlong (c function)": [[39, "c.PyLong_FromUnsignedLong"]], "pylong_fromunsignedlonglong (c function)": [[39, "c.PyLong_FromUnsignedLongLong"]], "pylong_fromvoidptr (c function)": [[39, "c.PyLong_FromVoidPtr"]], "pylong_type (c var)": [[39, "c.PyLong_Type"]], "pyunstable_long_compactvalue (c function)": [[39, "c.PyUnstable_Long_CompactValue"]], "pyunstable_long_iscompact (c function)": [[39, "c.PyUnstable_Long_IsCompact"]], "size_max (c macro)": [[39, "index-5"]], "ulong_max (c macro)": [[39, "index-4"]], "integer\uff08\u6574\u6570\uff09": [[39, "index-0"]], "long integer\uff08\u9577\u6574\u6570\uff09": [[39, "index-0"]], "pymapping_check (c function)": [[40, "c.PyMapping_Check"]], "pymapping_delitem (c function)": [[40, "c.PyMapping_DelItem"]], "pymapping_delitemstring (c function)": [[40, "c.PyMapping_DelItemString"]], "pymapping_getitemstring (c function)": [[40, "c.PyMapping_GetItemString"]], "pymapping_haskey (c function)": [[40, "c.PyMapping_HasKey"]], "pymapping_haskeystring (c function)": [[40, "c.PyMapping_HasKeyString"]], "pymapping_items (c function)": [[40, "c.PyMapping_Items"]], "pymapping_keys (c function)": [[40, "c.PyMapping_Keys"]], "pymapping_length (c function)": [[40, "c.PyMapping_Length"]], "pymapping_setitemstring (c function)": [[40, "c.PyMapping_SetItemString"]], "pymapping_size (c function)": [[40, "c.PyMapping_Size"]], "pymapping_values (c function)": [[40, "c.PyMapping_Values"]], "pymarshal_readlastobjectfromfile (c function)": [[41, "c.PyMarshal_ReadLastObjectFromFile"]], "pymarshal_readlongfromfile (c function)": [[41, "c.PyMarshal_ReadLongFromFile"]], "pymarshal_readobjectfromfile (c function)": [[41, "c.PyMarshal_ReadObjectFromFile"]], "pymarshal_readobjectfromstring (c function)": [[41, "c.PyMarshal_ReadObjectFromString"]], "pymarshal_readshortfromfile (c function)": [[41, "c.PyMarshal_ReadShortFromFile"]], "pymarshal_writelongtofile (c function)": [[41, "c.PyMarshal_WriteLongToFile"]], "pymarshal_writeobjecttofile (c function)": [[41, "c.PyMarshal_WriteObjectToFile"]], "pymarshal_writeobjecttostring (c function)": [[41, "c.PyMarshal_WriteObjectToString"]], "pymem_domain_mem (c macro)": [[42, "c.PYMEM_DOMAIN_MEM"]], "pymem_domain_obj (c macro)": [[42, "c.PYMEM_DOMAIN_OBJ"]], "pymem_domain_raw (c macro)": [[42, "c.PYMEM_DOMAIN_RAW"]], "pythonmalloc": [[42, "index-1"], [42, "index-3"], [42, "index-4"], [42, "index-5"], [186, "index-2"], [186, "index-3"], [453, "envvar-PYTHONMALLOC"], [453, "index-39"], [454, "index-35"], [477, "index-27"], [477, "index-38"], [481, "index-284"]], "pymemallocatordomain (c type)": [[42, "c.PyMemAllocatorDomain"]], "pymemallocatorex (c type)": [[42, "c.PyMemAllocatorEx"]], "pymem_calloc (c function)": [[42, "c.PyMem_Calloc"]], "pymem_del (c function)": [[42, "c.PyMem_Del"]], "pymem_free (c function)": [[42, "c.PyMem_Free"]], "pymem_getallocator (c function)": [[42, "c.PyMem_GetAllocator"]], "pymem_malloc (c function)": [[42, "c.PyMem_Malloc"]], "pymem_new (c macro)": [[42, "c.PyMem_New"]], "pymem_rawcalloc (c function)": [[42, "c.PyMem_RawCalloc"]], "pymem_rawfree (c function)": [[42, "c.PyMem_RawFree"]], "pymem_rawmalloc (c function)": [[42, "c.PyMem_RawMalloc"]], "pymem_rawrealloc (c function)": [[42, "c.PyMem_RawRealloc"]], "pymem_realloc (c function)": [[42, "c.PyMem_Realloc"]], "pymem_resize (c macro)": [[42, "c.PyMem_Resize"]], "pymem_setallocator (c function)": [[42, "c.PyMem_SetAllocator"]], "pymem_setupdebughooks (c function)": [[42, "c.PyMem_SetupDebugHooks"]], "pyobjectarenaallocator (c type)": [[42, "c.PyObjectArenaAllocator"]], "pyobject_calloc (c function)": [[42, "c.PyObject_Calloc"]], "pyobject_free (c function)": [[42, "c.PyObject_Free"]], "pyobject_getarenaallocator (c function)": [[42, "c.PyObject_GetArenaAllocator"]], "pyobject_malloc (c function)": [[42, "c.PyObject_Malloc"]], "pyobject_realloc (c function)": [[42, "c.PyObject_Realloc"]], "pyobject_setarenaallocator (c function)": [[42, "c.PyObject_SetArenaAllocator"]], "pytracemalloc_track (c function)": [[42, "c.PyTraceMalloc_Track"]], "pytracemalloc_untrack (c function)": [[42, "c.PyTraceMalloc_Untrack"]], "calloc (c function)": [[42, "index-0"]], "free (c function)": [[42, "index-0"]], "malloc (c function)": [[42, "index-0"]], "realloc (c function)": [[42, "index-0"]], "pybuf_read (c macro)": [[43, "c.PyBUF_READ"]], "pybuf_write (c macro)": [[43, "c.PyBUF_WRITE"]], "pymemoryview_check (c function)": [[43, "c.PyMemoryView_Check"]], "pymemoryview_frombuffer (c function)": [[43, "c.PyMemoryView_FromBuffer"]], "pymemoryview_frommemory (c function)": [[43, "c.PyMemoryView_FromMemory"]], "pymemoryview_fromobject (c function)": [[43, "c.PyMemoryView_FromObject"]], "pymemoryview_get_base (c function)": [[43, "c.PyMemoryView_GET_BASE"]], "pymemoryview_get_buffer (c function)": [[43, "c.PyMemoryView_GET_BUFFER"]], "pymemoryview_getcontiguous (c function)": [[43, "c.PyMemoryView_GetContiguous"]], "memoryview\uff08\u8a18\u61b6\u9ad4\u8996\u5716\uff09": [[43, "index-0"], [342, "index-40"]], "pyinstancemethod_check (c function)": [[44, "c.PyInstanceMethod_Check"]], "pyinstancemethod_function (c function)": [[44, "c.PyInstanceMethod_Function"]], "pyinstancemethod_get_function (c function)": [[44, "c.PyInstanceMethod_GET_FUNCTION"]], "pyinstancemethod_new (c function)": [[44, "c.PyInstanceMethod_New"]], "pyinstancemethod_type (c var)": [[44, "c.PyInstanceMethod_Type"]], "pymethod_check (c function)": [[44, "c.PyMethod_Check"]], "pymethod_function (c function)": [[44, "c.PyMethod_Function"]], "pymethod_get_function (c function)": [[44, "c.PyMethod_GET_FUNCTION"]], "pymethod_get_self (c function)": [[44, "c.PyMethod_GET_SELF"]], "pymethod_new (c function)": [[44, "c.PyMethod_New"]], "pymethod_self (c function)": [[44, "c.PyMethod_Self"]], "pymethod_type (c var)": [[44, "c.PyMethod_Type"]], "instancemethod": [[44, "index-0"]], "method\uff08\u65b9\u6cd5\uff09": [[44, "index-1"], [87, "index-26"], [87, "index-34"], [87, "term-method"], [342, "index-61"], [426, "index-37"], [426, "index-43"], [428, "index-53"], [438, "index-0"]], "pep 3121": [[45, "index-10"], [468, "index-34"], [481, "index-150"]], "pep 451": [[45, "index-7"], [87, "index-92"], [248, "index-6"], [300, "index-10"], [300, "index-11"], [322, "index-3"], [322, "index-5"], [322, "index-8"], [350, "index-20"], [430, "index-27"], [470, "index-112"], [472, "index-36"], [475, "index-23"], [475, "index-3"], [476, "index-27"], [481, "index-283"], [481, "index-43"]], "pymoduledef (c type)": [[45, "c.PyModuleDef"]], "pymoduledef.m_base (c member)": [[45, "c.PyModuleDef.m_base"]], "pymoduledef.m_clear (c member)": [[45, "c.PyModuleDef.m_clear"]], "pymoduledef.m_doc (c member)": [[45, "c.PyModuleDef.m_doc"]], "pymoduledef.m_free (c member)": [[45, "c.PyModuleDef.m_free"]], "pymoduledef.m_methods (c member)": [[45, "c.PyModuleDef.m_methods"]], "pymoduledef.m_name (c member)": [[45, "c.PyModuleDef.m_name"]], "pymoduledef.m_size (c member)": [[45, "c.PyModuleDef.m_size"]], "pymoduledef.m_slots (c member)": [[45, "c.PyModuleDef.m_slots"]], "pymoduledef.m_slots.m_reload (c member)": [[45, "c.PyModuleDef.m_slots.m_reload"]], "pymoduledef.m_traverse (c member)": [[45, "c.PyModuleDef.m_traverse"]], "pymoduledef_init (c function)": [[45, "c.PyModuleDef_Init"]], "pymoduledef_slot (c type)": [[45, "c.PyModuleDef_Slot"]], "pymoduledef_slot.slot (c member)": [[45, "c.PyModuleDef_Slot.slot"]], "pymoduledef_slot.value (c member)": [[45, "c.PyModuleDef_Slot.value"]], "pymodule_addfunctions (c function)": [[45, "c.PyModule_AddFunctions"]], "pymodule_addintconstant (c function)": [[45, "c.PyModule_AddIntConstant"]], "pymodule_addintmacro (c macro)": [[45, "c.PyModule_AddIntMacro"]], "pymodule_addobject (c function)": [[45, "c.PyModule_AddObject"]], "pymodule_addobjectref (c function)": [[45, "c.PyModule_AddObjectRef"]], "pymodule_addstringconstant (c function)": [[45, "c.PyModule_AddStringConstant"]], "pymodule_addstringmacro (c macro)": [[45, "c.PyModule_AddStringMacro"]], "pymodule_addtype (c function)": [[45, "c.PyModule_AddType"]], "pymodule_check (c function)": [[45, "c.PyModule_Check"]], "pymodule_checkexact (c function)": [[45, "c.PyModule_CheckExact"]], "pymodule_create (c function)": [[45, "c.PyModule_Create"]], "pymodule_create2 (c function)": [[45, "c.PyModule_Create2"]], "pymodule_execdef (c function)": [[45, "c.PyModule_ExecDef"]], "pymodule_fromdefandspec (c function)": [[45, "c.PyModule_FromDefAndSpec"]], "pymodule_fromdefandspec2 (c function)": [[45, "c.PyModule_FromDefAndSpec2"]], "pymodule_getdef (c function)": [[45, "c.PyModule_GetDef"]], "pymodule_getdict (c function)": [[45, "c.PyModule_GetDict"]], "pymodule_getfilename (c function)": [[45, "c.PyModule_GetFilename"]], "pymodule_getfilenameobject (c function)": [[45, "c.PyModule_GetFilenameObject"]], "pymodule_getname (c function)": [[45, "c.PyModule_GetName"]], "pymodule_getnameobject (c function)": [[45, "c.PyModule_GetNameObject"]], "pymodule_getstate (c function)": [[45, "c.PyModule_GetState"]], "pymodule_new (c function)": [[45, "c.PyModule_New"]], "pymodule_newobject (c function)": [[45, "c.PyModule_NewObject"]], "pymodule_setdocstring (c function)": [[45, "c.PyModule_SetDocString"]], "pymodule_type (c var)": [[45, "c.PyModule_Type"]], "pystate_addmodule (c function)": [[45, "c.PyState_AddModule"]], "pystate_findmodule (c function)": [[45, "c.PyState_FindModule"]], "pystate_removemodule (c function)": [[45, "c.PyState_RemoveModule"]], "py_mod_multiple_interpreters_not_supported (c macro)": [[45, "c.Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED"]], "py_mod_multiple_interpreters_supported (c macro)": [[45, "c.Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED"]], "py_mod_per_interpreter_gil_supported (c macro)": [[45, "c.Py_MOD_PER_INTERPRETER_GIL_SUPPORTED"]], "py_mod_create (c macro)": [[45, "c.Py_mod_create"]], "py_mod_exec (c macro)": [[45, "c.Py_mod_exec"]], "py_mod_multiple_interpreters (c macro)": [[45, "c.Py_mod_multiple_interpreters"]], "systemerror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[45, "index-4"], [45, "index-5"]], "__dict__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-3"]], "__doc__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-2"]], "__file__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-2"], [45, "index-5"]], "__loader__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-2"]], "__name__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-2"], [45, "index-4"]], "__package__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-2"]], "object\uff08\u6a21\u7d44\uff09": [[45, "index-0"]], "none": [[46, "index-0"], [426, "index-6"], [434, "index-3"]], "py_none (c var)": [[46, "c.Py_None"]], "py_return_none (c macro)": [[46, "c.Py_RETURN_NONE"]], "pyindex_check (c function)": [[47, "c.PyIndex_Check"]], "pynumber_absolute (c function)": [[47, "c.PyNumber_Absolute"]], "pynumber_add (c function)": [[47, "c.PyNumber_Add"]], "pynumber_and (c function)": [[47, "c.PyNumber_And"]], "pynumber_asssize_t (c function)": [[47, "c.PyNumber_AsSsize_t"]], "pynumber_check (c function)": [[47, "c.PyNumber_Check"]], "pynumber_divmod (c function)": [[47, "c.PyNumber_Divmod"]], "pynumber_float (c function)": [[47, "c.PyNumber_Float"]], "pynumber_floordivide (c function)": [[47, "c.PyNumber_FloorDivide"]], "pynumber_inplaceadd (c function)": [[47, "c.PyNumber_InPlaceAdd"]], "pynumber_inplaceand (c function)": [[47, "c.PyNumber_InPlaceAnd"]], "pynumber_inplacefloordivide (c function)": [[47, "c.PyNumber_InPlaceFloorDivide"]], "pynumber_inplacelshift (c function)": [[47, "c.PyNumber_InPlaceLshift"]], "pynumber_inplacematrixmultiply (c function)": [[47, "c.PyNumber_InPlaceMatrixMultiply"]], "pynumber_inplacemultiply (c function)": [[47, "c.PyNumber_InPlaceMultiply"]], "pynumber_inplaceor (c function)": [[47, "c.PyNumber_InPlaceOr"]], "pynumber_inplacepower (c function)": [[47, "c.PyNumber_InPlacePower"]], "pynumber_inplaceremainder (c function)": [[47, "c.PyNumber_InPlaceRemainder"]], "pynumber_inplacershift (c function)": [[47, "c.PyNumber_InPlaceRshift"]], "pynumber_inplacesubtract (c function)": [[47, "c.PyNumber_InPlaceSubtract"]], "pynumber_inplacetruedivide (c function)": [[47, "c.PyNumber_InPlaceTrueDivide"]], "pynumber_inplacexor (c function)": [[47, "c.PyNumber_InPlaceXor"]], "pynumber_index (c function)": [[47, "c.PyNumber_Index"]], "pynumber_invert (c function)": [[47, "c.PyNumber_Invert"]], "pynumber_long (c function)": [[47, "c.PyNumber_Long"]], "pynumber_lshift (c function)": [[47, "c.PyNumber_Lshift"]], "pynumber_matrixmultiply (c function)": [[47, "c.PyNumber_MatrixMultiply"]], "pynumber_multiply (c function)": [[47, "c.PyNumber_Multiply"]], "pynumber_negative (c function)": [[47, "c.PyNumber_Negative"]], "pynumber_or (c function)": [[47, "c.PyNumber_Or"]], "pynumber_positive (c function)": [[47, "c.PyNumber_Positive"]], "pynumber_power (c function)": [[47, "c.PyNumber_Power"]], "pynumber_remainder (c function)": [[47, "c.PyNumber_Remainder"]], "pynumber_rshift (c function)": [[47, "c.PyNumber_Rshift"]], "pynumber_subtract (c function)": [[47, "c.PyNumber_Subtract"]], "pynumber_tobase (c function)": [[47, "c.PyNumber_ToBase"]], "pynumber_truedivide (c function)": [[47, "c.PyNumber_TrueDivide"]], "pynumber_xor (c function)": [[47, "c.PyNumber_Xor"]], "abs": [[47, "index-2"], [426, "index-103"]], "divmod": [[47, "index-0"], [426, "index-100"], [426, "index-101"]], "float": [[47, "index-5"], [342, "index-13"], [426, "index-104"]], "int": [[47, "index-4"], [342, "index-13"], [426, "index-104"]], "pow": [[47, "index-1"], [47, "index-3"], [426, "index-100"], [426, "index-101"], [426, "index-102"]], "pyobject_ascharbuffer (c function)": [[48, "c.PyObject_AsCharBuffer"]], "pyobject_asreadbuffer (c function)": [[48, "c.PyObject_AsReadBuffer"]], "pyobject_aswritebuffer (c function)": [[48, "c.PyObject_AsWriteBuffer"]], "pyobject_checkreadbuffer (c function)": [[48, "c.PyObject_CheckReadBuffer"]], "pep 3119": [[49, "index-4"], [49, "index-5"], [114, "index-4"], [159, "index-7"], [426, "index-94"], [466, "index-16"]], "pyobject_ascii (c function)": [[49, "c.PyObject_ASCII"]], "pyobject_bytes (c function)": [[49, "c.PyObject_Bytes"]], "pyobject_delattr (c function)": [[49, "c.PyObject_DelAttr"]], "pyobject_delattrstring (c function)": [[49, "c.PyObject_DelAttrString"]], "pyobject_delitem (c function)": [[49, "c.PyObject_DelItem"]], "pyobject_dir (c function)": [[49, "c.PyObject_Dir"]], "pyobject_format (c function)": [[49, "c.PyObject_Format"]], "pyobject_genericgetattr (c function)": [[49, "c.PyObject_GenericGetAttr"]], "pyobject_genericgetdict (c function)": [[49, "c.PyObject_GenericGetDict"]], "pyobject_genericsetattr (c function)": [[49, "c.PyObject_GenericSetAttr"]], "pyobject_genericsetdict (c function)": [[49, "c.PyObject_GenericSetDict"]], "pyobject_getaiter (c function)": [[49, "c.PyObject_GetAIter"]], "pyobject_getattr (c function)": [[49, "c.PyObject_GetAttr"]], "pyobject_getattrstring (c function)": [[49, "c.PyObject_GetAttrString"]], "pyobject_getitem (c function)": [[49, "c.PyObject_GetItem"]], "pyobject_getitemdata (c function)": [[49, "c.PyObject_GetItemData"]], "pyobject_getiter (c function)": [[49, "c.PyObject_GetIter"]], "pyobject_gettypedata (c function)": [[49, "c.PyObject_GetTypeData"]], "pyobject_hasattr (c function)": [[49, "c.PyObject_HasAttr"]], "pyobject_hasattrstring (c function)": [[49, "c.PyObject_HasAttrString"]], "pyobject_hash (c function)": [[49, "c.PyObject_Hash"]], "pyobject_hashnotimplemented (c function)": [[49, "c.PyObject_HashNotImplemented"]], "pyobject_isinstance (c function)": [[49, "c.PyObject_IsInstance"]], "pyobject_issubclass (c function)": [[49, "c.PyObject_IsSubclass"]], "pyobject_istrue (c function)": [[49, "c.PyObject_IsTrue"]], "pyobject_length (c function)": [[49, "c.PyObject_Length"]], "pyobject_lengthhint (c function)": [[49, "c.PyObject_LengthHint"]], "pyobject_not (c function)": [[49, "c.PyObject_Not"]], "pyobject_print (c function)": [[49, "c.PyObject_Print"]], "pyobject_repr (c function)": [[49, "c.PyObject_Repr"]], "pyobject_richcompare (c function)": [[49, "c.PyObject_RichCompare"]], "pyobject_richcomparebool (c function)": [[49, "c.PyObject_RichCompareBool"]], "pyobject_setattr (c function)": [[49, "c.PyObject_SetAttr"]], "pyobject_setattrstring (c function)": [[49, "c.PyObject_SetAttrString"]], "pyobject_setitem (c function)": [[49, "c.PyObject_SetItem"]], "pyobject_size (c function)": [[49, "c.PyObject_Size"]], "pyobject_str (c function)": [[49, "c.PyObject_Str"]], "pyobject_str\uff08c \u51fd\u5f0f\uff09": [[49, "index-2"]], "pyobject_type (c function)": [[49, "c.PyObject_Type"]], "pyobject_typecheck (c function)": [[49, "c.PyObject_TypeCheck"]], "pytype_gettypedatasize (c function)": [[49, "c.PyType_GetTypeDataSize"]], "py_notimplemented (c var)": [[49, "c.Py_NotImplemented"]], "py_return_notimplemented (c macro)": [[49, "c.Py_RETURN_NOTIMPLEMENTED"]], "_pyobject_getdictptr (c function)": [[49, "c._PyObject_GetDictPtr"]], "ascii": [[49, "index-1"], [432, "index-1"], [433, "index-17"]], "bulit-in function\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[49, "index-0"], [49, "index-1"], [49, "index-3"], [49, "index-6"], [49, "index-7"], [49, "index-8"]], "hash\uff08\u96dc\u6e4a\uff09": [[49, "index-6"], [63, "index-2"], [342, "index-22"], [426, "index-80"]], "repr": [[49, "index-0"], [63, "index-1"], [75, "index-3"], [434, "index-3"]], "string\uff08\u5b57\u4e32\uff09": [[49, "index-2"], [75, "index-3"], [223, "index-11"], [223, "index-4"], [342, "index-28"], [342, "index-30"], [342, "index-32"], [342, "index-35"], [426, "index-18"], [426, "index-76"], [426, "index-78"], [428, "index-42"], [428, "index-43"], [428, "index-45"], [433, "index-25"], [434, "index-3"]], "pyunstable_perfmapstate_fini (c function)": [[51, "c.PyUnstable_PerfMapState_Fini"]], "pyunstable_perfmapstate_init (c function)": [[51, "c.PyUnstable_PerfMapState_Init"]], "pyunstable_writeperfmapentry (c function)": [[51, "c.PyUnstable_WritePerfMapEntry"]], "py_clear (c function)": [[52, "c.Py_CLEAR"]], "py_newref (c function)": [[52, "c.Py_NewRef"]], "py_refcnt (c function)": [[52, "c.Py_REFCNT"]], "py_setref (c macro)": [[52, "c.Py_SETREF"]], "py_set_refcnt (c function)": [[52, "c.Py_SET_REFCNT"]], "py_xincref (c function)": [[52, "c.Py_XINCREF"]], "py_xnewref (c function)": [[52, "c.Py_XNewRef"]], "py_xsetref (c macro)": [[52, "c.Py_XSETREF"]], "pyeval_getbuiltins (c function)": [[53, "c.PyEval_GetBuiltins"]], "pyeval_getframe (c function)": [[53, "c.PyEval_GetFrame"]], "pyeval_getfuncdesc (c function)": [[53, "c.PyEval_GetFuncDesc"]], "pyeval_getfuncname (c function)": [[53, "c.PyEval_GetFuncName"]], "pyeval_getglobals (c function)": [[53, "c.PyEval_GetGlobals"]], "pyeval_getlocals (c function)": [[53, "c.PyEval_GetLocals"]], "pysequence_check (c function)": [[54, "c.PySequence_Check"]], "pysequence_concat (c function)": [[54, "c.PySequence_Concat"]], "pysequence_contains (c function)": [[54, "c.PySequence_Contains"]], "pysequence_count (c function)": [[54, "c.PySequence_Count"]], "pysequence_delitem (c function)": [[54, "c.PySequence_DelItem"]], "pysequence_delslice (c function)": [[54, "c.PySequence_DelSlice"]], "pysequence_fast (c function)": [[54, "c.PySequence_Fast"]], "pysequence_fast_get_item (c function)": [[54, "c.PySequence_Fast_GET_ITEM"]], "pysequence_fast_get_size (c function)": [[54, "c.PySequence_Fast_GET_SIZE"]], "pysequence_fast_items (c function)": [[54, "c.PySequence_Fast_ITEMS"]], "pysequence_getslice (c function)": [[54, "c.PySequence_GetSlice"]], "pysequence_item (c function)": [[54, "c.PySequence_ITEM"]], "pysequence_inplaceconcat (c function)": [[54, "c.PySequence_InPlaceConcat"]], "pysequence_inplacerepeat (c function)": [[54, "c.PySequence_InPlaceRepeat"]], "pysequence_index (c function)": [[54, "c.PySequence_Index"]], "pysequence_length (c function)": [[54, "c.PySequence_Length"]], "pysequence_list (c function)": [[54, "c.PySequence_List"]], "pysequence_repeat (c function)": [[54, "c.PySequence_Repeat"]], "pysequence_setitem (c function)": [[54, "c.PySequence_SetItem"]], "pysequence_setslice (c function)": [[54, "c.PySequence_SetSlice"]], "pysequence_size (c function)": [[54, "c.PySequence_Size"]], "pysequence_tuple (c function)": [[54, "c.PySequence_Tuple"]], "built-in function\uff08\u5185\u5efa\u51fd\u5f0f\uff09": [[54, "index-0"], [54, "index-1"]], "tuple\uff08\u5143\u7ec4\uff09": [[54, "index-1"]], "pyanyset_check (c function)": [[55, "c.PyAnySet_Check"]], "pyanyset_checkexact (c function)": [[55, "c.PyAnySet_CheckExact"]], "pyfrozenset_check (c function)": [[55, "c.PyFrozenSet_Check"]], "pyfrozenset_checkexact (c function)": [[55, "c.PyFrozenSet_CheckExact"]], "pyfrozenset_new (c function)": [[55, "c.PyFrozenSet_New"]], "pyfrozenset_type (c var)": [[55, "c.PyFrozenSet_Type"]], "pysetobject (c type)": [[55, "c.PySetObject"]], "pyset_add (c function)": [[55, "c.PySet_Add"]], "pyset_check (c function)": [[55, "c.PySet_Check"]], "pyset_checkexact (c function)": [[55, "c.PySet_CheckExact"]], "pyset_clear (c function)": [[55, "c.PySet_Clear"]], "pyset_contains (c function)": [[55, "c.PySet_Contains"]], "pyset_discard (c function)": [[55, "c.PySet_Discard"]], "pyset_get_size (c function)": [[55, "c.PySet_GET_SIZE"]], "pyset_new (c function)": [[55, "c.PySet_New"]], "pyset_pop (c function)": [[55, "c.PySet_Pop"]], "pyset_size (c function)": [[55, "c.PySet_Size"]], "pyset_type (c var)": [[55, "c.PySet_Type"]], "frozenset\uff08\u51cd\u7d50\u96c6\u5408\uff09": [[55, "index-0"], [426, "index-29"]], "set\uff08\u96c6\u5408\uff09": [[55, "index-0"], [342, "index-51"], [426, "index-28"], [428, "index-16"]], "pyslice_adjustindices (c function)": [[56, "c.PySlice_AdjustIndices"]], "pyslice_check (c function)": [[56, "c.PySlice_Check"]], "pyslice_getindices (c function)": [[56, "c.PySlice_GetIndices"]], "pyslice_getindicesex (c function)": [[56, "c.PySlice_GetIndicesEx"]], "pyslice_new (c function)": [[56, "c.PySlice_New"]], "pyslice_type (c var)": [[56, "c.PySlice_Type"]], "pyslice_unpack (c function)": [[56, "c.PySlice_Unpack"]], "py_ellipsis (c var)": [[56, "c.Py_Ellipsis"]], "pep 387": [[57, "index-3"], [211, "index-11"], [211, "index-12"]], "pyunstable": [[57, "index-1"]], "py_limited_api (c macro)": [[57, "c.Py_LIMITED_API"]], "meth_class (c macro)": [[58, "c.METH_CLASS"]], "meth_coexist (c macro)": [[58, "c.METH_COEXIST"]], "meth_fastcall (c macro)": [[58, "c.METH_FASTCALL"]], "meth_keywords (c macro)": [[58, "c.METH_KEYWORDS"]], "meth_method (c macro)": [[58, "c.METH_METHOD"]], "meth_noargs (c macro)": [[58, "c.METH_NOARGS"]], "meth_o (c macro)": [[58, "c.METH_O"]], "meth_static (c macro)": [[58, "c.METH_STATIC"]], "meth_varargs (c macro)": [[58, "c.METH_VARARGS"]], "pycfunction (c type)": [[58, "c.PyCFunction"]], "pycfunctionwithkeywords (c type)": [[58, "c.PyCFunctionWithKeywords"]], "pycfunction_new (c function)": [[58, "c.PyCFunction_New"]], "pycfunction_newex (c function)": [[58, "c.PyCFunction_NewEx"]], "pycmethod (c type)": [[58, "c.PyCMethod"]], "pycmethod_new (c function)": [[58, "c.PyCMethod_New"]], "pygetsetdef (c type)": [[58, "c.PyGetSetDef"]], "pygetsetdef.closure (c member)": [[58, "c.PyGetSetDef.closure"]], "pygetsetdef.doc (c member)": [[58, "c.PyGetSetDef.doc"]], "pygetsetdef.get (c member)": [[58, "c.PyGetSetDef.get"]], "pygetsetdef.name (c member)": [[58, "c.PyGetSetDef.name"]], "pygetsetdef.set (c member)": [[58, "c.PyGetSetDef.set"]], "pymemberdef (c type)": [[58, "c.PyMemberDef"]], "pymemberdef.doc (c member)": [[58, "c.PyMemberDef.doc"]], "pymemberdef.flags (c member)": [[58, "c.PyMemberDef.flags"]], "pymemberdef.name (c member)": [[58, "c.PyMemberDef.name"]], "pymemberdef.offset (c member)": [[58, "c.PyMemberDef.offset"]], "pymemberdef.type (c member)": [[58, "c.PyMemberDef.type"]], "pymember_getone (c function)": [[58, "c.PyMember_GetOne"]], "pymember_setone (c function)": [[58, "c.PyMember_SetOne"]], "pymethoddef (c type)": [[58, "c.PyMethodDef"]], "pymethoddef.ml_doc (c member)": [[58, "c.PyMethodDef.ml_doc"]], "pymethoddef.ml_flags (c member)": [[58, "c.PyMethodDef.ml_flags"]], "pymethoddef.ml_meth (c member)": [[58, "c.PyMethodDef.ml_meth"]], "pymethoddef.ml_name (c member)": [[58, "c.PyMethodDef.ml_name"]], "pyobject (c type)": [[58, "c.PyObject"]], "pyobject_head (c macro)": [[58, "c.PyObject_HEAD"]], "pyobject_head_init (c macro)": [[58, "c.PyObject_HEAD_INIT"]], "pyobject_var_head (c macro)": [[58, "c.PyObject_VAR_HEAD"]], "pyvarobject (c type)": [[58, "c.PyVarObject"]], "pyvarobject_head_init (c macro)": [[58, "c.PyVarObject_HEAD_INIT"]], "py_audit_read (c macro)": [[58, "c.Py_AUDIT_READ"]], "py_is_type (c function)": [[58, "c.Py_IS_TYPE"]], "py_is (c function)": [[58, "c.Py_Is"]], "py_isfalse (c function)": [[58, "c.Py_IsFalse"]], "py_isnone (c function)": [[58, "c.Py_IsNone"]], "py_istrue (c function)": [[58, "c.Py_IsTrue"]], "py_readonly (c macro)": [[58, "c.Py_READONLY"]], "py_relative_offset (c macro)": [[58, "c.Py_RELATIVE_OFFSET"]], "py_set_size (c function)": [[58, "c.Py_SET_SIZE"]], "py_set_type (c function)": [[58, "c.Py_SET_TYPE"]], "py_size (c function)": [[58, "c.Py_SIZE"]], "py_type (c function)": [[58, "c.Py_TYPE"]], "py_t_bool (c macro)": [[58, "c.Py_T_BOOL"]], "py_t_byte (c macro)": [[58, "c.Py_T_BYTE"]], "py_t_char (c macro)": [[58, "c.Py_T_CHAR"]], "py_t_double (c macro)": [[58, "c.Py_T_DOUBLE"]], "py_t_float (c macro)": [[58, "c.Py_T_FLOAT"]], "py_t_int (c macro)": [[58, "c.Py_T_INT"]], "py_t_long (c macro)": [[58, "c.Py_T_LONG"]], "py_t_longlong (c macro)": [[58, "c.Py_T_LONGLONG"]], "py_t_object_ex (c macro)": [[58, "c.Py_T_OBJECT_EX"]], "py_t_pyssizet (c macro)": [[58, "c.Py_T_PYSSIZET"]], "py_t_short (c macro)": [[58, "c.Py_T_SHORT"]], "py_t_string (c macro)": [[58, "c.Py_T_STRING"]], "py_t_string_inplace (c macro)": [[58, "c.Py_T_STRING_INPLACE"]], "py_t_ubyte (c macro)": [[58, "c.Py_T_UBYTE"]], "py_t_uint (c macro)": [[58, "c.Py_T_UINT"]], "py_t_ulong (c macro)": [[58, "c.Py_T_ULONG"]], "py_t_ulonglong (c macro)": [[58, "c.Py_T_ULONGLONG"]], "py_t_ushort (c macro)": [[58, "c.Py_T_USHORT"]], "readonly (c macro)": [[58, "index-3"]], "read_restricted (c macro)": [[58, "index-2"]], "restricted (c macro)": [[58, "index-2"]], "t_bool (c macro)": [[58, "index-4"]], "t_byte (c macro)": [[58, "index-4"]], "t_char (c macro)": [[58, "index-4"]], "t_double (c macro)": [[58, "index-4"]], "t_float (c macro)": [[58, "index-4"]], "t_int (c macro)": [[58, "index-4"]], "t_long (c macro)": [[58, "index-4"]], "t_longlong (c macro)": [[58, "index-4"]], "t_none (c macro)": [[58, "c.T_NONE"]], "t_object (c macro)": [[58, "c.T_OBJECT"]], "t_object_ex (c macro)": [[58, "index-4"]], "t_pyssizet (c macro)": [[58, "index-4"]], "t_short (c macro)": [[58, "index-4"]], "t_string (c macro)": [[58, "index-4"]], "t_string_inplace (c macro)": [[58, "index-4"]], "t_ubyte (c macro)": [[58, "index-4"]], "t_uint (c macro)": [[58, "index-4"]], "t_ulong (c macro)": [[58, "index-4"]], "t_ulongulong (c macro)": [[58, "index-4"]], "t_ushort (c macro)": [[58, "index-4"]], "write_restricted (c macro)": [[58, "index-2"]], "_pycfunctionfast (c type)": [[58, "c._PyCFunctionFast"]], "_pycfunctionfastwithkeywords (c type)": [[58, "c._PyCFunctionFastWithKeywords"]], "classmethod": [[58, "index-0"]], "getter (c type)": [[58, "c.getter"]], "setter (c type)": [[58, "c.setter"]], "staticmethod": [[58, "index-1"]], "structmember.h": [[58, "index-4"]], "pep 578": [[59, "index-1"], [140, "index-3"], [350, "index-42"], [479, "index-35"]], "pyos_afterfork (c function)": [[59, "c.PyOS_AfterFork"]], "pyos_afterfork_child (c function)": [[59, "c.PyOS_AfterFork_Child"]], "pyos_afterfork_parent (c function)": [[59, "c.PyOS_AfterFork_Parent"]], "pyos_beforefork (c function)": [[59, "c.PyOS_BeforeFork"]], "pyos_checkstack (c function)": [[59, "c.PyOS_CheckStack"]], "pyos_fspath (c function)": [[59, "c.PyOS_FSPath"]], "pyos_getsig (c function)": [[59, "c.PyOS_getsig"]], "pyos_setsig (c function)": [[59, "c.PyOS_setsig"]], "pyos_sighandler_t (c type)": [[59, "c.PyOS_sighandler_t"]], "pysys_addaudithook (c function)": [[59, "c.PySys_AddAuditHook"]], "pysys_addwarnoption (c function)": [[59, "c.PySys_AddWarnOption"]], "pysys_addwarnoptionunicode (c function)": [[59, "c.PySys_AddWarnOptionUnicode"]], "pysys_addxoption (c function)": [[59, "c.PySys_AddXOption"]], "pysys_audit (c function)": [[59, "c.PySys_Audit"]], "pysys_formatstderr (c function)": [[59, "c.PySys_FormatStderr"]], "pysys_formatstdout (c function)": [[59, "c.PySys_FormatStdout"]], "pysys_getobject (c function)": [[59, "c.PySys_GetObject"]], "pysys_getxoptions (c function)": [[59, "c.PySys_GetXOptions"]], "pysys_resetwarnoptions (c function)": [[59, "c.PySys_ResetWarnOptions"]], "pysys_setobject (c function)": [[59, "c.PySys_SetObject"]], "pysys_setpath (c function)": [[59, "c.PySys_SetPath"]], "pysys_writestderr (c function)": [[59, "c.PySys_WriteStderr"]], "pysys_writestdout (c function)": [[59, "c.PySys_WriteStdout"]], "py_atexit (c function)": [[59, "c.Py_AtExit"]], "py_audithookfunction (c type)": [[59, "c.Py_AuditHookFunction"]], "py_decodelocale (c function)": [[59, "c.Py_DecodeLocale"]], "py_encodelocale (c function)": [[59, "c.Py_EncodeLocale"]], "py_exit (c function)": [[59, "c.Py_Exit"]], "py_fatalerror (c function)": [[59, "c.Py_FatalError"]], "py_fdisinteractive (c function)": [[59, "c.Py_FdIsInteractive"]], "use_stackcheck (c macro)": [[59, "index-0"]], "abort (c function)": [[59, "index-2"]], "cleanup functions\uff08\u6e05\u7406\u51fd\u5f0f\uff09": [[59, "index-4"]], "exit (c function)": [[59, "index-3"]], "pystructsequence_desc (c type)": [[60, "c.PyStructSequence_Desc"]], "pystructsequence_desc.doc (c member)": [[60, "c.PyStructSequence_Desc.doc"]], "pystructsequence_desc.fields (c member)": [[60, "c.PyStructSequence_Desc.fields"]], "pystructsequence_desc.n_in_sequence (c member)": [[60, "c.PyStructSequence_Desc.n_in_sequence"]], "pystructsequence_desc.name (c member)": [[60, "c.PyStructSequence_Desc.name"]], "pystructsequence_field (c type)": [[60, "c.PyStructSequence_Field"]], "pystructsequence_field.doc (c member)": [[60, "c.PyStructSequence_Field.doc"]], "pystructsequence_field.name (c member)": [[60, "c.PyStructSequence_Field.name"]], "pystructsequence_get_item (c function)": [[60, "c.PyStructSequence_GET_ITEM"]], "pystructsequence_getitem (c function)": [[60, "c.PyStructSequence_GetItem"]], "pystructsequence_inittype (c function)": [[60, "c.PyStructSequence_InitType"]], "pystructsequence_inittype2 (c function)": [[60, "c.PyStructSequence_InitType2"]], "pystructsequence_new (c function)": [[60, "c.PyStructSequence_New"]], "pystructsequence_newtype (c function)": [[60, "c.PyStructSequence_NewType"]], "pystructsequence_set_item (c function)": [[60, "c.PyStructSequence_SET_ITEM"]], "pystructsequence_setitem (c function)": [[60, "c.PyStructSequence_SetItem"]], "pystructsequence_unnamedfield (c var)": [[60, "c.PyStructSequence_UnnamedField"]], "pytupleobject (c type)": [[60, "c.PyTupleObject"]], "pytuple_check (c function)": [[60, "c.PyTuple_Check"]], "pytuple_checkexact (c function)": [[60, "c.PyTuple_CheckExact"]], "pytuple_get_item (c function)": [[60, "c.PyTuple_GET_ITEM"]], "pytuple_get_size (c function)": [[60, "c.PyTuple_GET_SIZE"]], "pytuple_getitem (c function)": [[60, "c.PyTuple_GetItem"]], "pytuple_getslice (c function)": [[60, "c.PyTuple_GetSlice"]], "pytuple_new (c function)": [[60, "c.PyTuple_New"]], "pytuple_pack (c function)": [[60, "c.PyTuple_Pack"]], "pytuple_set_item (c function)": [[60, "c.PyTuple_SET_ITEM"]], "pytuple_size (c function)": [[60, "c.PyTuple_Size"]], "pytuple_type (c var)": [[60, "c.PyTuple_Type"]], "_pytuple_resize (c function)": [[60, "c._PyTuple_Resize"]], "pytypeobject (c type)": [[61, "c.PyTypeObject"]], "pytype_addwatcher (c function)": [[61, "c.PyType_AddWatcher"]], "pytype_check (c function)": [[61, "c.PyType_Check"]], "pytype_checkexact (c function)": [[61, "c.PyType_CheckExact"]], "pytype_clearcache (c function)": [[61, "c.PyType_ClearCache"]], "pytype_clearwatcher (c function)": [[61, "c.PyType_ClearWatcher"]], "pytype_frommetaclass (c function)": [[61, "c.PyType_FromMetaclass"]], "pytype_frommoduleandspec (c function)": [[61, "c.PyType_FromModuleAndSpec"]], "pytype_fromspec (c function)": [[61, "c.PyType_FromSpec"]], "pytype_fromspecwithbases (c function)": [[61, "c.PyType_FromSpecWithBases"]], "pytype_genericalloc (c function)": [[61, "c.PyType_GenericAlloc"]], "pytype_genericnew (c function)": [[61, "c.PyType_GenericNew"]], "pytype_getdict (c function)": [[61, "c.PyType_GetDict"]], "pytype_getflags (c function)": [[61, "c.PyType_GetFlags"]], "pytype_getmodule (c function)": [[61, "c.PyType_GetModule"]], "pytype_getmodulebydef (c function)": [[61, "c.PyType_GetModuleByDef"]], "pytype_getmodulestate (c function)": [[61, "c.PyType_GetModuleState"]], "pytype_getname (c function)": [[61, "c.PyType_GetName"]], "pytype_getqualname (c function)": [[61, "c.PyType_GetQualName"]], "pytype_getslot (c function)": [[61, "c.PyType_GetSlot"]], "pytype_hasfeature (c function)": [[61, "c.PyType_HasFeature"]], "pytype_is_gc (c function)": [[61, "c.PyType_IS_GC"]], "pytype_issubtype (c function)": [[61, "c.PyType_IsSubtype"]], "pytype_modified (c function)": [[61, "c.PyType_Modified"]], "pytype_ready (c function)": [[61, "c.PyType_Ready"]], "pytype_slot (c type)": [[61, "c.PyType_Slot"]], "pytype_slot.pfunc (c member)": [[61, "c.PyType_Slot.pfunc"]], "pytype_slot.slot (c member)": [[61, "c.PyType_Slot.slot"]], "pytype_spec (c type)": [[61, "c.PyType_Spec"]], "pytype_spec.basicsize (c member)": [[61, "c.PyType_Spec.basicsize"]], "pytype_spec.flags (c member)": [[61, "c.PyType_Spec.flags"]], "pytype_spec.itemsize (c member)": [[61, "c.PyType_Spec.itemsize"]], "pytype_spec.name (c member)": [[61, "c.PyType_Spec.name"]], "pytype_spec.slots (c member)": [[61, "c.PyType_Spec.slots"]], "pytype_type (c var)": [[61, "c.PyType_Type"]], "pytype_watch (c function)": [[61, "c.PyType_Watch"]], "pytype_watchcallback (c type)": [[61, "c.PyType_WatchCallback"]], "pyunstable_type_assignversiontag (c function)": [[61, "c.PyUnstable_Type_AssignVersionTag"]], "py_genericalias (c function)": [[62, "c.Py_GenericAlias"]], "py_genericaliastype (c var)": [[62, "c.Py_GenericAliasType"]], "pep 442": [[63, "index-5"], [75, "index-2"], [225, "index-2"], [475, "index-15"], [475, "index-16"], [475, "index-45"], [475, "index-46"], [480, "index-20"], [481, "index-207"]], "pep 634": [[63, "index-3"], [63, "index-4"], [110, "index-1"], [425, "index-19"], [425, "index-25"], [426, "index-108"], [470, "index-80"], [470, "index-95"], [481, "index-108"], [481, "index-54"], [481, "index-96"]], "pyasyncmethods (c type)": [[63, "c.PyAsyncMethods"]], "pyasyncmethods.am_aiter (c member)": [[63, "c.PyAsyncMethods.am_aiter"]], "pyasyncmethods.am_anext (c member)": [[63, "c.PyAsyncMethods.am_anext"]], "pyasyncmethods.am_await (c member)": [[63, "c.PyAsyncMethods.am_await"]], "pyasyncmethods.am_send (c member)": [[63, "c.PyAsyncMethods.am_send"]], "pybufferprocs.bf_getbuffer (c member)": [[63, "c.PyBufferProcs.bf_getbuffer"]], "pybufferprocs.bf_releasebuffer (c member)": [[63, "c.PyBufferProcs.bf_releasebuffer"]], "pymappingmethods (c type)": [[63, "c.PyMappingMethods"]], "pymappingmethods.mp_ass_subscript (c member)": [[63, "c.PyMappingMethods.mp_ass_subscript"]], "pymappingmethods.mp_length (c member)": [[63, "c.PyMappingMethods.mp_length"]], "pymappingmethods.mp_subscript (c member)": [[63, "c.PyMappingMethods.mp_subscript"]], "pynumbermethods (c type)": [[63, "c.PyNumberMethods"]], "pynumbermethods.nb_absolute (c member)": [[63, "c.PyNumberMethods.nb_absolute"]], "pynumbermethods.nb_add (c member)": [[63, "c.PyNumberMethods.nb_add"]], "pynumbermethods.nb_and (c member)": [[63, "c.PyNumberMethods.nb_and"]], "pynumbermethods.nb_bool (c member)": [[63, "c.PyNumberMethods.nb_bool"]], "pynumbermethods.nb_divmod (c member)": [[63, "c.PyNumberMethods.nb_divmod"]], "pynumbermethods.nb_float (c member)": [[63, "c.PyNumberMethods.nb_float"]], "pynumbermethods.nb_floor_divide (c member)": [[63, "c.PyNumberMethods.nb_floor_divide"]], "pynumbermethods.nb_index (c member)": [[63, "c.PyNumberMethods.nb_index"]], "pynumbermethods.nb_inplace_add (c member)": [[63, "c.PyNumberMethods.nb_inplace_add"]], "pynumbermethods.nb_inplace_and (c member)": [[63, "c.PyNumberMethods.nb_inplace_and"]], "pynumbermethods.nb_inplace_floor_divide (c member)": [[63, "c.PyNumberMethods.nb_inplace_floor_divide"]], "pynumbermethods.nb_inplace_lshift (c member)": [[63, "c.PyNumberMethods.nb_inplace_lshift"]], "pynumbermethods.nb_inplace_matrix_multiply (c member)": [[63, "c.PyNumberMethods.nb_inplace_matrix_multiply"]], "pynumbermethods.nb_inplace_multiply (c member)": [[63, "c.PyNumberMethods.nb_inplace_multiply"]], "pynumbermethods.nb_inplace_or (c member)": [[63, "c.PyNumberMethods.nb_inplace_or"]], "pynumbermethods.nb_inplace_power (c member)": [[63, "c.PyNumberMethods.nb_inplace_power"]], "pynumbermethods.nb_inplace_remainder (c member)": [[63, "c.PyNumberMethods.nb_inplace_remainder"]], "pynumbermethods.nb_inplace_rshift (c member)": [[63, "c.PyNumberMethods.nb_inplace_rshift"]], "pynumbermethods.nb_inplace_subtract (c member)": [[63, "c.PyNumberMethods.nb_inplace_subtract"]], "pynumbermethods.nb_inplace_true_divide (c member)": [[63, "c.PyNumberMethods.nb_inplace_true_divide"]], "pynumbermethods.nb_inplace_xor (c member)": [[63, "c.PyNumberMethods.nb_inplace_xor"]], "pynumbermethods.nb_int (c member)": [[63, "c.PyNumberMethods.nb_int"]], "pynumbermethods.nb_invert (c member)": [[63, "c.PyNumberMethods.nb_invert"]], "pynumbermethods.nb_lshift (c member)": [[63, "c.PyNumberMethods.nb_lshift"]], "pynumbermethods.nb_matrix_multiply (c member)": [[63, "c.PyNumberMethods.nb_matrix_multiply"]], "pynumbermethods.nb_multiply (c member)": [[63, "c.PyNumberMethods.nb_multiply"]], "pynumbermethods.nb_negative (c member)": [[63, "c.PyNumberMethods.nb_negative"]], "pynumbermethods.nb_or (c member)": [[63, "c.PyNumberMethods.nb_or"]], "pynumbermethods.nb_positive (c member)": [[63, "c.PyNumberMethods.nb_positive"]], "pynumbermethods.nb_power (c member)": [[63, "c.PyNumberMethods.nb_power"]], "pynumbermethods.nb_remainder (c member)": [[63, "c.PyNumberMethods.nb_remainder"]], "pynumbermethods.nb_reserved (c member)": [[63, "c.PyNumberMethods.nb_reserved"]], "pynumbermethods.nb_rshift (c member)": [[63, "c.PyNumberMethods.nb_rshift"]], "pynumbermethods.nb_subtract (c member)": [[63, "c.PyNumberMethods.nb_subtract"]], "pynumbermethods.nb_true_divide (c member)": [[63, "c.PyNumberMethods.nb_true_divide"]], "pynumbermethods.nb_xor (c member)": [[63, "c.PyNumberMethods.nb_xor"]], "pyobject._ob_next (c member)": [[63, "c.PyObject._ob_next"]], "pyobject._ob_prev (c member)": [[63, "c.PyObject._ob_prev"]], "pyobject.ob_refcnt (c member)": [[63, "c.PyObject.ob_refcnt"]], "pyobject.ob_type (c member)": [[63, "c.PyObject.ob_type"]], "pysequencemethods (c type)": [[63, "c.PySequenceMethods"]], "pysequencemethods.sq_ass_item (c member)": [[63, "c.PySequenceMethods.sq_ass_item"]], "pysequencemethods.sq_concat (c member)": [[63, "c.PySequenceMethods.sq_concat"]], "pysequencemethods.sq_contains (c member)": [[63, "c.PySequenceMethods.sq_contains"]], "pysequencemethods.sq_inplace_concat (c member)": [[63, "c.PySequenceMethods.sq_inplace_concat"]], "pysequencemethods.sq_inplace_repeat (c member)": [[63, "c.PySequenceMethods.sq_inplace_repeat"]], "pysequencemethods.sq_item (c member)": [[63, "c.PySequenceMethods.sq_item"]], "pysequencemethods.sq_length (c member)": [[63, "c.PySequenceMethods.sq_length"]], "pysequencemethods.sq_repeat (c member)": [[63, "c.PySequenceMethods.sq_repeat"]], "pytypeobject.tp_alloc (c member)": [[63, "c.PyTypeObject.tp_alloc"]], "pytypeobject.tp_as_async (c member)": [[63, "c.PyTypeObject.tp_as_async"]], "pytypeobject.tp_as_buffer (c member)": [[63, "c.PyTypeObject.tp_as_buffer"]], "pytypeobject.tp_as_mapping (c member)": [[63, "c.PyTypeObject.tp_as_mapping"]], "pytypeobject.tp_as_number (c member)": [[63, "c.PyTypeObject.tp_as_number"]], "pytypeobject.tp_as_sequence (c member)": [[63, "c.PyTypeObject.tp_as_sequence"]], "pytypeobject.tp_base (c member)": [[63, "c.PyTypeObject.tp_base"]], "pytypeobject.tp_bases (c member)": [[63, "c.PyTypeObject.tp_bases"]], "pytypeobject.tp_basicsize (c member)": [[63, "c.PyTypeObject.tp_basicsize"]], "pytypeobject.tp_cache (c member)": [[63, "c.PyTypeObject.tp_cache"]], "pytypeobject.tp_call (c member)": [[63, "c.PyTypeObject.tp_call"]], "pytypeobject.tp_clear (c member)": [[63, "c.PyTypeObject.tp_clear"]], "pytypeobject.tp_dealloc (c member)": [[63, "c.PyTypeObject.tp_dealloc"]], "pytypeobject.tp_del (c member)": [[63, "c.PyTypeObject.tp_del"]], "pytypeobject.tp_descr_get (c member)": [[63, "c.PyTypeObject.tp_descr_get"]], "pytypeobject.tp_descr_set (c member)": [[63, "c.PyTypeObject.tp_descr_set"]], "pytypeobject.tp_dict (c member)": [[63, "c.PyTypeObject.tp_dict"]], "pytypeobject.tp_dictoffset (c member)": [[63, "c.PyTypeObject.tp_dictoffset"]], "pytypeobject.tp_doc (c member)": [[63, "c.PyTypeObject.tp_doc"]], "pytypeobject.tp_finalize (c member)": [[63, "c.PyTypeObject.tp_finalize"]], "pytypeobject.tp_flags (c member)": [[63, "c.PyTypeObject.tp_flags"]], "pytypeobject.tp_free (c member)": [[63, "c.PyTypeObject.tp_free"]], "pytypeobject.tp_getattr (c member)": [[63, "c.PyTypeObject.tp_getattr"]], "pytypeobject.tp_getattro (c member)": [[63, "c.PyTypeObject.tp_getattro"]], "pytypeobject.tp_getset (c member)": [[63, "c.PyTypeObject.tp_getset"]], "pytypeobject.tp_hash (c member)": [[63, "c.PyTypeObject.tp_hash"]], "pytypeobject.tp_init (c member)": [[63, "c.PyTypeObject.tp_init"]], "pytypeobject.tp_is_gc (c member)": [[63, "c.PyTypeObject.tp_is_gc"]], "pytypeobject.tp_itemsize (c member)": [[63, "c.PyTypeObject.tp_itemsize"]], "pytypeobject.tp_iter (c member)": [[63, "c.PyTypeObject.tp_iter"]], "pytypeobject.tp_iternext (c member)": [[63, "c.PyTypeObject.tp_iternext"]], "pytypeobject.tp_members (c member)": [[63, "c.PyTypeObject.tp_members"]], "pytypeobject.tp_methods (c member)": [[63, "c.PyTypeObject.tp_methods"]], "pytypeobject.tp_mro (c member)": [[63, "c.PyTypeObject.tp_mro"]], "pytypeobject.tp_name (c member)": [[63, "c.PyTypeObject.tp_name"]], "pytypeobject.tp_new (c member)": [[63, "c.PyTypeObject.tp_new"]], "pytypeobject.tp_repr (c member)": [[63, "c.PyTypeObject.tp_repr"]], "pytypeobject.tp_richcompare (c member)": [[63, "c.PyTypeObject.tp_richcompare"]], "pytypeobject.tp_setattr (c member)": [[63, "c.PyTypeObject.tp_setattr"]], "pytypeobject.tp_setattro (c member)": [[63, "c.PyTypeObject.tp_setattro"]], "pytypeobject.tp_str (c member)": [[63, "c.PyTypeObject.tp_str"]], "pytypeobject.tp_subclasses (c member)": [[63, "c.PyTypeObject.tp_subclasses"]], "pytypeobject.tp_traverse (c member)": [[63, "c.PyTypeObject.tp_traverse"]], "pytypeobject.tp_vectorcall (c member)": [[63, "c.PyTypeObject.tp_vectorcall"]], "pytypeobject.tp_vectorcall_offset (c member)": [[63, "c.PyTypeObject.tp_vectorcall_offset"]], "pytypeobject.tp_version_tag (c member)": [[63, "c.PyTypeObject.tp_version_tag"]], "pytypeobject.tp_watched (c member)": [[63, "c.PyTypeObject.tp_watched"]], "pytypeobject.tp_weaklist (c member)": [[63, "c.PyTypeObject.tp_weaklist"]], "pytypeobject.tp_weaklistoffset (c member)": [[63, "c.PyTypeObject.tp_weaklistoffset"]], "pyvarobject.ob_size (c member)": [[63, "c.PyVarObject.ob_size"]], "py_eq (c macro)": [[63, "c.Py_EQ"]], "py_ge (c macro)": [[63, "c.Py_GE"]], "py_gt (c macro)": [[63, "c.Py_GT"]], "py_le (c macro)": [[63, "c.Py_LE"]], "py_lt (c macro)": [[63, "c.Py_LT"]], "py_ne (c macro)": [[63, "c.Py_NE"]], "py_return_richcompare (c macro)": [[63, "c.Py_RETURN_RICHCOMPARE"]], "py_tpflags_basetype (c macro)": [[63, "c.Py_TPFLAGS_BASETYPE"]], "py_tpflags_base_exc_subclass (c macro)": [[63, "c.Py_TPFLAGS_BASE_EXC_SUBCLASS"]], "py_tpflags_bytes_subclass (c macro)": [[63, "c.Py_TPFLAGS_BYTES_SUBCLASS"]], "py_tpflags_default (c macro)": [[63, "c.Py_TPFLAGS_DEFAULT"]], "py_tpflags_dict_subclass (c macro)": [[63, "c.Py_TPFLAGS_DICT_SUBCLASS"]], "py_tpflags_disallow_instantiation (c macro)": [[63, "c.Py_TPFLAGS_DISALLOW_INSTANTIATION"]], "py_tpflags_have_finalize (c macro)": [[63, "c.Py_TPFLAGS_HAVE_FINALIZE"]], "py_tpflags_have_gc (c macro)": [[63, "c.Py_TPFLAGS_HAVE_GC"]], "py_tpflags_have_vectorcall (c macro)": [[63, "c.Py_TPFLAGS_HAVE_VECTORCALL"]], "py_tpflags_heaptype (c macro)": [[63, "c.Py_TPFLAGS_HEAPTYPE"]], "py_tpflags_immutabletype (c macro)": [[63, "c.Py_TPFLAGS_IMMUTABLETYPE"]], "py_tpflags_items_at_end (c macro)": [[63, "c.Py_TPFLAGS_ITEMS_AT_END"]], "py_tpflags_list_subclass (c macro)": [[63, "c.Py_TPFLAGS_LIST_SUBCLASS"]], "py_tpflags_long_subclass (c macro)": [[63, "c.Py_TPFLAGS_LONG_SUBCLASS"]], "py_tpflags_managed_dict (c macro)": [[63, "c.Py_TPFLAGS_MANAGED_DICT"]], "py_tpflags_managed_weakref (c macro)": [[63, "c.Py_TPFLAGS_MANAGED_WEAKREF"]], "py_tpflags_mapping (c macro)": [[63, "c.Py_TPFLAGS_MAPPING"]], "py_tpflags_method_descriptor (c macro)": [[63, "c.Py_TPFLAGS_METHOD_DESCRIPTOR"]], "py_tpflags_ready (c macro)": [[63, "c.Py_TPFLAGS_READY"]], "py_tpflags_readying (c macro)": [[63, "c.Py_TPFLAGS_READYING"]], "py_tpflags_sequence (c macro)": [[63, "c.Py_TPFLAGS_SEQUENCE"]], "py_tpflags_tuple_subclass (c macro)": [[63, "c.Py_TPFLAGS_TUPLE_SUBCLASS"]], "py_tpflags_type_subclass (c macro)": [[63, "c.Py_TPFLAGS_TYPE_SUBCLASS"]], "py_tpflags_unicode_subclass (c macro)": [[63, "c.Py_TPFLAGS_UNICODE_SUBCLASS"]], "py_tpflags_valid_version_tag (c macro)": [[63, "c.Py_TPFLAGS_VALID_VERSION_TAG"]], "allocfunc (c type)": [[63, "c.allocfunc"]], "binaryfunc (c type)": [[63, "c.binaryfunc"]], "descrgetfunc (c type)": [[63, "c.descrgetfunc"]], "descrsetfunc (c type)": [[63, "c.descrsetfunc"]], "destructor (c type)": [[63, "c.destructor"]], "freefunc (c type)": [[63, "c.freefunc"]], "getattrfunc (c type)": [[63, "c.getattrfunc"]], "getattrofunc (c type)": [[63, "c.getattrofunc"]], "getbufferproc (c type)": [[63, "c.getbufferproc"]], "getiterfunc (c type)": [[63, "c.getiterfunc"]], "hashfunc (c type)": [[63, "c.hashfunc"]], "initproc (c type)": [[63, "c.initproc"]], "iternextfunc (c type)": [[63, "c.iternextfunc"]], "lenfunc (c type)": [[63, "c.lenfunc"]], "newfunc (c type)": [[63, "c.newfunc"]], "objobjargproc (c type)": [[63, "c.objobjargproc"]], "objobjproc (c type)": [[63, "c.objobjproc"]], "releasebufferproc (c type)": [[63, "c.releasebufferproc"]], "reprfunc (c type)": [[63, "c.reprfunc"]], "richcmpfunc (c type)": [[63, "c.richcmpfunc"]], "sendfunc (c type)": [[63, "c.sendfunc"]], "setattrfunc (c type)": [[63, "c.setattrfunc"]], "setattrofunc (c type)": [[63, "c.setattrofunc"]], "ssizeargfunc (c type)": [[63, "c.ssizeargfunc"]], "ssizeobjargproc (c type)": [[63, "c.ssizeobjargproc"]], "ternaryfunc (c type)": [[63, "c.ternaryfunc"]], "unaryfunc (c type)": [[63, "c.unaryfunc"]], "pep 383": [[64, "index-2"], [64, "index-3"], [64, "index-4"], [156, "index-2"], [335, "index-1"], [481, "index-60"]], "pep 393": [[64, "index-0"], [156, "index-5"], [350, "index-19"], [470, "index-117"], [474, "index-30"], [474, "index-32"], [474, "index-33"], [474, "index-38"], [474, "index-54"], [474, "index-6"], [474, "index-62"], [474, "index-8"], [480, "index-25"], [480, "index-26"], [481, "index-94"]], "pep 623": [[64, "index-1"], [470, "index-91"], [472, "index-1"], [472, "index-26"], [472, "index-48"], [481, "index-107"], [481, "index-109"], [481, "index-63"]], "pyasciiobject (c type)": [[64, "c.PyASCIIObject"]], "pycompactunicodeobject (c type)": [[64, "c.PyCompactUnicodeObject"]], "pyunicodeobject (c type)": [[64, "c.PyUnicodeObject"]], "pyunicode_1byte_data (c function)": [[64, "c.PyUnicode_1BYTE_DATA"]], "pyunicode_1byte_kind (c macro)": [[64, "c.PyUnicode_1BYTE_KIND"]], "pyunicode_2byte_data (c function)": [[64, "c.PyUnicode_2BYTE_DATA"]], "pyunicode_2byte_kind (c macro)": [[64, "c.PyUnicode_2BYTE_KIND"]], "pyunicode_4byte_data (c function)": [[64, "c.PyUnicode_4BYTE_DATA"]], "pyunicode_4byte_kind (c macro)": [[64, "c.PyUnicode_4BYTE_KIND"]], "pyunicode_asasciistring (c function)": [[64, "c.PyUnicode_AsASCIIString"]], "pyunicode_ascharmapstring (c function)": [[64, "c.PyUnicode_AsCharmapString"]], "pyunicode_asencodedstring (c function)": [[64, "c.PyUnicode_AsEncodedString"]], "pyunicode_aslatin1string (c function)": [[64, "c.PyUnicode_AsLatin1String"]], "pyunicode_asmbcsstring (c function)": [[64, "c.PyUnicode_AsMBCSString"]], "pyunicode_asrawunicodeescapestring (c function)": [[64, "c.PyUnicode_AsRawUnicodeEscapeString"]], "pyunicode_asucs4 (c function)": [[64, "c.PyUnicode_AsUCS4"]], "pyunicode_asucs4copy (c function)": [[64, "c.PyUnicode_AsUCS4Copy"]], "pyunicode_asutf16string (c function)": [[64, "c.PyUnicode_AsUTF16String"]], "pyunicode_asutf32string (c function)": [[64, "c.PyUnicode_AsUTF32String"]], "pyunicode_asutf8 (c function)": [[64, "c.PyUnicode_AsUTF8"]], "pyunicode_asutf8andsize (c function)": [[64, "c.PyUnicode_AsUTF8AndSize"]], "pyunicode_asutf8string (c function)": [[64, "c.PyUnicode_AsUTF8String"]], "pyunicode_asunicodeescapestring (c function)": [[64, "c.PyUnicode_AsUnicodeEscapeString"]], "pyunicode_aswidechar (c function)": [[64, "c.PyUnicode_AsWideChar"]], "pyunicode_aswidecharstring (c function)": [[64, "c.PyUnicode_AsWideCharString"]], "pyunicode_check (c function)": [[64, "c.PyUnicode_Check"]], "pyunicode_checkexact (c function)": [[64, "c.PyUnicode_CheckExact"]], "pyunicode_compare (c function)": [[64, "c.PyUnicode_Compare"]], "pyunicode_comparewithasciistring (c function)": [[64, "c.PyUnicode_CompareWithASCIIString"]], "pyunicode_concat (c function)": [[64, "c.PyUnicode_Concat"]], "pyunicode_contains (c function)": [[64, "c.PyUnicode_Contains"]], "pyunicode_copycharacters (c function)": [[64, "c.PyUnicode_CopyCharacters"]], "pyunicode_count (c function)": [[64, "c.PyUnicode_Count"]], "pyunicode_data (c function)": [[64, "c.PyUnicode_DATA"]], "pyunicode_decode (c function)": [[64, "c.PyUnicode_Decode"]], "pyunicode_decodeascii (c function)": [[64, "c.PyUnicode_DecodeASCII"]], "pyunicode_decodecharmap (c function)": [[64, "c.PyUnicode_DecodeCharmap"]], "pyunicode_decodefsdefault (c function)": [[64, "c.PyUnicode_DecodeFSDefault"]], "pyunicode_decodefsdefaultandsize (c function)": [[64, "c.PyUnicode_DecodeFSDefaultAndSize"]], "pyunicode_decodelatin1 (c function)": [[64, "c.PyUnicode_DecodeLatin1"]], "pyunicode_decodelocale (c function)": [[64, "c.PyUnicode_DecodeLocale"]], "pyunicode_decodelocaleandsize (c function)": [[64, "c.PyUnicode_DecodeLocaleAndSize"]], "pyunicode_decodembcs (c function)": [[64, "c.PyUnicode_DecodeMBCS"]], "pyunicode_decodembcsstateful (c function)": [[64, "c.PyUnicode_DecodeMBCSStateful"]], "pyunicode_decoderawunicodeescape (c function)": [[64, "c.PyUnicode_DecodeRawUnicodeEscape"]], "pyunicode_decodeutf16 (c function)": [[64, "c.PyUnicode_DecodeUTF16"]], "pyunicode_decodeutf16stateful (c function)": [[64, "c.PyUnicode_DecodeUTF16Stateful"]], "pyunicode_decodeutf32 (c function)": [[64, "c.PyUnicode_DecodeUTF32"]], "pyunicode_decodeutf32stateful (c function)": [[64, "c.PyUnicode_DecodeUTF32Stateful"]], "pyunicode_decodeutf7 (c function)": [[64, "c.PyUnicode_DecodeUTF7"]], "pyunicode_decodeutf7stateful (c function)": [[64, "c.PyUnicode_DecodeUTF7Stateful"]], "pyunicode_decodeutf8 (c function)": [[64, "c.PyUnicode_DecodeUTF8"]], "pyunicode_decodeutf8stateful (c function)": [[64, "c.PyUnicode_DecodeUTF8Stateful"]], "pyunicode_decodeunicodeescape (c function)": [[64, "c.PyUnicode_DecodeUnicodeEscape"]], "pyunicode_encodecodepage (c function)": [[64, "c.PyUnicode_EncodeCodePage"]], "pyunicode_encodefsdefault (c function)": [[64, "c.PyUnicode_EncodeFSDefault"]], "pyunicode_encodelocale (c function)": [[64, "c.PyUnicode_EncodeLocale"]], "pyunicode_fsconverter (c function)": [[64, "c.PyUnicode_FSConverter"]], "pyunicode_fsdecoder (c function)": [[64, "c.PyUnicode_FSDecoder"]], "pyunicode_fill (c function)": [[64, "c.PyUnicode_Fill"]], "pyunicode_find (c function)": [[64, "c.PyUnicode_Find"]], "pyunicode_findchar (c function)": [[64, "c.PyUnicode_FindChar"]], "pyunicode_format (c function)": [[64, "c.PyUnicode_Format"]], "pyunicode_fromencodedobject (c function)": [[64, "c.PyUnicode_FromEncodedObject"]], "pyunicode_fromformat (c function)": [[64, "c.PyUnicode_FromFormat"]], "pyunicode_fromformatv (c function)": [[64, "c.PyUnicode_FromFormatV"]], "pyunicode_fromkindanddata (c function)": [[64, "c.PyUnicode_FromKindAndData"]], "pyunicode_fromobject (c function)": [[64, "c.PyUnicode_FromObject"]], "pyunicode_fromstring (c function)": [[64, "c.PyUnicode_FromString"]], "pyunicode_fromstringandsize (c function)": [[64, "c.PyUnicode_FromStringAndSize"]], "pyunicode_fromwidechar (c function)": [[64, "c.PyUnicode_FromWideChar"]], "pyunicode_get_length (c function)": [[64, "c.PyUnicode_GET_LENGTH"]], "pyunicode_getlength (c function)": [[64, "c.PyUnicode_GetLength"]], "pyunicode_internfromstring (c function)": [[64, "c.PyUnicode_InternFromString"]], "pyunicode_interninplace (c function)": [[64, "c.PyUnicode_InternInPlace"]], "pyunicode_isidentifier (c function)": [[64, "c.PyUnicode_IsIdentifier"]], "pyunicode_join (c function)": [[64, "c.PyUnicode_Join"]], "pyunicode_kind (c function)": [[64, "c.PyUnicode_KIND"]], "pyunicode_max_char_value (c function)": [[64, "c.PyUnicode_MAX_CHAR_VALUE"]], "pyunicode_new (c function)": [[64, "c.PyUnicode_New"]], "pyunicode_read (c function)": [[64, "c.PyUnicode_READ"]], "pyunicode_ready (c function)": [[64, "c.PyUnicode_READY"]], "pyunicode_read_char (c function)": [[64, "c.PyUnicode_READ_CHAR"]], "pyunicode_readchar (c function)": [[64, "c.PyUnicode_ReadChar"]], "pyunicode_replace (c function)": [[64, "c.PyUnicode_Replace"]], "pyunicode_richcompare (c function)": [[64, "c.PyUnicode_RichCompare"]], "pyunicode_split (c function)": [[64, "c.PyUnicode_Split"]], "pyunicode_splitlines (c function)": [[64, "c.PyUnicode_Splitlines"]], "pyunicode_substring (c function)": [[64, "c.PyUnicode_Substring"]], "pyunicode_tailmatch (c function)": [[64, "c.PyUnicode_Tailmatch"]], "pyunicode_translate (c function)": [[64, "c.PyUnicode_Translate"]], "pyunicode_type (c var)": [[64, "c.PyUnicode_Type"]], "pyunicode_write (c function)": [[64, "c.PyUnicode_WRITE"]], "pyunicode_writechar (c function)": [[64, "c.PyUnicode_WriteChar"]], "py_ucs1 (c type)": [[64, "c.Py_UCS1"]], "py_ucs2 (c type)": [[64, "c.Py_UCS2"]], "py_ucs4 (c type)": [[64, "c.Py_UCS4"]], "py_unicode (c type)": [[64, "c.Py_UNICODE"]], "py_unicode_isalnum (c function)": [[64, "c.Py_UNICODE_ISALNUM"]], "py_unicode_isalpha (c function)": [[64, "c.Py_UNICODE_ISALPHA"]], "py_unicode_isdecimal (c function)": [[64, "c.Py_UNICODE_ISDECIMAL"]], "py_unicode_isdigit (c function)": [[64, "c.Py_UNICODE_ISDIGIT"]], "py_unicode_islinebreak (c function)": [[64, "c.Py_UNICODE_ISLINEBREAK"]], "py_unicode_islower (c function)": [[64, "c.Py_UNICODE_ISLOWER"]], "py_unicode_isnumeric (c function)": [[64, "c.Py_UNICODE_ISNUMERIC"]], "py_unicode_isprintable (c function)": [[64, "c.Py_UNICODE_ISPRINTABLE"]], "py_unicode_isspace (c function)": [[64, "c.Py_UNICODE_ISSPACE"]], "py_unicode_istitle (c function)": [[64, "c.Py_UNICODE_ISTITLE"]], "py_unicode_isupper (c function)": [[64, "c.Py_UNICODE_ISUPPER"]], "py_unicode_is_high_surrogate (c function)": [[64, "c.Py_UNICODE_IS_HIGH_SURROGATE"]], "py_unicode_is_low_surrogate (c function)": [[64, "c.Py_UNICODE_IS_LOW_SURROGATE"]], "py_unicode_is_surrogate (c function)": [[64, "c.Py_UNICODE_IS_SURROGATE"]], "py_unicode_join_surrogates (c function)": [[64, "c.Py_UNICODE_JOIN_SURROGATES"]], "py_unicode_todecimal (c function)": [[64, "c.Py_UNICODE_TODECIMAL"]], "py_unicode_todigit (c function)": [[64, "c.Py_UNICODE_TODIGIT"]], "py_unicode_tolower (c function)": [[64, "c.Py_UNICODE_TOLOWER"]], "py_unicode_tonumeric (c function)": [[64, "c.Py_UNICODE_TONUMERIC"]], "py_unicode_totitle (c function)": [[64, "c.Py_UNICODE_TOTITLE"]], "py_unicode_toupper (c function)": [[64, "c.Py_UNICODE_TOUPPER"]], "co_future_division (c var)": [[66, "c.CO_FUTURE_DIVISION"]], "pep 238": [[66, "index-3"], [87, "index-93"], [111, "index-26"], [462, "index-11"], [462, "index-12"], [462, "index-13"], [468, "index-2"]], "pycompilerflags (c struct)": [[66, "c.PyCompilerFlags"]], "pycompilerflags.cf_feature_version (c member)": [[66, "c.PyCompilerFlags.cf_feature_version"]], "pycompilerflags.cf_flags (c member)": [[66, "c.PyCompilerFlags.cf_flags"]], "pyeval_evalcode (c function)": [[66, "c.PyEval_EvalCode"]], "pyeval_evalcodeex (c function)": [[66, "c.PyEval_EvalCodeEx"]], "pyeval_evalframe (c function)": [[66, "c.PyEval_EvalFrame"]], "pyeval_evalframeex (c function)": [[66, "c.PyEval_EvalFrameEx"]], "pyeval_mergecompilerflags (c function)": [[66, "c.PyEval_MergeCompilerFlags"]], "pyos_inputhook (c var)": [[66, "c.PyOS_InputHook"]], "pyos_readlinefunctionpointer (c var)": [[66, "c.PyOS_ReadlineFunctionPointer"]], "pyrun_anyfile (c function)": [[66, "c.PyRun_AnyFile"]], "pyrun_anyfileex (c function)": [[66, "c.PyRun_AnyFileEx"]], "pyrun_anyfileexflags (c function)": [[66, "c.PyRun_AnyFileExFlags"]], "pyrun_anyfileflags (c function)": [[66, "c.PyRun_AnyFileFlags"]], "pyrun_file (c function)": [[66, "c.PyRun_File"]], "pyrun_fileex (c function)": [[66, "c.PyRun_FileEx"]], "pyrun_fileexflags (c function)": [[66, "c.PyRun_FileExFlags"]], "pyrun_fileflags (c function)": [[66, "c.PyRun_FileFlags"]], "pyrun_interactiveloop (c function)": [[66, "c.PyRun_InteractiveLoop"]], "pyrun_interactiveloopflags (c function)": [[66, "c.PyRun_InteractiveLoopFlags"]], "pyrun_interactiveone (c function)": [[66, "c.PyRun_InteractiveOne"]], "pyrun_interactiveoneflags (c function)": [[66, "c.PyRun_InteractiveOneFlags"]], "pyrun_simplefile (c function)": [[66, "c.PyRun_SimpleFile"]], "pyrun_simplefileex (c function)": [[66, "c.PyRun_SimpleFileEx"]], "pyrun_simplefileexflags (c function)": [[66, "c.PyRun_SimpleFileExFlags"]], "pyrun_simplestring (c function)": [[66, "c.PyRun_SimpleString"]], "pyrun_simplestringflags (c function)": [[66, "c.PyRun_SimpleStringFlags"]], "pyrun_string (c function)": [[66, "c.PyRun_String"]], "pyrun_stringflags (c function)": [[66, "c.PyRun_StringFlags"]], "py_bytesmain (c function)": [[66, "c.Py_BytesMain"]], "py_compilestring (c function)": [[66, "c.Py_CompileString"], [66, "index-0"], [66, "index-1"], [66, "index-2"]], "py_compilestringexflags (c function)": [[66, "c.Py_CompileStringExFlags"]], "py_compilestringflags (c function)": [[66, "c.Py_CompileStringFlags"]], "py_compilestringobject (c function)": [[66, "c.Py_CompileStringObject"]], "py_main (c function)": [[66, "c.Py_Main"]], "py_eval_input (c var)": [[66, "c.Py_eval_input"]], "py_file_input (c var)": [[66, "c.Py_file_input"]], "py_single_input (c var)": [[66, "c.Py_single_input"]], "pyobject_clearweakrefs (c function)": [[67, "c.PyObject_ClearWeakRefs"]], "pyweakref_check (c function)": [[67, "c.PyWeakref_Check"]], "pyweakref_checkproxy (c function)": [[67, "c.PyWeakref_CheckProxy"]], "pyweakref_checkref (c function)": [[67, "c.PyWeakref_CheckRef"]], "pyweakref_get_object (c function)": [[67, "c.PyWeakref_GET_OBJECT"]], "pyweakref_getobject (c function)": [[67, "c.PyWeakref_GetObject"]], "pyweakref_newproxy (c function)": [[67, "c.PyWeakref_NewProxy"]], "pyweakref_newref (c function)": [[67, "c.PyWeakref_NewRef"]], "pep 3101": [[68, "index-23"], [343, "index-0"], [343, "index-1"], [466, "index-9"], [468, "index-23"], [468, "index-24"], [482, "index-23"]], "rfc": [[68, "index-12"], [100, "index-0"], [101, "index-0"], [101, "index-1"], [101, "index-2"], [101, "index-3"], [101, "index-4"], [101, "index-5"], [108, "index-1"], [108, "index-2"], [108, "index-4"], [124, "index-3"], [124, "index-4"], [141, "index-10"], [141, "index-11"], [141, "index-12"], [141, "index-15"], [141, "index-16"], [141, "index-3"], [141, "index-4"], [141, "index-5"], [141, "index-6"], [141, "index-7"], [141, "index-8"], [141, "index-9"], [144, "index-1"], [144, "index-2"], [144, "index-3"], [156, "index-10"], [156, "index-11"], [156, "index-12"], [156, "index-13"], [156, "index-14"], [156, "index-6"], [156, "index-7"], [156, "index-8"], [156, "index-9"], [173, "index-6"], [192, "index-0"], [192, "index-1"], [192, "index-2"], [192, "index-3"], [192, "index-4"], [192, "index-5"], [192, "index-6"], [192, "index-7"], [194, "index-0"], [194, "index-1"], [194, "index-10"], [194, "index-11"], [194, "index-2"], [194, "index-3"], [194, "index-4"], [194, "index-5"], [194, "index-6"], [194, "index-7"], [194, "index-8"], [194, "index-9"], [195, "index-0"], [197, "index-0"], [198, "index-0"], [199, "index-0"], [199, "index-1"], [200, "index-0"], [200, "index-1"], [200, "index-10"], [200, "index-11"], [200, "index-12"], [200, "index-13"], [200, "index-2"], [200, "index-3"], [200, "index-4"], [200, "index-5"], [200, "index-6"], [200, "index-7"], [200, "index-8"], [200, "index-9"], [201, "index-0"], [201, "index-1"], [201, "index-10"], [201, "index-11"], [201, "index-12"], [201, "index-13"], [201, "index-14"], [201, "index-2"], [201, "index-3"], [201, "index-4"], [201, "index-5"], [201, "index-6"], [201, "index-7"], [201, "index-8"], [201, "index-9"], [203, "index-0"], [203, "index-1"], [203, "index-10"], [203, "index-2"], [203, "index-3"], [203, "index-4"], [203, "index-5"], [203, "index-6"], [203, "index-7"], [203, "index-8"], [203, "index-9"], [205, "index-0"], [205, "index-1"], [206, "index-0"], [206, "index-1"], [206, "index-2"], [206, "index-3"], [206, "index-4"], [206, "index-5"], [206, "index-6"], [206, "index-7"], [206, "index-8"], [206, "index-9"], [207, "index-0"], [207, "index-1"], [207, "index-10"], [207, "index-2"], [207, "index-3"], [207, "index-4"], [207, "index-5"], [207, "index-6"], [207, "index-7"], [207, "index-8"], [207, "index-9"], [221, "index-12"], [221, "index-13"], [221, "index-14"], [221, "index-15"], [221, "index-16"], [221, "index-5"], [228, "index-9"], [233, "index-1"], [233, "index-3"], [233, "index-5"], [235, "index-2"], [239, "index-152"], [239, "index-153"], [239, "index-154"], [239, "index-155"], [239, "index-156"], [239, "index-157"], [239, "index-158"], [239, "index-159"], [239, "index-160"], [239, "index-161"], [239, "index-162"], [239, "index-163"], [239, "index-164"], [239, "index-165"], [239, "index-166"], [239, "index-167"], [239, "index-168"], [239, "index-169"], [239, "index-170"], [239, "index-171"], [239, "index-172"], [239, "index-173"], [239, "index-174"], [239, "index-175"], [239, "index-176"], [239, "index-177"], [239, "index-178"], [239, "index-179"], [239, "index-180"], [239, "index-181"], [239, "index-182"], [239, "index-183"], [239, "index-184"], [239, "index-185"], [239, "index-186"], [239, "index-187"], [239, "index-188"], [239, "index-189"], [239, "index-190"], [239, "index-191"], [239, "index-192"], [239, "index-193"], [239, "index-194"], [239, "index-195"], [239, "index-196"], [239, "index-197"], [239, "index-198"], [239, "index-199"], [239, "index-200"], [239, "index-201"], [239, "index-202"], [239, "index-203"], [239, "index-204"], [239, "index-205"], [239, "index-206"], [239, "index-207"], [239, "index-208"], [239, "index-209"], [239, "index-210"], [239, "index-211"], [239, "index-212"], [239, "index-213"], [239, "index-214"], [239, "index-215"], [239, "index-216"], [239, "index-217"], [239, "index-218"], [239, "index-219"], [239, "index-220"], [239, "index-221"], [239, "index-222"], [239, "index-223"], [239, "index-224"], [239, "index-225"], [239, "index-226"], [239, "index-76"], [240, "index-2"], [240, "index-3"], [240, "index-4"], [240, "index-5"], [240, "index-6"], [240, "index-7"], [241, "index-0"], [241, "index-1"], [241, "index-10"], [241, "index-11"], [241, "index-12"], [241, "index-13"], [241, "index-14"], [241, "index-15"], [241, "index-16"], [241, "index-17"], [241, "index-18"], [241, "index-19"], [241, "index-2"], [241, "index-20"], [241, "index-21"], [241, "index-22"], [241, "index-23"], [241, "index-24"], [241, "index-25"], [241, "index-3"], [241, "index-4"], [241, "index-5"], [241, "index-6"], [241, "index-7"], [241, "index-8"], [241, "index-9"], [242, "index-0"], [242, "index-1"], [242, "index-2"], [242, "index-3"], [242, "index-4"], [242, "index-5"], [242, "index-6"], [242, "index-7"], [243, "index-1"], [243, "index-2"], [246, "index-1"], [246, "index-2"], [246, "index-3"], [246, "index-4"], [246, "index-5"], [246, "index-6"], [246, "index-7"], [246, "index-8"], [252, "index-12"], [254, "index-12"], [257, "index-0"], [257, "index-1"], [257, "index-10"], [257, "index-11"], [257, "index-12"], [257, "index-13"], [257, "index-2"], [257, "index-3"], [257, "index-4"], [257, "index-5"], [257, "index-6"], [257, "index-7"], [257, "index-8"], [257, "index-9"], [260, "index-2"], [260, "index-3"], [260, "index-4"], [260, "index-7"], [260, "index-8"], [264, "index-4"], [264, "index-5"], [267, "index-0"], [269, "index-0"], [270, "index-1"], [270, "index-2"], [286, "index-10"], [286, "index-2"], [286, "index-3"], [286, "index-4"], [286, "index-5"], [286, "index-6"], [286, "index-7"], [286, "index-8"], [286, "index-9"], [303, "index-1"], [303, "index-2"], [303, "index-3"], [303, "index-4"], [303, "index-5"], [303, "index-6"], [315, "index-10"], [315, "index-11"], [315, "index-12"], [315, "index-9"], [325, "index-5"], [333, "index-1"], [333, "index-10"], [333, "index-11"], [333, "index-12"], [333, "index-2"], [333, "index-3"], [333, "index-4"], [333, "index-5"], [333, "index-6"], [333, "index-7"], [333, "index-8"], [333, "index-9"], [335, "index-15"], [335, "index-3"], [339, "index-10"], [339, "index-11"], [339, "index-12"], [339, "index-13"], [339, "index-16"], [339, "index-17"], [339, "index-18"], [339, "index-19"], [339, "index-20"], [339, "index-21"], [339, "index-22"], [339, "index-31"], [339, "index-32"], [339, "index-7"], [339, "index-8"], [339, "index-9"], [344, "index-0"], [344, "index-1"], [357, "index-2"], [357, "index-3"], [364, "index-10"], [364, "index-19"], [364, "index-20"], [364, "index-21"], [364, "index-22"], [391, "index-2"], [392, "index-1"], [392, "index-10"], [392, "index-11"], [392, "index-16"], [392, "index-17"], [392, "index-2"], [392, "index-3"], [392, "index-4"], [392, "index-5"], [392, "index-6"], [392, "index-7"], [392, "index-8"], [392, "index-9"], [393, "index-15"], [393, "index-16"], [393, "index-17"], [393, "index-4"], [393, "index-5"], [393, "index-6"], [393, "index-7"], [393, "index-8"], [396, "index-12"], [396, "index-19"], [396, "index-20"], [396, "index-21"], [396, "index-22"], [396, "index-23"], [396, "index-24"], [405, "index-43"], [405, "index-48"], [406, "index-2"], [406, "index-3"], [406, "index-4"], [406, "index-5"], [417, "index-0"], [449, "index-3"], [462, "index-17"], [462, "index-18"], [462, "index-19"], [462, "index-20"], [462, "index-21"], [464, "index-18"], [465, "index-22"], [465, "index-23"], [466, "index-22"], [466, "index-23"], [467, "index-10"], [467, "index-12"], [467, "index-9"], [470, "index-32"], [473, "index-11"], [473, "index-12"], [473, "index-13"], [473, "index-7"], [473, "index-8"], [474, "index-26"], [474, "index-27"], [476, "index-31"], [476, "index-32"], [476, "index-33"], [476, "index-34"], [476, "index-35"], [476, "index-36"], [476, "index-37"], [476, "index-38"], [476, "index-39"], [476, "index-40"], [476, "index-41"], [476, "index-42"], [476, "index-43"], [476, "index-44"], [476, "index-51"], [478, "index-34"], [478, "index-35"], [479, "index-25"], [480, "index-22"], [480, "index-28"], [481, "index-175"], [481, "index-216"], [481, "index-32"], [481, "index-33"], [481, "index-34"], [481, "index-42"], [481, "index-83"], [481, "index-89"], [481, "index-91"]], "rfc 4122": [[68, "index-12"], [252, "index-12"], [254, "index-12"], [396, "index-12"], [396, "index-19"], [396, "index-20"], [396, "index-21"], [396, "index-22"], [396, "index-23"], [396, "index-24"], [465, "index-22"], [465, "index-23"]], "pyinit_modulename (c function)": [[71, "c.PyInit_modulename"]], "philbrick, geoff": [[73, "index-4"]], "deallocation": [[75, "index-0"]], "deallocation, object": [[75, "index-0"]], "finalization": [[75, "index-0"]], "finalization, of objects": [[75, "index-0"]], "object representation\uff08\u7269\u4ef6\u8868\u793a\uff09": [[75, "index-3"]], "pep 572": [[78, "index-2"], [425, "index-24"], [428, "index-21"], [428, "index-87"], [472, "index-20"], [479, "index-24"], [479, "index-33"], [481, "index-191"], [481, "index-204"], [481, "index-214"], [481, "index-30"]], "pep 5": [[80, "index-8"], [461, "index-6"]], "pep 6": [[80, "index-6"]], "pep 602": [[80, "index-7"], [480, "index-10"]], "pep 8": [[85, "index-2"], [85, "index-6"], [86, "index-2"], [223, "index-10"], [428, "index-79"], [439, "index-18"], [455, "index-0"], [468, "index-38"], [481, "index-240"], [481, "index-302"]], "argument\uff08\u5f15\u6578\uff09": [[85, "index-1"], [87, "term-argument"], [425, "index-31"], [426, "index-33"], [428, "index-47"]], "parameter\uff08\u53c3\u6578\uff09": [[85, "index-1"], [87, "term-parameter"], [425, "index-27"], [425, "index-31"], [428, "index-48"]], "\u8207 argument\uff08\u5f15\u6578\uff09\u7684\u5dee\u7570": [[85, "index-1"]], "\u8207 parameter\uff08\u53c3\u6578\uff09\u7684\u5dee\u7570": [[85, "index-1"]], "...": [[87, "term-..."], [166, "index-0"], [191, "index-0"], [191, "index-3"], [305, "index-0"], [319, "index-0"], [342, "index-66"], [350, "index-27"], [362, "index-0"], [426, "index-8"]], "2to3": [[87, "term-2to3"]], ">>>": [[87, "term-0"], [191, "index-0"], [350, "index-27"]], "bdfl": [[87, "term-BDFL"]], "cpython": [[87, "term-CPython"]], "eafp": [[87, "term-EAFP"]], "gil": [[87, "term-GIL"]], "idle": [[87, "term-IDLE"], [245, "index-0"]], "lbyl": [[87, "term-LBYL"]], "mro": [[87, "term-MRO"]], "pep": [[87, "term-PEP"]], "pep 1": [[87, "index-103"], [460, "index-0"], [460, "index-1"]], "pep 278": [[87, "index-109"], [463, "index-9"]], "pep 302": [[87, "index-90"], [87, "index-99"], [223, "index-14"], [248, "index-12"], [248, "index-13"], [248, "index-14"], [248, "index-16"], [248, "index-2"], [263, "index-1"], [300, "index-0"], [300, "index-2"], [300, "index-3"], [300, "index-5"], [300, "index-6"], [300, "index-7"], [322, "index-1"], [350, "index-25"], [350, "index-26"], [421, "index-2"], [430, "index-1"], [430, "index-19"], [463, "index-17"], [463, "index-18"], [463, "index-19"], [463, "index-6"], [465, "index-21"], [469, "index-2"], [474, "index-20"], [474, "index-21"], [474, "index-37"]], "pep 3116": [[87, "index-110"], [466, "index-14"], [469, "index-3"]], "pep 3155": [[87, "index-106"], [474, "index-15"]], "pep 343": [[87, "index-86"], [111, "index-28"], [167, "index-2"], [425, "index-17"], [426, "index-107"], [465, "index-10"], [465, "index-14"], [466, "index-3"]], "pep 362": [[87, "index-101"], [87, "index-79"], [253, "index-0"], [474, "index-57"]], "pep 411": [[87, "index-105"], [350, "index-13"], [350, "index-14"], [350, "index-31"], [350, "index-32"]], "pep 420": [[87, "index-100"], [87, "index-104"], [87, "index-91"], [248, "index-5"], [430, "index-14"], [430, "index-15"], [430, "index-2"], [430, "index-20"], [430, "index-21"], [430, "index-22"], [430, "index-6"], [474, "index-2"], [474, "index-3"], [481, "index-282"], [481, "index-289"]], "pep 443": [[87, "index-95"], [475, "index-11"], [475, "index-36"]], "pep 483": [[87, "index-96"], [384, "index-136"], [384, "index-138"], [476, "index-12"]], "pep 484": [[87, "index-107"], [87, "index-108"], [87, "index-111"], [87, "index-77"], [87, "index-94"], [87, "index-97"], [120, "index-14"], [120, "index-15"], [120, "index-17"], [120, "index-18"], [342, "index-57"], [384, "index-135"], [384, "index-137"], [384, "index-158"], [384, "index-26"], [384, "index-27"], [384, "index-41"], [384, "index-54"], [425, "index-37"], [426, "index-95"], [434, "index-17"], [439, "index-17"], [470, "index-101"], [470, "index-103"], [470, "index-99"], [471, "index-93"], [471, "index-94"], [472, "index-15"], [472, "index-16"], [472, "index-3"], [476, "index-10"], [476, "index-11"], [477, "index-5"], [478, "index-20"], [479, "index-10"], [479, "index-12"]], "pep 492": [[87, "index-80"], [87, "index-81"], [87, "index-83"], [87, "index-84"], [87, "index-85"], [87, "index-87"], [87, "index-88"], [159, "index-3"], [253, "index-1"], [253, "index-2"], [425, "index-52"], [426, "index-111"], [428, "index-30"], [476, "index-1"], [476, "index-2"], [476, "index-47"], [476, "index-52"], [477, "index-35"], [477, "index-9"], [481, "index-245"], [481, "index-279"], [481, "index-290"], [481, "index-294"]], "pep 498": [[87, "index-89"], [433, "index-26"], [477, "index-3"], [477, "index-4"], [481, "index-286"]], "pep 519": [[87, "index-102"], [477, "index-16"], [481, "index-270"], [481, "index-275"], [481, "index-276"], [481, "index-277"], [481, "index-278"], [481, "index-281"]], "pep 525": [[87, "index-82"], [159, "index-2"], [253, "index-3"], [350, "index-30"], [350, "index-43"], [428, "index-29"], [477, "index-10"], [481, "index-263"]], "pep 526": [[87, "index-112"], [87, "index-78"], [120, "index-16"], [120, "index-19"], [179, "index-1"], [179, "index-2"], [384, "index-139"], [384, "index-34"], [384, "index-48"], [384, "index-50"], [425, "index-38"], [434, "index-16"], [470, "index-107"], [477, "index-33"], [477, "index-6"], [478, "index-1"], [479, "index-11"], [481, "index-264"]], "pep 585": [[87, "index-98"], [159, "index-0"], [342, "index-58"], [383, "index-5"], [384, "index-141"], [384, "index-59"], [384, "index-61"], [384, "index-62"], [384, "index-63"], [384, "index-64"], [384, "index-65"], [384, "index-66"], [384, "index-67"], [384, "index-68"], [384, "index-69"], [384, "index-70"], [384, "index-71"], [384, "index-72"], [384, "index-73"], [384, "index-74"], [384, "index-75"], [384, "index-76"], [384, "index-77"], [384, "index-78"], [384, "index-79"], [384, "index-80"], [384, "index-81"], [384, "index-82"], [384, "index-83"], [384, "index-84"], [384, "index-85"], [384, "index-86"], [384, "index-87"], [384, "index-88"], [384, "index-89"], [384, "index-90"], [384, "index-91"], [384, "index-92"], [384, "index-93"], [384, "index-95"], [384, "index-96"], [384, "index-97"], [384, "index-98"], [384, "index-99"], [480, "index-13"], [480, "index-2"], [481, "index-31"], [481, "index-80"], [481, "index-84"]], "python 3000": [[87, "term-Python-3000"]], "pythonic\uff08python \u98a8\u683c\u7684\uff09": [[87, "term-Pythonic"]], "zen of python\uff08python \u4e4b\u79aa\uff09": [[87, "term-Zen-of-Python"]], "__future__": [[87, "term-__future__"], [111, "module-__future__"], [434, "index-40"]], "__slots__": [[87, "term-__slots__"]], "abstract base class\uff08\u62bd\u8c61\u57fa\u5e95\u985e\u5225\uff09": [[87, "term-abstract-base-class"]], "annotation\uff08\u8a3b\u91cb\uff09": [[87, "term-annotation"]], "asynchronous context manager\uff08\u975e\u540c\u6b65\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[87, "term-asynchronous-context-manager"]], "asynchronous generator iterator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[87, "term-asynchronous-generator-iterator"]], "asynchronous generator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\uff09": [[87, "term-asynchronous-generator"], [426, "index-41"]], "asynchronous iterable\uff08\u975e\u540c\u6b65\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[87, "term-asynchronous-iterable"]], "asynchronous iterator\uff08\u975e\u540c\u6b65\u758a\u4ee3\u5668\uff09": [[87, "term-asynchronous-iterator"], [426, "index-41"]], "attribute\uff08\u5c6c\u6027\uff09": [[87, "term-attribute"], [426, "index-47"], [426, "index-48"], [426, "index-5"], [426, "index-51"], [426, "index-52"], [428, "index-39"], [434, "index-23"], [434, "index-4"], [434, "index-8"]], "awaitable\uff08\u53ef\u7b49\u5f85\u7269\u4ef6\uff09": [[87, "term-awaitable"]], "binary file\uff08\u4e8c\u9032\u4f4d\u6a94\u6848\uff09": [[87, "term-binary-file"]], "borrowed reference\uff08\u501f\u7528\u53c3\u7167\uff09": [[87, "term-borrowed-reference"]], "bytecode\uff08\u4f4d\u5143\u7d44\u78bc\uff09": [[87, "term-bytecode"], [426, "index-57"]], "bytes-like object\uff08\u985e\u4f4d\u5143\u7d44\u4e32\u7269\u4ef6\uff09": [[87, "term-bytes-like-object"]], "callable\uff08\u53ef\u547c\u53eb\u7269\u4ef6\uff09": [[87, "term-callable"], [426, "index-33"], [428, "index-47"]], "callback\uff08\u56de\u547c\uff09": [[87, "term-callback"]], "class variable\uff08\u985e\u5225\u8b8a\u6578\uff09": [[87, "term-class-variable"]], "class\uff08\u985e\u5225\uff09": [[87, "term-class"], [425, "index-42"], [426, "index-47"], [426, "index-48"], [426, "index-51"], [426, "index-73"], [426, "index-91"], [428, "index-54"], [434, "index-24"]], "context manager\uff08\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[87, "term-context-manager"], [342, "index-54"], [426, "index-106"]], "context variable\uff08\u60c5\u5883\u8b8a\u6578\uff09": [[87, "term-context-variable"]], "coroutine function\uff08\u5354\u7a0b\u51fd\u5f0f\uff09": [[87, "term-coroutine-function"]], "coroutine\uff08\u5354\u7a0b\uff09": [[87, "term-coroutine"], [426, "index-110"], [426, "index-40"], [428, "index-24"]], "decorator\uff08\u88dd\u98fe\u5668\uff09": [[87, "term-decorator"]], "descriptor\uff08\u63cf\u8ff0\u5668\uff09": [[87, "term-descriptor"]], "dictionary comprehension\uff08\u5b57\u5178\u7d9c\u5408\u904b\u7b97\uff09": [[87, "term-dictionary-comprehension"]], "dictionary view\uff08\u5b57\u5178\u6aa2\u8996\uff09": [[87, "term-dictionary-view"]], "docstring\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[87, "term-docstring"], [425, "index-42"]], "duck-typing\uff08\u9d28\u5b50\u578b\u5225\uff09": [[87, "term-duck-typing"]], "expression\uff08\u904b\u7b97\u5f0f\uff09": [[87, "term-expression"], [425, "index-35"]], "extension module\uff08\u64f4\u5145\u6a21\u7d44\uff09": [[87, "term-extension-module"]], "f-string\uff08f \u5b57\u4e32\uff09": [[87, "term-f-string"], [433, "index-25"]], "file object\uff08\u6a94\u6848\u7269\u4ef6\uff09": [[87, "term-file-object"], [223, "index-5"], [256, "index-0"]], "file-like object\uff08\u985e\u6a94\u6848\u7269\u4ef6\uff09": [[87, "term-file-like-object"]], "filesystem encoding and error handler\uff08\u6a94\u6848\u7cfb\u7d71\u7de8\u78bc\u548c\u932f\u8aa4\u8655\u7406\u51fd\u5f0f\uff09": [[87, "term-filesystem-encoding-and-error-handler"]], "finder\uff08\u5c0b\u6aa2\u5668\uff09": [[87, "term-finder"]], "floor division\uff08\u5411\u4e0b\u53d6\u6574\u9664\u6cd5\uff09": [[87, "term-floor-division"]], "function annotation\uff08\u51fd\u5f0f\u8a3b\u91cb\uff09": [[87, "term-function-annotation"]], "garbage collection\uff08\u5783\u573e\u56de\u6536\uff09": [[87, "term-garbage-collection"], [426, "index-2"]], "generator expression\uff08\u7522\u751f\u5668\u904b\u7b97\u5f0f\uff09": [[87, "index-20"], [87, "term-generator-expression"], [428, "index-22"]], "generator iterator\uff08\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[87, "term-generator-iterator"]], "generator\uff08\u7522\u751f\u5668\uff09": [[87, "index-19"], [87, "term-generator"], [426, "index-39"], [426, "index-59"], [428, "index-22"], [428, "index-23"], [428, "index-31"], [434, "index-26"]], "generic function\uff08\u6cdb\u578b\u51fd\u5f0f\uff09": [[87, "term-generic-function"]], "generic type\uff08\u6cdb\u578b\u578b\u5225\uff09": [[87, "term-generic-type"]], "hash-based pyc\uff08\u96dc\u6e4a\u67b6\u69cb\u7684 pyc\uff09": [[87, "term-hash-based-pyc"]], "hashable\uff08\u53ef\u96dc\u6e4a\u7684\uff09": [[87, "term-hashable"]], "immutable\uff08\u4e0d\u53ef\u8b8a\u7269\u4ef6\uff09": [[87, "term-immutable"]], "import path\uff08\u5f15\u5165\u8def\u5f91\uff09": [[87, "term-import-path"]], "importer\uff08\u5f15\u5165\u5668\uff09": [[87, "term-importer"]], "importing\uff08\u5f15\u5165\uff09": [[87, "term-importing"], [434, "index-34"]], "interactive\uff08\u4e92\u52d5\u7684\uff09": [[87, "term-interactive"]], "interpreted\uff08\u76f4\u8b6f\u7684\uff09": [[87, "term-interpreted"]], "interpreter shutdown\uff08\u76f4\u8b6f\u5668\u95dc\u9589\uff09": [[87, "term-interpreter-shutdown"]], "iterable\uff08\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[87, "term-iterable"]], "iterator\uff08\u758a\u4ee3\u5668\uff09": [[87, "term-iterator"], [342, "index-18"], [434, "index-26"]], "key function\uff08\u9375\u51fd\u5f0f\uff09": [[87, "term-key-function"]], "keyword argument\uff08\u95dc\u9375\u5b57\u5f15\u6578\uff09": [[87, "term-keyword-argument"]], "lambda": [[87, "term-lambda"], [425, "index-35"], [428, "index-90"]], "list comprehension\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[87, "term-list-comprehension"]], "loader\uff08\u8f09\u5165\u5668\uff09": [[87, "term-loader"], [430, "index-8"]], "locale encoding\uff08\u5340\u57df\u7de8\u78bc\uff09": [[87, "term-locale-encoding"]], "magic": [[87, "index-26"]], "magic method\uff08\u9b54\u8853\u65b9\u6cd5\uff09": [[87, "term-magic-method"]], "meta path finder\uff08\u5143\u8def\u5f91\u5c0b\u6aa2\u5668\uff09": [[87, "term-meta-path-finder"]], "metaclass\uff08\u5143\u985e\u5225\uff09": [[87, "term-metaclass"], [426, "index-86"]], "method resolution order\uff08\u65b9\u6cd5\u89e3\u6790\u9806\u5e8f\uff09": [[87, "term-method-resolution-order"]], "module spec\uff08\u6a21\u7d44\u898f\u683c\uff09": [[87, "term-module-spec"]], "mutable\uff08\u53ef\u8b8a\u7269\u4ef6\uff09": [[87, "term-mutable"]], "named tuple\uff08\u9644\u540d\u5143\u7d44\uff09": [[87, "term-named-tuple"]], "namespace package\uff08\u547d\u540d\u7a7a\u9593\u5957\u4ef6\uff09": [[87, "term-namespace-package"]], "namespace\uff08\u547d\u540d\u7a7a\u9593\uff09": [[87, "term-namespace"], [426, "index-35"], [426, "index-45"], [427, "index-3"], [430, "index-5"]], "nested scope\uff08\u5de2\u72c0\u4f5c\u7528\u57df\uff09": [[87, "term-nested-scope"]], "new-style class\uff08\u65b0\u5f0f\u985e\u5225\uff09": [[87, "term-new-style-class"]], "package\uff08\u5957\u4ef6\uff09": [[87, "term-package"], [332, "index-4"], [430, "index-3"], [430, "index-4"], [430, "index-5"]], "path based finder\uff08\u57fa\u65bc\u8def\u5f91\u7684\u5c0b\u6aa2\u5668\uff09": [[87, "term-path-based-finder"]], "path entry finder\uff08\u8def\u5f91\u9805\u76ee\u5c0b\u6aa2\u5668\uff09": [[87, "term-path-entry-finder"]], "path entry hook\uff08\u8def\u5f91\u9805\u76ee\u9264\uff09": [[87, "term-path-entry-hook"]], "path entry\uff08\u8def\u5f91\u9805\u76ee\uff09": [[87, "term-path-entry"]], "path-like object\uff08\u985e\u8def\u5f91\u7269\u4ef6\uff09": [[87, "term-path-like-object"]], "portion\uff08\u90e8\u5206\uff09": [[87, "term-portion"], [430, "index-5"]], "positional argument\uff08\u4f4d\u7f6e\u5f15\u6578\uff09": [[87, "term-positional-argument"]], "provisional api\uff08\u66ab\u884c api\uff09": [[87, "term-provisional-API"]], "provisional package\uff08\u66ab\u884c\u5957\u4ef6\uff09": [[87, "term-provisional-package"]], "qualified name\uff08\u9650\u5b9a\u540d\u7a31\uff09": [[87, "term-qualified-name"]], "reference count\uff08\u53c3\u7167\u8a08\u6578\uff09": [[87, "term-reference-count"]], "regular package\uff08\u6b63\u898f\u5957\u4ef6\uff09": [[87, "term-regular-package"]], "set comprehension\uff08\u96c6\u5408\u7d9c\u5408\u904b\u7b97\uff09": [[87, "term-set-comprehension"]], "single dispatch\uff08\u55ae\u4e00\u8abf\u5ea6\uff09": [[87, "term-single-dispatch"]], "slice\uff08\u5207\u7247\uff09": [[87, "term-slice"], [189, "index-1"], [342, "index-20"], [342, "index-24"], [426, "index-16"], [426, "index-22"], [426, "index-69"], [426, "index-99"], [428, "index-44"], [434, "index-12"]], "special": [[87, "index-34"], [426, "index-5"]], "special method\uff08\u7279\u6b8a\u65b9\u6cd5\uff09": [[87, "term-special-method"]], "statement\uff08\u9673\u8ff0\u5f0f\uff09": [[87, "term-statement"], [211, "index-0"], [211, "index-1"], [211, "index-4"], [223, "index-13"], [332, "index-2"], [342, "index-1"], [342, "index-24"], [342, "index-52"], [425, "index-0"], [425, "index-13"], [425, "index-15"], [425, "index-16"], [425, "index-18"], [425, "index-28"], [425, "index-3"], [425, "index-4"], [425, "index-4"], [425, "index-42"], [425, "index-48"], [425, "index-5"], [425, "index-50"], [425, "index-51"], [425, "index-6"], [425, "index-6"], [425, "index-7"], [425, "index-9"], [426, "index-106"], [426, "index-22"], [426, "index-44"], [426, "index-67"], [426, "index-74"], [434, "index-0"], [434, "index-1"], [434, "index-14"], [434, "index-15"], [434, "index-18"], [434, "index-20"], [434, "index-21"], [434, "index-22"], [434, "index-24"], [434, "index-26"], [434, "index-27"], [434, "index-30"], [434, "index-30"], [434, "index-33"], [434, "index-33"], [434, "index-34"], [434, "index-4"], [434, "index-40"], [434, "index-43"], [434, "index-45"], [434, "index-47"], [439, "index-0"]], "static type checker\uff08\u975c\u614b\u578b\u5225\u6aa2\u67e5\u5668\uff09": [[87, "term-static-type-checker"]], "strong reference\uff08\u5f37\u53c3\u7167\uff09": [[87, "term-strong-reference"]], "text encoding\uff08\u6587\u5b57\u7de8\u78bc\uff09": [[87, "term-text-encoding"]], "text file\uff08\u6587\u5b57\u6a94\u6848\uff09": [[87, "term-text-file"]], "triple-quoted string\uff08\u4e09\u5f15\u865f\u5167\u5b57\u4e32\uff09": [[87, "term-triple-quoted-string"]], "type alias\uff08\u578b\u5225\u5225\u540d\uff09": [[87, "term-type-alias"]], "type hint\uff08\u578b\u5225\u63d0\u793a\uff09": [[87, "term-type-hint"]], "universal newlines\uff08\u901a\u7528\u63db\u884c\u5b57\u5143\uff09": [[87, "term-universal-newlines"]], "variable annotation\uff08\u8b8a\u6578\u8a3b\u91cb\uff09": [[87, "term-variable-annotation"]], "virtual environment\uff08\u865b\u64ec\u74b0\u5883\uff09": [[87, "term-virtual-environment"]], "virtual machine\uff08\u865b\u64ec\u6a5f\u5668\uff09": [[87, "term-virtual-machine"]], "pep 604": [[88, "index-2"], [342, "index-60"], [384, "index-146"], [470, "index-100"], [470, "index-85"], [481, "index-114"], [481, "index-155"]], "pep 289": [[95, "index-4"], [464, "index-15"], [464, "index-2"]], "pep 342": [[95, "index-0"], [95, "index-2"], [159, "index-1"], [428, "index-27"], [465, "index-11"], [465, "index-31"], [465, "index-9"]], "rfc 3339": [[100, "index-0"]], "__init__() (logging.logging.formatter \u7684\u65b9\u6cd5)": [[100, "logging.logging.Formatter.__init__"]], "rfc 3164": [[101, "index-5"]], "rfc 5424": [[101, "index-0"], [101, "index-2"], [101, "index-3"], [101, "index-4"], [267, "index-0"]], "rfc 5424#section-6": [[101, "index-1"]], "pep 263": [[107, "index-0"], [248, "index-1"], [376, "index-0"], [376, "index-1"], [463, "index-3"], [465, "index-19"], [481, "index-79"]], "rfc 2616": [[108, "index-1"], [108, "index-2"], [108, "index-4"], [391, "index-2"], [393, "index-5"], [393, "index-6"], [393, "index-8"], [405, "index-43"], [405, "index-48"], [473, "index-7"]], "pep 617": [[110, "index-0"], [429, "index-0"], [470, "index-94"], [471, "index-114"], [472, "index-8"], [480, "index-14"], [480, "index-19"], [480, "index-7"], [481, "index-171"], [481, "index-88"]], "apply (2to3 fixer)": [[110, "to3fixer-apply"]], "asserts (2to3 fixer)": [[110, "to3fixer-asserts"]], "basestring (2to3 fixer)": [[110, "to3fixer-basestring"]], "buffer (2to3 fixer)": [[110, "to3fixer-buffer"]], "dict (2to3 fixer)": [[110, "to3fixer-dict"]], "except (2to3 fixer)": [[110, "to3fixer-except"]], "exec (2to3 fixer)": [[110, "to3fixer-exec"]], "execfile (2to3 fixer)": [[110, "to3fixer-execfile"]], "exitfunc (2to3 fixer)": [[110, "to3fixer-exitfunc"]], "filter (2to3 fixer)": [[110, "to3fixer-filter"]], "funcattrs (2to3 fixer)": [[110, "to3fixer-funcattrs"]], "future (2to3 fixer)": [[110, "to3fixer-future"]], "getcwdu (2to3 fixer)": [[110, "to3fixer-getcwdu"]], "has_key (2to3 fixer)": [[110, "to3fixer-has_key"]], "idioms (2to3 fixer)": [[110, "to3fixer-idioms"]], "import (2to3 fixer)": [[110, "to3fixer-import"]], "imports (2to3 fixer)": [[110, "to3fixer-imports"]], "imports2 (2to3 fixer)": [[110, "to3fixer-imports2"]], "input (2to3 fixer)": [[110, "to3fixer-input"]], "intern (2to3 fixer)": [[110, "to3fixer-intern"]], "isinstance (2to3 fixer)": [[110, "to3fixer-isinstance"]], "itertools (2to3 fixer)": [[110, "to3fixer-itertools"]], "itertools_imports (2to3 fixer)": [[110, "to3fixer-itertools_imports"]], "lib2to3": [[110, "module-lib2to3"]], "long (2to3 fixer)": [[110, "to3fixer-long"]], "map (2to3 fixer)": [[110, "to3fixer-map"]], "metaclass (2to3 fixer)": [[110, "to3fixer-metaclass"]], "methodattrs (2to3 fixer)": [[110, "to3fixer-methodattrs"]], "module": [[110, "module-lib2to3"], [111, "module-__future__"], [112, "module-__main__"], [113, "module-_thread"], [114, "module-abc"], [115, "module-aifc"], [118, "module-argparse"], [119, "module-array"], [120, "module-ast"], [121, "module-asyncio"], [138, "module-atexit"], [139, "module-audioop"], [141, "module-base64"], [142, "module-bdb"], [144, "module-binascii"], [145, "module-bisect"], [146, "module-builtins"], [147, "module-bz2"], [148, "module-calendar"], [149, "module-cgi"], [150, "module-cgitb"], [151, "module-chunk"], [152, "module-cmath"], [153, "module-cmd"], [155, "module-code"], [156, "module-codecs"], [156, "module-encodings.idna"], [156, "module-encodings.mbcs"], [156, "module-encodings.utf_8_sig"], [157, "module-codeop"], [158, "module-collections"], [159, "module-collections.abc"], [160, "module-colorsys"], [161, "module-compileall"], [164, "module-concurrent.futures"], [165, "module-configparser"], [167, "module-contextlib"], [168, "module-contextvars"], [169, "module-copy"], [170, "module-copyreg"], [171, "module-crypt"], [173, "module-csv"], [174, "module-ctypes"], [175, "module-curses"], [175, "module-curses.textpad"], [176, "module-curses.ascii"], [177, "module-curses.panel"], [179, "module-dataclasses"], [181, "module-datetime"], [182, "module-dbm"], [182, "module-dbm.dumb"], [182, "module-dbm.gnu"], [182, "module-dbm.ndbm"], [184, "module-decimal"], [187, "module-tkinter.commondialog"], [187, "module-tkinter.filedialog"], [187, "module-tkinter.simpledialog"], [188, "module-difflib"], [189, "module-dis"], [191, "module-doctest"], [192, "module-email"], [193, "module-email.charset"], [195, "module-email.contentmanager"], [196, "module-email.encoders"], [197, "module-email.errors"], [199, "module-email.generator"], [200, "module-email.header"], [201, "module-email.headerregistry"], [202, "module-email.iterators"], [203, "module-email.message"], [204, "module-email.mime"], [204, "module-email.mime.application"], [204, "module-email.mime.audio"], [204, "module-email.mime.base"], [204, "module-email.mime.image"], [204, "module-email.mime.message"], [204, "module-email.mime.multipart"], [204, "module-email.mime.nonmultipart"], [204, "module-email.mime.text"], [205, "module-email.parser"], [206, "module-email.policy"], [207, "module-email.utils"], [208, "module-ensurepip"], [209, "module-enum"], [210, "module-errno"], [212, "module-faulthandler"], [213, "module-fcntl"], [214, "module-filecmp"], [216, "module-fileinput"], [218, "module-fnmatch"], [219, "module-fractions"], [221, "module-ftplib"], [224, "module-functools"], [225, "module-gc"], [226, "module-getopt"], [227, "module-getpass"], [228, "module-gettext"], [229, "module-glob"], [230, "module-graphlib"], [231, "module-grp"], [232, "module-gzip"], [233, "module-hashlib"], [234, "module-heapq"], [235, "module-hmac"], [236, "module-html"], [237, "module-html.entities"], [238, "module-html.parser"], [239, "module-http"], [240, "module-http.client"], [241, "module-http.cookiejar"], [242, "module-http.cookies"], [243, "module-http.server"], [245, "module-idlelib"], [246, "module-imaplib"], [247, "module-imghdr"], [248, "module-importlib"], [248, "module-importlib.abc"], [248, "module-importlib.machinery"], [248, "module-importlib.util"], [249, "module-importlib.metadata"], [250, "module-importlib.resources"], [251, "module-importlib.resources.abc"], [253, "module-inspect"], [256, "module-io"], [257, "module-ipaddress"], [259, "module-itertools"], [260, "module-json"], [260, "module-json.tool"], [261, "module-keyword"], [263, "module-linecache"], [264, "module-locale"], [265, "module-logging"], [266, "module-logging.config"], [267, "module-logging.handlers"], [268, "module-lzma"], [269, "module-mailbox"], [270, "module-mailcap"], [272, "module-marshal"], [273, "module-math"], [274, "module-mimetypes"], [276, "module-mmap"], [277, "module-modulefinder"], [279, "module-msilib"], [280, "module-msvcrt"], [281, "module-multiprocessing"], [281, "module-multiprocessing.connection"], [281, "module-multiprocessing.dummy"], [281, "module-multiprocessing.managers"], [281, "module-multiprocessing.pool"], [281, "module-multiprocessing.sharedctypes"], [282, "module-multiprocessing.shared_memory"], [284, "module-netrc"], [285, "module-nis"], [286, "module-nntplib"], [287, "module-numbers"], [289, "module-operator"], [290, "module-optparse"], [291, "module-os"], [292, "module-os.path"], [293, "module-ossaudiodev"], [294, "module-pathlib"], [295, "module-pdb"], [297, "module-pickle"], [298, "module-pickletools"], [299, "module-pipes"], [300, "module-pkgutil"], [301, "module-platform"], [302, "module-plistlib"], [303, "module-poplib"], [304, "module-posix"], [305, "module-pprint"], [306, "module-cProfile"], [306, "module-profile"], [306, "module-pstats"], [307, "module-pty"], [308, "module-pwd"], [309, "module-py_compile"], [310, "module-pyclbr"], [311, "module-pydoc"], [312, "module-xml.parsers.expat"], [312, "module-xml.parsers.expat.errors"], [312, "module-xml.parsers.expat.model"], [314, "module-queue"], [315, "module-quopri"], [316, "module-random"], [317, "module-re"], [318, "module-readline"], [319, "module-reprlib"], [320, "module-resource"], [321, "module-rlcompleter"], [322, "module-runpy"], [323, "module-sched"], [324, "module-secrets"], [326, "module-select"], [327, "module-selectors"], [328, "module-shelve"], [329, "module-shlex"], [330, "module-shutil"], [331, "module-signal"], [332, "module-site"], [332, "module-sitecustomize"], [332, "module-usercustomize"], [333, "module-smtplib"], [334, "module-sndhdr"], [335, "module-socket"], [336, "module-socketserver"], [337, "module-spwd"], [338, "module-sqlite3"], [339, "module-ssl"], [340, "module-stat"], [341, "module-statistics"], [343, "module-string"], [344, "module-stringprep"], [345, "module-struct"], [346, "module-subprocess"], [347, "module-sunau"], [349, "module-symtable"], [350, "module-sys"], [351, "module-sys.monitoring"], [353, "module-sysconfig"], [354, "module-syslog"], [355, "module-tabnanny"], [356, "module-tarfile"], [357, "module-telnetlib"], [358, "module-tempfile"], [359, "module-termios"], [360, "module-test"], [360, "module-test.regrtest"], [360, "module-test.support"], [360, "module-test.support.bytecode_helper"], [360, "module-test.support.import_helper"], [360, "module-test.support.os_helper"], [360, "module-test.support.script_helper"], [360, "module-test.support.socket_helper"], [360, "module-test.support.threading_helper"], [360, "module-test.support.warnings_helper"], [362, "module-textwrap"], [363, "module-threading"], [364, "module-time"], [365, "module-timeit"], [367, "module-_tkinter"], [367, "module-tkinter"], [368, "module-tkinter.colorchooser"], [369, "module-tkinter.dnd"], [370, "module-tkinter.font"], [371, "module-tkinter.messagebox"], [372, "module-tkinter.scrolledtext"], [373, "module-tkinter.tix"], [374, "module-tkinter.ttk"], [375, "module-token"], [376, "module-tokenize"], [377, "module-tomllib"], [378, "module-trace"], [379, "module-traceback"], [380, "module-tracemalloc"], [381, "module-tty"], [382, "module-turtle"], [382, "module-turtledemo"], [383, "module-types"], [384, "module-typing"], [385, "module-unicodedata"], [386, "module-unittest"], [387, "module-unittest.mock"], [390, "module-urllib"], [391, "module-urllib.error"], [392, "module-urllib.parse"], [393, "module-urllib.request"], [393, "module-urllib.response"], [394, "module-urllib.robotparser"], [395, "module-uu"], [396, "module-uuid"], [397, "module-venv"], [398, "module-warnings"], [399, "module-wave"], [400, "module-weakref"], [401, "module-webbrowser"], [403, "module-winreg"], [404, "module-winsound"], [405, "module-wsgiref"], [405, "module-wsgiref.handlers"], [405, "module-wsgiref.headers"], [405, "module-wsgiref.simple_server"], [405, "module-wsgiref.types"], [405, "module-wsgiref.util"], [405, "module-wsgiref.validate"], [406, "module-xdrlib"], [407, "module-xml"], [408, "module-xml.dom"], [409, "module-xml.dom.minidom"], [410, "module-xml.dom.pulldom"], [411, "module-xml.etree.ElementInclude"], [411, "module-xml.etree.ElementTree"], [412, "module-xml.sax"], [413, "module-xml.sax.handler"], [414, "module-xml.sax.xmlreader"], [415, "module-xml.sax.saxutils"], [417, "module-xmlrpc.client"], [418, "module-xmlrpc.server"], [419, "module-zipapp"], [420, "module-zipfile"], [421, "module-zipimport"], [422, "module-zlib"], [423, "module-zoneinfo"]], "ne (2to3 fixer)": [[110, "to3fixer-ne"]], "next (2to3 fixer)": [[110, "to3fixer-next"]], "nonzero (2to3 fixer)": [[110, "to3fixer-nonzero"]], "numliterals (2to3 fixer)": [[110, "to3fixer-numliterals"]], "operator (2to3 fixer)": [[110, "to3fixer-operator"]], "paren (2to3 fixer)": [[110, "to3fixer-paren"]], "print (2to3 fixer)": [[110, "to3fixer-print"]], "raise (2to3 fixer)": [[110, "to3fixer-raise"]], "raw_input (2to3 fixer)": [[110, "to3fixer-raw_input"]], "reduce (2to3 fixer)": [[110, "to3fixer-reduce"]], "reload (2to3 fixer)": [[110, "to3fixer-reload"]], "renames (2to3 fixer)": [[110, "to3fixer-renames"]], "repr (2to3 fixer)": [[110, "to3fixer-repr"]], "set_literal (2to3 fixer)": [[110, "to3fixer-set_literal"]], "standarderror (2to3 fixer)": [[110, "to3fixer-standarderror"]], "sys_exc (2to3 fixer)": [[110, "to3fixer-sys_exc"]], "throw (2to3 fixer)": [[110, "to3fixer-throw"]], "tuple_params (2to3 fixer)": [[110, "to3fixer-tuple_params"]], "types (2to3 fixer)": [[110, "to3fixer-types"]], "unicode (2to3 fixer)": [[110, "to3fixer-unicode"]], "urllib (2to3 fixer)": [[110, "to3fixer-urllib"]], "ws_comma (2to3 fixer)": [[110, "to3fixer-ws_comma"]], "xrange (2to3 fixer)": [[110, "to3fixer-xrange"]], "xreadlines (2to3 fixer)": [[110, "to3fixer-xreadlines"]], "zip (2to3 fixer)": [[110, "to3fixer-zip"]], "pep 227": [[111, "index-24"], [461, "index-2"], [462, "index-16"]], "pep 236": [[111, "index-35"], [434, "index-42"], [461, "index-0"], [461, "index-1"], [461, "index-3"]], "pep 255": [[111, "index-25"], [428, "index-26"], [462, "index-8"], [462, "index-9"], [463, "index-1"], [463, "index-2"]], "pep 3105": [[111, "index-29"], [466, "index-10"], [468, "index-0"]], "pep 3112": [[111, "index-30"], [466, "index-12"]], "pep 328": [[111, "index-27"], [223, "index-15"], [248, "index-3"], [430, "index-24"], [464, "index-10"], [464, "index-17"], [465, "index-5"], [465, "index-6"], [468, "index-16"], [474, "index-36"]], "pep 479": [[111, "index-31"], [211, "index-6"], [211, "index-7"], [476, "index-17"], [476, "index-18"], [478, "index-37"], [481, "index-220"], [481, "index-228"], [481, "index-231"], [481, "index-253"], [481, "index-274"], [481, "index-288"]], "pep 563": [[111, "index-32"], [111, "index-33"], [384, "index-57"], [384, "index-60"], [425, "index-39"], [434, "index-41"], [471, "index-102"], [478, "index-2"], [481, "index-132"], [481, "index-99"]], "pep 649": [[111, "index-34"], [427, "index-11"]], "_feature (__future__ \u4e2d\u7684\u985e\u5225)": [[111, "future__._Feature"]], "compiler_flag (__future__._feature \u7684\u5c6c\u6027)": [[111, "future__._Feature.compiler_flag"]], "getmandatoryrelease() (__future__._feature \u7684\u65b9\u6cd5)": [[111, "future__._Feature.getMandatoryRelease"]], "getoptionalrelease() (__future__._feature \u7684\u65b9\u6cd5)": [[111, "future__._Feature.getOptionalRelease"]], "locktype (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.LockType"]], "posix": [[113, "index-1"], [304, "module-posix"], [359, "index-0"]], "timeout_max (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.TIMEOUT_MAX"]], "acquire() (_thread.lock \u7684\u65b9\u6cd5)": [[113, "thread.lock.acquire"]], "allocate_lock() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.allocate_lock"]], "binary semaphores": [[113, "index-0"]], "error": [[113, "thread.error"], [139, "audioop.error"], [144, "binascii.Error"], [165, "configparser.Error"], [169, "copy.Error"], [173, "csv.Error"], [175, "curses.error"], [182, "dbm.dumb.error"], [182, "dbm.error"], [182, "dbm.gnu.error"], [182, "dbm.ndbm.error"], [226, "getopt.error"], [264, "locale.Error"], [269, "mailbox.Error"], [285, "nis.error"], [291, "os.error"], [312, "xml.parsers.expat.error"], [317, "re.error"], [320, "resource.error"], [326, "select.error"], [330, "shutil.Error"], [335, "socket.error"], [338, "sqlite3.Error"], [345, "struct.error"], [347, "sunau.Error"], [395, "uu.Error"], [399, "wave.Error"], [401, "webbrowser.Error"], [406, "xdrlib.Error"], [422, "zlib.error"]], "exit() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.exit"]], "get_ident() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.get_ident"]], "get_native_id() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.get_native_id"]], "interrupt_main() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.interrupt_main"]], "light-weight processes": [[113, "index-0"]], "locked() (_thread.lock \u7684\u65b9\u6cd5)": [[113, "thread.lock.locked"]], "processes, light-weight": [[113, "index-0"]], "pthreads": [[113, "index-1"]], "release() (_thread.lock \u7684\u65b9\u6cd5)": [[113, "thread.lock.release"]], "semaphores, binary": [[113, "index-0"]], "stack_size() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.stack_size"]], "start_new_thread() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.start_new_thread"]], "threads": [[113, "index-1"]], "abc (abc \u4e2d\u7684\u985e\u5225)": [[114, "abc.ABC"]], "abcmeta (abc \u4e2d\u7684\u985e\u5225)": [[114, "abc.ABCMeta"]], "pep 3141": [[114, "index-5"], [287, "index-2"], [466, "index-19"]], "__subclasshook__() (abc.abcmeta \u7684\u65b9\u6cd5)": [[114, "abc.ABCMeta.__subclasshook__"]], "abc": [[114, "module-abc"]], "abstractclassmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractclassmethod"]], "abstractmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractmethod"]], "abstractproperty() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractproperty"]], "abstractstaticmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractstaticmethod"]], "get_cache_token() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.get_cache_token"]], "register() (abc.abcmeta \u7684\u65b9\u6cd5)": [[114, "abc.ABCMeta.register"]], "update_abstractmethods() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.update_abstractmethods"]], "a-law": [[115, "index-2"], [139, "index-1"], [334, "index-0"]], "aiff": [[115, "index-0"], [151, "index-0"]], "aiff-c": [[115, "index-0"], [151, "index-0"]], "audio interchange file format\uff08\u97f3\u8a0a\u4ea4\u63db\u6a94\u6848\u683c\u5f0f\uff09": [[115, "index-0"], [151, "index-0"]], "g.722": [[115, "index-2"]], "pep 594#aifc": [[115, "index-4"]], "aifc": [[115, "module-aifc"]], "aifc() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.aifc"]], "aiff() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.aiff"]], "close() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.close"]], "getcompname() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getcompname"]], "getcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getcomptype"]], "getframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getframerate"]], "getmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getmark"]], "getmarkers() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getmarkers"]], "getnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getnchannels"]], "getnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getnframes"]], "getparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getparams"]], "getsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getsampwidth"]], "open() (\u65bc aifc \u6a21\u7d44\u4e2d)": [[115, "aifc.open"]], "readframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.readframes"]], "rewind() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.rewind"]], "setcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setcomptype"]], "setframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setframerate"]], "setmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setmark"]], "setnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setnchannels"]], "setnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setnframes"]], "setparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setparams"]], "setpos() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setpos"]], "setsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setsampwidth"]], "tell() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.tell"]], "u-law": [[115, "index-2"], [139, "index-1"], [334, "index-0"]], "writeframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.writeframes"]], "writeframesraw() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.writeframesraw"]], "* \uff08\u661f\u865f\uff09": [[118, "index-1"], [120, "index-1"], [218, "index-2"], [229, "index-1"], [317, "index-3"], [342, "index-13"], [342, "index-36"], [342, "index-46"], [425, "index-32"], [428, "index-49"], [428, "index-65"], [428, "index-93"], [434, "index-37"], [434, "index-6"], [439, "index-3"]], "+ \uff08\u52a0\u865f\uff09": [[118, "index-2"], [191, "index-4"], [317, "index-4"], [342, "index-13"], [342, "index-37"], [342, "index-47"], [343, "index-4"], [428, "index-61"], [428, "index-69"]], "? \uff08\u554f\u865f\uff09": [[118, "index-0"], [120, "index-0"], [153, "index-0"], [156, "index-1"], [218, "index-2"], [229, "index-1"], [317, "index-5"], [338, "index-6"], [345, "index-2"], [345, "index-3"]], "action (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.Action"]], "argumentdefaultshelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.ArgumentDefaultsHelpFormatter"]], "argumenterror": [[118, "argparse.ArgumentError"], [174, "ctypes.ArgumentError"]], "argumentparser (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.ArgumentParser"]], "argumenttypeerror": [[118, "argparse.ArgumentTypeError"]], "filetype (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.FileType"]], "metavartypehelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.MetavarTypeHelpFormatter"]], "namespace (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.Namespace"]], "rawdescriptionhelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.RawDescriptionHelpFormatter"]], "rawtexthelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.RawTextHelpFormatter"]], "add_argument() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_argument"]], "add_argument_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_argument_group"]], "add_mutually_exclusive_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_mutually_exclusive_group"]], "add_subparsers() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_subparsers"]], "argparse": [[118, "module-argparse"]], "convert_arg_line_to_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.convert_arg_line_to_args"]], "error() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.error"]], "exit() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.exit"]], "format_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.format_help"]], "format_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.format_usage"]], "get_default() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.get_default"]], "parse_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_args"]], "parse_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_intermixed_args"]], "parse_known_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_known_args"]], "parse_known_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_known_intermixed_args"]], "print_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.print_help"]], "print_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.print_usage"]], "set_defaults() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.set_defaults"]], "\u65bc argparse \u6a21\u7d44\u4e2d": [[118, "index-0"], [118, "index-1"], [118, "index-2"]], "append() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.append"]], "array": [[119, "module-array"]], "array (array \u4e2d\u7684\u985e\u5225)": [[119, "array.array"]], "arrays\uff08\u9663\u5217\uff09": [[119, "index-0"]], "buffer_info() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.buffer_info"]], "byteswap() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.byteswap"]], "count() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.count"]], "extend() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.extend"]], "frombytes() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.frombytes"]], "fromfile() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.fromfile"]], "fromlist() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.fromlist"]], "fromunicode() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.fromunicode"]], "index() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.index"]], "insert() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.insert"]], "itemsize (array.array \u7684\u5c6c\u6027)": [[119, "array.array.itemsize"]], "pop() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.pop"]], "remove() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.remove"]], "reverse() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.reverse"]], "tobytes() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tobytes"]], "tofile() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tofile"]], "tolist() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tolist"]], "tounicode() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tounicode"]], "typecode (array.array \u7684\u5c6c\u6027)": [[119, "array.array.typecode"]], "typecodes (\u65bc array \u6a21\u7d44\u4e2d)": [[119, "array.typecodes"]], "--help": [[120, "cmdoption-ast-h"], [148, "cmdoption-calendar-help"], [189, "cmdoption-dis-h"], [232, "cmdoption-gzip-h"], [260, "cmdoption-json.tool-h"], [338, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [365, "cmdoption-timeit-h"], [376, "cmdoption-tokenize-h"], [378, "cmdoption-trace-help"], [396, "cmdoption-uuid-h"], [419, "cmdoption-zipapp-h"], [453, "cmdoption-help"]], "--include-attributes": [[120, "cmdoption-ast-a"]], "--indent": [[120, "cmdoption-ast-indent"], [260, "cmdoption-json.tool-indent"]], "--mode": [[120, "cmdoption-ast-mode"]], "--no-type-comments": [[120, "cmdoption-ast-no-type-comments"]], "-a": [[120, "cmdoption-ast-a"], [298, "cmdoption-pickletools-a"]], "-h": [[120, "cmdoption-ast-h"], [148, "cmdoption-calendar-help"], [189, "cmdoption-dis-h"], [232, "cmdoption-gzip-h"], [260, "cmdoption-json.tool-h"], [338, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [365, "cmdoption-timeit-h"], [376, "cmdoption-tokenize-h"], [396, "cmdoption-uuid-h"], [419, "cmdoption-zipapp-h"], [453, "cmdoption-h"]], "-i": [[120, "cmdoption-ast-i"], [161, "cmdoption-compileall-i"], [453, "cmdoption-I"], [453, "cmdoption-i"]], "-m": [[120, "cmdoption-ast-m"], [148, "cmdoption-calendar-months"], [298, "cmdoption-pickletools-m"], [378, "cmdoption-trace-m"], [419, "cmdoption-zipapp-m"], [453, "cmdoption-m"]], "ast (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AST"]], "add (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Add"]], "and (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.And"]], "annassign (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AnnAssign"]], "assert (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Assert"]], "assign (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Assign"]], "asyncfor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AsyncFor"]], "asyncfunctiondef (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AsyncFunctionDef"]], "asyncwith (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AsyncWith"]], "attribute (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Attribute"]], "augassign (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AugAssign"]], "await (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Await"]], "binop (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BinOp"]], "bitand (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BitAnd"]], "bitor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BitOr"]], "bitxor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BitXor"]], "boolop (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BoolOp"]], "break (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Break"]], "call (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Call"]], "classdef (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ClassDef"]], "compare (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Compare"]], "constant (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Constant"]], "continue (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Continue"]], "del (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Del"]], "delete (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Delete"]], "dict (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Dict"]], "dictcomp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.DictComp"]], "div (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Div"]], "eq (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Eq"]], "excepthandler (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ExceptHandler"]], "expr (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Expr"]], "expression (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Expression"]], "floordiv (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FloorDiv"]], "for (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.For"]], "formattedvalue (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FormattedValue"]], "functiondef (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FunctionDef"]], "functiontype (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FunctionType"]], "generatorexp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.GeneratorExp"]], "global (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Global"]], "gt (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Gt"]], "gte (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.GtE"]], "if (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.If"]], "ifexp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.IfExp"]], "import (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Import"]], "importfrom (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ImportFrom"]], "in (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.In"]], "interactive (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Interactive"]], "invert (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Invert"]], "is (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Is"]], "isnot (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.IsNot"]], "joinedstr (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.JoinedStr"]], "lshift (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.LShift"]], "lambda (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Lambda"]], "list (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.List"]], "listcomp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ListComp"]], "load (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Load"]], "lt (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Lt"]], "lte (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.LtE"]], "matmult (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatMult"]], "match (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Match"]], "matchas (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchAs"]], "matchclass (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchClass"]], "matchmapping (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchMapping"]], "matchor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchOr"]], "matchsequence (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchSequence"]], "matchsingleton (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchSingleton"]], "matchstar (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchStar"]], "matchvalue (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchValue"]], "mod (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Mod"]], "module (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Module"]], "mult (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Mult"]], "name (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Name"]], "namedexpr (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NamedExpr"]], "nodetransformer (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NodeTransformer"]], "nodevisitor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NodeVisitor"]], "nonlocal (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Nonlocal"]], "not (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Not"]], "noteq (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NotEq"]], "notin (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NotIn"]], "or (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Or"]], "paramspec (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ParamSpec"]], "pass (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Pass"]], "pow (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Pow"]], "pycf_allow_top_level_await (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.PyCF_ALLOW_TOP_LEVEL_AWAIT"]], "pycf_only_ast (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.PyCF_ONLY_AST"]], "pycf_type_comments (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.PyCF_TYPE_COMMENTS"]], "rshift (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.RShift"]], "raise (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Raise"]], "return (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Return"]], "set (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Set"]], "setcomp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.SetComp"]], "slice (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Slice"]], "starred (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Starred"]], "store (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Store"]], "sub (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Sub"]], "subscript (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Subscript"]], "try (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Try"]], "trystar (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.TryStar"]], "tuple (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Tuple"]], "typealias (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.TypeAlias"]], "typevar (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.TypeVar"]], "typevartuple (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.TypeVarTuple"]], "uadd (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.UAdd"]], "usub (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.USub"]], "unaryop (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.UnaryOp"]], "while (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.While"]], "with (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.With"]], "yield (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Yield"]], "yieldfrom (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.YieldFrom"]], "_fields (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST._fields"]], "alias (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.alias"]], "arg (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.arg"]], "arguments (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.arguments"]], "ast": [[120, "module-ast"]], "ast \u547d\u4ee4\u5217\u9078\u9805": [[120, "cmdoption-ast-a"], [120, "cmdoption-ast-h"], [120, "cmdoption-ast-i"], [120, "cmdoption-ast-indent"], [120, "cmdoption-ast-m"], [120, "cmdoption-ast-mode"], [120, "cmdoption-ast-no-type-comments"]], "col_offset (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.col_offset"]], "comprehension (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.comprehension"]], "copy_location() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.copy_location"]], "dump() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.dump"]], "end_col_offset (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.end_col_offset"]], "end_lineno (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.end_lineno"]], "fix_missing_locations() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.fix_missing_locations"]], "generic_visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[120, "ast.NodeVisitor.generic_visit"]], "get_docstring() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.get_docstring"]], "get_source_segment() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.get_source_segment"]], "increment_lineno() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.increment_lineno"]], "iter_child_nodes() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.iter_child_nodes"]], "iter_fields() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.iter_fields"]], "keyword (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.keyword"]], "lineno (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.lineno"]], "literal_eval() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.literal_eval"]], "match_case (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.match_case"]], "parse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.parse"]], "type_comment (ast.assign \u7684\u5c6c\u6027)": [[120, "ast.Assign.type_comment"]], "type_comment (ast.for \u7684\u5c6c\u6027)": [[120, "ast.For.type_comment"]], "type_comment (ast.functiondef \u7684\u5c6c\u6027)": [[120, "ast.FunctionDef.type_comment"]], "type_comment (ast.with \u7684\u5c6c\u6027)": [[120, "ast.With.type_comment"]], "type_comment (ast.arg \u7684\u5c6c\u6027)": [[120, "ast.arg.type_comment"]], "unparse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.unparse"]], "visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[120, "ast.NodeVisitor.visit"]], "visit_constant() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[120, "ast.NodeVisitor.visit_Constant"]], "walk() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.walk"]], "withitem (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.withitem"]], "\u65bc ast \u6587\u6cd5\u4e2d": [[120, "index-0"], [120, "index-1"]], "asyncio": [[121, "module-asyncio"]], "pythonasynciodebug": [[123, "index-2"], [124, "index-5"], [186, "index-5"], [453, "envvar-PYTHONASYNCIODEBUG"]], "abstracteventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.AbstractEventLoop"]], "handle (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.Handle"]], "pep 567": [[124, "index-0"], [124, "index-1"], [124, "index-2"], [127, "index-2"], [168, "index-2"], [478, "index-28"], [478, "index-30"], [481, "index-223"], [481, "index-227"], [481, "index-232"]], "proactoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.ProactorEventLoop"]], "rfc 8305": [[124, "index-3"], [124, "index-4"]], "selectoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.SelectorEventLoop"]], "server (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.Server"]], "timerhandle (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.TimerHandle"]], "add_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.add_reader"]], "add_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.add_signal_handler"]], "add_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.add_writer"]], "call_at() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.call_at"]], "call_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.call_exception_handler"]], "call_later() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.call_later"]], "call_soon() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.call_soon"]], "call_soon_threadsafe() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.call_soon_threadsafe"]], "cancel() (asyncio.handle \u7684\u65b9\u6cd5)": [[124, "asyncio.Handle.cancel"]], "cancelled() (asyncio.handle \u7684\u65b9\u6cd5)": [[124, "asyncio.Handle.cancelled"]], "close() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.close"]], "close() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.close"]], "connect_accepted_socket() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.connect_accepted_socket"]], "connect_read_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.connect_read_pipe"]], "connect_write_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.connect_write_pipe"]], "create_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_connection"]], "create_datagram_endpoint() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_datagram_endpoint"]], "create_future() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_future"]], "create_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_server"]], "create_task() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_task"]], "create_unix_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_unix_connection"]], "create_unix_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_unix_server"]], "default_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.default_exception_handler"]], "get_context() (asyncio.handle \u7684\u65b9\u6cd5)": [[124, "asyncio.Handle.get_context"]], "get_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.get_debug"]], "get_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[124, "asyncio.get_event_loop"]], "get_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.get_exception_handler"]], "get_loop() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.get_loop"]], "get_running_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[124, "asyncio.get_running_loop"]], "get_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.get_task_factory"]], "getaddrinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.getaddrinfo"]], "getnameinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.getnameinfo"]], "is_closed() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.is_closed"]], "is_running() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.is_running"]], "is_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.is_serving"]], "new_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[124, "asyncio.new_event_loop"]], "remove_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.remove_reader"]], "remove_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.remove_signal_handler"]], "remove_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.remove_writer"]], "run_forever() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.run_forever"]], "run_in_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.run_in_executor"]], "run_until_complete() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.run_until_complete"]], "sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sendfile"]], "serve_forever() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.serve_forever"]], "set_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.set_debug"]], "set_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.set_default_executor"]], "set_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[124, "asyncio.set_event_loop"]], "set_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.set_exception_handler"]], "set_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.set_task_factory"]], "shutdown_asyncgens() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.shutdown_asyncgens"]], "shutdown_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.shutdown_default_executor"]], "slow_callback_duration (asyncio.loop \u7684\u5c6c\u6027)": [[124, "asyncio.loop.slow_callback_duration"]], "sock_accept() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_accept"]], "sock_connect() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_connect"]], "sock_recv() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_recv"]], "sock_recv_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_recv_into"]], "sock_recvfrom() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_recvfrom"]], "sock_recvfrom_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_recvfrom_into"]], "sock_sendall() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_sendall"]], "sock_sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_sendfile"]], "sock_sendto() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_sendto"]], "sockets (asyncio.server \u7684\u5c6c\u6027)": [[124, "asyncio.Server.sockets"]], "start_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.start_serving"]], "start_tls() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.start_tls"]], "stop() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.stop"]], "subprocess_exec() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.subprocess_exec"]], "subprocess_shell() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.subprocess_shell"]], "time() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.time"]], "wait_closed() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.wait_closed"]], "when() (asyncio.timerhandle \u7684\u65b9\u6cd5)": [[124, "asyncio.TimerHandle.when"]], "cancellederror": [[125, "asyncio.CancelledError"], [164, "concurrent.futures.CancelledError"]], "incompletereaderror": [[125, "asyncio.IncompleteReadError"]], "invalidstateerror": [[125, "asyncio.InvalidStateError"], [164, "concurrent.futures.InvalidStateError"]], "limitoverrunerror": [[125, "asyncio.LimitOverrunError"]], "sendfilenotavailableerror": [[125, "asyncio.SendfileNotAvailableError"]], "timeouterror": [[125, "asyncio.TimeoutError"], [164, "concurrent.futures.TimeoutError"], [211, "TimeoutError"], [281, "multiprocessing.TimeoutError"]], "consumed (asyncio.limitoverrunerror \u7684\u5c6c\u6027)": [[125, "asyncio.LimitOverrunError.consumed"]], "expected (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[125, "asyncio.IncompleteReadError.expected"]], "partial (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[125, "asyncio.IncompleteReadError.partial"]], "__init__() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.__init__"]], "__init__() (asyncio.task \u7684\u65b9\u6cd5)": [[126, "asyncio.Task.__init__"]], "_enter_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio._enter_task"]], "_leave_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio._leave_task"]], "_register_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio._register_task"]], "_unregister_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio._unregister_task"]], "future (asyncio \u4e2d\u7684\u985e\u5225)": [[127, "asyncio.Future"]], "add_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.add_done_callback"]], "cancel() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.cancel"]], "cancelled() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.cancelled"]], "done() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.done"]], "ensure_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[127, "asyncio.ensure_future"]], "exception() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.exception"]], "get_loop() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.get_loop"]], "isfuture() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[127, "asyncio.isfuture"]], "remove_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.remove_done_callback"]], "result() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.result"]], "set_exception() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.set_exception"]], "set_result() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.set_result"]], "wrap_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[127, "asyncio.wrap_future"]], "abstractchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.AbstractChildWatcher"]], "abstracteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.AbstractEventLoopPolicy"]], "defaulteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.DefaultEventLoopPolicy"]], "fastchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.FastChildWatcher"]], "multiloopchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.MultiLoopChildWatcher"]], "pidfdchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.PidfdChildWatcher"]], "safechildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.SafeChildWatcher"]], "threadedchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.ThreadedChildWatcher"]], "windowsproactoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.WindowsProactorEventLoopPolicy"]], "windowsselectoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.WindowsSelectorEventLoopPolicy"]], "add_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractChildWatcher.add_child_handler"]], "attach_loop() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractChildWatcher.attach_loop"]], "close() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractChildWatcher.close"]], "get_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractEventLoopPolicy.get_child_watcher"]], "get_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[130, "asyncio.get_child_watcher"]], "get_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractEventLoopPolicy.get_event_loop"]], "get_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[130, "asyncio.get_event_loop_policy"]], "is_active() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractChildWatcher.is_active"]], "new_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractEventLoopPolicy.new_event_loop"]], "remove_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractChildWatcher.remove_child_handler"]], "set_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractEventLoopPolicy.set_child_watcher"]], "set_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[130, "asyncio.set_child_watcher"]], "set_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractEventLoopPolicy.set_event_loop"]], "set_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[130, "asyncio.set_event_loop_policy"]], "baseprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.BaseProtocol"]], "basetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.BaseTransport"]], "bufferedprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.BufferedProtocol"]], "datagramprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.DatagramProtocol"]], "datagramtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.DatagramTransport"]], "protocol (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.Protocol"]], "readtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.ReadTransport"]], "subprocessprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.SubprocessProtocol"]], "subprocesstransport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.SubprocessTransport"]], "transport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.Transport"]], "writetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.WriteTransport"]], "abort() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[131, "asyncio.DatagramTransport.abort"]], "abort() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.abort"]], "buffer_updated() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BufferedProtocol.buffer_updated"]], "can_write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.can_write_eof"]], "close() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseTransport.close"]], "close() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.close"]], "connection_lost() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseProtocol.connection_lost"]], "connection_made() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseProtocol.connection_made"]], "data_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[131, "asyncio.Protocol.data_received"]], "datagram_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.DatagramProtocol.datagram_received"]], "eof_received() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BufferedProtocol.eof_received"]], "eof_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[131, "asyncio.Protocol.eof_received"]], "error_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.DatagramProtocol.error_received"]], "get_buffer() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BufferedProtocol.get_buffer"]], "get_extra_info() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseTransport.get_extra_info"]], "get_pid() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.get_pid"]], "get_pipe_transport() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.get_pipe_transport"]], "get_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseTransport.get_protocol"]], "get_returncode() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.get_returncode"]], "get_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.get_write_buffer_limits"]], "get_write_buffer_size() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.get_write_buffer_size"]], "is_closing() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseTransport.is_closing"]], "is_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[131, "asyncio.ReadTransport.is_reading"]], "kill() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.kill"]], "pause_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[131, "asyncio.ReadTransport.pause_reading"]], "pause_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseProtocol.pause_writing"]], "pipe_connection_lost() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessProtocol.pipe_connection_lost"]], "pipe_data_received() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessProtocol.pipe_data_received"]], "process_exited() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessProtocol.process_exited"]], "resume_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[131, "asyncio.ReadTransport.resume_reading"]], "resume_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseProtocol.resume_writing"]], "send_signal() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.send_signal"]], "sendto() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[131, "asyncio.DatagramTransport.sendto"]], "set_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseTransport.set_protocol"]], "set_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.set_write_buffer_limits"]], "terminate() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.terminate"]], "write() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.write"]], "write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.write_eof"]], "writelines() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.writelines"]], "lifoqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.LifoQueue"]], "priorityqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.PriorityQueue"]], "queue (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.Queue"]], "queueempty": [[132, "asyncio.QueueEmpty"]], "queuefull": [[132, "asyncio.QueueFull"]], "empty() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.empty"]], "full() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.full"]], "get() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.get"]], "get_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.get_nowait"]], "join() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.join"]], "maxsize (asyncio.queue \u7684\u5c6c\u6027)": [[132, "asyncio.Queue.maxsize"]], "put() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.put"]], "put_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.put_nowait"]], "qsize() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.qsize"]], "task_done() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.task_done"]], "runner (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.Runner"]], "close() (asyncio.runner \u7684\u65b9\u6cd5)": [[133, "asyncio.Runner.close"]], "get_loop() (asyncio.runner \u7684\u65b9\u6cd5)": [[133, "asyncio.Runner.get_loop"]], "run() (asyncio.runner \u7684\u65b9\u6cd5)": [[133, "asyncio.Runner.run"]], "run() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[133, "asyncio.run"]], "streamreader (asyncio \u4e2d\u7684\u985e\u5225)": [[134, "asyncio.StreamReader"]], "streamwriter (asyncio \u4e2d\u7684\u985e\u5225)": [[134, "asyncio.StreamWriter"]], "at_eof() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.at_eof"]], "can_write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.can_write_eof"]], "close() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.close"]], "drain() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.drain"]], "feed_eof() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.feed_eof"]], "get_extra_info() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.get_extra_info"]], "is_closing() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.is_closing"]], "open_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.open_connection"]], "open_unix_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.open_unix_connection"]], "read() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.read"]], "readexactly() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.readexactly"]], "readline() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.readline"]], "readuntil() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.readuntil"]], "start_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.start_server"]], "start_tls() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.start_tls"]], "start_unix_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.start_unix_server"]], "transport (asyncio.streamwriter \u7684\u5c6c\u6027)": [[134, "asyncio.StreamWriter.transport"]], "wait_closed() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.wait_closed"]], "write() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.write"]], "write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.write_eof"]], "writelines() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.writelines"]], "asyncio.subprocess.devnull (\u5167\u5efa\u8b8a\u6578)": [[135, "asyncio.subprocess.DEVNULL"]], "asyncio.subprocess.pipe (\u5167\u5efa\u8b8a\u6578)": [[135, "asyncio.subprocess.PIPE"]], "asyncio.subprocess.process (\u5167\u5efa\u985e\u5225)": [[135, "asyncio.subprocess.Process"]], "asyncio.subprocess.stdout (\u5167\u5efa\u8b8a\u6578)": [[135, "asyncio.subprocess.STDOUT"]], "communicate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[135, "asyncio.subprocess.Process.communicate"]], "create_subprocess_exec() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.create_subprocess_exec"]], "create_subprocess_shell() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.create_subprocess_shell"]], "kill() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[135, "asyncio.subprocess.Process.kill"]], "pid (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[135, "asyncio.subprocess.Process.pid"]], "returncode (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[135, "asyncio.subprocess.Process.returncode"]], "send_signal() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[135, "asyncio.subprocess.Process.send_signal"]], "stderr (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[135, "asyncio.subprocess.Process.stderr"]], "stdin (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[135, "asyncio.subprocess.Process.stdin"]], "stdout (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[135, "asyncio.subprocess.Process.stdout"]], "terminate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[135, "asyncio.subprocess.Process.terminate"]], "wait() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[135, "asyncio.subprocess.Process.wait"]], "barrier (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Barrier"]], "boundedsemaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.BoundedSemaphore"]], "brokenbarriererror": [[136, "asyncio.BrokenBarrierError"], [363, "threading.BrokenBarrierError"]], "condition (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Condition"]], "event (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Event"]], "lock (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Lock"]], "semaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Semaphore"]], "abort() (asyncio.barrier \u7684\u65b9\u6cd5)": [[136, "asyncio.Barrier.abort"]], "acquire() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.acquire"]], "acquire() (asyncio.lock \u7684\u65b9\u6cd5)": [[136, "asyncio.Lock.acquire"]], "acquire() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[136, "asyncio.Semaphore.acquire"]], "broken (asyncio.barrier \u7684\u5c6c\u6027)": [[136, "asyncio.Barrier.broken"]], "clear() (asyncio.event \u7684\u65b9\u6cd5)": [[136, "asyncio.Event.clear"]], "is_set() (asyncio.event \u7684\u65b9\u6cd5)": [[136, "asyncio.Event.is_set"]], "locked() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.locked"]], "locked() (asyncio.lock \u7684\u65b9\u6cd5)": [[136, "asyncio.Lock.locked"]], "locked() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[136, "asyncio.Semaphore.locked"]], "n_waiting (asyncio.barrier \u7684\u5c6c\u6027)": [[136, "asyncio.Barrier.n_waiting"]], "notify() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.notify"]], "notify_all() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.notify_all"]], "parties (asyncio.barrier \u7684\u5c6c\u6027)": [[136, "asyncio.Barrier.parties"]], "release() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.release"]], "release() (asyncio.lock \u7684\u65b9\u6cd5)": [[136, "asyncio.Lock.release"]], "release() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[136, "asyncio.Semaphore.release"]], "reset() (asyncio.barrier \u7684\u65b9\u6cd5)": [[136, "asyncio.Barrier.reset"]], "set() (asyncio.event \u7684\u65b9\u6cd5)": [[136, "asyncio.Event.set"]], "wait() (asyncio.barrier \u7684\u65b9\u6cd5)": [[136, "asyncio.Barrier.wait"]], "wait() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.wait"]], "wait() (asyncio.event \u7684\u65b9\u6cd5)": [[136, "asyncio.Event.wait"]], "wait_for() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.wait_for"]], "all_completed (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.ALL_COMPLETED"]], "first_completed (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.FIRST_COMPLETED"]], "first_exception (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.FIRST_EXCEPTION"]], "task (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.Task"]], "taskgroup (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.TaskGroup"]], "timeout (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.Timeout"]], "add_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.add_done_callback"]], "all_tasks() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.all_tasks"]], "as_completed() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.as_completed"]], "cancel() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.cancel"]], "cancelled() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.cancelled"]], "cancelling() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.cancelling"]], "create_eager_task_factory() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.create_eager_task_factory"]], "create_task() (asyncio.taskgroup \u7684\u65b9\u6cd5)": [[137, "asyncio.TaskGroup.create_task"]], "create_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.create_task"]], "current_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.current_task"]], "done() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.done"]], "eager_task_factory() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.eager_task_factory"]], "exception() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.exception"]], "expired() (asyncio.timeout \u7684\u65b9\u6cd5)": [[137, "asyncio.Timeout.expired"]], "gather() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.gather"]], "get_context() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.get_context"]], "get_coro() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.get_coro"]], "get_name() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.get_name"]], "get_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.get_stack"]], "iscoroutine() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.iscoroutine"]], "print_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.print_stack"]], "remove_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.remove_done_callback"]], "reschedule() (asyncio.timeout \u7684\u65b9\u6cd5)": [[137, "asyncio.Timeout.reschedule"]], "result() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.result"]], "run_coroutine_threadsafe() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.run_coroutine_threadsafe"]], "set_name() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.set_name"]], "shield() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.shield"]], "sleep() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.sleep"]], "timeout() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.timeout"]], "timeout_at() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.timeout_at"]], "to_thread() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.to_thread"]], "uncancel() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.uncancel"]], "wait() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.wait"]], "wait_for() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.wait_for"]], "when() (asyncio.timeout \u7684\u65b9\u6cd5)": [[137, "asyncio.Timeout.when"]], "atexit": [[138, "module-atexit"]], "register() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[138, "atexit.register"]], "unregister() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[138, "atexit.unregister"]], "adpcm, intel/dvi": [[139, "index-1"]], "intel/dvi adpcm": [[139, "index-1"]], "pep 594#audioop": [[139, "index-3"]], "add() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.add"]], "adpcm2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.adpcm2lin"]], "alaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.alaw2lin"]], "audioop": [[139, "module-audioop"]], "avg() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.avg"]], "avgpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.avgpp"]], "bias() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.bias"]], "byteswap() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.byteswap"]], "cross() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.cross"]], "findfactor() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.findfactor"]], "findfit() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.findfit"]], "findmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.findmax"]], "getsample() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.getsample"]], "lin2adpcm() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.lin2adpcm"]], "lin2alaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.lin2alaw"]], "lin2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.lin2lin"]], "lin2ulaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.lin2ulaw"]], "max() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.max"]], "maxpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.maxpp"]], "minmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.minmax"]], "mul() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.mul"]], "ratecv() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.ratecv"]], "reverse() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.reverse"]], "rms() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.rms"]], "tomono() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.tomono"]], "tostereo() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.tostereo"]], "ulaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.ulaw2lin"]], "audit events\uff08\u7a3d\u6838\u4e8b\u4ef6\uff09": [[140, "index-0"]], "mime": [[141, "index-0"], [149, "index-0"], [274, "index-0"], [274, "index-1"], [315, "index-0"]], "rfc 1521": [[141, "index-12"], [315, "index-11"], [315, "index-9"]], "rfc 2045": [[141, "index-10"], [141, "index-4"], [141, "index-5"], [141, "index-9"], [192, "index-3"], [194, "index-4"], [194, "index-5"], [194, "index-6"], [194, "index-9"], [200, "index-4"], [201, "index-10"], [201, "index-9"], [203, "index-6"], [203, "index-7"], [203, "index-8"]], "rfc 4648": [[141, "index-11"], [141, "index-15"], [141, "index-16"], [141, "index-3"], [141, "index-6"], [141, "index-7"], [141, "index-8"], [325, "index-5"], [481, "index-91"]], "a85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.a85decode"]], "a85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.a85encode"]], "b16decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b16decode"]], "b16encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b16encode"]], "b32decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b32decode"]], "b32encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b32encode"]], "b32hexdecode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b32hexdecode"]], "b32hexencode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b32hexencode"]], "b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b64decode"]], "b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b64encode"]], "b85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b85decode"]], "b85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b85encode"]], "base64": [[141, "index-0"], [141, "module-base64"], [144, "index-0"]], "base64 encoding\uff08base64 \u7de8\u78bc\uff09": [[141, "index-0"]], "decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.decode"]], "decodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.decodebytes"]], "encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.encode"]], "encodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.encodebytes"]], "encoding\uff08\u7de8\u78bc\uff09": [[141, "index-0"], [315, "index-0"]], "standard_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.standard_b64decode"]], "standard_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.standard_b64encode"]], "urlsafe_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.urlsafe_b64decode"]], "urlsafe_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.urlsafe_b64encode"]], "bdb (bdb \u4e2d\u7684\u985e\u5225)": [[142, "bdb.Bdb"]], "bdbquit": [[142, "bdb.BdbQuit"]], "breakpoint (bdb \u4e2d\u7684\u985e\u5225)": [[142, "bdb.Breakpoint"]], "bdb": [[142, "module-bdb"], [295, "index-1"]], "bpbynumber (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.bpbynumber"]], "bpformat() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[142, "bdb.Breakpoint.bpformat"]], "bplist (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.bplist"]], "bpprint() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[142, "bdb.Breakpoint.bpprint"]], "break_anywhere() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.break_anywhere"]], "break_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.break_here"]], "canonic() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.canonic"]], "checkfuncname() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[142, "bdb.checkfuncname"]], "clear_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.clear_all_breaks"]], "clear_all_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.clear_all_file_breaks"]], "clear_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.clear_bpbynumber"]], "clear_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.clear_break"]], "cond (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.cond"]], "deleteme() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[142, "bdb.Breakpoint.deleteMe"]], "disable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[142, "bdb.Breakpoint.disable"]], "dispatch_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.dispatch_call"]], "dispatch_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.dispatch_exception"]], "dispatch_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.dispatch_line"]], "dispatch_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.dispatch_return"]], "do_clear() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.do_clear"]], "effective() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[142, "bdb.effective"]], "enable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[142, "bdb.Breakpoint.enable"]], "enabled (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.enabled"]], "file (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.file"]], "format_stack_entry() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.format_stack_entry"]], "funcname (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.funcname"]], "get_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_all_breaks"]], "get_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_bpbynumber"]], "get_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_break"]], "get_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_breaks"]], "get_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_file_breaks"]], "get_stack() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_stack"]], "hits (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.hits"]], "ignore (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.ignore"]], "is_skipped_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.is_skipped_line"]], "line (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.line"]], "quitting (bdb.bdb attribute)": [[142, "index-0"]], "reset() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.reset"]], "run() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.run"]], "runcall() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.runcall"]], "runctx() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.runctx"]], "runeval() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.runeval"]], "set_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_break"]], "set_continue() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_continue"]], "set_next() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_next"]], "set_quit() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_quit"]], "set_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_return"]], "set_step() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_step"]], "set_trace() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_trace"]], "set_trace() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[142, "bdb.set_trace"]], "set_until() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_until"]], "stop_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.stop_here"]], "temporary (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.temporary"]], "trace_dispatch() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.trace_dispatch"]], "user_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.user_call"]], "user_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.user_exception"]], "user_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.user_line"]], "user_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.user_return"]], "incomplete": [[144, "binascii.Incomplete"]], "rfc 1522": [[144, "index-3"], [315, "index-10"], [315, "index-12"]], "rfc 3548": [[144, "index-1"], [144, "index-2"], [464, "index-18"]], "a2b_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.a2b_base64"]], "a2b_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.a2b_hex"]], "a2b_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.a2b_qp"]], "a2b_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.a2b_uu"]], "b2a_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.b2a_base64"]], "b2a_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.b2a_hex"]], "b2a_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.b2a_qp"]], "b2a_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.b2a_uu"]], "binascii": [[144, "module-binascii"]], "crc32() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.crc32"]], "crc_hqx() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.crc_hqx"]], "hexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.hexlify"]], "unhexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.unhexlify"]], "uu": [[144, "index-0"], [395, "module-uu"]], "bisect": [[145, "module-bisect"]], "bisect() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.bisect"]], "bisect_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.bisect_left"]], "bisect_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.bisect_right"]], "insort() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.insort"]], "insort_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.insort_left"]], "insort_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.insort_right"]], "builtins": [[146, "module-builtins"]], "bz2compressor (bz2 \u4e2d\u7684\u985e\u5225)": [[147, "bz2.BZ2Compressor"]], "bz2decompressor (bz2 \u4e2d\u7684\u985e\u5225)": [[147, "bz2.BZ2Decompressor"]], "bz2file (bz2 \u4e2d\u7684\u985e\u5225)": [[147, "bz2.BZ2File"]], "bz2": [[147, "module-bz2"]], "compress() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2Compressor.compress"]], "compress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[147, "bz2.compress"]], "decompress() (bz2.bz2decompressor \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2Decompressor.decompress"]], "decompress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[147, "bz2.decompress"]], "eof (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[147, "bz2.BZ2Decompressor.eof"]], "fileno() (bz2.bz2file \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2File.fileno"]], "flush() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2Compressor.flush"]], "needs_input (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[147, "bz2.BZ2Decompressor.needs_input"]], "open() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[147, "bz2.open"]], "peek() (bz2.bz2file \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2File.peek"]], "read1() (bz2.bz2file \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2File.read1"]], "readable() (bz2.bz2file \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2File.readable"]], "readinto() (bz2.bz2file \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2File.readinto"]], "seekable() (bz2.bz2file \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2File.seekable"]], "unused_data (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[147, "bz2.BZ2Decompressor.unused_data"]], "writable() (bz2.bz2file \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2File.writable"]], "--css": [[148, "cmdoption-calendar-css"]], "--encoding": [[148, "cmdoption-calendar-encoding"]], "--lines": [[148, "cmdoption-calendar-lines"]], "--locale": [[148, "cmdoption-calendar-locale"]], "--months": [[148, "cmdoption-calendar-months"]], "--spacing": [[148, "cmdoption-calendar-spacing"]], "--type": [[148, "cmdoption-calendar-type"]], "--width": [[148, "cmdoption-calendar-width"]], "-l": [[148, "cmdoption-calendar-locale"], [148, "cmdoption-calendar-lines"], [161, "cmdoption-compileall-l"], [298, "cmdoption-pickletools-l"], [356, "cmdoption-tarfile-l"], [378, "cmdoption-trace-l"], [420, "cmdoption-zipfile-l"]], "-c": [[148, "cmdoption-calendar-css"], [356, "cmdoption-tarfile-c"], [378, "cmdoption-trace-C"], [378, "cmdoption-trace-c"], [386, "cmdoption-unittest-c"], [419, "cmdoption-zipapp-c"], [420, "cmdoption-zipfile-c"], [453, "cmdoption-c"]], "-e": [[148, "cmdoption-calendar-encoding"], [161, "cmdoption-compileall-e"], [356, "cmdoption-tarfile-e"], [376, "cmdoption-tokenize-e"], [420, "cmdoption-zipfile-e"], [453, "cmdoption-E"]], "-s": [[148, "cmdoption-calendar-spacing"], [161, "cmdoption-compileall-s"], [365, "cmdoption-timeit-s"], [378, "cmdoption-trace-s"], [386, "cmdoption-unittest-discover-s"], [453, "cmdoption-S"], [453, "cmdoption-s"]], "-t": [[148, "cmdoption-calendar-type"], [356, "cmdoption-tarfile-t"], [378, "cmdoption-trace-T"], [378, "cmdoption-trace-t"], [386, "cmdoption-unittest-discover-t"], [420, "cmdoption-zipfile-t"]], "-w": [[148, "cmdoption-calendar-width"], [453, "cmdoption-W"]], "april (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.APRIL"]], "august (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.AUGUST"]], "calendar (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.Calendar"]], "december (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.DECEMBER"]], "day (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.Day"]], "february (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.FEBRUARY"]], "friday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.FRIDAY"]], "htmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.HTMLCalendar"]], "illegalmontherror": [[148, "calendar.IllegalMonthError"]], "illegalweekdayerror": [[148, "calendar.IllegalWeekdayError"]], "january (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.JANUARY"]], "july (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.JULY"]], "june (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.JUNE"]], "localehtmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.LocaleHTMLCalendar"]], "localetextcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.LocaleTextCalendar"]], "march (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.MARCH"]], "may (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.MAY"]], "monday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.MONDAY"]], "month (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.Month"]], "november (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.NOVEMBER"]], "october (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.OCTOBER"]], "saturday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.SATURDAY"]], "september (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.SEPTEMBER"]], "sunday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.SUNDAY"]], "thursday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.THURSDAY"]], "tuesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.TUESDAY"]], "textcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.TextCalendar"]], "wednesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.WEDNESDAY"]], "calendar": [[148, "module-calendar"]], "calendar \u547d\u4ee4\u5217\u9078\u9805": [[148, "cmdoption-calendar-arg-month"], [148, "cmdoption-calendar-arg-year"], [148, "cmdoption-calendar-css"], [148, "cmdoption-calendar-encoding"], [148, "cmdoption-calendar-help"], [148, "cmdoption-calendar-lines"], [148, "cmdoption-calendar-locale"], [148, "cmdoption-calendar-months"], [148, "cmdoption-calendar-spacing"], [148, "cmdoption-calendar-type"], [148, "cmdoption-calendar-width"]], "calendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.calendar"]], "cssclass_month (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclass_month"]], "cssclass_month_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclass_month_head"]], "cssclass_noday (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclass_noday"]], "cssclass_year (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclass_year"]], "cssclass_year_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclass_year_head"]], "cssclasses (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclasses"]], "cssclasses_weekday_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclasses_weekday_head"]], "day_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.day_abbr"]], "day_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.day_name"]], "firstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.firstweekday"]], "formatmonth() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.HTMLCalendar.formatmonth"]], "formatmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.TextCalendar.formatmonth"]], "formatmonthname() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.HTMLCalendar.formatmonthname"]], "formatyear() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.HTMLCalendar.formatyear"]], "formatyear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.TextCalendar.formatyear"]], "formatyearpage() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.HTMLCalendar.formatyearpage"]], "isleap() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.isleap"]], "itermonthdates() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.itermonthdates"]], "itermonthdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.itermonthdays"]], "itermonthdays2() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.itermonthdays2"]], "itermonthdays3() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.itermonthdays3"]], "itermonthdays4() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.itermonthdays4"]], "iterweekdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.iterweekdays"]], "leapdays() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.leapdays"]], "month": [[148, "cmdoption-calendar-arg-month"]], "month (calendar.illegalmontherror \u7684\u5c6c\u6027)": [[148, "calendar.IllegalMonthError.month"]], "month() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.month"]], "month_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.month_abbr"]], "month_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.month_name"]], "monthcalendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.monthcalendar"]], "monthdatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.monthdatescalendar"]], "monthdays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.monthdays2calendar"]], "monthdayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.monthdayscalendar"]], "monthrange() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.monthrange"]], "prcal() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.prcal"]], "prmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.TextCalendar.prmonth"]], "prmonth() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.prmonth"]], "pryear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.TextCalendar.pryear"]], "setfirstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.setfirstweekday"]], "timegm() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.timegm"]], "weekday (calendar.illegalweekdayerror \u7684\u5c6c\u6027)": [[148, "calendar.IllegalWeekdayError.weekday"]], "weekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.weekday"]], "weekheader() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.weekheader"]], "year": [[148, "cmdoption-calendar-arg-year"]], "yeardatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.yeardatescalendar"]], "yeardays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.yeardays2calendar"]], "yeardayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.yeardayscalendar"]], "cgi": [[149, "index-0"], [149, "index-2"], [149, "index-5"], [149, "module-cgi"], [150, "index-0"]], "common gateway interface\uff08\u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\uff09": [[149, "index-0"]], "http": [[149, "index-0"], [239, "index-0"], [239, "module-http"], [240, "index-0"], [243, "index-0"], [393, "index-10"], [393, "index-9"]], "pep 594#cgi": [[149, "index-8"]], "url\uff08\u7d71\u4e00\u8cc7\u6e90\u5b9a\u4f4d\u5668\uff09": [[149, "index-0"], [243, "index-0"], [392, "index-0"], [394, "index-0"]], "www": [[149, "index-0"], [243, "index-0"], [254, "index-0"], [392, "index-0"], [394, "index-0"]], "debugging\uff08\u9664\u932f\uff09": [[149, "index-5"], [295, "index-0"], [434, "index-18"]], "getfirst() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[149, "cgi.FieldStorage.getfirst"]], "getlist() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[149, "cgi.FieldStorage.getlist"]], "headers\uff08\u6a19\u982d\uff09": [[149, "index-0"], [274, "index-1"]], "parse() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.parse"]], "parse_header() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.parse_header"]], "parse_multipart() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.parse_multipart"]], "print_directory() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.print_directory"]], "print_environ() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.print_environ"]], "print_environ_usage() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.print_environ_usage"]], "print_form() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.print_form"]], "protocol\uff08\u5354\u5b9a\uff09": [[149, "index-0"], [221, "index-0"], [239, "index-0"], [240, "index-0"], [243, "index-0"], [246, "index-0"], [286, "index-0"], [297, "index-5"], [303, "index-0"], [333, "index-0"], [342, "index-18"], [342, "index-54"], [357, "index-0"], [393, "index-10"], [393, "index-9"]], "security\uff08\u5b89\u5168\uff09": [[149, "index-2"], [243, "index-3"]], "server\uff08\u4f3a\u670d\u5668\uff09": [[149, "index-0"], [243, "index-0"]], "test() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.test"]], "pep 594#cgitb": [[150, "index-4"]], "cgitb": [[150, "module-cgitb"]], "enable() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[150, "cgitb.enable"]], "excepthook() \uff08sys \u6a21\u7d44\u4e2d\uff09": [[150, "index-2"]], "exceptions\uff08\u4f8b\u5916\uff09": [[150, "index-0"]], "handler() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[150, "cgitb.handler"]], "html() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[150, "cgitb.html"]], "text() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[150, "cgitb.text"]], "tracebacks\uff08\u56de\u6eaf\uff09": [[150, "index-0"]], "\u65bc cgi \u8173\u672c\u4e2d": [[150, "index-0"]], "chunk (chunk \u4e2d\u7684\u985e\u5225)": [[151, "chunk.Chunk"]], "pep 594#chunk": [[151, "index-3"]], "rmff": [[151, "index-0"]], "real media file format\uff08real media \u6a94\u6848\u683c\u5f0f\uff09": [[151, "index-0"]], "chunk": [[151, "module-chunk"]], "close() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.close"]], "getname() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.getname"]], "getsize() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.getsize"]], "isatty() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.isatty"]], "read() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.read"]], "seek() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.seek"]], "skip() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.skip"]], "tell() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.tell"]], "pep 485": [[152, "index-0"], [273, "index-0"], [476, "index-19"], [476, "index-20"], [481, "index-295"]], "acos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.acos"]], "acosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.acosh"]], "asin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.asin"]], "asinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.asinh"]], "atan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.atan"]], "atanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.atanh"]], "cmath": [[152, "module-cmath"]], "cos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.cos"]], "cosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.cosh"]], "e (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.e"]], "exp() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.exp"]], "inf (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.inf"]], "infj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.infj"]], "isclose() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.isclose"]], "isfinite() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.isfinite"]], "isinf() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.isinf"]], "isnan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.isnan"]], "log() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.log"]], "log10() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.log10"]], "math\uff08\u6578\u5b78\uff09": [[152, "index-1"]], "nan (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.nan"]], "nanj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.nanj"]], "phase() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.phase"]], "pi (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.pi"]], "polar() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.polar"]], "rect() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.rect"]], "sin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.sin"]], "sinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.sinh"]], "sqrt() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.sqrt"]], "tan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.tan"]], "tanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.tanh"]], "tau (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.tau"]], "! \uff08\u9a5a\u5606\u865f\uff09": [[153, "index-0"], [176, "index-0"], [218, "index-2"], [229, "index-1"], [343, "index-2"], [345, "index-1"], [433, "index-25"]], "cmd (cmd \u4e2d\u7684\u985e\u5225)": [[153, "cmd.Cmd"]], "cmd": [[153, "module-cmd"], [295, "index-1"]], "cmdloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.cmdloop"]], "cmdqueue (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.cmdqueue"]], "columnize() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.columnize"]], "completedefault() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.completedefault"]], "default() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.default"]], "do_help() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.do_help"]], "doc_header (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.doc_header"]], "emptyline() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.emptyline"]], "identchars (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.identchars"]], "intro (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.intro"]], "lastcmd (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.lastcmd"]], "misc_header (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.misc_header"]], "onecmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.onecmd"]], "postcmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.postcmd"]], "postloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.postloop"]], "precmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.precmd"]], "preloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.preloop"]], "prompt (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.prompt"]], "ruler (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.ruler"]], "undoc_header (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.undoc_header"]], "use_rawinput (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.use_rawinput"]], "\u65bc command interpreter\uff08\u6307\u4ee4\u76f4\u8b6f\u5668\uff09\u4e2d": [[153, "index-0"]], "interactiveconsole (code \u4e2d\u7684\u985e\u5225)": [[155, "code.InteractiveConsole"]], "interactiveinterpreter (code \u4e2d\u7684\u985e\u5225)": [[155, "code.InteractiveInterpreter"]], "code": [[155, "module-code"]], "compile_command() (\u65bc code \u6a21\u7d44\u4e2d)": [[155, "code.compile_command"]], "interact() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[155, "code.InteractiveConsole.interact"]], "interact() (\u65bc code \u6a21\u7d44\u4e2d)": [[155, "code.interact"]], "push() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[155, "code.InteractiveConsole.push"]], "raw_input() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[155, "code.InteractiveConsole.raw_input"]], "resetbuffer() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[155, "code.InteractiveConsole.resetbuffer"]], "runcode() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[155, "code.InteractiveInterpreter.runcode"]], "runsource() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[155, "code.InteractiveInterpreter.runsource"]], "showsyntaxerror() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[155, "code.InteractiveInterpreter.showsyntaxerror"]], "showtraceback() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[155, "code.InteractiveInterpreter.showtraceback"]], "write() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[155, "code.InteractiveInterpreter.write"]], "bom (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.BOM"]], "bom_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.BOM_BE"]], "bom_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.BOM_LE"]], "bom_utf16 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.BOM_UTF16"]], "bom_utf16_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.BOM_UTF16_BE"]], "bom_utf16_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.BOM_UTF16_LE"]], "bom_utf32 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.BOM_UTF32"]], "bom_utf32_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.BOM_UTF32_BE"]], "bom_utf32_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.BOM_UTF32_LE"]], "bom_utf8 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.BOM_UTF8"]], "codec (codecs \u4e2d\u7684\u985e\u5225)": [[156, "codecs.Codec"]], "codecinfo (codecs \u4e2d\u7684\u985e\u5225)": [[156, "codecs.CodecInfo"]], "codecs": [[156, "index-0"], [156, "module-codecs"]], "encodedfile() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.EncodedFile"]], "incrementaldecoder (codecs \u4e2d\u7684\u985e\u5225)": [[156, "codecs.IncrementalDecoder"]], "incrementalencoder (codecs \u4e2d\u7684\u985e\u5225)": [[156, "codecs.IncrementalEncoder"]], "rfc 3490": [[156, "index-13"], [156, "index-14"], [156, "index-6"], [156, "index-8"]], "rfc 3490#section-3.1": [[156, "index-12"]], "rfc 3492": [[156, "index-7"], [156, "index-9"]], "rfc 5891": [[156, "index-10"]], "rfc 5895": [[156, "index-11"]], "streamreader (codecs \u4e2d\u7684\u985e\u5225)": [[156, "codecs.StreamReader"]], "streamreaderwriter (codecs \u4e2d\u7684\u985e\u5225)": [[156, "codecs.StreamReaderWriter"]], "streamrecoder (codecs \u4e2d\u7684\u985e\u5225)": [[156, "codecs.StreamRecoder"]], "streamwriter (codecs \u4e2d\u7684\u985e\u5225)": [[156, "codecs.StreamWriter"]], "toascii() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[156, "encodings.idna.ToASCII"]], "tounicode() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[156, "encodings.idna.ToUnicode"]], "unicode": [[156, "index-0"], [385, "index-0"], [426, "index-19"]], "\\ \uff08\u53cd\u659c\u7dda\uff09": [[156, "index-1"], [291, "index-48"], [317, "index-12"], [317, "index-26"], [317, "index-9"], [433, "index-23"]], "\\n": [[156, "index-3"], [317, "index-37"], [317, "index-37"], [433, "index-23"], [433, "index-23"]], "\\u": [[156, "index-1"], [156, "index-1"], [317, "index-37"], [317, "index-37"], [433, "index-23"], [433, "index-23"]], "\\x": [[156, "index-1"], [317, "index-37"], [433, "index-23"]], "backslashreplace": [[156, "index-1"]], "backslashreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.backslashreplace_errors"]], "decode (codecs.codecinfo \u7684\u5c6c\u6027)": [[156, "codecs.CodecInfo.decode"]], "decode() (codecs.codec \u7684\u65b9\u6cd5)": [[156, "codecs.Codec.decode"]], "decode() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[156, "codecs.IncrementalDecoder.decode"]], "decode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.decode"]], "decode\uff08\u89e3\u78bc\uff09": [[156, "index-0"]], "encode (codecs.codecinfo \u7684\u5c6c\u6027)": [[156, "codecs.CodecInfo.encode"]], "encode() (codecs.codec \u7684\u65b9\u6cd5)": [[156, "codecs.Codec.encode"]], "encode() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[156, "codecs.IncrementalEncoder.encode"]], "encode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.encode"]], "encode\uff08\u7de8\u78bc\uff09": [[156, "index-0"]], "encodings.idna": [[156, "module-encodings.idna"]], "encodings.mbcs": [[156, "module-encodings.mbcs"]], "encodings.utf_8_sig": [[156, "module-encodings.utf_8_sig"]], "error handler's name\uff08\u932f\u8aa4\u8655\u7406\u5668\u540d\u7a31\uff09": [[156, "index-1"], [156, "index-3"], [156, "index-4"]], "escape sequence\uff08\u8df3\u812b\u5e8f\u5217\uff09": [[156, "index-1"], [156, "index-3"], [433, "index-23"]], "getdecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.getdecoder"]], "getencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.getencoder"]], "getincrementaldecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.getincrementaldecoder"]], "getincrementalencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.getincrementalencoder"]], "getreader() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.getreader"]], "getstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[156, "codecs.IncrementalDecoder.getstate"]], "getstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[156, "codecs.IncrementalEncoder.getstate"]], "getwriter() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.getwriter"]], "ignore": [[156, "index-1"]], "ignore_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.ignore_errors"]], "incrementaldecoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[156, "codecs.CodecInfo.incrementaldecoder"]], "incrementalencoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[156, "codecs.CodecInfo.incrementalencoder"]], "iterdecode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.iterdecode"]], "iterencode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.iterencode"]], "lookup() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.lookup"]], "lookup_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.lookup_error"]], "name (codecs.codecinfo \u7684\u5c6c\u6027)": [[156, "codecs.CodecInfo.name"]], "nameprep() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[156, "encodings.idna.nameprep"]], "namereplace": [[156, "index-3"]], "namereplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.namereplace_errors"]], "open() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.open"]], "read() (codecs.streamreader \u7684\u65b9\u6cd5)": [[156, "codecs.StreamReader.read"]], "readline() (codecs.streamreader \u7684\u65b9\u6cd5)": [[156, "codecs.StreamReader.readline"]], "readlines() (codecs.streamreader \u7684\u65b9\u6cd5)": [[156, "codecs.StreamReader.readlines"]], "register() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.register"]], "register_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.register_error"]], "replace": [[156, "index-1"]], "replace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.replace_errors"]], "replacement character\uff08\u66ff\u4ee3\u5b57\u5143\uff09": [[156, "index-1"]], "reset() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[156, "codecs.IncrementalDecoder.reset"]], "reset() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[156, "codecs.IncrementalEncoder.reset"]], "reset() (codecs.streamreader \u7684\u65b9\u6cd5)": [[156, "codecs.StreamReader.reset"]], "reset() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[156, "codecs.StreamWriter.reset"]], "setstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[156, "codecs.IncrementalDecoder.setstate"]], "setstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[156, "codecs.IncrementalEncoder.setstate"]], "stackable\uff08\u53ef\u5806\u758a\uff09": [[156, "index-0"]], "streamreader (codecs.codecinfo \u7684\u5c6c\u6027)": [[156, "codecs.CodecInfo.streamreader"]], "streams\uff08\u4e32\u6d41\uff09": [[156, "index-0"]], "streamwriter (codecs.codecinfo \u7684\u5c6c\u6027)": [[156, "codecs.CodecInfo.streamwriter"]], "strict": [[156, "index-1"]], "strict_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.strict_errors"]], "surrogateescape": [[156, "index-1"]], "surrogatepass": [[156, "index-4"]], "unregister() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.unregister"]], "write() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[156, "codecs.StreamWriter.write"]], "writelines() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[156, "codecs.StreamWriter.writelines"]], "xmlcharrefreplace": [[156, "index-3"]], "xmlcharrefreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[156, "codecs.xmlcharrefreplace_errors"]], "commandcompiler (codeop \u4e2d\u7684\u985e\u5225)": [[157, "codeop.CommandCompiler"]], "compile (codeop \u4e2d\u7684\u985e\u5225)": [[157, "codeop.Compile"]], "codeop": [[157, "module-codeop"]], "compile_command() (\u65bc codeop \u6a21\u7d44\u4e2d)": [[157, "codeop.compile_command"]], "chainmap (collections \u4e2d\u7684\u985e\u5225)": [[158, "collections.ChainMap"]], "counter (collections \u4e2d\u7684\u985e\u5225)": [[158, "collections.Counter"]], "ordereddict (collections \u4e2d\u7684\u985e\u5225)": [[158, "collections.OrderedDict"]], "pep 468": [[158, "index-10"], [477, "index-24"], [481, "index-258"]], "pep 584": [[158, "index-11"], [158, "index-8"], [158, "index-9"], [291, "index-6"], [291, "index-7"], [383, "index-6"], [400, "index-1"], [400, "index-4"], [480, "index-1"], [480, "index-11"], [481, "index-172"], [481, "index-173"], [481, "index-174"], [481, "index-186"], [481, "index-187"], [481, "index-188"], [481, "index-189"]], "userdict (collections \u4e2d\u7684\u985e\u5225)": [[158, "collections.UserDict"]], "userlist (collections \u4e2d\u7684\u985e\u5225)": [[158, "collections.UserList"]], "userstring (collections \u4e2d\u7684\u985e\u5225)": [[158, "collections.UserString"]], "__missing__() (collections.defaultdict \u7684\u65b9\u6cd5)": [[158, "collections.defaultdict.__missing__"]], "_asdict() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[158, "collections.somenamedtuple._asdict"]], "_field_defaults (collections.somenamedtuple \u7684\u5c6c\u6027)": [[158, "collections.somenamedtuple._field_defaults"]], "_fields (collections.somenamedtuple \u7684\u5c6c\u6027)": [[158, "collections.somenamedtuple._fields"]], "_make() (collections.somenamedtuple \u7684\u985e\u5225\u65b9\u6cd5)": [[158, "collections.somenamedtuple._make"]], "_replace() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[158, "collections.somenamedtuple._replace"]], "append() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.append"]], "appendleft() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.appendleft"]], "clear() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.clear"]], "collections": [[158, "module-collections"], [426, "index-24"]], "copy() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.copy"]], "count() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.count"]], "data (collections.userdict \u7684\u5c6c\u6027)": [[158, "collections.UserDict.data"]], "data (collections.userlist \u7684\u5c6c\u6027)": [[158, "collections.UserList.data"]], "data (collections.userstring \u7684\u5c6c\u6027)": [[158, "collections.UserString.data"]], "default_factory (collections.defaultdict \u7684\u5c6c\u6027)": [[158, "collections.defaultdict.default_factory"]], "defaultdict (collections \u4e2d\u7684\u985e\u5225)": [[158, "collections.defaultdict"]], "deque (collections \u4e2d\u7684\u985e\u5225)": [[158, "collections.deque"]], "elements() (collections.counter \u7684\u65b9\u6cd5)": [[158, "collections.Counter.elements"]], "extend() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.extend"]], "extendleft() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.extendleft"]], "fromkeys() (collections.counter \u7684\u65b9\u6cd5)": [[158, "collections.Counter.fromkeys"]], "index() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.index"]], "insert() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.insert"]], "maps (collections.chainmap \u7684\u5c6c\u6027)": [[158, "collections.ChainMap.maps"]], "maxlen (collections.deque \u7684\u5c6c\u6027)": [[158, "collections.deque.maxlen"]], "most_common() (collections.counter \u7684\u65b9\u6cd5)": [[158, "collections.Counter.most_common"]], "move_to_end() (collections.ordereddict \u7684\u65b9\u6cd5)": [[158, "collections.OrderedDict.move_to_end"]], "namedtuple() (\u65bc collections \u6a21\u7d44\u4e2d)": [[158, "collections.namedtuple"]], "new_child() (collections.chainmap \u7684\u65b9\u6cd5)": [[158, "collections.ChainMap.new_child"]], "parents (collections.chainmap \u7684\u5c6c\u6027)": [[158, "collections.ChainMap.parents"]], "pop() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.pop"]], "popitem() (collections.ordereddict \u7684\u65b9\u6cd5)": [[158, "collections.OrderedDict.popitem"]], "popleft() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.popleft"]], "remove() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.remove"]], "reverse() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.reverse"]], "rotate() (collections.deque \u7684\u65b9\u6cd5)": [[158, "collections.deque.rotate"]], "subtract() (collections.counter \u7684\u65b9\u6cd5)": [[158, "collections.Counter.subtract"]], "total() (collections.counter \u7684\u65b9\u6cd5)": [[158, "collections.Counter.total"]], "update() (collections.counter \u7684\u65b9\u6cd5)": [[158, "collections.Counter.update"]], "asyncgenerator (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.AsyncGenerator"]], "asynciterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.AsyncIterable"]], "asynciterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.AsyncIterator"]], "awaitable (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Awaitable"]], "buffer (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Buffer"]], "bytestring (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.ByteString"]], "callable (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Callable"]], "collection (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Collection"]], "container (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Container"]], "coroutine (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Coroutine"]], "generator (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Generator"]], "hashable (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Hashable"]], "itemsview (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.ItemsView"]], "iterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Iterable"]], "iterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Iterator"]], "keysview (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.KeysView"]], "mapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Mapping"]], "mappingview (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.MappingView"]], "mutablemapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.MutableMapping"]], "mutablesequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.MutableSequence"]], "mutableset (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.MutableSet"]], "pep 688": [[159, "index-4"], [426, "index-109"], [472, "index-12"], [481, "index-10"]], "reversible (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Reversible"]], "sequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Sequence"]], "set (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Set"]], "sized (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.Sized"]], "valuesview (collections.abc \u4e2d\u7684\u985e\u5225)": [[159, "collections.abc.ValuesView"]], "collections.abc": [[159, "module-collections.abc"]], "colorsys": [[160, "module-colorsys"]], "hls_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[160, "colorsys.hls_to_rgb"]], "hsv_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[160, "colorsys.hsv_to_rgb"]], "rgb_to_hls() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[160, "colorsys.rgb_to_hls"]], "rgb_to_hsv() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[160, "colorsys.rgb_to_hsv"]], "rgb_to_yiq() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[160, "colorsys.rgb_to_yiq"]], "yiq_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[160, "colorsys.yiq_to_rgb"]], "--hardlink-dupes": [[161, "cmdoption-compileall-hardlink-dupes"]], "--invalidation-mode": [[161, "cmdoption-compileall-invalidation-mode"]], "-b": [[161, "cmdoption-compileall-b"], [386, "cmdoption-unittest-b"], [453, "cmdoption-B"], [453, "cmdoption-b"]], "-d": [[161, "cmdoption-compileall-d"], [232, "cmdoption-gzip-d"], [453, "cmdoption-d"]], "-f": [[161, "cmdoption-compileall-f"], [378, "cmdoption-trace-f"], [386, "cmdoption-unittest-f"]], "-j": [[161, "cmdoption-compileall-j"], [453, "cmdoption-J"]], "-o": [[161, "cmdoption-compileall-o"], [298, "cmdoption-pickletools-o"], [419, "cmdoption-zipapp-o"], [453, "cmdoption-O"]], "-p": [[161, "cmdoption-compileall-p"], [298, "cmdoption-pickletools-p"], [365, "cmdoption-timeit-p"], [386, "cmdoption-unittest-discover-p"], [419, "cmdoption-zipapp-p"], [453, "cmdoption-P"]], "-q": [[161, "cmdoption-compileall-q"], [309, "cmdoption-python-m-py_compile-q"], [453, "cmdoption-q"]], "-r": [[161, "cmdoption-compileall-r"], [365, "cmdoption-timeit-r"], [378, "cmdoption-trace-R"], [378, "cmdoption-trace-r"], [453, "cmdoption-R"]], "-x": [[161, "cmdoption-compileall-x"], [453, "cmdoption-X"], [453, "cmdoption-x"]], "source_date_epoch": [[161, "index-1"], [309, "index-3"], [309, "index-6"], [309, "index-7"], [478, "index-31"], [481, "index-217"], [481, "index-234"]], "compile_dir() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[161, "compileall.compile_dir"]], "compile_file() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[161, "compileall.compile_file"]], "compile_path() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[161, "compileall.compile_path"]], "compileall": [[161, "module-compileall"]], "compileall \u547d\u4ee4\u5217\u9078\u9805": [[161, "cmdoption-compileall-arg-directory"], [161, "cmdoption-compileall-arg-file"], [161, "cmdoption-compileall-b"], [161, "cmdoption-compileall-d"], [161, "cmdoption-compileall-e"], [161, "cmdoption-compileall-f"], [161, "cmdoption-compileall-hardlink-dupes"], [161, "cmdoption-compileall-i"], [161, "cmdoption-compileall-invalidation-mode"], [161, "cmdoption-compileall-j"], [161, "cmdoption-compileall-l"], [161, "cmdoption-compileall-o"], [161, "cmdoption-compileall-p"], [161, "cmdoption-compileall-q"], [161, "cmdoption-compileall-r"], [161, "cmdoption-compileall-s"], [161, "cmdoption-compileall-x"]], "directory": [[161, "cmdoption-compileall-arg-directory"]], "file": [[161, "cmdoption-compileall-arg-file"], [232, "cmdoption-gzip-arg-file"]], "all_completed (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[164, "concurrent.futures.ALL_COMPLETED"]], "brokenexecutor": [[164, "concurrent.futures.BrokenExecutor"]], "brokenprocesspool": [[164, "concurrent.futures.process.BrokenProcessPool"]], "brokenthreadpool": [[164, "concurrent.futures.thread.BrokenThreadPool"]], "executor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[164, "concurrent.futures.Executor"]], "first_completed (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[164, "concurrent.futures.FIRST_COMPLETED"]], "first_exception (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[164, "concurrent.futures.FIRST_EXCEPTION"]], "future (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[164, "concurrent.futures.Future"]], "pep 3148": [[164, "index-2"], [473, "index-4"]], "processpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[164, "concurrent.futures.ProcessPoolExecutor"]], "threadpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[164, "concurrent.futures.ThreadPoolExecutor"]], "add_done_callback() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Future.add_done_callback"]], "as_completed() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[164, "concurrent.futures.as_completed"]], "cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Future.cancel"]], "cancelled() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Future.cancelled"]], "concurrent.futures": [[164, "module-concurrent.futures"]], "done() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Future.done"]], "exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Future.exception"]], "map() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Executor.map"]], "result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Future.result"]], "running() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Future.running"]], "set_exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Future.set_exception"]], "set_result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Future.set_result"]], "set_running_or_notify_cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Future.set_running_or_notify_cancel"]], "shutdown() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Executor.shutdown"]], "submit() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[164, "concurrent.futures.Executor.submit"]], "wait() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[164, "concurrent.futures.wait"]], "$ \uff08\u91d1\u9322\u7b26\u865f\uff09": [[165, "index-2"], [292, "index-9"], [317, "index-2"], [343, "index-13"]], "% \uff08\u767e\u5206\u865f\uff09": [[165, "index-1"], [181, "index-0"], [292, "index-9"], [342, "index-13"], [342, "index-35"], [342, "index-45"], [364, "index-11"], [364, "index-9"], [403, "index-0"], [428, "index-68"]], ".ini": [[165, "index-0"]], "boolean_states (configparser.configparser \u7684\u5c6c\u6027)": [[165, "configparser.ConfigParser.BOOLEAN_STATES"]], "basicinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[165, "configparser.BasicInterpolation"]], "configparser (configparser \u4e2d\u7684\u985e\u5225)": [[165, "configparser.ConfigParser"]], "duplicateoptionerror": [[165, "configparser.DuplicateOptionError"]], "duplicatesectionerror": [[165, "configparser.DuplicateSectionError"]], "extendedinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[165, "configparser.ExtendedInterpolation"]], "interpolationdeptherror": [[165, "configparser.InterpolationDepthError"]], "interpolationerror": [[165, "configparser.InterpolationError"]], "interpolationmissingoptionerror": [[165, "configparser.InterpolationMissingOptionError"]], "interpolationsyntaxerror": [[165, "configparser.InterpolationSyntaxError"]], "max_interpolation_depth (\u65bc configparser \u6a21\u7d44\u4e2d)": [[165, "configparser.MAX_INTERPOLATION_DEPTH"]], "missingsectionheadererror": [[165, "configparser.MissingSectionHeaderError"]], "nooptionerror": [[165, "configparser.NoOptionError"]], "nosectionerror": [[165, "configparser.NoSectionError"]], "parsingerror": [[165, "configparser.ParsingError"]], "rawconfigparser (configparser \u4e2d\u7684\u985e\u5225)": [[165, "configparser.RawConfigParser"]], "sectcre (configparser.configparser \u7684\u5c6c\u6027)": [[165, "configparser.ConfigParser.SECTCRE"]], "windows ini file\uff08windows ini \u6a94\u6848\uff09": [[165, "index-0"]], "add_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.add_section"]], "add_section() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[165, "configparser.RawConfigParser.add_section"]], "configparser": [[165, "module-configparser"]], "configuration\uff08\u8a2d\u5b9a\uff09": [[165, "index-0"], [295, "index-2"], [332, "index-4"]], "defaults() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.defaults"]], "get() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.get"]], "getboolean() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.getboolean"]], "getfloat() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.getfloat"]], "getint() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.getint"]], "has_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.has_option"]], "has_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.has_section"]], "ini file\uff08ini \u6a94\u6848\uff09": [[165, "index-0"]], "interpolation in configuration files\uff08\u8a2d\u5b9a\u6a94\u4e2d\u7684\u63d2\u503c\uff09": [[165, "index-1"], [165, "index-2"]], "items() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.items"]], "options() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.options"]], "optionxform() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.optionxform"]], "read() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.read"]], "read_dict() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.read_dict"]], "read_file() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.read_file"]], "read_string() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.read_string"]], "remove_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.remove_option"]], "remove_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.remove_section"]], "sections() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.sections"]], "set() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.set"]], "set() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[165, "configparser.RawConfigParser.set"]], "write() (configparser.configparser \u7684\u65b9\u6cd5)": [[165, "configparser.ConfigParser.write"]], "ellipsis (\u5167\u5efa\u8b8a\u6578)": [[166, "Ellipsis"]], "false (\u5167\u5efa\u8b8a\u6578)": [[166, "False"]], "none (\u5167\u5efa\u8b8a\u6578)": [[166, "None"]], "notimplemented (\u5167\u5efa\u8b8a\u6578)": [[166, "NotImplemented"]], "true (\u5167\u5efa\u8b8a\u6578)": [[166, "True"]], "__debug__ (\u5167\u5efa\u8b8a\u6578)": [[166, "debug__"]], "copyright (\u5167\u5efa\u8b8a\u6578)": [[166, "copyright"]], "credits (\u5167\u5efa\u8b8a\u6578)": [[166, "credits"]], "ellipsis literal\uff08\u522a\u7bc0\u865f\uff09": [[166, "index-0"], [342, "index-66"], [426, "index-8"]], "exit (\u5167\u5efa\u8b8a\u6578)": [[166, "exit"]], "license (\u5167\u5efa\u8b8a\u6578)": [[166, "license"]], "quit (\u5167\u5efa\u8b8a\u6578)": [[166, "quit"]], "abstractasynccontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[167, "contextlib.AbstractAsyncContextManager"]], "abstractcontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[167, "contextlib.AbstractContextManager"]], "asynccontextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[167, "contextlib.AsyncContextDecorator"]], "asyncexitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[167, "contextlib.AsyncExitStack"]], "contextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[167, "contextlib.ContextDecorator"]], "exitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[167, "contextlib.ExitStack"]], "aclose() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[167, "contextlib.AsyncExitStack.aclose"]], "aclosing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[167, "contextlib.aclosing"]], "asynccontextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[167, "contextlib.asynccontextmanager"]], "callback() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[167, "contextlib.ExitStack.callback"]], "chdir() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[167, "contextlib.chdir"]], "close() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[167, "contextlib.ExitStack.close"]], "closing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[167, "contextlib.closing"]], "contextlib": [[167, "module-contextlib"]], "contextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[167, "contextlib.contextmanager"]], "enter_async_context() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[167, "contextlib.AsyncExitStack.enter_async_context"]], "enter_context() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[167, "contextlib.ExitStack.enter_context"]], "nullcontext() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[167, "contextlib.nullcontext"]], "pop_all() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[167, "contextlib.ExitStack.pop_all"]], "push() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[167, "contextlib.ExitStack.push"]], "push_async_callback() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[167, "contextlib.AsyncExitStack.push_async_callback"]], "push_async_exit() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[167, "contextlib.AsyncExitStack.push_async_exit"]], "redirect_stderr() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[167, "contextlib.redirect_stderr"]], "redirect_stdout() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[167, "contextlib.redirect_stdout"]], "suppress() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[167, "contextlib.suppress"]], "context (contextvars \u4e2d\u7684\u985e\u5225)": [[168, "contextvars.Context"]], "contextvar (contextvars \u4e2d\u7684\u985e\u5225)": [[168, "contextvars.ContextVar"]], "missing (contextvars.token \u7684\u5c6c\u6027)": [[168, "contextvars.Token.MISSING"]], "token (contextvars \u4e2d\u7684\u985e\u5225)": [[168, "contextvars.Token"]], "contextvars": [[168, "module-contextvars"]], "copy() (contextvars.context \u7684\u65b9\u6cd5)": [[168, "contextvars.Context.copy"]], "copy_context() (\u65bc contextvars \u6a21\u7d44\u4e2d)": [[168, "contextvars.copy_context"]], "get() (contextvars.context \u7684\u65b9\u6cd5)": [[168, "contextvars.Context.get"]], "get() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[168, "contextvars.ContextVar.get"]], "items() (contextvars.context \u7684\u65b9\u6cd5)": [[168, "contextvars.Context.items"]], "keys() (contextvars.context \u7684\u65b9\u6cd5)": [[168, "contextvars.Context.keys"]], "name (contextvars.contextvar \u7684\u5c6c\u6027)": [[168, "contextvars.ContextVar.name"]], "old_value (contextvars.token \u7684\u5c6c\u6027)": [[168, "contextvars.Token.old_value"]], "reset() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[168, "contextvars.ContextVar.reset"]], "run() (contextvars.context \u7684\u65b9\u6cd5)": [[168, "contextvars.Context.run"]], "set() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[168, "contextvars.ContextVar.set"]], "values() (contextvars.context \u7684\u65b9\u6cd5)": [[168, "contextvars.Context.values"]], "var (contextvars.token \u7684\u5c6c\u6027)": [[168, "contextvars.Token.var"]], "__copy__() \uff08\u8907\u88fd\u5354\u5b9a\uff09": [[169, "index-1"]], "__deepcopy__() \uff08\u8907\u88fd\u5354\u5b9a\uff09": [[169, "index-1"]], "copy": [[169, "module-copy"]], "copy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[169, "copy.copy"]], "deepcopy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[169, "copy.deepcopy"]], "pickle": [[169, "index-0"], [170, "index-0"], [272, "index-0"], [297, "module-pickle"], [328, "index-0"]], "constructor() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[170, "copyreg.constructor"]], "copyreg": [[170, "module-copyreg"]], "copy\uff08\u8907\u88fd\uff09": [[170, "index-0"], [245, "index-4"], [297, "index-5"]], "pickle() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[170, "copyreg.pickle"]], "des": [[171, "index-0"]], "method_blowfish (\u65bc crypt \u6a21\u7d44\u4e2d)": [[171, "crypt.METHOD_BLOWFISH"]], "method_crypt (\u65bc crypt \u6a21\u7d44\u4e2d)": [[171, "crypt.METHOD_CRYPT"]], "method_md5 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[171, "crypt.METHOD_MD5"]], "method_sha256 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[171, "crypt.METHOD_SHA256"]], "method_sha512 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[171, "crypt.METHOD_SHA512"]], "pep 594#crypt": [[171, "index-1"]], "cipher": [[171, "index-0"]], "crypt": [[171, "module-crypt"], [308, "index-0"]], "crypt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[171, "crypt.crypt"]], "crypt(3)": [[171, "index-0"], [171, "index-2"], [171, "index-3"]], "methods (\u65bc crypt \u6a21\u7d44\u4e2d)": [[171, "crypt.methods"]], "mksalt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[171, "crypt.mksalt"]], "cryptography\uff08\u5bc6\u78bc\u5b78\uff09": [[172, "index-0"]], "dialect (csv \u4e2d\u7684\u985e\u5225)": [[173, "csv.Dialect"]], "dictreader (csv \u4e2d\u7684\u985e\u5225)": [[173, "csv.DictReader"]], "dictwriter (csv \u4e2d\u7684\u985e\u5225)": [[173, "csv.DictWriter"]], "pep 305": [[173, "index-7"], [463, "index-20"]], "quote_all (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.QUOTE_ALL"]], "quote_minimal (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.QUOTE_MINIMAL"]], "quote_none (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.QUOTE_NONE"]], "quote_nonnumeric (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.QUOTE_NONNUMERIC"]], "quote_notnull (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.QUOTE_NOTNULL"]], "quote_strings (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.QUOTE_STRINGS"]], "rfc 4180": [[173, "index-6"]], "sniffer (csv \u4e2d\u7684\u985e\u5225)": [[173, "csv.Sniffer"]], "__next__() (csv.csvreader \u7684\u65b9\u6cd5)": [[173, "csv.csvreader.__next__"]], "csv": [[173, "index-0"], [173, "module-csv"]], "csv.reader \u51fd\u5f0f": [[173, "index-3"]], "data\uff08\u8cc7\u6599\uff09": [[173, "index-0"], [345, "index-0"], [426, "index-0"], [426, "index-4"], [428, "index-7"]], "delimiter (csv.dialect \u7684\u5c6c\u6027)": [[173, "csv.Dialect.delimiter"]], "dialect (csv.csvreader \u7684\u5c6c\u6027)": [[173, "csv.csvreader.dialect"]], "dialect (csv.csvwriter \u7684\u5c6c\u6027)": [[173, "csv.csvwriter.dialect"]], "doublequote (csv.dialect \u7684\u5c6c\u6027)": [[173, "csv.Dialect.doublequote"]], "escapechar (csv.dialect \u7684\u5c6c\u6027)": [[173, "csv.Dialect.escapechar"]], "excel (csv \u4e2d\u7684\u985e\u5225)": [[173, "csv.excel"]], "excel_tab (csv \u4e2d\u7684\u985e\u5225)": [[173, "csv.excel_tab"]], "field_size_limit() (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.field_size_limit"]], "fieldnames (csv.dictreader \u7684\u5c6c\u6027)": [[173, "csv.DictReader.fieldnames"]], "get_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.get_dialect"]], "has_header() (csv.sniffer \u7684\u65b9\u6cd5)": [[173, "csv.Sniffer.has_header"]], "line_num (csv.csvreader \u7684\u5c6c\u6027)": [[173, "csv.csvreader.line_num"]], "lineterminator (csv.dialect \u7684\u5c6c\u6027)": [[173, "csv.Dialect.lineterminator"]], "list_dialects() (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.list_dialects"]], "quotechar (csv.dialect \u7684\u5c6c\u6027)": [[173, "csv.Dialect.quotechar"]], "quoting (csv.dialect \u7684\u5c6c\u6027)": [[173, "csv.Dialect.quoting"]], "reader() (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.reader"]], "register_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.register_dialect"]], "skipinitialspace (csv.dialect \u7684\u5c6c\u6027)": [[173, "csv.Dialect.skipinitialspace"]], "sniff() (csv.sniffer \u7684\u65b9\u6cd5)": [[173, "csv.Sniffer.sniff"]], "strict (csv.dialect \u7684\u5c6c\u6027)": [[173, "csv.Dialect.strict"]], "tabular\uff08\u8868\u683c\uff09": [[173, "index-0"]], "universal newlines": [[173, "index-3"], [223, "index-7"], [248, "index-15"], [256, "index-4"], [256, "index-5"], [342, "index-34"], [342, "index-44"], [346, "index-1"], [463, "index-8"], [464, "index-7"], [465, "index-20"], [466, "index-13"]], "unix_dialect (csv \u4e2d\u7684\u985e\u5225)": [[173, "csv.unix_dialect"]], "unregister_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.unregister_dialect"]], "writeheader() (csv.dictwriter \u7684\u65b9\u6cd5)": [[173, "csv.DictWriter.writeheader"]], "writer() (\u65bc csv \u6a21\u7d44\u4e2d)": [[173, "csv.writer"]], "writerow() (csv.csvwriter \u7684\u65b9\u6cd5)": [[173, "csv.csvwriter.writerow"]], "writerows() (csv.csvwriter \u7684\u65b9\u6cd5)": [[173, "csv.csvwriter.writerows"]], "array (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.Array"]], "bigendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.BigEndianStructure"]], "bigendianunion (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.BigEndianUnion"]], "cdll (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.CDLL"]], "cfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.CFUNCTYPE"]], "dllcanunloadnow() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.DllCanUnloadNow"]], "dllgetclassobject() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.DllGetClassObject"]], "formaterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.FormatError"]], "getlasterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.GetLastError"]], "hresult (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.HRESULT"]], "libraryloader (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.LibraryLoader"]], "littleendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.LittleEndianStructure"]], "littleendianunion (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.LittleEndianUnion"]], "loadlibrary() (ctypes.libraryloader \u7684\u65b9\u6cd5)": [[174, "ctypes.LibraryLoader.LoadLibrary"]], "oledll (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.OleDLL"]], "pointer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.POINTER"], [174, "ctypes.pointer"]], "pyfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.PYFUNCTYPE"]], "pydll (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.PyDLL"]], "structure (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.Structure"]], "union (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.Union"]], "winfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.WINFUNCTYPE"]], "windll (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.WinDLL"]], "winerror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.WinError"]], "_cdata (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes._CData"]], "_funcptr (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes._FuncPtr"]], "_pointer (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes._Pointer"]], "_simplecdata (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes._SimpleCData"]], "_anonymous_ (ctypes.structure \u7684\u5c6c\u6027)": [[174, "ctypes.Structure._anonymous_"]], "_b_base_ (ctypes._cdata \u7684\u5c6c\u6027)": [[174, "ctypes._CData._b_base_"]], "_b_needsfree_ (ctypes._cdata \u7684\u5c6c\u6027)": [[174, "ctypes._CData._b_needsfree_"]], "_fields_ (ctypes.structure \u7684\u5c6c\u6027)": [[174, "ctypes.Structure._fields_"]], "_handle (ctypes.pydll \u7684\u5c6c\u6027)": [[174, "ctypes.PyDLL._handle"]], "_length_ (ctypes.array \u7684\u5c6c\u6027)": [[174, "ctypes.Array._length_"]], "_name (ctypes.pydll \u7684\u5c6c\u6027)": [[174, "ctypes.PyDLL._name"]], "_objects (ctypes._cdata \u7684\u5c6c\u6027)": [[174, "ctypes._CData._objects"]], "_pack_ (ctypes.structure \u7684\u5c6c\u6027)": [[174, "ctypes.Structure._pack_"]], "_type_ (ctypes.array \u7684\u5c6c\u6027)": [[174, "ctypes.Array._type_"]], "_type_ (ctypes._pointer \u7684\u5c6c\u6027)": [[174, "ctypes._Pointer._type_"]], "addressof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.addressof"]], "alignment() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.alignment"]], "argtypes (ctypes._funcptr \u7684\u5c6c\u6027)": [[174, "ctypes._FuncPtr.argtypes"]], "byref() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.byref"]], "c_bool (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_bool"]], "c_byte (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_byte"]], "c_char (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_char"]], "c_char_p (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_char_p"]], "c_double (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_double"]], "c_float (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_float"]], "c_int (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_int"]], "c_int16 (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_int16"]], "c_int32 (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_int32"]], "c_int64 (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_int64"]], "c_int8 (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_int8"]], "c_long (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_long"]], "c_longdouble (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_longdouble"]], "c_longlong (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_longlong"]], "c_short (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_short"]], "c_size_t (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_size_t"]], "c_ssize_t (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_ssize_t"]], "c_time_t (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_time_t"]], "c_ubyte (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_ubyte"]], "c_uint (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_uint"]], "c_uint16 (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_uint16"]], "c_uint32 (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_uint32"]], "c_uint64 (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_uint64"]], "c_uint8 (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_uint8"]], "c_ulong (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_ulong"]], "c_ulonglong (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_ulonglong"]], "c_ushort (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_ushort"]], "c_void_p (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_void_p"]], "c_wchar (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_wchar"]], "c_wchar_p (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.c_wchar_p"]], "cast() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.cast"]], "contents (ctypes._pointer \u7684\u5c6c\u6027)": [[174, "ctypes._Pointer.contents"]], "create_string_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.create_string_buffer"]], "create_unicode_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.create_unicode_buffer"]], "ctypes": [[174, "module-ctypes"]], "errcheck (ctypes._funcptr \u7684\u5c6c\u6027)": [[174, "ctypes._FuncPtr.errcheck"]], "find_library() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[174, "ctypes.util.find_library"]], "find_msvcrt() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[174, "ctypes.util.find_msvcrt"]], "from_address() (ctypes._cdata \u7684\u65b9\u6cd5)": [[174, "ctypes._CData.from_address"]], "from_buffer() (ctypes._cdata \u7684\u65b9\u6cd5)": [[174, "ctypes._CData.from_buffer"]], "from_buffer_copy() (ctypes._cdata \u7684\u65b9\u6cd5)": [[174, "ctypes._CData.from_buffer_copy"]], "from_param() (ctypes._cdata \u7684\u65b9\u6cd5)": [[174, "ctypes._CData.from_param"]], "get_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.get_errno"]], "get_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.get_last_error"]], "in_dll() (ctypes._cdata \u7684\u65b9\u6cd5)": [[174, "ctypes._CData.in_dll"]], "memmove() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.memmove"]], "memset() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.memset"]], "py_object (ctypes \u4e2d\u7684\u985e\u5225)": [[174, "ctypes.py_object"]], "resize() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.resize"]], "restype (ctypes._funcptr \u7684\u5c6c\u6027)": [[174, "ctypes._FuncPtr.restype"]], "set_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.set_errno"]], "set_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.set_last_error"]], "sizeof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.sizeof"]], "string_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.string_at"]], "value (ctypes._simplecdata \u7684\u5c6c\u6027)": [[174, "ctypes._SimpleCData.value"]], "wstring_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[174, "ctypes.wstring_at"]], "acs_bbss (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_BBSS"]], "acs_block (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_BLOCK"]], "acs_board (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_BOARD"]], "acs_bsbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_BSBS"]], "acs_bssb (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_BSSB"]], "acs_bsss (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_BSSS"]], "acs_btee (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_BTEE"]], "acs_bullet (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_BULLET"]], "acs_ckboard (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_CKBOARD"]], "acs_darrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_DARROW"]], "acs_degree (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_DEGREE"]], "acs_diamond (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_DIAMOND"]], "acs_gequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_GEQUAL"]], "acs_hline (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_HLINE"]], "acs_lantern (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_LANTERN"]], "acs_larrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_LARROW"]], "acs_lequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_LEQUAL"]], "acs_llcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_LLCORNER"]], "acs_lrcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_LRCORNER"]], "acs_ltee (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_LTEE"]], "acs_nequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_NEQUAL"]], "acs_pi (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_PI"]], "acs_plminus (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_PLMINUS"]], "acs_plus (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_PLUS"]], "acs_rarrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_RARROW"]], "acs_rtee (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_RTEE"]], "acs_s1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_S1"]], "acs_s3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_S3"]], "acs_s7 (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_S7"]], "acs_s9 (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_S9"]], "acs_sbbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_SBBS"]], "acs_sbsb (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_SBSB"]], "acs_sbss (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_SBSS"]], "acs_ssbb (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_SSBB"]], "acs_ssbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_SSBS"]], "acs_sssb (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_SSSB"]], "acs_ssss (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_SSSS"]], "acs_sterling (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_STERLING"]], "acs_ttee (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_TTEE"]], "acs_uarrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_UARROW"]], "acs_ulcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_ULCORNER"]], "acs_urcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_URCORNER"]], "acs_vline (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ACS_VLINE"]], "a_altcharset (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_ALTCHARSET"]], "a_attributes (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_ATTRIBUTES"]], "a_blink (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_BLINK"]], "a_bold (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_BOLD"]], "a_chartext (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_CHARTEXT"]], "a_color (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_COLOR"]], "a_dim (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_DIM"]], "a_horizontal (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_HORIZONTAL"]], "a_invis (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_INVIS"]], "a_italic (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_ITALIC"]], "a_left (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_LEFT"]], "a_low (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_LOW"]], "a_normal (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_NORMAL"]], "a_protect (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_PROTECT"]], "a_reverse (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_REVERSE"]], "a_right (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_RIGHT"]], "a_standout (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_STANDOUT"]], "a_top (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_TOP"]], "a_underline (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_UNDERLINE"]], "a_vertical (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.A_VERTICAL"]], "button_alt (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.BUTTON_ALT"]], "button_ctrl (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.BUTTON_CTRL"]], "button_shift (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.BUTTON_SHIFT"]], "buttonn_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.BUTTONn_CLICKED"]], "buttonn_double_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.BUTTONn_DOUBLE_CLICKED"]], "buttonn_pressed (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.BUTTONn_PRESSED"]], "buttonn_released (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.BUTTONn_RELEASED"]], "buttonn_triple_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.BUTTONn_TRIPLE_CLICKED"]], "colors (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLORS"]], "color_black (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLOR_BLACK"]], "color_blue (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLOR_BLUE"]], "color_cyan (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLOR_CYAN"]], "color_green (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLOR_GREEN"]], "color_magenta (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLOR_MAGENTA"]], "color_pairs (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLOR_PAIRS"]], "color_red (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLOR_RED"]], "color_white (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLOR_WHITE"]], "color_yellow (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLOR_YELLOW"]], "cols (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.COLS"]], "columns": [[175, "index-4"], [175, "index-6"]], "err (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ERR"]], "key_a1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_A1"]], "key_a3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_A3"]], "key_b2 (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_B2"]], "key_backspace (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_BACKSPACE"]], "key_beg (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_BEG"]], "key_break (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_BREAK"]], "key_btab (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_BTAB"]], "key_c1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_C1"]], "key_c3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_C3"]], "key_cancel (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_CANCEL"]], "key_catab (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_CATAB"]], "key_clear (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_CLEAR"]], "key_close (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_CLOSE"]], "key_command (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_COMMAND"]], "key_copy (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_COPY"]], "key_create (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_CREATE"]], "key_ctab (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_CTAB"]], "key_dc (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_DC"]], "key_dl (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_DL"]], "key_down (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_DOWN"]], "key_eic (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_EIC"]], "key_end (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_END"]], "key_enter (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_ENTER"]], "key_eol (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_EOL"]], "key_eos (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_EOS"]], "key_exit (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_EXIT"]], "key_f0 (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_F0"]], "key_find (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_FIND"]], "key_fn (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_Fn"]], "key_help (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_HELP"]], "key_home (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_HOME"]], "key_ic (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_IC"]], "key_il (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_IL"]], "key_left (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_LEFT"]], "key_ll (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_LL"]], "key_mark (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_MARK"]], "key_max (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_MAX"]], "key_message (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_MESSAGE"]], "key_min (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_MIN"]], "key_mouse (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_MOUSE"]], "key_move (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_MOVE"]], "key_next (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_NEXT"]], "key_npage (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_NPAGE"]], "key_open (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_OPEN"]], "key_options (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_OPTIONS"]], "key_ppage (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_PPAGE"]], "key_previous (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_PREVIOUS"]], "key_print (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_PRINT"]], "key_redo (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_REDO"]], "key_reference (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_REFERENCE"]], "key_refresh (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_REFRESH"]], "key_replace (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_REPLACE"]], "key_reset (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_RESET"]], "key_resize (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_RESIZE"]], "key_restart (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_RESTART"]], "key_resume (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_RESUME"]], "key_right (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_RIGHT"]], "key_save (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SAVE"]], "key_sbeg (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SBEG"]], "key_scancel (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SCANCEL"]], "key_scommand (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SCOMMAND"]], "key_scopy (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SCOPY"]], "key_screate (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SCREATE"]], "key_sdc (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SDC"]], "key_sdl (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SDL"]], "key_select (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SELECT"]], "key_send (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SEND"]], "key_seol (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SEOL"]], "key_sexit (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SEXIT"]], "key_sf (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SF"]], "key_sfind (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SFIND"]], "key_shelp (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SHELP"]], "key_shome (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SHOME"]], "key_sic (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SIC"]], "key_sleft (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SLEFT"]], "key_smessage (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SMESSAGE"]], "key_smove (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SMOVE"]], "key_snext (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SNEXT"]], "key_soptions (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SOPTIONS"]], "key_sprevious (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SPREVIOUS"]], "key_sprint (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SPRINT"]], "key_sr (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SR"]], "key_sredo (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SREDO"]], "key_sreplace (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SREPLACE"]], "key_sreset (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SRESET"]], "key_sright (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SRIGHT"]], "key_srsume (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SRSUME"]], "key_ssave (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SSAVE"]], "key_ssuspend (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SSUSPEND"]], "key_stab (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_STAB"]], "key_sundo (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SUNDO"]], "key_suspend (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_SUSPEND"]], "key_undo (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_UNDO"]], "key_up (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.KEY_UP"]], "lines": [[175, "index-0"], [175, "index-3"], [175, "index-5"]], "lines (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.LINES"]], "ok (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.OK"]], "term": [[175, "index-1"], [175, "index-2"]], "textbox (curses.textpad \u4e2d\u7684\u985e\u5225)": [[175, "curses.textpad.Textbox"]], "__version__ (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.__version__"]], "addch() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.addch"]], "addnstr() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.addnstr"]], "addstr() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.addstr"]], "attroff() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.attroff"]], "attron() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.attron"]], "attrset() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.attrset"]], "baudrate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.baudrate"]], "beep() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.beep"]], "bkgd() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.bkgd"]], "bkgdset() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.bkgdset"]], "border() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.border"]], "box() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.box"]], "can_change_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.can_change_color"]], "cbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.cbreak"]], "chgat() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.chgat"]], "clear() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.clear"]], "clearok() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.clearok"]], "clrtobot() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.clrtobot"]], "clrtoeol() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.clrtoeol"]], "color_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.color_content"]], "color_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.color_pair"]], "curs_set() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.curs_set"]], "curses": [[175, "module-curses"]], "curses.textpad": [[175, "module-curses.textpad"]], "cursyncup() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.cursyncup"]], "def_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.def_prog_mode"]], "def_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.def_shell_mode"]], "delay_output() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.delay_output"]], "delch() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.delch"]], "deleteln() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.deleteln"]], "derwin() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.derwin"]], "do_command() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[175, "curses.textpad.Textbox.do_command"]], "doupdate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.doupdate"]], "echo() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.echo"]], "echochar() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.echochar"]], "edit() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[175, "curses.textpad.Textbox.edit"]], "enclose() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.enclose"]], "encoding (curses.window \u7684\u5c6c\u6027)": [[175, "curses.window.encoding"]], "endwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.endwin"]], "erase() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.erase"]], "erasechar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.erasechar"]], "filter() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.filter"]], "flash() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.flash"]], "flushinp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.flushinp"]], "gather() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[175, "curses.textpad.Textbox.gather"]], "get_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.get_escdelay"]], "get_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.get_tabsize"]], "get_wch() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.get_wch"]], "getbegyx() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.getbegyx"]], "getbkgd() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.getbkgd"]], "getch() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.getch"]], "getkey() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.getkey"]], "getmaxyx() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.getmaxyx"]], "getmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.getmouse"]], "getparyx() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.getparyx"]], "getstr() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.getstr"]], "getsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.getsyx"]], "getwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.getwin"]], "getyx() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.getyx"]], "halfdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.halfdelay"]], "has_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.has_colors"]], "has_extended_color_support() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.has_extended_color_support"]], "has_ic() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.has_ic"]], "has_il() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.has_il"]], "has_key() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.has_key"]], "hline() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.hline"]], "idcok() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.idcok"]], "idlok() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.idlok"]], "immedok() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.immedok"]], "inch() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.inch"]], "init_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.init_color"]], "init_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.init_pair"]], "initscr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.initscr"]], "insch() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.insch"]], "insdelln() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.insdelln"]], "insertln() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.insertln"]], "insnstr() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.insnstr"]], "insstr() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.insstr"]], "instr() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.instr"]], "is_linetouched() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.is_linetouched"]], "is_term_resized() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.is_term_resized"]], "is_wintouched() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.is_wintouched"]], "isendwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.isendwin"]], "keyname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.keyname"]], "keypad() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.keypad"]], "killchar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.killchar"]], "leaveok() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.leaveok"]], "longname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.longname"]], "meta() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.meta"]], "mouseinterval() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.mouseinterval"]], "mousemask() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.mousemask"]], "move() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.move"]], "mvderwin() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.mvderwin"]], "mvwin() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.mvwin"]], "napms() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.napms"]], "ncurses_version (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ncurses_version"]], "newpad() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.newpad"]], "newwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.newwin"]], "nl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.nl"]], "nocbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.nocbreak"]], "nodelay() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.nodelay"]], "noecho() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.noecho"]], "nonl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.nonl"]], "noqiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.noqiflush"]], "noraw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.noraw"]], "notimeout() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.notimeout"]], "noutrefresh() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.noutrefresh"]], "overlay() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.overlay"]], "overwrite() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.overwrite"]], "pair_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.pair_content"]], "pair_number() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.pair_number"]], "putp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.putp"]], "putwin() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.putwin"]], "qiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.qiflush"]], "raw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.raw"]], "rectangle() (\u65bc curses.textpad \u6a21\u7d44\u4e2d)": [[175, "curses.textpad.rectangle"]], "redrawln() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.redrawln"]], "redrawwin() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.redrawwin"]], "refresh() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.refresh"]], "reset_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.reset_prog_mode"]], "reset_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.reset_shell_mode"]], "resetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.resetty"]], "resize() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.resize"]], "resize_term() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.resize_term"]], "resizeterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.resizeterm"]], "savetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.savetty"]], "scroll() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.scroll"]], "scrollok() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.scrollok"]], "set_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.set_escdelay"]], "set_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.set_tabsize"]], "setscrreg() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.setscrreg"]], "setsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.setsyx"]], "setupterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.setupterm"]], "standend() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.standend"]], "standout() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.standout"]], "start_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.start_color"]], "stripspaces (curses.textpad.textbox \u7684\u5c6c\u6027)": [[175, "curses.textpad.Textbox.stripspaces"]], "subpad() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.subpad"]], "subwin() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.subwin"]], "syncdown() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.syncdown"]], "syncok() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.syncok"]], "syncup() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.syncup"]], "termattrs() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.termattrs"]], "termname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.termname"]], "tigetflag() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.tigetflag"]], "tigetnum() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.tigetnum"]], "tigetstr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.tigetstr"]], "timeout() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.timeout"]], "touchline() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.touchline"]], "touchwin() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.touchwin"]], "tparm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.tparm"]], "typeahead() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.typeahead"]], "unctrl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.unctrl"]], "unget_wch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.unget_wch"]], "ungetch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ungetch"]], "ungetmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.ungetmouse"]], "untouchwin() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.untouchwin"]], "update_lines_cols() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.update_lines_cols"]], "use_default_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.use_default_colors"]], "use_env() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.use_env"]], "version (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.version"]], "vline() (curses.window \u7684\u65b9\u6cd5)": [[175, "curses.window.vline"]], "wrapper() (\u65bc curses \u6a21\u7d44\u4e2d)": [[175, "curses.wrapper"]], "ack (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.ACK"]], "bel (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.BEL"]], "bs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.BS"]], "can (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.CAN"]], "cr (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.CR"]], "dc1 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.DC1"]], "dc2 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.DC2"]], "dc3 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.DC3"]], "dc4 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.DC4"]], "del (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.DEL"]], "dle (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.DLE"]], "em (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.EM"]], "enq (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.ENQ"]], "eot (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.EOT"]], "esc (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.ESC"]], "etb (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.ETB"]], "etx (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.ETX"]], "ff (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.FF"]], "fs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.FS"]], "gs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.GS"]], "ht (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.HT"]], "lf (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.LF"]], "nak (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.NAK"]], "nl (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.NL"]], "nul (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.NUL"]], "rs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.RS"]], "si (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.SI"]], "so (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.SO"]], "soh (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.SOH"]], "sp (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.SP"]], "stx (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.STX"]], "sub (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.SUB"]], "syn (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.SYN"]], "tab (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.TAB"]], "us (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.US"]], "vt (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.VT"]], "^ \uff08\u63d2\u5165\u7b26\u865f\uff09": [[176, "index-0"], [191, "index-1"], [317, "index-1"], [317, "index-13"], [342, "index-16"], [343, "index-3"], [379, "index-1"], [428, "index-75"]], "alt() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.alt"]], "ascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.ascii"]], "controlnames (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.controlnames"]], "ctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.ctrl"]], "curses.ascii": [[176, "module-curses.ascii"]], "isalnum() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isalnum"]], "isalpha() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isalpha"]], "isascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isascii"]], "isblank() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isblank"]], "iscntrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.iscntrl"]], "isctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isctrl"]], "isdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isdigit"]], "isgraph() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isgraph"]], "islower() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.islower"]], "ismeta() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.ismeta"]], "isprint() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isprint"]], "ispunct() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.ispunct"]], "isspace() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isspace"]], "isupper() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isupper"]], "isxdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.isxdigit"]], "unctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[176, "curses.ascii.unctrl"]], "\u65bc curses \u6a21\u7d44\u4e2d": [[176, "index-0"]], "above() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.above"]], "below() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.below"]], "bottom() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.bottom"]], "bottom_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[177, "curses.panel.bottom_panel"]], "curses.panel": [[177, "module-curses.panel"]], "hidden() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.hidden"]], "hide() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.hide"]], "move() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.move"]], "new_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[177, "curses.panel.new_panel"]], "replace() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.replace"]], "set_userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.set_userptr"]], "show() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.show"]], "top() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.top"]], "top_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[177, "curses.panel.top_panel"]], "update_panels() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[177, "curses.panel.update_panels"]], "userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.userptr"]], "window() (curses.panel.panel \u7684\u65b9\u6cd5)": [[177, "curses.panel.Panel.window"]], "field (dataclasses \u4e2d\u7684\u985e\u5225)": [[179, "dataclasses.Field"]], "frozeninstanceerror": [[179, "dataclasses.FrozenInstanceError"]], "kw_only (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.KW_ONLY"]], "missing (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.MISSING"]], "pep 557": [[179, "index-0"], [478, "index-29"]], "__post_init__() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.__post_init__"]], "asdict() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.asdict"]], "astuple() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.astuple"]], "dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.dataclass"]], "dataclasses": [[179, "module-dataclasses"]], "field() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.field"]], "fields() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.fields"]], "is_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.is_dataclass"]], "make_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.make_dataclass"]], "replace() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[179, "dataclasses.replace"]], "maxyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[181, "datetime.MAXYEAR"]], "minyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[181, "datetime.MINYEAR"]], "utc (\u65bc datetime \u6a21\u7d44\u4e2d)": [[181, "datetime.UTC"]], "__format__() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.__format__"]], "__format__() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.__format__"]], "__format__() (datetime.time \u7684\u65b9\u6cd5)": [[181, "datetime.time.__format__"]], "__str__() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.__str__"]], "__str__() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.__str__"]], "__str__() (datetime.time \u7684\u65b9\u6cd5)": [[181, "datetime.time.__str__"]], "astimezone() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.astimezone"]], "combine() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.datetime.combine"]], "ctime() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.ctime"]], "ctime() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.ctime"]], "date (datetime \u4e2d\u7684\u985e\u5225)": [[181, "datetime.date"]], "date() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.date"]], "datetime": [[181, "module-datetime"]], "datetime (datetime \u4e2d\u7684\u985e\u5225)": [[181, "datetime.datetime"]], "datetime format\uff08\u65e5\u671f\u6642\u9593\u683c\u5f0f\uff09": [[181, "index-0"], [364, "index-11"], [364, "index-9"]], "day (datetime.date \u7684\u5c6c\u6027)": [[181, "datetime.date.day"]], "day (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.day"]], "dst() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.dst"]], "dst() (datetime.time \u7684\u65b9\u6cd5)": [[181, "datetime.time.dst"]], "dst() (datetime.timezone \u7684\u65b9\u6cd5)": [[181, "datetime.timezone.dst"]], "dst() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[181, "datetime.tzinfo.dst"]], "fold (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.fold"]], "fold (datetime.time \u7684\u5c6c\u6027)": [[181, "datetime.time.fold"]], "fromisocalendar() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.date.fromisocalendar"]], "fromisocalendar() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.datetime.fromisocalendar"]], "fromisoformat() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.date.fromisoformat"]], "fromisoformat() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.datetime.fromisoformat"]], "fromisoformat() (datetime.time \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.time.fromisoformat"]], "fromordinal() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.date.fromordinal"]], "fromordinal() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.datetime.fromordinal"]], "fromtimestamp() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.date.fromtimestamp"]], "fromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.datetime.fromtimestamp"]], "fromutc() (datetime.timezone \u7684\u65b9\u6cd5)": [[181, "datetime.timezone.fromutc"]], "fromutc() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[181, "datetime.tzinfo.fromutc"]], "hour (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.hour"]], "hour (datetime.time \u7684\u5c6c\u6027)": [[181, "datetime.time.hour"]], "isocalendar() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.isocalendar"]], "isocalendar() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.isocalendar"]], "isoformat() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.isoformat"]], "isoformat() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.isoformat"]], "isoformat() (datetime.time \u7684\u65b9\u6cd5)": [[181, "datetime.time.isoformat"]], "isoweekday() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.isoweekday"]], "isoweekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.isoweekday"]], "max (datetime.date \u7684\u5c6c\u6027)": [[181, "datetime.date.max"]], "max (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.max"]], "max (datetime.time \u7684\u5c6c\u6027)": [[181, "datetime.time.max"]], "max (datetime.timedelta \u7684\u5c6c\u6027)": [[181, "datetime.timedelta.max"]], "microsecond (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.microsecond"]], "microsecond (datetime.time \u7684\u5c6c\u6027)": [[181, "datetime.time.microsecond"]], "min (datetime.date \u7684\u5c6c\u6027)": [[181, "datetime.date.min"]], "min (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.min"]], "min (datetime.time \u7684\u5c6c\u6027)": [[181, "datetime.time.min"]], "min (datetime.timedelta \u7684\u5c6c\u6027)": [[181, "datetime.timedelta.min"]], "minute (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.minute"]], "minute (datetime.time \u7684\u5c6c\u6027)": [[181, "datetime.time.minute"]], "month (datetime.date \u7684\u5c6c\u6027)": [[181, "datetime.date.month"]], "month (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.month"]], "now() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.datetime.now"]], "replace() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.replace"]], "replace() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.replace"]], "replace() (datetime.time \u7684\u65b9\u6cd5)": [[181, "datetime.time.replace"]], "resolution (datetime.date \u7684\u5c6c\u6027)": [[181, "datetime.date.resolution"]], "resolution (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.resolution"]], "resolution (datetime.time \u7684\u5c6c\u6027)": [[181, "datetime.time.resolution"]], "resolution (datetime.timedelta \u7684\u5c6c\u6027)": [[181, "datetime.timedelta.resolution"]], "second (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.second"]], "second (datetime.time \u7684\u5c6c\u6027)": [[181, "datetime.time.second"]], "strftime() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.strftime"]], "strftime() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.strftime"]], "strftime() (datetime.time \u7684\u65b9\u6cd5)": [[181, "datetime.time.strftime"]], "strptime() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.datetime.strptime"]], "time (datetime \u4e2d\u7684\u985e\u5225)": [[181, "datetime.time"]], "time() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.time"]], "timedelta (datetime \u4e2d\u7684\u985e\u5225)": [[181, "datetime.timedelta"]], "timestamp() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.timestamp"]], "timetuple() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.timetuple"]], "timetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.timetuple"]], "timetz() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.timetz"]], "timezone (datetime \u4e2d\u7684\u985e\u5225)": [[181, "datetime.timezone"]], "today() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.date.today"]], "today() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.datetime.today"]], "toordinal() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.toordinal"]], "toordinal() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.toordinal"]], "total_seconds() (datetime.timedelta \u7684\u65b9\u6cd5)": [[181, "datetime.timedelta.total_seconds"]], "tzinfo (datetime \u4e2d\u7684\u985e\u5225)": [[181, "datetime.tzinfo"]], "tzinfo (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.tzinfo"]], "tzinfo (datetime.time \u7684\u5c6c\u6027)": [[181, "datetime.time.tzinfo"]], "tzname() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.tzname"]], "tzname() (datetime.time \u7684\u65b9\u6cd5)": [[181, "datetime.time.tzname"]], "tzname() (datetime.timezone \u7684\u65b9\u6cd5)": [[181, "datetime.timezone.tzname"]], "tzname() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[181, "datetime.tzinfo.tzname"]], "utc (datetime.timezone \u7684\u5c6c\u6027)": [[181, "datetime.timezone.utc"]], "utcfromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.datetime.utcfromtimestamp"]], "utcnow() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[181, "datetime.datetime.utcnow"]], "utcoffset() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.utcoffset"]], "utcoffset() (datetime.time \u7684\u65b9\u6cd5)": [[181, "datetime.time.utcoffset"]], "utcoffset() (datetime.timezone \u7684\u65b9\u6cd5)": [[181, "datetime.timezone.utcoffset"]], "utcoffset() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[181, "datetime.tzinfo.utcoffset"]], "utctimetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.utctimetuple"]], "weekday() (datetime.date \u7684\u65b9\u6cd5)": [[181, "datetime.date.weekday"]], "weekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[181, "datetime.datetime.weekday"]], "year (datetime.date \u7684\u5c6c\u6027)": [[181, "datetime.date.year"]], "year (datetime.datetime \u7684\u5c6c\u6027)": [[181, "datetime.datetime.year"]], "close() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[182, "dbm.dumb.dumbdbm.close"]], "close() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[182, "dbm.gnu.gdbm.close"]], "close() (dbm.ndbm.ndbm \u7684\u65b9\u6cd5)": [[182, "dbm.ndbm.ndbm.close"]], "databases\uff08\u8cc7\u6599\u5eab\uff09": [[182, "index-0"]], "dbm": [[182, "module-dbm"]], "dbm.dumb": [[182, "module-dbm.dumb"]], "dbm.gnu": [[182, "module-dbm.gnu"], [328, "index-1"], [426, "index-32"]], "dbm.ndbm": [[182, "module-dbm.ndbm"], [328, "index-1"], [426, "index-32"]], "firstkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[182, "dbm.gnu.gdbm.firstkey"]], "library (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[182, "dbm.ndbm.library"]], "nextkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[182, "dbm.gnu.gdbm.nextkey"]], "open() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[182, "dbm.open"]], "open() (\u65bc dbm.dumb \u6a21\u7d44\u4e2d)": [[182, "dbm.dumb.open"]], "open() (\u65bc dbm.gnu \u6a21\u7d44\u4e2d)": [[182, "dbm.gnu.open"]], "open() (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[182, "dbm.ndbm.open"]], "open_flags (\u65bc dbm.gnu \u6a21\u7d44\u4e2d)": [[182, "dbm.gnu.open_flags"]], "reorganize() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[182, "dbm.gnu.gdbm.reorganize"]], "sync() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[182, "dbm.dumb.dumbdbm.sync"]], "sync() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[182, "dbm.gnu.gdbm.sync"]], "whichdb() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[182, "dbm.whichdb"]], "basiccontext (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.BasicContext"]], "clamped (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.Clamped"]], "context (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.Context"]], "decimal (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.Decimal"]], "decimalexception (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.DecimalException"]], "defaultcontext (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.DefaultContext"]], "divisionbyzero (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.DivisionByZero"]], "etiny() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.Etiny"]], "etop() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.Etop"]], "extendedcontext (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.ExtendedContext"]], "floatoperation (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.FloatOperation"]], "have_contextvar (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.HAVE_CONTEXTVAR"]], "have_threads (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.HAVE_THREADS"]], "inexact (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.Inexact"]], "invalidoperation (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.InvalidOperation"]], "max_emax (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.MAX_EMAX"]], "max_prec (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.MAX_PREC"]], "min_emin (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.MIN_EMIN"]], "min_etiny (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.MIN_ETINY"]], "overflow (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.Overflow"]], "round_05up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.ROUND_05UP"]], "round_ceiling (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.ROUND_CEILING"]], "round_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.ROUND_DOWN"]], "round_floor (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.ROUND_FLOOR"]], "round_half_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.ROUND_HALF_DOWN"]], "round_half_even (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.ROUND_HALF_EVEN"]], "round_half_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.ROUND_HALF_UP"]], "round_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.ROUND_UP"]], "rounded (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.Rounded"]], "subnormal (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.Subnormal"]], "underflow (decimal \u4e2d\u7684\u985e\u5225)": [[184, "decimal.Underflow"]], "abs() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.abs"]], "add() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.add"]], "adjusted() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.adjusted"]], "as_integer_ratio() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.as_integer_ratio"]], "as_tuple() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.as_tuple"]], "canonical() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.canonical"]], "canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.canonical"]], "clear_flags() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.clear_flags"]], "clear_traps() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.clear_traps"]], "compare() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.compare"]], "compare() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.compare"]], "compare_signal() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.compare_signal"]], "compare_signal() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.compare_signal"]], "compare_total() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.compare_total"]], "compare_total() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.compare_total"]], "compare_total_mag() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.compare_total_mag"]], "compare_total_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.compare_total_mag"]], "conjugate() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.conjugate"]], "copy() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.copy"]], "copy_abs() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.copy_abs"]], "copy_abs() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.copy_abs"]], "copy_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.copy_decimal"]], "copy_negate() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.copy_negate"]], "copy_negate() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.copy_negate"]], "copy_sign() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.copy_sign"]], "copy_sign() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.copy_sign"]], "create_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.create_decimal"]], "create_decimal_from_float() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.create_decimal_from_float"]], "decimal": [[184, "module-decimal"]], "divide() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.divide"]], "divide_int() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.divide_int"]], "divmod() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.divmod"]], "exp() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.exp"]], "exp() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.exp"]], "fma() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.fma"]], "fma() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.fma"]], "from_float() (decimal.decimal \u7684\u985e\u5225\u65b9\u6cd5)": [[184, "decimal.Decimal.from_float"]], "getcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.getcontext"]], "is_canonical() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.is_canonical"]], "is_canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.is_canonical"]], "is_finite() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.is_finite"]], "is_finite() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.is_finite"]], "is_infinite() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.is_infinite"]], "is_infinite() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.is_infinite"]], "is_nan() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.is_nan"]], "is_nan() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.is_nan"]], "is_normal() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.is_normal"]], "is_normal() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.is_normal"]], "is_qnan() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.is_qnan"]], "is_qnan() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.is_qnan"]], "is_signed() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.is_signed"]], "is_signed() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.is_signed"]], "is_snan() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.is_snan"]], "is_snan() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.is_snan"]], "is_subnormal() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.is_subnormal"]], "is_subnormal() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.is_subnormal"]], "is_zero() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.is_zero"]], "is_zero() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.is_zero"]], "ln() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.ln"]], "ln() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.ln"]], "localcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.localcontext"]], "log10() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.log10"]], "log10() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.log10"]], "logb() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.logb"]], "logb() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.logb"]], "logical_and() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.logical_and"]], "logical_and() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.logical_and"]], "logical_invert() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.logical_invert"]], "logical_invert() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.logical_invert"]], "logical_or() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.logical_or"]], "logical_or() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.logical_or"]], "logical_xor() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.logical_xor"]], "logical_xor() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.logical_xor"]], "max() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.max"]], "max() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.max"]], "max_mag() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.max_mag"]], "max_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.max_mag"]], "min() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.min"]], "min() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.min"]], "min_mag() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.min_mag"]], "min_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.min_mag"]], "minus() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.minus"]], "multiply() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.multiply"]], "next_minus() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.next_minus"]], "next_minus() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.next_minus"]], "next_plus() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.next_plus"]], "next_plus() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.next_plus"]], "next_toward() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.next_toward"]], "next_toward() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.next_toward"]], "normalize() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.normalize"]], "normalize() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.normalize"]], "number_class() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.number_class"]], "number_class() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.number_class"]], "plus() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.plus"]], "power() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.power"]], "quantize() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.quantize"]], "quantize() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.quantize"]], "radix() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.radix"]], "radix() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.radix"]], "remainder() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.remainder"]], "remainder_near() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.remainder_near"]], "remainder_near() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.remainder_near"]], "rotate() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.rotate"]], "rotate() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.rotate"]], "same_quantum() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.same_quantum"]], "same_quantum() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.same_quantum"]], "scaleb() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.scaleb"]], "scaleb() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.scaleb"]], "setcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[184, "decimal.setcontext"]], "shift() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.shift"]], "shift() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.shift"]], "sqrt() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.sqrt"]], "sqrt() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.sqrt"]], "subtract() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.subtract"]], "to_eng_string() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.to_eng_string"]], "to_eng_string() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.to_eng_string"]], "to_integral() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.to_integral"]], "to_integral_exact() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.to_integral_exact"]], "to_integral_exact() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.to_integral_exact"]], "to_integral_value() (decimal.decimal \u7684\u65b9\u6cd5)": [[184, "decimal.Decimal.to_integral_value"]], "to_sci_string() (decimal.context \u7684\u65b9\u6cd5)": [[184, "decimal.Context.to_sci_string"]], "dialog (tkinter.commondialog \u4e2d\u7684\u985e\u5225)": [[187, "tkinter.commondialog.Dialog"]], "dialog (tkinter.simpledialog \u4e2d\u7684\u985e\u5225)": [[187, "tkinter.simpledialog.Dialog"]], "directory (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[187, "tkinter.filedialog.Directory"]], "filedialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[187, "tkinter.filedialog.FileDialog"]], "loadfiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[187, "tkinter.filedialog.LoadFileDialog"]], "open (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[187, "tkinter.filedialog.Open"]], "saveas (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[187, "tkinter.filedialog.SaveAs"]], "savefiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[187, "tkinter.filedialog.SaveFileDialog"]], "askdirectory() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[187, "tkinter.filedialog.askdirectory"]], "askfloat() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[187, "tkinter.simpledialog.askfloat"]], "askinteger() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[187, "tkinter.simpledialog.askinteger"]], "askopenfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[187, "tkinter.filedialog.askopenfile"]], "askopenfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[187, "tkinter.filedialog.askopenfilename"]], "askopenfilenames() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[187, "tkinter.filedialog.askopenfilenames"]], "askopenfiles() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[187, "tkinter.filedialog.askopenfiles"]], "asksaveasfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[187, "tkinter.filedialog.asksaveasfile"]], "asksaveasfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[187, "tkinter.filedialog.asksaveasfilename"]], "askstring() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[187, "tkinter.simpledialog.askstring"]], "body() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[187, "tkinter.simpledialog.Dialog.body"]], "buttonbox() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[187, "tkinter.simpledialog.Dialog.buttonbox"]], "cancel_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.cancel_command"]], "dirs_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.dirs_double_event"]], "dirs_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.dirs_select_event"]], "files_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.files_double_event"]], "files_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.files_select_event"]], "filter_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.filter_command"]], "get_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.get_filter"]], "get_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.get_selection"]], "go() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.go"]], "ok_command() (tkinter.filedialog.loadfiledialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.LoadFileDialog.ok_command"]], "ok_command() (tkinter.filedialog.savefiledialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.SaveFileDialog.ok_command"]], "ok_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.ok_event"]], "quit() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.quit"]], "set_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.set_filter"]], "set_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[187, "tkinter.filedialog.FileDialog.set_selection"]], "show() (tkinter.commondialog.dialog \u7684\u65b9\u6cd5)": [[187, "tkinter.commondialog.Dialog.show"]], "tkinter.commondialog": [[187, "module-tkinter.commondialog"]], "tkinter.filedialog": [[187, "module-tkinter.filedialog"]], "tkinter.simpledialog": [[187, "module-tkinter.simpledialog"]], "differ (difflib \u4e2d\u7684\u985e\u5225)": [[188, "difflib.Differ"]], "htmldiff (difflib \u4e2d\u7684\u985e\u5225)": [[188, "difflib.HtmlDiff"]], "is_character_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[188, "difflib.IS_CHARACTER_JUNK"]], "is_line_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[188, "difflib.IS_LINE_JUNK"]], "sequencematcher (difflib \u4e2d\u7684\u985e\u5225)": [[188, "difflib.SequenceMatcher"]], "__init__() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[188, "difflib.HtmlDiff.__init__"]], "compare() (difflib.differ \u7684\u65b9\u6cd5)": [[188, "difflib.Differ.compare"]], "context_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[188, "difflib.context_diff"]], "diff_bytes() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[188, "difflib.diff_bytes"]], "difflib": [[188, "module-difflib"]], "find_longest_match() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[188, "difflib.SequenceMatcher.find_longest_match"]], "get_close_matches() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[188, "difflib.get_close_matches"]], "get_grouped_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[188, "difflib.SequenceMatcher.get_grouped_opcodes"]], "get_matching_blocks() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[188, "difflib.SequenceMatcher.get_matching_blocks"]], "get_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[188, "difflib.SequenceMatcher.get_opcodes"]], "make_file() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[188, "difflib.HtmlDiff.make_file"]], "make_table() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[188, "difflib.HtmlDiff.make_table"]], "ndiff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[188, "difflib.ndiff"]], "quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[188, "difflib.SequenceMatcher.quick_ratio"]], "ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[188, "difflib.SequenceMatcher.ratio"]], "real_quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[188, "difflib.SequenceMatcher.real_quick_ratio"]], "restore() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[188, "difflib.restore"]], "set_seq1() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[188, "difflib.SequenceMatcher.set_seq1"]], "set_seq2() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[188, "difflib.SequenceMatcher.set_seq2"]], "set_seqs() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[188, "difflib.SequenceMatcher.set_seqs"]], "unified_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[188, "difflib.unified_diff"]], "before_async_with (opcode)": [[189, "opcode-BEFORE_ASYNC_WITH"]], "before_with (opcode)": [[189, "opcode-BEFORE_WITH"]], "binary_op (opcode)": [[189, "opcode-BINARY_OP"]], "binary_slice (opcode)": [[189, "opcode-BINARY_SLICE"]], "binary_subscr (opcode)": [[189, "opcode-BINARY_SUBSCR"]], "build_const_key_map (opcode)": [[189, "opcode-BUILD_CONST_KEY_MAP"]], "build_list (opcode)": [[189, "opcode-BUILD_LIST"]], "build_map (opcode)": [[189, "opcode-BUILD_MAP"]], "build_set (opcode)": [[189, "opcode-BUILD_SET"]], "build_slice (opcode)": [[189, "opcode-BUILD_SLICE"]], "build_string (opcode)": [[189, "opcode-BUILD_STRING"]], "build_tuple (opcode)": [[189, "opcode-BUILD_TUPLE"]], "bytecode (dis \u4e2d\u7684\u985e\u5225)": [[189, "dis.Bytecode"]], "bytecode.codeobj (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Bytecode.codeobj"]], "bytecode.first_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Bytecode.first_line"]], "cache (opcode)": [[189, "opcode-CACHE"]], "call (opcode)": [[189, "opcode-CALL"]], "call_function_ex (opcode)": [[189, "opcode-CALL_FUNCTION_EX"]], "call_intrinsic_1 (opcode)": [[189, "opcode-CALL_INTRINSIC_1"]], "call_intrinsic_2 (opcode)": [[189, "opcode-CALL_INTRINSIC_2"]], "check_eg_match (opcode)": [[189, "opcode-CHECK_EG_MATCH"]], "check_exc_match (opcode)": [[189, "opcode-CHECK_EXC_MATCH"]], "cleanup_throw (opcode)": [[189, "opcode-CLEANUP_THROW"]], "compare_op (opcode)": [[189, "opcode-COMPARE_OP"]], "contains_op (opcode)": [[189, "opcode-CONTAINS_OP"]], "copy (opcode)": [[189, "opcode-COPY"]], "copy_free_vars (opcode)": [[189, "opcode-COPY_FREE_VARS"]], "delete_attr (opcode)": [[189, "opcode-DELETE_ATTR"]], "delete_deref (opcode)": [[189, "opcode-DELETE_DEREF"]], "delete_fast (opcode)": [[189, "opcode-DELETE_FAST"]], "delete_global (opcode)": [[189, "opcode-DELETE_GLOBAL"]], "delete_name (opcode)": [[189, "opcode-DELETE_NAME"]], "delete_subscr (opcode)": [[189, "opcode-DELETE_SUBSCR"]], "dict_merge (opcode)": [[189, "opcode-DICT_MERGE"]], "dict_update (opcode)": [[189, "opcode-DICT_UPDATE"]], "end_async_for (opcode)": [[189, "opcode-END_ASYNC_FOR"]], "end_for (opcode)": [[189, "opcode-END_FOR"]], "end_send (opcode)": [[189, "opcode-END_SEND"]], "extended_arg (opcode)": [[189, "opcode-EXTENDED_ARG"]], "format_value (opcode)": [[189, "opcode-FORMAT_VALUE"]], "for_iter (opcode)": [[189, "opcode-FOR_ITER"]], "get_aiter (opcode)": [[189, "opcode-GET_AITER"]], "get_anext (opcode)": [[189, "opcode-GET_ANEXT"]], "get_awaitable (opcode)": [[189, "opcode-GET_AWAITABLE"]], "get_iter (opcode)": [[189, "opcode-GET_ITER"]], "get_len (opcode)": [[189, "opcode-GET_LEN"]], "get_yield_from_iter (opcode)": [[189, "opcode-GET_YIELD_FROM_ITER"]], "have_argument (opcode)": [[189, "opcode-HAVE_ARGUMENT"]], "import_from (opcode)": [[189, "opcode-IMPORT_FROM"]], "import_name (opcode)": [[189, "opcode-IMPORT_NAME"]], "is_op (opcode)": [[189, "opcode-IS_OP"]], "instruction (dis \u4e2d\u7684\u985e\u5225)": [[189, "dis.Instruction"]], "instruction.arg (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Instruction.arg"]], "instruction.argrepr (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Instruction.argrepr"]], "instruction.argval (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Instruction.argval"]], "instruction.is_jump_target (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Instruction.is_jump_target"]], "instruction.offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Instruction.offset"]], "instruction.opcode (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Instruction.opcode"]], "instruction.opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Instruction.opname"]], "instruction.positions (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Instruction.positions"]], "instruction.starts_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Instruction.starts_line"]], "jump (opcode)": [[189, "opcode-JUMP"]], "jump_backward (opcode)": [[189, "opcode-JUMP_BACKWARD"]], "jump_backward_no_interrupt (opcode)": [[189, "opcode-JUMP_BACKWARD_NO_INTERRUPT"]], "jump_forward (opcode)": [[189, "opcode-JUMP_FORWARD"]], "jump_no_interrupt (opcode)": [[189, "opcode-JUMP_NO_INTERRUPT"]], "kw_names (opcode)": [[189, "opcode-KW_NAMES"]], "list_append (opcode)": [[189, "opcode-LIST_APPEND"]], "list_extend (opcode)": [[189, "opcode-LIST_EXTEND"]], "load_assertion_error (opcode)": [[189, "opcode-LOAD_ASSERTION_ERROR"]], "load_attr (opcode)": [[189, "opcode-LOAD_ATTR"]], "load_build_class (opcode)": [[189, "opcode-LOAD_BUILD_CLASS"]], "load_closure (opcode)": [[189, "opcode-LOAD_CLOSURE"]], "load_const (opcode)": [[189, "opcode-LOAD_CONST"]], "load_deref (opcode)": [[189, "opcode-LOAD_DEREF"]], "load_fast (opcode)": [[189, "opcode-LOAD_FAST"]], "load_fast_and_clear (opcode)": [[189, "opcode-LOAD_FAST_AND_CLEAR"]], "load_fast_check (opcode)": [[189, "opcode-LOAD_FAST_CHECK"]], "load_from_dict_or_deref (opcode)": [[189, "opcode-LOAD_FROM_DICT_OR_DEREF"]], "load_from_dict_or_globals (opcode)": [[189, "opcode-LOAD_FROM_DICT_OR_GLOBALS"]], "load_global (opcode)": [[189, "opcode-LOAD_GLOBAL"]], "load_locals (opcode)": [[189, "opcode-LOAD_LOCALS"]], "load_method (opcode)": [[189, "opcode-LOAD_METHOD"]], "load_name (opcode)": [[189, "opcode-LOAD_NAME"]], "load_super_attr (opcode)": [[189, "opcode-LOAD_SUPER_ATTR"]], "make_cell (opcode)": [[189, "opcode-MAKE_CELL"]], "make_function (opcode)": [[189, "opcode-MAKE_FUNCTION"]], "map_add (opcode)": [[189, "opcode-MAP_ADD"]], "match_class (opcode)": [[189, "opcode-MATCH_CLASS"]], "match_keys (opcode)": [[189, "opcode-MATCH_KEYS"]], "match_mapping (opcode)": [[189, "opcode-MATCH_MAPPING"]], "match_sequence (opcode)": [[189, "opcode-MATCH_SEQUENCE"]], "nop (opcode)": [[189, "opcode-NOP"]], "pep 626": [[189, "index-0"], [426, "index-62"], [470, "index-84"], [472, "index-30"], [481, "index-41"]], "pop_block (opcode)": [[189, "opcode-POP_BLOCK"]], "pop_except (opcode)": [[189, "opcode-POP_EXCEPT"]], "pop_jump_if_false (opcode)": [[189, "opcode-POP_JUMP_IF_FALSE"]], "pop_jump_if_none (opcode)": [[189, "opcode-POP_JUMP_IF_NONE"]], "pop_jump_if_not_none (opcode)": [[189, "opcode-POP_JUMP_IF_NOT_NONE"]], "pop_jump_if_true (opcode)": [[189, "opcode-POP_JUMP_IF_TRUE"]], "pop_top (opcode)": [[189, "opcode-POP_TOP"]], "push_exc_info (opcode)": [[189, "opcode-PUSH_EXC_INFO"]], "push_null (opcode)": [[189, "opcode-PUSH_NULL"]], "positions (dis \u4e2d\u7684\u985e\u5225)": [[189, "dis.Positions"]], "positions.col_offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Positions.col_offset"]], "positions.end_col_offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Positions.end_col_offset"]], "positions.end_lineno (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Positions.end_lineno"]], "positions.lineno (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.Positions.lineno"]], "raise_varargs (opcode)": [[189, "opcode-RAISE_VARARGS"]], "reraise (opcode)": [[189, "opcode-RERAISE"]], "resume (opcode)": [[189, "opcode-RESUME"]], "return_const (opcode)": [[189, "opcode-RETURN_CONST"]], "return_generator (opcode)": [[189, "opcode-RETURN_GENERATOR"]], "return_value (opcode)": [[189, "opcode-RETURN_VALUE"]], "send (opcode)": [[189, "opcode-SEND"]], "setup_annotations (opcode)": [[189, "opcode-SETUP_ANNOTATIONS"]], "setup_cleanup (opcode)": [[189, "opcode-SETUP_CLEANUP"]], "setup_finally (opcode)": [[189, "opcode-SETUP_FINALLY"]], "setup_with (opcode)": [[189, "opcode-SETUP_WITH"]], "set_add (opcode)": [[189, "opcode-SET_ADD"]], "set_update (opcode)": [[189, "opcode-SET_UPDATE"]], "store_attr (opcode)": [[189, "opcode-STORE_ATTR"]], "store_deref (opcode)": [[189, "opcode-STORE_DEREF"]], "store_fast (opcode)": [[189, "opcode-STORE_FAST"]], "store_global (opcode)": [[189, "opcode-STORE_GLOBAL"]], "store_name (opcode)": [[189, "opcode-STORE_NAME"]], "store_slice (opcode)": [[189, "opcode-STORE_SLICE"]], "store_subscr (opcode)": [[189, "opcode-STORE_SUBSCR"]], "swap (opcode)": [[189, "opcode-SWAP"]], "unary_invert (opcode)": [[189, "opcode-UNARY_INVERT"]], "unary_negative (opcode)": [[189, "opcode-UNARY_NEGATIVE"]], "unary_not (opcode)": [[189, "opcode-UNARY_NOT"]], "unpack_ex (opcode)": [[189, "opcode-UNPACK_EX"]], "unpack_sequence (opcode)": [[189, "opcode-UNPACK_SEQUENCE"]], "with_except_start (opcode)": [[189, "opcode-WITH_EXCEPT_START"]], "yield_value (opcode)": [[189, "opcode-YIELD_VALUE"]], "cmp_op (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.cmp_op"]], "code_info() (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.code_info"]], "dis": [[189, "module-dis"]], "dis \u547d\u4ee4\u5217\u9078\u9805": [[189, "cmdoption-dis-h"]], "dis() (dis.bytecode \u7684\u65b9\u6cd5)": [[189, "dis.Bytecode.dis"]], "dis() (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.dis"]], "disassemble() (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.disassemble"]], "disco() (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.disco"]], "distb() (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.distb"]], "findlabels() (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.findlabels"]], "findlinestarts() (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.findlinestarts"]], "from_traceback() (dis.bytecode \u7684\u985e\u5225\u65b9\u6cd5)": [[189, "dis.Bytecode.from_traceback"]], "get_instructions() (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.get_instructions"]], "hasarg (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.hasarg"]], "hascompare (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.hascompare"]], "hasconst (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.hasconst"]], "hasexc (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.hasexc"]], "hasfree (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.hasfree"]], "hasjabs (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.hasjabs"]], "hasjrel (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.hasjrel"]], "haslocal (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.haslocal"]], "hasname (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.hasname"]], "info() (dis.bytecode \u7684\u65b9\u6cd5)": [[189, "dis.Bytecode.info"]], "opmap (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.opmap"]], "opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.opname"]], "show_code() (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.show_code"]], "stack_effect() (\u65bc dis \u6a21\u7d44\u4e2d)": [[189, "dis.stack_effect"]], "# \uff08\u4e95\u5b57\u865f\uff09": [[191, "index-4"], [317, "index-38"], [332, "index-2"], [342, "index-37"], [342, "index-47"], [343, "index-7"], [433, "index-4"], [433, "index-5"]], "- \uff08\u6e1b\u865f\uff09": [[191, "index-4"], [218, "index-2"], [229, "index-1"], [317, "index-11"], [342, "index-13"], [342, "index-37"], [342, "index-47"], [343, "index-4"], [428, "index-60"], [428, "index-70"]], "<blankline>": [[191, "index-2"]], "comparison_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.COMPARISON_FLAGS"]], "dont_accept_blankline (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.DONT_ACCEPT_BLANKLINE"]], "dont_accept_true_for_1 (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.DONT_ACCEPT_TRUE_FOR_1"]], "debugrunner (doctest \u4e2d\u7684\u985e\u5225)": [[191, "doctest.DebugRunner"]], "docfilesuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.DocFileSuite"]], "doctest (doctest \u4e2d\u7684\u985e\u5225)": [[191, "doctest.DocTest"]], "doctestfailure": [[191, "doctest.DocTestFailure"]], "doctestfinder (doctest \u4e2d\u7684\u985e\u5225)": [[191, "doctest.DocTestFinder"]], "doctestparser (doctest \u4e2d\u7684\u985e\u5225)": [[191, "doctest.DocTestParser"]], "doctestrunner (doctest \u4e2d\u7684\u985e\u5225)": [[191, "doctest.DocTestRunner"]], "doctestsuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.DocTestSuite"]], "ellipsis (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.ELLIPSIS"]], "example (doctest \u4e2d\u7684\u985e\u5225)": [[191, "doctest.Example"]], "fail_fast (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.FAIL_FAST"]], "ignore_exception_detail (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.IGNORE_EXCEPTION_DETAIL"]], "normalize_whitespace (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.NORMALIZE_WHITESPACE"]], "outputchecker (doctest \u4e2d\u7684\u985e\u5225)": [[191, "doctest.OutputChecker"]], "reporting_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.REPORTING_FLAGS"]], "report_cdiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.REPORT_CDIFF"]], "report_ndiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.REPORT_NDIFF"]], "report_only_first_failure (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.REPORT_ONLY_FIRST_FAILURE"]], "report_udiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.REPORT_UDIFF"]], "skip (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.SKIP"]], "unexpectedexception": [[191, "doctest.UnexpectedException"]], "check_output() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[191, "doctest.OutputChecker.check_output"]], "debug() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.debug"]], "debug_src() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.debug_src"]], "docstring (doctest.doctest \u7684\u5c6c\u6027)": [[191, "doctest.DocTest.docstring"]], "doctest": [[191, "module-doctest"]], "example (doctest.doctestfailure \u7684\u5c6c\u6027)": [[191, "doctest.DocTestFailure.example"]], "example (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[191, "doctest.UnexpectedException.example"]], "examples (doctest.doctest \u7684\u5c6c\u6027)": [[191, "doctest.DocTest.examples"]], "exc_info (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[191, "doctest.UnexpectedException.exc_info"]], "exc_msg (doctest.example \u7684\u5c6c\u6027)": [[191, "doctest.Example.exc_msg"]], "failureexception": [[191, "doctest.failureException"]], "filename (doctest.doctest \u7684\u5c6c\u6027)": [[191, "doctest.DocTest.filename"]], "find() (doctest.doctestfinder \u7684\u65b9\u6cd5)": [[191, "doctest.DocTestFinder.find"]], "get_doctest() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[191, "doctest.DocTestParser.get_doctest"]], "get_examples() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[191, "doctest.DocTestParser.get_examples"]], "globs (doctest.doctest \u7684\u5c6c\u6027)": [[191, "doctest.DocTest.globs"]], "got (doctest.doctestfailure \u7684\u5c6c\u6027)": [[191, "doctest.DocTestFailure.got"]], "indent (doctest.example \u7684\u5c6c\u6027)": [[191, "doctest.Example.indent"]], "interpreter prompt\uff08\u76f4\u8b6f\u5668\u63d0\u793a\uff09": [[191, "index-0"], [350, "index-27"]], "lineno (doctest.doctest \u7684\u5c6c\u6027)": [[191, "doctest.DocTest.lineno"]], "lineno (doctest.example \u7684\u5c6c\u6027)": [[191, "doctest.Example.lineno"]], "marker\uff08\u6a19\u8a18\uff09": [[191, "index-1"], [379, "index-1"]], "name (doctest.doctest \u7684\u5c6c\u6027)": [[191, "doctest.DocTest.name"]], "options (doctest.example \u7684\u5c6c\u6027)": [[191, "doctest.Example.options"]], "output_difference() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[191, "doctest.OutputChecker.output_difference"]], "parse() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[191, "doctest.DocTestParser.parse"]], "register_optionflag() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.register_optionflag"]], "report_failure() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[191, "doctest.DocTestRunner.report_failure"]], "report_start() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[191, "doctest.DocTestRunner.report_start"]], "report_success() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[191, "doctest.DocTestRunner.report_success"]], "report_unexpected_exception() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[191, "doctest.DocTestRunner.report_unexpected_exception"]], "run() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[191, "doctest.DocTestRunner.run"]], "run_docstring_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.run_docstring_examples"]], "script_from_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.script_from_examples"]], "set_unittest_reportflags() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.set_unittest_reportflags"]], "source (doctest.example \u7684\u5c6c\u6027)": [[191, "doctest.Example.source"]], "summarize() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[191, "doctest.DocTestRunner.summarize"]], "test (doctest.doctestfailure \u7684\u5c6c\u6027)": [[191, "doctest.DocTestFailure.test"]], "test (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[191, "doctest.UnexpectedException.test"]], "testfile() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.testfile"]], "testmod() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.testmod"]], "testsource() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[191, "doctest.testsource"]], "want (doctest.example \u7684\u5c6c\u6027)": [[191, "doctest.Example.want"]], "\u65bc doctests \u4e2d": [[191, "index-3"], [191, "index-4"]], "rfc 2046": [[192, "index-4"], [195, "index-0"], [200, "index-5"]], "rfc 2047": [[192, "index-5"], [200, "index-11"], [200, "index-13"], [200, "index-6"], [200, "index-8"], [201, "index-1"], [201, "index-4"], [201, "index-6"], [206, "index-3"], [206, "index-4"], [207, "index-1"], [473, "index-11"], [473, "index-8"]], "rfc 2183": [[192, "index-6"], [194, "index-11"], [203, "index-10"]], "rfc 2231": [[192, "index-7"], [194, "index-10"], [194, "index-2"], [194, "index-3"], [194, "index-7"], [194, "index-8"], [200, "index-7"], [203, "index-4"], [203, "index-5"], [203, "index-9"], [207, "index-5"], [207, "index-6"], [207, "index-7"], [207, "index-8"], [207, "index-9"]], "rfc 2821": [[192, "index-0"]], "rfc 5322": [[192, "index-1"], [194, "index-0"], [197, "index-0"], [199, "index-0"], [199, "index-1"], [201, "index-0"], [201, "index-11"], [201, "index-12"], [201, "index-14"], [201, "index-2"], [201, "index-3"], [201, "index-5"], [201, "index-7"], [201, "index-8"], [203, "index-0"], [203, "index-2"], [205, "index-0"], [206, "index-0"], [206, "index-1"], [206, "index-2"], [206, "index-5"], [206, "index-6"], [206, "index-9"], [333, "index-11"]], "rfc 6532": [[192, "index-2"], [203, "index-1"], [205, "index-1"], [206, "index-7"], [476, "index-31"]], "email": [[192, "module-email"]], "charset (email.charset \u4e2d\u7684\u985e\u5225)": [[193, "email.charset.Charset"]], "__eq__() (email.charset.charset \u7684\u65b9\u6cd5)": [[193, "email.charset.Charset.__eq__"]], "__ne__() (email.charset.charset \u7684\u65b9\u6cd5)": [[193, "email.charset.Charset.__ne__"]], "__str__() (email.charset.charset \u7684\u65b9\u6cd5)": [[193, "email.charset.Charset.__str__"]], "add_alias() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[193, "email.charset.add_alias"]], "add_charset() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[193, "email.charset.add_charset"]], "add_codec() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[193, "email.charset.add_codec"]], "body_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[193, "email.charset.Charset.body_encode"]], "body_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[193, "email.charset.Charset.body_encoding"]], "email.charset": [[193, "module-email.charset"]], "get_body_encoding() (email.charset.charset \u7684\u65b9\u6cd5)": [[193, "email.charset.Charset.get_body_encoding"]], "get_output_charset() (email.charset.charset \u7684\u65b9\u6cd5)": [[193, "email.charset.Charset.get_output_charset"]], "header_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[193, "email.charset.Charset.header_encode"]], "header_encode_lines() (email.charset.charset \u7684\u65b9\u6cd5)": [[193, "email.charset.Charset.header_encode_lines"]], "header_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[193, "email.charset.Charset.header_encoding"]], "input_charset (email.charset.charset \u7684\u5c6c\u6027)": [[193, "email.charset.Charset.input_charset"]], "input_codec (email.charset.charset \u7684\u5c6c\u6027)": [[193, "email.charset.Charset.input_codec"]], "output_charset (email.charset.charset \u7684\u5c6c\u6027)": [[193, "email.charset.Charset.output_charset"]], "output_codec (email.charset.charset \u7684\u5c6c\u6027)": [[193, "email.charset.Charset.output_codec"]], "message (email.message \u4e2d\u7684\u985e\u5225)": [[194, "email.message.Message"]], "rfc 2822": [[194, "index-1"], [200, "index-0"], [200, "index-10"], [200, "index-12"], [200, "index-2"], [200, "index-3"], [200, "index-9"], [207, "index-0"], [207, "index-10"], [207, "index-2"], [207, "index-3"], [207, "index-4"], [240, "index-2"], [243, "index-2"], [269, "index-0"], [364, "index-10"], [364, "index-22"], [449, "index-3"], [462, "index-20"]], "__bytes__() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.__bytes__"]], "__contains__() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.__contains__"]], "__delitem__() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.__delitem__"]], "__getitem__() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.__getitem__"]], "__len__() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.__len__"]], "__setitem__() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.__setitem__"]], "__str__() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.__str__"]], "add_header() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.add_header"]], "as_bytes() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.as_bytes"]], "as_string() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.as_string"]], "attach() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.attach"]], "defects (email.message.message \u7684\u5c6c\u6027)": [[194, "email.message.Message.defects"]], "del_param() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.del_param"]], "epilogue (email.message.message \u7684\u5c6c\u6027)": [[194, "email.message.Message.epilogue"]], "get() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get"]], "get_all() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_all"]], "get_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_boundary"]], "get_charset() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_charset"]], "get_charsets() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_charsets"]], "get_content_charset() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_content_charset"]], "get_content_disposition() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_content_disposition"]], "get_content_maintype() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_content_maintype"]], "get_content_subtype() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_content_subtype"]], "get_content_type() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_content_type"]], "get_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_default_type"]], "get_filename() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_filename"]], "get_param() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_param"]], "get_params() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_params"]], "get_payload() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_payload"]], "get_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.get_unixfrom"]], "is_multipart() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.is_multipart"]], "items() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.items"]], "keys() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.keys"]], "preamble (email.message.message \u7684\u5c6c\u6027)": [[194, "email.message.Message.preamble"]], "replace_header() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.replace_header"]], "set_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.set_boundary"]], "set_charset() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.set_charset"]], "set_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.set_default_type"]], "set_param() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.set_param"]], "set_payload() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.set_payload"]], "set_type() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.set_type"]], "set_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.set_unixfrom"]], "values() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.values"]], "walk() (email.message.message \u7684\u65b9\u6cd5)": [[194, "email.message.Message.walk"]], "contentmanager (email.contentmanager \u4e2d\u7684\u985e\u5225)": [[195, "email.contentmanager.ContentManager"]], "add_get_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[195, "email.contentmanager.ContentManager.add_get_handler"]], "add_set_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[195, "email.contentmanager.ContentManager.add_set_handler"]], "email.contentmanager": [[195, "module-email.contentmanager"]], "get_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[195, "email.contentmanager.ContentManager.get_content"]], "get_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[195, "email.contentmanager.get_content"]], "raw_data_manager (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[195, "email.contentmanager.raw_data_manager"]], "set_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[195, "email.contentmanager.ContentManager.set_content"]], "set_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[195, "email.contentmanager.set_content"]], "email.encoders": [[196, "module-email.encoders"]], "encode_7or8bit() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[196, "email.encoders.encode_7or8bit"]], "encode_base64() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[196, "email.encoders.encode_base64"]], "encode_noop() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[196, "email.encoders.encode_noop"]], "encode_quopri() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[196, "email.encoders.encode_quopri"]], "boundaryerror": [[197, "email.errors.BoundaryError"]], "headerdefect": [[197, "email.errors.HeaderDefect"]], "headerparseerror": [[197, "email.errors.HeaderParseError"]], "messagedefect": [[197, "email.errors.MessageDefect"]], "messageerror": [[197, "email.errors.MessageError"]], "messageparseerror": [[197, "email.errors.MessageParseError"]], "multipartconversionerror": [[197, "email.errors.MultipartConversionError"]], "email.errors": [[197, "module-email.errors"]], "rfc 822": [[198, "index-0"], [200, "index-1"], [228, "index-9"], [240, "index-6"], [333, "index-10"], [333, "index-12"], [333, "index-6"], [333, "index-9"], [364, "index-19"], [364, "index-20"], [462, "index-21"]], "bytesgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[199, "email.generator.BytesGenerator"]], "decodedgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[199, "email.generator.DecodedGenerator"]], "generator (email.generator \u4e2d\u7684\u985e\u5225)": [[199, "email.generator.Generator"]], "clone() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[199, "email.generator.BytesGenerator.clone"]], "clone() (email.generator.generator \u7684\u65b9\u6cd5)": [[199, "email.generator.Generator.clone"]], "email.generator": [[199, "module-email.generator"]], "flatten() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[199, "email.generator.BytesGenerator.flatten"]], "flatten() (email.generator.generator \u7684\u65b9\u6cd5)": [[199, "email.generator.Generator.flatten"]], "write() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[199, "email.generator.BytesGenerator.write"]], "write() (email.generator.generator \u7684\u65b9\u6cd5)": [[199, "email.generator.Generator.write"]], "header (email.header \u4e2d\u7684\u985e\u5225)": [[200, "email.header.Header"]], "__eq__() (email.header.header \u7684\u65b9\u6cd5)": [[200, "email.header.Header.__eq__"]], "__ne__() (email.header.header \u7684\u65b9\u6cd5)": [[200, "email.header.Header.__ne__"]], "__str__() (email.header.header \u7684\u65b9\u6cd5)": [[200, "email.header.Header.__str__"]], "append() (email.header.header \u7684\u65b9\u6cd5)": [[200, "email.header.Header.append"]], "decode_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[200, "email.header.decode_header"]], "email.header": [[200, "module-email.header"]], "encode() (email.header.header \u7684\u65b9\u6cd5)": [[200, "email.header.Header.encode"]], "make_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[200, "email.header.make_header"]], "address (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.Address"]], "addressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.AddressHeader"]], "baseheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.BaseHeader"]], "contentdispositionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.ContentDispositionHeader"]], "contenttransferencoding (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.ContentTransferEncoding"]], "contenttypeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.ContentTypeHeader"]], "dateheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.DateHeader"]], "group (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.Group"]], "headerregistry (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.HeaderRegistry"]], "mimeversionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.MIMEVersionHeader"]], "parameterizedmimeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.ParameterizedMIMEHeader"]], "rfc 5321": [[201, "index-13"], [474, "index-26"]], "singleaddressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.SingleAddressHeader"]], "unstructuredheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[201, "email.headerregistry.UnstructuredHeader"]], "__call__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[201, "email.headerregistry.HeaderRegistry.__call__"]], "__getitem__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[201, "email.headerregistry.HeaderRegistry.__getitem__"]], "__str__() (email.headerregistry.address \u7684\u65b9\u6cd5)": [[201, "email.headerregistry.Address.__str__"]], "__str__() (email.headerregistry.group \u7684\u65b9\u6cd5)": [[201, "email.headerregistry.Group.__str__"]], "addr_spec (email.headerregistry.address \u7684\u5c6c\u6027)": [[201, "email.headerregistry.Address.addr_spec"]], "address (email.headerregistry.singleaddressheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.SingleAddressHeader.address"]], "addresses (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.AddressHeader.addresses"]], "addresses (email.headerregistry.group \u7684\u5c6c\u6027)": [[201, "email.headerregistry.Group.addresses"]], "content_disposition (email.headerregistry.contentdispositionheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.ContentDispositionHeader.content_disposition"]], "content_type (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.ContentTypeHeader.content_type"]], "cte (email.headerregistry.contenttransferencoding \u7684\u5c6c\u6027)": [[201, "email.headerregistry.ContentTransferEncoding.cte"]], "datetime (email.headerregistry.dateheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.DateHeader.datetime"]], "defects (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.BaseHeader.defects"]], "display_name (email.headerregistry.address \u7684\u5c6c\u6027)": [[201, "email.headerregistry.Address.display_name"]], "display_name (email.headerregistry.group \u7684\u5c6c\u6027)": [[201, "email.headerregistry.Group.display_name"]], "domain (email.headerregistry.address \u7684\u5c6c\u6027)": [[201, "email.headerregistry.Address.domain"]], "email.headerregistry": [[201, "module-email.headerregistry"]], "fold() (email.headerregistry.baseheader \u7684\u65b9\u6cd5)": [[201, "email.headerregistry.BaseHeader.fold"]], "groups (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.AddressHeader.groups"]], "maintype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.ContentTypeHeader.maintype"]], "major (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.MIMEVersionHeader.major"]], "map_to_type() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[201, "email.headerregistry.HeaderRegistry.map_to_type"]], "max_count (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.BaseHeader.max_count"]], "minor (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.MIMEVersionHeader.minor"]], "name (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.BaseHeader.name"]], "params (email.headerregistry.parameterizedmimeheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.ParameterizedMIMEHeader.params"]], "subtype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.ContentTypeHeader.subtype"]], "username (email.headerregistry.address \u7684\u5c6c\u6027)": [[201, "email.headerregistry.Address.username"]], "version (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[201, "email.headerregistry.MIMEVersionHeader.version"]], "_structure() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[202, "email.iterators._structure"]], "body_line_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[202, "email.iterators.body_line_iterator"]], "email.iterators": [[202, "module-email.iterators"]], "typed_subpart_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[202, "email.iterators.typed_subpart_iterator"]], "emailmessage (email.message \u4e2d\u7684\u985e\u5225)": [[203, "email.message.EmailMessage"]], "mimepart (email.message \u4e2d\u7684\u985e\u5225)": [[203, "email.message.MIMEPart"]], "rfc 6531": [[203, "index-3"], [206, "index-8"], [333, "index-3"], [476, "index-32"], [476, "index-38"], [476, "index-39"]], "__bytes__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.__bytes__"]], "__contains__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.__contains__"]], "__delitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.__delitem__"]], "__getitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.__getitem__"]], "__len__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.__len__"]], "__setitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.__setitem__"]], "__str__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.__str__"]], "add_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.add_alternative"]], "add_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.add_attachment"]], "add_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.add_header"]], "add_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.add_related"]], "as_bytes() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.as_bytes"]], "as_string() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.as_string"]], "clear() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.clear"]], "clear_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.clear_content"]], "defects (email.message.emailmessage \u7684\u5c6c\u6027)": [[203, "email.message.EmailMessage.defects"]], "del_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.del_param"]], "email.message": [[203, "module-email.message"]], "epilogue (email.message.emailmessage \u7684\u5c6c\u6027)": [[203, "email.message.EmailMessage.epilogue"]], "get() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get"]], "get_all() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_all"]], "get_body() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_body"]], "get_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_boundary"]], "get_charsets() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_charsets"]], "get_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_content"]], "get_content_charset() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_content_charset"]], "get_content_disposition() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_content_disposition"]], "get_content_maintype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_content_maintype"]], "get_content_subtype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_content_subtype"]], "get_content_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_content_type"]], "get_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_default_type"]], "get_filename() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_filename"]], "get_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.get_unixfrom"]], "is_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.is_attachment"]], "is_multipart() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.is_multipart"]], "items() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.items"]], "iter_attachments() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.iter_attachments"]], "iter_parts() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.iter_parts"]], "keys() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.keys"]], "make_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.make_alternative"]], "make_mixed() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.make_mixed"]], "make_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.make_related"]], "preamble (email.message.emailmessage \u7684\u5c6c\u6027)": [[203, "email.message.EmailMessage.preamble"]], "replace_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.replace_header"]], "set_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.set_boundary"]], "set_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.set_content"]], "set_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.set_default_type"]], "set_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.set_param"]], "set_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.set_unixfrom"]], "values() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.values"]], "walk() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[203, "email.message.EmailMessage.walk"]], "mimeapplication (email.mime.application \u4e2d\u7684\u985e\u5225)": [[204, "email.mime.application.MIMEApplication"]], "mimeaudio (email.mime.audio \u4e2d\u7684\u985e\u5225)": [[204, "email.mime.audio.MIMEAudio"]], "mimebase (email.mime.base \u4e2d\u7684\u985e\u5225)": [[204, "email.mime.base.MIMEBase"]], "mimeimage (email.mime.image \u4e2d\u7684\u985e\u5225)": [[204, "email.mime.image.MIMEImage"]], "mimemessage (email.mime.message \u4e2d\u7684\u985e\u5225)": [[204, "email.mime.message.MIMEMessage"]], "mimemultipart (email.mime.multipart \u4e2d\u7684\u985e\u5225)": [[204, "email.mime.multipart.MIMEMultipart"]], "mimenonmultipart (email.mime.nonmultipart \u4e2d\u7684\u985e\u5225)": [[204, "email.mime.nonmultipart.MIMENonMultipart"]], "mimetext (email.mime.text \u4e2d\u7684\u985e\u5225)": [[204, "email.mime.text.MIMEText"]], "email.mime": [[204, "module-email.mime"]], "email.mime.application": [[204, "module-email.mime.application"]], "email.mime.audio": [[204, "module-email.mime.audio"]], "email.mime.base": [[204, "module-email.mime.base"]], "email.mime.image": [[204, "module-email.mime.image"]], "email.mime.message": [[204, "module-email.mime.message"]], "email.mime.multipart": [[204, "module-email.mime.multipart"]], "email.mime.nonmultipart": [[204, "module-email.mime.nonmultipart"]], "email.mime.text": [[204, "module-email.mime.text"]], "bytesfeedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[205, "email.parser.BytesFeedParser"]], "bytesheaderparser (email.parser \u4e2d\u7684\u985e\u5225)": [[205, "email.parser.BytesHeaderParser"]], "bytesparser (email.parser \u4e2d\u7684\u985e\u5225)": [[205, "email.parser.BytesParser"]], "feedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[205, "email.parser.FeedParser"]], "headerparser (email.parser \u4e2d\u7684\u985e\u5225)": [[205, "email.parser.HeaderParser"]], "parser (email.parser \u4e2d\u7684\u985e\u5225)": [[205, "email.parser.Parser"]], "close() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[205, "email.parser.BytesFeedParser.close"]], "email.parser": [[205, "module-email.parser"]], "feed() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[205, "email.parser.BytesFeedParser.feed"]], "message_from_binary_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[205, "email.message_from_binary_file"]], "message_from_bytes() (\u65bc email \u6a21\u7d44\u4e2d)": [[205, "email.message_from_bytes"]], "message_from_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[205, "email.message_from_file"]], "message_from_string() (\u65bc email \u6a21\u7d44\u4e2d)": [[205, "email.message_from_string"]], "parse() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[205, "email.parser.BytesParser.parse"]], "parse() (email.parser.parser \u7684\u65b9\u6cd5)": [[205, "email.parser.Parser.parse"]], "parsebytes() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[205, "email.parser.BytesParser.parsebytes"]], "parsestr() (email.parser.parser \u7684\u65b9\u6cd5)": [[205, "email.parser.Parser.parsestr"]], "compat32 (email.policy \u4e2d\u7684\u985e\u5225)": [[206, "email.policy.Compat32"]], "emailpolicy (email.policy \u4e2d\u7684\u985e\u5225)": [[206, "email.policy.EmailPolicy"]], "http (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[206, "email.policy.HTTP"]], "policy (email.policy \u4e2d\u7684\u985e\u5225)": [[206, "email.policy.Policy"]], "smtp (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[206, "email.policy.SMTP"]], "smtputf8 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[206, "email.policy.SMTPUTF8"]], "clone() (email.policy.policy \u7684\u65b9\u6cd5)": [[206, "email.policy.Policy.clone"]], "compat32 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[206, "email.policy.compat32"]], "content_manager (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[206, "email.policy.EmailPolicy.content_manager"]], "cte_type (email.policy.policy \u7684\u5c6c\u6027)": [[206, "email.policy.Policy.cte_type"]], "default (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[206, "email.policy.default"]], "email.policy": [[206, "module-email.policy"]], "fold() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[206, "email.policy.Compat32.fold"]], "fold() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[206, "email.policy.EmailPolicy.fold"]], "fold() (email.policy.policy \u7684\u65b9\u6cd5)": [[206, "email.policy.Policy.fold"]], "fold_binary() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[206, "email.policy.Compat32.fold_binary"]], "fold_binary() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[206, "email.policy.EmailPolicy.fold_binary"]], "fold_binary() (email.policy.policy \u7684\u65b9\u6cd5)": [[206, "email.policy.Policy.fold_binary"]], "handle_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[206, "email.policy.Policy.handle_defect"]], "header_factory (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[206, "email.policy.EmailPolicy.header_factory"]], "header_fetch_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[206, "email.policy.Compat32.header_fetch_parse"]], "header_fetch_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[206, "email.policy.EmailPolicy.header_fetch_parse"]], "header_fetch_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[206, "email.policy.Policy.header_fetch_parse"]], "header_max_count() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[206, "email.policy.EmailPolicy.header_max_count"]], "header_max_count() (email.policy.policy \u7684\u65b9\u6cd5)": [[206, "email.policy.Policy.header_max_count"]], "header_source_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[206, "email.policy.Compat32.header_source_parse"]], "header_source_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[206, "email.policy.EmailPolicy.header_source_parse"]], "header_source_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[206, "email.policy.Policy.header_source_parse"]], "header_store_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[206, "email.policy.Compat32.header_store_parse"]], "header_store_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[206, "email.policy.EmailPolicy.header_store_parse"]], "header_store_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[206, "email.policy.Policy.header_store_parse"]], "linesep (email.policy.policy \u7684\u5c6c\u6027)": [[206, "email.policy.Policy.linesep"]], "mangle_from_ (email.policy.compat32 \u7684\u5c6c\u6027)": [[206, "email.policy.Compat32.mangle_from_"]], "mangle_from_ (email.policy.policy \u7684\u5c6c\u6027)": [[206, "email.policy.Policy.mangle_from_"]], "max_line_length (email.policy.policy \u7684\u5c6c\u6027)": [[206, "email.policy.Policy.max_line_length"]], "message_factory (email.policy.policy \u7684\u5c6c\u6027)": [[206, "email.policy.Policy.message_factory"]], "raise_on_defect (email.policy.policy \u7684\u5c6c\u6027)": [[206, "email.policy.Policy.raise_on_defect"]], "refold_source (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[206, "email.policy.EmailPolicy.refold_source"]], "register_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[206, "email.policy.Policy.register_defect"]], "strict (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[206, "email.policy.strict"]], "utf8 (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[206, "email.policy.EmailPolicy.utf8"]], "collapse_rfc2231_value() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.collapse_rfc2231_value"]], "decode_params() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.decode_params"]], "decode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.decode_rfc2231"]], "email.utils": [[207, "module-email.utils"]], "encode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.encode_rfc2231"]], "format_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.format_datetime"]], "formataddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.formataddr"]], "formatdate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.formatdate"]], "getaddresses() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.getaddresses"]], "localtime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.localtime"]], "make_msgid() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.make_msgid"]], "mktime_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.mktime_tz"]], "parseaddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.parseaddr"]], "parsedate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.parsedate"]], "parsedate_to_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.parsedate_to_datetime"]], "parsedate_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.parsedate_tz"]], "quote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.quote"]], "unquote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[207, "email.utils.unquote"]], "pep 453": [[208, "index-2"], [467, "index-19"], [467, "index-20"], [467, "index-21"], [475, "index-1"], [475, "index-19"], [475, "index-20"], [475, "index-27"], [475, "index-42"], [475, "index-5"], [475, "index-52"]], "bootstrap() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[208, "ensurepip.bootstrap"]], "ensurepip": [[208, "module-ensurepip"]], "version() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[208, "ensurepip.version"]], "conform (enum.flagboundary \u7684\u5c6c\u6027)": [[209, "enum.FlagBoundary.CONFORM"]], "continuous (enum.enumcheck \u7684\u5c6c\u6027)": [[209, "enum.EnumCheck.CONTINUOUS"]], "eject (enum.flagboundary \u7684\u5c6c\u6027)": [[209, "enum.FlagBoundary.EJECT"]], "enum (enum \u4e2d\u7684\u985e\u5225)": [[209, "enum.Enum"]], "enumcheck (enum \u4e2d\u7684\u985e\u5225)": [[209, "enum.EnumCheck"]], "enumtype (enum \u4e2d\u7684\u985e\u5225)": [[209, "enum.EnumType"]], "flag (enum \u4e2d\u7684\u985e\u5225)": [[209, "enum.Flag"]], "flagboundary (enum \u4e2d\u7684\u985e\u5225)": [[209, "enum.FlagBoundary"]], "intenum (enum \u4e2d\u7684\u985e\u5225)": [[209, "enum.IntEnum"]], "intflag (enum \u4e2d\u7684\u985e\u5225)": [[209, "enum.IntFlag"]], "keep (enum.flagboundary \u7684\u5c6c\u6027)": [[209, "enum.FlagBoundary.KEEP"]], "named_flags (enum.enumcheck \u7684\u5c6c\u6027)": [[209, "enum.EnumCheck.NAMED_FLAGS"]], "reprenum (enum \u4e2d\u7684\u985e\u5225)": [[209, "enum.ReprEnum"]], "strict (enum.flagboundary \u7684\u5c6c\u6027)": [[209, "enum.FlagBoundary.STRICT"]], "strenum (enum \u4e2d\u7684\u985e\u5225)": [[209, "enum.StrEnum"]], "unique (enum.enumcheck \u7684\u5c6c\u6027)": [[209, "enum.EnumCheck.UNIQUE"]], "__and__() (enum.flag \u7684\u65b9\u6cd5)": [[209, "enum.Flag.__and__"]], "__call__() (enum.enumtype \u7684\u65b9\u6cd5)": [[209, "enum.EnumType.__call__"]], "__contains__() (enum.enumtype \u7684\u65b9\u6cd5)": [[209, "enum.EnumType.__contains__"]], "__contains__() (enum.flag \u7684\u65b9\u6cd5)": [[209, "enum.Flag.__contains__"]], "__dir__() (enum.enum \u7684\u65b9\u6cd5)": [[209, "enum.Enum.__dir__"]], "__dir__() (enum.enumtype \u7684\u65b9\u6cd5)": [[209, "enum.EnumType.__dir__"]], "__format__() (enum.enum \u7684\u65b9\u6cd5)": [[209, "enum.Enum.__format__"]], "__getitem__() (enum.enumtype \u7684\u65b9\u6cd5)": [[209, "enum.EnumType.__getitem__"]], "__init__() (enum.enum \u7684\u65b9\u6cd5)": [[209, "enum.Enum.__init__"]], "__init_subclass__() (enum.enum \u7684\u65b9\u6cd5)": [[209, "enum.Enum.__init_subclass__"]], "__iter__() (enum.enumtype \u7684\u65b9\u6cd5)": [[209, "enum.EnumType.__iter__"]], "__len__() (enum.enumtype \u7684\u65b9\u6cd5)": [[209, "enum.EnumType.__len__"]], "__members__ (enum.enumtype \u7684\u5c6c\u6027)": [[209, "enum.EnumType.__members__"]], "__new__() (enum.enum \u7684\u65b9\u6cd5)": [[209, "enum.Enum.__new__"]], "__or__() (enum.flag \u7684\u65b9\u6cd5)": [[209, "enum.Flag.__or__"]], "__repr__() (enum.enum \u7684\u65b9\u6cd5)": [[209, "enum.Enum.__repr__"]], "__reversed__() (enum.enumtype \u7684\u65b9\u6cd5)": [[209, "enum.EnumType.__reversed__"]], "__str__() (enum.enum \u7684\u65b9\u6cd5)": [[209, "enum.Enum.__str__"]], "__xor__() (enum.flag \u7684\u65b9\u6cd5)": [[209, "enum.Flag.__xor__"]], "_generate_next_value_() (enum.enum \u7684\u65b9\u6cd5)": [[209, "enum.Enum._generate_next_value_"]], "_ignore_ (enum.enum \u7684\u5c6c\u6027)": [[209, "enum.Enum._ignore_"]], "_missing_() (enum.enum \u7684\u65b9\u6cd5)": [[209, "enum.Enum._missing_"]], "_name_ (enum.enum \u7684\u5c6c\u6027)": [[209, "enum.Enum._name_"]], "_numeric_repr_() (enum.flag \u7684\u65b9\u6cd5)": [[209, "enum.Flag._numeric_repr_"]], "_order_ (enum.enum \u7684\u5c6c\u6027)": [[209, "enum.Enum._order_"]], "_value_ (enum.enum \u7684\u5c6c\u6027)": [[209, "enum.Enum._value_"]], "auto (enum \u4e2d\u7684\u985e\u5225)": [[209, "enum.auto"]], "enum": [[209, "module-enum"]], "global_enum() (\u65bc enum \u6a21\u7d44\u4e2d)": [[209, "enum.global_enum"]], "member() (\u65bc enum \u6a21\u7d44\u4e2d)": [[209, "enum.member"]], "name (enum.enum \u7684\u5c6c\u6027)": [[209, "enum.Enum.name"]], "nonmember() (\u65bc enum \u6a21\u7d44\u4e2d)": [[209, "enum.nonmember"]], "property() (\u65bc enum \u6a21\u7d44\u4e2d)": [[209, "enum.property"]], "show_flag_values() (\u65bc enum \u6a21\u7d44\u4e2d)": [[209, "enum.show_flag_values"]], "unique() (\u65bc enum \u6a21\u7d44\u4e2d)": [[209, "enum.unique"]], "value (enum.enum \u7684\u5c6c\u6027)": [[209, "enum.Enum.value"]], "verify() (\u65bc enum \u6a21\u7d44\u4e2d)": [[209, "enum.verify"]], "e2big (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.E2BIG"]], "eacces (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EACCES"]], "eaddrinuse (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EADDRINUSE"]], "eaddrnotavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EADDRNOTAVAIL"]], "eadv (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EADV"]], "eafnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EAFNOSUPPORT"]], "eagain (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EAGAIN"]], "ealready (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EALREADY"]], "ebade (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EBADE"]], "ebadf (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EBADF"]], "ebadfd (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EBADFD"]], "ebadmsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EBADMSG"]], "ebadr (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EBADR"]], "ebadrqc (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EBADRQC"]], "ebadslt (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EBADSLT"]], "ebfont (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EBFONT"]], "ebusy (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EBUSY"]], "ecanceled (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ECANCELED"]], "echild (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ECHILD"]], "echrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ECHRNG"]], "ecomm (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ECOMM"]], "econnaborted (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ECONNABORTED"]], "econnrefused (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ECONNREFUSED"]], "econnreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ECONNRESET"]], "edeadlk (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EDEADLK"]], "edeadlock (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EDEADLOCK"]], "edestaddrreq (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EDESTADDRREQ"]], "edom (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EDOM"]], "edotdot (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EDOTDOT"]], "edquot (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EDQUOT"]], "eexist (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EEXIST"]], "efault (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EFAULT"]], "efbig (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EFBIG"]], "ehostdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EHOSTDOWN"]], "ehostunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EHOSTUNREACH"]], "eidrm (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EIDRM"]], "eilseq (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EILSEQ"]], "einprogress (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EINPROGRESS"]], "eintr (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EINTR"]], "einval (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EINVAL"]], "eio (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EIO"]], "eisconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EISCONN"]], "eisdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EISDIR"]], "eisnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EISNAM"]], "el2hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EL2HLT"]], "el2nsync (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EL2NSYNC"]], "el3hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EL3HLT"]], "el3rst (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EL3RST"]], "elibacc (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ELIBACC"]], "elibbad (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ELIBBAD"]], "elibexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ELIBEXEC"]], "elibmax (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ELIBMAX"]], "elibscn (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ELIBSCN"]], "elnrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ELNRNG"]], "eloop (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ELOOP"]], "emfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EMFILE"]], "emlink (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EMLINK"]], "emsgsize (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EMSGSIZE"]], "emultihop (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EMULTIHOP"]], "enametoolong (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENAMETOOLONG"]], "enavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENAVAIL"]], "enetdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENETDOWN"]], "enetreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENETRESET"]], "enetunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENETUNREACH"]], "enfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENFILE"]], "enoano (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOANO"]], "enobufs (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOBUFS"]], "enocsi (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOCSI"]], "enodata (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENODATA"]], "enodev (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENODEV"]], "enoent (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOENT"]], "enoexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOEXEC"]], "enolck (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOLCK"]], "enolink (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOLINK"]], "enomem (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOMEM"]], "enomsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOMSG"]], "enonet (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENONET"]], "enopkg (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOPKG"]], "enoprotoopt (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOPROTOOPT"]], "enospc (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOSPC"]], "enosr (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOSR"]], "enostr (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOSTR"]], "enosys (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOSYS"]], "enotblk (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTBLK"]], "enotcapable (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTCAPABLE"]], "enotconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTCONN"]], "enotdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTDIR"]], "enotempty (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTEMPTY"]], "enotnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTNAM"]], "enotrecoverable (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTRECOVERABLE"]], "enotsock (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTSOCK"]], "enotsup (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTSUP"]], "enotty (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTTY"]], "enotuniq (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENOTUNIQ"]], "enxio (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ENXIO"]], "eopnotsupp (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EOPNOTSUPP"]], "eoverflow (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EOVERFLOW"]], "eownerdead (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EOWNERDEAD"]], "eperm (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EPERM"]], "epfnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EPFNOSUPPORT"]], "epipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EPIPE"]], "eproto (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EPROTO"]], "eprotonosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EPROTONOSUPPORT"]], "eprototype (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EPROTOTYPE"]], "eqfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EQFULL"]], "erange (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ERANGE"]], "eremchg (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EREMCHG"]], "eremote (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EREMOTE"]], "eremoteio (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EREMOTEIO"]], "erestart (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ERESTART"]], "erofs (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EROFS"]], "eshutdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ESHUTDOWN"]], "esocktnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ESOCKTNOSUPPORT"]], "espipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ESPIPE"]], "esrch (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ESRCH"]], "esrmnt (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ESRMNT"]], "estale (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ESTALE"]], "estrpipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ESTRPIPE"]], "etime (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ETIME"]], "etimedout (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ETIMEDOUT"]], "etoomanyrefs (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ETOOMANYREFS"]], "etxtbsy (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.ETXTBSY"]], "euclean (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EUCLEAN"]], "eunatch (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EUNATCH"]], "eusers (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EUSERS"]], "ewouldblock (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EWOULDBLOCK"]], "exdev (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EXDEV"]], "exfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.EXFULL"]], "errno": [[210, "module-errno"], [211, "index-5"]], "errorcode (\u65bc errno \u6a21\u7d44\u4e2d)": [[210, "errno.errorcode"]], "arithmeticerror": [[211, "ArithmeticError"]], "assertionerror": [[211, "AssertionError"], [434, "index-19"]], "attributeerror": [[211, "AttributeError"], [428, "index-40"]], "baseexception": [[211, "BaseException"]], "baseexceptiongroup": [[211, "BaseExceptionGroup"]], "blockingioerror": [[211, "BlockingIOError"], [256, "io.BlockingIOError"]], "brokenpipeerror": [[211, "BrokenPipeError"]], "buffererror": [[211, "BufferError"]], "byteswarning": [[211, "BytesWarning"]], "childprocesserror": [[211, "ChildProcessError"]], "connectionabortederror": [[211, "ConnectionAbortedError"]], "connectionerror": [[211, "ConnectionError"]], "connectionrefusederror": [[211, "ConnectionRefusedError"]], "connectionreseterror": [[211, "ConnectionResetError"]], "deprecationwarning": [[211, "DeprecationWarning"]], "eoferror": [[211, "EOFError"]], "encodingwarning": [[211, "EncodingWarning"]], "environmenterror": [[211, "EnvironmentError"]], "exception": [[211, "Exception"], [428, "index-32"], [428, "index-33"], [428, "index-36"], [428, "index-37"], [428, "index-4"], [428, "index-40"], [428, "index-63"], [428, "index-67"], [428, "index-72"]], "exceptiongroup": [[211, "ExceptionGroup"]], "fileexistserror": [[211, "FileExistsError"]], "filenotfounderror": [[211, "FileNotFoundError"]], "floatingpointerror": [[211, "FloatingPointError"]], "futurewarning": [[211, "FutureWarning"]], "generatorexit": [[211, "GeneratorExit"], [428, "index-33"], [428, "index-37"]], "ioerror": [[211, "IOError"]], "importerror": [[211, "ImportError"], [434, "index-34"]], "importwarning": [[211, "ImportWarning"]], "indentationerror": [[211, "IndentationError"]], "indexerror": [[211, "IndexError"]], "interruptederror": [[211, "InterruptedError"]], "isadirectoryerror": [[211, "IsADirectoryError"]], "keyerror": [[211, "KeyError"]], "keyboardinterrupt": [[211, "KeyboardInterrupt"]], "lookuperror": [[211, "LookupError"]], "memoryerror": [[211, "MemoryError"]], "modulenotfounderror": [[211, "ModuleNotFoundError"]], "nameerror": [[211, "NameError"], [428, "index-4"]], "notadirectoryerror": [[211, "NotADirectoryError"]], "notimplementederror": [[211, "NotImplementedError"]], "oserror": [[211, "OSError"]], "overflowerror": [[211, "OverflowError"]], "pep 3134": [[211, "index-3"], [468, "index-12"], [468, "index-28"], [468, "index-29"], [481, "index-64"]], "pep 475": [[211, "index-8"], [223, "index-18"], [291, "index-22"], [291, "index-24"], [291, "index-25"], [291, "index-44"], [326, "index-3"], [326, "index-4"], [326, "index-5"], [326, "index-6"], [326, "index-7"], [327, "index-0"], [331, "index-0"], [331, "index-1"], [335, "index-10"], [335, "index-11"], [335, "index-12"], [335, "index-13"], [335, "index-4"], [335, "index-5"], [335, "index-7"], [335, "index-8"], [335, "index-9"], [364, "index-8"], [476, "index-15"], [476, "index-16"], [476, "index-49"], [481, "index-241"], [481, "index-298"]], "pep 565": [[211, "index-10"], [478, "index-19"]], "pendingdeprecationwarning": [[211, "PendingDeprecationWarning"]], "permissionerror": [[211, "PermissionError"]], "processlookuperror": [[211, "ProcessLookupError"]], "recursionerror": [[211, "RecursionError"]], "referenceerror": [[211, "ReferenceError"]], "resourcewarning": [[211, "ResourceWarning"]], "runtimeerror": [[211, "RuntimeError"]], "runtimewarning": [[211, "RuntimeWarning"]], "stopasynciteration": [[211, "StopAsyncIteration"], [428, "index-36"]], "stopiteration": [[211, "StopIteration"], [428, "index-32"], [434, "index-26"]], "syntaxerror": [[211, "SyntaxError"]], "syntaxwarning": [[211, "SyntaxWarning"]], "systemerror": [[211, "SystemError"]], "systemexit": [[211, "SystemExit"]], "taberror": [[211, "TabError"]], "typeerror": [[211, "TypeError"], [428, "index-63"]], "unboundlocalerror": [[211, "UnboundLocalError"], [427, "index-9"]], "unicodedecodeerror": [[211, "UnicodeDecodeError"]], "unicodeencodeerror": [[211, "UnicodeEncodeError"]], "unicodeerror": [[211, "UnicodeError"]], "unicodetranslateerror": [[211, "UnicodeTranslateError"]], "unicodewarning": [[211, "UnicodeWarning"]], "userwarning": [[211, "UserWarning"]], "valueerror": [[211, "ValueError"], [428, "index-72"]], "warning": [[211, "Warning"], [338, "sqlite3.Warning"]], "windowserror": [[211, "WindowsError"]], "zerodivisionerror": [[211, "ZeroDivisionError"], [428, "index-67"]], "__cause__ (baseexception \u7684\u5c6c\u6027)": [[211, "BaseException.__cause__"]], "__cause__ (exception attribute)": [[211, "index-2"]], "__context__ (baseexception \u7684\u5c6c\u6027)": [[211, "BaseException.__context__"]], "__context__ (exception attribute)": [[211, "index-2"]], "__notes__ (baseexception \u7684\u5c6c\u6027)": [[211, "BaseException.__notes__"]], "__suppress_context__ (baseexception \u7684\u5c6c\u6027)": [[211, "BaseException.__suppress_context__"]], "__suppress_context__ (exception attribute)": [[211, "index-2"]], "__traceback__ (baseexception \u7684\u5c6c\u6027)": [[211, "BaseException.__traceback__"]], "add_note() (baseexception \u7684\u65b9\u6cd5)": [[211, "BaseException.add_note"]], "args (baseexception \u7684\u5c6c\u6027)": [[211, "BaseException.args"]], "assert": [[211, "index-4"], [434, "index-18"]], "chaining": [[211, "index-2"]], "characters_written (blockingioerror \u7684\u5c6c\u6027)": [[211, "BlockingIOError.characters_written"]], "code (systemexit \u7684\u5c6c\u6027)": [[211, "SystemExit.code"]], "derive() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[211, "BaseExceptionGroup.derive"]], "encoding (unicodeerror \u7684\u5c6c\u6027)": [[211, "UnicodeError.encoding"]], "end (unicodeerror \u7684\u5c6c\u6027)": [[211, "UnicodeError.end"]], "end_lineno (syntaxerror \u7684\u5c6c\u6027)": [[211, "SyntaxError.end_lineno"]], "end_offset (syntaxerror \u7684\u5c6c\u6027)": [[211, "SyntaxError.end_offset"]], "errno (oserror \u7684\u5c6c\u6027)": [[211, "OSError.errno"]], "except": [[211, "index-0"], [425, "index-9"]], "exceptions (baseexceptiongroup \u7684\u5c6c\u6027)": [[211, "BaseExceptionGroup.exceptions"]], "exception\uff08\u4f8b\u5916\uff09": [[211, "index-2"], [426, "index-66"], [427, "index-14"], [434, "index-19"], [434, "index-26"], [434, "index-27"], [434, "index-29"], [434, "index-34"]], "filename (oserror \u7684\u5c6c\u6027)": [[211, "OSError.filename"]], "filename (syntaxerror \u7684\u5c6c\u6027)": [[211, "SyntaxError.filename"]], "filename2 (oserror \u7684\u5c6c\u6027)": [[211, "OSError.filename2"]], "lineno (syntaxerror \u7684\u5c6c\u6027)": [[211, "SyntaxError.lineno"]], "message (baseexceptiongroup \u7684\u5c6c\u6027)": [[211, "BaseExceptionGroup.message"]], "name (importerror \u7684\u5c6c\u6027)": [[211, "ImportError.name"]], "object (unicodeerror \u7684\u5c6c\u6027)": [[211, "UnicodeError.object"]], "offset (syntaxerror \u7684\u5c6c\u6027)": [[211, "SyntaxError.offset"]], "path (importerror \u7684\u5c6c\u6027)": [[211, "ImportError.path"]], "raise": [[211, "index-1"], [434, "index-27"]], "reason (unicodeerror \u7684\u5c6c\u6027)": [[211, "UnicodeError.reason"]], "split() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[211, "BaseExceptionGroup.split"]], "start (unicodeerror \u7684\u5c6c\u6027)": [[211, "UnicodeError.start"]], "strerror (oserror \u7684\u5c6c\u6027)": [[211, "OSError.strerror"]], "subgroup() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[211, "BaseExceptionGroup.subgroup"]], "text (syntaxerror \u7684\u5c6c\u6027)": [[211, "SyntaxError.text"]], "try": [[211, "index-0"], [425, "index-9"], [426, "index-67"]], "value (stopiteration \u7684\u5c6c\u6027)": [[211, "StopIteration.value"]], "winerror (oserror \u7684\u5c6c\u6027)": [[211, "OSError.winerror"]], "with_traceback() (baseexception \u7684\u65b9\u6cd5)": [[211, "BaseException.with_traceback"]], "cancel_dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[212, "faulthandler.cancel_dump_traceback_later"]], "disable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[212, "faulthandler.disable"]], "dump_traceback() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[212, "faulthandler.dump_traceback"]], "dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[212, "faulthandler.dump_traceback_later"]], "enable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[212, "faulthandler.enable"]], "faulthandler": [[212, "module-faulthandler"]], "is_enabled() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[212, "faulthandler.is_enabled"]], "register() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[212, "faulthandler.register"]], "unregister() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[212, "faulthandler.unregister"]], "i/o control\uff08i/o \u63a7\u5236\uff09": [[213, "index-0"], [223, "index-8"], [335, "index-6"], [359, "index-0"]], "unix": [[213, "index-0"], [435, "index-4"]], "fcntl": [[213, "module-fcntl"]], "fcntl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[213, "fcntl.fcntl"]], "file control\uff08\u6a94\u6848\u63a7\u5236\uff09": [[213, "index-0"]], "flock() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[213, "fcntl.flock"]], "ioctl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[213, "fcntl.ioctl"]], "lockf() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[213, "fcntl.lockf"]], "default_ignores (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[214, "filecmp.DEFAULT_IGNORES"]], "clear_cache() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[214, "filecmp.clear_cache"]], "cmp() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[214, "filecmp.cmp"]], "cmpfiles() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[214, "filecmp.cmpfiles"]], "common (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.common"]], "common_dirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.common_dirs"]], "common_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.common_files"]], "common_funny (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.common_funny"]], "diff_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.diff_files"]], "dircmp (filecmp \u4e2d\u7684\u985e\u5225)": [[214, "filecmp.dircmp"]], "filecmp": [[214, "module-filecmp"]], "funny_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.funny_files"]], "left (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.left"]], "left_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.left_list"]], "left_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.left_only"]], "report() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[214, "filecmp.dircmp.report"]], "report_full_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[214, "filecmp.dircmp.report_full_closure"]], "report_partial_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[214, "filecmp.dircmp.report_partial_closure"]], "right (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.right"]], "right_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.right_list"]], "right_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.right_only"]], "same_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.same_files"]], "subdirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[214, "filecmp.dircmp.subdirs"]], "fileinput (fileinput \u4e2d\u7684\u985e\u5225)": [[216, "fileinput.FileInput"]], "close() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.close"]], "fileinput": [[216, "module-fileinput"]], "filelineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.filelineno"]], "filename() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.filename"]], "fileno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.fileno"]], "hook_compressed() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.hook_compressed"]], "hook_encoded() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.hook_encoded"]], "input() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.input"]], "isfirstline() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.isfirstline"]], "isstdin() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.isstdin"]], "lineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.lineno"]], "nextfile() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[216, "fileinput.nextfile"]], "[] \uff08\u65b9\u62ec\u865f\uff09": [[218, "index-2"], [229, "index-1"], [317, "index-10"], [343, "index-2"], [428, "index-15"], [428, "index-41"], [434, "index-6"]], "filenames\uff08\u6a94\u6848\u540d\u7a31\uff09": [[218, "index-0"], [229, "index-0"]], "filter() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[218, "fnmatch.filter"]], "fnmatch": [[218, "module-fnmatch"]], "fnmatch() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[218, "fnmatch.fnmatch"]], "fnmatchcase() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[218, "fnmatch.fnmatchcase"]], "glob": [[218, "index-3"], [229, "module-glob"]], "re": [[218, "index-1"], [317, "module-re"], [342, "index-33"]], "translate() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[218, "fnmatch.translate"]], "wildcard expansion\uff08\u842c\u7528\u5b57\u5143\u5c55\u958b\uff09": [[218, "index-0"]], "\u65bc glob \u98a8\u683c\u7684\u842c\u7528\u5b57\u5143\u4e2d": [[218, "index-2"], [229, "index-1"], [229, "index-2"]], "fraction (fractions \u4e2d\u7684\u985e\u5225)": [[219, "fractions.Fraction"]], "pep 515": [[219, "index-0"], [343, "index-20"], [471, "index-108"], [477, "index-7"], [477, "index-8"], [481, "index-261"], [481, "index-262"]], "__ceil__() (fractions.fraction \u7684\u65b9\u6cd5)": [[219, "fractions.Fraction.__ceil__"]], "__floor__() (fractions.fraction \u7684\u65b9\u6cd5)": [[219, "fractions.Fraction.__floor__"]], "__format__() (fractions.fraction \u7684\u65b9\u6cd5)": [[219, "fractions.Fraction.__format__"]], "__round__() (fractions.fraction \u7684\u65b9\u6cd5)": [[219, "fractions.Fraction.__round__"]], "as_integer_ratio() (fractions.fraction \u7684\u65b9\u6cd5)": [[219, "fractions.Fraction.as_integer_ratio"]], "denominator (fractions.fraction \u7684\u5c6c\u6027)": [[219, "fractions.Fraction.denominator"]], "fractions": [[219, "module-fractions"]], "from_decimal() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[219, "fractions.Fraction.from_decimal"]], "from_float() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[219, "fractions.Fraction.from_float"]], "is_integer() (fractions.fraction \u7684\u65b9\u6cd5)": [[219, "fractions.Fraction.is_integer"]], "limit_denominator() (fractions.fraction \u7684\u65b9\u6cd5)": [[219, "fractions.Fraction.limit_denominator"]], "numerator (fractions.fraction \u7684\u5c6c\u6027)": [[219, "fractions.Fraction.numerator"]], "ftp": [[221, "index-0"], [393, "index-11"], [393, "index-9"]], "ftp (ftplib \u4e2d\u7684\u985e\u5225)": [[221, "ftplib.FTP"]], "ftp_tls (ftplib \u4e2d\u7684\u985e\u5225)": [[221, "ftplib.FTP_TLS"]], "rfc 2640": [[221, "index-13"], [221, "index-14"], [221, "index-16"], [480, "index-22"], [481, "index-175"]], "rfc 3659": [[221, "index-15"]], "rfc 4217": [[221, "index-5"]], "rfc 959": [[221, "index-12"]], "abort() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.abort"]], "all_errors (\u65bc ftplib \u6a21\u7d44\u4e2d)": [[221, "ftplib.all_errors"]], "auth() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP_TLS.auth"]], "ccc() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP_TLS.ccc"]], "close() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.close"]], "connect() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.connect"]], "cwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.cwd"]], "delete() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.delete"]], "dir() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.dir"]], "error_perm": [[221, "ftplib.error_perm"]], "error_proto": [[221, "ftplib.error_proto"], [303, "poplib.error_proto"]], "error_reply": [[221, "ftplib.error_reply"]], "error_temp": [[221, "ftplib.error_temp"]], "ftplib": [[221, "module-ftplib"]], "ftplib\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[221, "index-0"]], "getwelcome() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.getwelcome"]], "login() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.login"]], "mkd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.mkd"]], "mlsd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.mlsd"]], "nlst() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.nlst"]], "ntransfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.ntransfercmd"]], "prot_c() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP_TLS.prot_c"]], "prot_p() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP_TLS.prot_p"]], "pwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.pwd"]], "quit() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.quit"]], "rename() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.rename"]], "retrbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.retrbinary"]], "retrlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.retrlines"]], "rmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.rmd"]], "sendcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.sendcmd"]], "set_debuglevel() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.set_debuglevel"]], "set_pasv() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.set_pasv"]], "size() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.size"]], "ssl_version (ftplib.ftp_tls \u7684\u5c6c\u6027)": [[221, "ftplib.FTP_TLS.ssl_version"]], "storbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.storbinary"]], "storlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.storlines"]], "transfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.transfercmd"]], "voidcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[221, "ftplib.FTP.voidcmd"]], "boolean\uff08\u5e03\u6797\u503c\uff09": [[223, "index-0"]], "infinity\uff08\u7121\u7aae\uff09": [[223, "index-3"]], "nan": [[223, "index-3"]], "pythonbreakpoint": [[223, "index-1"], [350, "index-3"], [350, "index-4"], [350, "index-5"], [453, "envvar-PYTHONBREAKPOINT"], [478, "index-12"]], "pythoncaseok": [[223, "index-16"], [453, "envvar-PYTHONCASEOK"], [461, "index-11"], [480, "index-21"], [481, "index-190"]], "__format__": [[223, "index-4"]], "__import__()": [[223, "import__"]], "abs()": [[223, "abs"]], "aiter()": [[223, "aiter"]], "all()": [[223, "all"]], "anext()": [[223, "anext"]], "any()": [[223, "any"]], "ascii()": [[223, "ascii"]], "bin()": [[223, "bin"]], "binary mode\uff08\u4e8c\u9032\u4f4d\u6a21\u5f0f\uff09": [[223, "index-8"]], "bool (\u5167\u5efa\u985e\u5225)": [[223, "bool"]], "breakpoint()": [[223, "breakpoint"]], "buffer size, i/o\uff08\u7de9\u885d\u5340\u5927\u5c0f\u3001i/o\uff09": [[223, "index-8"]], "buffering\uff08\u7de9\u885d\uff09": [[223, "index-8"], [335, "index-6"]], "built-in function": [[223, "abs"], [223, "aiter"], [223, "all"], [223, "anext"], [223, "any"], [223, "ascii"], [223, "bin"], [223, "breakpoint"], [223, "callable"], [223, "chr"], [223, "classmethod"], [223, "compile"], [223, "delattr"], [223, "dir"], [223, "divmod"], [223, "enumerate"], [223, "eval"], [223, "exec"], [223, "filter"], [223, "format"], [223, "getattr"], [223, "globals"], [223, "hasattr"], [223, "hash"], [223, "help"], [223, "hex"], [223, "id"], [223, "import__"], [223, "input"], [223, "isinstance"], [223, "issubclass"], [223, "iter"], [223, "len"], [223, "locals"], [223, "map"], [223, "max"], [223, "min"], [223, "next"], [223, "oct"], [223, "open"], [223, "ord"], [223, "pow"], [223, "print"], [223, "property.deleter"], [223, "property.getter"], [223, "property.setter"], [223, "repr"], [223, "reversed"], [223, "round"], [223, "setattr"], [223, "sorted"], [223, "staticmethod"], [223, "sum"], [223, "vars"], [223, "zip"], [281, "multiprocessing.Manager"], [411, "xml.etree.ElementInclude.default_loader"], [411, "xml.etree.ElementInclude.include"]], "callable()": [[223, "callable"]], "chr()": [[223, "chr"]], "classmethod()": [[223, "classmethod"]], "compile()": [[223, "compile"]], "complex (\u5167\u5efa\u985e\u5225)": [[223, "complex"]], "delattr()": [[223, "delattr"]], "dir()": [[223, "dir"]], "divmod()": [[223, "divmod"]], "enumerate()": [[223, "enumerate"]], "eval()": [[223, "eval"]], "exec": [[223, "index-2"], [342, "index-64"], [434, "index-44"]], "exec()": [[223, "exec"]], "filter()": [[223, "filter"]], "float (\u5167\u5efa\u985e\u5225)": [[223, "float"]], "format()": [[223, "format"]], "format()\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[223, "index-4"]], "getattr()": [[223, "getattr"]], "globals()": [[223, "globals"]], "hasattr()": [[223, "hasattr"]], "hash()": [[223, "hash"]], "help()": [[223, "help"]], "hex()": [[223, "hex"]], "id()": [[223, "id"]], "import\uff08\u5f15\u5165\uff09": [[223, "index-13"], [332, "index-2"], [426, "index-44"], [430, "index-9"], [434, "index-34"], [434, "index-39"]], "input()": [[223, "input"]], "int (\u5167\u5efa\u985e\u5225)": [[223, "int"]], "isinstance()": [[223, "isinstance"]], "issubclass()": [[223, "issubclass"]], "iter()": [[223, "iter"]], "len()": [[223, "len"]], "line-buffered i/o\uff08\u5217\u7de9\u885d i/o\uff09": [[223, "index-8"]], "locals()": [[223, "locals"]], "map()": [[223, "map"]], "max()": [[223, "max"]], "min()": [[223, "min"]], "modes\uff08\u6a21\u5f0f\uff09": [[223, "index-6"]], "next()": [[223, "next"]], "object (\u5167\u5efa\u985e\u5225)": [[223, "object"]], "oct()": [[223, "oct"]], "open()": [[223, "open"]], "open() \u5167\u5efa\u51fd\u5f0f": [[223, "index-5"], [223, "index-7"]], "ord()": [[223, "ord"]], "pow()": [[223, "pow"]], "print()": [[223, "print"]], "property (\u5167\u5efa\u985e\u5225)": [[223, "property"]], "property.deleter()": [[223, "property.deleter"]], "property.getter()": [[223, "property.getter"]], "property.setter()": [[223, "property.setter"]], "repr()": [[223, "repr"]], "reversed()": [[223, "reversed"]], "round()": [[223, "round"]], "setattr()": [[223, "setattr"]], "slice (\u5167\u5efa\u985e\u5225)": [[223, "slice"]], "sorted()": [[223, "sorted"]], "start (slice \u7684\u5c6c\u6027)": [[223, "slice.start"]], "staticmethod()": [[223, "staticmethod"]], "step (slice \u7684\u5c6c\u6027)": [[223, "slice.step"]], "stop (slice \u7684\u5c6c\u6027)": [[223, "slice.stop"]], "str() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[223, "index-11"]], "sum()": [[223, "sum"]], "super (\u5167\u5efa\u985e\u5225)": [[223, "super"]], "text mode\uff08\u6587\u5b57\u6a21\u5f0f\uff09": [[223, "index-8"]], "type (\u5167\u5efa\u985e\u5225)": [[223, "type"]], "unbuffered i/o\uff08\u975e\u7de9\u885d i/o\uff09": [[223, "index-8"]], "vars()": [[223, "vars"]], "zip()": [[223, "zip"]], "pep 412": [[224, "index-0"], [474, "index-56"]], "args (functools.partial \u7684\u5c6c\u6027)": [[224, "functools.partial.args"]], "cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[224, "functools.cache"]], "cached_property() (\u65bc functools \u6a21\u7d44\u4e2d)": [[224, "functools.cached_property"]], "cmp_to_key() (\u65bc functools \u6a21\u7d44\u4e2d)": [[224, "functools.cmp_to_key"]], "func (functools.partial \u7684\u5c6c\u6027)": [[224, "functools.partial.func"]], "functools": [[224, "module-functools"]], "keywords (functools.partial \u7684\u5c6c\u6027)": [[224, "functools.partial.keywords"]], "lru_cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[224, "functools.lru_cache"]], "partial() (\u65bc functools \u6a21\u7d44\u4e2d)": [[224, "functools.partial"]], "partialmethod (functools \u4e2d\u7684\u985e\u5225)": [[224, "functools.partialmethod"]], "reduce() (\u65bc functools \u6a21\u7d44\u4e2d)": [[224, "functools.reduce"]], "singledispatch() (\u65bc functools \u6a21\u7d44\u4e2d)": [[224, "functools.singledispatch"]], "singledispatchmethod (functools \u4e2d\u7684\u985e\u5225)": [[224, "functools.singledispatchmethod"]], "total_ordering() (\u65bc functools \u6a21\u7d44\u4e2d)": [[224, "functools.total_ordering"]], "update_wrapper() (\u65bc functools \u6a21\u7d44\u4e2d)": [[224, "functools.update_wrapper"]], "wraps() (\u65bc functools \u6a21\u7d44\u4e2d)": [[224, "functools.wraps"]], "debug_collectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.DEBUG_COLLECTABLE"]], "debug_leak (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.DEBUG_LEAK"]], "debug_saveall (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.DEBUG_SAVEALL"]], "debug_stats (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.DEBUG_STATS"]], "debug_uncollectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.DEBUG_UNCOLLECTABLE"]], "callbacks (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.callbacks"]], "collect() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.collect"]], "disable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.disable"]], "enable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.enable"]], "freeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.freeze"]], "garbage (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.garbage"]], "gc": [[225, "module-gc"]], "get_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.get_count"]], "get_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.get_debug"]], "get_freeze_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.get_freeze_count"]], "get_objects() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.get_objects"]], "get_referents() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.get_referents"]], "get_referrers() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.get_referrers"]], "get_stats() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.get_stats"]], "get_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.get_threshold"]], "is_finalized() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.is_finalized"]], "is_tracked() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.is_tracked"]], "isenabled() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.isenabled"]], "set_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.set_debug"]], "set_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.set_threshold"]], "unfreeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[225, "gc.unfreeze"]], "getopterror": [[226, "getopt.GetoptError"]], "posixly_correct": [[226, "index-0"]], "getopt": [[226, "module-getopt"]], "getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[226, "getopt.getopt"]], "gnu_getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[226, "getopt.gnu_getopt"]], "getpasswarning": [[227, "getpass.GetPassWarning"]], "logname": [[227, "index-6"], [291, "index-10"]], "user": [[227, "index-7"]], "username": [[227, "index-8"], [291, "index-11"], [292, "index-20"]], "getpass": [[227, "module-getpass"]], "getpass() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[227, "getpass.getpass"]], "getuser() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[227, "getpass.getuser"]], "gnome": [[228, "index-10"]], "gnutranslations (gettext \u4e2d\u7684\u985e\u5225)": [[228, "gettext.GNUTranslations"]], "lang": [[228, "index-3"], [228, "index-8"], [264, "index-1"], [264, "index-2"], [264, "index-3"]], "language": [[228, "index-0"], [228, "index-5"]], "lc_all": [[228, "index-1"], [228, "index-6"]], "lc_messages": [[228, "index-2"], [228, "index-7"]], "nulltranslations (gettext \u4e2d\u7684\u985e\u5225)": [[228, "gettext.NullTranslations"]], "_ \uff08\u5e95\u7dda\uff09": [[228, "index-4"], [343, "index-10"], [433, "index-28"], [433, "index-29"]], "_parse() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[228, "gettext.NullTranslations._parse"]], "add_fallback() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[228, "gettext.NullTranslations.add_fallback"]], "bindtextdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.bindtextdomain"]], "charset() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[228, "gettext.NullTranslations.charset"]], "dgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.dgettext"]], "dngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.dngettext"]], "dnpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.dnpgettext"]], "dpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.dpgettext"]], "find() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.find"]], "gettext": [[228, "index-4"], [228, "module-gettext"]], "gettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[228, "gettext.GNUTranslations.gettext"]], "gettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[228, "gettext.NullTranslations.gettext"]], "gettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.gettext"]], "info() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[228, "gettext.NullTranslations.info"]], "install() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[228, "gettext.NullTranslations.install"]], "install() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.install"]], "ngettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[228, "gettext.GNUTranslations.ngettext"]], "ngettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[228, "gettext.NullTranslations.ngettext"]], "ngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.ngettext"]], "npgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[228, "gettext.GNUTranslations.npgettext"]], "npgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[228, "gettext.NullTranslations.npgettext"]], "npgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.npgettext"]], "pgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[228, "gettext.GNUTranslations.pgettext"]], "pgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[228, "gettext.NullTranslations.pgettext"]], "pgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.pgettext"]], "textdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.textdomain"]], "translation() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[228, "gettext.translation"]], "**": [[229, "index-2"], [342, "index-13"], [425, "index-32"], [428, "index-18"], [428, "index-50"], [428, "index-58"], [439, "index-4"]], ". \uff08\u9ede\uff09": [[229, "index-1"], [291, "index-45"], [291, "index-50"], [317, "index-0"], [342, "index-36"], [342, "index-46"], [343, "index-2"], [428, "index-39"], [433, "index-29"]], "escape() (\u65bc glob \u6a21\u7d44\u4e2d)": [[229, "glob.escape"]], "glob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[229, "glob.glob"]], "iglob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[229, "glob.iglob"]], "pathname expansion\uff08\u8def\u5f91\u540d\u7a31\u5c55\u958b\uff09": [[229, "index-0"]], "cycleerror": [[230, "graphlib.CycleError"]], "topologicalsorter (graphlib \u4e2d\u7684\u985e\u5225)": [[230, "graphlib.TopologicalSorter"]], "add() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[230, "graphlib.TopologicalSorter.add"]], "done() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[230, "graphlib.TopologicalSorter.done"]], "get_ready() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[230, "graphlib.TopologicalSorter.get_ready"]], "graphlib": [[230, "module-graphlib"]], "is_active() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[230, "graphlib.TopologicalSorter.is_active"]], "prepare() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[230, "graphlib.TopologicalSorter.prepare"]], "static_order() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[230, "graphlib.TopologicalSorter.static_order"]], "getgrall() (\u65bc grp \u6a21\u7d44\u4e2d)": [[231, "grp.getgrall"]], "getgrgid() (\u65bc grp \u6a21\u7d44\u4e2d)": [[231, "grp.getgrgid"]], "getgrnam() (\u65bc grp \u6a21\u7d44\u4e2d)": [[231, "grp.getgrnam"]], "grp": [[231, "module-grp"]], "--best": [[232, "cmdoption-gzip-best"]], "--decompress": [[232, "cmdoption-gzip-d"]], "--fast": [[232, "cmdoption-gzip-fast"]], "badgzipfile": [[232, "gzip.BadGzipFile"]], "gzipfile (gzip \u4e2d\u7684\u985e\u5225)": [[232, "gzip.GzipFile"]], "compress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[232, "gzip.compress"]], "decompress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[232, "gzip.decompress"]], "gzip": [[232, "module-gzip"]], "gzip \u547d\u4ee4\u5217\u9078\u9805": [[232, "cmdoption-gzip-arg-file"], [232, "cmdoption-gzip-best"], [232, "cmdoption-gzip-d"], [232, "cmdoption-gzip-fast"], [232, "cmdoption-gzip-h"]], "mtime (gzip.gzipfile \u7684\u5c6c\u6027)": [[232, "gzip.GzipFile.mtime"]], "name (gzip.gzipfile \u7684\u5c6c\u6027)": [[232, "gzip.GzipFile.name"]], "open() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[232, "gzip.open"]], "peek() (gzip.gzipfile \u7684\u65b9\u6cd5)": [[232, "gzip.GzipFile.peek"]], "openssl": [[233, "index-2"], [339, "index-0"]], "rfc 1321": [[233, "index-1"]], "rfc 7693": [[233, "index-5"]], "rfc 7914": [[233, "index-3"]], "algorithms_available (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.algorithms_available"]], "algorithms_guaranteed (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.algorithms_guaranteed"]], "blake2b() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.blake2b"]], "blake2b, blake2s": [[233, "index-4"]], "blake2b.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.blake2b.MAX_DIGEST_SIZE"]], "blake2b.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.blake2b.MAX_KEY_SIZE"]], "blake2b.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.blake2b.PERSON_SIZE"]], "blake2b.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.blake2b.SALT_SIZE"]], "blake2s() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.blake2s"]], "blake2s.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.blake2s.MAX_DIGEST_SIZE"]], "blake2s.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.blake2s.MAX_KEY_SIZE"]], "blake2s.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.blake2s.PERSON_SIZE"]], "blake2s.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.blake2s.SALT_SIZE"]], "copy() (hashlib.hash \u7684\u65b9\u6cd5)": [[233, "hashlib.hash.copy"]], "digest() (hashlib.hash \u7684\u65b9\u6cd5)": [[233, "hashlib.hash.digest"]], "digest() (hashlib.shake \u7684\u65b9\u6cd5)": [[233, "hashlib.shake.digest"]], "file_digest() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.file_digest"]], "hash.block_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.hash.block_size"]], "hash.digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.hash.digest_size"]], "hashlib": [[233, "module-hashlib"]], "hexdigest() (hashlib.hash \u7684\u65b9\u6cd5)": [[233, "hashlib.hash.hexdigest"]], "hexdigest() (hashlib.shake \u7684\u65b9\u6cd5)": [[233, "hashlib.shake.hexdigest"]], "md5() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.md5"]], "message digest, md5": [[233, "index-0"]], "name (hashlib.hash \u7684\u5c6c\u6027)": [[233, "hashlib.hash.name"]], "new() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.new"]], "pbkdf2_hmac() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.pbkdf2_hmac"]], "scrypt() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.scrypt"]], "secure hash algorithm, sha1, sha2, sha224, sha256, sha384, sha512, sha3, shake, blake2": [[233, "index-0"]], "sha1() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.sha1"]], "sha224() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.sha224"]], "sha256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.sha256"]], "sha384() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.sha384"]], "sha3_224() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.sha3_224"]], "sha3_256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.sha3_256"]], "sha3_384() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.sha3_384"]], "sha3_512() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.sha3_512"]], "sha512() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.sha512"]], "shake_128() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.shake_128"]], "shake_256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[233, "hashlib.shake_256"]], "update() (hashlib.hash \u7684\u65b9\u6cd5)": [[233, "hashlib.hash.update"]], "\uff08\u4f7f\u7528\u65bc hashlib \u6a21\u7d44\u4e2d\uff09": [[233, "index-2"]], "heapify() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[234, "heapq.heapify"]], "heappop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[234, "heapq.heappop"]], "heappush() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[234, "heapq.heappush"]], "heappushpop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[234, "heapq.heappushpop"]], "heapq": [[234, "module-heapq"]], "heapreplace() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[234, "heapq.heapreplace"]], "merge() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[234, "heapq.merge"]], "nlargest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[234, "heapq.nlargest"]], "nsmallest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[234, "heapq.nsmallest"]], "rfc 2014": [[235, "index-2"]], "block_size (hmac.hmac \u7684\u5c6c\u6027)": [[235, "hmac.HMAC.block_size"]], "compare_digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[235, "hmac.compare_digest"]], "copy() (hmac.hmac \u7684\u65b9\u6cd5)": [[235, "hmac.HMAC.copy"]], "digest() (hmac.hmac \u7684\u65b9\u6cd5)": [[235, "hmac.HMAC.digest"]], "digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[235, "hmac.digest"]], "digest_size (hmac.hmac \u7684\u5c6c\u6027)": [[235, "hmac.HMAC.digest_size"]], "hexdigest() (hmac.hmac \u7684\u65b9\u6cd5)": [[235, "hmac.HMAC.hexdigest"]], "hmac": [[235, "module-hmac"]], "name (hmac.hmac \u7684\u5c6c\u6027)": [[235, "hmac.HMAC.name"]], "new() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[235, "hmac.new"]], "update() (hmac.hmac \u7684\u65b9\u6cd5)": [[235, "hmac.HMAC.update"]], "escape() (\u65bc html \u6a21\u7d44\u4e2d)": [[236, "html.escape"]], "html": [[236, "module-html"], [238, "index-0"], [393, "index-10"]], "unescape() (\u65bc html \u6a21\u7d44\u4e2d)": [[236, "html.unescape"]], "codepoint2name (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[237, "html.entities.codepoint2name"]], "entitydefs (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[237, "html.entities.entitydefs"]], "html.entities": [[237, "module-html.entities"]], "html5 (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[237, "html.entities.html5"]], "name2codepoint (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[237, "html.entities.name2codepoint"]], "htmlparser (html.parser \u4e2d\u7684\u985e\u5225)": [[238, "html.parser.HTMLParser"]], "xhtml": [[238, "index-0"]], "close() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.close"]], "feed() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.feed"]], "get_starttag_text() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.get_starttag_text"]], "getpos() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.getpos"]], "handle_charref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.handle_charref"]], "handle_comment() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.handle_comment"]], "handle_data() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.handle_data"]], "handle_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.handle_decl"]], "handle_endtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.handle_endtag"]], "handle_entityref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.handle_entityref"]], "handle_pi() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.handle_pi"]], "handle_startendtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.handle_startendtag"]], "handle_starttag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.handle_starttag"]], "html.parser": [[238, "module-html.parser"]], "reset() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.reset"]], "unknown_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[238, "html.parser.HTMLParser.unknown_decl"]], "httpmethod (http \u4e2d\u7684\u985e\u5225)": [[239, "http.HTTPMethod"]], "httpstatus (http \u4e2d\u7684\u985e\u5225)": [[239, "http.HTTPStatus"]], "rfc 2295": [[239, "index-209"]], "rfc 2324": [[239, "index-192"]], "rfc 2518": [[239, "index-154"]], "rfc 2774": [[239, "index-212"]], "rfc 3229": [[239, "index-165"]], "rfc 4918": [[239, "index-163"], [239, "index-194"], [239, "index-195"], [239, "index-196"], [239, "index-210"]], "rfc 5789": [[239, "index-76"]], "rfc 5842": [[239, "index-164"], [239, "index-211"]], "rfc 6585": [[239, "index-199"], [239, "index-200"], [239, "index-201"], [239, "index-213"]], "rfc 7231": [[239, "index-152"], [239, "index-153"], [239, "index-156"], [239, "index-157"], [239, "index-158"], [239, "index-159"], [239, "index-160"], [239, "index-161"], [239, "index-166"], [239, "index-167"], [239, "index-168"], [239, "index-169"], [239, "index-171"], [239, "index-172"], [239, "index-174"], [239, "index-176"], [239, "index-177"], [239, "index-178"], [239, "index-179"], [239, "index-180"], [239, "index-182"], [239, "index-183"], [239, "index-184"], [239, "index-185"], [239, "index-187"], [239, "index-188"], [239, "index-189"], [239, "index-191"], [239, "index-198"], [239, "index-203"], [239, "index-204"], [239, "index-205"], [239, "index-206"], [239, "index-207"], [239, "index-208"], [239, "index-214"], [239, "index-215"], [239, "index-216"], [239, "index-217"], [239, "index-218"], [239, "index-219"], [239, "index-220"], [239, "index-221"], [239, "index-222"], [239, "index-223"], [239, "index-224"], [239, "index-225"], [239, "index-226"]], "rfc 7232": [[239, "index-170"], [239, "index-186"]], "rfc 7233": [[239, "index-162"], [239, "index-190"]], "rfc 7235": [[239, "index-175"], [239, "index-181"]], "rfc 7238": [[239, "index-173"]], "rfc 7540": [[239, "index-193"]], "rfc 7725": [[239, "index-202"]], "rfc 8297": [[239, "index-155"]], "rfc 8470": [[239, "index-197"]], "http\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[239, "index-0"]], "badstatusline": [[240, "http.client.BadStatusLine"]], "cannotsendheader": [[240, "http.client.CannotSendHeader"]], "cannotsendrequest": [[240, "http.client.CannotSendRequest"]], "httpconnection (http.client \u4e2d\u7684\u985e\u5225)": [[240, "http.client.HTTPConnection"]], "httpexception": [[240, "http.client.HTTPException"]], "httpmessage (http.client \u4e2d\u7684\u985e\u5225)": [[240, "http.client.HTTPMessage"]], "httpresponse (http.client \u4e2d\u7684\u985e\u5225)": [[240, "http.client.HTTPResponse"]], "httpsconnection (http.client \u4e2d\u7684\u985e\u5225)": [[240, "http.client.HTTPSConnection"]], "https_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[240, "http.client.HTTPS_PORT"]], "http_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[240, "http.client.HTTP_PORT"]], "improperconnectionstate": [[240, "http.client.ImproperConnectionState"]], "incompleteread": [[240, "http.client.IncompleteRead"]], "invalidurl": [[240, "http.client.InvalidURL"]], "linetoolong": [[240, "http.client.LineTooLong"]], "notconnected": [[240, "http.client.NotConnected"]], "rfc 2616#section-14.23": [[240, "index-4"]], "rfc 2616#section-5.1.2": [[240, "index-3"], [240, "index-5"]], "rfc 7230": [[240, "index-7"], [393, "index-15"]], "remotedisconnected": [[240, "http.client.RemoteDisconnected"]], "responsenotready": [[240, "http.client.ResponseNotReady"]], "unimplementedfilemode": [[240, "http.client.UnimplementedFileMode"]], "unknownprotocol": [[240, "http.client.UnknownProtocol"]], "unknowntransferencoding": [[240, "http.client.UnknownTransferEncoding"]], "blocksize (http.client.httpconnection \u7684\u5c6c\u6027)": [[240, "http.client.HTTPConnection.blocksize"]], "close() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.close"]], "closed (http.client.httpresponse \u7684\u5c6c\u6027)": [[240, "http.client.HTTPResponse.closed"]], "connect() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.connect"]], "debuglevel (http.client.httpresponse \u7684\u5c6c\u6027)": [[240, "http.client.HTTPResponse.debuglevel"]], "endheaders() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.endheaders"]], "fileno() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPResponse.fileno"]], "get_proxy_response_headers() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.get_proxy_response_headers"]], "getcode() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPResponse.getcode"]], "getheader() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPResponse.getheader"]], "getheaders() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPResponse.getheaders"]], "getresponse() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.getresponse"]], "geturl() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPResponse.geturl"]], "headers (http.client.httpresponse \u7684\u5c6c\u6027)": [[240, "http.client.HTTPResponse.headers"]], "http.client": [[240, "module-http.client"]], "http.client\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[240, "index-0"]], "info() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPResponse.info"]], "msg (http.client.httpresponse \u7684\u5c6c\u6027)": [[240, "http.client.HTTPResponse.msg"]], "parse_headers() (\u65bc http.client \u6a21\u7d44\u4e2d)": [[240, "http.client.parse_headers"]], "putheader() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.putheader"]], "putrequest() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.putrequest"]], "read() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPResponse.read"]], "readinto() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPResponse.readinto"]], "reason (http.client.httpresponse \u7684\u5c6c\u6027)": [[240, "http.client.HTTPResponse.reason"]], "request() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.request"]], "responses (\u65bc http.client \u6a21\u7d44\u4e2d)": [[240, "http.client.responses"]], "send() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.send"]], "set_debuglevel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.set_debuglevel"]], "set_tunnel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[240, "http.client.HTTPConnection.set_tunnel"]], "status (http.client.httpresponse \u7684\u5c6c\u6027)": [[240, "http.client.HTTPResponse.status"]], "url (http.client.httpresponse \u7684\u5c6c\u6027)": [[240, "http.client.HTTPResponse.url"]], "urllib.request": [[240, "index-1"], [393, "module-urllib.request"]], "version (http.client.httpresponse \u7684\u5c6c\u6027)": [[240, "http.client.HTTPResponse.version"]], "cookie (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[241, "http.cookiejar.Cookie"]], "cookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[241, "http.cookiejar.CookieJar"]], "cookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[241, "http.cookiejar.CookiePolicy"]], "defaultcookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[241, "http.cookiejar.DefaultCookiePolicy"]], "domainliberal (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.DomainLiberal"]], "domainrfc2965match (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.DomainRFC2965Match"]], "domainstrict (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.DomainStrict"]], "domainstrictnodots (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.DomainStrictNoDots"]], "domainstrictnondomain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.DomainStrictNonDomain"]], "filecookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[241, "http.cookiejar.FileCookieJar"]], "lwpcookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[241, "http.cookiejar.LWPCookieJar"]], "loaderror": [[241, "http.cookiejar.LoadError"]], "mozillacookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[241, "http.cookiejar.MozillaCookieJar"]], "rfc 2109": [[241, "index-1"], [241, "index-15"], [241, "index-21"], [241, "index-23"], [241, "index-24"], [241, "index-3"], [241, "index-4"], [241, "index-6"], [242, "index-0"], [242, "index-2"], [242, "index-3"], [242, "index-4"], [242, "index-5"], [242, "index-6"], [242, "index-7"]], "rfc 2964": [[241, "index-10"]], "rfc 2965": [[241, "index-0"], [241, "index-11"], [241, "index-12"], [241, "index-13"], [241, "index-14"], [241, "index-16"], [241, "index-17"], [241, "index-18"], [241, "index-19"], [241, "index-2"], [241, "index-20"], [241, "index-22"], [241, "index-25"], [241, "index-5"], [241, "index-7"], [241, "index-8"], [241, "index-9"], [393, "index-16"], [393, "index-17"], [393, "index-4"]], "add_cookie_header() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookieJar.add_cookie_header"]], "allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.DefaultCookiePolicy.allowed_domains"]], "blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.DefaultCookiePolicy.blocked_domains"]], "clear() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookieJar.clear"]], "clear_session_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookieJar.clear_session_cookies"]], "comment (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.comment"]], "comment_url (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.comment_url"]], "delayload (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[241, "http.cookiejar.FileCookieJar.delayload"]], "discard (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.discard"]], "domain_initial_dot (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.domain_initial_dot"]], "domain_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookiePolicy.domain_return_ok"]], "domain_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.domain_specified"]], "expires (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.expires"]], "extract_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookieJar.extract_cookies"]], "filename (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[241, "http.cookiejar.FileCookieJar.filename"]], "get_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.Cookie.get_nonstandard_attr"]], "has_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.Cookie.has_nonstandard_attr"]], "hide_cookie2 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.CookiePolicy.hide_cookie2"]], "http.cookiejar": [[241, "module-http.cookiejar"]], "is_blocked() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.DefaultCookiePolicy.is_blocked"]], "is_expired() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.Cookie.is_expired"]], "is_not_allowed() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.DefaultCookiePolicy.is_not_allowed"]], "load() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.FileCookieJar.load"]], "make_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookieJar.make_cookies"]], "name (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.name"]], "netscape (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.CookiePolicy.netscape"]], "path (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.path"]], "path_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookiePolicy.path_return_ok"]], "port (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.port"]], "port_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.port_specified"]], "return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookiePolicy.return_ok"]], "revert() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.FileCookieJar.revert"]], "rfc2109 (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.rfc2109"]], "rfc2109_as_netscape (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.rfc2109_as_netscape"]], "rfc2965 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.CookiePolicy.rfc2965"]], "save() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.FileCookieJar.save"]], "secure (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.secure"]], "set_allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.DefaultCookiePolicy.set_allowed_domains"]], "set_blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.DefaultCookiePolicy.set_blocked_domains"]], "set_cookie() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookieJar.set_cookie"]], "set_cookie_if_ok() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookieJar.set_cookie_if_ok"]], "set_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.Cookie.set_nonstandard_attr"]], "set_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookiePolicy.set_ok"]], "set_policy() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[241, "http.cookiejar.CookieJar.set_policy"]], "strict_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.strict_domain"]], "strict_ns_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.strict_ns_domain"]], "strict_ns_set_initial_dollar (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_initial_dollar"]], "strict_ns_set_path (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_path"]], "strict_ns_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.strict_ns_unverifiable"]], "strict_rfc2965_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[241, "http.cookiejar.DefaultCookiePolicy.strict_rfc2965_unverifiable"]], "value (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.value"]], "version (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[241, "http.cookiejar.Cookie.version"]], "basecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[242, "http.cookies.BaseCookie"]], "cookieerror": [[242, "http.cookies.CookieError"]], "morsel (http.cookies \u4e2d\u7684\u985e\u5225)": [[242, "http.cookies.Morsel"]], "outputstring() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[242, "http.cookies.Morsel.OutputString"]], "rfc 2068": [[242, "index-1"]], "simplecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[242, "http.cookies.SimpleCookie"]], "coded_value (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.coded_value"]], "comment (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.comment"]], "copy() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[242, "http.cookies.Morsel.copy"]], "domain (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.domain"]], "expires (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.expires"]], "http.cookies": [[242, "module-http.cookies"]], "httponly (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.httponly"]], "isreservedkey() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[242, "http.cookies.Morsel.isReservedKey"]], "js_output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[242, "http.cookies.BaseCookie.js_output"]], "js_output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[242, "http.cookies.Morsel.js_output"]], "key (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.key"]], "load() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[242, "http.cookies.BaseCookie.load"]], "output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[242, "http.cookies.BaseCookie.output"]], "output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[242, "http.cookies.Morsel.output"]], "path (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.path"]], "samesite (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.samesite"]], "secure (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.secure"]], "set() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[242, "http.cookies.Morsel.set"]], "setdefault() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[242, "http.cookies.Morsel.setdefault"]], "update() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[242, "http.cookies.Morsel.update"]], "value (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.value"]], "value_decode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[242, "http.cookies.BaseCookie.value_decode"]], "value_encode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[242, "http.cookies.BaseCookie.value_encode"]], "version (http.cookies.morsel \u7684\u5c6c\u6027)": [[242, "http.cookies.Morsel.version"]], "basehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[243, "http.server.BaseHTTPRequestHandler"]], "cgihttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[243, "http.server.CGIHTTPRequestHandler"]], "httpserver (http.server \u4e2d\u7684\u985e\u5225)": [[243, "http.server.HTTPServer"]], "messageclass (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.MessageClass"]], "rfc 3986": [[243, "index-1"], [392, "index-2"], [392, "index-4"], [392, "index-5"], [392, "index-7"], [392, "index-8"], [467, "index-12"], [467, "index-9"], [470, "index-32"], [476, "index-42"], [478, "index-35"], [479, "index-25"], [480, "index-28"]], "simplehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[243, "http.server.SimpleHTTPRequestHandler"]], "threadinghttpserver (http.server \u4e2d\u7684\u985e\u5225)": [[243, "http.server.ThreadingHTTPServer"]], "address_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.address_string"]], "cgi_directories (http.server.cgihttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.CGIHTTPRequestHandler.cgi_directories"]], "client_address (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.client_address"]], "close_connection (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.close_connection"]], "command (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.command"]], "date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.date_time_string"]], "do_get() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.SimpleHTTPRequestHandler.do_GET"]], "do_head() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.SimpleHTTPRequestHandler.do_HEAD"]], "do_post() (http.server.cgihttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.CGIHTTPRequestHandler.do_POST"]], "end_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.end_headers"]], "error_content_type (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.error_content_type"]], "error_message_format (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.error_message_format"]], "extensions_map (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.SimpleHTTPRequestHandler.extensions_map"]], "flush_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.flush_headers"]], "handle() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.handle"]], "handle_expect_100() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.handle_expect_100"]], "handle_one_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.handle_one_request"]], "headers (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.headers"]], "http.server": [[243, "index-3"], [243, "module-http.server"]], "httpd": [[243, "index-0"]], "log_date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.log_date_time_string"]], "log_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.log_error"]], "log_message() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.log_message"]], "log_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.log_request"]], "path (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.path"]], "protocol_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.protocol_version"]], "request_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.request_version"]], "requestline (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.requestline"]], "responses (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.responses"]], "rfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.rfile"]], "send_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.send_error"]], "send_header() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.send_header"]], "send_response() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.send_response"]], "send_response_only() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.send_response_only"]], "server (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.server"]], "server_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.server_version"]], "server_version (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.SimpleHTTPRequestHandler.server_version"]], "sys_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.sys_version"]], "version_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[243, "http.server.BaseHTTPRequestHandler.version_string"]], "wfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[243, "http.server.BaseHTTPRequestHandler.wfile"]], "clear breakpoint": [[245, "index-4"]], "cut\uff08\u526a\u4e0b\uff09": [[245, "index-4"]], "idlestartup": [[245, "index-5"], [481, "index-224"], [481, "index-229"], [481, "index-254"]], "integrated development environment\uff08\u6574\u5408\u958b\u767c\u74b0\u5883\uff09": [[245, "index-0"]], "module browser\uff08\u6a21\u7d44\u700f\u89bd\u5668\uff09": [[245, "index-1"]], "pep 434": [[245, "index-7"], [467, "index-13"]], "pythonstartup": [[245, "index-6"], [318, "index-0"], [332, "index-5"], [350, "index-18"], [436, "index-13"], [453, "envvar-PYTHONSTARTUP"], [453, "index-5"], [475, "index-40"], [475, "index-41"], [481, "index-225"], [481, "index-230"], [481, "index-255"]], "paste\uff08\u8cbc\u4e0a\uff09": [[245, "index-4"]], "path browser\uff08\u8def\u5f91\u700f\u89bd\u5668\uff09": [[245, "index-1"]], "python editor\uff08python \u7de8\u8f2f\u5668\uff09": [[245, "index-0"]], "run script\uff08\u57f7\u884c\u8173\u672c\uff09": [[245, "index-2"]], "set breakpoint": [[245, "index-4"]], "breakpoints\uff08\u4e2d\u65b7\u9ede\uff09": [[245, "index-4"]], "debugger\uff08\u9664\u932f\u5668\uff09": [[245, "index-3"], [295, "index-2"], [350, "index-11"], [350, "index-29"], [363, "index-1"]], "idlelib": [[245, "module-idlelib"]], "stack viewer\uff08\u5806\u758a\u6aa2\u8996\u5668\uff09": [[245, "index-3"]], "imap4": [[246, "index-0"]], "imap4 (imaplib \u4e2d\u7684\u985e\u5225)": [[246, "imaplib.IMAP4"]], "imap4.abort": [[246, "imaplib.IMAP4.abort"]], "imap4.error": [[246, "imaplib.IMAP4.error"]], "imap4.readonly": [[246, "imaplib.IMAP4.readonly"]], "imap4_ssl": [[246, "index-0"]], "imap4_ssl (imaplib \u4e2d\u7684\u985e\u5225)": [[246, "imaplib.IMAP4_SSL"]], "imap4_stream": [[246, "index-0"]], "imap4_stream (imaplib \u4e2d\u7684\u985e\u5225)": [[246, "imaplib.IMAP4_stream"]], "int2ap() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[246, "imaplib.Int2AP"]], "internaldate2tuple() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[246, "imaplib.Internaldate2tuple"]], "protocol_version (imaplib.imap4 \u7684\u5c6c\u6027)": [[246, "imaplib.IMAP4.PROTOCOL_VERSION"]], "parseflags() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[246, "imaplib.ParseFlags"]], "rfc 1730": [[246, "index-2"]], "rfc 2060": [[246, "index-1"], [246, "index-7"]], "rfc 2342": [[246, "index-6"], [462, "index-19"]], "rfc 3501": [[246, "index-8"]], "rfc 5161": [[246, "index-3"], [476, "index-33"]], "rfc 6855": [[246, "index-4"], [246, "index-5"], [476, "index-34"], [476, "index-35"]], "time2internaldate() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[246, "imaplib.Time2Internaldate"]], "append() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.append"]], "authenticate() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.authenticate"]], "check() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.check"]], "close() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.close"]], "copy() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.copy"]], "create() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.create"]], "debug (imaplib.imap4 \u7684\u5c6c\u6027)": [[246, "imaplib.IMAP4.debug"]], "delete() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.delete"]], "deleteacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.deleteacl"]], "enable() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.enable"]], "expunge() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.expunge"]], "fetch() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.fetch"]], "getacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.getacl"]], "getannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.getannotation"]], "getquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.getquota"]], "getquotaroot() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.getquotaroot"]], "imaplib": [[246, "module-imaplib"]], "list() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.list"]], "login() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.login"]], "login_cram_md5() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.login_cram_md5"]], "logout() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.logout"]], "lsub() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.lsub"]], "myrights() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.myrights"]], "namespace() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.namespace"]], "noop() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.noop"]], "open() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.open"]], "partial() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.partial"]], "proxyauth() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.proxyauth"]], "read() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.read"]], "readline() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.readline"]], "recent() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.recent"]], "rename() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.rename"]], "response() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.response"]], "search() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.search"]], "select() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.select"]], "send() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.send"]], "setacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.setacl"]], "setannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.setannotation"]], "setquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.setquota"]], "shutdown() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.shutdown"]], "socket() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.socket"]], "sort() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.sort"]], "starttls() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.starttls"]], "status() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.status"]], "store() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.store"]], "subscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.subscribe"]], "thread() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.thread"]], "uid() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.uid"]], "unselect() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.unselect"]], "unsubscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.unsubscribe"]], "utf8_enabled (imaplib.imap4 \u7684\u5c6c\u6027)": [[246, "imaplib.IMAP4.utf8_enabled"]], "xatom() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[246, "imaplib.IMAP4.xatom"]], "pep 594#imghdr": [[247, "index-2"]], "imghdr": [[247, "module-imghdr"]], "tests (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[247, "imghdr.tests"]], "what() (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[247, "imghdr.what"]], "bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[248, "importlib.machinery.BYTECODE_SUFFIXES"]], "builtinimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[248, "importlib.machinery.BuiltinImporter"]], "debug_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[248, "importlib.machinery.DEBUG_BYTECODE_SUFFIXES"]], "extension_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[248, "importlib.machinery.EXTENSION_SUFFIXES"]], "executionloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.ExecutionLoader"]], "extensionfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[248, "importlib.machinery.ExtensionFileLoader"]], "filefinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[248, "importlib.machinery.FileFinder"]], "fileloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.FileLoader"]], "frozenimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[248, "importlib.machinery.FrozenImporter"]], "inspectloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.InspectLoader"]], "lazyloader (importlib.util \u4e2d\u7684\u985e\u5225)": [[248, "importlib.util.LazyLoader"]], "loader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.Loader"]], "magic_number (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util.MAGIC_NUMBER"]], "metapathfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.MetaPathFinder"]], "modulespec (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[248, "importlib.machinery.ModuleSpec"]], "namespaceloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[248, "importlib.machinery.NamespaceLoader"]], "optimized_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[248, "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES"]], "pep 235": [[248, "index-0"]], "pep 3120": [[248, "index-10"], [433, "index-1"], [468, "index-4"]], "pep 366": [[248, "index-4"], [322, "index-7"], [430, "index-11"], [430, "index-12"], [430, "index-23"], [430, "index-25"], [474, "index-22"]], "pep 488": [[248, "index-22"], [248, "index-25"], [248, "index-7"], [309, "index-2"], [360, "index-4"], [453, "index-10"], [453, "index-50"], [453, "index-51"], [453, "index-7"], [476, "index-24"], [476, "index-25"], [476, "index-50"], [481, "index-297"]], "pathentryfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.PathEntryFinder"]], "pathfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[248, "importlib.machinery.PathFinder"]], "resourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.ResourceLoader"]], "resourcereader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.ResourceReader"]], "source_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[248, "importlib.machinery.SOURCE_SUFFIXES"]], "sourcefileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[248, "importlib.machinery.SourceFileLoader"]], "sourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.SourceLoader"]], "sourcelessfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[248, "importlib.machinery.SourcelessFileLoader"]], "traversable (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.Traversable"]], "traversableresources (importlib.abc \u4e2d\u7684\u985e\u5225)": [[248, "importlib.abc.TraversableResources"]], "windowsregistryfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[248, "importlib.machinery.WindowsRegistryFinder"]], "__import__() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[248, "importlib.__import__"]], "__truediv__() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Traversable.__truediv__"]], "_incompatible_extension_module_restrictions() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util._incompatible_extension_module_restrictions"]], "all_suffixes() (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[248, "importlib.machinery.all_suffixes"]], "cache_from_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util.cache_from_source"]], "cached (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[248, "importlib.machinery.ModuleSpec.cached"]], "contents() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.ResourceReader.contents"]], "create_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Loader.create_module"]], "create_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.ExtensionFileLoader.create_module"]], "decode_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util.decode_source"]], "exec_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.InspectLoader.exec_module"]], "exec_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Loader.exec_module"]], "exec_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.SourceLoader.exec_module"]], "exec_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.ExtensionFileLoader.exec_module"]], "factory() (importlib.util.lazyloader \u7684\u985e\u5225\u65b9\u6cd5)": [[248, "importlib.util.LazyLoader.factory"]], "files() (importlib.abc.traversableresources \u7684\u65b9\u6cd5)": [[248, "importlib.abc.TraversableResources.files"]], "find_spec() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[248, "importlib.abc.MetaPathFinder.find_spec"]], "find_spec() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[248, "importlib.abc.PathEntryFinder.find_spec"]], "find_spec() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.FileFinder.find_spec"]], "find_spec() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[248, "importlib.machinery.PathFinder.find_spec"]], "find_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util.find_spec"]], "get_code() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.InspectLoader.get_code"]], "get_code() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.SourceLoader.get_code"]], "get_code() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.ExtensionFileLoader.get_code"]], "get_code() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.SourcelessFileLoader.get_code"]], "get_data() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.FileLoader.get_data"]], "get_data() (importlib.abc.resourceloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.ResourceLoader.get_data"]], "get_filename() (importlib.abc.executionloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.ExecutionLoader.get_filename"]], "get_filename() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.FileLoader.get_filename"]], "get_filename() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.ExtensionFileLoader.get_filename"]], "get_source() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.InspectLoader.get_source"]], "get_source() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.SourceLoader.get_source"]], "get_source() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.ExtensionFileLoader.get_source"]], "get_source() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.SourcelessFileLoader.get_source"]], "has_location (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[248, "importlib.machinery.ModuleSpec.has_location"]], "import_module() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[248, "importlib.import_module"]], "importlib": [[248, "module-importlib"]], "importlib.abc": [[248, "module-importlib.abc"]], "importlib.abc.inspectloader.get_source \u65b9\u6cd5": [[248, "index-15"]], "importlib.machinery": [[248, "module-importlib.machinery"]], "importlib.util": [[248, "module-importlib.util"]], "invalidate_caches() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[248, "importlib.abc.MetaPathFinder.invalidate_caches"]], "invalidate_caches() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[248, "importlib.abc.PathEntryFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.FileFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[248, "importlib.machinery.PathFinder.invalidate_caches"]], "invalidate_caches() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[248, "importlib.invalidate_caches"]], "is_dir() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Traversable.is_dir"]], "is_file() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Traversable.is_file"]], "is_package() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.InspectLoader.is_package"]], "is_package() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.SourceLoader.is_package"]], "is_package() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.ExtensionFileLoader.is_package"]], "is_package() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.SourceFileLoader.is_package"]], "is_package() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.SourcelessFileLoader.is_package"]], "is_resource() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.ResourceReader.is_resource"]], "iterdir() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Traversable.iterdir"]], "joinpath() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Traversable.joinpath"]], "load_module() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.FileLoader.load_module"]], "load_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.InspectLoader.load_module"]], "load_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Loader.load_module"]], "load_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.SourceLoader.load_module"]], "load_module() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.SourceFileLoader.load_module"]], "load_module() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.SourcelessFileLoader.load_module"]], "loader (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[248, "importlib.machinery.ModuleSpec.loader"]], "loader_state (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[248, "importlib.machinery.ModuleSpec.loader_state"]], "module_from_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util.module_from_spec"]], "name (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[248, "importlib.abc.FileLoader.name"]], "name (importlib.abc.traversable \u7684\u5c6c\u6027)": [[248, "importlib.abc.Traversable.name"]], "name (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[248, "importlib.machinery.ExtensionFileLoader.name"]], "name (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[248, "importlib.machinery.ModuleSpec.name"]], "name (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[248, "importlib.machinery.SourceFileLoader.name"]], "name (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[248, "importlib.machinery.SourcelessFileLoader.name"]], "open() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Traversable.open"]], "open_resource() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.ResourceReader.open_resource"]], "origin (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[248, "importlib.machinery.ModuleSpec.origin"]], "parent (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[248, "importlib.machinery.ModuleSpec.parent"]], "path (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[248, "importlib.abc.FileLoader.path"]], "path (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[248, "importlib.machinery.ExtensionFileLoader.path"]], "path (importlib.machinery.filefinder \u7684\u5c6c\u6027)": [[248, "importlib.machinery.FileFinder.path"]], "path (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[248, "importlib.machinery.SourceFileLoader.path"]], "path (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[248, "importlib.machinery.SourcelessFileLoader.path"]], "path_hook() (importlib.machinery.filefinder \u7684\u985e\u5225\u65b9\u6cd5)": [[248, "importlib.machinery.FileFinder.path_hook"]], "path_mtime() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.SourceLoader.path_mtime"]], "path_stats() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.SourceLoader.path_stats"]], "path_stats() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.SourceFileLoader.path_stats"]], "read_bytes() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Traversable.read_bytes"]], "read_text() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[248, "importlib.abc.Traversable.read_text"]], "reload() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[248, "importlib.reload"]], "resolve_name() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util.resolve_name"]], "resource_path() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.ResourceReader.resource_path"]], "set_data() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[248, "importlib.abc.SourceLoader.set_data"]], "set_data() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[248, "importlib.machinery.SourceFileLoader.set_data"]], "source_from_cache() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util.source_from_cache"]], "source_hash() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util.source_hash"]], "source_to_code() (importlib.abc.inspectloader \u7684\u975c\u614b\u65b9\u6cd5)": [[248, "importlib.abc.InspectLoader.source_to_code"]], "spec_from_file_location() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util.spec_from_file_location"]], "spec_from_loader() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[248, "importlib.util.spec_from_loader"]], "submodule_search_locations (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[248, "importlib.machinery.ModuleSpec.submodule_search_locations"]], "pep 566": [[249, "index-0"]], "importlib.metadata": [[249, "module-importlib.metadata"]], "anchor (importlib.resources \u4e2d\u7684\u985e\u5225)": [[250, "importlib.resources.Anchor"]], "package (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.Package"]], "resource (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.Resource"]], "as_file() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.as_file"]], "contents() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.contents"]], "files() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.files"]], "importlib.resources": [[250, "module-importlib.resources"]], "is_resource() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.is_resource"]], "open_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.open_binary"]], "open_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.open_text"]], "path() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.path"]], "read_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.read_binary"]], "read_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[250, "importlib.resources.read_text"]], "resourcereader (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[251, "importlib.resources.abc.ResourceReader"]], "traversable (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[251, "importlib.resources.abc.Traversable"]], "traversableresources (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[251, "importlib.resources.abc.TraversableResources"]], "__truediv__() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.Traversable.__truediv__"]], "contents() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.ResourceReader.contents"]], "files() (importlib.resources.abc.traversableresources \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.TraversableResources.files"]], "importlib.resources.abc": [[251, "module-importlib.resources.abc"]], "is_dir() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.Traversable.is_dir"]], "is_file() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.Traversable.is_file"]], "is_resource() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.ResourceReader.is_resource"]], "iterdir() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.Traversable.iterdir"]], "joinpath() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.Traversable.joinpath"]], "name (importlib.resources.abc.traversable \u7684\u5c6c\u6027)": [[251, "importlib.resources.abc.Traversable.name"]], "open() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.Traversable.open"]], "open_resource() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.ResourceReader.open_resource"]], "read_bytes() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.Traversable.read_bytes"]], "read_text() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.Traversable.read_text"]], "resource_path() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[251, "importlib.resources.abc.ResourceReader.resource_path"]], "--details": [[253, "cmdoption-inspect-details"]], "any_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.ANY_CONTIGUOUS"]], "boundarguments (inspect \u4e2d\u7684\u985e\u5225)": [[253, "inspect.BoundArguments"]], "bufferflags (inspect \u4e2d\u7684\u985e\u5225)": [[253, "inspect.BufferFlags"]], "contig (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.CONTIG"]], "contig_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.CONTIG_RO"]], "co_async_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.CO_ASYNC_GENERATOR"]], "co_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.CO_COROUTINE"]], "co_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.CO_GENERATOR"]], "co_iterable_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.CO_ITERABLE_COROUTINE"]], "co_nested (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.CO_NESTED"]], "co_newlocals (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.CO_NEWLOCALS"]], "co_optimized (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.CO_OPTIMIZED"]], "co_varargs (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.CO_VARARGS"]], "co_varkeywords (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.CO_VARKEYWORDS"]], "c_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.C_CONTIGUOUS"]], "format (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.FORMAT"]], "full (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.FULL"]], "full_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.FULL_RO"]], "f_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.F_CONTIGUOUS"]], "frameinfo (inspect \u4e2d\u7684\u985e\u5225)": [[253, "inspect.FrameInfo"]], "indirect (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.INDIRECT"]], "nd (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.ND"]], "parameter (inspect \u4e2d\u7684\u985e\u5225)": [[253, "inspect.Parameter"]], "read (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.READ"]], "records (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.RECORDS"]], "records_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.RECORDS_RO"]], "simple (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.SIMPLE"]], "strided (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.STRIDED"]], "strided_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.STRIDED_RO"]], "strides (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.STRIDES"]], "signature (inspect \u4e2d\u7684\u985e\u5225)": [[253, "inspect.Signature"]], "traceback (inspect \u4e2d\u7684\u985e\u5225)": [[253, "inspect.Traceback"]], "writable (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.WRITABLE"]], "write (inspect.bufferflags \u7684\u5c6c\u6027)": [[253, "inspect.BufferFlags.WRITE"]], "annotation (inspect.parameter \u7684\u5c6c\u6027)": [[253, "inspect.Parameter.annotation"]], "apply_defaults() (inspect.boundarguments \u7684\u65b9\u6cd5)": [[253, "inspect.BoundArguments.apply_defaults"]], "args (inspect.boundarguments \u7684\u5c6c\u6027)": [[253, "inspect.BoundArguments.args"]], "arguments (inspect.boundarguments \u7684\u5c6c\u6027)": [[253, "inspect.BoundArguments.arguments"]], "bind() (inspect.signature \u7684\u65b9\u6cd5)": [[253, "inspect.Signature.bind"]], "bind_partial() (inspect.signature \u7684\u65b9\u6cd5)": [[253, "inspect.Signature.bind_partial"]], "cleandoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.cleandoc"]], "code_context (inspect.frameinfo \u7684\u5c6c\u6027)": [[253, "inspect.FrameInfo.code_context"]], "code_context (inspect.traceback \u7684\u5c6c\u6027)": [[253, "inspect.Traceback.code_context"]], "currentframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.currentframe"]], "default (inspect.parameter \u7684\u5c6c\u6027)": [[253, "inspect.Parameter.default"]], "description (inspect.parameter.kind \u7684\u5c6c\u6027)": [[253, "inspect.Parameter.kind.description"]], "empty (inspect.parameter \u7684\u5c6c\u6027)": [[253, "inspect.Parameter.empty"]], "empty (inspect.signature \u7684\u5c6c\u6027)": [[253, "inspect.Signature.empty"]], "filename (inspect.frameinfo \u7684\u5c6c\u6027)": [[253, "inspect.FrameInfo.filename"]], "filename (inspect.traceback \u7684\u5c6c\u6027)": [[253, "inspect.Traceback.filename"]], "formatargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.formatargvalues"]], "frame (inspect.frameinfo \u7684\u5c6c\u6027)": [[253, "inspect.FrameInfo.frame"]], "from_callable() (inspect.signature \u7684\u985e\u5225\u65b9\u6cd5)": [[253, "inspect.Signature.from_callable"]], "function (inspect.frameinfo \u7684\u5c6c\u6027)": [[253, "inspect.FrameInfo.function"]], "function (inspect.traceback \u7684\u5c6c\u6027)": [[253, "inspect.Traceback.function"]], "get_annotations() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.get_annotations"]], "getargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getargvalues"]], "getasyncgenlocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getasyncgenlocals"]], "getasyncgenstate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getasyncgenstate"]], "getattr_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getattr_static"]], "getcallargs() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getcallargs"]], "getclasstree() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getclasstree"]], "getclosurevars() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getclosurevars"]], "getcomments() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getcomments"]], "getcoroutinelocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getcoroutinelocals"]], "getcoroutinestate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getcoroutinestate"]], "getdoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getdoc"]], "getfile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getfile"]], "getframeinfo() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getframeinfo"]], "getfullargspec() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getfullargspec"]], "getgeneratorlocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getgeneratorlocals"]], "getgeneratorstate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getgeneratorstate"]], "getinnerframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getinnerframes"]], "getmembers() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getmembers"]], "getmembers_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getmembers_static"]], "getmodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getmodule"]], "getmodulename() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getmodulename"]], "getmro() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getmro"]], "getouterframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getouterframes"]], "getsource() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getsource"]], "getsourcefile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getsourcefile"]], "getsourcelines() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.getsourcelines"]], "index (inspect.frameinfo \u7684\u5c6c\u6027)": [[253, "inspect.FrameInfo.index"]], "index (inspect.traceback \u7684\u5c6c\u6027)": [[253, "inspect.Traceback.index"]], "inspect": [[253, "module-inspect"]], "inspect \u547d\u4ee4\u5217\u9078\u9805": [[253, "cmdoption-inspect-details"]], "isabstract() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isabstract"]], "isasyncgen() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isasyncgen"]], "isasyncgenfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isasyncgenfunction"]], "isawaitable() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isawaitable"]], "isbuiltin() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isbuiltin"]], "isclass() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isclass"]], "iscode() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.iscode"]], "iscoroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.iscoroutine"]], "iscoroutinefunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.iscoroutinefunction"]], "isdatadescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isdatadescriptor"]], "isframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isframe"]], "isfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isfunction"]], "isgenerator() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isgenerator"]], "isgeneratorfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isgeneratorfunction"]], "isgetsetdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isgetsetdescriptor"]], "ismemberdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.ismemberdescriptor"]], "ismethod() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.ismethod"]], "ismethoddescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.ismethoddescriptor"]], "ismethodwrapper() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.ismethodwrapper"]], "ismodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.ismodule"]], "isroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.isroutine"]], "istraceback() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.istraceback"]], "kind (inspect.parameter \u7684\u5c6c\u6027)": [[253, "inspect.Parameter.kind"]], "kwargs (inspect.boundarguments \u7684\u5c6c\u6027)": [[253, "inspect.BoundArguments.kwargs"]], "lineno (inspect.frameinfo \u7684\u5c6c\u6027)": [[253, "inspect.FrameInfo.lineno"]], "lineno (inspect.traceback \u7684\u5c6c\u6027)": [[253, "inspect.Traceback.lineno"]], "markcoroutinefunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.markcoroutinefunction"]], "name (inspect.parameter \u7684\u5c6c\u6027)": [[253, "inspect.Parameter.name"]], "parameters (inspect.signature \u7684\u5c6c\u6027)": [[253, "inspect.Signature.parameters"]], "positions (inspect.frameinfo \u7684\u5c6c\u6027)": [[253, "inspect.FrameInfo.positions"]], "positions (inspect.traceback \u7684\u5c6c\u6027)": [[253, "inspect.Traceback.positions"]], "replace() (inspect.parameter \u7684\u65b9\u6cd5)": [[253, "inspect.Parameter.replace"]], "replace() (inspect.signature \u7684\u65b9\u6cd5)": [[253, "inspect.Signature.replace"]], "return_annotation (inspect.signature \u7684\u5c6c\u6027)": [[253, "inspect.Signature.return_annotation"]], "signature (inspect.boundarguments \u7684\u5c6c\u6027)": [[253, "inspect.BoundArguments.signature"]], "signature() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.signature"]], "stack() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.stack"]], "trace() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.trace"]], "unwrap() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[253, "inspect.unwrap"]], "internet\uff08\u7db2\u969b\u7db2\u8def\uff09": [[254, "index-0"]], "world wide web \uff08\u5168\u7403\u8cc7\u8a0a\u7db2\uff09": [[254, "index-0"], [392, "index-0"], [394, "index-0"]], "socket": [[254, "index-1"], [335, "index-0"], [335, "module-socket"]], "bufferediobase (io \u4e2d\u7684\u985e\u5225)": [[256, "io.BufferedIOBase"]], "bufferedrwpair (io \u4e2d\u7684\u985e\u5225)": [[256, "io.BufferedRWPair"]], "bufferedrandom (io \u4e2d\u7684\u985e\u5225)": [[256, "io.BufferedRandom"]], "bufferedreader (io \u4e2d\u7684\u985e\u5225)": [[256, "io.BufferedReader"]], "bufferedwriter (io \u4e2d\u7684\u985e\u5225)": [[256, "io.BufferedWriter"]], "bytesio (io \u4e2d\u7684\u985e\u5225)": [[256, "io.BytesIO"]], "default_buffer_size (\u65bc io \u6a21\u7d44\u4e2d)": [[256, "io.DEFAULT_BUFFER_SIZE"]], "fileio (io \u4e2d\u7684\u985e\u5225)": [[256, "io.FileIO"]], "iobase (io \u4e2d\u7684\u985e\u5225)": [[256, "io.IOBase"]], "incrementalnewlinedecoder (io \u4e2d\u7684\u985e\u5225)": [[256, "io.IncrementalNewlineDecoder"]], "pep 597": [[256, "index-8"], [470, "index-93"], [481, "index-104"]], "pep 686": [[256, "index-1"], [291, "index-5"]], "pythonwarndefaultencoding": [[256, "index-9"], [453, "envvar-PYTHONWARNDEFAULTENCODING"], [453, "index-25"], [470, "index-98"], [481, "index-105"]], "rawiobase (io \u4e2d\u7684\u985e\u5225)": [[256, "io.RawIOBase"]], "stringio (io \u4e2d\u7684\u985e\u5225)": [[256, "io.StringIO"]], "textiobase (io \u4e2d\u7684\u985e\u5225)": [[256, "io.TextIOBase"]], "textiowrapper (io \u4e2d\u7684\u985e\u5225)": [[256, "io.TextIOWrapper"]], "unsupportedoperation": [[256, "io.UnsupportedOperation"]], "__del__() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.__del__"]], "buffer (io.textiobase \u7684\u5c6c\u6027)": [[256, "io.TextIOBase.buffer"]], "close() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.close"]], "closed (io.iobase \u7684\u5c6c\u6027)": [[256, "io.IOBase.closed"]], "detach() (io.bufferediobase \u7684\u65b9\u6cd5)": [[256, "io.BufferedIOBase.detach"]], "detach() (io.textiobase \u7684\u65b9\u6cd5)": [[256, "io.TextIOBase.detach"]], "encoding (io.textiobase \u7684\u5c6c\u6027)": [[256, "io.TextIOBase.encoding"]], "errors (io.textiobase \u7684\u5c6c\u6027)": [[256, "io.TextIOBase.errors"]], "fileno() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.fileno"]], "flush() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[256, "io.BufferedWriter.flush"]], "flush() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.flush"]], "getbuffer() (io.bytesio \u7684\u65b9\u6cd5)": [[256, "io.BytesIO.getbuffer"]], "getvalue() (io.bytesio \u7684\u65b9\u6cd5)": [[256, "io.BytesIO.getvalue"]], "getvalue() (io.stringio \u7684\u65b9\u6cd5)": [[256, "io.StringIO.getvalue"]], "io": [[256, "module-io"], [426, "index-55"]], "io \u6a21\u7d44": [[256, "index-0"]], "io.incrementalnewlinedecoder \u985e\u5225": [[256, "index-5"]], "io.textiowrapper \u985e\u5225": [[256, "index-4"]], "isatty() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.isatty"]], "line_buffering (io.textiowrapper \u7684\u5c6c\u6027)": [[256, "io.TextIOWrapper.line_buffering"]], "mode (io.fileio \u7684\u5c6c\u6027)": [[256, "io.FileIO.mode"]], "name (io.fileio \u7684\u5c6c\u6027)": [[256, "io.FileIO.name"]], "newlines (io.textiobase \u7684\u5c6c\u6027)": [[256, "io.TextIOBase.newlines"]], "open() (\u65bc io \u6a21\u7d44\u4e2d)": [[256, "io.open"]], "open_code() (\u65bc io \u6a21\u7d44\u4e2d)": [[256, "io.open_code"]], "peek() (io.bufferedreader \u7684\u65b9\u6cd5)": [[256, "io.BufferedReader.peek"]], "raw (io.bufferediobase \u7684\u5c6c\u6027)": [[256, "io.BufferedIOBase.raw"]], "read() (io.bufferediobase \u7684\u65b9\u6cd5)": [[256, "io.BufferedIOBase.read"]], "read() (io.bufferedreader \u7684\u65b9\u6cd5)": [[256, "io.BufferedReader.read"]], "read() (io.rawiobase \u7684\u65b9\u6cd5)": [[256, "io.RawIOBase.read"]], "read() (io.textiobase \u7684\u65b9\u6cd5)": [[256, "io.TextIOBase.read"]], "read1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[256, "io.BufferedIOBase.read1"]], "read1() (io.bufferedreader \u7684\u65b9\u6cd5)": [[256, "io.BufferedReader.read1"]], "read1() (io.bytesio \u7684\u65b9\u6cd5)": [[256, "io.BytesIO.read1"]], "readable() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.readable"]], "readall() (io.rawiobase \u7684\u65b9\u6cd5)": [[256, "io.RawIOBase.readall"]], "readinto() (io.bufferediobase \u7684\u65b9\u6cd5)": [[256, "io.BufferedIOBase.readinto"]], "readinto() (io.rawiobase \u7684\u65b9\u6cd5)": [[256, "io.RawIOBase.readinto"]], "readinto1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[256, "io.BufferedIOBase.readinto1"]], "readinto1() (io.bytesio \u7684\u65b9\u6cd5)": [[256, "io.BytesIO.readinto1"]], "readline() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.readline"]], "readline() (io.textiobase \u7684\u65b9\u6cd5)": [[256, "io.TextIOBase.readline"]], "readlines() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.readlines"]], "reconfigure() (io.textiowrapper \u7684\u65b9\u6cd5)": [[256, "io.TextIOWrapper.reconfigure"]], "seek() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.seek"]], "seek() (io.textiobase \u7684\u65b9\u6cd5)": [[256, "io.TextIOBase.seek"]], "seek() (io.textiowrapper \u7684\u65b9\u6cd5)": [[256, "io.TextIOWrapper.seek"]], "seekable() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.seekable"]], "tell() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.tell"]], "tell() (io.textiobase \u7684\u65b9\u6cd5)": [[256, "io.TextIOBase.tell"]], "tell() (io.textiowrapper \u7684\u65b9\u6cd5)": [[256, "io.TextIOWrapper.tell"]], "text_encoding() (\u65bc io \u6a21\u7d44\u4e2d)": [[256, "io.text_encoding"]], "truncate() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.truncate"]], "writable() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.writable"]], "write() (io.bufferediobase \u7684\u65b9\u6cd5)": [[256, "io.BufferedIOBase.write"]], "write() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[256, "io.BufferedWriter.write"]], "write() (io.rawiobase \u7684\u65b9\u6cd5)": [[256, "io.RawIOBase.write"]], "write() (io.textiobase \u7684\u65b9\u6cd5)": [[256, "io.TextIOBase.write"]], "write_through (io.textiowrapper \u7684\u5c6c\u6027)": [[256, "io.TextIOWrapper.write_through"]], "writelines() (io.iobase \u7684\u65b9\u6cd5)": [[256, "io.IOBase.writelines"]], "addressvalueerror": [[257, "ipaddress.AddressValueError"]], "ipv4address (ipaddress \u4e2d\u7684\u985e\u5225)": [[257, "ipaddress.IPv4Address"]], "ipv4interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[257, "ipaddress.IPv4Interface"]], "ipv4network (ipaddress \u4e2d\u7684\u985e\u5225)": [[257, "ipaddress.IPv4Network"]], "ipv6address (ipaddress \u4e2d\u7684\u985e\u5225)": [[257, "ipaddress.IPv6Address"]], "ipv6interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[257, "ipaddress.IPv6Interface"]], "ipv6network (ipaddress \u4e2d\u7684\u985e\u5225)": [[257, "ipaddress.IPv6Network"]], "netmaskvalueerror": [[257, "ipaddress.NetmaskValueError"]], "rfc 2373": [[257, "index-1"], [257, "index-3"], [257, "index-5"]], "rfc 3056": [[257, "index-12"]], "rfc 3171": [[257, "index-0"]], "rfc 3330": [[257, "index-4"]], "rfc 3879": [[257, "index-9"]], "rfc 3927": [[257, "index-6"]], "rfc 4007": [[257, "index-11"], [257, "index-8"]], "rfc 4193": [[257, "index-10"]], "rfc 4291": [[257, "index-7"], [481, "index-89"]], "rfc 4380": [[257, "index-13"]], "rfc 5735": [[257, "index-2"]], "__format__() (ipaddress.ipv4address \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv4Address.__format__"]], "__format__() (ipaddress.ipv6address \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv6Address.__format__"]], "address_exclude() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv4Network.address_exclude"]], "address_exclude() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv6Network.address_exclude"]], "broadcast_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.broadcast_address"]], "broadcast_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.broadcast_address"]], "collapse_addresses() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[257, "ipaddress.collapse_addresses"]], "compare_networks() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv4Network.compare_networks"]], "compare_networks() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv6Network.compare_networks"]], "compressed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.compressed"]], "compressed (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.compressed"]], "compressed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.compressed"]], "compressed (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.compressed"]], "exploded (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.exploded"]], "exploded (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.exploded"]], "exploded (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.exploded"]], "exploded (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.exploded"]], "get_mixed_type_key() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[257, "ipaddress.get_mixed_type_key"]], "hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.hostmask"]], "hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.hostmask"]], "hosts() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv4Network.hosts"]], "hosts() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv6Network.hosts"]], "ip (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Interface.ip"]], "ip (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Interface.ip"]], "ip_address() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[257, "ipaddress.ip_address"]], "ip_interface() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[257, "ipaddress.ip_interface"]], "ip_network() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[257, "ipaddress.ip_network"]], "ipaddress": [[257, "module-ipaddress"]], "ipv4_mapped (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.ipv4_mapped"]], "is_global (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.is_global"]], "is_global (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.is_global"]], "is_link_local (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.is_link_local"]], "is_link_local (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.is_link_local"]], "is_link_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.is_link_local"]], "is_link_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.is_link_local"]], "is_loopback (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.is_loopback"]], "is_loopback (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.is_loopback"]], "is_loopback (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.is_loopback"]], "is_loopback (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.is_loopback"]], "is_multicast (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.is_multicast"]], "is_multicast (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.is_multicast"]], "is_multicast (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.is_multicast"]], "is_multicast (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.is_multicast"]], "is_private (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.is_private"]], "is_private (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.is_private"]], "is_private (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.is_private"]], "is_private (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.is_private"]], "is_reserved (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.is_reserved"]], "is_reserved (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.is_reserved"]], "is_reserved (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.is_reserved"]], "is_reserved (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.is_reserved"]], "is_site_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.is_site_local"]], "is_site_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.is_site_local"]], "is_unspecified (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.is_unspecified"]], "is_unspecified (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.is_unspecified"]], "is_unspecified (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.is_unspecified"]], "is_unspecified (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.is_unspecified"]], "max_prefixlen (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.max_prefixlen"]], "netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.netmask"]], "netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.netmask"]], "network (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Interface.network"]], "network (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Interface.network"]], "network_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.network_address"]], "network_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.network_address"]], "num_addresses (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.num_addresses"]], "num_addresses (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.num_addresses"]], "overlaps() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv4Network.overlaps"]], "overlaps() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv6Network.overlaps"]], "packed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.packed"]], "packed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.packed"]], "prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.prefixlen"]], "prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.prefixlen"]], "reverse_pointer (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.reverse_pointer"]], "reverse_pointer (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.reverse_pointer"]], "scope_id (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.scope_id"]], "sixtofour (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.sixtofour"]], "subnet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv4Network.subnet_of"]], "subnet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv6Network.subnet_of"]], "subnets() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv4Network.subnets"]], "subnets() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv6Network.subnets"]], "summarize_address_range() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[257, "ipaddress.summarize_address_range"]], "supernet() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv4Network.supernet"]], "supernet() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv6Network.supernet"]], "supernet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv4Network.supernet_of"]], "supernet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[257, "ipaddress.IPv6Network.supernet_of"]], "teredo (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.teredo"]], "v4_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[257, "ipaddress.v4_int_to_packed"]], "v6_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[257, "ipaddress.v6_int_to_packed"]], "version (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Address.version"]], "version (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.version"]], "version (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Address.version"]], "version (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.version"]], "with_hostmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.with_hostmask"]], "with_hostmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.with_hostmask"]], "with_netmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Interface.with_netmask"]], "with_netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.with_netmask"]], "with_netmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Interface.with_netmask"]], "with_netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.with_netmask"]], "with_prefixlen (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv4Network.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[257, "ipaddress.IPv6Network.with_prefixlen"]], "accumulate() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.accumulate"]], "batched() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.batched"]], "chain() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.chain"]], "combinations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.combinations"]], "combinations_with_replacement() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.combinations_with_replacement"]], "compress() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.compress"]], "count() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.count"]], "cycle() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.cycle"]], "dropwhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.dropwhile"]], "filterfalse() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.filterfalse"]], "from_iterable() (itertools.chain \u7684\u985e\u5225\u65b9\u6cd5)": [[259, "itertools.chain.from_iterable"]], "groupby() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.groupby"]], "islice() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.islice"]], "itertools": [[259, "module-itertools"]], "pairwise() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.pairwise"]], "permutations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.permutations"]], "product() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.product"]], "repeat() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.repeat"]], "starmap() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.starmap"]], "takewhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.takewhile"]], "tee() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.tee"]], "zip_longest() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[259, "itertools.zip_longest"]], "--compact": [[260, "cmdoption-json.tool-indent"]], "--json-lines": [[260, "cmdoption-json.tool-json-lines"]], "--no-ensure-ascii": [[260, "cmdoption-json.tool-no-ensure-ascii"]], "--no-indent": [[260, "cmdoption-json.tool-indent"]], "--sort-keys": [[260, "cmdoption-json.tool-sort-keys"]], "--tab": [[260, "cmdoption-json.tool-indent"]], "jsondecodeerror": [[260, "json.JSONDecodeError"]], "jsondecoder (json \u4e2d\u7684\u985e\u5225)": [[260, "json.JSONDecoder"]], "jsonencoder (json \u4e2d\u7684\u985e\u5225)": [[260, "json.JSONEncoder"]], "rfc 4627": [[260, "index-3"], [260, "index-8"]], "rfc 7159": [[260, "index-2"], [260, "index-4"], [260, "index-7"]], "colno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[260, "json.JSONDecodeError.colno"]], "decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[260, "json.JSONDecoder.decode"]], "default() (json.jsonencoder \u7684\u65b9\u6cd5)": [[260, "json.JSONEncoder.default"]], "doc (json.jsondecodeerror \u7684\u5c6c\u6027)": [[260, "json.JSONDecodeError.doc"]], "dump() (\u65bc json \u6a21\u7d44\u4e2d)": [[260, "json.dump"]], "dumps() (\u65bc json \u6a21\u7d44\u4e2d)": [[260, "json.dumps"]], "encode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[260, "json.JSONEncoder.encode"]], "infile": [[260, "cmdoption-json.tool-arg-infile"]], "iterencode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[260, "json.JSONEncoder.iterencode"]], "json": [[260, "module-json"], [444, "index-1"]], "json.tool": [[260, "module-json.tool"]], "json.tool \u547d\u4ee4\u5217\u9078\u9805": [[260, "cmdoption-json.tool-arg-infile"], [260, "cmdoption-json.tool-arg-outfile"], [260, "cmdoption-json.tool-h"], [260, "cmdoption-json.tool-indent"], [260, "cmdoption-json.tool-json-lines"], [260, "cmdoption-json.tool-no-ensure-ascii"], [260, "cmdoption-json.tool-sort-keys"]], "lineno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[260, "json.JSONDecodeError.lineno"]], "load() (\u65bc json \u6a21\u7d44\u4e2d)": [[260, "json.load"]], "loads() (\u65bc json \u6a21\u7d44\u4e2d)": [[260, "json.loads"]], "msg (json.jsondecodeerror \u7684\u5c6c\u6027)": [[260, "json.JSONDecodeError.msg"]], "outfile": [[260, "cmdoption-json.tool-arg-outfile"]], "pos (json.jsondecodeerror \u7684\u5c6c\u6027)": [[260, "json.JSONDecodeError.pos"]], "raw_decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[260, "json.JSONDecoder.raw_decode"]], "iskeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[261, "keyword.iskeyword"]], "issoftkeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[261, "keyword.issoftkeyword"]], "keyword": [[261, "module-keyword"]], "kwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[261, "keyword.kwlist"]], "softkwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[261, "keyword.softkwlist"]], "checkcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[263, "linecache.checkcache"]], "clearcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[263, "linecache.clearcache"]], "getline() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[263, "linecache.getline"]], "lazycache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[263, "linecache.lazycache"]], "linecache": [[263, "module-linecache"]], "abday_1 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABDAY_1"]], "abday_2 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABDAY_2"]], "abday_3 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABDAY_3"]], "abday_4 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABDAY_4"]], "abday_5 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABDAY_5"]], "abday_6 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABDAY_6"]], "abday_7 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABDAY_7"]], "abmon_1 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_1"]], "abmon_10 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_10"]], "abmon_11 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_11"]], "abmon_12 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_12"]], "abmon_2 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_2"]], "abmon_3 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_3"]], "abmon_4 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_4"]], "abmon_5 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_5"]], "abmon_6 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_6"]], "abmon_7 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_7"]], "abmon_8 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_8"]], "abmon_9 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ABMON_9"]], "alt_digits (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ALT_DIGITS"]], "char_max (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.CHAR_MAX"]], "codeset (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.CODESET"]], "crncystr (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.CRNCYSTR"]], "day_1 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.DAY_1"]], "day_2 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.DAY_2"]], "day_3 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.DAY_3"]], "day_4 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.DAY_4"]], "day_5 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.DAY_5"]], "day_6 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.DAY_6"]], "day_7 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.DAY_7"]], "d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.D_FMT"]], "d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.D_T_FMT"]], "era (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ERA"]], "era_d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ERA_D_FMT"]], "era_d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ERA_D_T_FMT"]], "era_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.ERA_T_FMT"]], "lc_all (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.LC_ALL"]], "lc_collate (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.LC_COLLATE"]], "lc_ctype (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.LC_CTYPE"]], "lc_messages (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.LC_MESSAGES"]], "lc_monetary (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.LC_MONETARY"]], "lc_numeric (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.LC_NUMERIC"]], "lc_time (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.LC_TIME"]], "mon_1 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_1"]], "mon_10 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_10"]], "mon_11 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_11"]], "mon_12 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_12"]], "mon_2 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_2"]], "mon_3 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_3"]], "mon_4 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_4"]], "mon_5 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_5"]], "mon_6 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_6"]], "mon_7 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_7"]], "mon_8 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_8"]], "mon_9 (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.MON_9"]], "noexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.NOEXPR"]], "radixchar (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.RADIXCHAR"]], "rfc 1766": [[264, "index-4"], [264, "index-5"]], "thousep (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.THOUSEP"]], "t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.T_FMT"]], "t_fmt_ampm (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.T_FMT_AMPM"]], "yesexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.YESEXPR"]], "_locale": [[264, "index-0"]], "atof() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.atof"]], "atoi() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.atoi"]], "bind_textdomain_codeset() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.bind_textdomain_codeset"]], "bindtextdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.bindtextdomain"]], "currency() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.currency"]], "dcgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.dcgettext"]], "delocalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.delocalize"]], "dgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.dgettext"]], "format_string() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.format_string"]], "getdefaultlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.getdefaultlocale"]], "getencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.getencoding"]], "getlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.getlocale"]], "getpreferredencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.getpreferredencoding"]], "gettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.gettext"]], "locale": [[264, "module-locale"]], "localeconv() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.localeconv"]], "localize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.localize"]], "nl_langinfo() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.nl_langinfo"]], "normalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.normalize"]], "resetlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.resetlocale"]], "setlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.setlocale"]], "str() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.str"]], "strcoll() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.strcoll"]], "strxfrm() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.strxfrm"]], "textdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[264, "locale.textdomain"]], "bufferingformatter (logging \u4e2d\u7684\u985e\u5225)": [[265, "logging.BufferingFormatter"]], "critical (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.CRITICAL"]], "debug (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.DEBUG"]], "error (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.ERROR"]], "errors\uff08\u932f\u8aa4\uff09": [[265, "index-0"], [427, "index-15"]], "filter (logging \u4e2d\u7684\u985e\u5225)": [[265, "logging.Filter"]], "formatter (logging \u4e2d\u7684\u985e\u5225)": [[265, "logging.Formatter"]], "handler (logging \u4e2d\u7684\u985e\u5225)": [[265, "logging.Handler"]], "info (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.INFO"]], "logrecord (logging \u4e2d\u7684\u985e\u5225)": [[265, "logging.LogRecord"]], "logger (logging \u4e2d\u7684\u985e\u5225)": [[265, "logging.Logger"]], "loggeradapter (logging \u4e2d\u7684\u985e\u5225)": [[265, "logging.LoggerAdapter"]], "notset (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.NOTSET"]], "pep 282": [[265, "index-1"], [330, "index-2"], [463, "index-11"], [463, "index-12"]], "warning (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.WARNING"]], "__init__() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.__init__"]], "_log (logging.loggeradapter \u7684\u5c6c\u6027)": [[265, "logging.LoggerAdapter._log"]], "acquire() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.acquire"]], "addfilter() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.addFilter"]], "addfilter() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.addFilter"]], "addhandler() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.addHandler"]], "addlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.addLevelName"]], "basicconfig() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.basicConfig"]], "capturewarnings() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.captureWarnings"]], "close() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.close"]], "createlock() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.createLock"]], "critical() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.critical"]], "critical() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.critical"]], "debug() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.debug"]], "debug() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.debug"]], "disable() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.disable"]], "emit() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.emit"]], "error() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.error"]], "error() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.error"]], "exception() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.exception"]], "exception() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.exception"]], "filter() (logging.filter \u7684\u65b9\u6cd5)": [[265, "logging.Filter.filter"]], "filter() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.filter"]], "filter() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.filter"]], "findcaller() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.findCaller"]], "flush() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.flush"]], "format() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[265, "logging.BufferingFormatter.format"]], "format() (logging.formatter \u7684\u65b9\u6cd5)": [[265, "logging.Formatter.format"]], "format() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.format"]], "formatexception() (logging.formatter \u7684\u65b9\u6cd5)": [[265, "logging.Formatter.formatException"]], "formatfooter() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[265, "logging.BufferingFormatter.formatFooter"]], "formatheader() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[265, "logging.BufferingFormatter.formatHeader"]], "formatstack() (logging.formatter \u7684\u65b9\u6cd5)": [[265, "logging.Formatter.formatStack"]], "formattime() (logging.formatter \u7684\u65b9\u6cd5)": [[265, "logging.Formatter.formatTime"]], "getchild() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.getChild"]], "getchildren() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.getChildren"]], "geteffectivelevel() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.getEffectiveLevel"]], "gethandlerbyname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.getHandlerByName"]], "gethandlernames() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.getHandlerNames"]], "getlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.getLevelName"]], "getlevelnamesmapping() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.getLevelNamesMapping"]], "getlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.getLogRecordFactory"]], "getlogger() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.getLogger"]], "getloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.getLoggerClass"]], "getmessage() (logging.logrecord \u7684\u65b9\u6cd5)": [[265, "logging.LogRecord.getMessage"]], "handle() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.handle"]], "handle() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.handle"]], "handleerror() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.handleError"]], "hashandlers() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.hasHandlers"]], "info() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.info"]], "info() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.info"]], "isenabledfor() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.isEnabledFor"]], "lastresort (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.lastResort"]], "log() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.log"]], "log() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.log"]], "logging": [[265, "module-logging"]], "logging\uff08\u65e5\u8a8c\uff09": [[265, "index-0"]], "makelogrecord() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.makeLogRecord"]], "makerecord() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.makeRecord"]], "manager (logging.loggeradapter \u7684\u5c6c\u6027)": [[265, "logging.LoggerAdapter.manager"]], "process() (logging.loggeradapter \u7684\u65b9\u6cd5)": [[265, "logging.LoggerAdapter.process"]], "propagate (logging.logger \u7684\u5c6c\u6027)": [[265, "logging.Logger.propagate"]], "raiseexceptions (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.raiseExceptions"]], "release() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.release"]], "removefilter() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.removeFilter"]], "removefilter() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.removeFilter"]], "removehandler() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.removeHandler"]], "setformatter() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.setFormatter"]], "setlevel() (logging.handler \u7684\u65b9\u6cd5)": [[265, "logging.Handler.setLevel"]], "setlevel() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.setLevel"]], "setlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.setLogRecordFactory"]], "setloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.setLoggerClass"]], "shutdown() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.shutdown"]], "warning() (logging.logger \u7684\u65b9\u6cd5)": [[265, "logging.Logger.warning"]], "warning() (\u65bc logging \u6a21\u7d44\u4e2d)": [[265, "logging.warning"]], "dictconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[266, "logging.config.dictConfig"]], "fileconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[266, "logging.config.fileConfig"]], "listen() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[266, "logging.config.listen"]], "logging.config": [[266, "module-logging.config"]], "stoplistening() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[266, "logging.config.stopListening"]], "baserotatinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.BaseRotatingHandler"]], "bufferinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.BufferingHandler"]], "datagramhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.DatagramHandler"]], "filehandler (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.FileHandler"]], "httphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.HTTPHandler"]], "memoryhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.MemoryHandler"]], "nteventloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.NTEventLogHandler"]], "nullhandler (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.NullHandler"]], "queuehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.QueueHandler"]], "queuelistener (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.QueueListener"]], "rotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.RotatingFileHandler"]], "smtphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.SMTPHandler"]], "sockethandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.SocketHandler"]], "streamhandler (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.StreamHandler"]], "sysloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.SysLogHandler"]], "timedrotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.TimedRotatingFileHandler"]], "watchedfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[267, "logging.handlers.WatchedFileHandler"]], "close() (logging.filehandler \u7684\u65b9\u6cd5)": [[267, "logging.FileHandler.close"]], "close() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.MemoryHandler.close"]], "close() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.NTEventLogHandler.close"]], "close() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SocketHandler.close"]], "close() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SysLogHandler.close"]], "createlock() (logging.nullhandler \u7684\u65b9\u6cd5)": [[267, "logging.NullHandler.createLock"]], "createsocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SocketHandler.createSocket"]], "createsocket() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SysLogHandler.createSocket"]], "dequeue() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[267, "logging.handlers.QueueListener.dequeue"]], "dorollover() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.RotatingFileHandler.doRollover"]], "dorollover() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.TimedRotatingFileHandler.doRollover"]], "emit() (logging.filehandler \u7684\u65b9\u6cd5)": [[267, "logging.FileHandler.emit"]], "emit() (logging.nullhandler \u7684\u65b9\u6cd5)": [[267, "logging.NullHandler.emit"]], "emit() (logging.streamhandler \u7684\u65b9\u6cd5)": [[267, "logging.StreamHandler.emit"]], "emit() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.BufferingHandler.emit"]], "emit() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.DatagramHandler.emit"]], "emit() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.HTTPHandler.emit"]], "emit() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.NTEventLogHandler.emit"]], "emit() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.QueueHandler.emit"]], "emit() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.RotatingFileHandler.emit"]], "emit() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SMTPHandler.emit"]], "emit() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SocketHandler.emit"]], "emit() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SysLogHandler.emit"]], "emit() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.TimedRotatingFileHandler.emit"]], "emit() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.WatchedFileHandler.emit"]], "encodepriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SysLogHandler.encodePriority"]], "enqueue() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.QueueHandler.enqueue"]], "enqueue_sentinel() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[267, "logging.handlers.QueueListener.enqueue_sentinel"]], "flush() (logging.streamhandler \u7684\u65b9\u6cd5)": [[267, "logging.StreamHandler.flush"]], "flush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.BufferingHandler.flush"]], "flush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.MemoryHandler.flush"]], "geteventcategory() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.NTEventLogHandler.getEventCategory"]], "geteventtype() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.NTEventLogHandler.getEventType"]], "getfilestodelete() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.TimedRotatingFileHandler.getFilesToDelete"]], "getmessageid() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.NTEventLogHandler.getMessageID"]], "getsubject() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SMTPHandler.getSubject"]], "handle() (logging.nullhandler \u7684\u65b9\u6cd5)": [[267, "logging.NullHandler.handle"]], "handle() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[267, "logging.handlers.QueueListener.handle"]], "handleerror() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SocketHandler.handleError"]], "listener (logging.handlers.queuehandler \u7684\u5c6c\u6027)": [[267, "logging.handlers.QueueHandler.listener"]], "logging.handlers": [[267, "module-logging.handlers"]], "makepickle() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SocketHandler.makePickle"]], "makesocket() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.DatagramHandler.makeSocket"]], "makesocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SocketHandler.makeSocket"]], "maplogrecord() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.HTTPHandler.mapLogRecord"]], "mappriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SysLogHandler.mapPriority"]], "namer (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[267, "logging.handlers.BaseRotatingHandler.namer"]], "prepare() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.QueueHandler.prepare"]], "prepare() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[267, "logging.handlers.QueueListener.prepare"]], "reopenifneeded() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.WatchedFileHandler.reopenIfNeeded"]], "rotate() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.BaseRotatingHandler.rotate"]], "rotation_filename() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.BaseRotatingHandler.rotation_filename"]], "rotator (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[267, "logging.handlers.BaseRotatingHandler.rotator"]], "send() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.DatagramHandler.send"]], "send() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.SocketHandler.send"]], "setstream() (logging.streamhandler \u7684\u65b9\u6cd5)": [[267, "logging.StreamHandler.setStream"]], "settarget() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.MemoryHandler.setTarget"]], "shouldflush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.BufferingHandler.shouldFlush"]], "shouldflush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[267, "logging.handlers.MemoryHandler.shouldFlush"]], "start() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[267, "logging.handlers.QueueListener.start"]], "stop() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[267, "logging.handlers.QueueListener.stop"]], "terminator (logging.streamhandler \u7684\u5c6c\u6027)": [[267, "logging.StreamHandler.terminator"]], "lzmacompressor (lzma \u4e2d\u7684\u985e\u5225)": [[268, "lzma.LZMACompressor"]], "lzmadecompressor (lzma \u4e2d\u7684\u985e\u5225)": [[268, "lzma.LZMADecompressor"]], "lzmaerror": [[268, "lzma.LZMAError"]], "lzmafile (lzma \u4e2d\u7684\u985e\u5225)": [[268, "lzma.LZMAFile"]], "check (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[268, "lzma.LZMADecompressor.check"]], "compress() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[268, "lzma.LZMACompressor.compress"]], "compress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[268, "lzma.compress"]], "decompress() (lzma.lzmadecompressor \u7684\u65b9\u6cd5)": [[268, "lzma.LZMADecompressor.decompress"]], "decompress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[268, "lzma.decompress"]], "eof (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[268, "lzma.LZMADecompressor.eof"]], "flush() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[268, "lzma.LZMACompressor.flush"]], "is_check_supported() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[268, "lzma.is_check_supported"]], "lzma": [[268, "module-lzma"]], "needs_input (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[268, "lzma.LZMADecompressor.needs_input"]], "open() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[268, "lzma.open"]], "peek() (lzma.lzmafile \u7684\u65b9\u6cd5)": [[268, "lzma.LZMAFile.peek"]], "unused_data (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[268, "lzma.LZMADecompressor.unused_data"]], "babyl (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.Babyl"]], "babylmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.BabylMessage"]], "externalclasherror": [[269, "mailbox.ExternalClashError"]], "formaterror": [[269, "mailbox.FormatError"]], "mh (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.MH"]], "mhmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.MHMessage"]], "mmdf (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.MMDF"]], "mmdfmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.MMDFMessage"]], "mailbox (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.Mailbox"]], "maildir (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.Maildir"]], "maildirmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.MaildirMessage"]], "message (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.Message"]], "nosuchmailboxerror": [[269, "mailbox.NoSuchMailboxError"]], "notemptyerror": [[269, "mailbox.NotEmptyError"]], "__contains__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.__contains__"]], "__delitem__() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.__delitem__"]], "__delitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.__delitem__"]], "__getitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.__getitem__"]], "__iter__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.__iter__"]], "__len__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.__len__"]], "__setitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.__setitem__"]], "__setitem__() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.__setitem__"]], "add() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.add"]], "add() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.add"]], "add_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MMDFMessage.add_flag"]], "add_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MaildirMessage.add_flag"]], "add_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.mboxMessage.add_flag"]], "add_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.add_folder"]], "add_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.add_folder"]], "add_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.BabylMessage.add_label"]], "add_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MHMessage.add_sequence"]], "clean() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.clean"]], "clear() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.clear"]], "close() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.close"]], "close() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.close"]], "close() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.close"]], "colon (mailbox.maildir \u7684\u5c6c\u6027)": [[269, "mailbox.Maildir.colon"]], "discard() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.discard"]], "discard() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.discard"]], "flush() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.flush"]], "flush() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.flush"]], "flush() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.flush"]], "get() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.get"]], "get_bytes() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.get_bytes"]], "get_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MaildirMessage.get_date"]], "get_file() (mailbox.babyl \u7684\u65b9\u6cd5)": [[269, "mailbox.Babyl.get_file"]], "get_file() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.get_file"]], "get_file() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[269, "mailbox.MMDF.get_file"]], "get_file() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.get_file"]], "get_file() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.get_file"]], "get_file() (mailbox.mbox \u7684\u65b9\u6cd5)": [[269, "mailbox.mbox.get_file"]], "get_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MMDFMessage.get_flags"]], "get_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MaildirMessage.get_flags"]], "get_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.mboxMessage.get_flags"]], "get_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.get_folder"]], "get_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.get_folder"]], "get_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MMDFMessage.get_from"]], "get_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.mboxMessage.get_from"]], "get_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MaildirMessage.get_info"]], "get_labels() (mailbox.babyl \u7684\u65b9\u6cd5)": [[269, "mailbox.Babyl.get_labels"]], "get_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.BabylMessage.get_labels"]], "get_message() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.get_message"]], "get_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.get_sequences"]], "get_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MHMessage.get_sequences"]], "get_string() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.get_string"]], "get_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MaildirMessage.get_subdir"]], "get_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.BabylMessage.get_visible"]], "items() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.items"]], "iteritems() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.iteritems"]], "iterkeys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.iterkeys"]], "itervalues() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.itervalues"]], "keys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.keys"]], "list_folders() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.list_folders"]], "list_folders() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.list_folders"]], "lock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[269, "mailbox.Babyl.lock"]], "lock() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.lock"]], "lock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[269, "mailbox.MMDF.lock"]], "lock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.lock"]], "lock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.lock"]], "lock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[269, "mailbox.mbox.lock"]], "mailbox": [[269, "module-mailbox"]], "mbox (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.mbox"]], "mboxmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[269, "mailbox.mboxMessage"]], "pack() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.pack"]], "pop() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.pop"]], "popitem() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.popitem"]], "remove() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.remove"]], "remove() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.remove"]], "remove_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MMDFMessage.remove_flag"]], "remove_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MaildirMessage.remove_flag"]], "remove_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.mboxMessage.remove_flag"]], "remove_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.remove_folder"]], "remove_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.remove_folder"]], "remove_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.BabylMessage.remove_label"]], "remove_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MHMessage.remove_sequence"]], "set_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MaildirMessage.set_date"]], "set_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MMDFMessage.set_flags"]], "set_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MaildirMessage.set_flags"]], "set_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.mboxMessage.set_flags"]], "set_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MMDFMessage.set_from"]], "set_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.mboxMessage.set_from"]], "set_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MaildirMessage.set_info"]], "set_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.BabylMessage.set_labels"]], "set_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.set_sequences"]], "set_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MHMessage.set_sequences"]], "set_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.MaildirMessage.set_subdir"]], "set_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.BabylMessage.set_visible"]], "unlock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[269, "mailbox.Babyl.unlock"]], "unlock() (mailbox.mh \u7684\u65b9\u6cd5)": [[269, "mailbox.MH.unlock"]], "unlock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[269, "mailbox.MMDF.unlock"]], "unlock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.unlock"]], "unlock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.unlock"]], "unlock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[269, "mailbox.mbox.unlock"]], "update() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.update"]], "update() (mailbox.maildir \u7684\u65b9\u6cd5)": [[269, "mailbox.Maildir.update"]], "update_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[269, "mailbox.BabylMessage.update_visible"]], "values() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[269, "mailbox.Mailbox.values"]], "pep 594#mailcap": [[270, "index-0"]], "rfc 1524": [[270, "index-1"], [270, "index-2"]], "findmatch() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[270, "mailcap.findmatch"]], "getcaps() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[270, "mailcap.getcaps"]], "mailcap": [[270, "module-mailcap"]], "dump() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[272, "marshal.dump"]], "dumps() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[272, "marshal.dumps"]], "load() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[272, "marshal.load"]], "loads() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[272, "marshal.loads"]], "marshal": [[272, "module-marshal"]], "shelve": [[272, "index-0"], [328, "module-shelve"]], "version (\u65bc marshal \u6a21\u7d44\u4e2d)": [[272, "marshal.version"]], "acos() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.acos"]], "acosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.acosh"]], "asin() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.asin"]], "asinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.asinh"]], "atan() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.atan"]], "atan2() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.atan2"]], "atanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.atanh"]], "cbrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.cbrt"]], "ceil() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.ceil"]], "comb() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.comb"]], "copysign() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.copysign"]], "cos() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.cos"]], "cosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.cosh"]], "degrees() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.degrees"]], "dist() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.dist"]], "e (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.e"]], "erf() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.erf"]], "erfc() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.erfc"]], "exp() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.exp"]], "exp2() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.exp2"]], "expm1() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.expm1"]], "fabs() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.fabs"]], "factorial() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.factorial"]], "floor() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.floor"]], "fmod() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.fmod"]], "frexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.frexp"]], "fsum() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.fsum"]], "gamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.gamma"]], "gcd() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.gcd"]], "hypot() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.hypot"]], "inf (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.inf"]], "isclose() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.isclose"]], "isfinite() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.isfinite"]], "isinf() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.isinf"]], "isnan() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.isnan"]], "isqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.isqrt"]], "lcm() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.lcm"]], "ldexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.ldexp"]], "lgamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.lgamma"]], "log() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.log"]], "log10() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.log10"]], "log1p() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.log1p"]], "log2() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.log2"]], "math": [[273, "module-math"], [342, "index-15"]], "modf() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.modf"]], "nan (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.nan"]], "nextafter() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.nextafter"]], "perm() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.perm"]], "pi (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.pi"]], "pow() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.pow"]], "prod() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.prod"]], "radians() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.radians"]], "remainder() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.remainder"]], "sin() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.sin"]], "sinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.sinh"]], "sqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.sqrt"]], "sumprod() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.sumprod"]], "tan() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.tan"]], "tanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.tanh"]], "tau (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.tau"]], "trunc() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.trunc"]], "ulp() (\u65bc math \u6a21\u7d44\u4e2d)": [[273, "math.ulp"]], "mimetypes (mimetypes \u4e2d\u7684\u985e\u5225)": [[274, "mimetypes.MimeTypes"]], "add_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.add_type"]], "common_types (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.common_types"]], "content type\uff08\u5167\u5bb9\u985e\u578b\uff09": [[274, "index-0"]], "encodings_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[274, "mimetypes.MimeTypes.encodings_map"]], "encodings_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.encodings_map"]], "guess_all_extensions() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[274, "mimetypes.MimeTypes.guess_all_extensions"]], "guess_all_extensions() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.guess_all_extensions"]], "guess_extension() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[274, "mimetypes.MimeTypes.guess_extension"]], "guess_extension() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.guess_extension"]], "guess_type() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[274, "mimetypes.MimeTypes.guess_type"]], "guess_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.guess_type"]], "init() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.init"]], "inited (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.inited"]], "knownfiles (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.knownfiles"]], "mime.types": [[274, "index-2"]], "mimetypes": [[274, "module-mimetypes"]], "read() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[274, "mimetypes.MimeTypes.read"]], "read_mime_types() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.read_mime_types"]], "read_windows_registry() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[274, "mimetypes.MimeTypes.read_windows_registry"]], "readfp() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[274, "mimetypes.MimeTypes.readfp"]], "suffix_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[274, "mimetypes.MimeTypes.suffix_map"]], "suffix_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.suffix_map"]], "types_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[274, "mimetypes.MimeTypes.types_map"]], "types_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[274, "mimetypes.types_map"]], "types_map_inv (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[274, "mimetypes.MimeTypes.types_map_inv"]], "madv_autosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_AUTOSYNC"]], "madv_core (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_CORE"]], "madv_dodump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_DODUMP"]], "madv_dofork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_DOFORK"]], "madv_dontdump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_DONTDUMP"]], "madv_dontfork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_DONTFORK"]], "madv_dontneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_DONTNEED"]], "madv_free (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_FREE"]], "madv_free_reusable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_FREE_REUSABLE"]], "madv_free_reuse (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_FREE_REUSE"]], "madv_hugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_HUGEPAGE"]], "madv_hwpoison (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_HWPOISON"]], "madv_mergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_MERGEABLE"]], "madv_nocore (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_NOCORE"]], "madv_nohugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_NOHUGEPAGE"]], "madv_normal (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_NORMAL"]], "madv_nosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_NOSYNC"]], "madv_protect (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_PROTECT"]], "madv_random (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_RANDOM"]], "madv_remove (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_REMOVE"]], "madv_sequential (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_SEQUENTIAL"]], "madv_soft_offline (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_SOFT_OFFLINE"]], "madv_unmergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_UNMERGEABLE"]], "madv_willneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MADV_WILLNEED"]], "map_aligned_super (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MAP_ALIGNED_SUPER"]], "map_anon (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MAP_ANON"]], "map_anonymous (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MAP_ANONYMOUS"]], "map_conceal (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MAP_CONCEAL"]], "map_denywrite (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MAP_DENYWRITE"]], "map_executable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MAP_EXECUTABLE"]], "map_populate (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MAP_POPULATE"]], "map_private (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MAP_PRIVATE"]], "map_shared (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MAP_SHARED"]], "map_stack (\u65bc mmap \u6a21\u7d44\u4e2d)": [[276, "mmap.MAP_STACK"]], "close() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.close"]], "closed (mmap.mmap \u7684\u5c6c\u6027)": [[276, "mmap.mmap.closed"]], "find() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.find"]], "flush() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.flush"]], "madvise() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.madvise"]], "mmap": [[276, "module-mmap"]], "mmap (mmap \u4e2d\u7684\u985e\u5225)": [[276, "mmap.mmap"]], "move() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.move"]], "read() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.read"]], "read_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.read_byte"]], "readline() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.readline"]], "resize() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.resize"]], "rfind() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.rfind"]], "seek() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.seek"]], "size() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.size"]], "tell() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.tell"]], "write() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.write"]], "write_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[276, "mmap.mmap.write_byte"]], "addpackagepath() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[277, "modulefinder.AddPackagePath"]], "modulefinder (modulefinder \u4e2d\u7684\u985e\u5225)": [[277, "modulefinder.ModuleFinder"]], "replacepackage() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[277, "modulefinder.ReplacePackage"]], "modulefinder": [[277, "module-modulefinder"]], "modules (modulefinder.modulefinder \u7684\u5c6c\u6027)": [[277, "modulefinder.ModuleFinder.modules"]], "report() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[277, "modulefinder.ModuleFinder.report"]], "run_script() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[277, "modulefinder.ModuleFinder.run_script"]], "binary (msilib \u4e2d\u7684\u985e\u5225)": [[279, "msilib.Binary"]], "cab (msilib \u4e2d\u7684\u985e\u5225)": [[279, "msilib.CAB"]], "cleardata() (msilib.record \u7684\u65b9\u6cd5)": [[279, "msilib.Record.ClearData"]], "close() (msilib.database \u7684\u65b9\u6cd5)": [[279, "msilib.Database.Close"]], "close() (msilib.view \u7684\u65b9\u6cd5)": [[279, "msilib.View.Close"]], "commit() (msilib.database \u7684\u65b9\u6cd5)": [[279, "msilib.Database.Commit"]], "control (msilib \u4e2d\u7684\u985e\u5225)": [[279, "msilib.Control"]], "createrecord() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.CreateRecord"]], "dialog (msilib \u4e2d\u7684\u985e\u5225)": [[279, "msilib.Dialog"]], "directory (msilib \u4e2d\u7684\u985e\u5225)": [[279, "msilib.Directory"]], "execute() (msilib.view \u7684\u65b9\u6cd5)": [[279, "msilib.View.Execute"]], "fcicreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.FCICreate"]], "feature (msilib \u4e2d\u7684\u985e\u5225)": [[279, "msilib.Feature"]], "fetch() (msilib.view \u7684\u65b9\u6cd5)": [[279, "msilib.View.Fetch"]], "getcolumninfo() (msilib.view \u7684\u65b9\u6cd5)": [[279, "msilib.View.GetColumnInfo"]], "getfieldcount() (msilib.record \u7684\u65b9\u6cd5)": [[279, "msilib.Record.GetFieldCount"]], "getinteger() (msilib.record \u7684\u65b9\u6cd5)": [[279, "msilib.Record.GetInteger"]], "getproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[279, "msilib.SummaryInformation.GetProperty"]], "getpropertycount() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[279, "msilib.SummaryInformation.GetPropertyCount"]], "getstring() (msilib.record \u7684\u65b9\u6cd5)": [[279, "msilib.Record.GetString"]], "getsummaryinformation() (msilib.database \u7684\u65b9\u6cd5)": [[279, "msilib.Database.GetSummaryInformation"]], "modify() (msilib.view \u7684\u65b9\u6cd5)": [[279, "msilib.View.Modify"]], "opendatabase() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.OpenDatabase"]], "openview() (msilib.database \u7684\u65b9\u6cd5)": [[279, "msilib.Database.OpenView"]], "pep 594#msilib": [[279, "index-3"]], "persist() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[279, "msilib.SummaryInformation.Persist"]], "radiobuttongroup (msilib \u4e2d\u7684\u985e\u5225)": [[279, "msilib.RadioButtonGroup"]], "setinteger() (msilib.record \u7684\u65b9\u6cd5)": [[279, "msilib.Record.SetInteger"]], "setproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[279, "msilib.SummaryInformation.SetProperty"]], "setstream() (msilib.record \u7684\u65b9\u6cd5)": [[279, "msilib.Record.SetStream"]], "setstring() (msilib.record \u7684\u65b9\u6cd5)": [[279, "msilib.Record.SetString"]], "uuidcreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.UuidCreate"]], "add() (msilib.radiobuttongroup \u7684\u65b9\u6cd5)": [[279, "msilib.RadioButtonGroup.add"]], "add_data() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.add_data"]], "add_file() (msilib.directory \u7684\u65b9\u6cd5)": [[279, "msilib.Directory.add_file"]], "add_stream() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.add_stream"]], "add_tables() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.add_tables"]], "append() (msilib.cab \u7684\u65b9\u6cd5)": [[279, "msilib.CAB.append"]], "bitmap() (msilib.dialog \u7684\u65b9\u6cd5)": [[279, "msilib.Dialog.bitmap"]], "checkbox() (msilib.dialog \u7684\u65b9\u6cd5)": [[279, "msilib.Dialog.checkbox"]], "commit() (msilib.cab \u7684\u65b9\u6cd5)": [[279, "msilib.CAB.commit"]], "condition() (msilib.control \u7684\u65b9\u6cd5)": [[279, "msilib.Control.condition"]], "control() (msilib.dialog \u7684\u65b9\u6cd5)": [[279, "msilib.Dialog.control"]], "event() (msilib.control \u7684\u65b9\u6cd5)": [[279, "msilib.Control.event"]], "gen_uuid() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.gen_uuid"]], "glob() (msilib.directory \u7684\u65b9\u6cd5)": [[279, "msilib.Directory.glob"]], "init_database() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.init_database"]], "line() (msilib.dialog \u7684\u65b9\u6cd5)": [[279, "msilib.Dialog.line"]], "mapping() (msilib.control \u7684\u65b9\u6cd5)": [[279, "msilib.Control.mapping"]], "msi": [[279, "index-0"]], "msilib": [[279, "module-msilib"]], "pushbutton() (msilib.dialog \u7684\u65b9\u6cd5)": [[279, "msilib.Dialog.pushbutton"]], "radiogroup() (msilib.dialog \u7684\u65b9\u6cd5)": [[279, "msilib.Dialog.radiogroup"]], "remove_pyc() (msilib.directory \u7684\u65b9\u6cd5)": [[279, "msilib.Directory.remove_pyc"]], "schema (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.schema"]], "sequence (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.sequence"]], "set_current() (msilib.feature \u7684\u65b9\u6cd5)": [[279, "msilib.Feature.set_current"]], "start_component() (msilib.directory \u7684\u65b9\u6cd5)": [[279, "msilib.Directory.start_component"]], "text (\u65bc msilib \u6a21\u7d44\u4e2d)": [[279, "msilib.text"]], "text() (msilib.dialog \u7684\u65b9\u6cd5)": [[279, "msilib.Dialog.text"]], "crt_assembly_version (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.CRT_ASSEMBLY_VERSION"]], "libraries_assembly_name_prefix (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.LIBRARIES_ASSEMBLY_NAME_PREFIX"]], "lk_lock (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.LK_LOCK"]], "lk_nblck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.LK_NBLCK"]], "lk_nbrlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.LK_NBRLCK"]], "lk_rlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.LK_RLCK"]], "lk_unlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.LK_UNLCK"]], "vc_assembly_publickeytoken (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.VC_ASSEMBLY_PUBLICKEYTOKEN"]], "get_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.get_osfhandle"]], "getch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.getch"]], "getche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.getche"]], "getwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.getwch"]], "getwche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.getwche"]], "heapmin() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.heapmin"]], "kbhit() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.kbhit"]], "locking() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.locking"]], "msvcrt": [[280, "module-msvcrt"]], "open_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.open_osfhandle"]], "putch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.putch"]], "putwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.putwch"]], "setmode() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.setmode"]], "ungetch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.ungetch"]], "ungetwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[280, "msvcrt.ungetwch"]], "array() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.Array"]], "array() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.Array"]], "array() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.sharedctypes.Array"]], "asyncresult (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.pool.AsyncResult"]], "authenticationerror": [[281, "multiprocessing.AuthenticationError"]], "barrier (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.Barrier"]], "barrier() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.Barrier"]], "basemanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.managers.BaseManager"]], "baseproxy (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.managers.BaseProxy"]], "boundedsemaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.BoundedSemaphore"]], "boundedsemaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.BoundedSemaphore"]], "buffertooshort": [[281, "multiprocessing.BufferTooShort"]], "client() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.connection.Client"]], "condition (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.Condition"]], "condition() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.Condition"]], "connection (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.connection.Connection"]], "event (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.Event"]], "event() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.Event"]], "joinablequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.JoinableQueue"]], "listener (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.connection.Listener"]], "lock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.Lock"]], "lock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.Lock"]], "namespace (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.managers.Namespace"]], "namespace() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.Namespace"]], "pipe() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.Pipe"]], "pool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.pool.Pool"]], "process (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.Process"]], "processerror": [[281, "multiprocessing.ProcessError"]], "queue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.Queue"]], "queue() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.Queue"]], "rlock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.RLock"]], "rlock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.RLock"]], "rawarray() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.sharedctypes.RawArray"]], "rawvalue() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.sharedctypes.RawValue"]], "semaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.Semaphore"]], "semaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.Semaphore"]], "simplequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.SimpleQueue"]], "syncmanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.managers.SyncManager"]], "threadpool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.pool.ThreadPool"]], "value() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.Value"]], "value() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.Value"]], "value() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.sharedctypes.Value"]], "__repr__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.BaseProxy.__repr__"]], "__str__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.BaseProxy.__str__"]], "_callmethod() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.BaseProxy._callmethod"]], "_getvalue() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.BaseProxy._getvalue"]], "accept() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[281, "multiprocessing.connection.Listener.accept"]], "acquire() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Lock.acquire"]], "acquire() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[281, "multiprocessing.RLock.acquire"]], "active_children() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.active_children"]], "address (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[281, "multiprocessing.connection.Listener.address"]], "address (multiprocessing.managers.basemanager \u7684\u5c6c\u6027)": [[281, "multiprocessing.managers.BaseManager.address"]], "answer_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.connection.answer_challenge"]], "apply() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.apply"]], "apply_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.apply_async"]], "authkey (multiprocessing.process \u7684\u5c6c\u6027)": [[281, "multiprocessing.Process.authkey"]], "cancel_join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Queue.cancel_join_thread"]], "close() (multiprocessing.process \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Process.close"]], "close() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Queue.close"]], "close() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.SimpleQueue.close"]], "close() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[281, "multiprocessing.connection.Connection.close"]], "close() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[281, "multiprocessing.connection.Listener.close"]], "close() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.close"]], "connect() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.BaseManager.connect"]], "copy() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.sharedctypes.copy"]], "cpu_count() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.cpu_count"]], "current_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.current_process"]], "daemon (multiprocessing.process \u7684\u5c6c\u6027)": [[281, "multiprocessing.Process.daemon"]], "deliver_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.connection.deliver_challenge"]], "dict() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.dict"]], "empty() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Queue.empty"]], "empty() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.SimpleQueue.empty"]], "exitcode (multiprocessing.process \u7684\u5c6c\u6027)": [[281, "multiprocessing.Process.exitcode"]], "fileno() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[281, "multiprocessing.connection.Connection.fileno"]], "freeze_support() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.freeze_support"]], "full() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Queue.full"]], "get() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Queue.get"]], "get() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.SimpleQueue.get"]], "get() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.AsyncResult.get"]], "get_all_start_methods() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.get_all_start_methods"]], "get_context() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.get_context"]], "get_logger() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.get_logger"]], "get_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Queue.get_nowait"]], "get_server() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.BaseManager.get_server"]], "get_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.get_start_method"]], "imap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.imap"]], "imap_unordered() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.imap_unordered"]], "is_alive() (multiprocessing.process \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Process.is_alive"]], "join() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.JoinableQueue.join"]], "join() (multiprocessing.process \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Process.join"]], "join() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.join"]], "join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Queue.join_thread"]], "kill() (multiprocessing.process \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Process.kill"]], "last_accepted (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[281, "multiprocessing.connection.Listener.last_accepted"]], "list() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SyncManager.list"]], "log_to_stderr() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.log_to_stderr"]], "map() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.map"]], "map_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.map_async"]], "multiprocessing": [[281, "module-multiprocessing"]], "multiprocessing.manager()": [[281, "multiprocessing.Manager"]], "multiprocessing.connection": [[281, "module-multiprocessing.connection"]], "multiprocessing.dummy": [[281, "module-multiprocessing.dummy"]], "multiprocessing.managers": [[281, "module-multiprocessing.managers"]], "multiprocessing.pool": [[281, "module-multiprocessing.pool"]], "multiprocessing.sharedctypes": [[281, "module-multiprocessing.sharedctypes"]], "name (multiprocessing.process \u7684\u5c6c\u6027)": [[281, "multiprocessing.Process.name"]], "parent_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.parent_process"]], "pid (multiprocessing.process \u7684\u5c6c\u6027)": [[281, "multiprocessing.Process.pid"]], "poll() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[281, "multiprocessing.connection.Connection.poll"]], "put() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Queue.put"]], "put() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.SimpleQueue.put"]], "put_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Queue.put_nowait"]], "qsize() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Queue.qsize"]], "ready() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.AsyncResult.ready"]], "recv() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[281, "multiprocessing.connection.Connection.recv"]], "recv_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[281, "multiprocessing.connection.Connection.recv_bytes"]], "recv_bytes_into() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[281, "multiprocessing.connection.Connection.recv_bytes_into"]], "register() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.BaseManager.register"]], "release() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Lock.release"]], "release() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[281, "multiprocessing.RLock.release"]], "run() (multiprocessing.process \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Process.run"]], "send() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[281, "multiprocessing.connection.Connection.send"]], "send_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[281, "multiprocessing.connection.Connection.send_bytes"]], "sentinel (multiprocessing.process \u7684\u5c6c\u6027)": [[281, "multiprocessing.Process.sentinel"]], "set_executable() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.set_executable"]], "set_forkserver_preload() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.set_forkserver_preload"]], "set_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.set_start_method"]], "shutdown() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.BaseManager.shutdown"]], "starmap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.starmap"]], "starmap_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.starmap_async"]], "start() (multiprocessing.process \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Process.start"]], "start() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.BaseManager.start"]], "successful() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.AsyncResult.successful"]], "synchronized() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.sharedctypes.synchronized"]], "task_done() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[281, "multiprocessing.JoinableQueue.task_done"]], "terminate() (multiprocessing.process \u7684\u65b9\u6cd5)": [[281, "multiprocessing.Process.terminate"]], "terminate() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.Pool.terminate"]], "wait() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[281, "multiprocessing.pool.AsyncResult.wait"]], "wait() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[281, "multiprocessing.connection.wait"]], "named shared memory\uff08\u9644\u540d\u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[282, "index-0"]], "posix shared memory\uff08posix \u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[282, "index-0"]], "shareablelist (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[282, "multiprocessing.shared_memory.ShareableList"]], "shareablelist() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[282, "multiprocessing.managers.SharedMemoryManager.ShareableList"]], "shared memory\uff08\u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[282, "index-0"]], "sharedmemory (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[282, "multiprocessing.shared_memory.SharedMemory"]], "sharedmemory() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[282, "multiprocessing.managers.SharedMemoryManager.SharedMemory"]], "sharedmemorymanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[282, "multiprocessing.managers.SharedMemoryManager"]], "buf (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[282, "multiprocessing.shared_memory.SharedMemory.buf"]], "close() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[282, "multiprocessing.shared_memory.SharedMemory.close"]], "count() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[282, "multiprocessing.shared_memory.ShareableList.count"]], "format (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[282, "multiprocessing.shared_memory.ShareableList.format"]], "index() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[282, "multiprocessing.shared_memory.ShareableList.index"]], "multiprocessing.shared_memory": [[282, "module-multiprocessing.shared_memory"]], "name (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[282, "multiprocessing.shared_memory.SharedMemory.name"]], "shm (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[282, "multiprocessing.shared_memory.ShareableList.shm"]], "size (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[282, "multiprocessing.shared_memory.SharedMemory.size"]], "unlink() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[282, "multiprocessing.shared_memory.SharedMemory.unlink"]], "netrcparseerror": [[284, "netrc.NetrcParseError"]], "__repr__() (netrc.netrc \u7684\u65b9\u6cd5)": [[284, "netrc.netrc.__repr__"]], "authenticators() (netrc.netrc \u7684\u65b9\u6cd5)": [[284, "netrc.netrc.authenticators"]], "filename (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[284, "netrc.NetrcParseError.filename"]], "hosts (netrc.netrc \u7684\u5c6c\u6027)": [[284, "netrc.netrc.hosts"]], "lineno (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[284, "netrc.NetrcParseError.lineno"]], "macros (netrc.netrc \u7684\u5c6c\u6027)": [[284, "netrc.netrc.macros"]], "msg (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[284, "netrc.NetrcParseError.msg"]], "netrc": [[284, "module-netrc"]], "netrc (netrc \u4e2d\u7684\u985e\u5225)": [[284, "netrc.netrc"]], "pep 594#nis": [[285, "index-2"]], "cat() (\u65bc nis \u6a21\u7d44\u4e2d)": [[285, "nis.cat"]], "get_default_domain() (\u65bc nis \u6a21\u7d44\u4e2d)": [[285, "nis.get_default_domain"]], "maps() (\u65bc nis \u6a21\u7d44\u4e2d)": [[285, "nis.maps"]], "match() (\u65bc nis \u6a21\u7d44\u4e2d)": [[285, "nis.match"]], "nis": [[285, "module-nis"]], "nntp": [[286, "index-0"]], "nntp (nntplib \u4e2d\u7684\u985e\u5225)": [[286, "nntplib.NNTP"]], "nntpdataerror": [[286, "nntplib.NNTPDataError"]], "nntperror": [[286, "nntplib.NNTPError"]], "nntppermanenterror": [[286, "nntplib.NNTPPermanentError"]], "nntpprotocolerror": [[286, "nntplib.NNTPProtocolError"]], "nntpreplyerror": [[286, "nntplib.NNTPReplyError"]], "nntptemporaryerror": [[286, "nntplib.NNTPTemporaryError"]], "nntp_ssl (nntplib \u4e2d\u7684\u985e\u5225)": [[286, "nntplib.NNTP_SSL"]], "network news transfer protocol\uff08\u7db2\u8def\u65b0\u805e\u50b3\u8f38\u5354\u5b9a\uff09": [[286, "index-0"]], "pep 594": [[286, "index-12"], [471, "index-113"], [471, "index-84"], [472, "index-31"], [472, "index-32"], [472, "index-35"], [481, "index-37"], [481, "index-46"], [481, "index-56"], [481, "index-67"], [481, "index-68"], [481, "index-72"]], "rfc 2980": [[286, "index-4"], [286, "index-9"]], "rfc 3977": [[286, "index-10"], [286, "index-2"], [286, "index-6"], [286, "index-7"], [286, "index-8"]], "rfc 4642": [[286, "index-5"]], "rfc 977": [[286, "index-3"]], "article() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.article"]], "body() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.body"]], "date() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.date"]], "decode_header() (\u65bc nntplib \u6a21\u7d44\u4e2d)": [[286, "nntplib.decode_header"]], "description() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.description"]], "descriptions() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.descriptions"]], "getcapabilities() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.getcapabilities"]], "getwelcome() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.getwelcome"]], "group() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.group"]], "head() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.head"]], "help() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.help"]], "ihave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.ihave"]], "last() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.last"]], "list() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.list"]], "login() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.login"]], "newgroups() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.newgroups"]], "newnews() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.newnews"]], "next() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.next"]], "nntp_implementation (nntplib.nntp \u7684\u5c6c\u6027)": [[286, "nntplib.NNTP.nntp_implementation"]], "nntp_version (nntplib.nntp \u7684\u5c6c\u6027)": [[286, "nntplib.NNTP.nntp_version"]], "nntplib": [[286, "module-nntplib"]], "over() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.over"]], "post() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.post"]], "quit() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.quit"]], "response (nntplib.nntperror \u7684\u5c6c\u6027)": [[286, "nntplib.NNTPError.response"]], "set_debuglevel() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.set_debuglevel"]], "slave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.slave"]], "starttls() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.starttls"]], "stat() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.stat"]], "xhdr() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.xhdr"]], "xover() (nntplib.nntp \u7684\u65b9\u6cd5)": [[286, "nntplib.NNTP.xover"]], "complex (numbers \u4e2d\u7684\u985e\u5225)": [[287, "numbers.Complex"]], "integral (numbers \u4e2d\u7684\u985e\u5225)": [[287, "numbers.Integral"]], "number (numbers \u4e2d\u7684\u985e\u5225)": [[287, "numbers.Number"]], "rational (numbers \u4e2d\u7684\u985e\u5225)": [[287, "numbers.Rational"]], "real (numbers \u4e2d\u7684\u985e\u5225)": [[287, "numbers.Real"]], "conjugate() (numbers.complex \u7684\u65b9\u6cd5)": [[287, "numbers.Complex.conjugate"]], "denominator (numbers.rational \u7684\u5c6c\u6027)": [[287, "numbers.Rational.denominator"]], "imag (numbers.complex \u7684\u5c6c\u6027)": [[287, "numbers.Complex.imag"]], "numbers": [[287, "module-numbers"]], "numerator (numbers.rational \u7684\u5c6c\u6027)": [[287, "numbers.Rational.numerator"]], "real (numbers.complex \u7684\u5c6c\u6027)": [[287, "numbers.Complex.real"]], "__abs__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__abs__"]], "__add__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__add__"]], "__and__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__and__"]], "__call__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__call__"]], "__concat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__concat__"]], "__contains__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__contains__"]], "__delitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__delitem__"]], "__eq__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__eq__"]], "__floordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__floordiv__"]], "__ge__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__ge__"]], "__getitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__getitem__"]], "__gt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__gt__"]], "__iadd__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__iadd__"]], "__iand__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__iand__"]], "__iconcat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__iconcat__"]], "__ifloordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__ifloordiv__"]], "__ilshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__ilshift__"]], "__imatmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__imatmul__"]], "__imod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__imod__"]], "__imul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__imul__"]], "__index__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__index__"]], "__inv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__inv__"]], "__invert__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__invert__"]], "__ior__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__ior__"]], "__ipow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__ipow__"]], "__irshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__irshift__"]], "__isub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__isub__"]], "__itruediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__itruediv__"]], "__ixor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__ixor__"]], "__le__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__le__"]], "__lshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__lshift__"]], "__lt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__lt__"]], "__matmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__matmul__"]], "__mod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__mod__"]], "__mul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__mul__"]], "__ne__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__ne__"]], "__neg__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__neg__"]], "__not__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__not__"]], "__or__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__or__"]], "__pos__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__pos__"]], "__pow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__pow__"]], "__rshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__rshift__"]], "__setitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__setitem__"]], "__sub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__sub__"]], "__truediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__truediv__"]], "__xor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.__xor__"]], "abs() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.abs"]], "add() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.add"]], "and_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.and_"]], "attrgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.attrgetter"]], "call() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.call"]], "concat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.concat"]], "contains() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.contains"]], "countof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.countOf"]], "delitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.delitem"]], "eq() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.eq"]], "floordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.floordiv"]], "ge() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.ge"]], "getitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.getitem"]], "gt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.gt"]], "iadd() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.iadd"]], "iand() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.iand"]], "iconcat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.iconcat"]], "ifloordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.ifloordiv"]], "ilshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.ilshift"]], "imatmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.imatmul"]], "imod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.imod"]], "imul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.imul"]], "index() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.index"]], "indexof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.indexOf"]], "inv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.inv"]], "invert() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.invert"]], "ior() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.ior"]], "ipow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.ipow"]], "irshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.irshift"]], "is_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.is_"]], "is_not() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.is_not"]], "isub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.isub"]], "itemgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.itemgetter"]], "itruediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.itruediv"]], "ixor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.ixor"]], "le() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.le"]], "length_hint() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.length_hint"]], "lshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.lshift"]], "lt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.lt"]], "matmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.matmul"]], "methodcaller() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.methodcaller"]], "mod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.mod"]], "mul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.mul"]], "ne() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.ne"]], "neg() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.neg"]], "not_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.not_"]], "operator": [[289, "module-operator"]], "or_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.or_"]], "pos() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.pos"]], "pow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.pow"]], "rshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.rshift"]], "setitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.setitem"]], "sub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.sub"]], "truediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.truediv"]], "truth() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.truth"]], "xor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[289, "operator.xor"]], "actions (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.ACTIONS"]], "always_typed_actions (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.ALWAYS_TYPED_ACTIONS"]], "ambiguousoptionerror": [[290, "optparse.AmbiguousOptionError"]], "badoptionerror": [[290, "optparse.BadOptionError"]], "option (optparse \u4e2d\u7684\u985e\u5225)": [[290, "optparse.Option"]], "optionconflicterror": [[290, "optparse.OptionConflictError"]], "optionerror": [[290, "optparse.OptionError"]], "optiongroup (optparse \u4e2d\u7684\u985e\u5225)": [[290, "optparse.OptionGroup"]], "optionparser (optparse \u4e2d\u7684\u985e\u5225)": [[290, "optparse.OptionParser"]], "optionvalueerror": [[290, "optparse.OptionValueError"]], "store_actions (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.STORE_ACTIONS"]], "typed_actions (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.TYPED_ACTIONS"]], "types (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.TYPES"]], "type_checker (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.TYPE_CHECKER"]], "values (optparse \u4e2d\u7684\u985e\u5225)": [[290, "optparse.Values"]], "action (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.action"]], "add_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.add_option"]], "callback (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.callback"]], "callback_args (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.callback_args"]], "callback_kwargs (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.callback_kwargs"]], "choices (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.choices"]], "const (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.const"]], "default (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.default"]], "dest (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.dest"]], "disable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.disable_interspersed_args"]], "enable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.enable_interspersed_args"]], "get_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.get_option"]], "get_option_group() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.get_option_group"]], "get_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.get_usage"]], "get_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.get_version"]], "has_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.has_option"]], "help (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.help"]], "metavar (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.metavar"]], "nargs (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.nargs"]], "optparse": [[290, "module-optparse"]], "parse_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.parse_args"]], "print_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.print_usage"]], "print_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.print_version"]], "remove_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.remove_option"]], "set_defaults() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.set_defaults"]], "set_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[290, "optparse.OptionParser.set_usage"]], "type (optparse.option \u7684\u5c6c\u6027)": [[290, "optparse.Option.type"]], "..": [[291, "index-46"]], "/ \uff08\u659c\u7dda\uff09": [[291, "index-47"], [291, "index-49"], [342, "index-13"], [425, "index-32"], [428, "index-67"]], ": \uff08\u5192\u865f\uff09": [[291, "index-51"], [338, "index-7"], [343, "index-2"], [425, "index-16"], [425, "index-18"], [425, "index-28"], [425, "index-3"], [425, "index-34"], [425, "index-4"], [425, "index-42"], [425, "index-6"], [425, "index-9"], [428, "index-17"], [428, "index-44"], [428, "index-90"], [433, "index-25"], [434, "index-15"], [439, "index-6"]], "; \uff08\u5206\u865f\uff09": [[291, "index-51"], [425, "index-1"]], "cld_continued (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLD_CONTINUED"]], "cld_dumped (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLD_DUMPED"]], "cld_exited (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLD_EXITED"]], "cld_killed (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLD_KILLED"]], "cld_stopped (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLD_STOPPED"]], "cld_trapped (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLD_TRAPPED"]], "clone_files (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_FILES"]], "clone_fs (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_FS"]], "clone_newcgroup (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_NEWCGROUP"]], "clone_newipc (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_NEWIPC"]], "clone_newnet (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_NEWNET"]], "clone_newns (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_NEWNS"]], "clone_newpid (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_NEWPID"]], "clone_newtime (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_NEWTIME"]], "clone_newuser (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_NEWUSER"]], "clone_newuts (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_NEWUTS"]], "clone_sighand (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_SIGHAND"]], "clone_sysvsem (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_SYSVSEM"]], "clone_thread (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_THREAD"]], "clone_vm (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.CLONE_VM"]], "comspec": [[291, "index-43"], [346, "index-3"]], "direntry (os \u4e2d\u7684\u985e\u5225)": [[291, "os.DirEntry"]], "efd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EFD_CLOEXEC"]], "efd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EFD_NONBLOCK"]], "efd_semaphore (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EFD_SEMAPHORE"]], "ex_cantcreat (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_CANTCREAT"]], "ex_config (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_CONFIG"]], "ex_dataerr (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_DATAERR"]], "ex_ioerr (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_IOERR"]], "ex_nohost (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_NOHOST"]], "ex_noinput (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_NOINPUT"]], "ex_noperm (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_NOPERM"]], "ex_notfound (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_NOTFOUND"]], "ex_nouser (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_NOUSER"]], "ex_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_OK"]], "ex_oserr (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_OSERR"]], "ex_osfile (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_OSFILE"]], "ex_protocol (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_PROTOCOL"]], "ex_software (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_SOFTWARE"]], "ex_tempfail (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_TEMPFAIL"]], "ex_unavailable (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_UNAVAILABLE"]], "ex_usage (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.EX_USAGE"]], "f_lock (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.F_LOCK"]], "f_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.F_OK"]], "f_test (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.F_TEST"]], "f_tlock (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.F_TLOCK"]], "f_ulock (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.F_ULOCK"]], "grnd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.GRND_NONBLOCK"]], "grnd_random (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.GRND_RANDOM"]], "mfd_allow_sealing (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_ALLOW_SEALING"]], "mfd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_CLOEXEC"]], "mfd_hugetlb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGETLB"]], "mfd_huge_16gb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_16GB"]], "mfd_huge_16mb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_16MB"]], "mfd_huge_1gb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_1GB"]], "mfd_huge_1mb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_1MB"]], "mfd_huge_256mb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_256MB"]], "mfd_huge_2gb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_2GB"]], "mfd_huge_2mb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_2MB"]], "mfd_huge_32mb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_32MB"]], "mfd_huge_512kb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_512KB"]], "mfd_huge_512mb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_512MB"]], "mfd_huge_64kb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_64KB"]], "mfd_huge_8mb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_8MB"]], "mfd_huge_mask (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_MASK"]], "mfd_huge_shift (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.MFD_HUGE_SHIFT"]], "o_append (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_APPEND"]], "o_async (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_ASYNC"]], "o_binary (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_BINARY"]], "o_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_CLOEXEC"]], "o_creat (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_CREAT"]], "o_direct (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_DIRECT"]], "o_directory (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_DIRECTORY"]], "o_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_DSYNC"]], "o_evtonly (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_EVTONLY"]], "o_excl (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_EXCL"]], "o_exlock (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_EXLOCK"]], "o_fsync (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_FSYNC"]], "o_ndelay (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_NDELAY"]], "o_noatime (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_NOATIME"]], "o_noctty (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_NOCTTY"]], "o_nofollow (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_NOFOLLOW"]], "o_nofollow_any (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_NOFOLLOW_ANY"]], "o_noinherit (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_NOINHERIT"]], "o_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_NONBLOCK"]], "o_path (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_PATH"]], "o_random (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_RANDOM"]], "o_rdonly (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_RDONLY"]], "o_rdwr (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_RDWR"]], "o_rsync (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_RSYNC"]], "o_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_SEQUENTIAL"]], "o_shlock (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_SHLOCK"]], "o_short_lived (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_SHORT_LIVED"]], "o_symlink (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_SYMLINK"]], "o_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_SYNC"]], "o_temporary (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_TEMPORARY"]], "o_text (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_TEXT"]], "o_tmpfile (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_TMPFILE"]], "o_trunc (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_TRUNC"]], "o_wronly (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.O_WRONLY"]], "pep 524": [[291, "index-53"], [477, "index-1"], [477, "index-31"], [477, "index-32"], [481, "index-267"], [481, "index-268"]], "pidfd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.PIDFD_NONBLOCK"]], "posix_fadv_dontneed (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.POSIX_FADV_DONTNEED"]], "posix_fadv_noreuse (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.POSIX_FADV_NOREUSE"]], "posix_fadv_normal (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.POSIX_FADV_NORMAL"]], "posix_fadv_random (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.POSIX_FADV_RANDOM"]], "posix_fadv_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.POSIX_FADV_SEQUENTIAL"]], "posix_fadv_willneed (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.POSIX_FADV_WILLNEED"]], "posix_spawn_close (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.POSIX_SPAWN_CLOSE"]], "posix_spawn_dup2 (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.POSIX_SPAWN_DUP2"]], "posix_spawn_open (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.POSIX_SPAWN_OPEN"]], "prio_darwin_bg (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.PRIO_DARWIN_BG"]], "prio_darwin_nonui (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.PRIO_DARWIN_NONUI"]], "prio_darwin_process (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.PRIO_DARWIN_PROCESS"]], "prio_darwin_thread (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.PRIO_DARWIN_THREAD"]], "prio_pgrp (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.PRIO_PGRP"]], "prio_process (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.PRIO_PROCESS"]], "prio_user (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.PRIO_USER"]], "p_all (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.P_ALL"]], "p_detach (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.P_DETACH"]], "p_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.P_NOWAIT"]], "p_nowaito (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.P_NOWAITO"]], "p_overlay (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.P_OVERLAY"]], "p_pgid (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.P_PGID"]], "p_pid (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.P_PID"]], "p_pidfd (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.P_PIDFD"]], "p_wait (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.P_WAIT"]], "pathlike (os \u4e2d\u7684\u985e\u5225)": [[291, "os.PathLike"]], "rtld_deepbind (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RTLD_DEEPBIND"]], "rtld_global (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RTLD_GLOBAL"]], "rtld_lazy (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RTLD_LAZY"]], "rtld_local (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RTLD_LOCAL"]], "rtld_nodelete (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RTLD_NODELETE"]], "rtld_noload (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RTLD_NOLOAD"]], "rtld_now (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RTLD_NOW"]], "rwf_append (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RWF_APPEND"]], "rwf_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RWF_DSYNC"]], "rwf_hipri (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RWF_HIPRI"]], "rwf_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RWF_NOWAIT"]], "rwf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.RWF_SYNC"]], "r_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.R_OK"]], "sched_batch (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SCHED_BATCH"]], "sched_fifo (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SCHED_FIFO"]], "sched_idle (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SCHED_IDLE"]], "sched_other (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SCHED_OTHER"]], "sched_reset_on_fork (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SCHED_RESET_ON_FORK"]], "sched_rr (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SCHED_RR"]], "sched_sporadic (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SCHED_SPORADIC"]], "seek_cur (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SEEK_CUR"]], "seek_data (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SEEK_DATA"]], "seek_end (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SEEK_END"]], "seek_hole (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SEEK_HOLE"]], "seek_set (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SEEK_SET"]], "sf_mnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SF_MNOWAIT"]], "sf_nocache (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SF_NOCACHE"]], "sf_nodiskio (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SF_NODISKIO"]], "sf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SF_SYNC"]], "splice_f_more (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SPLICE_F_MORE"]], "splice_f_move (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SPLICE_F_MOVE"]], "splice_f_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.SPLICE_F_NONBLOCK"]], "unc paths\uff08unc \u8def\u5f91\uff09": [[291, "index-28"]], "wcontinued (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WCONTINUED"]], "wcoredump() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WCOREDUMP"]], "wexited (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WEXITED"]], "wexitstatus() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WEXITSTATUS"]], "wifcontinued() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WIFCONTINUED"]], "wifexited() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WIFEXITED"]], "wifsignaled() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WIFSIGNALED"]], "wifstopped() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WIFSTOPPED"]], "wnohang (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WNOHANG"]], "wnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WNOWAIT"]], "wstopped (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WSTOPPED"]], "wstopsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WSTOPSIG"]], "wtermsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WTERMSIG"]], "wuntraced (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.WUNTRACED"]], "w_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.W_OK"]], "xattr_create (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.XATTR_CREATE"]], "xattr_replace (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.XATTR_REPLACE"]], "xattr_size_max (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.XATTR_SIZE_MAX"]], "x_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.X_OK"]], "__fspath__() (os.pathlike \u7684\u65b9\u6cd5)": [[291, "os.PathLike.__fspath__"]], "_exit() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os._exit"]], "abort() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.abort"]], "access() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.access"]], "add_dll_directory() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.add_dll_directory"]], "altsep (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.altsep"]], "changing\uff08\u6539\u8b8a\uff09": [[291, "index-26"]], "chdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.chdir"]], "chflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.chflags"]], "chmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.chmod"]], "chown() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.chown"]], "chroot() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.chroot"]], "close() (os.scandir \u7684\u65b9\u6cd5)": [[291, "os.scandir.close"]], "close() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.close"]], "closerange() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.closerange"]], "columns (os.terminal_size \u7684\u5c6c\u6027)": [[291, "os.terminal_size.columns"]], "confstr() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.confstr"]], "confstr_names (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.confstr_names"]], "copy_file_range() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.copy_file_range"]], "cpu_count() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.cpu_count"]], "creating\uff08\u5efa\u7acb\uff09": [[291, "index-28"]], "ctermid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.ctermid"]], "curdir (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.curdir"]], "defpath (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.defpath"]], "deleting\uff08\u522a\u9664\uff09": [[291, "index-21"], [291, "index-29"], [330, "index-1"]], "device_encoding() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.device_encoding"]], "devnull (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.devnull"]], "directory\uff08\u76ee\u9304\uff09": [[291, "index-26"], [291, "index-28"], [291, "index-29"], [291, "index-31"], [291, "index-32"], [330, "index-1"], [332, "index-1"]], "dup() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.dup"]], "dup2() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.dup2"]], "effective id": [[291, "index-8"]], "environ (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.environ"]], "environb (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.environb"]], "environment variables\uff08\u74b0\u5883\u8b8a\u6578\uff09": [[291, "index-17"], [291, "index-21"]], "eventfd() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.eventfd"]], "eventfd_read() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.eventfd_read"]], "eventfd_write() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.eventfd_write"]], "execl() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.execl"]], "execle() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.execle"]], "execlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.execlp"]], "execlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.execlpe"]], "execv() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.execv"]], "execve() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.execve"]], "execvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.execvp"]], "execvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.execvpe"]], "extsep (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.extsep"]], "fchdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fchdir"]], "fchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fchmod"]], "fchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fchown"]], "fdatasync() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fdatasync"]], "fdopen() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fdopen"]], "fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fork"]], "forkpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.forkpty"]], "fpathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fpathconf"]], "fsdecode() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fsdecode"]], "fsencode() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fsencode"]], "fspath() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fspath"]], "fstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fstat"]], "fstatvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fstatvfs"]], "fsync() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fsync"]], "ftruncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.ftruncate"]], "fwalk() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.fwalk"]], "get_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.get_blocking"]], "get_exec_path() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.get_exec_path"]], "get_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.get_handle_inheritable"]], "get_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.get_inheritable"]], "get_terminal_size() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.get_terminal_size"]], "getcwd() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getcwd"]], "getcwdb() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getcwdb"]], "getegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getegid"]], "getenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getenv"]], "getenvb() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getenvb"]], "geteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.geteuid"]], "getgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getgid"]], "getgrouplist() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getgrouplist"]], "getgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getgroups"]], "gethostbyaddr()\uff08\u65bc socket \u6a21\u7d44\uff09": [[291, "index-20"]], "gethostname()\uff08\u65bc socket \u6a21\u7d44\uff09": [[291, "index-20"]], "getloadavg() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getloadavg"]], "getlogin() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getlogin"]], "getpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getpgid"]], "getpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getpgrp"]], "getpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getpid"]], "getppid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getppid"]], "getpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getpriority"]], "getrandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getrandom"]], "getresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getresgid"]], "getresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getresuid"]], "getsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getsid"]], "getuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getuid"]], "getxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.getxattr"]], "group\uff08\u7fa4\u7d44\uff09": [[291, "index-12"], [291, "index-9"]], "id": [[291, "index-13"], [291, "index-16"], [426, "index-1"]], "id of parent": [[291, "index-14"]], "id, setting\uff08\u8a2d\u5b9a\uff09": [[291, "index-19"]], "in pathnames (windows)\uff08\u5728\u8def\u5f91\u540d\u7a31\u4e2d (windows)\uff09": [[291, "index-48"]], "initgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.initgroups"]], "inode() (os.direntry \u7684\u65b9\u6cd5)": [[291, "os.DirEntry.inode"]], "is_dir() (os.direntry \u7684\u65b9\u6cd5)": [[291, "os.DirEntry.is_dir"]], "is_file() (os.direntry \u7684\u65b9\u6cd5)": [[291, "os.DirEntry.is_file"]], "is_junction() (os.direntry \u7684\u65b9\u6cd5)": [[291, "os.DirEntry.is_junction"]], "is_symlink() (os.direntry \u7684\u65b9\u6cd5)": [[291, "os.DirEntry.is_symlink"]], "isatty() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.isatty"]], "kill() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.kill"]], "killing": [[291, "index-37"], [291, "index-38"]], "killpg() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.killpg"]], "lchflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.lchflags"]], "lchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.lchmod"]], "lchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.lchown"]], "lines (os.terminal_size \u7684\u5c6c\u6027)": [[291, "os.terminal_size.lines"]], "linesep (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.linesep"]], "link() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.link"]], "listdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.listdir"]], "listdrives() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.listdrives"]], "listmounts() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.listmounts"]], "listvolumes() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.listvolumes"]], "listxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.listxattr"]], "lockf() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.lockf"]], "login_tty() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.login_tty"]], "lseek() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.lseek"]], "lstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.lstat"]], "major() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.major"]], "makedev() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.makedev"]], "makedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.makedirs"]], "memfd_create() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.memfd_create"]], "minor() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.minor"]], "mkdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.mkdir"]], "mkfifo() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.mkfifo"]], "mknod() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.mknod"]], "name (os.direntry \u7684\u5c6c\u6027)": [[291, "os.DirEntry.name"]], "name (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.name"]], "nice() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.nice"]], "open() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.open"]], "openpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.openpty"]], "os": [[291, "module-os"], [304, "index-0"]], "pardir (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.pardir"]], "path (os.direntry \u7684\u5c6c\u6027)": [[291, "os.DirEntry.path"]], "path separator (posix)\uff08\u8def\u5f91\u5206\u9694\u5668 (posix)\uff09": [[291, "index-51"]], "pathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.pathconf"]], "pathconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.pathconf_names"]], "pathsep (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.pathsep"]], "pidfd_open() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.pidfd_open"]], "pipe() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.pipe"]], "pipe2() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.pipe2"]], "plock() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.plock"]], "popen() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.popen"]], "posix_fadvise() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.posix_fadvise"]], "posix_fallocate() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.posix_fallocate"]], "posix_spawn() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.posix_spawn"]], "posix_spawnp() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.posix_spawnp"]], "pread() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.pread"]], "preadv() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.preadv"]], "process": [[291, "index-12"], [291, "index-13"], [291, "index-14"], [291, "index-15"], [291, "index-18"], [291, "index-37"], [291, "index-38"], [291, "index-9"]], "pty": [[291, "index-23"], [307, "module-pty"]], "putenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.putenv"]], "pwrite() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.pwrite"]], "pwritev() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.pwritev"]], "read() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.read"]], "readlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.readlink"]], "readv() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.readv"]], "register_at_fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.register_at_fork"]], "remove() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.remove"]], "removedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.removedirs"]], "removexattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.removexattr"]], "rename() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.rename"]], "renames() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.renames"]], "replace() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.replace"]], "rmdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.rmdir"]], "scandir() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.scandir"]], "sched_get_priority_max() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sched_get_priority_max"]], "sched_get_priority_min() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sched_get_priority_min"]], "sched_getaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sched_getaffinity"]], "sched_getparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sched_getparam"]], "sched_getscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sched_getscheduler"]], "sched_param (os \u4e2d\u7684\u985e\u5225)": [[291, "os.sched_param"]], "sched_priority (os.sched_param \u7684\u5c6c\u6027)": [[291, "os.sched_param.sched_priority"]], "sched_rr_get_interval() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sched_rr_get_interval"]], "sched_setaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sched_setaffinity"]], "sched_setparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sched_setparam"]], "sched_setscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sched_setscheduler"]], "sched_yield() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sched_yield"]], "scheduling priority\uff08\u6392\u7a0b\u512a\u5148\u6b0a\uff09": [[291, "index-15"], [291, "index-18"]], "sendfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sendfile"]], "sep (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sep"]], "set_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.set_blocking"]], "set_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.set_handle_inheritable"]], "set_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.set_inheritable"]], "setegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setegid"]], "seteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.seteuid"]], "setgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setgid"]], "setgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setgroups"]], "setns() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setns"]], "setpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setpgid"]], "setpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setpgrp"]], "setpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setpriority"]], "setregid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setregid"]], "setresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setresgid"]], "setresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setresuid"]], "setreuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setreuid"]], "setsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setsid"]], "setting\uff08\u8a2d\u5b9a\uff09": [[291, "index-17"]], "setuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setuid"]], "setxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.setxattr"]], "signalling\uff08\u4fe1\u865f\uff09": [[291, "index-37"], [291, "index-38"]], "spawnl() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.spawnl"]], "spawnle() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.spawnle"]], "spawnlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.spawnlp"]], "spawnlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.spawnlpe"]], "spawnv() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.spawnv"]], "spawnve() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.spawnve"]], "spawnvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.spawnvp"]], "spawnvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.spawnvpe"]], "splice() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.splice"]], "st_atime (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_atime"]], "st_atime_ns (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_atime_ns"]], "st_birthtime (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_birthtime"]], "st_birthtime_ns (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_birthtime_ns"]], "st_blksize (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_blksize"]], "st_blocks (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_blocks"]], "st_creator (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_creator"]], "st_ctime (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_ctime"]], "st_ctime_ns (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_ctime_ns"]], "st_dev (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_dev"]], "st_file_attributes (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_file_attributes"]], "st_flags (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_flags"]], "st_fstype (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_fstype"]], "st_gen (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_gen"]], "st_gid (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_gid"]], "st_ino (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_ino"]], "st_mode (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_mode"]], "st_mtime (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_mtime"]], "st_mtime_ns (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_mtime_ns"]], "st_nlink (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_nlink"]], "st_rdev (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_rdev"]], "st_reparse_tag (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_reparse_tag"]], "st_rsize (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_rsize"]], "st_size (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_size"]], "st_type (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_type"]], "st_uid (os.stat_result \u7684\u5c6c\u6027)": [[291, "os.stat_result.st_uid"]], "startfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.startfile"]], "stat": [[291, "index-30"], [340, "module-stat"]], "stat() (os.direntry \u7684\u65b9\u6cd5)": [[291, "os.DirEntry.stat"]], "stat() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.stat"]], "stat_result (os \u4e2d\u7684\u985e\u5225)": [[291, "os.stat_result"]], "statvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.statvfs"]], "strerror() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.strerror"]], "supports_bytes_environ (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.supports_bytes_environ"]], "supports_dir_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.supports_dir_fd"]], "supports_effective_ids (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.supports_effective_ids"]], "supports_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.supports_fd"]], "supports_follow_symlinks (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.supports_follow_symlinks"]], "symlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.symlink"]], "sync() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sync"]], "sysconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sysconf"]], "sysconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.sysconf_names"]], "system() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.system"]], "tcgetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.tcgetpgrp"]], "tcsetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.tcsetpgrp"]], "terminal_size (os \u4e2d\u7684\u985e\u5225)": [[291, "os.terminal_size"]], "times() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.times"]], "traversal\uff08\u904d\u6b77\uff09": [[291, "index-31"], [291, "index-32"]], "truncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.truncate"]], "ttyname() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.ttyname"]], "umask() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.umask"]], "uname() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.uname"]], "unlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.unlink"]], "unsetenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.unsetenv"]], "unshare() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.unshare"]], "urandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.urandom"]], "user\uff08\u4f7f\u7528\u8005\uff09": [[291, "index-16"], [291, "index-19"], [291, "index-8"]], "utime() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.utime"]], "wait() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.wait"]], "wait3() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.wait3"]], "wait4() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.wait4"]], "waitid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.waitid"]], "waitpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.waitpid"]], "waitstatus_to_exitcode() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.waitstatus_to_exitcode"]], "walk() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.walk"]], "walking": [[291, "index-31"], [291, "index-32"]], "write() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.write"]], "writev() (\u65bc os \u6a21\u7d44\u4e2d)": [[291, "os.writev"]], "\u4ee5\u53ca os.makedirs()": [[291, "index-28"]], "\u65bc pathnames\uff08\u8def\u5f91\u540d\u7a31\uff09\u4e2d": [[291, "index-45"], [291, "index-46"], [291, "index-47"], [291, "index-49"], [291, "index-50"]], "home": [[292, "index-16"], [292, "index-21"], [367, "index-1"], [479, "index-14"], [479, "index-21"], [481, "index-199"], [481, "index-200"]], "homedrive": [[292, "index-19"]], "homepath": [[292, "index-18"]], "userprofile": [[292, "index-17"], [479, "index-13"], [479, "index-20"], [481, "index-198"]], "abspath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.abspath"]], "basename() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.basename"]], "commonpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.commonpath"]], "commonprefix() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.commonprefix"]], "dirname() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.dirname"]], "environment variables expansion (windows)\uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b (windows)\uff09": [[292, "index-9"]], "environment variables expansion\uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b\uff09": [[292, "index-9"]], "exists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.exists"]], "expanduser() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.expanduser"]], "expandvars() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.expandvars"]], "getatime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.getatime"]], "getctime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.getctime"]], "getmtime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.getmtime"]], "getsize() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.getsize"]], "home directory expansion\uff08\u5bb6\u76ee\u9304\u5c55\u958b\uff09": [[292, "index-1"]], "isabs() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.isabs"]], "isdevdrive() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.isdevdrive"]], "isdir() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.isdir"]], "isfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.isfile"]], "isjunction() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.isjunction"]], "islink() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.islink"]], "ismount() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.ismount"]], "join() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.join"]], "lexists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.lexists"]], "normcase() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.normcase"]], "normpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.normpath"]], "operations\uff08\u64cd\u4f5c\uff09": [[292, "index-0"], [294, "index-0"], [342, "index-1"], [342, "index-16"], [342, "index-5"]], "os.path": [[292, "module-os.path"]], "pwd": [[292, "index-2"], [308, "module-pwd"]], "realpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.realpath"]], "relpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.relpath"]], "samefile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.samefile"]], "sameopenfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.sameopenfile"]], "samestat() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.samestat"]], "split() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.split"]], "splitdrive() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.splitdrive"]], "splitext() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.splitext"]], "splitroot() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.splitroot"]], "supports_unicode_filenames (\u65bc os.path \u6a21\u7d44\u4e2d)": [[292, "os.path.supports_unicode_filenames"]], "~ \uff08\u6ce2\u6d6a\u865f\uff09": [[292, "index-1"], [342, "index-16"], [428, "index-62"]], "audiodev": [[293, "index-1"]], "mixerdev": [[293, "index-2"]], "ossaudioerror": [[293, "ossaudiodev.OSSAudioError"]], "pep 594#ossaudiodev": [[293, "index-4"]], "bufsize() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.bufsize"]], "channels() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.channels"]], "close() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.close"]], "close() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_mixer_device.close"]], "closed (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[293, "ossaudiodev.oss_audio_device.closed"]], "controls() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_mixer_device.controls"]], "fileno() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.fileno"]], "fileno() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_mixer_device.fileno"]], "get() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_mixer_device.get"]], "get_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_mixer_device.get_recsrc"]], "getfmts() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.getfmts"]], "mode (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[293, "ossaudiodev.oss_audio_device.mode"]], "name (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[293, "ossaudiodev.oss_audio_device.name"]], "nonblock() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.nonblock"]], "obufcount() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.obufcount"]], "obuffree() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.obuffree"]], "open() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[293, "ossaudiodev.open"]], "openmixer() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[293, "ossaudiodev.openmixer"]], "ossaudiodev": [[293, "module-ossaudiodev"]], "post() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.post"]], "read() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.read"]], "reccontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_mixer_device.reccontrols"]], "reset() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.reset"]], "set() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_mixer_device.set"]], "set_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_mixer_device.set_recsrc"]], "setfmt() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.setfmt"]], "setparameters() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.setparameters"]], "speed() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.speed"]], "stereocontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_mixer_device.stereocontrols"]], "sync() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.sync"]], "write() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.write"]], "writeall() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[293, "ossaudiodev.oss_audio_device.writeall"]], "pep 428": [[294, "index-3"], [475, "index-30"], [475, "index-7"]], "path (pathlib \u4e2d\u7684\u985e\u5225)": [[294, "pathlib.Path"]], "posixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[294, "pathlib.PosixPath"]], "purepath (pathlib \u4e2d\u7684\u985e\u5225)": [[294, "pathlib.PurePath"]], "pureposixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[294, "pathlib.PurePosixPath"]], "purewindowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[294, "pathlib.PureWindowsPath"]], "windowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[294, "pathlib.WindowsPath"]], "absolute() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.absolute"]], "anchor (pathlib.purepath \u7684\u5c6c\u6027)": [[294, "pathlib.PurePath.anchor"]], "as_posix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.as_posix"]], "as_uri() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.as_uri"]], "chmod() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.chmod"]], "cwd() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[294, "pathlib.Path.cwd"]], "drive (pathlib.purepath \u7684\u5c6c\u6027)": [[294, "pathlib.PurePath.drive"]], "exists() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.exists"]], "expanduser() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.expanduser"]], "glob() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.glob"]], "group() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.group"]], "hardlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.hardlink_to"]], "home() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[294, "pathlib.Path.home"]], "is_absolute() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.is_absolute"]], "is_block_device() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.is_block_device"]], "is_char_device() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.is_char_device"]], "is_dir() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.is_dir"]], "is_fifo() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.is_fifo"]], "is_file() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.is_file"]], "is_junction() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.is_junction"]], "is_mount() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.is_mount"]], "is_relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.is_relative_to"]], "is_reserved() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.is_reserved"]], "is_socket() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.is_socket"]], "is_symlink() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.is_symlink"]], "iterdir() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.iterdir"]], "joinpath() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.joinpath"]], "lchmod() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.lchmod"]], "lstat() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.lstat"]], "match() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.match"]], "mkdir() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.mkdir"]], "name (pathlib.purepath \u7684\u5c6c\u6027)": [[294, "pathlib.PurePath.name"]], "open() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.open"]], "owner() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.owner"]], "parent (pathlib.purepath \u7684\u5c6c\u6027)": [[294, "pathlib.PurePath.parent"]], "parents (pathlib.purepath \u7684\u5c6c\u6027)": [[294, "pathlib.PurePath.parents"]], "parts (pathlib.purepath \u7684\u5c6c\u6027)": [[294, "pathlib.PurePath.parts"]], "pathlib": [[294, "module-pathlib"]], "read_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.read_bytes"]], "read_text() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.read_text"]], "readlink() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.readlink"]], "relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.relative_to"]], "rename() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.rename"]], "replace() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.replace"]], "resolve() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.resolve"]], "rglob() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.rglob"]], "rmdir() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.rmdir"]], "root (pathlib.purepath \u7684\u5c6c\u6027)": [[294, "pathlib.PurePath.root"]], "samefile() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.samefile"]], "stat() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.stat"]], "stem (pathlib.purepath \u7684\u5c6c\u6027)": [[294, "pathlib.PurePath.stem"]], "suffix (pathlib.purepath \u7684\u5c6c\u6027)": [[294, "pathlib.PurePath.suffix"]], "suffixes (pathlib.purepath \u7684\u5c6c\u6027)": [[294, "pathlib.PurePath.suffixes"]], "symlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.symlink_to"]], "touch() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.touch"]], "unlink() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.unlink"]], "walk() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.walk"]], "with_name() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.with_name"]], "with_segments() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.with_segments"]], "with_stem() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.with_stem"]], "with_suffix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[294, "pathlib.PurePath.with_suffix"]], "write_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.write_bytes"]], "write_text() (pathlib.path \u7684\u65b9\u6cd5)": [[294, "pathlib.Path.write_text"]], "! (pdb command)": [[295, "pdbcommand-0"]], ".pdbrc": [[295, "index-2"]], "pdb (pdb \u4e2d\u7684\u985e\u5225)": [[295, "pdb.Pdb"]], "pdb\uff08pdb \u4e2d\u7684\u985e\u5225\uff09": [[295, "index-1"]], "alias (pdb command)": [[295, "pdbcommand-alias"]], "args (pdb command)": [[295, "pdbcommand-args"]], "break (pdb command)": [[295, "pdbcommand-break"]], "clear (pdb command)": [[295, "pdbcommand-clear"]], "commands (pdb command)": [[295, "pdbcommand-commands"]], "condition (pdb command)": [[295, "pdbcommand-condition"]], "continue (pdb command)": [[295, "pdbcommand-continue"]], "debug (pdb command)": [[295, "pdbcommand-debug"]], "disable (pdb command)": [[295, "pdbcommand-disable"]], "display (pdb command)": [[295, "pdbcommand-display"]], "down (pdb command)": [[295, "pdbcommand-down"]], "enable (pdb command)": [[295, "pdbcommand-enable"]], "help (pdb command)": [[295, "pdbcommand-help"]], "ignore (pdb command)": [[295, "pdbcommand-ignore"]], "interact (pdb command)": [[295, "pdbcommand-interact"]], "jump (pdb command)": [[295, "pdbcommand-jump"]], "list (pdb command)": [[295, "pdbcommand-list"]], "ll (pdb command)": [[295, "pdbcommand-ll"]], "next (pdb command)": [[295, "pdbcommand-next"]], "p (pdb command)": [[295, "pdbcommand-p"]], "pdb": [[295, "module-pdb"]], "pm() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[295, "pdb.pm"]], "post_mortem() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[295, "pdb.post_mortem"]], "pp (pdb command)": [[295, "pdbcommand-pp"]], "quit (pdb command)": [[295, "pdbcommand-quit"]], "restart (pdb command)": [[295, "pdbcommand-restart"]], "return (pdb command)": [[295, "pdbcommand-return"]], "retval (pdb command)": [[295, "pdbcommand-retval"]], "run (pdb command)": [[295, "pdbcommand-run"]], "run() (pdb.pdb \u7684\u65b9\u6cd5)": [[295, "pdb.Pdb.run"]], "run() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[295, "pdb.run"]], "runcall() (pdb.pdb \u7684\u65b9\u6cd5)": [[295, "pdb.Pdb.runcall"]], "runcall() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[295, "pdb.runcall"]], "runeval() (pdb.pdb \u7684\u65b9\u6cd5)": [[295, "pdb.Pdb.runeval"]], "runeval() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[295, "pdb.runeval"]], "set_trace() (pdb.pdb \u7684\u65b9\u6cd5)": [[295, "pdb.Pdb.set_trace"]], "set_trace() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[295, "pdb.set_trace"]], "source (pdb command)": [[295, "pdbcommand-source"]], "step (pdb command)": [[295, "pdbcommand-step"]], "tbreak (pdb command)": [[295, "pdbcommand-tbreak"]], "unalias (pdb command)": [[295, "pdbcommand-unalias"]], "undisplay (pdb command)": [[295, "pdbcommand-undisplay"]], "until (pdb command)": [[295, "pdbcommand-until"]], "up (pdb command)": [[295, "pdbcommand-up"]], "whatis (pdb command)": [[295, "pdbcommand-whatis"]], "where (pdb command)": [[295, "pdbcommand-where"]], "default_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[297, "pickle.DEFAULT_PROTOCOL"]], "external data representation\uff08\u5916\u90e8\u8cc7\u6599\u8868\u793a\u6cd5\uff09": [[297, "index-1"]], "highest_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[297, "pickle.HIGHEST_PROTOCOL"]], "pep 307": [[297, "index-2"], [463, "index-21"], [463, "index-22"], [463, "index-23"]], "pep 3154": [[297, "index-3"], [475, "index-12"], [475, "index-39"], [481, "index-221"]], "pep 574": [[297, "index-4"], [297, "index-8"], [479, "index-38"]], "picklebuffer (pickle \u4e2d\u7684\u985e\u5225)": [[297, "pickle.PickleBuffer"]], "pickleerror": [[297, "pickle.PickleError"]], "pickler (pickle \u4e2d\u7684\u985e\u5225)": [[297, "pickle.Pickler"]], "picklingerror": [[297, "pickle.PicklingError"]], "unpickler (pickle \u4e2d\u7684\u985e\u5225)": [[297, "pickle.Unpickler"]], "unpicklingerror": [[297, "pickle.UnpicklingError"]], "__getnewargs__() (object \u7684\u65b9\u6cd5)": [[297, "object.__getnewargs__"]], "__getnewargs_ex__() (object \u7684\u65b9\u6cd5)": [[297, "object.__getnewargs_ex__"]], "__getstate__() (object \u7684\u65b9\u6cd5)": [[297, "object.__getstate__"]], "__getstate__()\uff08copy \u5354\u5b9a\uff09": [[297, "index-7"]], "__reduce__() (object \u7684\u65b9\u6cd5)": [[297, "object.__reduce__"]], "__reduce_ex__() (object \u7684\u65b9\u6cd5)": [[297, "object.__reduce_ex__"]], "__setstate__() (object \u7684\u65b9\u6cd5)": [[297, "object.__setstate__"]], "__setstate__()\uff08copy \u5354\u5b9a\uff09": [[297, "index-7"]], "dispatch_table (pickle.pickler \u7684\u5c6c\u6027)": [[297, "pickle.Pickler.dispatch_table"]], "dump() (pickle.pickler \u7684\u65b9\u6cd5)": [[297, "pickle.Pickler.dump"]], "dump() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[297, "pickle.dump"]], "dumps() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[297, "pickle.dumps"]], "fast (pickle.pickler \u7684\u5c6c\u6027)": [[297, "pickle.Pickler.fast"]], "find_class() (pickle.unpickler \u7684\u65b9\u6cd5)": [[297, "pickle.Unpickler.find_class"]], "find_class()\uff08pickle \u5354\u5b9a\uff09": [[297, "index-9"]], "flattening\uff08\u6524\u5e73\uff09": [[297, "index-0"]], "load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[297, "pickle.Unpickler.load"]], "load() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[297, "pickle.load"]], "loads() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[297, "pickle.loads"]], "marshalling": [[297, "index-0"]], "objects\uff08\u7269\u4ef6\uff09": [[297, "index-0"], [342, "index-8"]], "persistence\uff08\u6301\u7e8c\u6027\uff09": [[297, "index-0"]], "persistent_id() (pickle.pickler \u7684\u65b9\u6cd5)": [[297, "pickle.Pickler.persistent_id"]], "persistent_id\uff08pickle \u5354\u5b9a\uff09": [[297, "index-6"]], "persistent_load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[297, "pickle.Unpickler.persistent_load"]], "persistent_load\uff08pickle \u5354\u5b9a\uff09": [[297, "index-6"]], "persistent\uff08\u6301\u7e8c\uff09": [[297, "index-0"]], "pickling": [[297, "index-0"]], "raw() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[297, "pickle.PickleBuffer.raw"]], "reducer_override() (pickle.pickler \u7684\u65b9\u6cd5)": [[297, "pickle.Pickler.reducer_override"]], "release() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[297, "pickle.PickleBuffer.release"]], "serializing\uff08\u5e8f\u5217\u5316\uff09": [[297, "index-0"]], "--annotate": [[298, "cmdoption-pickletools-a"]], "--indentlevel": [[298, "cmdoption-pickletools-l"]], "--memo": [[298, "cmdoption-pickletools-m"]], "--output": [[298, "cmdoption-pickletools-o"], [419, "cmdoption-zipapp-o"]], "--preamble": [[298, "cmdoption-pickletools-p"]], "dis() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[298, "pickletools.dis"]], "genops() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[298, "pickletools.genops"]], "optimize() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[298, "pickletools.optimize"]], "pickletools": [[298, "module-pickletools"]], "pickletools \u547d\u4ee4\u5217\u9078\u9805": [[298, "cmdoption-pickletools-a"], [298, "cmdoption-pickletools-l"], [298, "cmdoption-pickletools-m"], [298, "cmdoption-pickletools-o"], [298, "cmdoption-pickletools-p"]], "pep 594#pipes": [[299, "index-2"]], "template (pipes \u4e2d\u7684\u985e\u5225)": [[299, "pipes.Template"]], "append() (pipes.template \u7684\u65b9\u6cd5)": [[299, "pipes.Template.append"]], "clone() (pipes.template \u7684\u65b9\u6cd5)": [[299, "pipes.Template.clone"]], "copy() (pipes.template \u7684\u65b9\u6cd5)": [[299, "pipes.Template.copy"]], "debug() (pipes.template \u7684\u65b9\u6cd5)": [[299, "pipes.Template.debug"]], "open() (pipes.template \u7684\u65b9\u6cd5)": [[299, "pipes.Template.open"]], "pipes": [[299, "module-pipes"]], "prepend() (pipes.template \u7684\u65b9\u6cd5)": [[299, "pipes.Template.prepend"]], "reset() (pipes.template \u7684\u65b9\u6cd5)": [[299, "pipes.Template.reset"]], "moduleinfo (pkgutil \u4e2d\u7684\u985e\u5225)": [[300, "pkgutil.ModuleInfo"]], "extend_path() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[300, "pkgutil.extend_path"]], "find_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[300, "pkgutil.find_loader"]], "get_data() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[300, "pkgutil.get_data"]], "get_importer() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[300, "pkgutil.get_importer"]], "get_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[300, "pkgutil.get_loader"]], "iter_importers() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[300, "pkgutil.iter_importers"]], "iter_modules() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[300, "pkgutil.iter_modules"]], "pkgutil": [[300, "module-pkgutil"]], "resolve_name() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[300, "pkgutil.resolve_name"]], "walk_packages() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[300, "pkgutil.walk_packages"]], "architecture() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.architecture"]], "freedesktop_os_release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.freedesktop_os_release"]], "java_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.java_ver"]], "libc_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.libc_ver"]], "mac_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.mac_ver"]], "machine() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.machine"]], "node() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.node"]], "platform": [[301, "module-platform"]], "platform() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.platform"]], "processor() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.processor"]], "python_branch() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.python_branch"]], "python_build() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.python_build"]], "python_compiler() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.python_compiler"]], "python_implementation() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.python_implementation"]], "python_revision() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.python_revision"]], "python_version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.python_version"]], "python_version_tuple() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.python_version_tuple"]], "release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.release"]], "system() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.system"]], "system_alias() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.system_alias"]], "uname() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.uname"]], "version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.version"]], "win32_edition() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.win32_edition"]], "win32_is_iot() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.win32_is_iot"]], "win32_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[301, "platform.win32_ver"]], "fmt_binary (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[302, "plistlib.FMT_BINARY"]], "fmt_xml (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[302, "plistlib.FMT_XML"]], "uid (plistlib \u4e2d\u7684\u985e\u5225)": [[302, "plistlib.UID"]], "dump() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[302, "plistlib.dump"]], "dumps() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[302, "plistlib.dumps"]], "load() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[302, "plistlib.load"]], "loads() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[302, "plistlib.loads"]], "plist": [[302, "index-0"]], "plistlib": [[302, "module-plistlib"]], "property list\uff08\u5c6c\u6027\u6e05\u55ae\uff09": [[302, "index-0"]], "pop3": [[303, "index-0"]], "pop3 (poplib \u4e2d\u7684\u985e\u5225)": [[303, "poplib.POP3"]], "pop3_ssl (poplib \u4e2d\u7684\u985e\u5225)": [[303, "poplib.POP3_SSL"]], "rfc 1939": [[303, "index-1"], [303, "index-2"]], "rfc 2449": [[303, "index-4"]], "rfc 2595": [[303, "index-3"], [303, "index-6"]], "rfc 6856": [[303, "index-5"], [476, "index-36"]], "apop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.apop"]], "capa() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.capa"]], "dele() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.dele"]], "getwelcome() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.getwelcome"]], "list() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.list"]], "noop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.noop"]], "pass_() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.pass_"]], "poplib": [[303, "module-poplib"]], "quit() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.quit"]], "retr() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.retr"]], "rpop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.rpop"]], "rset() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.rset"]], "set_debuglevel() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.set_debuglevel"]], "stat() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.stat"]], "stls() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.stls"]], "top() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.top"]], "uidl() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.uidl"]], "user() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.user"]], "utf8() (poplib.pop3 \u7684\u65b9\u6cd5)": [[303, "poplib.POP3.utf8"]], "environ (\u65bc posix \u6a21\u7d44\u4e2d)": [[304, "posix.environ"]], "large files\uff08\u5927\u578b\u6a94\u6848\uff09": [[304, "index-1"]], "prettyprinter (pprint \u4e2d\u7684\u985e\u5225)": [[305, "pprint.PrettyPrinter"]], "eval": [[305, "index-1"], [305, "index-2"], [342, "index-64"], [434, "index-44"], [435, "index-6"]], "format() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[305, "pprint.PrettyPrinter.format"]], "isreadable() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[305, "pprint.PrettyPrinter.isreadable"]], "isreadable() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[305, "pprint.isreadable"]], "isrecursive() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[305, "pprint.PrettyPrinter.isrecursive"]], "isrecursive() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[305, "pprint.isrecursive"]], "pformat() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[305, "pprint.PrettyPrinter.pformat"]], "pformat() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[305, "pprint.pformat"]], "placeholder\uff08\u4f54\u4f4d\u7b26\u865f\uff09": [[305, "index-0"], [319, "index-0"], [362, "index-0"]], "pp() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[305, "pprint.pp"]], "pprint": [[305, "module-pprint"]], "pprint() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[305, "pprint.PrettyPrinter.pprint"]], "pprint() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[305, "pprint.pprint"]], "saferepr() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[305, "pprint.saferepr"]], "profile (profile \u4e2d\u7684\u985e\u5225)": [[306, "profile.Profile"]], "stats (pstats \u4e2d\u7684\u985e\u5225)": [[306, "pstats.Stats"]], "add() (pstats.stats \u7684\u65b9\u6cd5)": [[306, "pstats.Stats.add"]], "cprofile": [[306, "module-cProfile"]], "create_stats() (profile.profile \u7684\u65b9\u6cd5)": [[306, "profile.Profile.create_stats"]], "deterministic profiling": [[306, "index-0"]], "disable() (profile.profile \u7684\u65b9\u6cd5)": [[306, "profile.Profile.disable"]], "dump_stats() (profile.profile \u7684\u65b9\u6cd5)": [[306, "profile.Profile.dump_stats"]], "dump_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[306, "pstats.Stats.dump_stats"]], "enable() (profile.profile \u7684\u65b9\u6cd5)": [[306, "profile.Profile.enable"]], "get_stats_profile() (pstats.stats \u7684\u65b9\u6cd5)": [[306, "pstats.Stats.get_stats_profile"]], "print_callees() (pstats.stats \u7684\u65b9\u6cd5)": [[306, "pstats.Stats.print_callees"]], "print_callers() (pstats.stats \u7684\u65b9\u6cd5)": [[306, "pstats.Stats.print_callers"]], "print_stats() (profile.profile \u7684\u65b9\u6cd5)": [[306, "profile.Profile.print_stats"]], "print_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[306, "pstats.Stats.print_stats"]], "profile": [[306, "module-profile"]], "profiling, deterministic": [[306, "index-0"]], "pstats": [[306, "module-pstats"]], "reverse_order() (pstats.stats \u7684\u65b9\u6cd5)": [[306, "pstats.Stats.reverse_order"]], "run() (profile.profile \u7684\u65b9\u6cd5)": [[306, "profile.Profile.run"]], "run() (\u65bc profile \u6a21\u7d44\u4e2d)": [[306, "profile.run"]], "runcall() (profile.profile \u7684\u65b9\u6cd5)": [[306, "profile.Profile.runcall"]], "runctx() (profile.profile \u7684\u65b9\u6cd5)": [[306, "profile.Profile.runctx"]], "runctx() (\u65bc profile \u6a21\u7d44\u4e2d)": [[306, "profile.runctx"]], "sort_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[306, "pstats.Stats.sort_stats"]], "strip_dirs() (pstats.stats \u7684\u65b9\u6cd5)": [[306, "pstats.Stats.strip_dirs"]], "fork() (\u65bc pty \u6a21\u7d44\u4e2d)": [[307, "pty.fork"]], "openpty() (\u65bc pty \u6a21\u7d44\u4e2d)": [[307, "pty.openpty"]], "spawn() (\u65bc pty \u6a21\u7d44\u4e2d)": [[307, "pty.spawn"]], "getpwall() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[308, "pwd.getpwall"]], "getpwnam() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[308, "pwd.getpwnam"]], "getpwuid() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[308, "pwd.getpwuid"]], "-": [[309, "cmdoption-python-m-py_compile"]], "--quiet": [[309, "cmdoption-python-m-py_compile-q"]], "<file>": [[309, "cmdoption-python-m-py_compile-arg-file"]], "checked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[309, "py_compile.PycInvalidationMode.CHECKED_HASH"]], "pycompileerror": [[309, "py_compile.PyCompileError"]], "pycinvalidationmode (py_compile \u4e2d\u7684\u985e\u5225)": [[309, "py_compile.PycInvalidationMode"]], "timestamp (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[309, "py_compile.PycInvalidationMode.TIMESTAMP"]], "unchecked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[309, "py_compile.PycInvalidationMode.UNCHECKED_HASH"]], "byte-code\uff08\u4f4d\u5143\u7d44\u78bc\uff09": [[309, "index-0"]], "compile() (\u65bc py_compile \u6a21\u7d44\u4e2d)": [[309, "py_compile.compile"]], "py_compile": [[309, "module-py_compile"]], "python--m-py_compile \u547d\u4ee4\u5217\u9078\u9805": [[309, "cmdoption-python-m-py_compile"], [309, "cmdoption-python-m-py_compile-arg-file"], [309, "cmdoption-python-m-py_compile-q"]], "class (pyclbr \u4e2d\u7684\u985e\u5225)": [[310, "pyclbr.Class"]], "function (pyclbr \u4e2d\u7684\u985e\u5225)": [[310, "pyclbr.Function"]], "children (pyclbr.class \u7684\u5c6c\u6027)": [[310, "pyclbr.Class.children"]], "children (pyclbr.function \u7684\u5c6c\u6027)": [[310, "pyclbr.Function.children"]], "file (pyclbr.class \u7684\u5c6c\u6027)": [[310, "pyclbr.Class.file"]], "file (pyclbr.function \u7684\u5c6c\u6027)": [[310, "pyclbr.Function.file"]], "is_async (pyclbr.function \u7684\u5c6c\u6027)": [[310, "pyclbr.Function.is_async"]], "lineno (pyclbr.class \u7684\u5c6c\u6027)": [[310, "pyclbr.Class.lineno"]], "lineno (pyclbr.function \u7684\u5c6c\u6027)": [[310, "pyclbr.Function.lineno"]], "methods (pyclbr.class \u7684\u5c6c\u6027)": [[310, "pyclbr.Class.methods"]], "module (pyclbr.class \u7684\u5c6c\u6027)": [[310, "pyclbr.Class.module"]], "module (pyclbr.function \u7684\u5c6c\u6027)": [[310, "pyclbr.Function.module"]], "name (pyclbr.class \u7684\u5c6c\u6027)": [[310, "pyclbr.Class.name"]], "name (pyclbr.function \u7684\u5c6c\u6027)": [[310, "pyclbr.Function.name"]], "parent (pyclbr.class \u7684\u5c6c\u6027)": [[310, "pyclbr.Class.parent"]], "parent (pyclbr.function \u7684\u5c6c\u6027)": [[310, "pyclbr.Function.parent"]], "pyclbr": [[310, "module-pyclbr"]], "readmodule() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[310, "pyclbr.readmodule"]], "readmodule_ex() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[310, "pyclbr.readmodule_ex"]], "super (pyclbr.class \u7684\u5c6c\u6027)": [[310, "pyclbr.Class.super"]], "pager": [[311, "index-1"]], "pythondocs": [[311, "index-2"]], "documentation\uff08\u6587\u4ef6\uff09": [[311, "index-0"]], "generation\uff08\u7522\u751f\uff09": [[311, "index-0"]], "help\uff08\u5e6b\u52a9\uff09": [[311, "index-0"], [449, "index-0"]], "online\uff08\u7dda\u4e0a\uff09": [[311, "index-0"]], "pydoc": [[311, "module-pydoc"]], "attlistdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.AttlistDeclHandler"]], "characterdatahandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.CharacterDataHandler"]], "commenthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.CommentHandler"]], "currentbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.CurrentByteIndex"]], "currentcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.CurrentColumnNumber"]], "currentlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.CurrentLineNumber"]], "defaulthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.DefaultHandler"]], "defaulthandlerexpand() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.DefaultHandlerExpand"]], "elementdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.ElementDeclHandler"]], "endcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.EndCdataSectionHandler"]], "enddoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.EndDoctypeDeclHandler"]], "endelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.EndElementHandler"]], "endnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.EndNamespaceDeclHandler"]], "entitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.EntityDeclHandler"]], "errorbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.ErrorByteIndex"]], "errorcode (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.ErrorCode"]], "errorcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.ErrorColumnNumber"]], "errorlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.ErrorLineNumber"]], "errorstring() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.ErrorString"]], "expat": [[312, "index-0"]], "expaterror": [[312, "xml.parsers.expat.ExpatError"]], "externalentityparsercreate() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.ExternalEntityParserCreate"]], "externalentityrefhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.ExternalEntityRefHandler"]], "getbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.GetBase"]], "getinputcontext() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.GetInputContext"]], "notstandalonehandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.NotStandaloneHandler"]], "notationdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.NotationDeclHandler"]], "parse() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.Parse"]], "parsefile() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.ParseFile"]], "parsercreate() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.ParserCreate"]], "processinginstructionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.ProcessingInstructionHandler"]], "setbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.SetBase"]], "setparamentityparsing() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.SetParamEntityParsing"]], "startcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.StartCdataSectionHandler"]], "startdoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.StartDoctypeDeclHandler"]], "startelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.StartElementHandler"]], "startnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.StartNamespaceDeclHandler"]], "unparsedentitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.UnparsedEntityDeclHandler"]], "useforeigndtd() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.UseForeignDTD"]], "xmlparsertype (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.XMLParserType"]], "xml_error_aborted (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_ABORTED"]], "xml_error_amplification_limit_breach (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_AMPLIFICATION_LIMIT_BREACH"]], "xml_error_async_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY"]], "xml_error_attribute_external_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"]], "xml_error_bad_char_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"]], "xml_error_binary_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF"]], "xml_error_cant_change_feature_once_parsing (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"]], "xml_error_duplicate_attribute (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"]], "xml_error_entity_declared_in_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE"]], "xml_error_external_entity_handling (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING"]], "xml_error_feature_requires_xml_dtd (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"]], "xml_error_finished (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_FINISHED"]], "xml_error_incomplete_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"]], "xml_error_incorrect_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING"]], "xml_error_invalid_argument (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_INVALID_ARGUMENT"]], "xml_error_invalid_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"]], "xml_error_junk_after_doc_element (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"]], "xml_error_misplaced_xml_pi (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"]], "xml_error_not_standalone (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"]], "xml_error_not_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"]], "xml_error_no_buffer (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_NO_BUFFER"]], "xml_error_no_elements (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"]], "xml_error_no_memory (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"]], "xml_error_param_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF"]], "xml_error_partial_char (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR"]], "xml_error_publicid (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_PUBLICID"]], "xml_error_recursive_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"]], "xml_error_reserved_namespace_uri (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_RESERVED_NAMESPACE_URI"]], "xml_error_reserved_prefix_xml (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XML"]], "xml_error_reserved_prefix_xmlns (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XMLNS"]], "xml_error_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_SUSPENDED"]], "xml_error_suspend_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE"]], "xml_error_syntax (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_SYNTAX"]], "xml_error_tag_mismatch (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"]], "xml_error_text_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"]], "xml_error_unbound_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"]], "xml_error_unclosed_cdata_section (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"]], "xml_error_unclosed_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"]], "xml_error_undeclaring_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"]], "xml_error_undefined_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"]], "xml_error_unexpected_state (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE"]], "xml_error_unknown_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"]], "xml_error_xml_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.XML_ERROR_XML_DECL"]], "xmldeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[312, "xml.parsers.expat.xmlparser.XmlDeclHandler"]], "buffer_size (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.buffer_size"]], "buffer_text (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.buffer_text"]], "buffer_used (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.buffer_used"]], "code (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.ExpatError.code"]], "codes (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.codes"]], "lineno (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.ExpatError.lineno"]], "messages (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[312, "xml.parsers.expat.errors.messages"]], "offset (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.ExpatError.offset"]], "ordered_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.ordered_attributes"]], "pyexpat": [[312, "index-1"]], "specified_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[312, "xml.parsers.expat.xmlparser.specified_attributes"]], "xml.parsers.expat": [[312, "module-xml.parsers.expat"]], "xml.parsers.expat.errors": [[312, "module-xml.parsers.expat.errors"]], "xml.parsers.expat.model": [[312, "module-xml.parsers.expat.model"]], "empty": [[314, "queue.Empty"], [428, "index-15"], [428, "index-9"]], "full": [[314, "queue.Full"]], "lifoqueue (queue \u4e2d\u7684\u985e\u5225)": [[314, "queue.LifoQueue"]], "priorityqueue (queue \u4e2d\u7684\u985e\u5225)": [[314, "queue.PriorityQueue"]], "queue (queue \u4e2d\u7684\u985e\u5225)": [[314, "queue.Queue"]], "simplequeue (queue \u4e2d\u7684\u985e\u5225)": [[314, "queue.SimpleQueue"]], "empty() (queue.queue \u7684\u65b9\u6cd5)": [[314, "queue.Queue.empty"]], "empty() (queue.simplequeue \u7684\u65b9\u6cd5)": [[314, "queue.SimpleQueue.empty"]], "full() (queue.queue \u7684\u65b9\u6cd5)": [[314, "queue.Queue.full"]], "get() (queue.queue \u7684\u65b9\u6cd5)": [[314, "queue.Queue.get"]], "get() (queue.simplequeue \u7684\u65b9\u6cd5)": [[314, "queue.SimpleQueue.get"]], "get_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[314, "queue.Queue.get_nowait"]], "get_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[314, "queue.SimpleQueue.get_nowait"]], "join() (queue.queue \u7684\u65b9\u6cd5)": [[314, "queue.Queue.join"]], "put() (queue.queue \u7684\u65b9\u6cd5)": [[314, "queue.Queue.put"]], "put() (queue.simplequeue \u7684\u65b9\u6cd5)": [[314, "queue.SimpleQueue.put"]], "put_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[314, "queue.Queue.put_nowait"]], "put_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[314, "queue.SimpleQueue.put_nowait"]], "qsize() (queue.queue \u7684\u65b9\u6cd5)": [[314, "queue.Queue.qsize"]], "qsize() (queue.simplequeue \u7684\u65b9\u6cd5)": [[314, "queue.SimpleQueue.qsize"]], "queue": [[314, "module-queue"]], "task_done() (queue.queue \u7684\u65b9\u6cd5)": [[314, "queue.Queue.task_done"]], "decode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[315, "quopri.decode"]], "decodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[315, "quopri.decodestring"]], "encode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[315, "quopri.encode"]], "encodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[315, "quopri.encodestring"]], "quopri": [[315, "module-quopri"]], "quoted-printable encoding\uff08\u53ef\u5217\u5370\u5b57\u5143\u7de8\u78bc\uff09": [[315, "index-0"]], "quoted-printable\uff08\u53ef\u5217\u5370\u5b57\u5143\uff09": [[315, "index-0"]], "random (random \u4e2d\u7684\u985e\u5225)": [[316, "random.Random"]], "systemrandom (random \u4e2d\u7684\u985e\u5225)": [[316, "random.SystemRandom"]], "betavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.betavariate"]], "binomialvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.binomialvariate"]], "choice() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.choice"]], "choices() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.choices"]], "expovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.expovariate"]], "gammavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.gammavariate"]], "gauss() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.gauss"]], "getrandbits() (random.random \u7684\u65b9\u6cd5)": [[316, "random.Random.getrandbits"]], "getrandbits() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.getrandbits"]], "getstate() (random.random \u7684\u65b9\u6cd5)": [[316, "random.Random.getstate"]], "getstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.getstate"]], "lognormvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.lognormvariate"]], "normalvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.normalvariate"]], "paretovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.paretovariate"]], "randbytes() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.randbytes"]], "randint() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.randint"]], "random": [[316, "module-random"]], "random() (random.random \u7684\u65b9\u6cd5)": [[316, "random.Random.random"]], "random() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.random"]], "randrange() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.randrange"]], "sample() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.sample"]], "seed() (random.random \u7684\u65b9\u6cd5)": [[316, "random.Random.seed"]], "seed() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.seed"]], "setstate() (random.random \u7684\u65b9\u6cd5)": [[316, "random.Random.setstate"]], "setstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.setstate"]], "shuffle() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.shuffle"]], "triangular() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.triangular"]], "uniform() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.uniform"]], "vonmisesvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.vonmisesvariate"]], "weibullvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[316, "random.weibullvariate"]], "() \uff08\u5713\u62ec\u865f\uff09": [[317, "index-15"], [342, "index-36"], [342, "index-46"], [425, "index-28"], [425, "index-42"], [428, "index-22"], [428, "index-47"], [428, "index-8"], [434, "index-6"]], "(?": [[317, "index-16"]], "(?!": [[317, "index-22"]], "(?#": [[317, "index-20"]], "(?(": [[317, "index-25"]], "(?:": [[317, "index-17"]], "(?<!": [[317, "index-24"]], "(?<=": [[317, "index-23"]], "(?=": [[317, "index-21"]], "(?p<": [[317, "index-18"]], "(?p=": [[317, "index-19"]], "*+": [[317, "index-7"]], "*?": [[317, "index-6"]], "++": [[317, "index-7"]], "+?": [[317, "index-6"]], "?+": [[317, "index-7"]], "??": [[317, "index-6"]], "a (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.A"]], "ascii (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.ASCII"]], "debug (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.DEBUG"]], "dotall (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.DOTALL"]], "i (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.I"]], "ignorecase (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.IGNORECASE"]], "l (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.L"]], "locale (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.LOCALE"]], "m (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.M"]], "multiline (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.MULTILINE"]], "match (re \u4e2d\u7684\u985e\u5225)": [[317, "re.Match"]], "noflag (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.NOFLAG"]], "pattern (re \u4e2d\u7684\u985e\u5225)": [[317, "re.Pattern"]], "regexflag (re \u4e2d\u7684\u985e\u5225)": [[317, "re.RegexFlag"]], "s (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.S"]], "u (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.U"]], "unicode (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.UNICODE"]], "verbose (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.VERBOSE"]], "x (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.X"]], "\\a": [[317, "index-27"], [317, "index-37"], [433, "index-23"]], "\\b": [[317, "index-29"], [317, "index-28"], [317, "index-37"], [433, "index-23"]], "\\d": [[317, "index-31"], [317, "index-30"]], "\\s": [[317, "index-33"], [317, "index-32"]], "\\w": [[317, "index-35"], [317, "index-34"]], "\\z": [[317, "index-36"]], "\\\\": [[317, "index-37"], [433, "index-23"]], "\\f": [[317, "index-37"], [433, "index-23"]], "\\g": [[317, "index-39"]], "\\r": [[317, "index-37"], [433, "index-23"]], "\\t": [[317, "index-37"], [433, "index-23"]], "\\v": [[317, "index-37"], [433, "index-23"]], "__getitem__() (re.match \u7684\u65b9\u6cd5)": [[317, "re.Match.__getitem__"]], "colno (re.error \u7684\u5c6c\u6027)": [[317, "re.error.colno"]], "compile() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.compile"]], "end() (re.match \u7684\u65b9\u6cd5)": [[317, "re.Match.end"]], "endpos (re.match \u7684\u5c6c\u6027)": [[317, "re.Match.endpos"]], "escape() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.escape"]], "expand() (re.match \u7684\u65b9\u6cd5)": [[317, "re.Match.expand"]], "findall() (re.pattern \u7684\u65b9\u6cd5)": [[317, "re.Pattern.findall"]], "findall() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.findall"]], "finditer() (re.pattern \u7684\u65b9\u6cd5)": [[317, "re.Pattern.finditer"]], "finditer() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.finditer"]], "flags (re.pattern \u7684\u5c6c\u6027)": [[317, "re.Pattern.flags"]], "fullmatch() (re.pattern \u7684\u65b9\u6cd5)": [[317, "re.Pattern.fullmatch"]], "fullmatch() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.fullmatch"]], "group() (re.match \u7684\u65b9\u6cd5)": [[317, "re.Match.group"]], "groupdict() (re.match \u7684\u65b9\u6cd5)": [[317, "re.Match.groupdict"]], "groupindex (re.pattern \u7684\u5c6c\u6027)": [[317, "re.Pattern.groupindex"]], "groups (re.pattern \u7684\u5c6c\u6027)": [[317, "re.Pattern.groups"]], "groups() (re.match \u7684\u65b9\u6cd5)": [[317, "re.Match.groups"]], "lastgroup (re.match \u7684\u5c6c\u6027)": [[317, "re.Match.lastgroup"]], "lastindex (re.match \u7684\u5c6c\u6027)": [[317, "re.Match.lastindex"]], "lineno (re.error \u7684\u5c6c\u6027)": [[317, "re.error.lineno"]], "match() (re.pattern \u7684\u65b9\u6cd5)": [[317, "re.Pattern.match"]], "match() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.match"]], "msg (re.error \u7684\u5c6c\u6027)": [[317, "re.error.msg"]], "pattern (re.pattern \u7684\u5c6c\u6027)": [[317, "re.Pattern.pattern"]], "pattern (re.error \u7684\u5c6c\u6027)": [[317, "re.error.pattern"]], "pos (re.match \u7684\u5c6c\u6027)": [[317, "re.Match.pos"]], "pos (re.error \u7684\u5c6c\u6027)": [[317, "re.error.pos"]], "purge() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.purge"]], "re (re.match \u7684\u5c6c\u6027)": [[317, "re.Match.re"]], "scanf (c function)": [[317, "index-40"]], "search() (re.pattern \u7684\u65b9\u6cd5)": [[317, "re.Pattern.search"]], "search() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.search"]], "span() (re.match \u7684\u65b9\u6cd5)": [[317, "re.Match.span"]], "split() (re.pattern \u7684\u65b9\u6cd5)": [[317, "re.Pattern.split"]], "split() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.split"]], "start() (re.match \u7684\u65b9\u6cd5)": [[317, "re.Match.start"]], "string (re.match \u7684\u5c6c\u6027)": [[317, "re.Match.string"]], "sub() (re.pattern \u7684\u65b9\u6cd5)": [[317, "re.Pattern.sub"]], "sub() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.sub"]], "subn() (re.pattern \u7684\u65b9\u6cd5)": [[317, "re.Pattern.subn"]], "subn() (\u65bc re \u6a21\u7d44\u4e2d)": [[317, "re.subn"]], "{} \uff08\u82b1\u62ec\u865f\uff09": [[317, "index-8"], [343, "index-2"], [428, "index-16"], [428, "index-17"], [433, "index-25"]], "| \uff08\u5782\u76f4\u7dda\uff09": [[317, "index-14"], [342, "index-16"], [428, "index-76"]], "\u65bc\u6b63\u898f\u8868\u793a\u5f0f\u4e2d": [[317, "index-0"], [317, "index-1"], [317, "index-10"], [317, "index-11"], [317, "index-12"], [317, "index-13"], [317, "index-14"], [317, "index-15"], [317, "index-16"], [317, "index-17"], [317, "index-18"], [317, "index-19"], [317, "index-2"], [317, "index-20"], [317, "index-21"], [317, "index-22"], [317, "index-23"], [317, "index-24"], [317, "index-25"], [317, "index-26"], [317, "index-27"], [317, "index-28"], [317, "index-29"], [317, "index-3"], [317, "index-30"], [317, "index-31"], [317, "index-32"], [317, "index-33"], [317, "index-34"], [317, "index-35"], [317, "index-36"], [317, "index-37"], [317, "index-38"], [317, "index-39"], [317, "index-4"], [317, "index-5"], [317, "index-6"], [317, "index-7"], [317, "index-8"], [317, "index-9"]], "add_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.add_history"]], "append_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.append_history_file"]], "clear_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.clear_history"]], "get_begidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.get_begidx"]], "get_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.get_completer"]], "get_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.get_completer_delims"]], "get_completion_type() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.get_completion_type"]], "get_current_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.get_current_history_length"]], "get_endidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.get_endidx"]], "get_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.get_history_item"]], "get_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.get_history_length"]], "get_line_buffer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.get_line_buffer"]], "insert_text() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.insert_text"]], "parse_and_bind() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.parse_and_bind"]], "read_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.read_history_file"]], "read_init_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.read_init_file"]], "readline": [[318, "module-readline"]], "redisplay() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.redisplay"]], "remove_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.remove_history_item"]], "replace_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.replace_history_item"]], "set_auto_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.set_auto_history"]], "set_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.set_completer"]], "set_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.set_completer_delims"]], "set_completion_display_matches_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.set_completion_display_matches_hook"]], "set_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.set_history_length"]], "set_pre_input_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.set_pre_input_hook"]], "set_startup_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.set_startup_hook"]], "write_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[318, "readline.write_history_file"]], "repr (reprlib \u4e2d\u7684\u985e\u5225)": [[319, "reprlib.Repr"]], "arepr (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[319, "reprlib.aRepr"]], "fillvalue (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.fillvalue"]], "indent (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.indent"]], "maxarray (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxarray"]], "maxdeque (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxdeque"]], "maxdict (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxdict"]], "maxfrozenset (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxfrozenset"]], "maxlevel (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxlevel"]], "maxlist (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxlist"]], "maxlong (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxlong"]], "maxother (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxother"]], "maxset (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxset"]], "maxstring (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxstring"]], "maxtuple (reprlib.repr \u7684\u5c6c\u6027)": [[319, "reprlib.Repr.maxtuple"]], "recursive_repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[319, "reprlib.recursive_repr"]], "repr() (reprlib.repr \u7684\u65b9\u6cd5)": [[319, "reprlib.Repr.repr"]], "repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[319, "reprlib.repr"]], "repr1() (reprlib.repr \u7684\u65b9\u6cd5)": [[319, "reprlib.Repr.repr1"]], "reprlib": [[319, "module-reprlib"]], "rlimit_as (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_AS"]], "rlimit_core (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_CORE"]], "rlimit_cpu (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_CPU"]], "rlimit_data (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_DATA"]], "rlimit_fsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_FSIZE"]], "rlimit_kqueues (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_KQUEUES"]], "rlimit_memlock (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_MEMLOCK"]], "rlimit_msgqueue (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_MSGQUEUE"]], "rlimit_nice (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_NICE"]], "rlimit_nofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_NOFILE"]], "rlimit_nproc (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_NPROC"]], "rlimit_npts (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_NPTS"]], "rlimit_ofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_OFILE"]], "rlimit_rss (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_RSS"]], "rlimit_rtprio (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_RTPRIO"]], "rlimit_rttime (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_RTTIME"]], "rlimit_sbsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_SBSIZE"]], "rlimit_sigpending (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_SIGPENDING"]], "rlimit_stack (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_STACK"]], "rlimit_swap (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_SWAP"]], "rlimit_vmem (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIMIT_VMEM"]], "rlim_infinity (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RLIM_INFINITY"]], "rusage_both (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RUSAGE_BOTH"]], "rusage_children (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RUSAGE_CHILDREN"]], "rusage_self (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RUSAGE_SELF"]], "rusage_thread (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.RUSAGE_THREAD"]], "getpagesize() (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.getpagesize"]], "getrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.getrlimit"]], "getrusage() (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.getrusage"]], "prlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.prlimit"]], "resource": [[320, "module-resource"]], "setrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[320, "resource.setrlimit"]], "completer (rlcompleter \u4e2d\u7684\u985e\u5225)": [[321, "rlcompleter.Completer"]], "complete() (rlcompleter.completer \u7684\u65b9\u6cd5)": [[321, "rlcompleter.Completer.complete"]], "rlcompleter": [[321, "module-rlcompleter"]], "pep 338": [[322, "index-6"], [430, "index-26"], [453, "index-0"], [465, "index-7"]], "run_module() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[322, "runpy.run_module"]], "run_path() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[322, "runpy.run_path"]], "runpy": [[322, "module-runpy"]], "cancel() (sched.scheduler \u7684\u65b9\u6cd5)": [[323, "sched.scheduler.cancel"]], "empty() (sched.scheduler \u7684\u65b9\u6cd5)": [[323, "sched.scheduler.empty"]], "enter() (sched.scheduler \u7684\u65b9\u6cd5)": [[323, "sched.scheduler.enter"]], "enterabs() (sched.scheduler \u7684\u65b9\u6cd5)": [[323, "sched.scheduler.enterabs"]], "event scheduling\uff08\u4e8b\u4ef6\u6392\u7a0b\uff09": [[323, "index-0"]], "queue (sched.scheduler \u7684\u5c6c\u6027)": [[323, "sched.scheduler.queue"]], "run() (sched.scheduler \u7684\u65b9\u6cd5)": [[323, "sched.scheduler.run"]], "sched": [[323, "module-sched"]], "scheduler (sched \u4e2d\u7684\u985e\u5225)": [[323, "sched.scheduler"]], "pep 506": [[324, "index-0"], [477, "index-28"], [481, "index-287"]], "systemrandom (secrets \u4e2d\u7684\u985e\u5225)": [[324, "secrets.SystemRandom"]], "choice() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[324, "secrets.choice"]], "compare_digest() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[324, "secrets.compare_digest"]], "randbelow() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[324, "secrets.randbelow"]], "randbits() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[324, "secrets.randbits"]], "secrets": [[324, "module-secrets"]], "token_bytes() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[324, "secrets.token_bytes"]], "token_hex() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[324, "secrets.token_hex"]], "token_urlsafe() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[324, "secrets.token_urlsafe"]], "security considerations\uff08\u5b89\u5168\u6027\u6ce8\u610f\u4e8b\u9805\uff09": [[325, "index-0"]], "pipe_buf (\u65bc select \u6a21\u7d44\u4e2d)": [[326, "select.PIPE_BUF"]], "winsock": [[326, "index-2"]], "close() (select.devpoll \u7684\u65b9\u6cd5)": [[326, "select.devpoll.close"]], "close() (select.epoll \u7684\u65b9\u6cd5)": [[326, "select.epoll.close"]], "close() (select.kqueue \u7684\u65b9\u6cd5)": [[326, "select.kqueue.close"]], "closed (select.devpoll \u7684\u5c6c\u6027)": [[326, "select.devpoll.closed"]], "closed (select.epoll \u7684\u5c6c\u6027)": [[326, "select.epoll.closed"]], "closed (select.kqueue \u7684\u5c6c\u6027)": [[326, "select.kqueue.closed"]], "control() (select.kqueue \u7684\u65b9\u6cd5)": [[326, "select.kqueue.control"]], "data (select.kevent \u7684\u5c6c\u6027)": [[326, "select.kevent.data"]], "devpoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[326, "select.devpoll"]], "epoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[326, "select.epoll"]], "fflags (select.kevent \u7684\u5c6c\u6027)": [[326, "select.kevent.fflags"]], "fileno() (select.devpoll \u7684\u65b9\u6cd5)": [[326, "select.devpoll.fileno"]], "fileno() (select.epoll \u7684\u65b9\u6cd5)": [[326, "select.epoll.fileno"]], "fileno() (select.kqueue \u7684\u65b9\u6cd5)": [[326, "select.kqueue.fileno"]], "filter (select.kevent \u7684\u5c6c\u6027)": [[326, "select.kevent.filter"]], "flags (select.kevent \u7684\u5c6c\u6027)": [[326, "select.kevent.flags"]], "fromfd() (select.epoll \u7684\u65b9\u6cd5)": [[326, "select.epoll.fromfd"]], "fromfd() (select.kqueue \u7684\u65b9\u6cd5)": [[326, "select.kqueue.fromfd"]], "ident (select.kevent \u7684\u5c6c\u6027)": [[326, "select.kevent.ident"]], "kevent() (\u65bc select \u6a21\u7d44\u4e2d)": [[326, "select.kevent"]], "kqueue() (\u65bc select \u6a21\u7d44\u4e2d)": [[326, "select.kqueue"]], "modify() (select.devpoll \u7684\u65b9\u6cd5)": [[326, "select.devpoll.modify"]], "modify() (select.epoll \u7684\u65b9\u6cd5)": [[326, "select.epoll.modify"]], "modify() (select.poll \u7684\u65b9\u6cd5)": [[326, "select.poll.modify"]], "poll() (select.devpoll \u7684\u65b9\u6cd5)": [[326, "select.devpoll.poll"]], "poll() (select.epoll \u7684\u65b9\u6cd5)": [[326, "select.epoll.poll"]], "poll() (select.poll \u7684\u65b9\u6cd5)": [[326, "select.poll.poll"]], "poll() (\u65bc select \u6a21\u7d44\u4e2d)": [[326, "select.poll"]], "popen() (\u65bc os \u6a21\u7d44)": [[326, "index-1"]], "register() (select.devpoll \u7684\u65b9\u6cd5)": [[326, "select.devpoll.register"]], "register() (select.epoll \u7684\u65b9\u6cd5)": [[326, "select.epoll.register"]], "register() (select.poll \u7684\u65b9\u6cd5)": [[326, "select.poll.register"]], "select": [[326, "module-select"]], "select() (\u65bc select \u6a21\u7d44\u4e2d)": [[326, "select.select"]], "socket() (\u65bc socket \u6a21\u7d44)": [[326, "index-1"]], "udata (select.kevent \u7684\u5c6c\u6027)": [[326, "select.kevent.udata"]], "unregister() (select.devpoll \u7684\u65b9\u6cd5)": [[326, "select.devpoll.unregister"]], "unregister() (select.epoll \u7684\u65b9\u6cd5)": [[326, "select.epoll.unregister"]], "unregister() (select.poll \u7684\u65b9\u6cd5)": [[326, "select.poll.unregister"]], "baseselector (selectors \u4e2d\u7684\u985e\u5225)": [[327, "selectors.BaseSelector"]], "defaultselector (selectors \u4e2d\u7684\u985e\u5225)": [[327, "selectors.DefaultSelector"]], "devpollselector (selectors \u4e2d\u7684\u985e\u5225)": [[327, "selectors.DevpollSelector"]], "event_read (\u65bc selectors \u6a21\u7d44\u4e2d)": [[327, "selectors.EVENT_READ"]], "event_write (\u65bc selectors \u6a21\u7d44\u4e2d)": [[327, "selectors.EVENT_WRITE"]], "epollselector (selectors \u4e2d\u7684\u985e\u5225)": [[327, "selectors.EpollSelector"]], "kqueueselector (selectors \u4e2d\u7684\u985e\u5225)": [[327, "selectors.KqueueSelector"]], "pollselector (selectors \u4e2d\u7684\u985e\u5225)": [[327, "selectors.PollSelector"]], "selectselector (selectors \u4e2d\u7684\u985e\u5225)": [[327, "selectors.SelectSelector"]], "selectorkey (selectors \u4e2d\u7684\u985e\u5225)": [[327, "selectors.SelectorKey"]], "close() (selectors.baseselector \u7684\u65b9\u6cd5)": [[327, "selectors.BaseSelector.close"]], "data (selectors.selectorkey \u7684\u5c6c\u6027)": [[327, "selectors.SelectorKey.data"]], "events (selectors.selectorkey \u7684\u5c6c\u6027)": [[327, "selectors.SelectorKey.events"]], "fd (selectors.selectorkey \u7684\u5c6c\u6027)": [[327, "selectors.SelectorKey.fd"]], "fileno() (selectors.devpollselector \u7684\u65b9\u6cd5)": [[327, "selectors.DevpollSelector.fileno"]], "fileno() (selectors.epollselector \u7684\u65b9\u6cd5)": [[327, "selectors.EpollSelector.fileno"]], "fileno() (selectors.kqueueselector \u7684\u65b9\u6cd5)": [[327, "selectors.KqueueSelector.fileno"]], "fileobj (selectors.selectorkey \u7684\u5c6c\u6027)": [[327, "selectors.SelectorKey.fileobj"]], "get_key() (selectors.baseselector \u7684\u65b9\u6cd5)": [[327, "selectors.BaseSelector.get_key"]], "get_map() (selectors.baseselector \u7684\u65b9\u6cd5)": [[327, "selectors.BaseSelector.get_map"]], "modify() (selectors.baseselector \u7684\u65b9\u6cd5)": [[327, "selectors.BaseSelector.modify"]], "register() (selectors.baseselector \u7684\u65b9\u6cd5)": [[327, "selectors.BaseSelector.register"]], "select() (selectors.baseselector \u7684\u65b9\u6cd5)": [[327, "selectors.BaseSelector.select"]], "selectors": [[327, "module-selectors"]], "unregister() (selectors.baseselector \u7684\u65b9\u6cd5)": [[327, "selectors.BaseSelector.unregister"]], "bsddbshelf (shelve \u4e2d\u7684\u985e\u5225)": [[328, "shelve.BsdDbShelf"]], "dbfilenameshelf (shelve \u4e2d\u7684\u985e\u5225)": [[328, "shelve.DbfilenameShelf"]], "shelf (shelve \u4e2d\u7684\u985e\u5225)": [[328, "shelve.Shelf"]], "close() (shelve.shelf \u7684\u65b9\u6cd5)": [[328, "shelve.Shelf.close"]], "open() (\u65bc shelve \u6a21\u7d44\u4e2d)": [[328, "shelve.open"]], "sync() (shelve.shelf \u7684\u65b9\u6cd5)": [[328, "shelve.Shelf.sync"]], "commenters (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.commenters"]], "debug (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.debug"]], "eof (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.eof"]], "error_leader() (shlex.shlex \u7684\u65b9\u6cd5)": [[329, "shlex.shlex.error_leader"]], "escape (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.escape"]], "escapedquotes (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.escapedquotes"]], "get_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[329, "shlex.shlex.get_token"]], "infile (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.infile"]], "instream (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.instream"]], "join() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[329, "shlex.join"]], "lineno (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.lineno"]], "pop_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[329, "shlex.shlex.pop_source"]], "punctuation_chars (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.punctuation_chars"]], "push_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[329, "shlex.shlex.push_source"]], "push_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[329, "shlex.shlex.push_token"]], "quote() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[329, "shlex.quote"]], "quotes (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.quotes"]], "read_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[329, "shlex.shlex.read_token"]], "shlex": [[329, "module-shlex"]], "shlex (shlex \u4e2d\u7684\u985e\u5225)": [[329, "shlex.shlex"]], "source (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.source"]], "sourcehook() (shlex.shlex \u7684\u65b9\u6cd5)": [[329, "shlex.shlex.sourcehook"]], "split() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[329, "shlex.split"]], "token (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.token"]], "whitespace (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.whitespace"]], "whitespace_split (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.whitespace_split"]], "wordchars (shlex.shlex \u7684\u5c6c\u6027)": [[329, "shlex.shlex.wordchars"]], "samefileerror": [[330, "shutil.SameFileError"]], "avoids_symlink_attacks (shutil.rmtree \u7684\u5c6c\u6027)": [[330, "shutil.rmtree.avoids_symlink_attacks"]], "chown() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.chown"]], "copy() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.copy"]], "copy2() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.copy2"]], "copyfile() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.copyfile"]], "copyfileobj() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.copyfileobj"]], "copying files\uff08\u8907\u88fd\u6a94\u6848\uff09": [[330, "index-0"]], "copying\uff08\u8907\u88fd\uff09": [[330, "index-0"]], "copymode() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.copymode"]], "copystat() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.copystat"]], "copytree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.copytree"]], "disk_usage() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.disk_usage"]], "get_archive_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.get_archive_formats"]], "get_terminal_size() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.get_terminal_size"]], "get_unpack_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.get_unpack_formats"]], "ignore_patterns() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.ignore_patterns"]], "make_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.make_archive"]], "move() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.move"]], "register_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.register_archive_format"]], "register_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.register_unpack_format"]], "rmtree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.rmtree"]], "shutil": [[330, "module-shutil"]], "unpack_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.unpack_archive"]], "unregister_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.unregister_archive_format"]], "unregister_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.unregister_unpack_format"]], "which() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[330, "shutil.which"]], "ctrl_break_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.CTRL_BREAK_EVENT"]], "ctrl_c_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.CTRL_C_EVENT"]], "handlers (signal \u4e2d\u7684\u985e\u5225)": [[331, "signal.Handlers"]], "itimer_prof (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.ITIMER_PROF"]], "itimer_real (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.ITIMER_REAL"]], "itimer_virtual (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.ITIMER_VIRTUAL"]], "itimererror": [[331, "signal.ItimerError"]], "nsig (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.NSIG"]], "sigabrt (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGABRT"]], "sigalrm (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGALRM"]], "sigbreak (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGBREAK"]], "sigbus (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGBUS"]], "sigchld (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGCHLD"]], "sigcld (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGCLD"]], "sigcont (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGCONT"]], "sigfpe (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGFPE"]], "sighup (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGHUP"]], "sigill (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGILL"]], "sigint (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGINT"]], "sigkill (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGKILL"]], "sigpipe (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGPIPE"]], "sigsegv (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGSEGV"]], "sigstkflt (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGSTKFLT"]], "sigterm (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGTERM"]], "sigusr1 (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGUSR1"]], "sigusr2 (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGUSR2"]], "sigwinch (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIGWINCH"]], "sig_block (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIG_BLOCK"]], "sig_dfl (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIG_DFL"]], "sig_ign (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIG_IGN"]], "sig_setmask (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIG_SETMASK"]], "sig_unblock (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.SIG_UNBLOCK"]], "sigmasks (signal \u4e2d\u7684\u985e\u5225)": [[331, "signal.Sigmasks"]], "signals (signal \u4e2d\u7684\u985e\u5225)": [[331, "signal.Signals"]], "alarm() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.alarm"]], "getitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.getitimer"]], "getsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.getsignal"]], "pause() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.pause"]], "pidfd_send_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.pidfd_send_signal"]], "pthread_kill() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.pthread_kill"]], "pthread_sigmask() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.pthread_sigmask"]], "raise_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.raise_signal"]], "set_wakeup_fd() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.set_wakeup_fd"]], "setitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.setitimer"]], "siginterrupt() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.siginterrupt"]], "signal": [[331, "module-signal"]], "signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.signal"]], "sigpending() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.sigpending"]], "sigtimedwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.sigtimedwait"]], "sigwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.sigwait"]], "sigwaitinfo() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.sigwaitinfo"]], "strsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.strsignal"]], "valid_signals() (\u65bc signal \u6a21\u7d44\u4e2d)": [[331, "signal.valid_signals"]], "--user-base": [[332, "cmdoption-site-user-base"]], "--user-site": [[332, "cmdoption-site-user-site"]], "enable_user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[332, "site.ENABLE_USER_SITE"]], "pep 370": [[332, "index-9"], [453, "index-15"], [453, "index-37"], [453, "index-38"], [466, "index-7"], [481, "index-45"]], "prefixes (\u65bc site \u6a21\u7d44\u4e2d)": [[332, "site.PREFIXES"]], "pythonuserbase": [[332, "index-7"], [332, "index-8"], [453, "envvar-PYTHONUSERBASE"], [466, "index-4"]], "user_base (\u65bc site \u6a21\u7d44\u4e2d)": [[332, "site.USER_BASE"]], "user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[332, "site.USER_SITE"]], "addsitedir() (\u65bc site \u6a21\u7d44\u4e2d)": [[332, "site.addsitedir"]], "comment\uff08\u8a3b\u89e3\uff09": [[332, "index-2"], [433, "index-4"], [447, "index-0"]], "getsitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[332, "site.getsitepackages"]], "getuserbase() (\u65bc site \u6a21\u7d44\u4e2d)": [[332, "site.getuserbase"]], "getusersitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[332, "site.getusersitepackages"]], "main() (\u65bc site \u6a21\u7d44\u4e2d)": [[332, "site.main"]], "site": [[332, "module-site"]], "site \u547d\u4ee4\u5217\u9078\u9805": [[332, "cmdoption-site-user-base"], [332, "cmdoption-site-user-site"]], "site-packages": [[332, "index-1"]], "sitecustomize": [[332, "module-sitecustomize"], [436, "index-14"], [436, "index-16"]], "usercustomize": [[332, "module-usercustomize"], [436, "index-15"], [436, "index-17"]], "lmtp (smtplib \u4e2d\u7684\u985e\u5225)": [[333, "smtplib.LMTP"]], "rfc 1869": [[333, "index-2"], [333, "index-5"]], "rfc 4954": [[333, "index-7"], [333, "index-8"]], "rfc 821": [[333, "index-1"], [333, "index-4"]], "smtp": [[333, "index-0"]], "smtp (smtplib \u4e2d\u7684\u985e\u5225)": [[333, "smtplib.SMTP"]], "smtpauthenticationerror": [[333, "smtplib.SMTPAuthenticationError"]], "smtpconnecterror": [[333, "smtplib.SMTPConnectError"]], "smtpdataerror": [[333, "smtplib.SMTPDataError"]], "smtpexception": [[333, "smtplib.SMTPException"]], "smtpheloerror": [[333, "smtplib.SMTPHeloError"]], "smtpnotsupportederror": [[333, "smtplib.SMTPNotSupportedError"]], "smtprecipientsrefused": [[333, "smtplib.SMTPRecipientsRefused"]], "smtpresponseexception": [[333, "smtplib.SMTPResponseException"]], "smtpsenderrefused": [[333, "smtplib.SMTPSenderRefused"]], "smtpserverdisconnected": [[333, "smtplib.SMTPServerDisconnected"]], "smtp_ssl (smtplib \u4e2d\u7684\u985e\u5225)": [[333, "smtplib.SMTP_SSL"]], "simple mail transfer protocol\uff08\u7c21\u55ae\u90f5\u4ef6\u50b3\u8f38\u5354\u5b9a\uff09": [[333, "index-0"]], "auth() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.auth"]], "connect() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.connect"]], "docmd() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.docmd"]], "ehlo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.ehlo"]], "ehlo_or_helo_if_needed() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.ehlo_or_helo_if_needed"]], "has_extn() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.has_extn"]], "helo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.helo"]], "login() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.login"]], "quit() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.quit"]], "send_message() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.send_message"]], "sendmail() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.sendmail"]], "set_debuglevel() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.set_debuglevel"]], "smtplib": [[333, "module-smtplib"]], "starttls() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.starttls"]], "verify() (smtplib.smtp \u7684\u65b9\u6cd5)": [[333, "smtplib.SMTP.verify"]], "pep 594#sndhdr": [[334, "index-3"]], "sndhdr": [[334, "module-sndhdr"]], "tests (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[334, "sndhdr.tests"]], "what() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[334, "sndhdr.what"]], "whathdr() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[334, "sndhdr.whathdr"]], "af_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_ALG"]], "af_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_CAN"]], "af_divert (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_DIVERT"]], "af_hyperv (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_HYPERV"]], "af_inet (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_INET"]], "af_inet6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_INET6"]], "af_link (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_LINK"]], "af_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_PACKET"]], "af_qipcrtr (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_QIPCRTR"]], "af_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_RDS"]], "af_unix (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_UNIX"]], "af_unspec (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_UNSPEC"]], "af_vsock (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.AF_VSOCK"]], "bdaddr_any (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.BDADDR_ANY"]], "bdaddr_local (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.BDADDR_LOCAL"]], "can_bcm (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.CAN_BCM"]], "can_isotp (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.CAN_ISOTP"]], "can_j1939 (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.CAN_J1939"]], "can_raw_fd_frames (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.CAN_RAW_FD_FRAMES"]], "can_raw_join_filters (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.CAN_RAW_JOIN_FILTERS"]], "cmsg_len() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.CMSG_LEN"]], "cmsg_space() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.CMSG_SPACE"]], "ethertype_arp (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.ETHERTYPE_ARP"]], "ethertype_ip (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.ETHERTYPE_IP"]], "ethertype_ipv6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.ETHERTYPE_IPV6"]], "ethertype_vlan (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.ETHERTYPE_VLAN"]], "eth_p_all (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.ETH_P_ALL"]], "hci_data_dir (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HCI_DATA_DIR"]], "hci_filter (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HCI_FILTER"]], "hci_time_stamp (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HCI_TIME_STAMP"]], "hvsocket_address_flag_passthru (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HVSOCKET_ADDRESS_FLAG_PASSTHRU"]], "hvsocket_connected_suspend (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HVSOCKET_CONNECTED_SUSPEND"]], "hvsocket_connect_timeout (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HVSOCKET_CONNECT_TIMEOUT"]], "hvsocket_connect_timeout_max (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HVSOCKET_CONNECT_TIMEOUT_MAX"]], "hv_guid_broadcast (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HV_GUID_BROADCAST"]], "hv_guid_children (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HV_GUID_CHILDREN"]], "hv_guid_loopback (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HV_GUID_LOOPBACK"]], "hv_guid_parent (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HV_GUID_PARENT"]], "hv_guid_wildcard (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HV_GUID_WILDCARD"]], "hv_guid_zero (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HV_GUID_ZERO"]], "hv_protocol_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.HV_PROTOCOL_RAW"]], "ioctl_vm_sockets_get_local_cid (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID"]], "local_creds (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.LOCAL_CREDS"]], "local_creds_persistent (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.LOCAL_CREDS_PERSISTENT"]], "pf_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.PF_CAN"]], "pf_divert (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.PF_DIVERT"]], "pf_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.PF_PACKET"]], "pf_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.PF_RDS"]], "rfc 3493": [[335, "index-15"]], "rfc 3542": [[335, "index-3"], [481, "index-216"]], "scm_creds2 (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SCM_CREDS2"]], "sio_keepalive_vals (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SIO_KEEPALIVE_VALS"]], "sio_loopback_fast_path (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SIO_LOOPBACK_FAST_PATH"]], "sio_rcvall (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SIO_RCVALL"]], "sock_cloexec (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SOCK_CLOEXEC"]], "sock_dgram (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SOCK_DGRAM"]], "sock_nonblock (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SOCK_NONBLOCK"]], "sock_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SOCK_RAW"]], "sock_rdm (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SOCK_RDM"]], "sock_seqpacket (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SOCK_SEQPACKET"]], "sock_stream (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SOCK_STREAM"]], "sol_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SOL_ALG"]], "sol_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SOL_RDS"]], "somaxconn (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SOMAXCONN"]], "so_incoming_cpu (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SO_INCOMING_CPU"]], "sockettype (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.SocketType"]], "accept() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.accept"]], "bind() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.bind"]], "close() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.close"]], "close() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.close"]], "connect() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.connect"]], "connect_ex() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.connect_ex"]], "create_connection() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.create_connection"]], "create_server() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.create_server"]], "detach() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.detach"]], "dup() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.dup"]], "family (socket.socket \u7684\u5c6c\u6027)": [[335, "socket.socket.family"]], "fileno() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.fileno"]], "fromfd() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.fromfd"]], "fromshare() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.fromshare"]], "gaierror": [[335, "socket.gaierror"]], "get_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.get_inheritable"]], "getaddrinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.getaddrinfo"]], "getblocking() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.getblocking"]], "getdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.getdefaulttimeout"]], "getfqdn() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.getfqdn"]], "gethostbyaddr() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.gethostbyaddr"]], "gethostbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.gethostbyname"]], "gethostbyname_ex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.gethostbyname_ex"]], "gethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.gethostname"]], "getnameinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.getnameinfo"]], "getpeername() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.getpeername"]], "getprotobyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.getprotobyname"]], "getservbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.getservbyname"]], "getservbyport() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.getservbyport"]], "getsockname() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.getsockname"]], "getsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.getsockopt"]], "gettimeout() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.gettimeout"]], "has_dualstack_ipv6() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.has_dualstack_ipv6"]], "has_ipv6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.has_ipv6"]], "herror": [[335, "socket.herror"]], "htonl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.htonl"]], "htons() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.htons"]], "if_indextoname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.if_indextoname"]], "if_nameindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.if_nameindex"]], "if_nametoindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.if_nametoindex"]], "inet_aton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.inet_aton"]], "inet_ntoa() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.inet_ntoa"]], "inet_ntop() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.inet_ntop"]], "inet_pton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.inet_pton"]], "ioctl() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.ioctl"]], "listen() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.listen"]], "makefile() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.makefile"]], "ntohl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.ntohl"]], "ntohs() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.ntohs"]], "proto (socket.socket \u7684\u5c6c\u6027)": [[335, "socket.socket.proto"]], "recv() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.recv"]], "recv_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.recv_fds"]], "recv_into() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.recv_into"]], "recvfrom() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.recvfrom"]], "recvfrom_into() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.recvfrom_into"]], "recvmsg() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.recvmsg"]], "recvmsg_into() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.recvmsg_into"]], "send() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.send"]], "send_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.send_fds"]], "sendall() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.sendall"]], "sendfile() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.sendfile"]], "sendmsg() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.sendmsg"]], "sendmsg_afalg() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.sendmsg_afalg"]], "sendto() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.sendto"]], "set_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.set_inheritable"]], "setblocking() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.setblocking"]], "setdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.setdefaulttimeout"]], "sethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.sethostname"]], "setsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.setsockopt"]], "settimeout() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.settimeout"]], "share() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.share"]], "shutdown() (socket.socket \u7684\u65b9\u6cd5)": [[335, "socket.socket.shutdown"]], "socket (socket \u4e2d\u7684\u985e\u5225)": [[335, "socket.socket"]], "socketpair() (\u65bc socket \u6a21\u7d44\u4e2d)": [[335, "socket.socketpair"]], "struct": [[335, "index-14"], [345, "module-struct"]], "timeout": [[335, "socket.timeout"]], "type (socket.socket \u7684\u5c6c\u6027)": [[335, "socket.socket.type"]], "baserequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.BaseRequestHandler"]], "baseserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.BaseServer"]], "datagramrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.DatagramRequestHandler"]], "forkingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.ForkingMixIn"]], "forkingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.ForkingTCPServer"]], "forkingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.ForkingUDPServer"]], "forkingunixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.ForkingUnixDatagramServer"]], "forkingunixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.ForkingUnixStreamServer"]], "requesthandlerclass (socketserver.baseserver \u7684\u5c6c\u6027)": [[336, "socketserver.BaseServer.RequestHandlerClass"]], "streamrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.StreamRequestHandler"]], "tcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.TCPServer"]], "threadingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.ThreadingMixIn"]], "threadingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.ThreadingTCPServer"]], "threadingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.ThreadingUDPServer"]], "threadingunixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.ThreadingUnixDatagramServer"]], "threadingunixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.ThreadingUnixStreamServer"]], "udpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.UDPServer"]], "unixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.UnixDatagramServer"]], "unixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[336, "socketserver.UnixStreamServer"]], "address_family (socketserver.baseserver \u7684\u5c6c\u6027)": [[336, "socketserver.BaseServer.address_family"]], "allow_reuse_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[336, "socketserver.BaseServer.allow_reuse_address"]], "block_on_close (socketserver.threadingmixin \u7684\u5c6c\u6027)": [[336, "socketserver.ThreadingMixIn.block_on_close"]], "client_address (socketserver.baserequesthandler \u7684\u5c6c\u6027)": [[336, "socketserver.BaseRequestHandler.client_address"]], "daemon_threads (socketserver.threadingmixin \u7684\u5c6c\u6027)": [[336, "socketserver.ThreadingMixIn.daemon_threads"]], "fileno() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.fileno"]], "finish() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseRequestHandler.finish"]], "finish_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.finish_request"]], "get_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.get_request"]], "handle() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseRequestHandler.handle"]], "handle_error() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.handle_error"]], "handle_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.handle_request"]], "handle_timeout() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.handle_timeout"]], "process_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.process_request"]], "request (socketserver.baserequesthandler \u7684\u5c6c\u6027)": [[336, "socketserver.BaseRequestHandler.request"]], "request_queue_size (socketserver.baseserver \u7684\u5c6c\u6027)": [[336, "socketserver.BaseServer.request_queue_size"]], "rfile (socketserver.datagramrequesthandler \u7684\u5c6c\u6027)": [[336, "socketserver.DatagramRequestHandler.rfile"]], "serve_forever() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.serve_forever"]], "server (socketserver.baserequesthandler \u7684\u5c6c\u6027)": [[336, "socketserver.BaseRequestHandler.server"]], "server_activate() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.server_activate"]], "server_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[336, "socketserver.BaseServer.server_address"]], "server_bind() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.server_bind"]], "server_close() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.server_close"]], "service_actions() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.service_actions"]], "setup() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseRequestHandler.setup"]], "shutdown() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.shutdown"]], "socket (socketserver.baseserver \u7684\u5c6c\u6027)": [[336, "socketserver.BaseServer.socket"]], "socket_type (socketserver.baseserver \u7684\u5c6c\u6027)": [[336, "socketserver.BaseServer.socket_type"]], "socketserver": [[336, "module-socketserver"]], "timeout (socketserver.baseserver \u7684\u5c6c\u6027)": [[336, "socketserver.BaseServer.timeout"]], "verify_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[336, "socketserver.BaseServer.verify_request"]], "wfile (socketserver.datagramrequesthandler \u7684\u5c6c\u6027)": [[336, "socketserver.DatagramRequestHandler.wfile"]], "pep 594#spwd": [[337, "index-2"]], "getspall() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[337, "spwd.getspall"]], "getspnam() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[337, "spwd.getspnam"]], "spwd": [[337, "module-spwd"]], "--version": [[338, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"], [378, "cmdoption-trace-version"], [453, "cmdoption-version"]], "-v": [[338, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"], [356, "cmdoption-tarfile-v"], [365, "cmdoption-timeit-v"], [386, "cmdoption-unittest-discover-v"], [453, "cmdoption-V"], [453, "cmdoption-v"]], "blob (sqlite3 \u4e2d\u7684\u985e\u5225)": [[338, "sqlite3.Blob"]], "connection (sqlite3 \u4e2d\u7684\u985e\u5225)": [[338, "sqlite3.Connection"]], "cursor (sqlite3 \u4e2d\u7684\u985e\u5225)": [[338, "sqlite3.Cursor"]], "dataerror": [[338, "sqlite3.DataError"]], "databaseerror": [[338, "sqlite3.DatabaseError"]], "integrityerror": [[338, "sqlite3.IntegrityError"]], "interfaceerror": [[338, "sqlite3.InterfaceError"]], "internalerror": [[338, "sqlite3.InternalError"]], "legacy_transaction_control (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.LEGACY_TRANSACTION_CONTROL"]], "notsupportederror": [[338, "sqlite3.NotSupportedError"]], "operationalerror": [[338, "sqlite3.OperationalError"]], "parse_colnames (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.PARSE_COLNAMES"]], "parse_decltypes (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.PARSE_DECLTYPES"]], "pep 246": [[338, "index-8"], [481, "index-47"]], "pep 249": [[338, "index-0"], [338, "index-10"], [338, "index-11"], [338, "index-12"], [338, "index-14"], [338, "index-2"], [338, "index-3"], [338, "index-4"], [338, "index-5"], [338, "index-9"], [465, "index-24"], [465, "index-25"], [472, "index-24"], [481, "index-38"], [481, "index-70"]], "prepareprotocol (sqlite3 \u4e2d\u7684\u985e\u5225)": [[338, "sqlite3.PrepareProtocol"]], "programmingerror": [[338, "sqlite3.ProgrammingError"]], "row (sqlite3 \u4e2d\u7684\u985e\u5225)": [[338, "sqlite3.Row"]], "sqlite_dbconfig_defensive (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_DEFENSIVE"]], "sqlite_dbconfig_dqs_ddl (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_DQS_DDL"]], "sqlite_dbconfig_dqs_dml (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_DQS_DML"]], "sqlite_dbconfig_enable_fkey (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_ENABLE_FKEY"]], "sqlite_dbconfig_enable_fts3_tokenizer (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER"]], "sqlite_dbconfig_enable_load_extension (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION"]], "sqlite_dbconfig_enable_qpsg (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_ENABLE_QPSG"]], "sqlite_dbconfig_enable_trigger (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_ENABLE_TRIGGER"]], "sqlite_dbconfig_enable_view (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_ENABLE_VIEW"]], "sqlite_dbconfig_legacy_alter_table (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE"]], "sqlite_dbconfig_legacy_file_format (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT"]], "sqlite_dbconfig_no_ckpt_on_close (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE"]], "sqlite_dbconfig_reset_database (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_RESET_DATABASE"]], "sqlite_dbconfig_trigger_eqp (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_TRIGGER_EQP"]], "sqlite_dbconfig_trusted_schema (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_TRUSTED_SCHEMA"]], "sqlite_dbconfig_writable_schema (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DBCONFIG_WRITABLE_SCHEMA"]], "sqlite_deny (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_DENY"]], "sqlite_ignore (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_IGNORE"]], "sqlite_ok (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.SQLITE_OK"]], "apilevel (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.apilevel"]], "arraysize (sqlite3.cursor \u7684\u5c6c\u6027)": [[338, "sqlite3.Cursor.arraysize"]], "autocommit (sqlite3.connection \u7684\u5c6c\u6027)": [[338, "sqlite3.Connection.autocommit"]], "backup() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.backup"]], "blobopen() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.blobopen"]], "close() (sqlite3.blob \u7684\u65b9\u6cd5)": [[338, "sqlite3.Blob.close"]], "close() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.close"]], "close() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[338, "sqlite3.Cursor.close"]], "commit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.commit"]], "complete_statement() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.complete_statement"]], "connect() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.connect"]], "connection (sqlite3.cursor \u7684\u5c6c\u6027)": [[338, "sqlite3.Cursor.connection"]], "create_aggregate() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.create_aggregate"]], "create_collation() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.create_collation"]], "create_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.create_function"]], "create_window_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.create_window_function"]], "cursor() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.cursor"]], "description (sqlite3.cursor \u7684\u5c6c\u6027)": [[338, "sqlite3.Cursor.description"]], "deserialize() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.deserialize"]], "enable_callback_tracebacks() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.enable_callback_tracebacks"]], "enable_load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.enable_load_extension"]], "execute() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.execute"]], "execute() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[338, "sqlite3.Cursor.execute"]], "executemany() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.executemany"]], "executemany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[338, "sqlite3.Cursor.executemany"]], "executescript() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.executescript"]], "executescript() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[338, "sqlite3.Cursor.executescript"]], "fetchall() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[338, "sqlite3.Cursor.fetchall"]], "fetchmany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[338, "sqlite3.Cursor.fetchmany"]], "fetchone() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[338, "sqlite3.Cursor.fetchone"]], "getconfig() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.getconfig"]], "getlimit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.getlimit"]], "in_transaction (sqlite3.connection \u7684\u5c6c\u6027)": [[338, "sqlite3.Connection.in_transaction"]], "interrupt() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.interrupt"]], "isolation_level (sqlite3.connection \u7684\u5c6c\u6027)": [[338, "sqlite3.Connection.isolation_level"]], "iterdump() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.iterdump"]], "keys() (sqlite3.row \u7684\u65b9\u6cd5)": [[338, "sqlite3.Row.keys"]], "lastrowid (sqlite3.cursor \u7684\u5c6c\u6027)": [[338, "sqlite3.Cursor.lastrowid"]], "load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.load_extension"]], "paramstyle (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.paramstyle"]], "python--m-sqlite3-[-h]-[-v]-[filename]-[sql] \u547d\u4ee4\u5217\u9078\u9805": [[338, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [338, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"]], "read() (sqlite3.blob \u7684\u65b9\u6cd5)": [[338, "sqlite3.Blob.read"]], "register_adapter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.register_adapter"]], "register_converter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.register_converter"]], "rollback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.rollback"]], "row_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[338, "sqlite3.Connection.row_factory"]], "row_factory (sqlite3.cursor \u7684\u5c6c\u6027)": [[338, "sqlite3.Cursor.row_factory"]], "rowcount (sqlite3.cursor \u7684\u5c6c\u6027)": [[338, "sqlite3.Cursor.rowcount"]], "seek() (sqlite3.blob \u7684\u65b9\u6cd5)": [[338, "sqlite3.Blob.seek"]], "serialize() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.serialize"]], "set_authorizer() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.set_authorizer"]], "set_progress_handler() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.set_progress_handler"]], "set_trace_callback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.set_trace_callback"]], "setconfig() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.setconfig"]], "setinputsizes() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[338, "sqlite3.Cursor.setinputsizes"]], "setlimit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[338, "sqlite3.Connection.setlimit"]], "setoutputsize() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[338, "sqlite3.Cursor.setoutputsize"]], "sqlite3": [[338, "module-sqlite3"]], "sqlite_errorcode (sqlite3.error \u7684\u5c6c\u6027)": [[338, "sqlite3.Error.sqlite_errorcode"]], "sqlite_errorname (sqlite3.error \u7684\u5c6c\u6027)": [[338, "sqlite3.Error.sqlite_errorname"]], "sqlite_version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.sqlite_version"]], "sqlite_version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.sqlite_version_info"]], "tell() (sqlite3.blob \u7684\u65b9\u6cd5)": [[338, "sqlite3.Blob.tell"]], "text_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[338, "sqlite3.Connection.text_factory"]], "threadsafety (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.threadsafety"]], "total_changes (sqlite3.connection \u7684\u5c6c\u6027)": [[338, "sqlite3.Connection.total_changes"]], "version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.version"]], "version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[338, "sqlite3.version_info"]], "write() (sqlite3.blob \u7684\u65b9\u6cd5)": [[338, "sqlite3.Blob.write"]], "\u65bc sql \u9673\u8ff0\u5f0f\u4e2d": [[338, "index-6"], [338, "index-7"]], "alert_description_handshake_failure (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE"]], "alert_description_internal_error (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.ALERT_DESCRIPTION_INTERNAL_ERROR"]], "alertdescription (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.AlertDescription"]], "cert_none (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.CERT_NONE"]], "cert_optional (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.CERT_OPTIONAL"]], "cert_required (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.CERT_REQUIRED"]], "channel_binding_types (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.CHANNEL_BINDING_TYPES"]], "certificateerror": [[339, "ssl.CertificateError"]], "der_cert_to_pem_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.DER_cert_to_PEM_cert"]], "has_alpn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_ALPN"]], "has_ecdh (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_ECDH"]], "has_never_check_common_name (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_NEVER_CHECK_COMMON_NAME"]], "has_npn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_NPN"]], "has_sni (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_SNI"]], "has_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_SSLv2"]], "has_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_SSLv3"]], "has_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_TLSv1"]], "has_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_TLSv1_1"]], "has_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_TLSv1_2"]], "has_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.HAS_TLSv1_3"]], "maximum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[339, "ssl.TLSVersion.MAXIMUM_SUPPORTED"]], "minimum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[339, "ssl.TLSVersion.MINIMUM_SUPPORTED"]], "memorybio (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.MemoryBIO"]], "openssl_version (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OPENSSL_VERSION"]], "openssl_version_info (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OPENSSL_VERSION_INFO"]], "openssl_version_number (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OPENSSL_VERSION_NUMBER"]], "op_all (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_ALL"]], "op_cipher_server_preference (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_CIPHER_SERVER_PREFERENCE"]], "op_enable_ktls (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_ENABLE_KTLS"]], "op_enable_middlebox_compat (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_ENABLE_MIDDLEBOX_COMPAT"]], "op_ignore_unexpected_eof (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_IGNORE_UNEXPECTED_EOF"]], "op_legacy_server_connect (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_LEGACY_SERVER_CONNECT"]], "op_no_compression (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_NO_COMPRESSION"]], "op_no_renegotiation (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_NO_RENEGOTIATION"]], "op_no_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_NO_SSLv2"]], "op_no_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_NO_SSLv3"]], "op_no_ticket (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_NO_TICKET"]], "op_no_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_NO_TLSv1"]], "op_no_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_NO_TLSv1_1"]], "op_no_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_NO_TLSv1_2"]], "op_no_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_NO_TLSv1_3"]], "op_single_dh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_SINGLE_DH_USE"]], "op_single_ecdh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.OP_SINGLE_ECDH_USE"]], "options (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.Options"]], "pem_cert_to_der_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.PEM_cert_to_DER_cert"]], "pep 644": [[339, "index-28"], [470, "index-109"], [470, "index-110"], [470, "index-114"], [470, "index-89"], [472, "index-34"], [481, "index-100"], [481, "index-44"]], "protocol_sslv23 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.PROTOCOL_SSLv23"]], "protocol_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.PROTOCOL_SSLv3"]], "protocol_tls (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.PROTOCOL_TLS"]], "protocol_tls_client (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.PROTOCOL_TLS_CLIENT"]], "protocol_tls_server (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.PROTOCOL_TLS_SERVER"]], "protocol_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.PROTOCOL_TLSv1"]], "protocol_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.PROTOCOL_TLSv1_1"]], "protocol_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.PROTOCOL_TLSv1_2"]], "purpose.client_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.Purpose.CLIENT_AUTH"]], "purpose.server_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.Purpose.SERVER_AUTH"]], "rand_add() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.RAND_add"]], "rand_bytes() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.RAND_bytes"]], "rand_status() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.RAND_status"]], "rfc 1422": [[339, "index-16"], [339, "index-17"]], "rfc 1750": [[339, "index-31"]], "rfc 3280": [[339, "index-10"]], "rfc 4086": [[339, "index-18"]], "rfc 5246": [[339, "index-20"], [339, "index-9"]], "rfc 5280": [[339, "index-19"], [339, "index-32"], [476, "index-41"], [476, "index-51"]], "rfc 5929": [[339, "index-11"]], "rfc 6066": [[339, "index-13"], [339, "index-21"], [339, "index-8"]], "rfc 7301": [[339, "index-12"], [339, "index-7"], [476, "index-40"]], "rfc 7525": [[339, "index-22"]], "ssl": [[339, "index-1"], [339, "module-ssl"]], "sslcertverificationerror": [[339, "ssl.SSLCertVerificationError"]], "sslcontext (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.SSLContext"]], "ssleoferror": [[339, "ssl.SSLEOFError"]], "sslerror": [[339, "ssl.SSLError"]], "sslerrornumber (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.SSLErrorNumber"]], "sslkeylogfile": [[339, "index-29"], [339, "index-30"]], "sslobject (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.SSLObject"]], "sslsession (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.SSLSession"]], "sslsocket (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.SSLSocket"]], "sslsyscallerror": [[339, "ssl.SSLSyscallError"]], "sslwantreaderror": [[339, "ssl.SSLWantReadError"]], "sslwantwriteerror": [[339, "ssl.SSLWantWriteError"]], "sslzeroreturnerror": [[339, "ssl.SSLZeroReturnError"]], "sslv3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[339, "ssl.TLSVersion.SSLv3"]], "secure sockets layer\uff08\u5b89\u5168 socket \u5c64\uff09": [[339, "index-1"]], "tls": [[339, "index-1"]], "tlsversion (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.TLSVersion"]], "tlsv1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[339, "ssl.TLSVersion.TLSv1"]], "tlsv1_1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[339, "ssl.TLSVersion.TLSv1_1"]], "tlsv1_2 (ssl.tlsversion \u7684\u5c6c\u6027)": [[339, "ssl.TLSVersion.TLSv1_2"]], "tlsv1_3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[339, "ssl.TLSVersion.TLSv1_3"]], "transport layer security\uff08\u50b3\u8f38\u5c64\u5b89\u5168\uff09": [[339, "index-1"]], "verify_allow_proxy_certs (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.VERIFY_ALLOW_PROXY_CERTS"]], "verify_crl_check_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.VERIFY_CRL_CHECK_CHAIN"]], "verify_crl_check_leaf (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.VERIFY_CRL_CHECK_LEAF"]], "verify_default (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.VERIFY_DEFAULT"]], "verify_x509_partial_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.VERIFY_X509_PARTIAL_CHAIN"]], "verify_x509_strict (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.VERIFY_X509_STRICT"]], "verify_x509_trusted_first (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.VERIFY_X509_TRUSTED_FIRST"]], "verifyflags (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.VerifyFlags"]], "verifymode (ssl \u4e2d\u7684\u985e\u5225)": [[339, "ssl.VerifyMode"]], "x509 certificate\uff08x509 \u6191\u8b49\uff09": [[339, "index-15"]], "cert_store_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.cert_store_stats"]], "cert_time_to_seconds() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.cert_time_to_seconds"]], "certificates\uff08\u6191\u8b49\uff09": [[339, "index-14"]], "check_hostname (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.check_hostname"]], "cipher() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.cipher"]], "compression() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.compression"]], "context (ssl.sslsocket \u7684\u5c6c\u6027)": [[339, "ssl.SSLSocket.context"]], "create_default_context() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.create_default_context"]], "do_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.do_handshake"]], "enum_certificates() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.enum_certificates"]], "enum_crls() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.enum_crls"]], "eof (ssl.memorybio \u7684\u5c6c\u6027)": [[339, "ssl.MemoryBIO.eof"]], "get_ca_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.get_ca_certs"]], "get_channel_binding() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.get_channel_binding"]], "get_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.get_ciphers"]], "get_default_verify_paths() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.get_default_verify_paths"]], "get_server_certificate() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[339, "ssl.get_server_certificate"]], "getpeercert() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.getpeercert"]], "has_ticket (ssl.sslsession \u7684\u5c6c\u6027)": [[339, "ssl.SSLSession.has_ticket"]], "hostname_checks_common_name (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.hostname_checks_common_name"]], "id (ssl.sslsession \u7684\u5c6c\u6027)": [[339, "ssl.SSLSession.id"]], "keylog_filename (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.keylog_filename"]], "library (ssl.sslerror \u7684\u5c6c\u6027)": [[339, "ssl.SSLError.library"]], "load_cert_chain() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.load_cert_chain"]], "load_default_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.load_default_certs"]], "load_dh_params() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.load_dh_params"]], "load_verify_locations() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.load_verify_locations"]], "maximum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.maximum_version"]], "minimum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.minimum_version"]], "num_tickets (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.num_tickets"]], "options (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.options"]], "pending (ssl.memorybio \u7684\u5c6c\u6027)": [[339, "ssl.MemoryBIO.pending"]], "pending() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.pending"]], "post_handshake_auth (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.post_handshake_auth"]], "protocol (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.protocol"]], "read() (ssl.memorybio \u7684\u65b9\u6cd5)": [[339, "ssl.MemoryBIO.read"]], "read() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.read"]], "reason (ssl.sslerror \u7684\u5c6c\u6027)": [[339, "ssl.SSLError.reason"]], "security_level (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.security_level"]], "selected_alpn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.selected_alpn_protocol"]], "selected_npn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.selected_npn_protocol"]], "server_hostname (ssl.sslsocket \u7684\u5c6c\u6027)": [[339, "ssl.SSLSocket.server_hostname"]], "server_side (ssl.sslsocket \u7684\u5c6c\u6027)": [[339, "ssl.SSLSocket.server_side"]], "session (ssl.sslsocket \u7684\u5c6c\u6027)": [[339, "ssl.SSLSocket.session"]], "session_reused (ssl.sslsocket \u7684\u5c6c\u6027)": [[339, "ssl.SSLSocket.session_reused"]], "session_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.session_stats"]], "set_alpn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.set_alpn_protocols"]], "set_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.set_ciphers"]], "set_default_verify_paths() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.set_default_verify_paths"]], "set_ecdh_curve() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.set_ecdh_curve"]], "set_npn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.set_npn_protocols"]], "set_servername_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.set_servername_callback"]], "shared_ciphers() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.shared_ciphers"]], "sni_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.sni_callback"]], "sslobject_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.sslobject_class"]], "sslsocket_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.sslsocket_class"]], "ticket_lifetime_hint (ssl.sslsession \u7684\u5c6c\u6027)": [[339, "ssl.SSLSession.ticket_lifetime_hint"]], "time (ssl.sslsession \u7684\u5c6c\u6027)": [[339, "ssl.SSLSession.time"]], "timeout (ssl.sslsession \u7684\u5c6c\u6027)": [[339, "ssl.SSLSession.timeout"]], "unwrap() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.unwrap"]], "verify_client_post_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.verify_client_post_handshake"]], "verify_code (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[339, "ssl.SSLCertVerificationError.verify_code"]], "verify_flags (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.verify_flags"]], "verify_message (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[339, "ssl.SSLCertVerificationError.verify_message"]], "verify_mode (ssl.sslcontext \u7684\u5c6c\u6027)": [[339, "ssl.SSLContext.verify_mode"]], "version() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.version"]], "wrap_bio() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.wrap_bio"]], "wrap_socket() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[339, "ssl.SSLContext.wrap_socket"]], "write() (ssl.memorybio \u7684\u65b9\u6cd5)": [[339, "ssl.MemoryBIO.write"]], "write() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[339, "ssl.SSLSocket.write"]], "write_eof() (ssl.memorybio \u7684\u65b9\u6cd5)": [[339, "ssl.MemoryBIO.write_eof"]], "\uff08\u7528\u65bc ssl \u6a21\u7d44\uff09": [[339, "index-0"]], "file_attribute_archive (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_ARCHIVE"]], "file_attribute_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_COMPRESSED"]], "file_attribute_device (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_DEVICE"]], "file_attribute_directory (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_DIRECTORY"]], "file_attribute_encrypted (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_ENCRYPTED"]], "file_attribute_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_HIDDEN"]], "file_attribute_integrity_stream (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_INTEGRITY_STREAM"]], "file_attribute_normal (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_NORMAL"]], "file_attribute_not_content_indexed (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"]], "file_attribute_no_scrub_data (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_NO_SCRUB_DATA"]], "file_attribute_offline (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_OFFLINE"]], "file_attribute_readonly (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_READONLY"]], "file_attribute_reparse_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_REPARSE_POINT"]], "file_attribute_sparse_file (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_SPARSE_FILE"]], "file_attribute_system (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_SYSTEM"]], "file_attribute_temporary (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_TEMPORARY"]], "file_attribute_virtual (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.FILE_ATTRIBUTE_VIRTUAL"]], "io_reparse_tag_appexeclink (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.IO_REPARSE_TAG_APPEXECLINK"]], "io_reparse_tag_mount_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.IO_REPARSE_TAG_MOUNT_POINT"]], "io_reparse_tag_symlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.IO_REPARSE_TAG_SYMLINK"]], "sf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.SF_APPEND"]], "sf_archived (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.SF_ARCHIVED"]], "sf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.SF_IMMUTABLE"]], "sf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.SF_NOUNLINK"]], "sf_snapshot (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.SF_SNAPSHOT"]], "st_atime (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.ST_ATIME"]], "st_ctime (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.ST_CTIME"]], "st_dev (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.ST_DEV"]], "st_gid (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.ST_GID"]], "st_ino (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.ST_INO"]], "st_mode (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.ST_MODE"]], "st_mtime (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.ST_MTIME"]], "st_nlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.ST_NLINK"]], "st_size (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.ST_SIZE"]], "st_uid (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.ST_UID"]], "s_enfmt (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ENFMT"]], "s_iexec (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IEXEC"]], "s_ifblk (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFBLK"]], "s_ifchr (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFCHR"]], "s_ifdir (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFDIR"]], "s_ifdoor (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFDOOR"]], "s_ififo (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFIFO"]], "s_iflnk (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFLNK"]], "s_ifmt() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFMT"]], "s_ifport (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFPORT"]], "s_ifreg (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFREG"]], "s_ifsock (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFSOCK"]], "s_ifwht (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IFWHT"]], "s_imode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IMODE"]], "s_iread (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IREAD"]], "s_irgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IRGRP"]], "s_iroth (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IROTH"]], "s_irusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IRUSR"]], "s_irwxg (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IRWXG"]], "s_irwxo (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IRWXO"]], "s_irwxu (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IRWXU"]], "s_isblk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISBLK"]], "s_ischr() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISCHR"]], "s_isdir() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISDIR"]], "s_isdoor() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISDOOR"]], "s_isfifo() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISFIFO"]], "s_isgid (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISGID"]], "s_islnk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISLNK"]], "s_isport() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISPORT"]], "s_isreg() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISREG"]], "s_issock() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISSOCK"]], "s_isuid (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISUID"]], "s_isvtx (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISVTX"]], "s_iswht() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_ISWHT"]], "s_iwgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IWGRP"]], "s_iwoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IWOTH"]], "s_iwrite (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IWRITE"]], "s_iwusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IWUSR"]], "s_ixgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IXGRP"]], "s_ixoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IXOTH"]], "s_ixusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.S_IXUSR"]], "uf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.UF_APPEND"]], "uf_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.UF_COMPRESSED"]], "uf_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.UF_HIDDEN"]], "uf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.UF_IMMUTABLE"]], "uf_nodump (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.UF_NODUMP"]], "uf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.UF_NOUNLINK"]], "uf_opaque (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.UF_OPAQUE"]], "filemode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[340, "stat.filemode"]], "normaldist (statistics \u4e2d\u7684\u985e\u5225)": [[341, "statistics.NormalDist"]], "statisticserror": [[341, "statistics.StatisticsError"]], "cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[341, "statistics.NormalDist.cdf"]], "correlation() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.correlation"]], "covariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.covariance"]], "fmean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.fmean"]], "from_samples() (statistics.normaldist \u7684\u985e\u5225\u65b9\u6cd5)": [[341, "statistics.NormalDist.from_samples"]], "geometric_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.geometric_mean"]], "harmonic_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.harmonic_mean"]], "inv_cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[341, "statistics.NormalDist.inv_cdf"]], "linear_regression() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.linear_regression"]], "mean (statistics.normaldist \u7684\u5c6c\u6027)": [[341, "statistics.NormalDist.mean"]], "mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.mean"]], "median (statistics.normaldist \u7684\u5c6c\u6027)": [[341, "statistics.NormalDist.median"]], "median() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.median"]], "median_grouped() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.median_grouped"]], "median_high() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.median_high"]], "median_low() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.median_low"]], "mode (statistics.normaldist \u7684\u5c6c\u6027)": [[341, "statistics.NormalDist.mode"]], "mode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.mode"]], "multimode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.multimode"]], "overlap() (statistics.normaldist \u7684\u65b9\u6cd5)": [[341, "statistics.NormalDist.overlap"]], "pdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[341, "statistics.NormalDist.pdf"]], "pstdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.pstdev"]], "pvariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.pvariance"]], "quantiles() (statistics.normaldist \u7684\u65b9\u6cd5)": [[341, "statistics.NormalDist.quantiles"]], "quantiles() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.quantiles"]], "samples() (statistics.normaldist \u7684\u65b9\u6cd5)": [[341, "statistics.NormalDist.samples"]], "statistics": [[341, "module-statistics"]], "stdev (statistics.normaldist \u7684\u5c6c\u6027)": [[341, "statistics.NormalDist.stdev"]], "stdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.stdev"]], "variance (statistics.normaldist \u7684\u5c6c\u6027)": [[341, "statistics.NormalDist.variance"]], "variance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[341, "statistics.variance"]], "zscore() (statistics.normaldist \u7684\u65b9\u6cd5)": [[341, "statistics.NormalDist.zscore"]], "!=": [[342, "index-7"], [428, "index-77"]], "& \uff08\u548c\u865f\uff09": [[342, "index-16"], [428, "index-74"]], "//": [[342, "index-13"], [428, "index-67"]], "< \uff08\u5c0f\u65bc\uff09": [[342, "index-7"], [343, "index-3"], [345, "index-1"], [428, "index-77"]], "<<": [[342, "index-16"], [428, "index-71"]], "<=": [[342, "index-7"], [428, "index-77"]], "==": [[342, "index-7"], [428, "index-77"]], "> \uff08\u5927\u65bc\uff09": [[342, "index-7"], [343, "index-3"], [345, "index-1"], [428, "index-77"]], ">=": [[342, "index-7"], [428, "index-77"]], ">>": [[342, "index-16"], [428, "index-71"]], "alias\uff08\u5225\u540d\uff09": [[342, "index-56"]], "boolean\uff08\u5e03\u6797\uff09": [[342, "index-1"], [342, "index-11"], [342, "index-17"], [342, "index-5"], [426, "index-12"], [428, "index-82"]], "c": [[342, "index-11"], [345, "index-0"], [426, "index-13"], [426, "index-4"], [426, "index-42"], [428, "index-77"], [433, "index-23"]], "false": [[342, "index-17"], [342, "index-4"], [342, "index-1"], [426, "index-12"]], "false\uff08\u5167\u5efa\u7269\u4ef6\uff09": [[342, "index-3"]], "genericalias\uff08\u6cdb\u578b\u5225\u540d\uff09": [[342, "index-56"]], "generic\uff08\u6cdb\u578b\uff09": [[342, "index-56"], [426, "index-5"]], "none\uff08\u5167\u5efa\u7269\u4ef6\uff09": [[342, "index-3"]], "pep 237": [[342, "index-71"], [342, "index-72"], [462, "index-10"], [464, "index-1"], [464, "index-16"], [468, "index-1"]], "pep 3118": [[342, "index-50"], [466, "index-15"], [468, "index-39"], [474, "index-4"], [474, "index-53"], [474, "index-61"], [479, "index-8"], [481, "index-249"], [481, "index-256"], [481, "index-301"]], "pep 461": [[342, "index-49"], [476, "index-7"], [476, "index-8"]], "true": [[342, "index-17"], [342, "index-4"], [342, "index-2"], [426, "index-12"]], "union\uff08\u806f\u96c6\uff09": [[342, "index-59"], [342, "index-59"]], "__args__ (genericalias \u7684\u5c6c\u6027)": [[342, "genericalias.__args__"]], "__bases__ (class \u7684\u5c6c\u6027)": [[342, "class.__bases__"]], "__class__ (instance \u7684\u5c6c\u6027)": [[342, "instance.__class__"]], "__code__\uff08\u51fd\u5f0f\u7269\u4ef6\u5c6c\u6027\uff09": [[342, "index-63"]], "__dict__ (object \u7684\u5c6c\u6027)": [[342, "object.__dict__"]], "__enter__() (contextmanager \u7684\u65b9\u6cd5)": [[342, "contextmanager.__enter__"]], "__eq__() (memoryview \u7684\u65b9\u6cd5)": [[342, "memoryview.__eq__"]], "__eq__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[342, "index-9"]], "__exit__() (contextmanager \u7684\u65b9\u6cd5)": [[342, "contextmanager.__exit__"]], "__ge__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[342, "index-9"]], "__gt__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[342, "index-9"]], "__iter__() (container \u7684\u65b9\u6cd5)": [[342, "container.__iter__"]], "__iter__() (iterator \u7684\u65b9\u6cd5)": [[342, "iterator.__iter__"]], "__le__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[342, "index-9"]], "__lt__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[342, "index-9"]], "__missing__()": [[342, "index-53"]], "__mro__ (class \u7684\u5c6c\u6027)": [[342, "class.__mro__"]], "__name__ (definition \u7684\u5c6c\u6027)": [[342, "definition.__name__"]], "__ne__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[342, "index-9"]], "__next__() (iterator \u7684\u65b9\u6cd5)": [[342, "iterator.__next__"]], "__origin__ (genericalias \u7684\u5c6c\u6027)": [[342, "genericalias.__origin__"]], "__parameters__ (genericalias \u7684\u5c6c\u6027)": [[342, "genericalias.__parameters__"]], "__qualname__ (definition \u7684\u5c6c\u6027)": [[342, "definition.__qualname__"]], "__subclasses__() (class \u7684\u65b9\u6cd5)": [[342, "class.__subclasses__"]], "__type_params__ (definition \u7684\u5c6c\u6027)": [[342, "definition.__type_params__"]], "__unpacked__ (genericalias \u7684\u5c6c\u6027)": [[342, "genericalias.__unpacked__"]], "add() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.add"]], "and": [[342, "index-4"], [342, "index-6"], [428, "index-74"], [428, "index-84"]], "annotation\uff08\u8a3b\u8a18\uff09": [[342, "index-55"]], "append()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[342, "index-24"]], "arithmetic\uff08\u7b97\u8853\uff09": [[342, "index-13"]], "array\uff08\u9663\u5217\uff09": [[342, "index-40"], [426, "index-23"]], "as_integer_ratio() (float \u7684\u65b9\u6cd5)": [[342, "float.as_integer_ratio"]], "as_integer_ratio() (int \u7684\u65b9\u6cd5)": [[342, "int.as_integer_ratio"]], "assignment\uff08\u8ce6\u503c\uff09": [[342, "index-24"], [426, "index-22"], [426, "index-48"], [426, "index-52"], [434, "index-12"], [434, "index-14"], [434, "index-15"], [434, "index-4"], [434, "index-6"], [434, "index-8"], [434, "index-9"]], "binary operator\uff08\u4e8c\u5143\u904b\u7b97\u5b50\uff09": [[342, "index-13"], [428, "index-69"], [428, "index-70"]], "binary sequence types\uff08\u4e8c\u9032\u4f4d\u5e8f\u5217\u578b\u5225\uff09": [[342, "index-39"]], "binary\uff08\u4e8c\u9032\u4f4d\uff09": [[342, "index-12"], [345, "index-0"], [428, "index-64"], [428, "index-73"]], "bit_count() (int \u7684\u65b9\u6cd5)": [[342, "int.bit_count"]], "bit_length() (int \u7684\u65b9\u6cd5)": [[342, "int.bit_length"]], "bitwise\uff08\u4f4d\u5143\uff09": [[342, "index-16"], [428, "index-59"], [428, "index-73"], [428, "index-74"], [428, "index-75"], [428, "index-76"]], "buffer protocol\uff08\u7de9\u885d\u5340\u5354\u5b9a\uff09": [[342, "index-31"], [342, "index-39"]], "built-in\uff08\u5167\u5efa\uff09": [[342, "index-0"], [426, "index-43"]], "bytearray (%)": [[342, "index-45"]], "bytearray (\u5167\u5efa\u985e\u5225)": [[342, "bytearray"]], "bytearray.splitlines \u65b9\u6cd5": [[342, "index-44"]], "bytes (%)": [[342, "index-45"]], "bytes (\u5167\u5efa\u985e\u5225)": [[342, "bytes"]], "bytes.splitlines \u65b9\u6cd5": [[342, "index-44"]], "c_contiguous (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.c_contiguous"]], "capitalize() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.capitalize"]], "capitalize() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.capitalize"]], "capitalize() (str \u7684\u65b9\u6cd5)": [[342, "str.capitalize"]], "casefold() (str \u7684\u65b9\u6cd5)": [[342, "str.casefold"]], "cast() (memoryview \u7684\u65b9\u6cd5)": [[342, "memoryview.cast"]], "ceil()\uff08\u65bc math \u6a21\u7d44\uff09": [[342, "index-15"]], "center() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.center"]], "center() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.center"]], "center() (str \u7684\u65b9\u6cd5)": [[342, "str.center"]], "chaining\uff08\u93c8\u7d50\uff09": [[342, "index-7"], [434, "index-29"]], "clear() (dict \u7684\u65b9\u6cd5)": [[342, "dict.clear"]], "clear() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.clear"]], "clear()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[342, "index-24"]], "comparing\uff08\u6bd4\u8f03\uff09": [[342, "index-8"]], "comparisons\uff08\u6bd4\u8f03\uff09": [[342, "index-7"], [428, "index-78"]], "comparison\uff08\u6bd4\u8f03\uff09": [[342, "index-7"], [426, "index-79"], [428, "index-77"]], "complex\uff08\u8907\u6578\uff09": [[342, "index-13"], [426, "index-104"], [426, "index-14"]], "concatenation\uff08\u4e32\u63a5\uff09": [[342, "index-20"]], "conjugate()\uff08\u8907\u6578\u65b9\u6cd5\uff09": [[342, "index-14"]], "container\uff08\u5bb9\u5668\uff09": [[342, "index-18"], [426, "index-3"], [426, "index-47"]], "context management protocol\uff08\u60c5\u5883\u7ba1\u7406\u5354\u5b9a\uff09": [[342, "index-54"]], "context management\uff08\u60c5\u5883\u7ba1\u7406\uff09": [[342, "index-54"]], "contiguous (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.contiguous"]], "conversions\uff08\u8f49\u63db\uff09": [[342, "index-15"]], "copy() (dict \u7684\u65b9\u6cd5)": [[342, "dict.copy"]], "copy() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.copy"]], "copy()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[342, "index-24"]], "count() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.count"]], "count() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.count"]], "count() (str \u7684\u65b9\u6cd5)": [[342, "str.count"]], "count()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[342, "index-20"]], "decode() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.decode"]], "decode() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.decode"]], "del": [[342, "index-24"], [342, "index-52"], [426, "index-74"], [434, "index-21"]], "dict (\u5167\u5efa\u985e\u5225)": [[342, "dict"]], "difference() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.difference"]], "difference_update() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.difference_update"]], "discard() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.discard"]], "encode() (str \u7684\u65b9\u6cd5)": [[342, "str.encode"]], "endswith() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.endswith"]], "endswith() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.endswith"]], "endswith() (str \u7684\u65b9\u6cd5)": [[342, "str.endswith"]], "expandtabs() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.expandtabs"]], "expandtabs() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.expandtabs"]], "expandtabs() (str \u7684\u65b9\u6cd5)": [[342, "str.expandtabs"]], "extend()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[342, "index-24"]], "f_contiguous (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.f_contiguous"]], "find() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.find"]], "find() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.find"]], "find() (str \u7684\u65b9\u6cd5)": [[342, "str.find"]], "floating point\uff08\u6d6e\u9ede\u6578\uff09": [[342, "index-11"], [342, "index-12"]], "floor()\uff08\u65bc math \u6a21\u7d44\uff09": [[342, "index-15"]], "format (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.format"]], "format() (str \u7684\u65b9\u6cd5)": [[342, "str.format"]], "format_map() (str \u7684\u65b9\u6cd5)": [[342, "str.format_map"]], "formatting\uff08\u683c\u5f0f\u5316\uff09": [[342, "index-45"]], "formatting\uff08\u683c\u5f0f\u5316\uff09\u3001printf": [[342, "index-35"]], "formatting\uff08\u683c\u5f0f\u5316\uff09\u3001\u5b57\u4e32 (%)": [[342, "index-35"]], "from_bytes() (int \u7684\u985e\u5225\u65b9\u6cd5)": [[342, "int.from_bytes"]], "fromhex() (bytearray \u7684\u985e\u5225\u65b9\u6cd5)": [[342, "bytearray.fromhex"]], "fromhex() (bytes \u7684\u985e\u5225\u65b9\u6cd5)": [[342, "bytes.fromhex"]], "fromhex() (float \u7684\u985e\u5225\u65b9\u6cd5)": [[342, "float.fromhex"]], "fromkeys() (dict \u7684\u985e\u5225\u65b9\u6cd5)": [[342, "dict.fromkeys"]], "frozenset (\u5167\u5efa\u985e\u5225)": [[342, "frozenset"]], "get() (dict \u7684\u65b9\u6cd5)": [[342, "dict.get"]], "hex() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.hex"]], "hex() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.hex"]], "hex() (float \u7684\u65b9\u6cd5)": [[342, "float.hex"]], "hex() (memoryview \u7684\u65b9\u6cd5)": [[342, "memoryview.hex"]], "hexadecimal\uff08\u5341\u516d\u9032\u4f4d\uff09": [[342, "index-12"]], "if": [[342, "index-1"], [425, "index-18"], [425, "index-3"], [428, "index-12"], [428, "index-88"]], "immutable\uff08\u4e0d\u53ef\u8b8a\uff09": [[342, "index-22"], [426, "index-17"]], "in": [[342, "index-10"], [342, "index-20"], [425, "index-6"], [428, "index-80"]], "index() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.index"]], "index() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.index"]], "index() (str \u7684\u65b9\u6cd5)": [[342, "str.index"]], "index()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[342, "index-20"]], "insert()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[342, "index-24"]], "integer\uff08\u6574\u6578\uff09": [[342, "index-11"], [342, "index-12"], [342, "index-16"], [426, "index-10"], [426, "index-11"], [426, "index-19"]], "interpolation\uff08\u63d2\u503c\uff09": [[342, "index-45"]], "interpolation\uff08\u63d2\u503c\uff09\u3001printf": [[342, "index-35"]], "interpolation\uff08\u63d2\u503c\uff09\u3001\u5b57\u4e32 (%)": [[342, "index-35"]], "intersection() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.intersection"]], "intersection_update() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.intersection_update"]], "io.stringio": [[342, "index-29"]], "is": [[342, "index-7"], [428, "index-81"]], "is not": [[342, "index-7"], [428, "index-81"]], "is_integer() (float \u7684\u65b9\u6cd5)": [[342, "float.is_integer"]], "is_integer() (int \u7684\u65b9\u6cd5)": [[342, "int.is_integer"]], "isalnum() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.isalnum"]], "isalnum() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.isalnum"]], "isalnum() (str \u7684\u65b9\u6cd5)": [[342, "str.isalnum"]], "isalpha() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.isalpha"]], "isalpha() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.isalpha"]], "isalpha() (str \u7684\u65b9\u6cd5)": [[342, "str.isalpha"]], "isascii() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.isascii"]], "isascii() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.isascii"]], "isascii() (str \u7684\u65b9\u6cd5)": [[342, "str.isascii"]], "isdecimal() (str \u7684\u65b9\u6cd5)": [[342, "str.isdecimal"]], "isdigit() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.isdigit"]], "isdigit() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.isdigit"]], "isdigit() (str \u7684\u65b9\u6cd5)": [[342, "str.isdigit"]], "isdisjoint() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.isdisjoint"]], "isidentifier() (str \u7684\u65b9\u6cd5)": [[342, "str.isidentifier"]], "islower() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.islower"]], "islower() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.islower"]], "islower() (str \u7684\u65b9\u6cd5)": [[342, "str.islower"]], "isnumeric() (str \u7684\u65b9\u6cd5)": [[342, "str.isnumeric"]], "isprintable() (str \u7684\u65b9\u6cd5)": [[342, "str.isprintable"]], "isspace() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.isspace"]], "isspace() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.isspace"]], "isspace() (str \u7684\u65b9\u6cd5)": [[342, "str.isspace"]], "issubset() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.issubset"]], "issuperset() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.issuperset"]], "istitle() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.istitle"]], "istitle() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.istitle"]], "istitle() (str \u7684\u65b9\u6cd5)": [[342, "str.istitle"]], "isupper() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.isupper"]], "isupper() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.isupper"]], "isupper() (str \u7684\u65b9\u6cd5)": [[342, "str.isupper"]], "items() (dict \u7684\u65b9\u6cd5)": [[342, "dict.items"]], "itemsize (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.itemsize"]], "iteration over\uff08\u758a\u4ee3\u65bc\uff09": [[342, "index-18"]], "iteration\uff08\u758a\u4ee3\uff09": [[342, "index-18"]], "iterator protocol\uff08\u758a\u4ee3\u5668\u5354\u5b9a\uff09": [[342, "index-18"]], "join() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.join"]], "join() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.join"]], "join() (str \u7684\u65b9\u6cd5)": [[342, "str.join"]], "keys() (dict \u7684\u65b9\u6cd5)": [[342, "dict.keys"]], "language\uff08\u8a9e\u8a00\uff09": [[342, "index-11"], [426, "index-13"], [426, "index-4"], [426, "index-42"], [428, "index-77"]], "list (\u5167\u5efa\u985e\u5225)": [[342, "list"]], "literals\uff08\u5b57\u9762\u503c\uff09": [[342, "index-12"]], "ljust() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.ljust"]], "ljust() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.ljust"]], "ljust() (str \u7684\u65b9\u6cd5)": [[342, "str.ljust"]], "loop over\uff08\u8ff4\u5708\uff09": [[342, "index-21"]], "loop\uff08\u8ff4\u5708\uff09": [[342, "index-21"], [425, "index-4"], [425, "index-6"], [434, "index-30"], [434, "index-33"]], "lower() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.lower"]], "lower() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.lower"]], "lower() (str \u7684\u65b9\u6cd5)": [[342, "str.lower"]], "lstrip() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.lstrip"]], "lstrip() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.lstrip"]], "lstrip() (str \u7684\u65b9\u6cd5)": [[342, "str.lstrip"]], "maketrans() (bytearray \u7684\u975c\u614b\u65b9\u6cd5)": [[342, "bytearray.maketrans"]], "maketrans() (bytes \u7684\u975c\u614b\u65b9\u6cd5)": [[342, "bytes.maketrans"]], "maketrans() (str \u7684\u975c\u614b\u65b9\u6cd5)": [[342, "str.maketrans"]], "masking\uff08\u906e\u7f69\uff09": [[342, "index-16"]], "max": [[342, "index-20"]], "memoryview (\u5167\u5efa\u985e\u5225)": [[342, "memoryview"]], "methods\uff08\u65b9\u6cd5\uff09": [[342, "index-32"], [342, "index-43"]], "min": [[342, "index-20"]], "mro() (class \u7684\u65b9\u6cd5)": [[342, "class.mro"]], "mutable sequence\uff08\u53ef\u8b8a\u5e8f\u5217\uff09": [[342, "index-21"], [426, "index-22"]], "mutable\uff08\u53ef\u8b8a\uff09": [[342, "index-23"]], "nbytes (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.nbytes"]], "ndim (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.ndim"]], "not": [[342, "index-6"], [428, "index-83"]], "not in": [[342, "index-10"], [342, "index-20"], [428, "index-80"]], "obj (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.obj"]], "octal\uff08\u516b\u9032\u4f4d\uff09": [[342, "index-12"]], "operations on\uff08\u64cd\u4f5c\u65bc\uff09": [[342, "index-14"], [342, "index-16"], [342, "index-20"], [342, "index-24"], [342, "index-52"]], "operation\uff08\u64cd\u4f5c\uff09": [[342, "index-20"], [428, "index-58"], [428, "index-59"], [428, "index-64"], [428, "index-71"], [428, "index-73"], [428, "index-82"], [434, "index-20"]], "operator\uff08\u904b\u7b97\u5b50\uff09": [[342, "index-10"], [342, "index-13"], [342, "index-16"], [342, "index-20"], [342, "index-4"], [342, "index-6"], [342, "index-7"], [426, "index-71"], [428, "index-58"], [428, "index-60"], [428, "index-61"], [428, "index-62"], [428, "index-65"], [428, "index-66"], [428, "index-67"], [428, "index-68"], [428, "index-69"], [428, "index-70"], [428, "index-71"], [428, "index-74"], [428, "index-75"], [428, "index-76"], [428, "index-77"], [428, "index-80"], [428, "index-81"], [428, "index-83"], [428, "index-84"], [428, "index-85"], [428, "index-88"], [428, "index-97"]], "or": [[342, "index-4"], [342, "index-6"], [428, "index-75"], [428, "index-76"], [428, "index-85"]], "over mutable sequence\uff08\u65bc\u53ef\u8b8a\u5e8f\u5217\uff09": [[342, "index-21"]], "partition() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.partition"]], "partition() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.partition"]], "partition() (str \u7684\u65b9\u6cd5)": [[342, "str.partition"]], "pop() (dict \u7684\u65b9\u6cd5)": [[342, "dict.pop"]], "pop() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.pop"]], "pop()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[342, "index-24"]], "popitem() (dict \u7684\u65b9\u6cd5)": [[342, "dict.popitem"]], "printf \u98a8\u683c\u683c\u5f0f\u5316": [[342, "index-35"], [342, "index-45"]], "range": [[342, "index-27"], [425, "index-8"]], "range (\u5167\u5efa\u985e\u5225)": [[342, "range"]], "readonly (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.readonly"]], "release() (memoryview \u7684\u65b9\u6cd5)": [[342, "memoryview.release"]], "remove() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.remove"]], "remove()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[342, "index-24"]], "removeprefix() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.removeprefix"]], "removeprefix() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.removeprefix"]], "removeprefix() (str \u7684\u65b9\u6cd5)": [[342, "str.removeprefix"]], "removesuffix() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.removesuffix"]], "removesuffix() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.removesuffix"]], "removesuffix() (str \u7684\u65b9\u6cd5)": [[342, "str.removesuffix"]], "repetition\uff08\u91cd\u8907\uff09": [[342, "index-20"]], "replace() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.replace"]], "replace() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.replace"]], "replace() (str \u7684\u65b9\u6cd5)": [[342, "str.replace"]], "reverse()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[342, "index-24"]], "rfind() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.rfind"]], "rfind() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.rfind"]], "rfind() (str \u7684\u65b9\u6cd5)": [[342, "str.rfind"]], "rindex() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.rindex"]], "rindex() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.rindex"]], "rindex() (str \u7684\u65b9\u6cd5)": [[342, "str.rindex"]], "rjust() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.rjust"]], "rjust() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.rjust"]], "rjust() (str \u7684\u65b9\u6cd5)": [[342, "str.rjust"]], "rpartition() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.rpartition"]], "rpartition() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.rpartition"]], "rpartition() (str \u7684\u65b9\u6cd5)": [[342, "str.rpartition"]], "rsplit() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.rsplit"]], "rsplit() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.rsplit"]], "rsplit() (str \u7684\u65b9\u6cd5)": [[342, "str.rsplit"]], "rstrip() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.rstrip"]], "rstrip() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.rstrip"]], "rstrip() (str \u7684\u65b9\u6cd5)": [[342, "str.rstrip"]], "set (\u5167\u5efa\u985e\u5225)": [[342, "set"]], "setdefault() (dict \u7684\u65b9\u6cd5)": [[342, "dict.setdefault"]], "shape (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.shape"]], "shifting\uff08\u79fb\u4f4d\uff09": [[342, "index-16"]], "sort() (list \u7684\u65b9\u6cd5)": [[342, "list.sort"]], "space\uff08\u7a7a\u767d\uff09": [[342, "index-37"], [342, "index-47"], [433, "index-8"]], "split() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.split"]], "split() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.split"]], "split() (str \u7684\u65b9\u6cd5)": [[342, "str.split"]], "splitlines() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.splitlines"]], "splitlines() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.splitlines"]], "splitlines() (str \u7684\u65b9\u6cd5)": [[342, "str.splitlines"]], "sprintf \u98a8\u683c\u683c\u5f0f\u5316": [[342, "index-35"], [342, "index-45"]], "start (range \u7684\u5c6c\u6027)": [[342, "range.start"]], "startswith() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.startswith"]], "startswith() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.startswith"]], "startswith() (str \u7684\u65b9\u6cd5)": [[342, "str.startswith"]], "step (range \u7684\u5c6c\u6027)": [[342, "range.step"]], "stop (range \u7684\u5c6c\u6027)": [[342, "range.stop"]], "str (\u5167\u5efa\u985e\u5225)": [[342, "str"]], "str.splitlines \u65b9\u6cd5": [[342, "index-34"]], "strides (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.strides"]], "strip() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.strip"]], "strip() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.strip"]], "strip() (str \u7684\u65b9\u6cd5)": [[342, "str.strip"]], "str\uff08\u5167\u5efa\u985e\u5225\uff09": [[342, "index-28"], [342, "index-30"], [342, "index-31"]], "suboffsets (memoryview \u7684\u5c6c\u6027)": [[342, "memoryview.suboffsets"]], "subscript\uff08\u4e0b\u6a19\uff09": [[342, "index-20"], [342, "index-24"]], "swapcase() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.swapcase"]], "swapcase() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.swapcase"]], "swapcase() (str \u7684\u65b9\u6cd5)": [[342, "str.swapcase"]], "symmetric_difference() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.symmetric_difference"]], "symmetric_difference_update() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.symmetric_difference_update"]], "text sequence type\uff08\u6587\u5b57\u5e8f\u5217\u578b\u5225\uff09": [[342, "index-28"]], "title() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.title"]], "title() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.title"]], "title() (str \u7684\u65b9\u6cd5)": [[342, "str.title"]], "to_bytes() (int \u7684\u65b9\u6cd5)": [[342, "int.to_bytes"]], "tobytes() (memoryview \u7684\u65b9\u6cd5)": [[342, "memoryview.tobytes"]], "tolist() (memoryview \u7684\u65b9\u6cd5)": [[342, "memoryview.tolist"]], "toreadonly() (memoryview \u7684\u65b9\u6cd5)": [[342, "memoryview.toreadonly"]], "translate() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.translate"]], "translate() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.translate"]], "translate() (str \u7684\u65b9\u6cd5)": [[342, "str.translate"]], "trunc()\uff08\u65bc math \u6a21\u7d44\uff09": [[342, "index-15"]], "truth\uff08\u771f\uff09": [[342, "index-1"]], "tuple (\u5167\u5efa\u985e\u5225)": [[342, "tuple"]], "type annotation\uff08\u578b\u5225\u8a3b\u8a18\uff09\uff1btype hint\uff08\u578b\u5225\u63d0\u793a\uff09": [[342, "index-55"]], "unary operator\uff08\u4e00\u5143\u904b\u7b97\u5b50\uff09": [[342, "index-13"], [428, "index-60"], [428, "index-61"]], "union() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.union"]], "update() (dict \u7684\u65b9\u6cd5)": [[342, "dict.update"]], "update() (frozenset \u7684\u65b9\u6cd5)": [[342, "frozenset.update"]], "upper() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.upper"]], "upper() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.upper"]], "upper() (str \u7684\u65b9\u6cd5)": [[342, "str.upper"]], "value": [[342, "index-1"]], "values": [[342, "index-17"], [434, "index-3"]], "values() (dict \u7684\u65b9\u6cd5)": [[342, "dict.values"]], "while": [[342, "index-1"], [425, "index-4"], [434, "index-30"], [434, "index-33"]], "zfill() (bytearray \u7684\u65b9\u6cd5)": [[342, "bytearray.zfill"]], "zfill() (bytes \u7684\u65b9\u6cd5)": [[342, "bytes.zfill"]], "zfill() (str \u7684\u65b9\u6cd5)": [[342, "str.zfill"]], "\u65bc printf \u98a8\u683c\u683c\u5f0f\u5316": [[342, "index-36"], [342, "index-37"], [342, "index-46"], [342, "index-47"]], "\uff08\u4ea6\u8acb\u898b string\uff09": [[342, "index-28"]], ", \uff08\u9017\u865f\uff09": [[343, "index-8"], [425, "index-16"], [425, "index-28"], [425, "index-42"], [428, "index-10"], [428, "index-15"], [428, "index-16"], [428, "index-17"], [428, "index-44"], [428, "index-47"], [428, "index-91"], [434, "index-18"], [434, "index-34"], [434, "index-43"], [434, "index-45"], [434, "index-6"]], "= \uff08\u7b49\u65bc\uff09": [[343, "index-3"], [345, "index-1"], [425, "index-31"], [426, "index-86"], [428, "index-47"], [433, "index-25"], [434, "index-4"]], "formatter (string \u4e2d\u7684\u985e\u5225)": [[343, "string.Formatter"]], "pep 292": [[343, "index-21"], [464, "index-3"]], "pep 378": [[343, "index-19"], [467, "index-3"], [469, "index-1"]], "pep 682": [[343, "index-18"], [471, "index-104"]], "template (string \u4e2d\u7684\u985e\u5225)": [[343, "string.Template"]], "ascii_letters (\u65bc string \u6a21\u7d44\u4e2d)": [[343, "string.ascii_letters"]], "ascii_lowercase (\u65bc string \u6a21\u7d44\u4e2d)": [[343, "string.ascii_lowercase"]], "ascii_uppercase (\u65bc string \u6a21\u7d44\u4e2d)": [[343, "string.ascii_uppercase"]], "capwords() (\u65bc string \u6a21\u7d44\u4e2d)": [[343, "string.capwords"]], "check_unused_args() (string.formatter \u7684\u65b9\u6cd5)": [[343, "string.Formatter.check_unused_args"]], "convert_field() (string.formatter \u7684\u65b9\u6cd5)": [[343, "string.Formatter.convert_field"]], "digits (\u65bc string \u6a21\u7d44\u4e2d)": [[343, "string.digits"]], "format() (string.formatter \u7684\u65b9\u6cd5)": [[343, "string.Formatter.format"]], "format_field() (string.formatter \u7684\u65b9\u6cd5)": [[343, "string.Formatter.format_field"]], "get_field() (string.formatter \u7684\u65b9\u6cd5)": [[343, "string.Formatter.get_field"]], "get_identifiers() (string.template \u7684\u65b9\u6cd5)": [[343, "string.Template.get_identifiers"]], "get_value() (string.formatter \u7684\u65b9\u6cd5)": [[343, "string.Formatter.get_value"]], "hexdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[343, "string.hexdigits"]], "is_valid() (string.template \u7684\u65b9\u6cd5)": [[343, "string.Template.is_valid"]], "octdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[343, "string.octdigits"]], "parse() (string.formatter \u7684\u65b9\u6cd5)": [[343, "string.Formatter.parse"]], "printable (\u65bc string \u6a21\u7d44\u4e2d)": [[343, "string.printable"]], "punctuation (\u65bc string \u6a21\u7d44\u4e2d)": [[343, "string.punctuation"]], "safe_substitute() (string.template \u7684\u65b9\u6cd5)": [[343, "string.Template.safe_substitute"]], "space": [[343, "index-4"]], "string": [[343, "module-string"]], "substitute() (string.template \u7684\u65b9\u6cd5)": [[343, "string.Template.substitute"]], "template (string.template \u7684\u5c6c\u6027)": [[343, "string.Template.template"]], "vformat() (string.formatter \u7684\u65b9\u6cd5)": [[343, "string.Formatter.vformat"]], "whitespace (\u65bc string \u6a21\u7d44\u4e2d)": [[343, "string.whitespace"]], "z": [[343, "index-5"]], "\u65bc template strings\uff08\u6a21\u677f\u5b57\u4e32\uff09": [[343, "index-13"]], "\u65bc\u5b57\u4e32\u683c\u5f0f\u5316": [[343, "index-10"], [343, "index-2"], [343, "index-3"], [343, "index-4"], [343, "index-5"], [343, "index-7"], [343, "index-8"]], "rfc 3454": [[344, "index-0"], [344, "index-1"], [481, "index-32"]], "in_table_a1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_a1"]], "in_table_b1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_b1"]], "in_table_c11() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c11"]], "in_table_c11_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c11_c12"]], "in_table_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c12"]], "in_table_c21() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c21"]], "in_table_c21_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c21_c22"]], "in_table_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c22"]], "in_table_c3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c3"]], "in_table_c4() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c4"]], "in_table_c5() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c5"]], "in_table_c6() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c6"]], "in_table_c7() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c7"]], "in_table_c8() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c8"]], "in_table_c9() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_c9"]], "in_table_d1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_d1"]], "in_table_d2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.in_table_d2"]], "map_table_b2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.map_table_b2"]], "map_table_b3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[344, "stringprep.map_table_b3"]], "stringprep": [[344, "module-stringprep"]], "@ \uff08\u5728\uff09": [[345, "index-1"], [425, "index-29"], [425, "index-43"], [428, "index-66"]], "struct (struct \u4e2d\u7684\u985e\u5225)": [[345, "struct.Struct"]], "calcsize() (\u65bc struct \u6a21\u7d44\u4e2d)": [[345, "struct.calcsize"]], "format (struct.struct \u7684\u5c6c\u6027)": [[345, "struct.Struct.format"]], "iter_unpack() (struct.struct \u7684\u65b9\u6cd5)": [[345, "struct.Struct.iter_unpack"]], "iter_unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[345, "struct.iter_unpack"]], "pack() (struct.struct \u7684\u65b9\u6cd5)": [[345, "struct.Struct.pack"]], "pack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[345, "struct.pack"]], "pack_into() (struct.struct \u7684\u65b9\u6cd5)": [[345, "struct.Struct.pack_into"]], "pack_into() (\u65bc struct \u6a21\u7d44\u4e2d)": [[345, "struct.pack_into"]], "packing\uff08\u6253\u5305\uff09": [[345, "index-0"]], "size (struct.struct \u7684\u5c6c\u6027)": [[345, "struct.Struct.size"]], "structures\uff08\u7d50\u69cb\uff09": [[345, "index-0"]], "unpack() (struct.struct \u7684\u65b9\u6cd5)": [[345, "struct.Struct.unpack"]], "unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[345, "struct.unpack"]], "unpack_from() (struct.struct \u7684\u65b9\u6cd5)": [[345, "struct.Struct.unpack_from"]], "unpack_from() (\u65bc struct \u6a21\u7d44\u4e2d)": [[345, "struct.unpack_from"]], "\u65bc struct format strings\uff08\u7d50\u69cb\u683c\u5f0f\u5b57\u4e32\uff09": [[345, "index-1"], [345, "index-2"], [345, "index-3"]], "above_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.ABOVE_NORMAL_PRIORITY_CLASS"]], "below_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.BELOW_NORMAL_PRIORITY_CLASS"]], "create_breakaway_from_job (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.CREATE_BREAKAWAY_FROM_JOB"]], "create_default_error_mode (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.CREATE_DEFAULT_ERROR_MODE"]], "create_new_console (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.CREATE_NEW_CONSOLE"]], "create_new_process_group (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.CREATE_NEW_PROCESS_GROUP"]], "create_no_window (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.CREATE_NO_WINDOW"]], "calledprocesserror": [[346, "subprocess.CalledProcessError"]], "completedprocess (subprocess \u4e2d\u7684\u985e\u5225)": [[346, "subprocess.CompletedProcess"]], "detached_process (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.DETACHED_PROCESS"]], "devnull (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.DEVNULL"]], "high_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.HIGH_PRIORITY_CLASS"]], "idle_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.IDLE_PRIORITY_CLASS"]], "normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.NORMAL_PRIORITY_CLASS"]], "pep 324": [[346, "index-0"], [464, "index-8"]], "pipe (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.PIPE"]], "popen (subprocess \u4e2d\u7684\u985e\u5225)": [[346, "subprocess.Popen"]], "realtime_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.REALTIME_PRIORITY_CLASS"]], "startf_useshowwindow (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.STARTF_USESHOWWINDOW"]], "startf_usestdhandles (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.STARTF_USESTDHANDLES"]], "startupinfo (subprocess \u4e2d\u7684\u985e\u5225)": [[346, "subprocess.STARTUPINFO"]], "stdout (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.STDOUT"]], "std_error_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.STD_ERROR_HANDLE"]], "std_input_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.STD_INPUT_HANDLE"]], "std_output_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.STD_OUTPUT_HANDLE"]], "sw_hide (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.SW_HIDE"]], "subprocesserror": [[346, "subprocess.SubprocessError"]], "systemroot": [[346, "index-4"]], "timeoutexpired": [[346, "subprocess.TimeoutExpired"]], "args (subprocess.completedprocess \u7684\u5c6c\u6027)": [[346, "subprocess.CompletedProcess.args"]], "args (subprocess.popen \u7684\u5c6c\u6027)": [[346, "subprocess.Popen.args"]], "call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.call"]], "check_call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.check_call"]], "check_output() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.check_output"]], "check_returncode() (subprocess.completedprocess \u7684\u65b9\u6cd5)": [[346, "subprocess.CompletedProcess.check_returncode"]], "cmd (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[346, "subprocess.CalledProcessError.cmd"]], "cmd (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[346, "subprocess.TimeoutExpired.cmd"]], "communicate() (subprocess.popen \u7684\u65b9\u6cd5)": [[346, "subprocess.Popen.communicate"]], "dwflags (subprocess.startupinfo \u7684\u5c6c\u6027)": [[346, "subprocess.STARTUPINFO.dwFlags"]], "getoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.getoutput"]], "getstatusoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.getstatusoutput"]], "hstderror (subprocess.startupinfo \u7684\u5c6c\u6027)": [[346, "subprocess.STARTUPINFO.hStdError"]], "hstdinput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[346, "subprocess.STARTUPINFO.hStdInput"]], "hstdoutput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[346, "subprocess.STARTUPINFO.hStdOutput"]], "kill() (subprocess.popen \u7684\u65b9\u6cd5)": [[346, "subprocess.Popen.kill"]], "lpattributelist (subprocess.startupinfo \u7684\u5c6c\u6027)": [[346, "subprocess.STARTUPINFO.lpAttributeList"]], "output (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[346, "subprocess.CalledProcessError.output"]], "output (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[346, "subprocess.TimeoutExpired.output"]], "pid (subprocess.popen \u7684\u5c6c\u6027)": [[346, "subprocess.Popen.pid"]], "poll() (subprocess.popen \u7684\u65b9\u6cd5)": [[346, "subprocess.Popen.poll"]], "returncode (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[346, "subprocess.CalledProcessError.returncode"]], "returncode (subprocess.completedprocess \u7684\u5c6c\u6027)": [[346, "subprocess.CompletedProcess.returncode"]], "returncode (subprocess.popen \u7684\u5c6c\u6027)": [[346, "subprocess.Popen.returncode"]], "run() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[346, "subprocess.run"]], "send_signal() (subprocess.popen \u7684\u65b9\u6cd5)": [[346, "subprocess.Popen.send_signal"]], "stderr (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[346, "subprocess.CalledProcessError.stderr"]], "stderr (subprocess.completedprocess \u7684\u5c6c\u6027)": [[346, "subprocess.CompletedProcess.stderr"]], "stderr (subprocess.popen \u7684\u5c6c\u6027)": [[346, "subprocess.Popen.stderr"]], "stderr (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[346, "subprocess.TimeoutExpired.stderr"]], "stdin (subprocess.popen \u7684\u5c6c\u6027)": [[346, "subprocess.Popen.stdin"]], "stdout (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[346, "subprocess.CalledProcessError.stdout"]], "stdout (subprocess.completedprocess \u7684\u5c6c\u6027)": [[346, "subprocess.CompletedProcess.stdout"]], "stdout (subprocess.popen \u7684\u5c6c\u6027)": [[346, "subprocess.Popen.stdout"]], "stdout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[346, "subprocess.TimeoutExpired.stdout"]], "subprocess": [[346, "module-subprocess"]], "subprocess \u6a21\u7d44": [[346, "index-1"]], "terminate() (subprocess.popen \u7684\u65b9\u6cd5)": [[346, "subprocess.Popen.terminate"]], "timeout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[346, "subprocess.TimeoutExpired.timeout"]], "wshowwindow (subprocess.startupinfo \u7684\u5c6c\u6027)": [[346, "subprocess.STARTUPINFO.wShowWindow"]], "wait() (subprocess.popen \u7684\u65b9\u6cd5)": [[346, "subprocess.Popen.wait"]], "audio_file_encoding_adpcm_g721 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_ADPCM_G721"]], "audio_file_encoding_adpcm_g722 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_ADPCM_G722"]], "audio_file_encoding_adpcm_g723_3 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3"]], "audio_file_encoding_adpcm_g723_5 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5"]], "audio_file_encoding_alaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_ALAW_8"]], "audio_file_encoding_double (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_DOUBLE"]], "audio_file_encoding_float (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_FLOAT"]], "audio_file_encoding_linear_16 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_LINEAR_16"]], "audio_file_encoding_linear_24 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_LINEAR_24"]], "audio_file_encoding_linear_32 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_LINEAR_32"]], "audio_file_encoding_linear_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_LINEAR_8"]], "audio_file_encoding_mulaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_ENCODING_MULAW_8"]], "audio_file_magic (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.AUDIO_FILE_MAGIC"]], "pep 594#sunau": [[347, "index-2"]], "close() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.close"]], "close() (sunau.au_write \u7684\u65b9\u6cd5)": [[347, "sunau.AU_write.close"]], "getcompname() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.getcompname"]], "getcomptype() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.getcomptype"]], "getframerate() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.getframerate"]], "getmark() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.getmark"]], "getmarkers() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.getmarkers"]], "getnchannels() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.getnchannels"]], "getnframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.getnframes"]], "getparams() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.getparams"]], "getsampwidth() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.getsampwidth"]], "open() (\u65bc sunau \u6a21\u7d44\u4e2d)": [[347, "sunau.open"]], "readframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.readframes"]], "rewind() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.rewind"]], "setcomptype() (sunau.au_write \u7684\u65b9\u6cd5)": [[347, "sunau.AU_write.setcomptype"]], "setframerate() (sunau.au_write \u7684\u65b9\u6cd5)": [[347, "sunau.AU_write.setframerate"]], "setnchannels() (sunau.au_write \u7684\u65b9\u6cd5)": [[347, "sunau.AU_write.setnchannels"]], "setnframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[347, "sunau.AU_write.setnframes"]], "setparams() (sunau.au_write \u7684\u65b9\u6cd5)": [[347, "sunau.AU_write.setparams"]], "setpos() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.setpos"]], "setsampwidth() (sunau.au_write \u7684\u65b9\u6cd5)": [[347, "sunau.AU_write.setsampwidth"]], "sunau": [[347, "module-sunau"]], "tell() (sunau.au_read \u7684\u65b9\u6cd5)": [[347, "sunau.AU_read.tell"]], "tell() (sunau.au_write \u7684\u65b9\u6cd5)": [[347, "sunau.AU_write.tell"]], "writeframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[347, "sunau.AU_write.writeframes"]], "writeframesraw() (sunau.au_write \u7684\u65b9\u6cd5)": [[347, "sunau.AU_write.writeframesraw"]], "class (symtable \u4e2d\u7684\u985e\u5225)": [[349, "symtable.Class"]], "function (symtable \u4e2d\u7684\u985e\u5225)": [[349, "symtable.Function"]], "symbol (symtable \u4e2d\u7684\u985e\u5225)": [[349, "symtable.Symbol"]], "symboltable (symtable \u4e2d\u7684\u985e\u5225)": [[349, "symtable.SymbolTable"]], "get_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.get_children"]], "get_frees() (symtable.function \u7684\u65b9\u6cd5)": [[349, "symtable.Function.get_frees"]], "get_globals() (symtable.function \u7684\u65b9\u6cd5)": [[349, "symtable.Function.get_globals"]], "get_id() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.get_id"]], "get_identifiers() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.get_identifiers"]], "get_lineno() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.get_lineno"]], "get_locals() (symtable.function \u7684\u65b9\u6cd5)": [[349, "symtable.Function.get_locals"]], "get_methods() (symtable.class \u7684\u65b9\u6cd5)": [[349, "symtable.Class.get_methods"]], "get_name() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.get_name"]], "get_name() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.get_name"]], "get_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.get_namespace"]], "get_namespaces() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.get_namespaces"]], "get_nonlocals() (symtable.function \u7684\u65b9\u6cd5)": [[349, "symtable.Function.get_nonlocals"]], "get_parameters() (symtable.function \u7684\u65b9\u6cd5)": [[349, "symtable.Function.get_parameters"]], "get_symbols() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.get_symbols"]], "get_type() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.get_type"]], "has_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.has_children"]], "is_annotated() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_annotated"]], "is_assigned() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_assigned"]], "is_declared_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_declared_global"]], "is_free() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_free"]], "is_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_global"]], "is_imported() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_imported"]], "is_local() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_local"]], "is_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_namespace"]], "is_nested() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.is_nested"]], "is_nonlocal() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_nonlocal"]], "is_optimized() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.is_optimized"]], "is_parameter() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_parameter"]], "is_referenced() (symtable.symbol \u7684\u65b9\u6cd5)": [[349, "symtable.Symbol.is_referenced"]], "lookup() (symtable.symboltable \u7684\u65b9\u6cd5)": [[349, "symtable.SymbolTable.lookup"]], "symtable": [[349, "module-symtable"]], "symtable() (\u65bc symtable \u6a21\u7d44\u4e2d)": [[349, "symtable.symtable"]], "pep 3149": [[350, "index-0"], [473, "index-6"], [481, "index-296"]], "pep 421": [[350, "index-15"], [350, "index-16"], [474, "index-58"]], "__breakpointhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.__breakpointhook__"]], "__displayhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.__displayhook__"]], "__excepthook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.__excepthook__"]], "__interactivehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.__interactivehook__"]], "__stderr__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.__stderr__"]], "__stdin__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.__stdin__"]], "__stdout__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.__stdout__"]], "__unraisablehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.__unraisablehook__"]], "_clear_type_cache() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys._clear_type_cache"]], "_current_exceptions() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys._current_exceptions"]], "_current_frames() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys._current_frames"]], "_debugmallocstats() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys._debugmallocstats"]], "_emscripten_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys._emscripten_info"]], "_enablelegacywindowsfsencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys._enablelegacywindowsfsencoding"]], "_getframe() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys._getframe"]], "_getframemodulename() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys._getframemodulename"]], "_xoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys._xoptions"]], "abiflags (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.abiflags"]], "activate_stack_trampoline() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.activate_stack_trampoline"]], "addaudithook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.addaudithook"]], "algorithm (sys.hash_info \u7684\u5c6c\u6027)": [[350, "sys.hash_info.algorithm"]], "api_version (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.api_version"]], "argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.argv"]], "audit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.audit"]], "auditing": [[350, "index-2"]], "base_exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.base_exec_prefix"]], "base_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.base_prefix"]], "bits_per_digit (sys.int_info \u7684\u5c6c\u6027)": [[350, "sys.int_info.bits_per_digit"]], "breakpointhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.breakpointhook"]], "builtin_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.builtin_module_names"]], "byteorder (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.byteorder"]], "bytes_warning (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.bytes_warning"]], "call_tracing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.call_tracing"]], "copyright (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.copyright"]], "deactivate_stack_trampoline() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.deactivate_stack_trampoline"]], "debug (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.debug"]], "default_max_str_digits (sys.int_info \u7684\u5c6c\u6027)": [[350, "sys.int_info.default_max_str_digits"]], "dev_mode (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.dev_mode"]], "dig (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.dig"]], "displayhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.displayhook"]], "dllhandle (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.dllhandle"]], "dont_write_bytecode (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.dont_write_bytecode"]], "dont_write_bytecode (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.dont_write_bytecode"]], "emscripten_version (sys._emscripten_info \u7684\u5c6c\u6027)": [[350, "sys._emscripten_info.emscripten_version"]], "epsilon (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.epsilon"]], "exc_info() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.exc_info"]], "excepthook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.excepthook"]], "exception() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.exception"]], "exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.exec_prefix"]], "executable (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.executable"]], "exit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.exit"]], "flags (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.flags"]], "float_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.float_info"]], "float_repr_style (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.float_repr_style"]], "get_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.get_asyncgen_hooks"]], "get_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.get_coroutine_origin_tracking_depth"]], "get_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.get_int_max_str_digits"]], "getallocatedblocks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getallocatedblocks"]], "getandroidapilevel() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getandroidapilevel"]], "getdefaultencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getdefaultencoding"]], "getdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getdlopenflags"]], "getfilesystemencodeerrors() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getfilesystemencodeerrors"]], "getfilesystemencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getfilesystemencoding"]], "getprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getprofile"]], "getrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getrecursionlimit"]], "getrefcount() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getrefcount"]], "getsizeof() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getsizeof"]], "getswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getswitchinterval"]], "gettrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.gettrace"]], "getunicodeinternedsize() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getunicodeinternedsize"]], "getwindowsversion() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.getwindowsversion"]], "hash_bits (sys.hash_info \u7684\u5c6c\u6027)": [[350, "sys.hash_info.hash_bits"]], "hash_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.hash_info"]], "hash_randomization (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.hash_randomization"]], "hexversion (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.hexversion"]], "ignore_environment (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.ignore_environment"]], "imag (sys.hash_info \u7684\u5c6c\u6027)": [[350, "sys.hash_info.imag"]], "implementation (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.implementation"]], "inf (sys.hash_info \u7684\u5c6c\u6027)": [[350, "sys.hash_info.inf"]], "inspect (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.inspect"]], "int_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.int_info"]], "int_max_str_digits (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.int_max_str_digits"]], "interactive (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.interactive"]], "intern() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.intern"]], "interpreter prompts\uff08\u76f4\u8b6f\u5668\u63d0\u793a\uff09": [[350, "index-27"]], "is_finalizing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.is_finalizing"]], "is_stack_trampoline_active() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.is_stack_trampoline_active"]], "isolated (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.isolated"]], "last_exc (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.last_exc"]], "last_traceback (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.last_traceback"]], "last_type (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.last_type"]], "last_value (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.last_value"]], "lock (sys.thread_info \u7684\u5c6c\u6027)": [[350, "sys.thread_info.lock"]], "mant_dig (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.mant_dig"]], "max (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.max"]], "max_10_exp (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.max_10_exp"]], "max_exp (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.max_exp"]], "maxsize (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.maxsize"]], "maxunicode (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.maxunicode"]], "meta_path (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.meta_path"]], "min (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.min"]], "min_10_exp (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.min_10_exp"]], "min_exp (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.min_exp"]], "modules (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.modules"]], "modulus (sys.hash_info \u7684\u5c6c\u6027)": [[350, "sys.hash_info.modulus"]], "name (sys.thread_info \u7684\u5c6c\u6027)": [[350, "sys.thread_info.name"]], "nan (sys.hash_info \u7684\u5c6c\u6027)": [[350, "sys.hash_info.nan"]], "no_site (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.no_site"]], "no_user_site (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.no_user_site"]], "optimize (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.optimize"]], "orig_argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.orig_argv"]], "path (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.path"]], "path_hooks (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.path_hooks"]], "path_importer_cache (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.path_importer_cache"]], "platform (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.platform"]], "platlibdir (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.platlibdir"]], "prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.prefix"]], "profile function": [[350, "index-10"], [350, "index-28"], [363, "index-2"], [363, "index-3"]], "profiler": [[350, "index-10"], [350, "index-28"]], "prompts, interpreter\uff08\u63d0\u793a\u3001\u76f4\u8b6f\u5668\uff09": [[350, "index-27"]], "ps1 (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.ps1"]], "ps2 (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.ps2"]], "pthreads (sys._emscripten_info \u7684\u5c6c\u6027)": [[350, "sys._emscripten_info.pthreads"]], "pycache_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.pycache_prefix"]], "quiet (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.quiet"]], "radix (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.radix"]], "rounds (sys.float_info \u7684\u5c6c\u6027)": [[350, "sys.float_info.rounds"]], "runtime (sys._emscripten_info \u7684\u5c6c\u6027)": [[350, "sys._emscripten_info.runtime"]], "safe_path (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.safe_path"]], "seed_bits (sys.hash_info \u7684\u5c6c\u6027)": [[350, "sys.hash_info.seed_bits"]], "set_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.set_asyncgen_hooks"]], "set_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.set_coroutine_origin_tracking_depth"]], "set_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.set_int_max_str_digits"]], "setdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.setdlopenflags"]], "setprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.setprofile"]], "setrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.setrecursionlimit"]], "setswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.setswitchinterval"]], "settrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.settrace"]], "shared_memory (sys._emscripten_info \u7684\u5c6c\u6027)": [[350, "sys._emscripten_info.shared_memory"]], "sizeof_digit (sys.int_info \u7684\u5c6c\u6027)": [[350, "sys.int_info.sizeof_digit"]], "stderr (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.stderr"]], "stdin (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.stdin"]], "stdlib_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.stdlib_module_names"]], "stdout (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.stdout"]], "str_digits_check_threshold (sys.int_info \u7684\u5c6c\u6027)": [[350, "sys.int_info.str_digits_check_threshold"]], "thread_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.thread_info"]], "trace function": [[350, "index-11"], [350, "index-29"], [363, "index-0"], [363, "index-1"]], "traceback": [[350, "index-8"], [379, "index-0"], [379, "module-traceback"], [425, "index-11"], [426, "index-66"], [434, "index-28"]], "tracebacklimit (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.tracebacklimit"]], "unraisablehook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.unraisablehook"]], "utf8_mode (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.utf8_mode"]], "verbose (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.verbose"]], "version (sys.thread_info \u7684\u5c6c\u6027)": [[350, "sys.thread_info.version"]], "version (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.version"]], "version_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.version_info"]], "warn_default_encoding (sys.flags \u7684\u5c6c\u6027)": [[350, "sys.flags.warn_default_encoding"]], "warnoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.warnoptions"]], "width (sys.hash_info \u7684\u5c6c\u6027)": [[350, "sys.hash_info.width"]], "winver (\u65bc sys \u6a21\u7d44\u4e2d)": [[350, "sys.winver"]], "branch (monitoring event)": [[351, "monitoring-event-BRANCH"]], "call (monitoring event)": [[351, "monitoring-event-CALL"]], "c_raise (monitoring event)": [[351, "monitoring-event-C_RAISE"]], "c_return (monitoring event)": [[351, "monitoring-event-C_RETURN"]], "disable (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.DISABLE"]], "exception_handled (monitoring event)": [[351, "monitoring-event-EXCEPTION_HANDLED"]], "instruction (monitoring event)": [[351, "monitoring-event-INSTRUCTION"]], "jump (monitoring event)": [[351, "monitoring-event-JUMP"]], "line (monitoring event)": [[351, "monitoring-event-LINE"]], "missing (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.MISSING"]], "no_events (monitoring event)": [[351, "monitoring-event-NO_EVENTS"]], "pep 380#use-of-stopiteration-to-return-values": [[351, "index-0"]], "py_resume (monitoring event)": [[351, "monitoring-event-PY_RESUME"]], "py_return (monitoring event)": [[351, "monitoring-event-PY_RETURN"]], "py_start (monitoring event)": [[351, "monitoring-event-PY_START"]], "py_throw (monitoring event)": [[351, "monitoring-event-PY_THROW"]], "py_unwind (monitoring event)": [[351, "monitoring-event-PY_UNWIND"]], "py_yield (monitoring event)": [[351, "monitoring-event-PY_YIELD"]], "raise (monitoring event)": [[351, "monitoring-event-RAISE"]], "reraise (monitoring event)": [[351, "monitoring-event-RERAISE"]], "stop_iteration (monitoring event)": [[351, "monitoring-event-STOP_ITERATION"]], "free_tool_id() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.free_tool_id"]], "get_events() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.get_events"]], "get_local_events() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.get_local_events"]], "get_tool() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.get_tool"]], "register_callback() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.register_callback"]], "restart_events() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.restart_events"]], "set_events() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.set_events"]], "set_local_events() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.set_local_events"]], "sys.monitoring": [[351, "module-sys.monitoring"]], "use_tool_id() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[351, "sys.monitoring.use_tool_id"]], "_get_preferred_schemes() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig._get_preferred_schemes"]], "configuration information\uff08\u8a2d\u5b9a\u8cc7\u8a0a\uff09": [[353, "index-0"]], "get_config_h_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_config_h_filename"]], "get_config_var() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_config_var"]], "get_config_vars() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_config_vars"]], "get_default_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_default_scheme"]], "get_makefile_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_makefile_filename"]], "get_path() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_path"]], "get_path_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_path_names"]], "get_paths() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_paths"]], "get_platform() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_platform"]], "get_preferred_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_preferred_scheme"]], "get_python_version() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_python_version"]], "get_scheme_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.get_scheme_names"]], "is_python_build() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.is_python_build"]], "parse_config_h() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[353, "sysconfig.parse_config_h"]], "sysconfig": [[353, "module-sysconfig"]], "closelog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[354, "syslog.closelog"]], "openlog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[354, "syslog.openlog"]], "setlogmask() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[354, "syslog.setlogmask"]], "syslog": [[354, "module-syslog"]], "syslog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[354, "syslog.syslog"]], "nannynag": [[355, "tabnanny.NannyNag"]], "check() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[355, "tabnanny.check"]], "filename_only (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[355, "tabnanny.filename_only"]], "process_tokens() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[355, "tabnanny.process_tokens"]], "tabnanny": [[355, "module-tabnanny"]], "verbose (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[355, "tabnanny.verbose"]], "--create": [[356, "cmdoption-tarfile-create"], [420, "cmdoption-zipfile-create"]], "--extract": [[356, "cmdoption-tarfile-extract"], [420, "cmdoption-zipfile-extract"]], "--filter": [[356, "cmdoption-tarfile-filter"]], "--list": [[356, "cmdoption-tarfile-list"], [420, "cmdoption-zipfile-list"]], "--test": [[356, "cmdoption-tarfile-test"], [420, "cmdoption-zipfile-test"]], "--verbose": [[356, "cmdoption-tarfile-v"], [365, "cmdoption-timeit-v"], [386, "cmdoption-unittest-discover-v"]], "aregtype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.AREGTYPE"]], "absolutelinkerror": [[356, "tarfile.AbsoluteLinkError"]], "absolutepatherror": [[356, "tarfile.AbsolutePathError"]], "blktype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.BLKTYPE"]], "chrtype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.CHRTYPE"]], "conttype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.CONTTYPE"]], "compressionerror": [[356, "tarfile.CompressionError"]], "default_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.DEFAULT_FORMAT"]], "dirtype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.DIRTYPE"]], "encoding (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.ENCODING"]], "extracterror": [[356, "tarfile.ExtractError"]], "fifotype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.FIFOTYPE"]], "filtererror": [[356, "tarfile.FilterError"]], "gnutype_longlink (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.GNUTYPE_LONGLINK"]], "gnutype_longname (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.GNUTYPE_LONGNAME"]], "gnutype_sparse (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.GNUTYPE_SPARSE"]], "gnu_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.GNU_FORMAT"]], "headererror": [[356, "tarfile.HeaderError"]], "lnktype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.LNKTYPE"]], "linkoutsidedestinationerror": [[356, "tarfile.LinkOutsideDestinationError"]], "outsidedestinationerror": [[356, "tarfile.OutsideDestinationError"]], "pax_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.PAX_FORMAT"]], "pep 706": [[356, "index-0"], [470, "index-40"], [471, "index-41"], [472, "index-22"], [479, "index-26"], [480, "index-29"]], "regtype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.REGTYPE"]], "readerror": [[356, "tarfile.ReadError"]], "symtype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.SYMTYPE"]], "specialfileerror": [[356, "tarfile.SpecialFileError"]], "streamerror": [[356, "tarfile.StreamError"]], "tarerror": [[356, "tarfile.TarError"]], "tarfile (tarfile \u4e2d\u7684\u985e\u5225)": [[356, "tarfile.TarFile"]], "tarinfo (tarfile \u4e2d\u7684\u985e\u5225)": [[356, "tarfile.TarInfo"]], "ustar_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.USTAR_FORMAT"]], "add() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.add"]], "addfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.addfile"]], "chksum (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.chksum"]], "close() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.close"]], "data_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.data_filter"]], "devmajor (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.devmajor"]], "devminor (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.devminor"]], "errorlevel (tarfile.tarfile \u7684\u5c6c\u6027)": [[356, "tarfile.TarFile.errorlevel"]], "extract() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.extract"]], "extractall() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.extractall"]], "extractfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.extractfile"]], "extraction_filter (tarfile.tarfile \u7684\u5c6c\u6027)": [[356, "tarfile.TarFile.extraction_filter"]], "frombuf() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[356, "tarfile.TarInfo.frombuf"]], "fromtarfile() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[356, "tarfile.TarInfo.fromtarfile"]], "fully_trusted_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.fully_trusted_filter"]], "getmember() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.getmember"]], "getmembers() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.getmembers"]], "getnames() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.getnames"]], "gettarinfo() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.gettarinfo"]], "gid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.gid"]], "gname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.gname"]], "is_tarfile() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.is_tarfile"]], "isblk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.isblk"]], "ischr() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.ischr"]], "isdev() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.isdev"]], "isdir() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.isdir"]], "isfifo() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.isfifo"]], "isfile() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.isfile"]], "islnk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.islnk"]], "isreg() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.isreg"]], "issym() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.issym"]], "linkname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.linkname"]], "list() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.list"]], "mode (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.mode"]], "mtime (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.mtime"]], "name (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.name"]], "next() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[356, "tarfile.TarFile.next"]], "offset (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.offset"]], "offset_data (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.offset_data"]], "open() (tarfile.tarfile \u7684\u985e\u5225\u65b9\u6cd5)": [[356, "tarfile.TarFile.open"]], "open() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.open"]], "pax_headers (tarfile.tarfile \u7684\u5c6c\u6027)": [[356, "tarfile.TarFile.pax_headers"]], "pax_headers (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.pax_headers"]], "replace() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.replace"]], "size (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.size"]], "sparse (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.sparse"]], "tar_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[356, "tarfile.tar_filter"]], "tarfile": [[356, "module-tarfile"]], "tarfile \u547d\u4ee4\u5217\u9078\u9805": [[356, "cmdoption-tarfile-c"], [356, "cmdoption-tarfile-create"], [356, "cmdoption-tarfile-e"], [356, "cmdoption-tarfile-extract"], [356, "cmdoption-tarfile-filter"], [356, "cmdoption-tarfile-l"], [356, "cmdoption-tarfile-list"], [356, "cmdoption-tarfile-t"], [356, "cmdoption-tarfile-test"], [356, "cmdoption-tarfile-v"]], "tarinfo (tarfile.filtererror \u7684\u5c6c\u6027)": [[356, "tarfile.FilterError.tarinfo"]], "tobuf() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[356, "tarfile.TarInfo.tobuf"]], "type (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.type"]], "uid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.uid"]], "uname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[356, "tarfile.TarInfo.uname"]], "pep 594#telnetlib": [[357, "index-5"]], "rfc 854": [[357, "index-2"], [357, "index-3"]], "telnet": [[357, "index-0"]], "telnet (telnetlib \u4e2d\u7684\u985e\u5225)": [[357, "telnetlib.Telnet"]], "close() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.close"]], "expect() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.expect"]], "fileno() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.fileno"]], "get_socket() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.get_socket"]], "interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.interact"]], "msg() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.msg"]], "mt_interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.mt_interact"]], "open() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.open"]], "read_all() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.read_all"]], "read_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.read_eager"]], "read_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.read_lazy"]], "read_sb_data() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.read_sb_data"]], "read_some() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.read_some"]], "read_until() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.read_until"]], "read_very_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.read_very_eager"]], "read_very_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.read_very_lazy"]], "set_debuglevel() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.set_debuglevel"]], "set_option_negotiation_callback() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.set_option_negotiation_callback"]], "telnetlib": [[357, "module-telnetlib"]], "write() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[357, "telnetlib.Telnet.write"]], "namedtemporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[358, "tempfile.NamedTemporaryFile"]], "spooledtemporaryfile (tempfile \u4e2d\u7684\u985e\u5225)": [[358, "tempfile.SpooledTemporaryFile"]], "temp": [[358, "index-8"], [459, "index-7"]], "tmp": [[358, "index-9"]], "tmpdir": [[358, "index-7"], [481, "index-49"]], "temporarydirectory (tempfile \u4e2d\u7684\u985e\u5225)": [[358, "tempfile.TemporaryDirectory"]], "temporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[358, "tempfile.TemporaryFile"]], "cleanup() (tempfile.temporarydirectory \u7684\u65b9\u6cd5)": [[358, "tempfile.TemporaryDirectory.cleanup"]], "file name\uff08\u6a94\u6848\u540d\u7a31\uff09": [[358, "index-0"]], "gettempdir() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[358, "tempfile.gettempdir"]], "gettempdirb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[358, "tempfile.gettempdirb"]], "gettempprefix() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[358, "tempfile.gettempprefix"]], "gettempprefixb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[358, "tempfile.gettempprefixb"]], "mkdtemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[358, "tempfile.mkdtemp"]], "mkstemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[358, "tempfile.mkstemp"]], "mktemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[358, "tempfile.mktemp"]], "name (tempfile.temporarydirectory \u7684\u5c6c\u6027)": [[358, "tempfile.TemporaryDirectory.name"]], "rollover() (tempfile.spooledtemporaryfile \u7684\u65b9\u6cd5)": [[358, "tempfile.SpooledTemporaryFile.rollover"]], "tempdir (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[358, "tempfile.tempdir"]], "tempfile": [[358, "module-tempfile"]], "temporary\uff08\u81e8\u6642\uff09": [[358, "index-0"]], "tcsadrain (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.TCSADRAIN"]], "tcsaflush (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.TCSAFLUSH"]], "tcsanow (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.TCSANOW"]], "tcdrain() (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.tcdrain"]], "tcflow() (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.tcflow"]], "tcflush() (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.tcflush"]], "tcgetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.tcgetattr"]], "tcgetwinsize() (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.tcgetwinsize"]], "tcsendbreak() (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.tcsendbreak"]], "tcsetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.tcsetattr"]], "tcsetwinsize() (\u65bc termios \u6a21\u7d44\u4e2d)": [[359, "termios.tcsetwinsize"]], "termios": [[359, "module-termios"]], "tty": [[359, "index-0"], [381, "module-tty"]], "always_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.ALWAYS_EQ"]], "bytecodetestcase (test.support.bytecode_helper \u4e2d\u7684\u985e\u5225)": [[360, "test.support.bytecode_helper.BytecodeTestCase"]], "cleanimport (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[360, "test.support.import_helper.CleanImport"]], "dirsonsyspath (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[360, "test.support.import_helper.DirsOnSysPath"]], "environmentvarguard (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[360, "test.support.os_helper.EnvironmentVarGuard"]], "fs_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.FS_NONASCII"]], "fakepath (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[360, "test.support.os_helper.FakePath"]], "have_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.HAVE_DOCSTRINGS"]], "internet_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.INTERNET_TIMEOUT"]], "ipv6_enabled (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.socket_helper.IPV6_ENABLED"]], "largest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.LARGEST"]], "long_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.LONG_TIMEOUT"]], "loopback_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.LOOPBACK_TIMEOUT"]], "max_py_ssize_t (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.MAX_Py_ssize_t"]], "missing_c_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.MISSING_C_DOCSTRINGS"]], "matcher (test.support \u4e2d\u7684\u985e\u5225)": [[360, "test.support.Matcher"]], "never_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.NEVER_EQ"]], "pgo (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.PGO"]], "pipe_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.PIPE_MAX_SIZE"]], "pythonusersite": [[360, "index-2"]], "py_debug (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.Py_DEBUG"]], "resourcedenied": [[360, "test.support.ResourceDenied"]], "savedcwd (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.SAVEDCWD"]], "short_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.SHORT_TIMEOUT"]], "smallest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.SMALLEST"]], "sock_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.SOCK_MAX_SIZE"]], "savesignals (test.support \u4e2d\u7684\u985e\u5225)": [[360, "test.support.SaveSignals"]], "suppresscrashreport (test.support \u4e2d\u7684\u985e\u5225)": [[360, "test.support.SuppressCrashReport"]], "testfn (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.TESTFN"]], "testfn_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.TESTFN_NONASCII"]], "testfn_undecodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.TESTFN_UNDECODABLE"]], "testfn_unencodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.TESTFN_UNENCODABLE"]], "testfn_unicode (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.TESTFN_UNICODE"]], "test_data_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.TEST_DATA_DIR"]], "test_home_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.TEST_HOME_DIR"]], "test_http_url (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.TEST_HTTP_URL"]], "test_support_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.TEST_SUPPORT_DIR"]], "testfailed": [[360, "test.support.TestFailed"]], "warningsrecorder (test.support.warnings_helper \u4e2d\u7684\u985e\u5225)": [[360, "test.support.warnings_helper.WarningsRecorder"]], "adjust_int_max_str_digits() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.adjust_int_max_str_digits"]], "anticipate_failure() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.anticipate_failure"]], "args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.args_from_interpreter_flags"]], "assertinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[360, "test.support.bytecode_helper.BytecodeTestCase.assertInBytecode"]], "assertnotinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[360, "test.support.bytecode_helper.BytecodeTestCase.assertNotInBytecode"]], "assert_python_failure() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.script_helper.assert_python_failure"]], "assert_python_ok() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.script_helper.assert_python_ok"]], "bigaddrspacetest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.bigaddrspacetest"]], "bigmemtest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.bigmemtest"]], "bind_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.socket_helper.bind_port"]], "bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.socket_helper.bind_unix_socket"]], "busy_retry() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.busy_retry"]], "calcobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.calcobjsize"]], "calcvobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.calcvobjsize"]], "can_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.can_symlink"]], "can_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.can_xattr"]], "captured_stderr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.captured_stderr"]], "captured_stdin() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.captured_stdin"]], "captured_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.captured_stdout"]], "catch_threading_exception() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.threading_helper.catch_threading_exception"]], "catch_unraisable_exception() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.catch_unraisable_exception"]], "change_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.change_cwd"]], "check__all__() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.check__all__"]], "check_disallow_instantiation() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.check_disallow_instantiation"]], "check_free_after_iterating() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.check_free_after_iterating"]], "check_impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.check_impl_detail"]], "check_no_resource_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.warnings_helper.check_no_resource_warning"]], "check_syntax_error() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.check_syntax_error"]], "check_syntax_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.warnings_helper.check_syntax_warning"]], "check_warnings() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.warnings_helper.check_warnings"]], "checksizeof() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.checksizeof"]], "cpython_only() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.cpython_only"]], "create_empty_file() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.create_empty_file"]], "detect_api_mismatch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.detect_api_mismatch"]], "disable_faulthandler() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.disable_faulthandler"]], "disable_gc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.disable_gc"]], "fd_count() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.fd_count"]], "find_unused_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.socket_helper.find_unused_port"]], "findfile() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.findfile"]], "flush_std_streams() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.flush_std_streams"]], "forget() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.import_helper.forget"]], "fs_is_case_insensitive() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.fs_is_case_insensitive"]], "gc_collect() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.gc_collect"]], "get_attribute() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.get_attribute"]], "get_disassembly_as_string() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[360, "test.support.bytecode_helper.BytecodeTestCase.get_disassembly_as_string"]], "get_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.get_original_stdout"]], "get_pagesize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.get_pagesize"]], "ignore_warnings() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.warnings_helper.ignore_warnings"]], "impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.impl_detail"]], "import_fresh_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.import_helper.import_fresh_module"]], "import_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.import_helper.import_module"]], "interpreter_requires_environment() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.script_helper.interpreter_requires_environment"]], "is_android (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.is_android"]], "is_jython (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.is_jython"]], "is_resource_enabled() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.is_resource_enabled"]], "join_thread() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.threading_helper.join_thread"]], "kill_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.script_helper.kill_python"]], "load_package_tests() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.load_package_tests"]], "make_bad_fd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.make_bad_fd"]], "make_legacy_pyc() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.import_helper.make_legacy_pyc"]], "make_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.script_helper.make_pkg"]], "make_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.script_helper.make_script"]], "make_zip_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.script_helper.make_zip_pkg"]], "make_zip_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.script_helper.make_zip_script"]], "match_value() (test.support.matcher \u7684\u65b9\u6cd5)": [[360, "test.support.Matcher.match_value"]], "matches() (test.support.matcher \u7684\u65b9\u6cd5)": [[360, "test.support.Matcher.matches"]], "max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.max_memuse"]], "missing_compiler_executable() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.missing_compiler_executable"]], "modules_cleanup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.import_helper.modules_cleanup"]], "modules_setup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.import_helper.modules_setup"]], "no_tracing() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.no_tracing"]], "open_urlresource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.open_urlresource"]], "optim_args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.optim_args_from_interpreter_flags"]], "patch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.patch"]], "print_warning() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.print_warning"]], "python_is_optimized() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.python_is_optimized"]], "real_max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.real_max_memuse"]], "reap_children() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.reap_children"]], "reap_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.threading_helper.reap_threads"]], "record_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.record_original_stdout"]], "refcount_test() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.refcount_test"]], "requires() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires"]], "requires_ieee_754() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_IEEE_754"]], "requires_bz2() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_bz2"]], "requires_docstrings() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_docstrings"]], "requires_freebsd_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_freebsd_version"]], "requires_gzip() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_gzip"]], "requires_limited_api() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_limited_api"]], "requires_linux_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_linux_version"]], "requires_lzma() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_lzma"]], "requires_mac_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_mac_version"]], "requires_resource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_resource"]], "requires_zlib() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.requires_zlib"]], "restore() (test.support.savesignals \u7684\u65b9\u6cd5)": [[360, "test.support.SaveSignals.restore"]], "rmdir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.rmdir"]], "rmtree() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.rmtree"]], "run_in_subinterp() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.run_in_subinterp"]], "run_python_until_end() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.script_helper.run_python_until_end"]], "run_with_locale() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.run_with_locale"]], "run_with_tz() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.run_with_tz"]], "save() (test.support.savesignals \u7684\u65b9\u6cd5)": [[360, "test.support.SaveSignals.save"]], "set() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[360, "test.support.os_helper.EnvironmentVarGuard.set"]], "set_memlimit() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.set_memlimit"]], "setswitchinterval() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.setswitchinterval"]], "skip_if_broken_multiprocessing_synchronize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.skip_if_broken_multiprocessing_synchronize"]], "skip_unless_bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.socket_helper.skip_unless_bind_unix_socket"]], "skip_unless_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.skip_unless_symlink"]], "skip_unless_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.skip_unless_xattr"]], "sleeping_retry() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.sleeping_retry"]], "sortdict() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.sortdict"]], "spawn_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.script_helper.spawn_python"]], "start_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.threading_helper.start_threads"]], "swap_attr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.swap_attr"]], "swap_item() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.swap_item"]], "system_must_validate_cert() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.system_must_validate_cert"]], "temp_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.temp_cwd"]], "temp_dir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.temp_dir"]], "temp_umask() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.temp_umask"]], "test": [[360, "module-test"]], "test.regrtest": [[360, "module-test.regrtest"]], "test.support": [[360, "module-test.support"]], "test.support.bytecode_helper": [[360, "module-test.support.bytecode_helper"]], "test.support.import_helper": [[360, "module-test.support.import_helper"]], "test.support.os_helper": [[360, "module-test.support.os_helper"]], "test.support.script_helper": [[360, "module-test.support.script_helper"]], "test.support.socket_helper": [[360, "module-test.support.socket_helper"]], "test.support.threading_helper": [[360, "module-test.support.threading_helper"]], "test.support.warnings_helper": [[360, "module-test.support.warnings_helper"]], "threading_cleanup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.threading_helper.threading_cleanup"]], "threading_setup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.threading_helper.threading_setup"]], "transient_internet() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.socket_helper.transient_internet"]], "unix_shell (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.unix_shell"]], "unlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.os_helper.unlink"]], "unload() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.import_helper.unload"]], "unset() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[360, "test.support.os_helper.EnvironmentVarGuard.unset"]], "verbose (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.verbose"]], "wait_process() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.wait_process"]], "wait_threads_exit() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[360, "test.support.threading_helper.wait_threads_exit"]], "with_pymalloc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[360, "test.support.with_pymalloc"]], "textwrapper (textwrap \u4e2d\u7684\u985e\u5225)": [[362, "textwrap.TextWrapper"]], "break_long_words (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.break_long_words"]], "break_on_hyphens (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.break_on_hyphens"]], "dedent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[362, "textwrap.dedent"]], "drop_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.drop_whitespace"]], "expand_tabs (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.expand_tabs"]], "fill() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[362, "textwrap.TextWrapper.fill"]], "fill() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[362, "textwrap.fill"]], "fix_sentence_endings (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.fix_sentence_endings"]], "indent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[362, "textwrap.indent"]], "initial_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.initial_indent"]], "max_lines (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.max_lines"]], "placeholder (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.placeholder"]], "replace_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.replace_whitespace"]], "shorten() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[362, "textwrap.shorten"]], "subsequent_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.subsequent_indent"]], "tabsize (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.tabsize"]], "textwrap": [[362, "module-textwrap"]], "width (textwrap.textwrapper \u7684\u5c6c\u6027)": [[362, "textwrap.TextWrapper.width"]], "wrap() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[362, "textwrap.TextWrapper.wrap"]], "wrap() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[362, "textwrap.wrap"]], "barrier (threading \u4e2d\u7684\u985e\u5225)": [[363, "threading.Barrier"]], "boundedsemaphore (threading \u4e2d\u7684\u985e\u5225)": [[363, "threading.BoundedSemaphore"]], "condition (threading \u4e2d\u7684\u985e\u5225)": [[363, "threading.Condition"]], "event (threading \u4e2d\u7684\u985e\u5225)": [[363, "threading.Event"]], "lock (threading \u4e2d\u7684\u985e\u5225)": [[363, "threading.Lock"]], "rlock (threading \u4e2d\u7684\u985e\u5225)": [[363, "threading.RLock"]], "semaphore (threading \u4e2d\u7684\u985e\u5225)": [[363, "threading.Semaphore"]], "timeout_max (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.TIMEOUT_MAX"]], "thread (threading \u4e2d\u7684\u985e\u5225)": [[363, "threading.Thread"]], "timer (threading \u4e2d\u7684\u985e\u5225)": [[363, "threading.Timer"]], "__excepthook__ (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.__excepthook__"]], "abort() (threading.barrier \u7684\u65b9\u6cd5)": [[363, "threading.Barrier.abort"]], "acquire() (threading.condition \u7684\u65b9\u6cd5)": [[363, "threading.Condition.acquire"]], "acquire() (threading.lock \u7684\u65b9\u6cd5)": [[363, "threading.Lock.acquire"]], "acquire() (threading.rlock \u7684\u65b9\u6cd5)": [[363, "threading.RLock.acquire"]], "acquire() (threading.semaphore \u7684\u65b9\u6cd5)": [[363, "threading.Semaphore.acquire"]], "active_count() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.active_count"]], "broken (threading.barrier \u7684\u5c6c\u6027)": [[363, "threading.Barrier.broken"]], "cancel() (threading.timer \u7684\u65b9\u6cd5)": [[363, "threading.Timer.cancel"]], "clear() (threading.event \u7684\u65b9\u6cd5)": [[363, "threading.Event.clear"]], "current_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.current_thread"]], "daemon (threading.thread \u7684\u5c6c\u6027)": [[363, "threading.Thread.daemon"]], "enumerate() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.enumerate"]], "excepthook() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.excepthook"]], "getname() (threading.thread \u7684\u65b9\u6cd5)": [[363, "threading.Thread.getName"]], "get_ident() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.get_ident"]], "get_native_id() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.get_native_id"]], "getprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.getprofile"]], "gettrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.gettrace"]], "ident (threading.thread \u7684\u5c6c\u6027)": [[363, "threading.Thread.ident"]], "isdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[363, "threading.Thread.isDaemon"]], "is_alive() (threading.thread \u7684\u65b9\u6cd5)": [[363, "threading.Thread.is_alive"]], "is_set() (threading.event \u7684\u65b9\u6cd5)": [[363, "threading.Event.is_set"]], "join() (threading.thread \u7684\u65b9\u6cd5)": [[363, "threading.Thread.join"]], "local (threading \u4e2d\u7684\u985e\u5225)": [[363, "threading.local"]], "locked() (threading.lock \u7684\u65b9\u6cd5)": [[363, "threading.Lock.locked"]], "main_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.main_thread"]], "n_waiting (threading.barrier \u7684\u5c6c\u6027)": [[363, "threading.Barrier.n_waiting"]], "name (threading.thread \u7684\u5c6c\u6027)": [[363, "threading.Thread.name"]], "native_id (threading.thread \u7684\u5c6c\u6027)": [[363, "threading.Thread.native_id"]], "notify() (threading.condition \u7684\u65b9\u6cd5)": [[363, "threading.Condition.notify"]], "notify_all() (threading.condition \u7684\u65b9\u6cd5)": [[363, "threading.Condition.notify_all"]], "parties (threading.barrier \u7684\u5c6c\u6027)": [[363, "threading.Barrier.parties"]], "release() (threading.condition \u7684\u65b9\u6cd5)": [[363, "threading.Condition.release"]], "release() (threading.lock \u7684\u65b9\u6cd5)": [[363, "threading.Lock.release"]], "release() (threading.rlock \u7684\u65b9\u6cd5)": [[363, "threading.RLock.release"]], "release() (threading.semaphore \u7684\u65b9\u6cd5)": [[363, "threading.Semaphore.release"]], "reset() (threading.barrier \u7684\u65b9\u6cd5)": [[363, "threading.Barrier.reset"]], "run() (threading.thread \u7684\u65b9\u6cd5)": [[363, "threading.Thread.run"]], "set() (threading.event \u7684\u65b9\u6cd5)": [[363, "threading.Event.set"]], "setdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[363, "threading.Thread.setDaemon"]], "setname() (threading.thread \u7684\u65b9\u6cd5)": [[363, "threading.Thread.setName"]], "setprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.setprofile"]], "setprofile_all_threads() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.setprofile_all_threads"]], "settrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.settrace"]], "settrace_all_threads() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.settrace_all_threads"]], "stack_size() (\u65bc threading \u6a21\u7d44\u4e2d)": [[363, "threading.stack_size"]], "start() (threading.thread \u7684\u65b9\u6cd5)": [[363, "threading.Thread.start"]], "threading": [[363, "module-threading"]], "wait() (threading.barrier \u7684\u65b9\u6cd5)": [[363, "threading.Barrier.wait"]], "wait() (threading.condition \u7684\u65b9\u6cd5)": [[363, "threading.Condition.wait"]], "wait() (threading.event \u7684\u65b9\u6cd5)": [[363, "threading.Event.wait"]], "wait_for() (threading.condition \u7684\u65b9\u6cd5)": [[363, "threading.Condition.wait_for"]], "2-digit years\uff082 \u4f4d\u6578\u5e74\u4efd\uff09": [[364, "index-3"]], "clock_boottime (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_BOOTTIME"]], "clock_highres (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_HIGHRES"]], "clock_monotonic (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_MONOTONIC"]], "clock_monotonic_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_MONOTONIC_RAW"]], "clock_process_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_PROCESS_CPUTIME_ID"]], "clock_prof (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_PROF"]], "clock_realtime (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_REALTIME"]], "clock_tai (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_TAI"]], "clock_thread_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_THREAD_CPUTIME_ID"]], "clock_uptime (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_UPTIME"]], "clock_uptime_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.CLOCK_UPTIME_RAW"]], "cpu time\uff08cpu \u6642\u9593\uff09": [[364, "index-12"], [364, "index-7"]], "coordinated universal time\uff08\u4e16\u754c\u5354\u8abf\u6642\u9593\uff09": [[364, "index-4"]], "daylight saving time\uff08\u65e5\u5149\u7bc0\u7d04\u6642\u9593\uff09": [[364, "index-5"]], "greenwich mean time\uff08\u683c\u6797\u5a01\u6cbb\u6a19\u6e96\u6642\u9593\uff09": [[364, "index-4"]], "rfc 1123": [[364, "index-21"]], "tz": [[364, "index-13"], [364, "index-14"], [364, "index-15"], [364, "index-16"], [364, "index-17"], [364, "index-18"]], "utc": [[364, "index-4"]], "year 2038\uff082038 \u5e74\u554f\u984c\uff09": [[364, "index-2"]], "altzone (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.altzone"]], "asctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.asctime"]], "benchmarking\uff08\u57fa\u6e96\u6e2c\u8a66\uff09": [[364, "index-12"], [364, "index-6"], [364, "index-7"]], "clock_getres() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.clock_getres"]], "clock_gettime() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.clock_gettime"]], "clock_gettime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.clock_gettime_ns"]], "clock_settime() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.clock_settime"]], "clock_settime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.clock_settime_ns"]], "ctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.ctime"]], "daylight (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.daylight"]], "epoch\uff08\u7d00\u5143\uff09": [[364, "index-0"]], "get_clock_info() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.get_clock_info"]], "gmtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.gmtime"]], "localtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.localtime"]], "mktime() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.mktime"]], "monotonic() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.monotonic"]], "monotonic_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.monotonic_ns"]], "perf_counter() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.perf_counter"]], "perf_counter_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.perf_counter_ns"]], "process_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.process_time"]], "process_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.process_time_ns"]], "processor time\uff08\u8655\u7406\u5668\u6642\u9593\uff09": [[364, "index-12"], [364, "index-7"]], "pthread_getcpuclockid() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.pthread_getcpuclockid"]], "seconds since the epoch": [[364, "index-1"]], "sleep() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.sleep"]], "strftime() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.strftime"]], "strptime() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.strptime"]], "struct_time (time \u4e2d\u7684\u985e\u5225)": [[364, "time.struct_time"]], "thread_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.thread_time"]], "thread_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.thread_time_ns"]], "time": [[364, "module-time"]], "time() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.time"]], "time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.time_ns"]], "timezone (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.timezone"]], "tm_day (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_day"]], "tm_gmtoff (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_gmtoff"]], "tm_hour (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_hour"]], "tm_isdst (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_isdst"]], "tm_min (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_min"]], "tm_mon (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_mon"]], "tm_sec (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_sec"]], "tm_wday (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_wday"]], "tm_yday (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_yday"]], "tm_year (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_year"]], "tm_zone (time.struct_time \u7684\u5c6c\u6027)": [[364, "time.struct_time.tm_zone"]], "tzname (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.tzname"]], "tzset() (\u65bc time \u6a21\u7d44\u4e2d)": [[364, "time.tzset"]], "--number": [[365, "cmdoption-timeit-n"]], "--process": [[365, "cmdoption-timeit-p"]], "--repeat": [[365, "cmdoption-timeit-r"]], "--setup": [[365, "cmdoption-timeit-s"]], "--unit": [[365, "cmdoption-timeit-u"]], "-n": [[365, "cmdoption-timeit-n"], [396, "cmdoption-uuid-N"], [396, "cmdoption-uuid-n"]], "-u": [[365, "cmdoption-timeit-u"], [396, "cmdoption-uuid-u"], [453, "cmdoption-u"]], "timer (timeit \u4e2d\u7684\u985e\u5225)": [[365, "timeit.Timer"]], "autorange() (timeit.timer \u7684\u65b9\u6cd5)": [[365, "timeit.Timer.autorange"]], "default_timer() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[365, "timeit.default_timer"]], "print_exc() (timeit.timer \u7684\u65b9\u6cd5)": [[365, "timeit.Timer.print_exc"]], "repeat() (timeit.timer \u7684\u65b9\u6cd5)": [[365, "timeit.Timer.repeat"]], "repeat() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[365, "timeit.repeat"]], "timeit": [[365, "module-timeit"]], "timeit \u547d\u4ee4\u5217\u9078\u9805": [[365, "cmdoption-timeit-h"], [365, "cmdoption-timeit-n"], [365, "cmdoption-timeit-p"], [365, "cmdoption-timeit-r"], [365, "cmdoption-timeit-s"], [365, "cmdoption-timeit-u"], [365, "cmdoption-timeit-v"]], "timeit() (timeit.timer \u7684\u65b9\u6cd5)": [[365, "timeit.Timer.timeit"]], "timeit() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[365, "timeit.timeit"]], "\u57fa\u6e96\u91cf\u6e2c (benchmarking)": [[365, "index-0"]], "\u6027\u80fd\u8868\u73fe": [[365, "index-0"]], "gui": [[366, "index-0"]], "graphical user interface\uff08\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\uff09": [[366, "index-0"]], "tk": [[366, "index-0"]], "tkinter": [[366, "index-0"], [367, "module-tkinter"]], "display": [[367, "index-0"], [428, "index-15"], [428, "index-16"], [428, "index-17"]], "exception (\u65bc _tkinter \u6a21\u7d44\u4e2d)": [[367, "tkinter.EXCEPTION"]], "readable (\u65bc _tkinter \u6a21\u7d44\u4e2d)": [[367, "tkinter.READABLE"]], "tcl() (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[367, "tkinter.Tcl"]], "tk (tkinter \u4e2d\u7684\u985e\u5225)": [[367, "tkinter.Tk"]], "tk option data types": [[367, "index-4"]], "writable (\u65bc _tkinter \u6a21\u7d44\u4e2d)": [[367, "tkinter.WRITABLE"]], "_tkinter": [[367, "module-_tkinter"]], "bind (widgets)": [[367, "index-5"]], "children (tkinter.tk \u7684\u5c6c\u6027)": [[367, "tkinter.Tk.children"]], "createfilehandler() (_tkinter.widget.tk \u7684\u65b9\u6cd5)": [[367, "tkinter.Widget.tk.createfilehandler"]], "deletefilehandler() (_tkinter.widget.tk \u7684\u65b9\u6cd5)": [[367, "tkinter.Widget.tk.deletefilehandler"]], "events (widgets)": [[367, "index-5"]], "master (tkinter.tk \u7684\u5c6c\u6027)": [[367, "tkinter.Tk.master"]], "packing (widgets)": [[367, "index-2"]], "tk (tkinter.tk \u7684\u5c6c\u6027)": [[367, "tkinter.Tk.tk"]], "window manager (widgets)": [[367, "index-3"]], "chooser (tkinter.colorchooser \u4e2d\u7684\u985e\u5225)": [[368, "tkinter.colorchooser.Chooser"]], "askcolor() (\u65bc tkinter.colorchooser \u6a21\u7d44\u4e2d)": [[368, "tkinter.colorchooser.askcolor"]], "tkinter.colorchooser": [[368, "module-tkinter.colorchooser"]], "dndhandler (tkinter.dnd \u4e2d\u7684\u985e\u5225)": [[369, "tkinter.dnd.DndHandler"]], "cancel() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[369, "tkinter.dnd.DndHandler.cancel"]], "dnd_start() (\u65bc tkinter.dnd \u6a21\u7d44\u4e2d)": [[369, "tkinter.dnd.dnd_start"]], "finish() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[369, "tkinter.dnd.DndHandler.finish"]], "on_motion() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[369, "tkinter.dnd.DndHandler.on_motion"]], "on_release() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[369, "tkinter.dnd.DndHandler.on_release"]], "tkinter.dnd": [[369, "module-tkinter.dnd"]], "bold (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[370, "tkinter.font.BOLD"]], "font (tkinter.font \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.font.Font"]], "italic (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[370, "tkinter.font.ITALIC"]], "normal (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[370, "tkinter.font.NORMAL"]], "roman (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[370, "tkinter.font.ROMAN"]], "actual() (tkinter.font.font \u7684\u65b9\u6cd5)": [[370, "tkinter.font.Font.actual"]], "cget() (tkinter.font.font \u7684\u65b9\u6cd5)": [[370, "tkinter.font.Font.cget"]], "config() (tkinter.font.font \u7684\u65b9\u6cd5)": [[370, "tkinter.font.Font.config"]], "copy() (tkinter.font.font \u7684\u65b9\u6cd5)": [[370, "tkinter.font.Font.copy"]], "families() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[370, "tkinter.font.families"]], "measure() (tkinter.font.font \u7684\u65b9\u6cd5)": [[370, "tkinter.font.Font.measure"]], "metrics() (tkinter.font.font \u7684\u65b9\u6cd5)": [[370, "tkinter.font.Font.metrics"]], "names() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[370, "tkinter.font.names"]], "nametofont() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[370, "tkinter.font.nametofont"]], "tkinter.font": [[370, "module-tkinter.font"]], "abort (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.ABORT"]], "abortretryignore (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.ABORTRETRYIGNORE"]], "cancel (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.CANCEL"]], "error (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.ERROR"]], "ignore (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.IGNORE"]], "info (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.INFO"]], "message (tkinter.messagebox \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.messagebox.Message"]], "no (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.NO"]], "ok (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.OK"]], "okcancel (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.OKCANCEL"]], "question (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.QUESTION"]], "retry (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.RETRY"]], "retrycancel (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.RETRYCANCEL"]], "warning (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.WARNING"]], "yes (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.YES"]], "yesno (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.YESNO"]], "yesnocancel (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.YESNOCANCEL"]], "askokcancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.askokcancel"]], "askquestion() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.askquestion"]], "askretrycancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.askretrycancel"]], "askyesno() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.askyesno"]], "askyesnocancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.askyesnocancel"]], "show() (tkinter.messagebox.message \u7684\u65b9\u6cd5)": [[371, "tkinter.messagebox.Message.show"]], "showerror() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.showerror"]], "showinfo() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.showinfo"]], "showwarning() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[371, "tkinter.messagebox.showwarning"]], "tkinter.messagebox": [[371, "module-tkinter.messagebox"]], "scrolledtext (tkinter.scrolledtext \u4e2d\u7684\u985e\u5225)": [[372, "tkinter.scrolledtext.ScrolledText"]], "frame (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[372, "tkinter.scrolledtext.ScrolledText.frame"]], "tkinter.scrolledtext": [[372, "module-tkinter.scrolledtext"]], "vbar (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[372, "tkinter.scrolledtext.ScrolledText.vbar"]], "balloon (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.Balloon"]], "buttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.ButtonBox"]], "checklist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.CheckList"]], "combobox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.ComboBox"]], "control (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.Control"]], "dirlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.DirList"]], "dirselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.DirSelectBox"]], "dirselectdialog (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.DirSelectDialog"]], "dirtree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.DirTree"]], "exfileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.ExFileSelectBox"]], "fileentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.FileEntry"]], "fileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.FileSelectBox"]], "form (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.Form"]], "hlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.HList"]], "inputonly (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.InputOnly"]], "labelentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.LabelEntry"]], "labelframe (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.LabelFrame"]], "listnotebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.ListNoteBook"]], "meter (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.Meter"]], "notebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.NoteBook"]], "optionmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.OptionMenu"]], "panedwindow (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.PanedWindow"]], "popupmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.PopupMenu"]], "select (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.Select"]], "stdbuttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.StdButtonBox"]], "tlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.TList"]], "tix": [[373, "index-0"]], "tk (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.Tk"]], "tree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.Tree"]], "tixcommand (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.tix.tixCommand"]], "tix_addbitmapdir() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[373, "tkinter.tix.tixCommand.tix_addbitmapdir"]], "tix_cget() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[373, "tkinter.tix.tixCommand.tix_cget"]], "tix_configure() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[373, "tkinter.tix.tixCommand.tix_configure"]], "tix_filedialog() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[373, "tkinter.tix.tixCommand.tix_filedialog"]], "tix_getbitmap() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[373, "tkinter.tix.tixCommand.tix_getbitmap"]], "tix_getimage() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[373, "tkinter.tix.tixCommand.tix_getimage"]], "tix_option_get() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[373, "tkinter.tix.tixCommand.tix_option_get"]], "tix_resetoptions() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[373, "tkinter.tix.tixCommand.tix_resetoptions"]], "tkinter.tix": [[373, "module-tkinter.tix"]], "combobox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.ttk.Combobox"]], "notebook (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.ttk.Notebook"]], "progressbar (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.ttk.Progressbar"]], "spinbox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.ttk.Spinbox"]], "style (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.ttk.Style"]], "treeview (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.ttk.Treeview"]], "widget (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.ttk.Widget"]], "add() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Notebook.add"]], "bbox() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.bbox"]], "column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.column"]], "configure() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.configure"]], "current() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Combobox.current"]], "delete() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.delete"]], "detach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.detach"]], "element_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.element_create"]], "element_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.element_names"]], "element_options() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.element_options"]], "enable_traversal() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Notebook.enable_traversal"]], "exists() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.exists"]], "focus() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.focus"]], "forget() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Notebook.forget"]], "get() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Combobox.get"]], "get() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Spinbox.get"]], "get_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.get_children"]], "heading() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.heading"]], "hide() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Notebook.hide"]], "identify() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Notebook.identify"]], "identify() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.identify"]], "identify() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Widget.identify"]], "identify_column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.identify_column"]], "identify_element() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.identify_element"]], "identify_region() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.identify_region"]], "identify_row() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.identify_row"]], "index() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Notebook.index"]], "index() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.index"]], "insert() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Notebook.insert"]], "insert() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.insert"]], "instate() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Widget.instate"]], "item() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.item"]], "layout() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.layout"]], "lookup() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.lookup"]], "map() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.map"]], "move() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.move"]], "next() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.next"]], "parent() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.parent"]], "prev() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.prev"]], "reattach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.reattach"]], "see() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.see"]], "select() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Notebook.select"]], "selection() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.selection"]], "selection_add() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.selection_add"]], "selection_remove() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.selection_remove"]], "selection_set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.selection_set"]], "selection_toggle() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.selection_toggle"]], "set() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Combobox.set"]], "set() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Spinbox.set"]], "set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.set"]], "set_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.set_children"]], "start() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Progressbar.start"]], "state() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Widget.state"]], "step() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Progressbar.step"]], "stop() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Progressbar.stop"]], "tab() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Notebook.tab"]], "tabs() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Notebook.tabs"]], "tag_bind() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.tag_bind"]], "tag_configure() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.tag_configure"]], "tag_has() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.tag_has"]], "theme_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.theme_create"]], "theme_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.theme_names"]], "theme_settings() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.theme_settings"]], "theme_use() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Style.theme_use"]], "tkinter.ttk": [[374, "module-tkinter.ttk"]], "ttk": [[374, "index-0"]], "xview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.xview"]], "yview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[374, "tkinter.ttk.Treeview.yview"]], "amper (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.AMPER"]], "amperequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.AMPEREQUAL"]], "async (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.ASYNC"]], "at (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.AT"]], "atequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.ATEQUAL"]], "await (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.AWAIT"]], "circumflex (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.CIRCUMFLEX"]], "circumflexequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.CIRCUMFLEXEQUAL"]], "colon (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.COLON"]], "colonequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.COLONEQUAL"]], "comma (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.COMMA"]], "comment (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.COMMENT"]], "dedent (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.DEDENT"]], "dot (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.DOT"]], "doubleslash (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.DOUBLESLASH"]], "doubleslashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.DOUBLESLASHEQUAL"]], "doublestar (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.DOUBLESTAR"]], "doublestarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.DOUBLESTAREQUAL"]], "ellipsis (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.ELLIPSIS"]], "encoding (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.ENCODING"]], "endmarker (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.ENDMARKER"]], "eqequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.EQEQUAL"]], "equal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.EQUAL"]], "errortoken (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.ERRORTOKEN"]], "exclamation (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.EXCLAMATION"]], "fstring_end (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.FSTRING_END"]], "fstring_middle (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.FSTRING_MIDDLE"]], "fstring_start (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.FSTRING_START"]], "greater (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.GREATER"]], "greaterequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.GREATEREQUAL"]], "indent (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.INDENT"]], "iseof() (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.ISEOF"]], "isnonterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.ISNONTERMINAL"]], "isterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.ISTERMINAL"]], "lbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.LBRACE"]], "leftshift (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.LEFTSHIFT"]], "leftshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.LEFTSHIFTEQUAL"]], "less (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.LESS"]], "lessequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.LESSEQUAL"]], "lpar (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.LPAR"]], "lsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.LSQB"]], "minequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.MINEQUAL"]], "minus (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.MINUS"]], "name (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.NAME"]], "newline (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.NEWLINE"]], "nl (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.NL"]], "notequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.NOTEQUAL"]], "nt_offset (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.NT_OFFSET"]], "number (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.NUMBER"]], "n_tokens (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.N_TOKENS"]], "op (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.OP"]], "percent (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.PERCENT"]], "percentequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.PERCENTEQUAL"]], "plus (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.PLUS"]], "plusequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.PLUSEQUAL"]], "rarrow (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.RARROW"]], "rbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.RBRACE"]], "rightshift (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.RIGHTSHIFT"]], "rightshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.RIGHTSHIFTEQUAL"]], "rpar (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.RPAR"]], "rsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.RSQB"]], "semi (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.SEMI"]], "slash (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.SLASH"]], "slashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.SLASHEQUAL"]], "soft_keyword (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.SOFT_KEYWORD"]], "star (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.STAR"]], "starequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.STAREQUAL"]], "string (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.STRING"]], "tilde (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.TILDE"]], "type_comment (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.TYPE_COMMENT"]], "type_ignore (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.TYPE_IGNORE"]], "vbar (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.VBAR"]], "vbarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.VBAREQUAL"]], "tok_name (\u65bc token \u6a21\u7d44\u4e2d)": [[375, "token.tok_name"]], "token": [[375, "module-token"], [433, "index-0"]], "--exact": [[376, "cmdoption-tokenize-e"]], "tokenerror": [[376, "tokenize.TokenError"]], "detect_encoding() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[376, "tokenize.detect_encoding"]], "generate_tokens() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[376, "tokenize.generate_tokens"]], "open() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[376, "tokenize.open"]], "tokenize": [[376, "module-tokenize"]], "tokenize \u547d\u4ee4\u5217\u9078\u9805": [[376, "cmdoption-tokenize-e"], [376, "cmdoption-tokenize-h"]], "tokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[376, "tokenize.tokenize"]], "untokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[376, "tokenize.untokenize"]], "tomldecodeerror": [[377, "tomllib.TOMLDecodeError"]], "load() (\u65bc tomllib \u6a21\u7d44\u4e2d)": [[377, "tomllib.load"]], "loads() (\u65bc tomllib \u6a21\u7d44\u4e2d)": [[377, "tomllib.loads"]], "tomllib": [[377, "module-tomllib"]], "--count": [[378, "cmdoption-trace-c"]], "--coverdir": [[378, "cmdoption-trace-C"]], "--file": [[378, "cmdoption-trace-f"]], "--ignore-dir": [[378, "cmdoption-trace-ignore-dir"]], "--ignore-module": [[378, "cmdoption-trace-ignore-module"]], "--listfuncs": [[378, "cmdoption-trace-l"]], "--missing": [[378, "cmdoption-trace-m"]], "--no-report": [[378, "cmdoption-trace-R"]], "--report": [[378, "cmdoption-trace-r"]], "--summary": [[378, "cmdoption-trace-s"]], "--timing": [[378, "cmdoption-trace-g"]], "--trace": [[378, "cmdoption-trace-t"]], "--trackcalls": [[378, "cmdoption-trace-T"]], "-g": [[378, "cmdoption-trace-g"]], "coverageresults (trace \u4e2d\u7684\u985e\u5225)": [[378, "trace.CoverageResults"]], "trace (trace \u4e2d\u7684\u985e\u5225)": [[378, "trace.Trace"]], "results() (trace.trace \u7684\u65b9\u6cd5)": [[378, "trace.Trace.results"]], "run() (trace.trace \u7684\u65b9\u6cd5)": [[378, "trace.Trace.run"]], "runctx() (trace.trace \u7684\u65b9\u6cd5)": [[378, "trace.Trace.runctx"]], "runfunc() (trace.trace \u7684\u65b9\u6cd5)": [[378, "trace.Trace.runfunc"]], "trace": [[378, "module-trace"]], "trace \u547d\u4ee4\u5217\u9078\u9805": [[378, "cmdoption-trace-C"], [378, "cmdoption-trace-R"], [378, "cmdoption-trace-T"], [378, "cmdoption-trace-c"], [378, "cmdoption-trace-f"], [378, "cmdoption-trace-g"], [378, "cmdoption-trace-help"], [378, "cmdoption-trace-ignore-dir"], [378, "cmdoption-trace-ignore-module"], [378, "cmdoption-trace-l"], [378, "cmdoption-trace-m"], [378, "cmdoption-trace-r"], [378, "cmdoption-trace-s"], [378, "cmdoption-trace-t"], [378, "cmdoption-trace-version"]], "update() (trace.coverageresults \u7684\u65b9\u6cd5)": [[378, "trace.CoverageResults.update"]], "write_results() (trace.coverageresults \u7684\u65b9\u6cd5)": [[378, "trace.CoverageResults.write_results"]], "framesummary (traceback \u4e2d\u7684\u985e\u5225)": [[379, "traceback.FrameSummary"]], "stacksummary (traceback \u4e2d\u7684\u985e\u5225)": [[379, "traceback.StackSummary"]], "tracebackexception (traceback \u4e2d\u7684\u985e\u5225)": [[379, "traceback.TracebackException"]], "__cause__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.__cause__"]], "__context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.__context__"]], "__notes__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.__notes__"]], "__suppress_context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.__suppress_context__"]], "clear_frames() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.clear_frames"]], "end_lineno (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.end_lineno"]], "end_offset (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.end_offset"]], "exc_type (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.exc_type"]], "exceptions (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.exceptions"]], "extract() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[379, "traceback.StackSummary.extract"]], "extract_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.extract_stack"]], "extract_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.extract_tb"]], "filename (traceback.framesummary \u7684\u5c6c\u6027)": [[379, "traceback.FrameSummary.filename"]], "filename (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.filename"]], "format() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[379, "traceback.StackSummary.format"]], "format() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[379, "traceback.TracebackException.format"]], "format_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.format_exc"]], "format_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.format_exception"]], "format_exception_only() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[379, "traceback.TracebackException.format_exception_only"]], "format_exception_only() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.format_exception_only"]], "format_frame_summary() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[379, "traceback.StackSummary.format_frame_summary"]], "format_list() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.format_list"]], "format_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.format_stack"]], "format_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.format_tb"]], "from_exception() (traceback.tracebackexception \u7684\u985e\u5225\u65b9\u6cd5)": [[379, "traceback.TracebackException.from_exception"]], "from_list() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[379, "traceback.StackSummary.from_list"]], "line (traceback.framesummary \u7684\u5c6c\u6027)": [[379, "traceback.FrameSummary.line"]], "lineno (traceback.framesummary \u7684\u5c6c\u6027)": [[379, "traceback.FrameSummary.lineno"]], "lineno (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.lineno"]], "msg (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.msg"]], "name (traceback.framesummary \u7684\u5c6c\u6027)": [[379, "traceback.FrameSummary.name"]], "offset (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.offset"]], "print() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[379, "traceback.TracebackException.print"]], "print_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.print_exc"]], "print_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.print_exception"]], "print_last() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.print_last"]], "print_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.print_stack"]], "print_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.print_tb"]], "stack (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.stack"]], "text (traceback.tracebackexception \u7684\u5c6c\u6027)": [[379, "traceback.TracebackException.text"]], "walk_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.walk_stack"]], "walk_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[379, "traceback.walk_tb"]], "domainfilter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[380, "tracemalloc.DomainFilter"]], "filter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[380, "tracemalloc.Filter"]], "frame (tracemalloc \u4e2d\u7684\u985e\u5225)": [[380, "tracemalloc.Frame"]], "snapshot (tracemalloc \u4e2d\u7684\u985e\u5225)": [[380, "tracemalloc.Snapshot"]], "statistic (tracemalloc \u4e2d\u7684\u985e\u5225)": [[380, "tracemalloc.Statistic"]], "statisticdiff (tracemalloc \u4e2d\u7684\u985e\u5225)": [[380, "tracemalloc.StatisticDiff"]], "trace (tracemalloc \u4e2d\u7684\u985e\u5225)": [[380, "tracemalloc.Trace"]], "traceback (tracemalloc \u4e2d\u7684\u985e\u5225)": [[380, "tracemalloc.Traceback"]], "all_frames (tracemalloc.filter \u7684\u5c6c\u6027)": [[380, "tracemalloc.Filter.all_frames"]], "clear_traces() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[380, "tracemalloc.clear_traces"]], "compare_to() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[380, "tracemalloc.Snapshot.compare_to"]], "count (tracemalloc.statistic \u7684\u5c6c\u6027)": [[380, "tracemalloc.Statistic.count"]], "count (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[380, "tracemalloc.StatisticDiff.count"]], "count_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[380, "tracemalloc.StatisticDiff.count_diff"]], "domain (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[380, "tracemalloc.DomainFilter.domain"]], "domain (tracemalloc.filter \u7684\u5c6c\u6027)": [[380, "tracemalloc.Filter.domain"]], "domain (tracemalloc.trace \u7684\u5c6c\u6027)": [[380, "tracemalloc.Trace.domain"]], "dump() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[380, "tracemalloc.Snapshot.dump"]], "filename (tracemalloc.frame \u7684\u5c6c\u6027)": [[380, "tracemalloc.Frame.filename"]], "filename_pattern (tracemalloc.filter \u7684\u5c6c\u6027)": [[380, "tracemalloc.Filter.filename_pattern"]], "filter_traces() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[380, "tracemalloc.Snapshot.filter_traces"]], "format() (tracemalloc.traceback \u7684\u65b9\u6cd5)": [[380, "tracemalloc.Traceback.format"]], "get_object_traceback() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[380, "tracemalloc.get_object_traceback"]], "get_traceback_limit() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[380, "tracemalloc.get_traceback_limit"]], "get_traced_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[380, "tracemalloc.get_traced_memory"]], "get_tracemalloc_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[380, "tracemalloc.get_tracemalloc_memory"]], "inclusive (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[380, "tracemalloc.DomainFilter.inclusive"]], "inclusive (tracemalloc.filter \u7684\u5c6c\u6027)": [[380, "tracemalloc.Filter.inclusive"]], "is_tracing() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[380, "tracemalloc.is_tracing"]], "lineno (tracemalloc.filter \u7684\u5c6c\u6027)": [[380, "tracemalloc.Filter.lineno"]], "lineno (tracemalloc.frame \u7684\u5c6c\u6027)": [[380, "tracemalloc.Frame.lineno"]], "load() (tracemalloc.snapshot \u7684\u985e\u5225\u65b9\u6cd5)": [[380, "tracemalloc.Snapshot.load"]], "reset_peak() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[380, "tracemalloc.reset_peak"]], "size (tracemalloc.statistic \u7684\u5c6c\u6027)": [[380, "tracemalloc.Statistic.size"]], "size (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[380, "tracemalloc.StatisticDiff.size"]], "size (tracemalloc.trace \u7684\u5c6c\u6027)": [[380, "tracemalloc.Trace.size"]], "size_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[380, "tracemalloc.StatisticDiff.size_diff"]], "start() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[380, "tracemalloc.start"]], "statistics() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[380, "tracemalloc.Snapshot.statistics"]], "stop() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[380, "tracemalloc.stop"]], "take_snapshot() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[380, "tracemalloc.take_snapshot"]], "total_nframe (tracemalloc.traceback \u7684\u5c6c\u6027)": [[380, "tracemalloc.Traceback.total_nframe"]], "traceback (tracemalloc.statistic \u7684\u5c6c\u6027)": [[380, "tracemalloc.Statistic.traceback"]], "traceback (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[380, "tracemalloc.StatisticDiff.traceback"]], "traceback (tracemalloc.trace \u7684\u5c6c\u6027)": [[380, "tracemalloc.Trace.traceback"]], "traceback_limit (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[380, "tracemalloc.Snapshot.traceback_limit"]], "tracemalloc": [[380, "module-tracemalloc"]], "traces (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[380, "tracemalloc.Snapshot.traces"]], "cfmakecbreak() (\u65bc tty \u6a21\u7d44\u4e2d)": [[381, "tty.cfmakecbreak"]], "cfmakeraw() (\u65bc tty \u6a21\u7d44\u4e2d)": [[381, "tty.cfmakeraw"]], "setcbreak() (\u65bc tty \u6a21\u7d44\u4e2d)": [[381, "tty.setcbreak"]], "setraw() (\u65bc tty \u6a21\u7d44\u4e2d)": [[381, "tty.setraw"]], "rawpen (turtle \u4e2d\u7684\u985e\u5225)": [[382, "turtle.RawPen"]], "rawturtle (turtle \u4e2d\u7684\u985e\u5225)": [[382, "turtle.RawTurtle"]], "screen (turtle \u4e2d\u7684\u985e\u5225)": [[382, "turtle.Screen"]], "scrolledcanvas (turtle \u4e2d\u7684\u985e\u5225)": [[382, "turtle.ScrolledCanvas"]], "shape (turtle \u4e2d\u7684\u985e\u5225)": [[382, "turtle.Shape"]], "turtle (turtle \u4e2d\u7684\u985e\u5225)": [[382, "turtle.Turtle"]], "turtlescreen (turtle \u4e2d\u7684\u985e\u5225)": [[382, "turtle.TurtleScreen"]], "vec2d (turtle \u4e2d\u7684\u985e\u5225)": [[382, "turtle.Vec2D"]], "addcomponent() (turtle.shape \u7684\u65b9\u6cd5)": [[382, "turtle.Shape.addcomponent"]], "addshape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.addshape"]], "back() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.back"]], "backward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.backward"]], "begin_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.begin_fill"]], "begin_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.begin_poly"]], "bgcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.bgcolor"]], "bgpic() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.bgpic"]], "bk() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.bk"]], "bye() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.bye"]], "circle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.circle"]], "clear() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.clear"]], "clearscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.clearscreen"]], "clearstamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.clearstamp"]], "clearstamps() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.clearstamps"]], "clone() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.clone"]], "color() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.color"]], "colormode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.colormode"]], "degrees() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.degrees"]], "delay() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.delay"]], "distance() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.distance"]], "done() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.done"]], "dot() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.dot"]], "down() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.down"]], "end_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.end_fill"]], "end_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.end_poly"]], "exitonclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.exitonclick"]], "fd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.fd"]], "fillcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.fillcolor"]], "filling() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.filling"]], "forward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.forward"]], "get_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.get_poly"]], "get_shapepoly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.get_shapepoly"]], "getcanvas() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.getcanvas"]], "getpen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.getpen"]], "getscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.getscreen"]], "getshapes() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.getshapes"]], "getturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.getturtle"]], "goto() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.goto"]], "heading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.heading"]], "hideturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.hideturtle"]], "home() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.home"]], "ht() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.ht"]], "isdown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.isdown"]], "isvisible() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.isvisible"]], "left() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.left"]], "listen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.listen"]], "lt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.lt"]], "mainloop() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.mainloop"]], "mode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.mode"]], "numinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.numinput"]], "onclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.onclick"]], "ondrag() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.ondrag"]], "onkey() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.onkey"]], "onkeypress() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.onkeypress"]], "onkeyrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.onkeyrelease"]], "onrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.onrelease"]], "onscreenclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.onscreenclick"]], "ontimer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.ontimer"]], "pd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.pd"]], "pen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.pen"]], "pencolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.pencolor"]], "pendown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.pendown"]], "pensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.pensize"]], "penup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.penup"]], "pos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.pos"]], "position() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.position"]], "pu() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.pu"]], "radians() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.radians"]], "register_shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.register_shape"]], "reset() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.reset"]], "resetscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.resetscreen"]], "resizemode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.resizemode"]], "right() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.right"]], "rt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.rt"]], "screensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.screensize"]], "seth() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.seth"]], "setheading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.setheading"]], "setpos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.setpos"]], "setposition() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.setposition"]], "settiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.settiltangle"]], "setundobuffer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.setundobuffer"]], "setup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.setup"]], "setworldcoordinates() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.setworldcoordinates"]], "setx() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.setx"]], "sety() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.sety"]], "shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.shape"]], "shapesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.shapesize"]], "shapetransform() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.shapetransform"]], "shearfactor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.shearfactor"]], "showturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.showturtle"]], "speed() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.speed"]], "st() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.st"]], "stamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.stamp"]], "teleport() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.teleport"]], "textinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.textinput"]], "tilt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.tilt"]], "tiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.tiltangle"]], "title() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.title"]], "towards() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.towards"]], "tracer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.tracer"]], "turtle": [[382, "module-turtle"]], "turtledemo": [[382, "module-turtledemo"]], "turtles() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.turtles"]], "turtlesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.turtlesize"]], "undo() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.undo"]], "undobufferentries() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.undobufferentries"]], "up() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.up"]], "update() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.update"]], "width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.width"]], "window_height() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.window_height"]], "window_width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.window_width"]], "write() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.write"]], "write_docstringdict() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.write_docstringdict"]], "xcor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.xcor"]], "ycor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[382, "turtle.ycor"]], "asyncgeneratortype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.AsyncGeneratorType"]], "builtinfunctiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.BuiltinFunctionType"]], "builtinmethodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.BuiltinMethodType"]], "celltype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.CellType"]], "classmethoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.ClassMethodDescriptorType"]], "codetype (types \u4e2d\u7684\u985e\u5225)": [[383, "types.CodeType"]], "coroutinetype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.CoroutineType"]], "dynamicclassattribute() (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.DynamicClassAttribute"]], "ellipsistype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.EllipsisType"]], "frametype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.FrameType"]], "functiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.FunctionType"]], "generatortype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.GeneratorType"]], "genericalias (types \u4e2d\u7684\u985e\u5225)": [[383, "types.GenericAlias"]], "getsetdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.GetSetDescriptorType"]], "lambdatype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.LambdaType"]], "mappingproxytype (types \u4e2d\u7684\u985e\u5225)": [[383, "types.MappingProxyType"]], "memberdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.MemberDescriptorType"]], "methoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.MethodDescriptorType"]], "methodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.MethodType"]], "methodwrappertype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.MethodWrapperType"]], "moduletype (types \u4e2d\u7684\u985e\u5225)": [[383, "types.ModuleType"]], "nonetype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.NoneType"]], "notimplementedtype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.NotImplementedType"]], "pep 3115": [[383, "index-0"], [425, "index-45"], [426, "index-90"], [468, "index-14"], [474, "index-29"]], "pep 560": [[383, "index-1"], [383, "index-2"], [383, "index-3"], [426, "index-87"], [426, "index-96"], [478, "index-21"], [478, "index-33"], [481, "index-237"]], "simplenamespace (types \u4e2d\u7684\u985e\u5225)": [[383, "types.SimpleNamespace"]], "tracebacktype (types \u4e2d\u7684\u985e\u5225)": [[383, "types.TracebackType"]], "uniontype (types \u4e2d\u7684\u985e\u5225)": [[383, "types.UnionType"]], "wrapperdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.WrapperDescriptorType"]], "__doc__ (types.moduletype \u7684\u5c6c\u6027)": [[383, "types.ModuleType.__doc__"]], "__loader__ (types.moduletype \u7684\u5c6c\u6027)": [[383, "types.ModuleType.__loader__"]], "__name__ (types.moduletype \u7684\u5c6c\u6027)": [[383, "types.ModuleType.__name__"]], "__package__ (types.moduletype \u7684\u5c6c\u6027)": [[383, "types.ModuleType.__package__"]], "__spec__ (types.moduletype \u7684\u5c6c\u6027)": [[383, "types.ModuleType.__spec__"]], "copy() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[383, "types.MappingProxyType.copy"]], "coroutine() (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.coroutine"]], "get() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[383, "types.MappingProxyType.get"]], "get_original_bases() (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.get_original_bases"]], "items() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[383, "types.MappingProxyType.items"]], "keys() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[383, "types.MappingProxyType.keys"]], "new_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.new_class"]], "prepare_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.prepare_class"]], "resolve_bases() (\u65bc types \u6a21\u7d44\u4e2d)": [[383, "types.resolve_bases"]], "types": [[383, "module-types"]], "values() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[383, "types.MappingProxyType.values"]], "abstractset (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.AbstractSet"]], "annotated (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Annotated"]], "any (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Any"]], "anystr (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.AnyStr"]], "asynccontextmanager (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.AsyncContextManager"]], "asyncgenerator (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.AsyncGenerator"]], "asynciterable (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.AsyncIterable"]], "asynciterator (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.AsyncIterator"]], "awaitable (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Awaitable"]], "binaryio (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.BinaryIO"]], "bytestring (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.ByteString"]], "callable (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Callable"]], "chainmap (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.ChainMap"]], "classvar (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.ClassVar"]], "collection (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Collection"]], "concatenate (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Concatenate"]], "container (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Container"]], "contextmanager (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.ContextManager"]], "coroutine (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Coroutine"]], "counter (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Counter"]], "defaultdict (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.DefaultDict"]], "deque (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Deque"]], "dict (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Dict"]], "final (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Final"]], "forwardref (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.ForwardRef"]], "frozenset (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.FrozenSet"]], "generator (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Generator"]], "generic (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Generic"]], "hashable (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Hashable"]], "io (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.IO"]], "itemsview (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.ItemsView"]], "iterable (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Iterable"]], "iterator (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Iterator"]], "keysview (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.KeysView"]], "list (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.List"]], "literal (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Literal"]], "literalstring (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.LiteralString"]], "mapping (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Mapping"]], "mappingview (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.MappingView"]], "match (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Match"]], "mutablemapping (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.MutableMapping"]], "mutablesequence (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.MutableSequence"]], "mutableset (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.MutableSet"]], "namedtuple (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.NamedTuple"]], "never (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Never"]], "newtype (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.NewType"]], "noreturn (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.NoReturn"]], "notrequired (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.NotRequired"]], "optional (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Optional"]], "ordereddict (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.OrderedDict"]], "pep 544": [[384, "index-140"], [384, "index-28"], [384, "index-49"], [479, "index-18"]], "pep 586": [[384, "index-142"], [384, "index-33"], [470, "index-111"], [479, "index-16"], [480, "index-27"]], "pep 589": [[384, "index-143"], [384, "index-51"], [479, "index-15"]], "pep 591": [[384, "index-144"], [384, "index-35"], [384, "index-55"], [479, "index-17"]], "pep 593": [[384, "index-145"], [384, "index-167"], [384, "index-38"], [480, "index-17"], [480, "index-5"], [481, "index-197"]], "pep 612": [[384, "index-147"], [384, "index-159"], [384, "index-168"], [384, "index-25"], [384, "index-32"], [384, "index-47"], [470, "index-102"], [470, "index-86"], [481, "index-112"], [481, "index-115"], [481, "index-117"], [481, "index-90"], [481, "index-97"]], "pep 613": [[384, "index-148"], [384, "index-162"], [470, "index-104"], [470, "index-87"], [481, "index-134"]], "pep 646": [[384, "index-149"], [384, "index-44"], [471, "index-95"], [471, "index-96"]], "pep 647": [[384, "index-150"], [384, "index-39"], [470, "index-105"], [470, "index-88"], [481, "index-98"]], "pep 655": [[384, "index-151"], [384, "index-163"], [384, "index-164"], [384, "index-52"], [471, "index-97"], [481, "index-59"]], "pep 673": [[384, "index-152"], [384, "index-161"], [471, "index-99"], [481, "index-75"]], "pep 675": [[384, "index-153"], [384, "index-160"], [471, "index-100"], [481, "index-65"]], "pep 681": [[384, "index-154"], [384, "index-165"], [471, "index-101"], [481, "index-57"]], "pep 692": [[384, "index-155"], [384, "index-40"], [472, "index-17"], [472, "index-60"], [481, "index-13"], [481, "index-20"]], "pep 695": [[384, "index-100"], [384, "index-156"], [384, "index-42"], [384, "index-43"], [384, "index-45"], [384, "index-46"], [427, "index-12"], [434, "index-48"], [472, "index-29"], [472, "index-4"], [472, "index-57"], [481, "index-0"], [481, "index-1"], [481, "index-12"], [481, "index-2"], [481, "index-3"], [481, "index-4"], [481, "index-7"]], "pep 698": [[384, "index-157"], [384, "index-166"], [472, "index-61"], [481, "index-24"]], "paramspec (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.ParamSpec"]], "paramspecargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.ParamSpecArgs"]], "paramspeckwargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.ParamSpecKwargs"]], "pattern (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Pattern"]], "protocol (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Protocol"]], "required (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Required"]], "reversible (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Reversible"]], "self (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Self"]], "sequence (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Sequence"]], "set (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Set"]], "sized (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Sized"]], "supportsabs (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.SupportsAbs"]], "supportsbytes (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.SupportsBytes"]], "supportscomplex (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.SupportsComplex"]], "supportsfloat (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.SupportsFloat"]], "supportsindex (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.SupportsIndex"]], "supportsint (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.SupportsInt"]], "supportsround (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.SupportsRound"]], "type_checking (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.TYPE_CHECKING"]], "text (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Text"]], "textio (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.TextIO"]], "tuple (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Tuple"]], "type (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.Type"]], "typealias (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.TypeAlias"]], "typealiastype (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.TypeAliasType"]], "typeguard (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.TypeGuard"]], "typevar (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.TypeVar"]], "typevartuple (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.TypeVarTuple"]], "typeddict (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.TypedDict"]], "union (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Union"]], "unpack (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.Unpack"]], "valuesview (typing \u4e2d\u7684\u985e\u5225)": [[384, "typing.ValuesView"]], "__bound__ (typing.typevar \u7684\u5c6c\u6027)": [[384, "typing.TypeVar.__bound__"]], "__constraints__ (typing.typevar \u7684\u5c6c\u6027)": [[384, "typing.TypeVar.__constraints__"]], "__contravariant__ (typing.typevar \u7684\u5c6c\u6027)": [[384, "typing.TypeVar.__contravariant__"]], "__covariant__ (typing.typevar \u7684\u5c6c\u6027)": [[384, "typing.TypeVar.__covariant__"]], "__infer_variance__ (typing.typevar \u7684\u5c6c\u6027)": [[384, "typing.TypeVar.__infer_variance__"]], "__module__ (typing.newtype \u7684\u5c6c\u6027)": [[384, "typing.NewType.__module__"]], "__module__ (typing.typealiastype \u7684\u5c6c\u6027)": [[384, "typing.TypeAliasType.__module__"]], "__name__ (typing.newtype \u7684\u5c6c\u6027)": [[384, "typing.NewType.__name__"]], "__name__ (typing.paramspec \u7684\u5c6c\u6027)": [[384, "typing.ParamSpec.__name__"]], "__name__ (typing.typealiastype \u7684\u5c6c\u6027)": [[384, "typing.TypeAliasType.__name__"]], "__name__ (typing.typevar \u7684\u5c6c\u6027)": [[384, "typing.TypeVar.__name__"]], "__name__ (typing.typevartuple \u7684\u5c6c\u6027)": [[384, "typing.TypeVarTuple.__name__"]], "__optional_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[384, "typing.TypedDict.__optional_keys__"]], "__required_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[384, "typing.TypedDict.__required_keys__"]], "__supertype__ (typing.newtype \u7684\u5c6c\u6027)": [[384, "typing.NewType.__supertype__"]], "__total__ (typing.typeddict \u7684\u5c6c\u6027)": [[384, "typing.TypedDict.__total__"]], "__type_params__ (typing.typealiastype \u7684\u5c6c\u6027)": [[384, "typing.TypeAliasType.__type_params__"]], "__value__ (typing.typealiastype \u7684\u5c6c\u6027)": [[384, "typing.TypeAliasType.__value__"]], "args (typing.paramspec \u7684\u5c6c\u6027)": [[384, "typing.ParamSpec.args"]], "assert_never() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.assert_never"]], "assert_type() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.assert_type"]], "cast() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.cast"]], "clear_overloads() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.clear_overloads"]], "dataclass_transform() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.dataclass_transform"]], "final() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.final"]], "get_args() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.get_args"]], "get_origin() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.get_origin"]], "get_overloads() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.get_overloads"]], "get_type_hints() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.get_type_hints"]], "is_typeddict() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.is_typeddict"]], "kwargs (typing.paramspec \u7684\u5c6c\u6027)": [[384, "typing.ParamSpec.kwargs"]], "no_type_check() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.no_type_check"]], "no_type_check_decorator() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.no_type_check_decorator"]], "overload() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.overload"]], "override() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.override"]], "reveal_type() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.reveal_type"]], "runtime_checkable() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.runtime_checkable"]], "type_check_only() (\u65bc typing \u6a21\u7d44\u4e2d)": [[384, "typing.type_check_only"]], "typing": [[384, "module-typing"]], "bidirectional() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.bidirectional"]], "category() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.category"]], "character\uff08\u5b57\u5143\uff09": [[385, "index-0"], [426, "index-19"], [428, "index-43"]], "combining() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.combining"]], "database\uff08\u8cc7\u6599\u5eab\uff09": [[385, "index-0"]], "decimal() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.decimal"]], "decomposition() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.decomposition"]], "digit() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.digit"]], "east_asian_width() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.east_asian_width"]], "is_normalized() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.is_normalized"]], "lookup() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.lookup"]], "mirrored() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.mirrored"]], "name() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.name"]], "normalize() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.normalize"]], "numeric() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.numeric"]], "ucd_3_2_0 (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.ucd_3_2_0"]], "unicodedata": [[385, "module-unicodedata"]], "unidata_version (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[385, "unicodedata.unidata_version"]], "--buffer": [[386, "cmdoption-unittest-b"]], "--catch": [[386, "cmdoption-unittest-c"]], "--durations": [[386, "cmdoption-unittest-durations"]], "--failfast": [[386, "cmdoption-unittest-f"]], "--locals": [[386, "cmdoption-unittest-locals"]], "--pattern": [[386, "cmdoption-unittest-discover-p"]], "--start-directory": [[386, "cmdoption-unittest-discover-s"]], "--top-level-directory": [[386, "cmdoption-unittest-discover-t"]], "-k": [[386, "cmdoption-unittest-k"]], "functiontestcase (unittest \u4e2d\u7684\u985e\u5225)": [[386, "unittest.FunctionTestCase"]], "isolatedasynciotestcase (unittest \u4e2d\u7684\u985e\u5225)": [[386, "unittest.IsolatedAsyncioTestCase"]], "skiptest": [[386, "unittest.SkipTest"]], "testcase (unittest \u4e2d\u7684\u985e\u5225)": [[386, "unittest.TestCase"]], "testloader (unittest \u4e2d\u7684\u985e\u5225)": [[386, "unittest.TestLoader"]], "testresult (unittest \u4e2d\u7684\u985e\u5225)": [[386, "unittest.TestResult"]], "testsuite (unittest \u4e2d\u7684\u985e\u5225)": [[386, "unittest.TestSuite"]], "texttestresult (unittest \u4e2d\u7684\u985e\u5225)": [[386, "unittest.TextTestResult"]], "texttestrunner (unittest \u4e2d\u7684\u985e\u5225)": [[386, "unittest.TextTestRunner"]], "__iter__() (unittest.testsuite \u7684\u65b9\u6cd5)": [[386, "unittest.TestSuite.__iter__"]], "_makeresult() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[386, "unittest.TextTestRunner._makeResult"]], "addasynccleanup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[386, "unittest.IsolatedAsyncioTestCase.addAsyncCleanup"]], "addclasscleanup() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[386, "unittest.TestCase.addClassCleanup"]], "addcleanup() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.addCleanup"]], "addduration() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.addDuration"]], "adderror() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.addError"]], "addexpectedfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.addExpectedFailure"]], "addfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.addFailure"]], "addmodulecleanup() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.addModuleCleanup"]], "addskip() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.addSkip"]], "addsubtest() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.addSubTest"]], "addsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.addSuccess"]], "addtest() (unittest.testsuite \u7684\u65b9\u6cd5)": [[386, "unittest.TestSuite.addTest"]], "addtests() (unittest.testsuite \u7684\u65b9\u6cd5)": [[386, "unittest.TestSuite.addTests"]], "addtypeequalityfunc() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.addTypeEqualityFunc"]], "addunexpectedsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.addUnexpectedSuccess"]], "assertalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertAlmostEqual"]], "assertcountequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertCountEqual"]], "assertdictequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertDictEqual"]], "assertequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertEqual"]], "assertfalse() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertFalse"]], "assertgreater() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertGreater"]], "assertgreaterequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertGreaterEqual"]], "assertin() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertIn"]], "assertis() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertIs"]], "assertisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertIsInstance"]], "assertisnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertIsNone"]], "assertisnot() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertIsNot"]], "assertisnotnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertIsNotNone"]], "assertless() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertLess"]], "assertlessequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertLessEqual"]], "assertlistequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertListEqual"]], "assertlogs() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertLogs"]], "assertmultilineequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertMultiLineEqual"]], "assertnologs() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertNoLogs"]], "assertnotalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertNotAlmostEqual"]], "assertnotequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertNotEqual"]], "assertnotin() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertNotIn"]], "assertnotisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertNotIsInstance"]], "assertnotregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertNotRegex"]], "assertraises() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertRaises"]], "assertraisesregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertRaisesRegex"]], "assertregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertRegex"]], "assertsequenceequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertSequenceEqual"]], "assertsetequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertSetEqual"]], "asserttrue() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertTrue"]], "asserttupleequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertTupleEqual"]], "assertwarns() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertWarns"]], "assertwarnsregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.assertWarnsRegex"]], "asyncsetup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[386, "unittest.IsolatedAsyncioTestCase.asyncSetUp"]], "asyncteardown() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[386, "unittest.IsolatedAsyncioTestCase.asyncTearDown"]], "buffer (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.buffer"]], "collecteddurations (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.collectedDurations"]], "counttestcases() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.countTestCases"]], "counttestcases() (unittest.testsuite \u7684\u65b9\u6cd5)": [[386, "unittest.TestSuite.countTestCases"]], "debug() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.debug"]], "debug() (unittest.testsuite \u7684\u65b9\u6cd5)": [[386, "unittest.TestSuite.debug"]], "defaulttestloader (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.defaultTestLoader"]], "defaulttestresult() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.defaultTestResult"]], "discover() (unittest.testloader \u7684\u65b9\u6cd5)": [[386, "unittest.TestLoader.discover"]], "doclasscleanups() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[386, "unittest.TestCase.doClassCleanups"]], "docleanups() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.doCleanups"]], "domodulecleanups() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.doModuleCleanups"]], "enterasynccontext() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[386, "unittest.IsolatedAsyncioTestCase.enterAsyncContext"]], "enterclasscontext() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[386, "unittest.TestCase.enterClassContext"]], "entercontext() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.enterContext"]], "entermodulecontext() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.enterModuleContext"]], "errors (unittest.testloader \u7684\u5c6c\u6027)": [[386, "unittest.TestLoader.errors"]], "errors (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.errors"]], "expectedfailure() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.expectedFailure"]], "expectedfailures (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.expectedFailures"]], "fail() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.fail"]], "failfast (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.failfast"]], "failureexception (unittest.testcase \u7684\u5c6c\u6027)": [[386, "unittest.TestCase.failureException"]], "failures (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.failures"]], "gettestcasenames() (unittest.testloader \u7684\u65b9\u6cd5)": [[386, "unittest.TestLoader.getTestCaseNames"]], "id() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.id"]], "installhandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.installHandler"]], "loadtestsfrommodule() (unittest.testloader \u7684\u65b9\u6cd5)": [[386, "unittest.TestLoader.loadTestsFromModule"]], "loadtestsfromname() (unittest.testloader \u7684\u65b9\u6cd5)": [[386, "unittest.TestLoader.loadTestsFromName"]], "loadtestsfromnames() (unittest.testloader \u7684\u65b9\u6cd5)": [[386, "unittest.TestLoader.loadTestsFromNames"]], "loadtestsfromtestcase() (unittest.testloader \u7684\u65b9\u6cd5)": [[386, "unittest.TestLoader.loadTestsFromTestCase"]], "longmessage (unittest.testcase \u7684\u5c6c\u6027)": [[386, "unittest.TestCase.longMessage"]], "main() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.main"]], "maxdiff (unittest.testcase \u7684\u5c6c\u6027)": [[386, "unittest.TestCase.maxDiff"]], "output (unittest.testcase \u7684\u5c6c\u6027)": [[386, "unittest.TestCase.output"]], "records (unittest.testcase \u7684\u5c6c\u6027)": [[386, "unittest.TestCase.records"]], "registerresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.registerResult"]], "removehandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.removeHandler"]], "removeresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.removeResult"]], "run() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[386, "unittest.IsolatedAsyncioTestCase.run"]], "run() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.run"]], "run() (unittest.testsuite \u7684\u65b9\u6cd5)": [[386, "unittest.TestSuite.run"]], "run() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[386, "unittest.TextTestRunner.run"]], "setup() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.setUp"]], "setupclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.setUpClass"]], "shortdescription() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.shortDescription"]], "shouldstop (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.shouldStop"]], "skip() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.skip"]], "skipif() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.skipIf"]], "skiptest() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.skipTest"]], "skipunless() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[386, "unittest.skipUnless"]], "skipped (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.skipped"]], "sorttestmethodsusing (unittest.testloader \u7684\u5c6c\u6027)": [[386, "unittest.TestLoader.sortTestMethodsUsing"]], "starttest() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.startTest"]], "starttestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.startTestRun"]], "stop() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.stop"]], "stoptest() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.stopTest"]], "stoptestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.stopTestRun"]], "subtest() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.subTest"]], "suiteclass (unittest.testloader \u7684\u5c6c\u6027)": [[386, "unittest.TestLoader.suiteClass"]], "tb_locals (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.tb_locals"]], "teardown() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.tearDown"]], "teardownclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[386, "unittest.TestCase.tearDownClass"]], "testmethodprefix (unittest.testloader \u7684\u5c6c\u6027)": [[386, "unittest.TestLoader.testMethodPrefix"]], "testnamepatterns (unittest.testloader \u7684\u5c6c\u6027)": [[386, "unittest.TestLoader.testNamePatterns"]], "testsrun (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.testsRun"]], "unexpectedsuccesses (unittest.testresult \u7684\u5c6c\u6027)": [[386, "unittest.TestResult.unexpectedSuccesses"]], "unittest": [[386, "module-unittest"]], "unittest \u547d\u4ee4\u5217\u9078\u9805": [[386, "cmdoption-unittest-b"], [386, "cmdoption-unittest-c"], [386, "cmdoption-unittest-durations"], [386, "cmdoption-unittest-f"], [386, "cmdoption-unittest-k"], [386, "cmdoption-unittest-locals"]], "unittest-discover \u547d\u4ee4\u5217\u9078\u9805": [[386, "cmdoption-unittest-discover-p"], [386, "cmdoption-unittest-discover-s"], [386, "cmdoption-unittest-discover-t"], [386, "cmdoption-unittest-discover-v"]], "wassuccessful() (unittest.testresult \u7684\u65b9\u6cd5)": [[386, "unittest.TestResult.wasSuccessful"]], "any (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.ANY"]], "asyncmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[387, "unittest.mock.AsyncMock"]], "default (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.DEFAULT"]], "filter_dir (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.FILTER_DIR"]], "magicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[387, "unittest.mock.MagicMock"]], "mock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[387, "unittest.mock.Mock"]], "noncallablemagicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[387, "unittest.mock.NonCallableMagicMock"]], "noncallablemock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[387, "unittest.mock.NonCallableMock"]], "propertymock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[387, "unittest.mock.PropertyMock"]], "__class__ (unittest.mock.mock \u7684\u5c6c\u6027)": [[387, "unittest.mock.Mock.__class__"]], "__dir__() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.__dir__"]], "_get_child_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock._get_child_mock"]], "assert_any_await() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.AsyncMock.assert_any_await"]], "assert_any_call() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.assert_any_call"]], "assert_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.AsyncMock.assert_awaited"]], "assert_awaited_once() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.AsyncMock.assert_awaited_once"]], "assert_awaited_once_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.AsyncMock.assert_awaited_once_with"]], "assert_awaited_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.AsyncMock.assert_awaited_with"]], "assert_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.assert_called"]], "assert_called_once() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.assert_called_once"]], "assert_called_once_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.assert_called_once_with"]], "assert_called_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.assert_called_with"]], "assert_has_awaits() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.AsyncMock.assert_has_awaits"]], "assert_has_calls() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.assert_has_calls"]], "assert_not_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.AsyncMock.assert_not_awaited"]], "assert_not_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.assert_not_called"]], "attach_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.attach_mock"]], "await_args (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[387, "unittest.mock.AsyncMock.await_args"]], "await_args_list (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[387, "unittest.mock.AsyncMock.await_args_list"]], "await_count (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[387, "unittest.mock.AsyncMock.await_count"]], "call() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.call"]], "call_args (unittest.mock.mock \u7684\u5c6c\u6027)": [[387, "unittest.mock.Mock.call_args"]], "call_args_list (unittest.mock.mock \u7684\u5c6c\u6027)": [[387, "unittest.mock.Mock.call_args_list"]], "call_count (unittest.mock.mock \u7684\u5c6c\u6027)": [[387, "unittest.mock.Mock.call_count"]], "call_list() (unittest.mock.call \u7684\u65b9\u6cd5)": [[387, "unittest.mock.call.call_list"]], "called (unittest.mock.mock \u7684\u5c6c\u6027)": [[387, "unittest.mock.Mock.called"]], "configure_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.configure_mock"]], "create_autospec() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.create_autospec"]], "method_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[387, "unittest.mock.Mock.method_calls"]], "mock_add_spec() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.mock_add_spec"]], "mock_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[387, "unittest.mock.Mock.mock_calls"]], "mock_open() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.mock_open"]], "patch() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.patch"]], "patch.dict() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.patch.dict"]], "patch.multiple() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.patch.multiple"]], "patch.object() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.patch.object"]], "patch.stopall() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.patch.stopall"]], "reset_mock() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.AsyncMock.reset_mock"]], "reset_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[387, "unittest.mock.Mock.reset_mock"]], "return_value (unittest.mock.mock \u7684\u5c6c\u6027)": [[387, "unittest.mock.Mock.return_value"]], "seal() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.seal"]], "sentinel (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[387, "unittest.mock.sentinel"]], "side_effect (unittest.mock.mock \u7684\u5c6c\u6027)": [[387, "unittest.mock.Mock.side_effect"]], "unittest.mock": [[387, "module-unittest.mock"]], "urllib": [[390, "module-urllib"]], "contenttooshorterror": [[391, "urllib.error.ContentTooShortError"]], "httperror": [[391, "urllib.error.HTTPError"]], "urlerror": [[391, "urllib.error.URLError"]], "code (urllib.error.httperror \u7684\u5c6c\u6027)": [[391, "urllib.error.HTTPError.code"]], "content (urllib.error.contenttooshorterror \u7684\u5c6c\u6027)": [[391, "urllib.error.ContentTooShortError.content"]], "fp (urllib.error.httperror \u7684\u5c6c\u6027)": [[391, "urllib.error.HTTPError.fp"]], "headers (urllib.error.httperror \u7684\u5c6c\u6027)": [[391, "urllib.error.HTTPError.headers"]], "reason (urllib.error.httperror \u7684\u5c6c\u6027)": [[391, "urllib.error.HTTPError.reason"]], "reason (urllib.error.urlerror \u7684\u5c6c\u6027)": [[391, "urllib.error.URLError.reason"]], "url (urllib.error.httperror \u7684\u5c6c\u6027)": [[391, "urllib.error.HTTPError.url"]], "urllib.error": [[391, "module-urllib.error"]], "defragresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[392, "urllib.parse.DefragResult"]], "defragresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[392, "urllib.parse.DefragResultBytes"]], "parseresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[392, "urllib.parse.ParseResult"]], "parseresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[392, "urllib.parse.ParseResultBytes"]], "rfc 1738": [[392, "index-17"]], "rfc 1808": [[392, "index-1"], [392, "index-16"], [476, "index-43"]], "rfc 2368": [[392, "index-11"]], "rfc 2396": [[392, "index-10"], [392, "index-3"], [392, "index-6"], [476, "index-44"], [478, "index-34"]], "rfc 2732": [[392, "index-9"], [467, "index-10"], [473, "index-13"]], "splitresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[392, "urllib.parse.SplitResult"]], "splitresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[392, "urllib.parse.SplitResultBytes"]], "geturl() (urllib.parse.urllib.parse.splitresult \u7684\u65b9\u6cd5)": [[392, "urllib.parse.urllib.parse.SplitResult.geturl"]], "parse_qs() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.parse_qs"]], "parse_qsl() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.parse_qsl"]], "parsing\uff08\u5256\u6790\uff09": [[392, "index-0"]], "quote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.quote"]], "quote_from_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.quote_from_bytes"]], "quote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.quote_plus"]], "relative\uff08\u76f8\u5c0d\uff09": [[392, "index-0"], [434, "index-39"]], "unquote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.unquote"]], "unquote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.unquote_plus"]], "unquote_to_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.unquote_to_bytes"]], "unwrap() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.unwrap"]], "urldefrag() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.urldefrag"]], "urlencode() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.urlencode"]], "urljoin() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.urljoin"]], "urllib.parse": [[392, "module-urllib.parse"]], "urlparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.urlparse"]], "urlsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.urlsplit"]], "urlunparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.urlunparse"]], "urlunsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[392, "urllib.parse.urlunsplit"]], "abstractbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.AbstractBasicAuthHandler"]], "abstractdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.AbstractDigestAuthHandler"]], "basehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.BaseHandler"]], "cacheftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.CacheFTPHandler"]], "datahandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.DataHandler"]], "ftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.FTPHandler"]], "fancyurlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.FancyURLopener"]], "filehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.FileHandler"]], "httpbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPBasicAuthHandler"]], "httpcookieprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPCookieProcessor"]], "httpdefaulterrorhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPDefaultErrorHandler"]], "httpdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPDigestAuthHandler"]], "httperrorprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPErrorProcessor"]], "httphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPHandler"]], "httppasswordmgr (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPPasswordMgr"]], "httppasswordmgrwithdefaultrealm (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPPasswordMgrWithDefaultRealm"]], "httppasswordmgrwithpriorauth (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPPasswordMgrWithPriorAuth"]], "httpredirecthandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPRedirectHandler"]], "httpshandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.HTTPSHandler"]], "openerdirector (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.OpenerDirector"]], "proxybasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.ProxyBasicAuthHandler"]], "proxydigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.ProxyDigestAuthHandler"]], "proxyhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.ProxyHandler"]], "rfc 2397": [[393, "index-7"]], "request (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.Request"]], "urlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.URLopener"]], "unknownhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[393, "urllib.request.UnknownHandler"]], "add_handler() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[393, "urllib.request.OpenerDirector.add_handler"]], "add_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[393, "urllib.request.Request.add_header"]], "add_parent() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.BaseHandler.add_parent"]], "add_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPPasswordMgr.add_password"]], "add_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPPasswordMgrWithPriorAuth.add_password"]], "add_unredirected_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[393, "urllib.request.Request.add_unredirected_header"]], "addinfourl (urllib.response \u4e2d\u7684\u985e\u5225)": [[393, "urllib.response.addinfourl"]], "build_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[393, "urllib.request.build_opener"]], "close() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.BaseHandler.close"]], "code (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[393, "urllib.response.addinfourl.code"]], "cookiejar (urllib.request.httpcookieprocessor \u7684\u5c6c\u6027)": [[393, "urllib.request.HTTPCookieProcessor.cookiejar"]], "data (urllib.request.request \u7684\u5c6c\u6027)": [[393, "urllib.request.Request.data"]], "data_open() (urllib.request.datahandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.DataHandler.data_open"]], "default_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.BaseHandler.default_open"]], "error() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[393, "urllib.request.OpenerDirector.error"]], "file_open() (urllib.request.filehandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.FileHandler.file_open"]], "find_user_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPPasswordMgr.find_user_password"]], "find_user_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPPasswordMgrWithPriorAuth.find_user_password"]], "ftp_open() (urllib.request.ftphandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.FTPHandler.ftp_open"]], "full_url (urllib.request.request \u7684\u5c6c\u6027)": [[393, "urllib.request.Request.full_url"]], "get_full_url() (urllib.request.request \u7684\u65b9\u6cd5)": [[393, "urllib.request.Request.get_full_url"]], "get_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[393, "urllib.request.Request.get_header"]], "get_method() (urllib.request.request \u7684\u65b9\u6cd5)": [[393, "urllib.request.Request.get_method"]], "getcode() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[393, "urllib.response.addinfourl.getcode"]], "getproxies() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[393, "urllib.request.getproxies"]], "geturl() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[393, "urllib.response.addinfourl.geturl"]], "has_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[393, "urllib.request.Request.has_header"]], "header_items() (urllib.request.request \u7684\u65b9\u6cd5)": [[393, "urllib.request.Request.header_items"]], "headers (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[393, "urllib.response.addinfourl.headers"]], "host (urllib.request.request \u7684\u5c6c\u6027)": [[393, "urllib.request.Request.host"]], "http_error_301() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPRedirectHandler.http_error_301"]], "http_error_302() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPRedirectHandler.http_error_302"]], "http_error_303() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPRedirectHandler.http_error_303"]], "http_error_307() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPRedirectHandler.http_error_307"]], "http_error_308() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPRedirectHandler.http_error_308"]], "http_error_401() (urllib.request.httpbasicauthhandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPBasicAuthHandler.http_error_401"]], "http_error_401() (urllib.request.httpdigestauthhandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPDigestAuthHandler.http_error_401"]], "http_error_407() (urllib.request.proxybasicauthhandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.ProxyBasicAuthHandler.http_error_407"]], "http_error_407() (urllib.request.proxydigestauthhandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.ProxyDigestAuthHandler.http_error_407"]], "http_error_auth_reqed() (urllib.request.abstractbasicauthhandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"]], "http_error_auth_reqed() (urllib.request.abstractdigestauthhandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"]], "http_error_default() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.BaseHandler.http_error_default"]], "http_open() (urllib.request.httphandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPHandler.http_open"]], "http_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPErrorProcessor.http_response"]], "https_open() (urllib.request.httpshandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPSHandler.https_open"]], "https_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPErrorProcessor.https_response"]], "info() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[393, "urllib.response.addinfourl.info"]], "install_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[393, "urllib.request.install_opener"]], "is_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated"]], "method (urllib.request.request \u7684\u5c6c\u6027)": [[393, "urllib.request.Request.method"]], "no_proxy": [[393, "index-3"]], "open() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[393, "urllib.request.OpenerDirector.open"]], "open() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[393, "urllib.request.URLopener.open"]], "open_unknown() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[393, "urllib.request.URLopener.open_unknown"]], "origin_req_host (urllib.request.request \u7684\u5c6c\u6027)": [[393, "urllib.request.Request.origin_req_host"]], "parent (urllib.request.basehandler \u7684\u5c6c\u6027)": [[393, "urllib.request.BaseHandler.parent"]], "pathname2url() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[393, "urllib.request.pathname2url"]], "prompt_user_passwd() (urllib.request.fancyurlopener \u7684\u65b9\u6cd5)": [[393, "urllib.request.FancyURLopener.prompt_user_passwd"]], "redirect_request() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPRedirectHandler.redirect_request"]], "remove_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[393, "urllib.request.Request.remove_header"]], "retrieve() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[393, "urllib.request.URLopener.retrieve"]], "selector (urllib.request.request \u7684\u5c6c\u6027)": [[393, "urllib.request.Request.selector"]], "setmaxconns() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.CacheFTPHandler.setMaxConns"]], "settimeout() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.CacheFTPHandler.setTimeout"]], "set_proxy() (urllib.request.request \u7684\u65b9\u6cd5)": [[393, "urllib.request.Request.set_proxy"]], "status (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[393, "urllib.response.addinfourl.status"]], "type (urllib.request.request \u7684\u5c6c\u6027)": [[393, "urllib.request.Request.type"]], "unknown_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.BaseHandler.unknown_open"]], "unknown_open() (urllib.request.unknownhandler \u7684\u65b9\u6cd5)": [[393, "urllib.request.UnknownHandler.unknown_open"]], "unverifiable (urllib.request.request \u7684\u5c6c\u6027)": [[393, "urllib.request.Request.unverifiable"]], "update_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[393, "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated"]], "url (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[393, "urllib.response.addinfourl.url"]], "url2pathname() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[393, "urllib.request.url2pathname"]], "urlcleanup() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[393, "urllib.request.urlcleanup"]], "urllib.response": [[393, "module-urllib.response"]], "urlopen() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[393, "urllib.request.urlopen"]], "urlretrieve() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[393, "urllib.request.urlretrieve"]], "version (urllib.request.urlopener \u7684\u5c6c\u6027)": [[393, "urllib.request.URLopener.version"]], "robotfileparser (urllib.robotparser \u4e2d\u7684\u985e\u5225)": [[394, "urllib.robotparser.RobotFileParser"]], "can_fetch() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[394, "urllib.robotparser.RobotFileParser.can_fetch"]], "crawl_delay() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[394, "urllib.robotparser.RobotFileParser.crawl_delay"]], "modified() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[394, "urllib.robotparser.RobotFileParser.modified"]], "mtime() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[394, "urllib.robotparser.RobotFileParser.mtime"]], "parse() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[394, "urllib.robotparser.RobotFileParser.parse"]], "read() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[394, "urllib.robotparser.RobotFileParser.read"]], "request_rate() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[394, "urllib.robotparser.RobotFileParser.request_rate"]], "robots.txt": [[394, "index-0"]], "set_url() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[394, "urllib.robotparser.RobotFileParser.set_url"]], "site_maps() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[394, "urllib.robotparser.RobotFileParser.site_maps"]], "urllib.robotparser": [[394, "module-urllib.robotparser"]], "ellinghouse, lance": [[395, "index-1"]], "jansen, jack": [[395, "index-1"]], "pep 594#uu-and-the-uu-encoding": [[395, "index-3"]], "decode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[395, "uu.decode"]], "encode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[395, "uu.encode"]], "--name": [[396, "cmdoption-uuid-name"]], "--namespace": [[396, "cmdoption-uuid-namespace"]], "--uuid": [[396, "cmdoption-uuid-uuid"]], "namespace_dns (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.NAMESPACE_DNS"]], "namespace_oid (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.NAMESPACE_OID"]], "namespace_url (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.NAMESPACE_URL"]], "namespace_x500 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.NAMESPACE_X500"]], "reserved_future (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.RESERVED_FUTURE"]], "reserved_microsoft (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.RESERVED_MICROSOFT"]], "reserved_ncs (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.RESERVED_NCS"]], "rfc_4122 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.RFC_4122"]], "safeuuid (uuid \u4e2d\u7684\u985e\u5225)": [[396, "uuid.SafeUUID"]], "uuid (uuid \u4e2d\u7684\u985e\u5225)": [[396, "uuid.UUID"]], "bytes (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.bytes"]], "bytes_le (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.bytes_le"]], "clock_seq (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.clock_seq"]], "clock_seq_hi_variant (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.clock_seq_hi_variant"]], "clock_seq_low (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.clock_seq_low"]], "fields (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.fields"]], "getnode": [[396, "index-5"]], "getnode() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.getnode"]], "hex (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.hex"]], "int (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.int"]], "is_safe (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.is_safe"]], "node (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.node"]], "safe (uuid.safeuuid \u7684\u5c6c\u6027)": [[396, "uuid.SafeUUID.safe"]], "time (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.time"]], "time_hi_version (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.time_hi_version"]], "time_low (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.time_low"]], "time_mid (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.time_mid"]], "unknown (uuid.safeuuid \u7684\u5c6c\u6027)": [[396, "uuid.SafeUUID.unknown"]], "unsafe (uuid.safeuuid \u7684\u5c6c\u6027)": [[396, "uuid.SafeUUID.unsafe"]], "urn (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.urn"]], "uuid": [[396, "module-uuid"]], "uuid \u547d\u4ee4\u5217\u9078\u9805": [[396, "cmdoption-uuid-N"], [396, "cmdoption-uuid-h"], [396, "cmdoption-uuid-n"], [396, "cmdoption-uuid-name"], [396, "cmdoption-uuid-namespace"], [396, "cmdoption-uuid-u"], [396, "cmdoption-uuid-uuid"]], "uuid1": [[396, "index-6"]], "uuid1() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.uuid1"]], "uuid3": [[396, "index-7"]], "uuid3() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.uuid3"]], "uuid4": [[396, "index-8"]], "uuid4() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.uuid4"]], "uuid5": [[396, "index-9"]], "uuid5() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[396, "uuid.uuid5"]], "variant (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.variant"]], "version (uuid.uuid \u7684\u5c6c\u6027)": [[396, "uuid.UUID.version"]], "envbuilder (venv \u4e2d\u7684\u985e\u5225)": [[397, "venv.EnvBuilder"]], "environments \uff08\u74b0\u5883\uff09": [[397, "index-0"]], "pep 405": [[397, "index-9"], [474, "index-52"]], "create() (venv.envbuilder \u7684\u65b9\u6cd5)": [[397, "venv.EnvBuilder.create"]], "create() (\u65bc venv \u6a21\u7d44\u4e2d)": [[397, "venv.create"]], "create_configuration() (venv.envbuilder \u7684\u65b9\u6cd5)": [[397, "venv.EnvBuilder.create_configuration"]], "ensure_directories() (venv.envbuilder \u7684\u65b9\u6cd5)": [[397, "venv.EnvBuilder.ensure_directories"]], "install_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[397, "venv.EnvBuilder.install_scripts"]], "post_setup() (venv.envbuilder \u7684\u65b9\u6cd5)": [[397, "venv.EnvBuilder.post_setup"]], "setup_python() (venv.envbuilder \u7684\u65b9\u6cd5)": [[397, "venv.EnvBuilder.setup_python"]], "setup_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[397, "venv.EnvBuilder.setup_scripts"]], "upgrade_dependencies() (venv.envbuilder \u7684\u65b9\u6cd5)": [[397, "venv.EnvBuilder.upgrade_dependencies"]], "venv": [[397, "module-venv"]], "virtual \uff08\u865b\u64ec\uff09": [[397, "index-0"]], "catch_warnings (warnings \u4e2d\u7684\u985e\u5225)": [[398, "warnings.catch_warnings"]], "filterwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[398, "warnings.filterwarnings"]], "formatwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[398, "warnings.formatwarning"]], "resetwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[398, "warnings.resetwarnings"]], "showwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[398, "warnings.showwarning"]], "simplefilter() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[398, "warnings.simplefilter"]], "warn() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[398, "warnings.warn"]], "warn_explicit() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[398, "warnings.warn_explicit"]], "warnings": [[398, "module-warnings"]], "warnings \uff08\u8b66\u544a\uff09": [[398, "index-0"]], "wave_read (wave \u4e2d\u7684\u985e\u5225)": [[399, "wave.Wave_read"]], "wave_write (wave \u4e2d\u7684\u985e\u5225)": [[399, "wave.Wave_write"]], "close() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.close"]], "close() (wave.wave_write \u7684\u65b9\u6cd5)": [[399, "wave.Wave_write.close"]], "getcompname() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.getcompname"]], "getcomptype() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.getcomptype"]], "getframerate() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.getframerate"]], "getmark() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.getmark"]], "getmarkers() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.getmarkers"]], "getnchannels() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.getnchannels"]], "getnframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.getnframes"]], "getparams() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.getparams"]], "getsampwidth() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.getsampwidth"]], "open() (\u65bc wave \u6a21\u7d44\u4e2d)": [[399, "wave.open"]], "readframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.readframes"]], "rewind() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.rewind"]], "setcomptype() (wave.wave_write \u7684\u65b9\u6cd5)": [[399, "wave.Wave_write.setcomptype"]], "setframerate() (wave.wave_write \u7684\u65b9\u6cd5)": [[399, "wave.Wave_write.setframerate"]], "setnchannels() (wave.wave_write \u7684\u65b9\u6cd5)": [[399, "wave.Wave_write.setnchannels"]], "setnframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[399, "wave.Wave_write.setnframes"]], "setparams() (wave.wave_write \u7684\u65b9\u6cd5)": [[399, "wave.Wave_write.setparams"]], "setpos() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.setpos"]], "setsampwidth() (wave.wave_write \u7684\u65b9\u6cd5)": [[399, "wave.Wave_write.setsampwidth"]], "tell() (wave.wave_read \u7684\u65b9\u6cd5)": [[399, "wave.Wave_read.tell"]], "tell() (wave.wave_write \u7684\u65b9\u6cd5)": [[399, "wave.Wave_write.tell"]], "wave": [[399, "module-wave"]], "writeframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[399, "wave.Wave_write.writeframes"]], "writeframesraw() (wave.wave_write \u7684\u65b9\u6cd5)": [[399, "wave.Wave_write.writeframesraw"]], "callableproxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[400, "weakref.CallableProxyType"]], "pep 205": [[400, "index-2"], [461, "index-9"]], "proxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[400, "weakref.ProxyType"]], "proxytypes (\u65bc weakref \u6a21\u7d44\u4e2d)": [[400, "weakref.ProxyTypes"]], "referencetype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[400, "weakref.ReferenceType"]], "weakkeydictionary (weakref \u4e2d\u7684\u985e\u5225)": [[400, "weakref.WeakKeyDictionary"]], "weakmethod (weakref \u4e2d\u7684\u985e\u5225)": [[400, "weakref.WeakMethod"]], "weakset (weakref \u4e2d\u7684\u985e\u5225)": [[400, "weakref.WeakSet"]], "weakvaluedictionary (weakref \u4e2d\u7684\u985e\u5225)": [[400, "weakref.WeakValueDictionary"]], "__call__() (weakref.finalize \u7684\u65b9\u6cd5)": [[400, "weakref.finalize.__call__"]], "__callback__ (weakref.ref \u7684\u5c6c\u6027)": [[400, "weakref.ref.__callback__"]], "alive (weakref.finalize \u7684\u5c6c\u6027)": [[400, "weakref.finalize.alive"]], "atexit (weakref.finalize \u7684\u5c6c\u6027)": [[400, "weakref.finalize.atexit"]], "detach() (weakref.finalize \u7684\u65b9\u6cd5)": [[400, "weakref.finalize.detach"]], "finalize (weakref \u4e2d\u7684\u985e\u5225)": [[400, "weakref.finalize"]], "getweakrefcount() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[400, "weakref.getweakrefcount"]], "getweakrefs() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[400, "weakref.getweakrefs"]], "keyrefs() (weakref.weakkeydictionary \u7684\u65b9\u6cd5)": [[400, "weakref.WeakKeyDictionary.keyrefs"]], "peek() (weakref.finalize \u7684\u65b9\u6cd5)": [[400, "weakref.finalize.peek"]], "proxy() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[400, "weakref.proxy"]], "ref (weakref \u4e2d\u7684\u985e\u5225)": [[400, "weakref.ref"]], "valuerefs() (weakref.weakvaluedictionary \u7684\u65b9\u6cd5)": [[400, "weakref.WeakValueDictionary.valuerefs"]], "weakref": [[400, "module-weakref"]], "browser": [[401, "index-0"], [401, "index-1"]], "kdedir": [[401, "index-2"]], "get() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[401, "webbrowser.get"]], "name (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[401, "webbrowser.name"]], "open() (webbrowser.controller \u7684\u65b9\u6cd5)": [[401, "webbrowser.controller.open"]], "open() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[401, "webbrowser.open"]], "open_new() (webbrowser.controller \u7684\u65b9\u6cd5)": [[401, "webbrowser.controller.open_new"]], "open_new() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[401, "webbrowser.open_new"]], "open_new_tab() (webbrowser.controller \u7684\u65b9\u6cd5)": [[401, "webbrowser.controller.open_new_tab"]], "open_new_tab() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[401, "webbrowser.open_new_tab"]], "register() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[401, "webbrowser.register"]], "webbrowser": [[401, "module-webbrowser"]], "close() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[403, "winreg.PyHKEY.Close"]], "closekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.CloseKey"]], "connectregistry() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.ConnectRegistry"]], "createkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.CreateKey"]], "createkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.CreateKeyEx"]], "deletekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.DeleteKey"]], "deletekeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.DeleteKeyEx"]], "deletevalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.DeleteValue"]], "detach() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[403, "winreg.PyHKEY.Detach"]], "disablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.DisableReflectionKey"]], "enablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.EnableReflectionKey"]], "enumkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.EnumKey"]], "enumvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.EnumValue"]], "expandenvironmentstrings() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.ExpandEnvironmentStrings"]], "flushkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.FlushKey"]], "hkey_classes_root (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.HKEY_CLASSES_ROOT"]], "hkey_current_config (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.HKEY_CURRENT_CONFIG"]], "hkey_current_user (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.HKEY_CURRENT_USER"]], "hkey_dyn_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.HKEY_DYN_DATA"]], "hkey_local_machine (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.HKEY_LOCAL_MACHINE"]], "hkey_performance_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.HKEY_PERFORMANCE_DATA"]], "hkey_users (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.HKEY_USERS"]], "key_all_access (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_ALL_ACCESS"]], "key_create_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_CREATE_LINK"]], "key_create_sub_key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_CREATE_SUB_KEY"]], "key_enumerate_sub_keys (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_ENUMERATE_SUB_KEYS"]], "key_execute (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_EXECUTE"]], "key_notify (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_NOTIFY"]], "key_query_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_QUERY_VALUE"]], "key_read (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_READ"]], "key_set_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_SET_VALUE"]], "key_wow64_32key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_WOW64_32KEY"]], "key_wow64_64key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_WOW64_64KEY"]], "key_write (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.KEY_WRITE"]], "loadkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.LoadKey"]], "openkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.OpenKey"]], "openkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.OpenKeyEx"]], "queryinfokey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.QueryInfoKey"]], "queryreflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.QueryReflectionKey"]], "queryvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.QueryValue"]], "queryvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.QueryValueEx"]], "reg_binary (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_BINARY"]], "reg_dword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_DWORD"]], "reg_dword_big_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_DWORD_BIG_ENDIAN"]], "reg_dword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_DWORD_LITTLE_ENDIAN"]], "reg_expand_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_EXPAND_SZ"]], "reg_full_resource_descriptor (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_FULL_RESOURCE_DESCRIPTOR"]], "reg_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_LINK"]], "reg_multi_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_MULTI_SZ"]], "reg_none (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_NONE"]], "reg_qword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_QWORD"]], "reg_qword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_QWORD_LITTLE_ENDIAN"]], "reg_resource_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_RESOURCE_LIST"]], "reg_resource_requirements_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_RESOURCE_REQUIREMENTS_LIST"]], "reg_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.REG_SZ"]], "savekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.SaveKey"]], "setvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.SetValue"]], "setvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[403, "winreg.SetValueEx"]], "__enter__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[403, "winreg.PyHKEY.__enter__"]], "__exit__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[403, "winreg.PyHKEY.__exit__"]], "environment variables expansion (windows) \uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b (windows)\uff09": [[403, "index-0"]], "winreg": [[403, "module-winreg"]], "beep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.Beep"]], "mb_iconasterisk (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.MB_ICONASTERISK"]], "mb_iconexclamation (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.MB_ICONEXCLAMATION"]], "mb_iconhand (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.MB_ICONHAND"]], "mb_iconquestion (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.MB_ICONQUESTION"]], "mb_ok (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.MB_OK"]], "messagebeep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.MessageBeep"]], "playsound() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.PlaySound"]], "snd_alias (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.SND_ALIAS"]], "snd_async (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.SND_ASYNC"]], "snd_filename (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.SND_FILENAME"]], "snd_loop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.SND_LOOP"]], "snd_memory (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.SND_MEMORY"]], "snd_nodefault (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.SND_NODEFAULT"]], "snd_nostop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.SND_NOSTOP"]], "snd_nowait (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.SND_NOWAIT"]], "snd_purge (\u65bc winsound \u6a21\u7d44\u4e2d)": [[404, "winsound.SND_PURGE"]], "winsound": [[404, "module-winsound"]], "basecgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.handlers.BaseCGIHandler"]], "basehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.handlers.BaseHandler"]], "cgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.handlers.CGIHandler"]], "errorstream (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.types.ErrorStream"]], "filewrapper (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.types.FileWrapper"]], "filewrapper (wsgiref.util \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.util.FileWrapper"]], "headers (wsgiref.headers \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.headers.Headers"]], "iiscgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.handlers.IISCGIHandler"]], "inputstream (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.types.InputStream"]], "pep 3333": [[405, "index-38"], [405, "index-39"], [405, "index-40"], [405, "index-41"], [405, "index-42"], [405, "index-44"], [405, "index-45"], [405, "index-46"], [405, "index-47"], [405, "index-49"], [405, "index-50"], [405, "index-51"], [405, "index-52"], [405, "index-53"], [405, "index-54"], [405, "index-55"], [405, "index-56"], [471, "index-107"], [473, "index-9"]], "simplehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.handlers.SimpleHandler"]], "startresponse (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.types.StartResponse"]], "wsgiapplication (\u65bc wsgiref.types \u6a21\u7d44\u4e2d)": [[405, "wsgiref.types.WSGIApplication"]], "wsgienvironment (\u65bc wsgiref.types \u6a21\u7d44\u4e2d)": [[405, "wsgiref.types.WSGIEnvironment"]], "wsgirequesthandler (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.simple_server.WSGIRequestHandler"]], "wsgiserver (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[405, "wsgiref.simple_server.WSGIServer"]], "_flush() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler._flush"]], "_write() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler._write"]], "add_cgi_vars() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler.add_cgi_vars"]], "add_header() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[405, "wsgiref.headers.Headers.add_header"]], "application_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[405, "wsgiref.util.application_uri"]], "demo_app() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[405, "wsgiref.simple_server.demo_app"]], "error_body (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.error_body"]], "error_headers (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.error_headers"]], "error_output() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler.error_output"]], "error_status (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.error_status"]], "get_all() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[405, "wsgiref.headers.Headers.get_all"]], "get_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[405, "wsgiref.simple_server.WSGIServer.get_app"]], "get_environ() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.simple_server.WSGIRequestHandler.get_environ"]], "get_scheme() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler.get_scheme"]], "get_stderr() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler.get_stderr"]], "get_stderr() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.simple_server.WSGIRequestHandler.get_stderr"]], "get_stdin() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler.get_stdin"]], "guess_scheme() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[405, "wsgiref.util.guess_scheme"]], "handle() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.simple_server.WSGIRequestHandler.handle"]], "http_version (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.http_version"]], "is_hop_by_hop() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[405, "wsgiref.util.is_hop_by_hop"]], "log_exception() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler.log_exception"]], "make_server() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[405, "wsgiref.simple_server.make_server"]], "origin_server (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.origin_server"]], "os_environ (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.os_environ"]], "read_environ() (\u65bc wsgiref.handlers \u6a21\u7d44\u4e2d)": [[405, "wsgiref.handlers.read_environ"]], "request_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[405, "wsgiref.util.request_uri"]], "run() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler.run"]], "sendfile() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler.sendfile"]], "server_software (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.server_software"]], "set_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[405, "wsgiref.simple_server.WSGIServer.set_app"]], "setup_environ() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[405, "wsgiref.handlers.BaseHandler.setup_environ"]], "setup_testing_defaults() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[405, "wsgiref.util.setup_testing_defaults"]], "shift_path_info() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[405, "wsgiref.util.shift_path_info"]], "traceback_limit (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.traceback_limit"]], "validator() (\u65bc wsgiref.validate \u6a21\u7d44\u4e2d)": [[405, "wsgiref.validate.validator"]], "wsgi_file_wrapper (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.wsgi_file_wrapper"]], "wsgi_multiprocess (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.wsgi_multiprocess"]], "wsgi_multithread (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.wsgi_multithread"]], "wsgi_run_once (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[405, "wsgiref.handlers.BaseHandler.wsgi_run_once"]], "wsgiref": [[405, "module-wsgiref"]], "wsgiref.handlers": [[405, "module-wsgiref.handlers"]], "wsgiref.headers": [[405, "module-wsgiref.headers"]], "wsgiref.simple_server": [[405, "module-wsgiref.simple_server"]], "wsgiref.types": [[405, "module-wsgiref.types"]], "wsgiref.util": [[405, "module-wsgiref.util"]], "wsgiref.validate": [[405, "module-wsgiref.validate"]], "conversionerror": [[406, "xdrlib.ConversionError"]], "external data representation \uff08\u5916\u90e8\u8cc7\u6599\u8868\u793a\uff09": [[406, "index-0"]], "pep 594#xdrlib": [[406, "index-7"]], "packer (xdrlib \u4e2d\u7684\u985e\u5225)": [[406, "xdrlib.Packer"]], "rfc 1014": [[406, "index-2"], [406, "index-3"]], "rfc 1832": [[406, "index-4"], [406, "index-5"]], "unpacker (xdrlib \u4e2d\u7684\u985e\u5225)": [[406, "xdrlib.Unpacker"]], "xdr": [[406, "index-0"]], "done() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.done"]], "get_buffer() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.get_buffer"]], "get_buffer() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.get_buffer"]], "get_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.get_position"]], "pack_array() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.pack_array"]], "pack_bytes() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.pack_bytes"]], "pack_double() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.pack_double"]], "pack_farray() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.pack_farray"]], "pack_float() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.pack_float"]], "pack_fopaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.pack_fopaque"]], "pack_fstring() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.pack_fstring"]], "pack_list() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.pack_list"]], "pack_opaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.pack_opaque"]], "pack_string() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.pack_string"]], "reset() (xdrlib.packer \u7684\u65b9\u6cd5)": [[406, "xdrlib.Packer.reset"]], "reset() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.reset"]], "set_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.set_position"]], "unpack_array() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.unpack_array"]], "unpack_bytes() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.unpack_bytes"]], "unpack_double() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.unpack_double"]], "unpack_farray() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.unpack_farray"]], "unpack_float() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.unpack_float"]], "unpack_fopaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.unpack_fopaque"]], "unpack_fstring() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.unpack_fstring"]], "unpack_list() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.unpack_list"]], "unpack_opaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.unpack_opaque"]], "unpack_string() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[406, "xdrlib.Unpacker.unpack_string"]], "xdrlib": [[406, "module-xdrlib"]], "xml": [[407, "module-xml"]], "domexception": [[408, "xml.dom.DOMException"]], "domstringsizeerr": [[408, "xml.dom.DomstringSizeErr"]], "empty_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[408, "xml.dom.EMPTY_NAMESPACE"]], "hierarchyrequesterr": [[408, "xml.dom.HierarchyRequestErr"]], "indexsizeerr": [[408, "xml.dom.IndexSizeErr"]], "inuseattributeerr": [[408, "xml.dom.InuseAttributeErr"]], "invalidaccesserr": [[408, "xml.dom.InvalidAccessErr"]], "invalidcharactererr": [[408, "xml.dom.InvalidCharacterErr"]], "invalidmodificationerr": [[408, "xml.dom.InvalidModificationErr"]], "invalidstateerr": [[408, "xml.dom.InvalidStateErr"]], "namespaceerr": [[408, "xml.dom.NamespaceErr"]], "nodataallowederr": [[408, "xml.dom.NoDataAllowedErr"]], "nomodificationallowederr": [[408, "xml.dom.NoModificationAllowedErr"]], "notfounderr": [[408, "xml.dom.NotFoundErr"]], "notsupportederr": [[408, "xml.dom.NotSupportedErr"]], "python_dom": [[408, "index-0"]], "syntaxerr": [[408, "xml.dom.SyntaxErr"]], "wrongdocumenterr": [[408, "xml.dom.WrongDocumentErr"]], "xhtml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[408, "xml.dom.XHTML_NAMESPACE"]], "xmlns_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[408, "xml.dom.XMLNS_NAMESPACE"]], "xml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[408, "xml.dom.XML_NAMESPACE"]], "appendchild() (xml.dom.node \u7684\u65b9\u6cd5)": [[408, "xml.dom.Node.appendChild"]], "attributes (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.attributes"]], "childnodes (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.childNodes"]], "clonenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[408, "xml.dom.Node.cloneNode"]], "createattribute() (xml.dom.document \u7684\u65b9\u6cd5)": [[408, "xml.dom.Document.createAttribute"]], "createattributens() (xml.dom.document \u7684\u65b9\u6cd5)": [[408, "xml.dom.Document.createAttributeNS"]], "createcomment() (xml.dom.document \u7684\u65b9\u6cd5)": [[408, "xml.dom.Document.createComment"]], "createdocument() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[408, "xml.dom.DOMImplementation.createDocument"]], "createdocumenttype() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[408, "xml.dom.DOMImplementation.createDocumentType"]], "createelement() (xml.dom.document \u7684\u65b9\u6cd5)": [[408, "xml.dom.Document.createElement"]], "createelementns() (xml.dom.document \u7684\u65b9\u6cd5)": [[408, "xml.dom.Document.createElementNS"]], "createprocessinginstruction() (xml.dom.document \u7684\u65b9\u6cd5)": [[408, "xml.dom.Document.createProcessingInstruction"]], "createtextnode() (xml.dom.document \u7684\u65b9\u6cd5)": [[408, "xml.dom.Document.createTextNode"]], "data (xml.dom.comment \u7684\u5c6c\u6027)": [[408, "xml.dom.Comment.data"]], "data (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[408, "xml.dom.ProcessingInstruction.data"]], "data (xml.dom.text \u7684\u5c6c\u6027)": [[408, "xml.dom.Text.data"]], "documentelement (xml.dom.document \u7684\u5c6c\u6027)": [[408, "xml.dom.Document.documentElement"]], "entities (xml.dom.documenttype \u7684\u5c6c\u6027)": [[408, "xml.dom.DocumentType.entities"]], "firstchild (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.firstChild"]], "getattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.getAttribute"]], "getattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.getAttributeNS"]], "getattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.getAttributeNode"]], "getattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.getAttributeNodeNS"]], "getdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[408, "xml.dom.getDOMImplementation"]], "getelementsbytagname() (xml.dom.document \u7684\u65b9\u6cd5)": [[408, "xml.dom.Document.getElementsByTagName"]], "getelementsbytagname() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.getElementsByTagName"]], "getelementsbytagnamens() (xml.dom.document \u7684\u65b9\u6cd5)": [[408, "xml.dom.Document.getElementsByTagNameNS"]], "getelementsbytagnamens() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.getElementsByTagNameNS"]], "hasattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.hasAttribute"]], "hasattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.hasAttributeNS"]], "hasattributes() (xml.dom.node \u7684\u65b9\u6cd5)": [[408, "xml.dom.Node.hasAttributes"]], "haschildnodes() (xml.dom.node \u7684\u65b9\u6cd5)": [[408, "xml.dom.Node.hasChildNodes"]], "hasfeature() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[408, "xml.dom.DOMImplementation.hasFeature"]], "insertbefore() (xml.dom.node \u7684\u65b9\u6cd5)": [[408, "xml.dom.Node.insertBefore"]], "internalsubset (xml.dom.documenttype \u7684\u5c6c\u6027)": [[408, "xml.dom.DocumentType.internalSubset"]], "issamenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[408, "xml.dom.Node.isSameNode"]], "item() (xml.dom.namednodemap \u7684\u65b9\u6cd5)": [[408, "xml.dom.NamedNodeMap.item"]], "item() (xml.dom.nodelist \u7684\u65b9\u6cd5)": [[408, "xml.dom.NodeList.item"]], "lastchild (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.lastChild"]], "length (xml.dom.namednodemap \u7684\u5c6c\u6027)": [[408, "xml.dom.NamedNodeMap.length"]], "length (xml.dom.nodelist \u7684\u5c6c\u6027)": [[408, "xml.dom.NodeList.length"]], "localname (xml.dom.attr \u7684\u5c6c\u6027)": [[408, "xml.dom.Attr.localName"]], "localname (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.localName"]], "name (xml.dom.attr \u7684\u5c6c\u6027)": [[408, "xml.dom.Attr.name"]], "name (xml.dom.documenttype \u7684\u5c6c\u6027)": [[408, "xml.dom.DocumentType.name"]], "namespaceuri (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.namespaceURI"]], "nextsibling (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.nextSibling"]], "nodename (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.nodeName"]], "nodetype (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.nodeType"]], "nodevalue (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.nodeValue"]], "normalize() (xml.dom.node \u7684\u65b9\u6cd5)": [[408, "xml.dom.Node.normalize"]], "notations (xml.dom.documenttype \u7684\u5c6c\u6027)": [[408, "xml.dom.DocumentType.notations"]], "parentnode (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.parentNode"]], "prefix (xml.dom.attr \u7684\u5c6c\u6027)": [[408, "xml.dom.Attr.prefix"]], "prefix (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.prefix"]], "previoussibling (xml.dom.node \u7684\u5c6c\u6027)": [[408, "xml.dom.Node.previousSibling"]], "publicid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[408, "xml.dom.DocumentType.publicId"]], "registerdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[408, "xml.dom.registerDOMImplementation"]], "removeattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.removeAttribute"]], "removeattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.removeAttributeNS"]], "removeattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.removeAttributeNode"]], "removechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[408, "xml.dom.Node.removeChild"]], "replacechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[408, "xml.dom.Node.replaceChild"]], "setattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.setAttribute"]], "setattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.setAttributeNS"]], "setattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.setAttributeNode"]], "setattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[408, "xml.dom.Element.setAttributeNodeNS"]], "systemid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[408, "xml.dom.DocumentType.systemId"]], "tagname (xml.dom.element \u7684\u5c6c\u6027)": [[408, "xml.dom.Element.tagName"]], "target (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[408, "xml.dom.ProcessingInstruction.target"]], "value (xml.dom.attr \u7684\u5c6c\u6027)": [[408, "xml.dom.Attr.value"]], "xml.dom": [[408, "module-xml.dom"]], "parse() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[409, "xml.dom.minidom.parse"]], "parsestring() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[409, "xml.dom.minidom.parseString"]], "toprettyxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.minidom.Node.toprettyxml"]], "toxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.minidom.Node.toxml"]], "unlink() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.minidom.Node.unlink"]], "writexml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[409, "xml.dom.minidom.Node.writexml"]], "xml.dom.minidom": [[409, "module-xml.dom.minidom"]], "domeventstream (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[410, "xml.dom.pulldom.DOMEventStream"]], "pulldom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[410, "xml.dom.pulldom.PullDom"]], "sax2dom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[410, "xml.dom.pulldom.SAX2DOM"]], "default_bufsize (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.pulldom.default_bufsize"]], "expandnode() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[410, "xml.dom.pulldom.DOMEventStream.expandNode"]], "getevent() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[410, "xml.dom.pulldom.DOMEventStream.getEvent"]], "parse() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.pulldom.parse"]], "parsestring() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.pulldom.parseString"]], "reset() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[410, "xml.dom.pulldom.DOMEventStream.reset"]], "xml.dom.pulldom": [[410, "module-xml.dom.pulldom"]], "c14nwritertarget (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[411, "xml.etree.ElementTree.C14NWriterTarget"]], "comment() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.Comment"]], "element (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[411, "xml.etree.ElementTree.Element"]], "elementtree (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[411, "xml.etree.ElementTree.ElementTree"]], "parseerror (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[411, "xml.etree.ElementTree.ParseError"]], "processinginstruction() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.ProcessingInstruction"]], "qname (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[411, "xml.etree.ElementTree.QName"]], "subelement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.SubElement"]], "treebuilder (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[411, "xml.etree.ElementTree.TreeBuilder"]], "xml() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.XML"]], "xmlid() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.XMLID"]], "xmlparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[411, "xml.etree.ElementTree.XMLParser"]], "xmlpullparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[411, "xml.etree.ElementTree.XMLPullParser"]], "_setroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.ElementTree._setroot"]], "append() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.append"]], "attrib (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[411, "xml.etree.ElementTree.Element.attrib"]], "canonicalize() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.canonicalize"]], "clear() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.clear"]], "close() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.TreeBuilder.close"]], "close() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.XMLParser.close"]], "close() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.XMLPullParser.close"]], "code (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[411, "xml.etree.ElementTree.ParseError.code"]], "comment() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.TreeBuilder.comment"]], "data() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.TreeBuilder.data"]], "doctype() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.TreeBuilder.doctype"]], "dump() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.dump"]], "end() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.TreeBuilder.end"]], "end_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.TreeBuilder.end_ns"]], "extend() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.extend"]], "feed() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.XMLParser.feed"]], "feed() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.XMLPullParser.feed"]], "find() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.find"]], "find() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.ElementTree.find"]], "findall() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.findall"]], "findall() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.ElementTree.findall"]], "findtext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.findtext"]], "findtext() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.ElementTree.findtext"]], "fromstring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.fromstring"]], "fromstringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.fromstringlist"]], "get() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.get"]], "getroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.ElementTree.getroot"]], "indent() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.indent"]], "insert() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.insert"]], "iselement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.iselement"]], "items() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.items"]], "iter() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.iter"]], "iter() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.ElementTree.iter"]], "iterfind() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.iterfind"]], "iterfind() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.ElementTree.iterfind"]], "iterparse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.iterparse"]], "itertext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.itertext"]], "keys() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.keys"]], "makeelement() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.makeelement"]], "parse() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.ElementTree.parse"]], "parse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.parse"]], "pi() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.TreeBuilder.pi"]], "position (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[411, "xml.etree.ElementTree.ParseError.position"]], "read_events() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.XMLPullParser.read_events"]], "register_namespace() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.register_namespace"]], "remove() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.remove"]], "set() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.Element.set"]], "start() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.TreeBuilder.start"]], "start_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.TreeBuilder.start_ns"]], "tag (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[411, "xml.etree.ElementTree.Element.tag"]], "tail (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[411, "xml.etree.ElementTree.Element.tail"]], "text (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[411, "xml.etree.ElementTree.Element.text"]], "tostring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.tostring"]], "tostringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[411, "xml.etree.ElementTree.tostringlist"]], "write() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[411, "xml.etree.ElementTree.ElementTree.write"]], "xml.etree.elementinclude": [[411, "module-xml.etree.ElementInclude"]], "xml.etree.elementinclude.default_loader()": [[411, "xml.etree.ElementInclude.default_loader"]], "xml.etree.elementinclude.include()": [[411, "xml.etree.ElementInclude.include"]], "xml.etree.elementtree": [[411, "module-xml.etree.ElementTree"]], "saxexception": [[412, "xml.sax.SAXException"]], "saxnotrecognizedexception": [[412, "xml.sax.SAXNotRecognizedException"]], "saxnotsupportedexception": [[412, "xml.sax.SAXNotSupportedException"]], "saxparseexception": [[412, "xml.sax.SAXParseException"]], "getexception() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[412, "xml.sax.SAXException.getException"]], "getmessage() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[412, "xml.sax.SAXException.getMessage"]], "make_parser() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[412, "xml.sax.make_parser"]], "parse() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[412, "xml.sax.parse"]], "parsestring() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[412, "xml.sax.parseString"]], "xml.sax": [[412, "module-xml.sax"]], "contenthandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[413, "xml.sax.handler.ContentHandler"]], "dtdhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[413, "xml.sax.handler.DTDHandler"]], "entityresolver (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[413, "xml.sax.handler.EntityResolver"]], "errorhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[413, "xml.sax.handler.ErrorHandler"]], "lexicalhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[413, "xml.sax.handler.LexicalHandler"]], "all_features (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.all_features"]], "all_properties (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.all_properties"]], "characters() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.characters"]], "comment() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.LexicalHandler.comment"]], "endcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.LexicalHandler.endCDATA"]], "enddtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.LexicalHandler.endDTD"]], "enddocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.endDocument"]], "endelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.endElement"]], "endelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.endElementNS"]], "endprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.endPrefixMapping"]], "error() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ErrorHandler.error"]], "fatalerror() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ErrorHandler.fatalError"]], "feature_external_ges (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.feature_external_ges"]], "feature_external_pes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.feature_external_pes"]], "feature_namespace_prefixes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.feature_namespace_prefixes"]], "feature_namespaces (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.feature_namespaces"]], "feature_string_interning (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.feature_string_interning"]], "feature_validation (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.feature_validation"]], "ignorablewhitespace() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.ignorableWhitespace"]], "notationdecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.DTDHandler.notationDecl"]], "processinginstruction() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.processingInstruction"]], "property_declaration_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.property_declaration_handler"]], "property_dom_node (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.property_dom_node"]], "property_lexical_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.property_lexical_handler"]], "property_xml_string (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[413, "xml.sax.handler.property_xml_string"]], "resolveentity() (xml.sax.handler.entityresolver \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.EntityResolver.resolveEntity"]], "setdocumentlocator() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.setDocumentLocator"]], "skippedentity() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.skippedEntity"]], "startcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.LexicalHandler.startCDATA"]], "startdtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.LexicalHandler.startDTD"]], "startdocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.startDocument"]], "startelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.startElement"]], "startelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.startElementNS"]], "startprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ContentHandler.startPrefixMapping"]], "unparsedentitydecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.DTDHandler.unparsedEntityDecl"]], "warning() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[413, "xml.sax.handler.ErrorHandler.warning"]], "xml.sax.handler": [[413, "module-xml.sax.handler"]], "attributesimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.xmlreader.AttributesImpl"]], "attributesnsimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.xmlreader.AttributesNSImpl"]], "incrementalparser (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.xmlreader.IncrementalParser"]], "inputsource (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.xmlreader.InputSource"]], "locator (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.xmlreader.Locator"]], "xmlreader (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[414, "xml.sax.xmlreader.XMLReader"]], "close() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.IncrementalParser.close"]], "feed() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.IncrementalParser.feed"]], "getbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.InputSource.getByteStream"]], "getcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.InputSource.getCharacterStream"]], "getcolumnnumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.Locator.getColumnNumber"]], "getcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.getContentHandler"]], "getdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.getDTDHandler"]], "getencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.InputSource.getEncoding"]], "getentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.getEntityResolver"]], "geterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.getErrorHandler"]], "getfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.getFeature"]], "getlength() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.Attributes.getLength"]], "getlinenumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.Locator.getLineNumber"]], "getnamebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.AttributesNS.getNameByQName"]], "getnames() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.Attributes.getNames"]], "getproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.getProperty"]], "getpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.InputSource.getPublicId"]], "getpublicid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.Locator.getPublicId"]], "getqnamebyname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.AttributesNS.getQNameByName"]], "getqnames() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.AttributesNS.getQNames"]], "getsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.InputSource.getSystemId"]], "getsystemid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.Locator.getSystemId"]], "gettype() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.Attributes.getType"]], "getvalue() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.Attributes.getValue"]], "getvaluebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.AttributesNS.getValueByQName"]], "parse() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.parse"]], "reset() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.IncrementalParser.reset"]], "setbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.InputSource.setByteStream"]], "setcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.InputSource.setCharacterStream"]], "setcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.setContentHandler"]], "setdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.setDTDHandler"]], "setencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.InputSource.setEncoding"]], "setentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.setEntityResolver"]], "seterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.setErrorHandler"]], "setfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.setFeature"]], "setlocale() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.setLocale"]], "setproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.XMLReader.setProperty"]], "setpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.InputSource.setPublicId"]], "setsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[414, "xml.sax.xmlreader.InputSource.setSystemId"]], "xml.sax.xmlreader": [[414, "module-xml.sax.xmlreader"]], "xmlfilterbase (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.saxutils.XMLFilterBase"]], "xmlgenerator (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.saxutils.XMLGenerator"]], "escape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[415, "xml.sax.saxutils.escape"]], "prepare_input_source() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[415, "xml.sax.saxutils.prepare_input_source"]], "quoteattr() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[415, "xml.sax.saxutils.quoteattr"]], "unescape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[415, "xml.sax.saxutils.unescape"]], "xml.sax.saxutils": [[415, "module-xml.sax.saxutils"]], "binary (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[417, "xmlrpc.client.Binary"]], "datetime (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[417, "xmlrpc.client.DateTime"]], "fault (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[417, "xmlrpc.client.Fault"]], "multicall (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[417, "xmlrpc.client.MultiCall"]], "protocolerror (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[417, "xmlrpc.client.ProtocolError"]], "rfc 2045#section-6.8": [[417, "index-0"]], "serverproxy (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[417, "xmlrpc.client.ServerProxy"]], "data (xmlrpc.client.binary \u7684\u5c6c\u6027)": [[417, "xmlrpc.client.Binary.data"]], "decode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[417, "xmlrpc.client.Binary.decode"]], "decode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[417, "xmlrpc.client.DateTime.decode"]], "dumps() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[417, "xmlrpc.client.dumps"]], "encode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[417, "xmlrpc.client.Binary.encode"]], "encode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[417, "xmlrpc.client.DateTime.encode"]], "errcode (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[417, "xmlrpc.client.ProtocolError.errcode"]], "errmsg (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[417, "xmlrpc.client.ProtocolError.errmsg"]], "faultcode (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[417, "xmlrpc.client.Fault.faultCode"]], "faultstring (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[417, "xmlrpc.client.Fault.faultString"]], "headers (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[417, "xmlrpc.client.ProtocolError.headers"]], "listmethods() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[417, "xmlrpc.client.ServerProxy.system.listMethods"]], "loads() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[417, "xmlrpc.client.loads"]], "methodhelp() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[417, "xmlrpc.client.ServerProxy.system.methodHelp"]], "methodsignature() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[417, "xmlrpc.client.ServerProxy.system.methodSignature"]], "url (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[417, "xmlrpc.client.ProtocolError.url"]], "xmlrpc.client": [[417, "module-xmlrpc.client"]], "cgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.server.CGIXMLRPCRequestHandler"]], "doccgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.server.DocCGIXMLRPCRequestHandler"]], "docxmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.server.DocXMLRPCRequestHandler"]], "docxmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.server.DocXMLRPCServer"]], "simplexmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.server.SimpleXMLRPCRequestHandler"]], "simplexmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[418, "xmlrpc.server.SimpleXMLRPCServer"]], "handle_request() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.CGIXMLRPCRequestHandler.handle_request"]], "register_function() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.CGIXMLRPCRequestHandler.register_function"]], "register_function() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.SimpleXMLRPCServer.register_function"]], "register_instance() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.CGIXMLRPCRequestHandler.register_instance"]], "register_instance() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.SimpleXMLRPCServer.register_instance"]], "register_introspection_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.CGIXMLRPCRequestHandler.register_introspection_functions"]], "register_introspection_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.SimpleXMLRPCServer.register_introspection_functions"]], "register_multicall_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.CGIXMLRPCRequestHandler.register_multicall_functions"]], "register_multicall_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.SimpleXMLRPCServer.register_multicall_functions"]], "rpc_paths (xmlrpc.server.simplexmlrpcrequesthandler \u7684\u5c6c\u6027)": [[418, "xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths"]], "set_server_documentation() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_documentation"]], "set_server_documentation() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.DocXMLRPCServer.set_server_documentation"]], "set_server_name() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_name"]], "set_server_name() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.DocXMLRPCServer.set_server_name"]], "set_server_title() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_title"]], "set_server_title() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[418, "xmlrpc.server.DocXMLRPCServer.set_server_title"]], "xmlrpc.server": [[418, "module-xmlrpc.server"]], "--compress": [[419, "cmdoption-zipapp-c"]], "--info": [[419, "cmdoption-zipapp-info"]], "--main": [[419, "cmdoption-zipapp-m"]], "--python": [[419, "cmdoption-zipapp-p"]], "executable zip files\uff08\u53ef\u57f7\u884c\u7684 zip \u6a94\u6848\uff09": [[419, "index-0"]], "create_archive() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[419, "zipapp.create_archive"]], "get_interpreter() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[419, "zipapp.get_interpreter"]], "zipapp": [[419, "module-zipapp"]], "zipapp \u547d\u4ee4\u5217\u9078\u9805": [[419, "cmdoption-zipapp-c"], [419, "cmdoption-zipapp-h"], [419, "cmdoption-zipapp-info"], [419, "cmdoption-zipapp-m"], [419, "cmdoption-zipapp-o"], [419, "cmdoption-zipapp-p"]], "--metadata-encoding": [[420, "cmdoption-zipfile-metadata-encoding"]], "badzipfile": [[420, "zipfile.BadZipFile"], [420, "zipfile.BadZipfile"]], "crc (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.CRC"]], "largezipfile": [[420, "zipfile.LargeZipFile"]], "path (zipfile \u4e2d\u7684\u985e\u5225)": [[420, "zipfile.Path"]], "path.stem (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[420, "zipfile.Path.stem"]], "path.suffix (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[420, "zipfile.Path.suffix"]], "path.suffixes (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[420, "zipfile.Path.suffixes"]], "pyzipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[420, "zipfile.PyZipFile"]], "zip_bzip2 (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[420, "zipfile.ZIP_BZIP2"]], "zip_deflated (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[420, "zipfile.ZIP_DEFLATED"]], "zip_lzma (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[420, "zipfile.ZIP_LZMA"]], "zip_stored (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[420, "zipfile.ZIP_STORED"]], "zipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[420, "zipfile.ZipFile"]], "zipinfo (zipfile \u4e2d\u7684\u985e\u5225)": [[420, "zipfile.ZipInfo"]], "close() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.close"]], "comment (zipfile.zipfile \u7684\u5c6c\u6027)": [[420, "zipfile.ZipFile.comment"]], "comment (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.comment"]], "compress_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.compress_size"]], "compress_type (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.compress_type"]], "create_system (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.create_system"]], "create_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.create_version"]], "date_time (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.date_time"]], "debug (zipfile.zipfile \u7684\u5c6c\u6027)": [[420, "zipfile.ZipFile.debug"]], "exists() (zipfile.path \u7684\u65b9\u6cd5)": [[420, "zipfile.Path.exists"]], "external_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.external_attr"]], "extra (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.extra"]], "extract() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.extract"]], "extract_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.extract_version"]], "extractall() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.extractall"]], "file_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.file_size"]], "filename (zipfile.zipfile \u7684\u5c6c\u6027)": [[420, "zipfile.ZipFile.filename"]], "filename (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.filename"]], "flag_bits (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.flag_bits"]], "from_file() (zipfile.zipinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[420, "zipfile.ZipInfo.from_file"]], "getinfo() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.getinfo"]], "header_offset (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.header_offset"]], "infolist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.infolist"]], "internal_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.internal_attr"]], "is_dir() (zipfile.path \u7684\u65b9\u6cd5)": [[420, "zipfile.Path.is_dir"]], "is_dir() (zipfile.zipinfo \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipInfo.is_dir"]], "is_file() (zipfile.path \u7684\u65b9\u6cd5)": [[420, "zipfile.Path.is_file"]], "is_zipfile() (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[420, "zipfile.is_zipfile"]], "iterdir() (zipfile.path \u7684\u65b9\u6cd5)": [[420, "zipfile.Path.iterdir"]], "joinpath() (zipfile.path \u7684\u65b9\u6cd5)": [[420, "zipfile.Path.joinpath"]], "mkdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.mkdir"]], "name (zipfile.path \u7684\u5c6c\u6027)": [[420, "zipfile.Path.name"]], "namelist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.namelist"]], "open() (zipfile.path \u7684\u65b9\u6cd5)": [[420, "zipfile.Path.open"]], "open() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.open"]], "printdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.printdir"]], "read() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.read"]], "read_bytes() (zipfile.path \u7684\u65b9\u6cd5)": [[420, "zipfile.Path.read_bytes"]], "read_text() (zipfile.path \u7684\u65b9\u6cd5)": [[420, "zipfile.Path.read_text"]], "reserved (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.reserved"]], "setpassword() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.setpassword"]], "testzip() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.testzip"]], "volume (zipfile.zipinfo \u7684\u5c6c\u6027)": [[420, "zipfile.ZipInfo.volume"]], "write() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.write"]], "writepy() (zipfile.pyzipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.PyZipFile.writepy"]], "writestr() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[420, "zipfile.ZipFile.writestr"]], "zipfile": [[420, "module-zipfile"]], "zipfile \u547d\u4ee4\u5217\u9078\u9805": [[420, "cmdoption-zipfile-c"], [420, "cmdoption-zipfile-create"], [420, "cmdoption-zipfile-e"], [420, "cmdoption-zipfile-extract"], [420, "cmdoption-zipfile-l"], [420, "cmdoption-zipfile-list"], [420, "cmdoption-zipfile-metadata-encoding"], [420, "cmdoption-zipfile-t"], [420, "cmdoption-zipfile-test"]], "pep 273": [[421, "index-0"], [421, "index-1"], [463, "index-4"], [463, "index-5"]], "zipimporterror": [[421, "zipimport.ZipImportError"]], "archive (zipimport.zipimporter \u7684\u5c6c\u6027)": [[421, "zipimport.zipimporter.archive"]], "create_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[421, "zipimport.zipimporter.create_module"]], "exec_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[421, "zipimport.zipimporter.exec_module"]], "find_spec() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[421, "zipimport.zipimporter.find_spec"]], "get_code() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[421, "zipimport.zipimporter.get_code"]], "get_data() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[421, "zipimport.zipimporter.get_data"]], "get_filename() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[421, "zipimport.zipimporter.get_filename"]], "get_source() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[421, "zipimport.zipimporter.get_source"]], "invalidate_caches() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[421, "zipimport.zipimporter.invalidate_caches"]], "is_package() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[421, "zipimport.zipimporter.is_package"]], "load_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[421, "zipimport.zipimporter.load_module"]], "prefix (zipimport.zipimporter \u7684\u5c6c\u6027)": [[421, "zipimport.zipimporter.prefix"]], "zipimport": [[421, "module-zipimport"]], "zipimporter (zipimport \u4e2d\u7684\u985e\u5225)": [[421, "zipimport.zipimporter"]], "cyclic redundancy check\uff08\u5faa\u74b0\u5197\u9918\u6838\u5c0d\uff09": [[422, "index-0"]], "zlib_runtime_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[422, "zlib.ZLIB_RUNTIME_VERSION"]], "zlib_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[422, "zlib.ZLIB_VERSION"]], "adler32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[422, "zlib.adler32"]], "checksum\uff08\u6838\u5c0d\u548c\uff09": [[422, "index-0"]], "compress() (zlib.compress \u7684\u65b9\u6cd5)": [[422, "zlib.Compress.compress"]], "compress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[422, "zlib.compress"]], "compressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[422, "zlib.compressobj"]], "copy() (zlib.compress \u7684\u65b9\u6cd5)": [[422, "zlib.Compress.copy"]], "copy() (zlib.decompress \u7684\u65b9\u6cd5)": [[422, "zlib.Decompress.copy"]], "crc32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[422, "zlib.crc32"]], "decompress() (zlib.decompress \u7684\u65b9\u6cd5)": [[422, "zlib.Decompress.decompress"]], "decompress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[422, "zlib.decompress"]], "decompressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[422, "zlib.decompressobj"]], "eof (zlib.decompress \u7684\u5c6c\u6027)": [[422, "zlib.Decompress.eof"]], "flush() (zlib.compress \u7684\u65b9\u6cd5)": [[422, "zlib.Compress.flush"]], "flush() (zlib.decompress \u7684\u65b9\u6cd5)": [[422, "zlib.Decompress.flush"]], "unconsumed_tail (zlib.decompress \u7684\u5c6c\u6027)": [[422, "zlib.Decompress.unconsumed_tail"]], "unused_data (zlib.decompress \u7684\u5c6c\u6027)": [[422, "zlib.Decompress.unused_data"]], "zlib": [[422, "module-zlib"]], "invalidtzpathwarning": [[423, "zoneinfo.InvalidTZPathWarning"]], "pep 495": [[423, "index-1"], [477, "index-17"], [477, "index-18"], [481, "index-272"]], "pep 615": [[423, "index-0"], [480, "index-16"], [480, "index-9"], [481, "index-161"]], "pythontzpath": [[423, "envvar-PYTHONTZPATH"], [423, "index-2"]], "tzpath (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[423, "zoneinfo.TZPATH"]], "zoneinfo (zoneinfo \u4e2d\u7684\u985e\u5225)": [[423, "zoneinfo.ZoneInfo"]], "zoneinfonotfounderror": [[423, "zoneinfo.ZoneInfoNotFoundError"]], "available_timezones() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[423, "zoneinfo.available_timezones"]], "clear_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[423, "zoneinfo.ZoneInfo.clear_cache"]], "from_file() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[423, "zoneinfo.ZoneInfo.from_file"]], "key (zoneinfo.zoneinfo \u7684\u5c6c\u6027)": [[423, "zoneinfo.ZoneInfo.key"]], "no_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[423, "zoneinfo.ZoneInfo.no_cache"]], "reset_tzpath() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[423, "zoneinfo.reset_tzpath"]], "zoneinfo": [[423, "module-zoneinfo"]], "! patterns": [[425, "index-23"]], "->": [[425, "index-34"], [439, "index-6"]], "as pattern, or pattern, capture pattern, wildcard pattern": [[425, "index-23"]], "dedent token\uff08\u7e2e\u6392\u6a19\u8a8c\uff09": [[425, "index-2"], [433, "index-9"]], "newline token\uff08\u63db\u884c\u6a19\u8a8c\uff09": [[425, "index-2"], [433, "index-3"]], "pep 3107": [[425, "index-36"], [439, "index-16"], [468, "index-6"], [476, "index-9"], [478, "index-0"]], "pep 3129": [[425, "index-41"], [425, "index-46"], [466, "index-18"]], "pep 318": [[425, "index-40"], [425, "index-47"], [464, "index-12"], [464, "index-4"], [464, "index-5"]], "pep 570": [[425, "index-33"], [479, "index-23"], [479, "index-34"], [481, "index-212"]], "pep 614": [[425, "index-30"], [425, "index-44"], [480, "index-15"], [480, "index-3"], [481, "index-184"]], "pep 636": [[425, "index-20"], [425, "index-26"], [439, "index-15"], [470, "index-82"], [470, "index-97"]], "annotations\uff08\u8a3b\u91cb\uff09": [[425, "index-34"], [439, "index-6"]], "as": [[425, "index-10"], [425, "index-16"], [425, "index-18"], [425, "index-9"], [434, "index-34"], [434, "index-35"]], "async": [[425, "index-49"]], "async def": [[425, "index-48"]], "async for": [[425, "index-50"], [428, "index-12"]], "async with": [[425, "index-51"]], "await": [[425, "index-49"], [428, "index-13"], [428, "index-57"]], "binding\uff08\u7d81\u5b9a\uff09": [[425, "index-28"], [425, "index-42"]], "break": [[425, "index-13"], [425, "index-15"], [425, "index-5"], [425, "index-7"], [434, "index-30"]], "case": [[425, "index-18"], [425, "index-18"]], "case block": [[425, "index-22"]], "class definition\uff08\u985e\u5225\u5b9a\u7fa9\uff09": [[425, "index-42"], [425, "index-43"], [426, "index-86"]], "clause\uff08\u5b50\u53e5\uff09": [[425, "index-1"]], "compound statement\uff08\u8907\u5408\u9673\u8ff0\u5f0f\uff09": [[425, "index-16"], [425, "index-18"], [425, "index-28"], [425, "index-3"], [425, "index-4"], [425, "index-42"], [425, "index-6"], [425, "index-9"]], "compound\uff08\u8907\u5408\uff09": [[425, "index-0"]], "continue": [[425, "index-13"], [425, "index-15"], [425, "index-5"], [425, "index-7"], [434, "index-33"]], "dangling": [[425, "index-2"]], "def": [[425, "index-28"]], "default\uff08\u9810\u8a2d\uff09": [[425, "index-31"]], "definition\uff08\u5b9a\u7fa9\uff09": [[425, "index-28"], [425, "index-42"], [434, "index-24"]], "elif": [[425, "index-3"]], "else": [[425, "index-13"], [425, "index-2"], [425, "index-3"], [425, "index-4"], [425, "index-6"], [425, "index-9"], [428, "index-88"], [434, "index-31"]], "except clause\uff08\u4f8b\u5916\u5b50\u53e5\uff09": [[425, "index-10"]], "except_star": [[425, "index-12"]], "execution\uff08\u57f7\u884c\uff09": [[425, "index-42"], [426, "index-66"], [427, "index-13"], [427, "index-2"]], "expression list\uff08\u8868\u9054\u5f0f\u5217\u8868\uff09": [[425, "index-42"]], "finally": [[425, "index-14"], [425, "index-9"], [434, "index-25"], [434, "index-32"], [434, "index-33"]], "for": [[425, "index-6"], [428, "index-12"], [434, "index-30"], [434, "index-33"], [439, "index-0"]], "frame": [[425, "index-42"], [426, "index-63"], [427, "index-2"]], "function annotations\uff08\u51fd\u5f0f\u8a3b\u91cb\uff09": [[425, "index-34"], [439, "index-6"]], "function definition\uff08\u51fd\u5f0f\u5b9a\u7fa9\uff09": [[425, "index-27"], [425, "index-28"], [425, "index-29"], [425, "index-31"], [425, "index-32"]], "function \uff08\u51fd\u5f0f\uff09": [[425, "index-28"], [425, "index-34"], [426, "index-33"], [426, "index-34"], [426, "index-39"], [426, "index-40"], [426, "index-41"], [426, "index-42"], [428, "index-23"], [428, "index-52"], [428, "index-53"], [428, "index-90"], [434, "index-24"], [434, "index-26"]], "guard": [[425, "index-21"]], "inheritance\uff08\u7e7c\u627f\uff09": [[425, "index-42"]], "irrefutable case block": [[425, "index-22"]], "keyword\uff08\u95dc\u9375\u5b57\uff09": [[425, "index-12"], [425, "index-13"], [425, "index-14"], [425, "index-16"], [425, "index-18"], [425, "index-18"], [425, "index-3"], [425, "index-4"], [425, "index-49"], [425, "index-6"], [425, "index-9"], [428, "index-23"], [428, "index-57"], [433, "index-13"], [433, "index-14"], [434, "index-25"], [434, "index-31"], [434, "index-32"], [434, "index-33"], [434, "index-34"]], "match": [[425, "index-18"], [425, "index-18"]], "match statement\uff08\u5339\u914d\u9673\u8ff0\u5f0f\uff09": [[425, "index-18"]], "name\uff08\u540d\u7a31\uff09": [[425, "index-28"], [425, "index-42"], [427, "index-4"], [428, "index-3"], [428, "index-5"], [433, "index-10"], [434, "index-22"], [434, "index-34"], [434, "index-36"], [434, "index-4"], [434, "index-43"], [438, "index-1"]], "parameter list\uff08\u53c3\u6578\u5217\u8868\uff09": [[425, "index-28"]], "pattern matching\uff08\u6a21\u5f0f\u5339\u914d\uff09": [[425, "index-18"]], "return \uff08\u56de\u50b3\uff09": [[425, "index-13"], [425, "index-15"], [434, "index-24"]], "suite\uff08\u5957\u88dd\uff09": [[425, "index-1"]], "target": [[425, "index-6"], [434, "index-21"], [434, "index-31"], [434, "index-5"], [434, "index-6"]], "type parameter\uff08\u578b\u5225\u53c3\u6578\uff09": [[425, "index-53"]], "user-defined function\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\u51fd\u5f0f\uff09": [[425, "index-28"], [426, "index-34"], [428, "index-52"]], "value\uff08\u503c\uff09": [[425, "index-31"], [428, "index-17"]], "with": [[425, "index-16"], [426, "index-106"]], "with statement\uff08with \u9673\u8ff0\u5f0f\uff09": [[425, "index-16"]], "ellipsis": [[426, "index-8"]], "java": [[426, "index-13"]], "notimplemented": [[426, "index-7"]], "pep 252": [[426, "index-85"], [462, "index-2"], [462, "index-4"]], "pep 3135": [[426, "index-93"], [468, "index-31"]], "pep 562": [[426, "index-115"], [478, "index-41"], [481, "index-233"], [481, "index-238"]], "__abs__() (object \u7684\u65b9\u6cd5)": [[426, "object.__abs__"]], "__add__() (object \u7684\u65b9\u6cd5)": [[426, "object.__add__"]], "__aenter__() (object \u7684\u65b9\u6cd5)": [[426, "object.__aenter__"]], "__aexit__() (object \u7684\u65b9\u6cd5)": [[426, "object.__aexit__"]], "__aiter__() (object \u7684\u65b9\u6cd5)": [[426, "object.__aiter__"]], "__and__() (object \u7684\u65b9\u6cd5)": [[426, "object.__and__"]], "__anext__() (object \u7684\u65b9\u6cd5)": [[426, "object.__anext__"]], "__annotations__ (function \u7684\u5c6c\u6027)": [[426, "function.__annotations__"]], "__annotations__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-36"]], "__annotations__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[426, "index-45"]], "__annotations__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[426, "index-50"]], "__await__() (object \u7684\u65b9\u6cd5)": [[426, "object.__await__"]], "__bases__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[426, "index-50"]], "__bool__() (object \u7684\u65b9\u6cd5)": [[426, "object.__bool__"]], "__bool__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[426, "index-98"]], "__buffer__() (object \u7684\u65b9\u6cd5)": [[426, "object.__buffer__"]], "__bytes__() (object \u7684\u65b9\u6cd5)": [[426, "object.__bytes__"]], "__call__() (object \u7684\u65b9\u6cd5)": [[426, "object.__call__"]], "__ceil__() (object \u7684\u65b9\u6cd5)": [[426, "object.__ceil__"]], "__class__ \uff08\u5be6\u4f8b\u5c6c\u6027\uff09": [[426, "index-54"]], "__class__ \uff08\u65b9\u6cd5 cell\uff09": [[426, "index-92"]], "__class__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[426, "index-83"]], "__class_getitem__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[426, "object.__class_getitem__"]], "__classcell__ \uff08\u985e\u5225\u547d\u540d\u7a7a\u9593\u9805\u76ee\uff09": [[426, "index-92"]], "__closure__ (function \u7684\u5c6c\u6027)": [[426, "function.__closure__"]], "__closure__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-35"]], "__code__ (function \u7684\u5c6c\u6027)": [[426, "function.__code__"]], "__code__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-36"]], "__complex__() (object \u7684\u65b9\u6cd5)": [[426, "object.__complex__"]], "__contains__() (object \u7684\u65b9\u6cd5)": [[426, "object.__contains__"]], "__defaults__ (function \u7684\u5c6c\u6027)": [[426, "function.__defaults__"]], "__defaults__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-36"]], "__del__() (object \u7684\u65b9\u6cd5)": [[426, "object.__del__"]], "__delattr__() (object \u7684\u65b9\u6cd5)": [[426, "object.__delattr__"]], "__delete__() (object \u7684\u65b9\u6cd5)": [[426, "object.__delete__"]], "__delitem__() (object \u7684\u65b9\u6cd5)": [[426, "object.__delitem__"]], "__dict__ (function \u7684\u5c6c\u6027)": [[426, "function.__dict__"]], "__dict__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-36"]], "__dict__ \uff08\u5be6\u4f8b\u5c6c\u6027\uff09": [[426, "index-54"]], "__dict__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[426, "index-46"]], "__dict__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[426, "index-50"]], "__dir__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[426, "index-83"]], "__dir__() (object \u7684\u65b9\u6cd5)": [[426, "object.__dir__"]], "__divmod__() (object \u7684\u65b9\u6cd5)": [[426, "object.__divmod__"]], "__doc__ (function \u7684\u5c6c\u6027)": [[426, "function.__doc__"]], "__doc__ (method \u7684\u5c6c\u6027)": [[426, "method.__doc__"]], "__doc__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-36"]], "__doc__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[426, "index-38"]], "__doc__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[426, "index-45"]], "__doc__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[426, "index-50"]], "__enter__() (object \u7684\u65b9\u6cd5)": [[426, "object.__enter__"]], "__eq__() (object \u7684\u65b9\u6cd5)": [[426, "object.__eq__"]], "__exit__() (object \u7684\u65b9\u6cd5)": [[426, "object.__exit__"]], "__file__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[426, "index-45"]], "__float__() (object \u7684\u65b9\u6cd5)": [[426, "object.__float__"]], "__floor__() (object \u7684\u65b9\u6cd5)": [[426, "object.__floor__"]], "__floordiv__() (object \u7684\u65b9\u6cd5)": [[426, "object.__floordiv__"]], "__format__() (object \u7684\u65b9\u6cd5)": [[426, "object.__format__"]], "__format__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[426, "index-78"]], "__func__ (method \u7684\u5c6c\u6027)": [[426, "method.__func__"]], "__func__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[426, "index-38"]], "__ge__() (object \u7684\u65b9\u6cd5)": [[426, "object.__ge__"]], "__get__() (object \u7684\u65b9\u6cd5)": [[426, "object.__get__"]], "__getattr__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[426, "index-83"]], "__getattr__() (object \u7684\u65b9\u6cd5)": [[426, "object.__getattr__"]], "__getattribute__() (object \u7684\u65b9\u6cd5)": [[426, "object.__getattribute__"]], "__getitem__() (object \u7684\u65b9\u6cd5)": [[426, "object.__getitem__"]], "__getitem__() \uff08\u5c0d\u6620\u7269\u4ef6\u65b9\u6cd5\uff09": [[426, "index-71"]], "__globals__ (function \u7684\u5c6c\u6027)": [[426, "function.__globals__"]], "__globals__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-35"]], "__gt__() (object \u7684\u65b9\u6cd5)": [[426, "object.__gt__"]], "__hash__() (object \u7684\u65b9\u6cd5)": [[426, "object.__hash__"]], "__iadd__() (object \u7684\u65b9\u6cd5)": [[426, "object.__iadd__"]], "__iand__() (object \u7684\u65b9\u6cd5)": [[426, "object.__iand__"]], "__ifloordiv__() (object \u7684\u65b9\u6cd5)": [[426, "object.__ifloordiv__"]], "__ilshift__() (object \u7684\u65b9\u6cd5)": [[426, "object.__ilshift__"]], "__imatmul__() (object \u7684\u65b9\u6cd5)": [[426, "object.__imatmul__"]], "__imod__() (object \u7684\u65b9\u6cd5)": [[426, "object.__imod__"]], "__imul__() (object \u7684\u65b9\u6cd5)": [[426, "object.__imul__"]], "__index__() (object \u7684\u65b9\u6cd5)": [[426, "object.__index__"]], "__init__() (object \u7684\u65b9\u6cd5)": [[426, "object.__init__"]], "__init_subclass__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[426, "object.__init_subclass__"]], "__instancecheck__() (class \u7684\u65b9\u6cd5)": [[426, "class.__instancecheck__"]], "__int__() (object \u7684\u65b9\u6cd5)": [[426, "object.__int__"]], "__invert__() (object \u7684\u65b9\u6cd5)": [[426, "object.__invert__"]], "__ior__() (object \u7684\u65b9\u6cd5)": [[426, "object.__ior__"]], "__ipow__() (object \u7684\u65b9\u6cd5)": [[426, "object.__ipow__"]], "__irshift__() (object \u7684\u65b9\u6cd5)": [[426, "object.__irshift__"]], "__isub__() (object \u7684\u65b9\u6cd5)": [[426, "object.__isub__"]], "__iter__() (object \u7684\u65b9\u6cd5)": [[426, "object.__iter__"]], "__itruediv__() (object \u7684\u65b9\u6cd5)": [[426, "object.__itruediv__"]], "__ixor__() (object \u7684\u65b9\u6cd5)": [[426, "object.__ixor__"]], "__kwdefaults__ (function \u7684\u5c6c\u6027)": [[426, "function.__kwdefaults__"]], "__kwdefaults__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-36"]], "__le__() (object \u7684\u65b9\u6cd5)": [[426, "object.__le__"]], "__len__() (object \u7684\u65b9\u6cd5)": [[426, "object.__len__"]], "__len__() \uff08\u5c0d\u6620\u7269\u4ef6\u65b9\u6cd5\uff09": [[426, "index-82"]], "__length_hint__() (object \u7684\u65b9\u6cd5)": [[426, "object.__length_hint__"]], "__lshift__() (object \u7684\u65b9\u6cd5)": [[426, "object.__lshift__"]], "__lt__() (object \u7684\u65b9\u6cd5)": [[426, "object.__lt__"]], "__matmul__() (object \u7684\u65b9\u6cd5)": [[426, "object.__matmul__"]], "__missing__() (object \u7684\u65b9\u6cd5)": [[426, "object.__missing__"]], "__mod__() (object \u7684\u65b9\u6cd5)": [[426, "object.__mod__"]], "__module__ (function \u7684\u5c6c\u6027)": [[426, "function.__module__"]], "__module__ (method \u7684\u5c6c\u6027)": [[426, "method.__module__"]], "__module__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-36"]], "__module__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[426, "index-38"]], "__module__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[426, "index-50"]], "__mro_entries__() (object \u7684\u65b9\u6cd5)": [[426, "object.__mro_entries__"]], "__mul__() (object \u7684\u65b9\u6cd5)": [[426, "object.__mul__"]], "__name__ (function \u7684\u5c6c\u6027)": [[426, "function.__name__"]], "__name__ (method \u7684\u5c6c\u6027)": [[426, "method.__name__"]], "__name__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-36"]], "__name__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[426, "index-38"]], "__name__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[426, "index-45"]], "__name__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[426, "index-50"]], "__ne__() (object \u7684\u65b9\u6cd5)": [[426, "object.__ne__"]], "__neg__() (object \u7684\u65b9\u6cd5)": [[426, "object.__neg__"]], "__new__() (object \u7684\u65b9\u6cd5)": [[426, "object.__new__"]], "__objclass__ (object \u7684\u5c6c\u6027)": [[426, "object.__objclass__"]], "__or__() (object \u7684\u65b9\u6cd5)": [[426, "object.__or__"]], "__pos__() (object \u7684\u65b9\u6cd5)": [[426, "object.__pos__"]], "__pow__() (object \u7684\u65b9\u6cd5)": [[426, "object.__pow__"]], "__prepare__ \uff08\u5143\u985e\u5225\u65b9\u6cd5\uff09": [[426, "index-89"]], "__qualname__ (function \u7684\u5c6c\u6027)": [[426, "function.__qualname__"]], "__radd__() (object \u7684\u65b9\u6cd5)": [[426, "object.__radd__"]], "__rand__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rand__"]], "__rdivmod__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rdivmod__"]], "__release_buffer__() (object \u7684\u65b9\u6cd5)": [[426, "object.__release_buffer__"]], "__repr__() (object \u7684\u65b9\u6cd5)": [[426, "object.__repr__"]], "__repr__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[426, "index-75"]], "__reversed__() (object \u7684\u65b9\u6cd5)": [[426, "object.__reversed__"]], "__rfloordiv__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rfloordiv__"]], "__rlshift__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rlshift__"]], "__rmatmul__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rmatmul__"]], "__rmod__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rmod__"]], "__rmul__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rmul__"]], "__ror__() (object \u7684\u65b9\u6cd5)": [[426, "object.__ror__"]], "__round__() (object \u7684\u65b9\u6cd5)": [[426, "object.__round__"]], "__rpow__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rpow__"]], "__rrshift__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rrshift__"]], "__rshift__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rshift__"]], "__rsub__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rsub__"]], "__rtruediv__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rtruediv__"]], "__rxor__() (object \u7684\u65b9\u6cd5)": [[426, "object.__rxor__"]], "__self__ (method \u7684\u5c6c\u6027)": [[426, "method.__self__"]], "__self__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[426, "index-38"]], "__set__() (object \u7684\u65b9\u6cd5)": [[426, "object.__set__"]], "__set_name__() (object \u7684\u65b9\u6cd5)": [[426, "object.__set_name__"]], "__setattr__() (object \u7684\u65b9\u6cd5)": [[426, "object.__setattr__"]], "__setitem__() (object \u7684\u65b9\u6cd5)": [[426, "object.__setitem__"]], "__str__() (object \u7684\u65b9\u6cd5)": [[426, "object.__str__"]], "__str__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[426, "index-76"]], "__sub__() (object \u7684\u65b9\u6cd5)": [[426, "object.__sub__"]], "__subclasscheck__() (class \u7684\u65b9\u6cd5)": [[426, "class.__subclasscheck__"]], "__truediv__() (object \u7684\u65b9\u6cd5)": [[426, "object.__truediv__"]], "__trunc__() (object \u7684\u65b9\u6cd5)": [[426, "object.__trunc__"]], "__type_params__ (function \u7684\u5c6c\u6027)": [[426, "function.__type_params__"]], "__type_params__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[426, "index-36"]], "__type_params__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[426, "index-50"]], "__xor__() (object \u7684\u65b9\u6cd5)": [[426, "object.__xor__"]], "body": [[426, "index-91"]], "built-in method\uff08\u5167\u5efa\u65b9\u6cd5\uff09": [[426, "index-43"], [428, "index-53"]], "byte\uff08\u4f4d\u5143\u7d44\uff09": [[426, "index-21"]], "call\uff08\u547c\u53eb\uff09": [[426, "index-33"], [426, "index-47"], [426, "index-49"], [426, "index-97"], [428, "index-47"], [428, "index-52"], [428, "index-53"], [428, "index-54"], [428, "index-55"], [428, "index-56"]], "chr": [[426, "index-19"]], "class instance\uff08\u985e\u5225\u5be6\u4f8b\uff09": [[426, "index-47"], [426, "index-51"], [426, "index-52"], [428, "index-55"]], "class object\uff08\u985e\u5225\u7269\u4ef6\uff09": [[426, "index-47"], [426, "index-49"], [428, "index-54"]], "clear() (frame \u7684\u65b9\u6cd5)": [[426, "frame.clear"]], "close() (coroutine \u7684\u65b9\u6cd5)": [[426, "coroutine.close"]], "co_argcount (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_argcount"]], "co_argcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_cellvars (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_cellvars"]], "co_cellvars \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_code (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_code"]], "co_code \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_consts (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_consts"]], "co_consts \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_filename (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_filename"]], "co_filename \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_firstlineno (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_firstlineno"]], "co_firstlineno \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_flags (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_flags"]], "co_flags \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_freevars (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_freevars"]], "co_freevars \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_kwonlyargcount (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_kwonlyargcount"]], "co_kwonlyargcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_lines() (codeobject \u7684\u65b9\u6cd5)": [[426, "codeobject.co_lines"]], "co_lnotab (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_lnotab"]], "co_lnotab \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_name (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_name"]], "co_name \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_names (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_names"]], "co_names \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_nlocals (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_nlocals"]], "co_nlocals \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_positions() (codeobject \u7684\u65b9\u6cd5)": [[426, "codeobject.co_positions"]], "co_posonlyargcount (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_posonlyargcount"]], "co_posonlyargcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_qualname (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_qualname"]], "co_qualname \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_stacksize (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_stacksize"]], "co_stacksize \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "co_varnames (codeobject \u7684\u5c6c\u6027)": [[426, "codeobject.co_varnames"]], "co_varnames \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-58"]], "constructor\uff08\u5efa\u69cb\u51fd\u5f0f\uff09": [[426, "index-73"]], "conversion": [[426, "index-78"], [428, "index-1"], [434, "index-3"]], "destructor\uff08\u89e3\u69cb\u51fd\u5f0f\uff09": [[426, "index-74"], [434, "index-7"]], "documentation string\uff08\u6587\u4ef6\u5b57\u4e32\uff09": [[426, "index-60"]], "empty\uff08\u7a7a\u7684\uff09": [[426, "index-20"]], "exc_info \uff08sys \u6a21\u7d44\u4e2d\uff09": [[426, "index-66"]], "extension\uff08\u64f4\u5145\uff09": [[426, "index-4"]], "f_back (frame \u7684\u5c6c\u6027)": [[426, "frame.f_back"]], "f_back \uff08frame \u5c6c\u6027\uff09": [[426, "index-64"]], "f_builtins (frame \u7684\u5c6c\u6027)": [[426, "frame.f_builtins"]], "f_builtins \uff08frame \u5c6c\u6027\uff09": [[426, "index-64"]], "f_code (frame \u7684\u5c6c\u6027)": [[426, "frame.f_code"]], "f_code \uff08frame \u5c6c\u6027\uff09": [[426, "index-64"]], "f_globals (frame \u7684\u5c6c\u6027)": [[426, "frame.f_globals"]], "f_globals \uff08frame \u5c6c\u6027\uff09": [[426, "index-64"]], "f_lasti (frame \u7684\u5c6c\u6027)": [[426, "frame.f_lasti"]], "f_lasti \uff08frame \u5c6c\u6027\uff09": [[426, "index-64"]], "f_lineno (frame \u7684\u5c6c\u6027)": [[426, "frame.f_lineno"]], "f_lineno \uff08frame \u5c6c\u6027\uff09": [[426, "index-65"]], "f_locals (frame \u7684\u5c6c\u6027)": [[426, "frame.f_locals"]], "f_locals \uff08frame \u5c6c\u6027\uff09": [[426, "index-64"]], "f_trace (frame \u7684\u5c6c\u6027)": [[426, "frame.f_trace"]], "f_trace \uff08frame \u5c6c\u6027\uff09": [[426, "index-65"]], "f_trace_lines (frame \u7684\u5c6c\u6027)": [[426, "frame.f_trace_lines"]], "f_trace_lines \uff08frame \u5c6c\u6027\uff09": [[426, "index-65"]], "f_trace_opcodes (frame \u7684\u5c6c\u6027)": [[426, "frame.f_trace_opcodes"]], "f_trace_opcodes \uff08frame \u5c6c\u6027\uff09": [[426, "index-65"]], "finalizer\uff08\u7d42\u7d50\u51fd\u5f0f\uff09": [[426, "index-74"]], "format() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[426, "index-76"]], "global\uff08\u5168\u57df\uff09": [[426, "index-35"]], "handler\uff08\u8655\u7406\u5668\uff09": [[426, "index-66"]], "hierarchy\uff08\u968e\u5c64\uff09": [[426, "index-4"]], "identity of an object\uff08\u7269\u4ef6\u7684\u8b58\u5225\uff09": [[426, "index-1"]], "immutable object\uff08\u4e0d\u53ef\u8b8a\u7269\u4ef6\uff09": [[426, "index-1"]], "immutable sequences\uff08\u4e0d\u53ef\u8b8a\u5e8f\u5217\uff09": [[426, "index-18"]], "immutable sequence\uff08\u4e0d\u53ef\u8b8a\u5e8f\u5217\uff09": [[426, "index-17"]], "immutable types\uff08\u4e0d\u53ef\u8b8a\u578b\u5225\uff09": [[426, "index-72"]], "index operation\uff08\u7d22\u5f15\u64cd\u4f5c\uff09": [[426, "index-15"]], "indices() (slice \u7684\u65b9\u6cd5)": [[426, "slice.indices"]], "instance\uff08\u5be6\u4f8b\uff09": [[426, "index-47"], [426, "index-51"], [426, "index-97"], [428, "index-55"], [428, "index-56"]], "internal type\uff08\u5167\u90e8\u578b\u5225\uff09": [[426, "index-56"]], "invocation\uff08\u8abf\u7528\uff09": [[426, "index-33"]], "item selection\uff08\u9805\u76ee\u9078\u53d6\uff09": [[426, "index-15"]], "itorator\uff08\u758a\u4ee3\u5668\uff09": [[426, "index-39"]], "last_traceback \uff08sys \u6a21\u7d44\u4e2d\uff09": [[426, "index-66"]], "makefile() \uff08socket \u65b9\u6cd5\uff09": [[426, "index-55"]], "metaclass hint\uff08\u5143\u985e\u5225\u63d0\u793a\uff09": [[426, "index-88"]], "mutable object\uff08\u53ef\u8b8a\u7269\u4ef6\uff09": [[426, "index-1"]], "mutable\uff08\u53ef\u8b8a\u7684\uff09": [[426, "index-22"], [434, "index-4"], [434, "index-9"]], "number\uff08\u6578\u5b57\uff09": [[426, "index-13"], [426, "index-14"], [433, "index-27"]], "object.__match_args__ (\u5167\u5efa\u8b8a\u6578)": [[426, "object.__match_args__"]], "object.__slots__ (\u5167\u5efa\u8b8a\u6578)": [[426, "object.__slots__"]], "open": [[426, "index-55"], [444, "index-0"]], "ord": [[426, "index-19"]], "overloading\uff08\u591a\u8f09\uff09": [[426, "index-71"]], "popen() \uff08\u65bc os \u6a21\u7d44\u4e2d\uff09": [[426, "index-55"]], "print": [[426, "index-78"]], "print() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[426, "index-76"]], "reference counting\uff08\u53c3\u7167\u8a08\u6578\uff09": [[426, "index-2"]], "replace() (codeobject \u7684\u65b9\u6cd5)": [[426, "codeobject.replace"]], "repr() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[426, "index-75"]], "representation\uff08\u8868\u793a\uff09": [[426, "index-11"]], "round": [[426, "index-105"]], "send() (coroutine \u7684\u65b9\u6cd5)": [[426, "coroutine.send"]], "set type\uff08\u96c6\u5408\u578b\u5225\uff09": [[426, "index-27"]], "singleton\uff08\u55ae\u4f8b\uff09": [[426, "index-20"]], "stack\uff08\u5806\u758a\uff09": [[426, "index-66"]], "start \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-70"]], "stderr \uff08sys \u6a21\u7d44\u4e2d\uff09": [[426, "index-55"]], "stdin \uff08sys \u6a21\u7d44\u4e2d\uff09": [[426, "index-55"]], "stdio": [[426, "index-55"]], "stdout \uff08sys \u6a21\u7d44\u4e2d\uff09": [[426, "index-55"]], "step \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-70"]], "stop \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-70"]], "subclassing\uff08\u5b50\u985e\u5225\u5316\uff09": [[426, "index-72"]], "subscription\uff08\u4e0b\u6a19\uff09": [[426, "index-15"], [426, "index-22"], [426, "index-30"], [428, "index-41"], [434, "index-9"]], "sys.exc_info": [[426, "index-66"]], "sys.exception": [[426, "index-66"]], "sys.last_traceback": [[426, "index-66"]], "sys.stderr": [[426, "index-55"]], "sys.stdin": [[426, "index-55"]], "sys.stdout": [[426, "index-55"]], "tb_frame (traceback \u7684\u5c6c\u6027)": [[426, "traceback.tb_frame"]], "tb_frame \uff08traceback \u5c6c\u6027\uff09": [[426, "index-67"]], "tb_lasti (traceback \u7684\u5c6c\u6027)": [[426, "traceback.tb_lasti"]], "tb_lasti \uff08traceback \u5c6c\u6027\uff09": [[426, "index-67"]], "tb_lineno (traceback \u7684\u5c6c\u6027)": [[426, "traceback.tb_lineno"]], "tb_lineno \uff08traceback \u5c6c\u6027\uff09": [[426, "index-67"]], "tb_next (traceback \u7684\u5c6c\u6027)": [[426, "traceback.tb_next"]], "tb_next \uff08traceback \u5c6c\u6027\uff09": [[426, "index-68"]], "throw() (coroutine \u7684\u65b9\u6cd5)": [[426, "coroutine.throw"]], "trace\uff08\u8ffd\u8e64\uff09": [[426, "index-66"]], "type of an object\uff08\u7269\u4ef6\u7684\u578b\u5225\uff09": [[426, "index-1"]], "types\uff08\u578b\u5225\uff09, internal\uff08\u5167\u90e8\uff09": [[426, "index-56"]], "unreachable object\uff08\u4e0d\u53ef\u9054\u7269\u4ef6\uff09": [[426, "index-2"]], "user-defined method\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\u65b9\u6cd5\uff09": [[426, "index-37"]], "user-defined\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\uff09": [[426, "index-34"], [426, "index-37"], [428, "index-52"]], "value of an object\uff08\u7269\u4ef6\u7684\u503c\uff09": [[426, "index-1"]], "nameerror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[427, "index-9"]], "systemexit\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[427, "index-17"]], "binding\uff08\u7e6b\u7d50\uff09": [[427, "index-4"], [434, "index-34"], [434, "index-36"], [434, "index-4"], [434, "index-43"]], "block": [[427, "index-0"], [427, "index-1"]], "environment\uff08\u74b0\u5883\uff09": [[427, "index-8"]], "error handling\uff08\u932f\u8aa4\u8655\u7406\uff09": [[427, "index-15"]], "exception handler\uff08\u4f8b\u5916\u8655\u7406\u5668\uff09": [[427, "index-15"]], "execution model\uff08\u57f7\u884c\u6a21\u578b\uff09": [[427, "index-0"]], "free": [[427, "index-6"]], "from": [[427, "index-5"], [428, "index-23"], [428, "index-25"], [434, "index-34"], [434, "index-36"]], "handle an exception\uff08\u8655\u7406\u4f8b\u5916\uff09": [[427, "index-15"]], "import statement\uff08\u5f15\u5165\u9673\u8ff0\u5f0f\uff09": [[427, "index-5"], [434, "index-34"], [434, "index-35"], [434, "index-36"], [434, "index-37"]], "raise an exception\uff08\u5f15\u767c\u4f8b\u5916\uff09": [[427, "index-15"]], "restricted\uff08\u53d7\u9650\uff09": [[427, "index-13"]], "scope\uff08\u4f5c\u7528\u57df\uff09": [[427, "index-3"], [427, "index-7"]], "termination model\uff08\u7d42\u6b62\u6a21\u578b\uff09": [[427, "index-16"]], "variable\uff08\u8b8a\u6578\uff09": [[427, "index-6"]], ":= \uff08\u5192\u865f\u7b49\u65bc\uff09": [[428, "index-86"]], "bnf": [[428, "index-0"], [432, "index-0"]], "conditional\uff08\u689d\u4ef6\u5f0f\uff09": [[428, "index-82"], [428, "index-88"]], "pep 308": [[428, "index-89"], [465, "index-1"], [465, "index-2"]], "pep 380": [[428, "index-28"], [474, "index-12"]], "pep 448": [[428, "index-19"], [428, "index-51"], [428, "index-94"], [476, "index-5"], [476, "index-6"], [481, "index-280"], [481, "index-291"], [481, "index-292"], [481, "index-293"]], "pep 530": [[428, "index-14"], [477, "index-11"], [477, "index-12"], [481, "index-266"]], "__anext__() (agen \u7684\u65b9\u6cd5)": [[428, "agen.__anext__"]], "__call__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[428, "index-56"]], "__next__() (generator \u7684\u65b9\u6cd5)": [[428, "generator.__next__"]], "aclose() (agen \u7684\u65b9\u6cd5)": [[428, "agen.aclose"]], "addition\uff08\u52a0\uff09": [[428, "index-69"]], "anonymous\uff08\u533f\u540d\uff09": [[428, "index-90"]], "argument list\uff08\u5f15\u6578\u5217\u8868\uff09": [[428, "index-47"]], "arithmetic": [[428, "index-1"], [428, "index-59"], [428, "index-64"]], "asend() (agen \u7684\u65b9\u6cd5)": [[428, "agen.asend"]], "assignment expression\uff08\u8ce6\u503c\u904b\u7b97\u5f0f\uff09": [[428, "index-86"]], "asynchronous-generator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\uff09": [[428, "index-35"]], "athrow() (agen \u7684\u65b9\u6cd5)": [[428, "agen.athrow"]], "atom": [[428, "index-2"]], "attribute reference\uff08\u5c6c\u6027\u53c3\u7167\uff09": [[428, "index-39"]], "call semantics\uff08\u547c\u53eb\u8a9e\u610f\uff09": [[428, "index-47"], [428, "index-48"]], "chaining\uff08\u93c8\u63a5\uff09": [[428, "index-78"]], "close() (generator \u7684\u65b9\u6cd5)": [[428, "generator.close"]], "comma": [[428, "index-10"], [428, "index-95"]], "comprehensions": [[428, "index-11"], [428, "index-15"], [428, "index-16"], [428, "index-17"]], "conditional expression\uff08\u689d\u4ef6\u904b\u7b97\u5f0f\uff09": [[428, "index-88"]], "dictionary expression\uff08\u5b57\u5178\u904b\u7b97\u5f0f\uff09": [[428, "index-17"]], "division\uff08\u9664\uff09": [[428, "index-67"]], "evaluation": [[428, "index-96"]], "exclusive\uff08\u6392\u5916\uff09": [[428, "index-75"]], "expression": [[428, "index-0"], [428, "index-22"], [428, "index-23"], [428, "index-82"], [428, "index-88"], [428, "index-90"], [428, "index-91"], [434, "index-1"], [434, "index-2"]], "expression list\uff08\u904b\u7b97\u5f0f\u4e32\u5217\uff09": [[428, "index-15"], [428, "index-16"], [428, "index-91"]], "form": [[428, "index-90"]], "hashable\uff08\u53ef\u96dc\u6e4a\uff09": [[428, "index-20"]], "identifier": [[428, "index-3"]], "identity": [[428, "index-81"]], "immutable": [[428, "index-20"], [428, "index-7"]], "inclusive\uff08\u5305\u542b\uff09": [[428, "index-76"]], "inversion\uff08\u53cd\u8f49\uff09": [[428, "index-62"]], "item\uff08\u9805\u76ee\uff09": [[428, "index-42"], [428, "index-43"]], "iterable\uff08\u53ef\u758a\u4ee3\uff09": [[428, "index-93"]], "key/value pair\uff08\u9375/\u503c\u5c0d\uff09": [[428, "index-17"]], "key\uff08\u9375\uff09": [[428, "index-17"]], "lambda expression\uff08lambda \u904b\u7b97\u5f0f\uff09": [[428, "index-90"]], "list expression\uff08\u4e32\u5217\u904b\u7b97\u5f0f\uff09": [[428, "index-15"]], "literal": [[428, "index-6"]], "mangling": [[428, "index-5"]], "matrix multiplication\uff08\u77e9\u9663\u4e58\u6cd5\uff09": [[428, "index-66"]], "membership\uff08\u6210\u54e1\uff09": [[428, "index-80"]], "minus\uff08\u6e1b\uff09": [[428, "index-60"]], "modulo\uff08\u9918\u6578\uff09": [[428, "index-68"]], "multiplication\uff08\u4e58\uff09": [[428, "index-65"]], "named expression\uff08\u9644\u540d\u904b\u7b97\u5f0f\uff09": [[428, "index-86"]], "names": [[428, "index-5"]], "negation\uff08\u5426\u5b9a\uff09": [[428, "index-60"]], "order\uff08\u9806\u5e8f\uff09": [[428, "index-96"]], "parenthesized form": [[428, "index-8"]], "plus\uff08\u52a0\uff09": [[428, "index-61"]], "power\uff08\u6b21\u65b9\uff09": [[428, "index-58"]], "precedence\uff08\u512a\u5148\u9806\u5e8f\uff09": [[428, "index-97"]], "primary\uff08\u4e3b\u8981\uff09": [[428, "index-38"]], "private": [[428, "index-5"]], "reference\uff08\u53c3\u7167\uff09": [[428, "index-39"]], "send() (generator \u7684\u65b9\u6cd5)": [[428, "generator.send"]], "set expression\uff08\u96c6\u5408\u904b\u7b97\u5f0f\uff09": [[428, "index-16"]], "shifting\uff08\u79fb\u52d5\uff09": [[428, "index-71"]], "slicing\uff08\u5207\u7247\uff09": [[428, "index-44"]], "start\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-46"]], "step\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-46"]], "stop\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-46"]], "subtraction\uff08\u6e1b\uff09": [[428, "index-70"]], "ternary\uff08\u4e09\u5143\uff09": [[428, "index-88"]], "test\uff08\u6e2c\u8a66\uff09": [[428, "index-80"], [428, "index-81"]], "throw() (generator \u7684\u65b9\u6cd5)": [[428, "generator.throw"]], "trailing": [[428, "index-95"]], "tuple": [[428, "index-42"], [428, "index-45"], [428, "index-9"], [428, "index-92"]], "tuple display": [[428, "index-8"]], "unary\uff08\u4e00\u5143\uff09": [[428, "index-59"]], "unpacking\uff08\u89e3\u5305\uff09": [[428, "index-18"], [428, "index-49"], [428, "index-93"]], "walrus operator\uff08\u6d77\u8c61\u904b\u7b97\u5b50\uff09": [[428, "index-86"]], "xor": [[428, "index-75"]], "yield": [[428, "index-23"], [428, "index-34"], [434, "index-26"], [474, "index-11"]], "yield from expression\uff08yield from \u904b\u7b97\u5f0f\uff09": [[428, "index-25"]], "\u65bc comprehensions\uff08\u7d9c\u5408\u904b\u7b97\uff09": [[428, "index-12"], [428, "index-13"]], "\u65bc expression list\uff08\u904b\u7b97\u5f0f\u4e32\u5217\uff09": [[428, "index-93"]], "\u65bc\u51fd\u5f0f\u547c\u53eb\u4e2d": [[428, "index-47"], [428, "index-49"], [428, "index-50"], [439, "index-3"], [439, "index-4"]], "\u65bc\u5b57\u5178\u904b\u7b97\u5f0f": [[428, "index-17"]], "\u65bc\u5b57\u5178\u986f\u793a": [[428, "index-17"], [428, "index-18"]], "\u7bc4\u4f8b": [[428, "index-34"]], "__cached__": [[430, "cached__"]], "__file__": [[430, "file__"]], "__loader__": [[430, "loader__"]], "__name__": [[430, "name__"]], "__package__": [[430, "package__"]], "__path__": [[430, "path__"]], "__spec__": [[430, "spec__"]], "find_spec": [[430, "index-10"]], "finder\uff08\u641c\u5c0b\u5668\uff09": [[430, "index-10"], [430, "index-8"]], "hooks": [[430, "index-9"]], "import hooks": [[430, "index-9"]], "import machinery\uff08\u5f15\u5165\u6a5f\u5236\uff09": [[430, "index-0"]], "meta": [[430, "index-9"]], "meta hooks": [[430, "index-9"]], "module spec": [[430, "index-8"]], "path based finder\uff08\u57fa\u65bc\u8def\u5f91\u7684\u641c\u5c0b\u5668\uff09": [[430, "index-16"]], "path hooks": [[430, "index-9"]], "regular\uff08\u4e00\u822c\uff09": [[430, "index-4"]], "sys.meta_path": [[430, "index-10"]], "sys.modules": [[430, "index-7"]], "sys.path": [[430, "index-17"]], "sys.path_hooks": [[430, "index-17"]], "sys.path_importer_cache": [[430, "index-17"]], "grammar\uff08\u6587\u6cd5\uff09": [[432, "index-0"]], "lexical definitions\uff08\u8a5e\u6cd5\u5b9a\u7fa9\uff09": [[432, "index-1"]], "notation\uff08\u6a19\u8a18\u6cd5\uff09": [[432, "index-0"]], "syntax\uff08\u8a9e\u6cd5\uff09": [[432, "index-0"]], "\" \uff08\u96d9\u5f15\u865f\uff09": [[433, "index-17"]], "\"\"\"": [[433, "index-18"]], "' \uff08\u55ae\u5f15\u865f\uff09": [[433, "index-17"]], "'''": [[433, "index-18"]], "0b": [[433, "index-28"]], "0o": [[433, "index-28"]], "0x": [[433, "index-28"]], "indent token\uff08\u7e2e\u6392\u6a19\u8a8c\uff09": [[433, "index-9"]], "pep 3131": [[433, "index-11"], [433, "index-12"], [468, "index-5"], [481, "index-218"]], "pep 414": [[433, "index-21"], [474, "index-14"]], "standard c\uff08\u6a19\u6e96 c\uff09": [[433, "index-23"]], "unicode consortium": [[433, "index-18"]], "_, identifiers\uff08\u8b58\u5225\u5668\uff09": [[433, "index-15"]], "__, identifiers\uff08\u8b58\u5225\u5668\uff09": [[433, "index-15"]], "b\"": [[433, "index-19"]], "b'": [[433, "index-19"]], "backslash character\uff08\u53cd\u659c\u7dda\u5b57\u5143\uff09": [[433, "index-6"]], "binary literal\uff08\u4e8c\u9032\u4f4d\u5e38\u6578\uff09": [[433, "index-27"]], "blank line\uff08\u7a7a\u767d\u5217\uff09": [[433, "index-7"]], "bytes literal\uff08\u4f4d\u5143\u7d44\u5e38\u6578\uff09": [[433, "index-17"], [433, "index-19"]], "complex literal\uff08\u8907\u6578\u5e38\u6578\uff09": [[433, "index-27"]], "constant\uff08\u5e38\u6578\uff09": [[433, "index-16"]], "decimal literal\uff08\u5341\u9032\u4f4d\u5e38\u6578\uff09": [[433, "index-27"]], "delimiters\uff08\u5206\u9694\u7b26\u865f\uff09": [[433, "index-32"]], "e": [[433, "index-29"]], "encoding declarations (source file)\uff08\u7de8\u78bc\u5ba3\u544a\uff08\u539f\u59cb\u6a94\u6848\uff09\uff09": [[433, "index-5"]], "f\"": [[433, "index-22"]], "f'": [[433, "index-22"]], "floating point literal\uff08\u6d6e\u9ede\u6578\u5e38\u6578\uff09": [[433, "index-27"]], "for help in debugging using string literals\uff08\u4f7f\u7528\u5b57\u4e32\u5e38\u6578\u9032\u884c\u9664\u932f\uff09": [[433, "index-25"]], "formatted literal\uff08\u683c\u5f0f\u5316\u5e38\u6578\uff09": [[433, "index-25"]], "formatted string literal\uff08\u683c\u5f0f\u5316\u5b57\u4e32\u5e38\u6578\uff09": [[433, "index-22"], [433, "index-25"]], "fstring\uff08f \u5b57\u4e32\uff09": [[433, "index-25"]], "grouping\uff08\u7fa4\u7d44\uff09": [[433, "index-8"]], "hash character\uff08\u4e95\u5b57\u865f\uff09": [[433, "index-4"]], "hexadecimal literal\uff08\u5341\u516d\u9032\u4f4d\u5e38\u6578\uff09": [[433, "index-27"]], "identifier\uff08\u8b58\u5225\u5668\uff09": [[433, "index-10"]], "imaginary literal\uff08\u865b\u6578\u5e38\u6578\uff09": [[433, "index-27"]], "indentation\uff08\u7e2e\u6392\uff09": [[433, "index-8"]], "integer literal\uff08\u6574\u6578\u5e38\u6578\uff09": [[433, "index-27"], [433, "index-28"]], "interpolated literal\uff08\u63d2\u503c\u5e38\u6578\uff09": [[433, "index-25"]], "interpolated string literal\uff08\u63d2\u503c\u5b57\u4e32\u5e38\u6578\uff09": [[433, "index-25"]], "j": [[433, "index-30"]], "leading whitespace\uff08\u524d\u7f6e\u7a7a\u767d\uff09": [[433, "index-8"]], "lexical analysis\uff08\u8a5e\u6cd5\u5206\u6790\uff09": [[433, "index-0"]], "line continuation\uff08\u5217\u5ef6\u7e8c\uff09": [[433, "index-6"]], "line joining\uff08\u5217\u9023\u63a5\uff09": [[433, "index-3"], [433, "index-6"]], "line structure\uff08\u5217\u7d50\u69cb\uff09": [[433, "index-2"]], "literal\uff08\u5e38\u6578\uff09": [[433, "index-16"]], "logical line\uff08\u908f\u8f2f\u5217\uff09": [[433, "index-3"]], "numeric literal\uff08\u6578\u503c\u5e38\u6578\uff09": [[433, "index-27"]], "octal literal\uff08\u516b\u9032\u4f4d\u5e38\u6578\uff09": [[433, "index-27"]], "operators\uff08\u904b\u7b97\u5b50\uff09": [[433, "index-31"]], "parser\uff08\u5256\u6790\u5668\uff09": [[433, "index-0"]], "physical line\uff08\u7269\u7406\u5217\uff09": [[433, "index-23"], [433, "index-3"], [433, "index-6"]], "r\"": [[433, "index-20"]], "r'": [[433, "index-20"]], "raw string literal\uff08\u539f\u59cb\u5b57\u4e32\u5e38\u6578\uff09": [[433, "index-20"]], "raw string\uff08\u539f\u59cb\u5b57\u4e32\uff09": [[433, "index-18"]], "reserved word\uff08\u4fdd\u7559\u5b57\uff09": [[433, "index-13"]], "soft keyword\uff08\u8edf\u95dc\u9375\u5b57\uff09": [[433, "index-14"]], "source character set\uff08\u539f\u59cb\u5b57\u5143\u96c6\u5408\uff09": [[433, "index-5"]], "source encoding declaration\uff08\u539f\u59cb\u7de8\u78bc\u5ba3\u544a\uff09": [[433, "index-5"]], "statement grouping\uff08\u9673\u8ff0\u5f0f\u7fa4\u7d44\uff09": [[433, "index-8"]], "string literal\uff08\u5b57\u4e32\u5e38\u6578\uff09": [[433, "index-17"], [433, "index-18"]], "tab\uff08\u5b9a\u4f4d\u5b57\u5143\uff09": [[433, "index-8"]], "triple-quoted string\uff08\u4e09\u5f15\u865f\u5b57\u4e32\uff09": [[433, "index-18"]], "u\"": [[433, "index-17"]], "u'": [[433, "index-17"]], "unrecognized escape sequence\uff08\u7121\u6cd5\u8fa8\u8b58\u7684\u8df3\u812b\u5e8f\u5217\uff09": [[433, "index-24"]], "\u65bc\u6578\u503c\u5e38\u6578\u4e2d": [[433, "index-28"], [433, "index-29"], [433, "index-30"]], "\u65bc\u683c\u5f0f\u5316\u5b57\u4e32\u5e38\u6578\u4e2d": [[433, "index-25"]], "%=": [[434, "index-14"]], "&=": [[434, "index-14"]], "**=": [[434, "index-14"]], "*=": [[434, "index-14"]], "+=": [[434, "index-14"]], "-=": [[434, "index-14"]], "//=": [[434, "index-14"]], "/=": [[434, "index-14"]], "<<=": [[434, "index-14"]], ">>=": [[434, "index-14"]], "pep 3104": [[434, "index-46"], [468, "index-8"]], "pep 3132": [[434, "index-13"], [468, "index-9"]], "^=": [[434, "index-14"]], "__all__\uff08\u53ef\u9078\u6a21\u7d44\u5c6c\u6027\uff09": [[434, "index-38"]], "__cause__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[434, "index-29"]], "__context__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[434, "index-29"]], "__debug__": [[434, "index-19"]], "__traceback__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[434, "index-27"]], "annotated variable\uff08\u8a3b\u91cb\u8b8a\u6578\uff09": [[434, "index-15"]], "annotated\uff08\u8a3b\u91cb\uff09": [[434, "index-15"]], "assertions\uff08\u65b7\u8a00\uff09": [[434, "index-18"]], "assignment statement\uff08\u8ce6\u503c\u9673\u8ff0\u5f0f\uff09": [[434, "index-4"]], "assignment\uff08\u8ce6\u503c\uff09\u3001annotated\uff08\u8a3b\u91cb\uff09": [[434, "index-15"]], "assignment\uff08\u8ce6\u503c\uff09\u3001augmented\uff08\u589e\u5f37\uff09": [[434, "index-14"]], "augmented assignment\uff08\u589e\u5f37\u8ce6\u503c\uff09": [[434, "index-14"]], "augmented\uff08\u589e\u5f37\uff09": [[434, "index-14"]], "call": [[434, "index-3"]], "deletion\uff08\u522a\u9664\uff09": [[434, "index-21"], [434, "index-23"]], "expression list\uff08\u904b\u7b97\u5f0f\u5217\u8868\uff09": [[434, "index-18"]], "future": [[434, "index-40"]], "future statement\uff08future \u9673\u8ff0\u5f0f\uff09": [[434, "index-40"]], "global": [[434, "index-22"], [434, "index-43"], [434, "index-43"]], "identifier list\uff08\u8b58\u5225\u7b26\u865f\u6e05\u55ae\uff09": [[434, "index-43"], [434, "index-45"]], "loop control\uff08\u8ff4\u5708\u63a7\u5236\uff09": [[434, "index-31"]], "nonlocal": [[434, "index-45"]], "null": [[434, "index-20"]], "output": [[434, "index-3"]], "pass": [[434, "index-20"]], "procedure": [[434, "index-3"]], "raiseing": [[434, "index-27"]], "rebinding\uff08\u91cd\u65b0\u7e6b\u7d50\uff09": [[434, "index-4"]], "simple": [[434, "index-0"]], "standard": [[434, "index-3"]], "type": [[434, "index-47"]], "unbinding\uff08\u89e3\u9664\u7e6b\u7d50\uff09": [[434, "index-22"]], "writing": [[434, "index-3"]], "|=": [[434, "index-14"]], "\u65bc\u76ee\u6a19\u5217\u8868\u4e2d": [[434, "index-6"]], "\u65bc\u8ce6\u503c\u76ee\u6a19\u5217\u8868\u4e2d": [[434, "index-6"]], "windows": [[435, "index-4"]], "command line\uff08\u547d\u4ee4\u5217\uff09": [[435, "index-4"]], "input\uff08\u8f38\u5165\uff09": [[435, "index-5"]], "interactive mode\uff08\u4e92\u52d5\u6a21\u5f0f\uff09": [[435, "index-3"]], "interpreter\uff08\u76f4\u8b6f\u5668\uff09": [[435, "index-0"]], "program\uff08\u7a0b\u5f0f\uff09": [[435, "index-1"]], "standard input\uff08\u6a19\u6e96\u8f38\u5165\uff09": [[435, "index-4"]], "mangling\uff08\u4fee\u98fe\uff09": [[438, "index-1"]], "coding\uff08\u7a0b\u5f0f\u7de8\u5beb\uff09": [[439, "index-9"]], "ddocumentation strings\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[439, "index-2"], [439, "index-5"]], "docstrings\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[439, "index-2"], [439, "index-5"]], "strings\uff08\u5b57\u4e32\uff09, documentation\uff08\u8aaa\u660e\u6587\u4ef6\uff09": [[439, "index-2"], [439, "index-5"]], "style\uff08\u98a8\u683c\uff09": [[439, "index-9"]], "# (hash)": [[447, "index-0"]], "--check-hash-based-pycs": [[453, "cmdoption-check-hash-based-pycs"]], "--help-all": [[453, "cmdoption-help-all"]], "--help-env": [[453, "cmdoption-help-env"]], "--help-xoptions": [[453, "cmdoption-help-xoptions"]], "-?": [[453, "cmdoption-0"]], "-oo": [[453, "cmdoption-OO"]], "pythondumprefsfile=filename": [[453, "envvar-PYTHONDUMPREFSFILE-FILENAME"]], "\u547d\u4ee4\u5217\u9078\u9805": [[453, "cmdoption-0"], [453, "cmdoption-B"], [453, "cmdoption-E"], [453, "cmdoption-I"], [453, "cmdoption-J"], [453, "cmdoption-O"], [453, "cmdoption-OO"], [453, "cmdoption-P"], [453, "cmdoption-R"], [453, "cmdoption-S"], [453, "cmdoption-V"], [453, "cmdoption-W"], [453, "cmdoption-X"], [453, "cmdoption-b"], [453, "cmdoption-c"], [453, "cmdoption-check-hash-based-pycs"], [453, "cmdoption-d"], [453, "cmdoption-h"], [453, "cmdoption-help"], [453, "cmdoption-help-all"], [453, "cmdoption-help-env"], [453, "cmdoption-help-xoptions"], [453, "cmdoption-i"], [453, "cmdoption-m"], [453, "cmdoption-q"], [453, "cmdoption-s"], [453, "cmdoption-u"], [453, "cmdoption-v"], [453, "cmdoption-version"], [453, "cmdoption-x"], [454, "cmdoption-0"], [454, "cmdoption-1"], [454, "cmdoption-arg-CONFIG_SITE"], [454, "cmdoption-build"], [454, "cmdoption-disable-ipv6"], [454, "cmdoption-disable-test-modules"], [454, "cmdoption-enable-big-digits"], [454, "cmdoption-enable-bolt"], [454, "cmdoption-enable-framework"], [454, "cmdoption-enable-loadable-sqlite-extensions"], [454, "cmdoption-enable-optimizations"], [454, "cmdoption-enable-profiling"], [454, "cmdoption-enable-pystats"], [454, "cmdoption-enable-shared"], [454, "cmdoption-enable-universalsdk"], [454, "cmdoption-enable-wasm-dynamic-linking"], [454, "cmdoption-enable-wasm-pthreads"], [454, "cmdoption-exec-prefix"], [454, "cmdoption-host"], [454, "cmdoption-prefix"], [454, "cmdoption-with-address-sanitizer"], [454, "cmdoption-with-assertions"], [454, "cmdoption-with-build-python"], [454, "cmdoption-with-builtin-hashlib-hashes"], [454, "cmdoption-with-computed-gotos"], [454, "cmdoption-with-dbmliborder"], [454, "cmdoption-with-dtrace"], [454, "cmdoption-with-emscripten-target"], [454, "cmdoption-with-ensurepip"], [454, "cmdoption-with-framework-name"], [454, "cmdoption-with-hash-algorithm"], [454, "cmdoption-with-libc"], [454, "cmdoption-with-libm"], [454, "cmdoption-with-libs"], [454, "cmdoption-with-lto"], [454, "cmdoption-with-memory-sanitizer"], [454, "cmdoption-with-openssl"], [454, "cmdoption-with-openssl-rpath"], [454, "cmdoption-with-pkg-config"], [454, "cmdoption-with-platlibdir"], [454, "cmdoption-with-pydebug"], [454, "cmdoption-with-readline"], [454, "cmdoption-with-ssl-default-suites"], [454, "cmdoption-with-strict-overflow"], [454, "cmdoption-with-suffix"], [454, "cmdoption-with-system-expat"], [454, "cmdoption-with-system-libmpdec"], [454, "cmdoption-with-trace-refs"], [454, "cmdoption-with-tzpath"], [454, "cmdoption-with-undefined-behavior-sanitizer"], [454, "cmdoption-with-universal-archs"], [454, "cmdoption-with-valgrind"], [454, "cmdoption-with-wheel-pkg-dir"], [454, "cmdoption-without-c-locale-coercion"], [454, "cmdoption-without-decimal-contextvar"], [454, "cmdoption-without-doc-strings"], [454, "cmdoption-without-freelists"], [454, "cmdoption-without-pymalloc"], [454, "cmdoption-without-readline"], [454, "cmdoption-without-static-libpython"]], "--build": [[454, "cmdoption-build"]], "--disable-ipv6": [[454, "cmdoption-disable-ipv6"]], "--disable-test-modules": [[454, "cmdoption-disable-test-modules"]], "--enable-big-digits": [[454, "cmdoption-enable-big-digits"]], "--enable-bolt": [[454, "cmdoption-enable-bolt"]], "--enable-framework": [[454, "cmdoption-1"], [454, "cmdoption-enable-framework"]], "--enable-loadable-sqlite-extensions": [[454, "cmdoption-enable-loadable-sqlite-extensions"]], "--enable-optimizations": [[454, "cmdoption-enable-optimizations"]], "--enable-profiling": [[454, "cmdoption-enable-profiling"]], "--enable-pystats": [[454, "cmdoption-enable-pystats"]], "--enable-shared": [[454, "cmdoption-enable-shared"]], "--enable-universalsdk": [[454, "cmdoption-0"], [454, "cmdoption-enable-universalsdk"]], "--enable-wasm-dynamic-linking": [[454, "cmdoption-enable-wasm-dynamic-linking"]], "--enable-wasm-pthreads": [[454, "cmdoption-enable-wasm-pthreads"]], "--exec-prefix": [[454, "cmdoption-exec-prefix"]], "--host": [[454, "cmdoption-host"]], "--prefix": [[454, "cmdoption-prefix"]], "--with-address-sanitizer": [[454, "cmdoption-with-address-sanitizer"]], "--with-assertions": [[454, "cmdoption-with-assertions"]], "--with-build-python": [[454, "cmdoption-with-build-python"]], "--with-builtin-hashlib-hashes": [[454, "cmdoption-with-builtin-hashlib-hashes"]], "--with-computed-gotos": [[454, "cmdoption-with-computed-gotos"]], "--with-dbmliborder": [[454, "cmdoption-with-dbmliborder"]], "--with-dtrace": [[454, "cmdoption-with-dtrace"]], "--with-emscripten-target": [[454, "cmdoption-with-emscripten-target"]], "--with-ensurepip": [[454, "cmdoption-with-ensurepip"]], "--with-framework-name": [[454, "cmdoption-with-framework-name"]], "--with-hash-algorithm": [[454, "cmdoption-with-hash-algorithm"]], "--with-libc": [[454, "cmdoption-with-libc"]], "--with-libm": [[454, "cmdoption-with-libm"]], "--with-libs": [[454, "cmdoption-with-libs"]], "--with-lto": [[454, "cmdoption-with-lto"]], "--with-memory-sanitizer": [[454, "cmdoption-with-memory-sanitizer"]], "--with-openssl": [[454, "cmdoption-with-openssl"]], "--with-openssl-rpath": [[454, "cmdoption-with-openssl-rpath"]], "--with-pkg-config": [[454, "cmdoption-with-pkg-config"]], "--with-platlibdir": [[454, "cmdoption-with-platlibdir"]], "--with-pydebug": [[454, "cmdoption-with-pydebug"]], "--with-readline": [[454, "cmdoption-with-readline"]], "--with-ssl-default-suites": [[454, "cmdoption-with-ssl-default-suites"]], "--with-strict-overflow": [[454, "cmdoption-with-strict-overflow"]], "--with-suffix": [[454, "cmdoption-with-suffix"]], "--with-system-expat": [[454, "cmdoption-with-system-expat"]], "--with-system-libmpdec": [[454, "cmdoption-with-system-libmpdec"]], "--with-trace-refs": [[454, "cmdoption-with-trace-refs"]], "--with-tzpath": [[454, "cmdoption-with-tzpath"]], "--with-undefined-behavior-sanitizer": [[454, "cmdoption-with-undefined-behavior-sanitizer"]], "--with-universal-archs": [[454, "cmdoption-with-universal-archs"]], "--with-valgrind": [[454, "cmdoption-with-valgrind"]], "--with-wheel-pkg-dir": [[454, "cmdoption-with-wheel-pkg-dir"]], "--without-c-locale-coercion": [[454, "cmdoption-without-c-locale-coercion"]], "--without-decimal-contextvar": [[454, "cmdoption-without-decimal-contextvar"]], "--without-doc-strings": [[454, "cmdoption-without-doc-strings"]], "--without-freelists": [[454, "cmdoption-without-freelists"]], "--without-pymalloc": [[454, "cmdoption-without-pymalloc"]], "--without-readline": [[454, "cmdoption-without-readline"]], "--without-static-libpython": [[454, "cmdoption-without-static-libpython"]], "basecflags": [[454, "envvar-BASECFLAGS"]], "basecppflags": [[454, "envvar-BASECPPFLAGS"]], "bldshared": [[454, "envvar-BLDSHARED"]], "cc": [[454, "envvar-CC"], [463, "index-24"]], "ccshared": [[454, "envvar-CCSHARED"]], "cflags": [[454, "envvar-CFLAGS"], [454, "index-13"], [454, "index-14"], [454, "index-15"], [454, "index-16"], [454, "index-19"], [463, "index-25"]], "cflagsforshared": [[454, "envvar-CFLAGSFORSHARED"]], "cflags_aliasing": [[454, "envvar-CFLAGS_ALIASING"]], "cflags_nodist": [[454, "envvar-CFLAGS_NODIST"], [454, "index-12"], [454, "index-17"], [454, "index-22"]], "compileall_opts": [[454, "envvar-COMPILEALL_OPTS"]], "configure_cflags": [[454, "envvar-CONFIGURE_CFLAGS"]], "configure_cflags_nodist": [[454, "envvar-CONFIGURE_CFLAGS_NODIST"]], "configure_cppflags": [[454, "envvar-CONFIGURE_CPPFLAGS"]], "configure_ldflags": [[454, "envvar-CONFIGURE_LDFLAGS"]], "configure_ldflags_nodist": [[454, "envvar-CONFIGURE_LDFLAGS_NODIST"]], "config_site": [[454, "cmdoption-arg-CONFIG_SITE"]], "cppflags": [[454, "envvar-CPPFLAGS"], [454, "index-10"], [454, "index-27"], [454, "index-9"], [463, "index-27"]], "cxx": [[454, "envvar-CXX"]], "extra_cflags": [[454, "envvar-EXTRA_CFLAGS"]], "ldflags": [[454, "envvar-LDFLAGS"], [454, "index-11"], [454, "index-18"], [454, "index-20"], [454, "index-23"], [454, "index-24"], [454, "index-25"], [454, "index-28"], [463, "index-26"]], "ldflags_nodist": [[454, "envvar-LDFLAGS_NODIST"], [454, "index-21"], [454, "index-26"]], "ldshared": [[454, "envvar-LDSHARED"]], "libs": [[454, "envvar-LIBS"]], "linkcc": [[454, "envvar-LINKCC"]], "opt": [[454, "envvar-OPT"], [454, "index-8"]], "pep 11": [[454, "index-1"], [459, "index-0"], [459, "index-38"], [468, "index-19"], [471, "index-115"], [476, "index-48"], [478, "index-5"], [481, "index-251"], [481, "index-50"], [481, "index-51"]], "profile_task": [[454, "envvar-PROFILE_TASK"], [454, "index-4"]], "purify": [[454, "envvar-PURIFY"]], "py_builtin_module_cflags": [[454, "envvar-PY_BUILTIN_MODULE_CFLAGS"]], "py_cflags": [[454, "envvar-PY_CFLAGS"]], "py_cflags_nodist": [[454, "envvar-PY_CFLAGS_NODIST"]], "py_core_cflags": [[454, "envvar-PY_CORE_CFLAGS"]], "py_core_ldflags": [[454, "envvar-PY_CORE_LDFLAGS"]], "py_cppflags": [[454, "envvar-PY_CPPFLAGS"]], "py_ldflags": [[454, "envvar-PY_LDFLAGS"]], "py_ldflags_nodist": [[454, "envvar-PY_LDFLAGS_NODIST"]], "py_stdmodule_cflags": [[454, "envvar-PY_STDMODULE_CFLAGS"]], "%appdata%": [[459, "index-8"]], "pathext": [[459, "index-4"], [459, "index-6"], [475, "index-50"], [481, "index-135"]], "pep 397": [[459, "index-19"], [474, "index-55"], [476, "index-22"]], "pep 514": [[459, "index-21"], [471, "index-92"], [481, "index-273"], [481, "index-73"]], "pylauncher_allow_install": [[459, "index-29"], [481, "index-74"]], "pylauncher_always_install": [[459, "index-30"]], "pylauncher_debug": [[459, "index-27"]], "pylauncher_dryrun": [[459, "index-28"], [459, "index-31"]], "pylauncher_no_search_path": [[459, "index-24"]], "py_python": [[459, "index-26"]], "pep 100": [[460, "index-3"]], "pep 201": [[460, "index-2"]], "pep 207": [[461, "index-4"], [461, "index-5"]], "pep 208": [[461, "index-13"]], "pep 217": [[461, "index-12"]], "pep 229": [[461, "index-8"]], "pep 230": [[461, "index-7"]], "pep 232": [[461, "index-10"]], "pep 241": [[461, "index-14"], [461, "index-15"], [461, "index-16"]], "pep 243": [[461, "index-17"]], "pep 234": [[462, "index-25"]], "pep 253": [[462, "index-0"], [462, "index-1"], [462, "index-3"], [462, "index-5"], [462, "index-6"]], "pep 261": [[462, "index-14"], [462, "index-26"]], "pep 264": [[462, "index-22"]], "rfc 2104": [[462, "index-17"]], "rfc 2487": [[462, "index-18"]], "pep 218": [[463, "index-0"], [464, "index-0"], [464, "index-13"]], "pep 277": [[463, "index-7"]], "pep 279": [[463, "index-10"]], "pep 285": [[463, "index-13"], [463, "index-14"]], "pep 293": [[463, "index-15"]], "pep 301": [[463, "index-16"]], "what's new\uff08\u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff09": [[463, "index-8"], [464, "index-7"], [465, "index-20"], [466, "index-13"]], "pep 322": [[464, "index-14"], [464, "index-6"]], "pep 327": [[464, "index-9"]], "pep 331": [[464, "index-11"]], "pep 288": [[465, "index-12"]], "pep 309": [[465, "index-3"]], "pep 314": [[465, "index-4"]], "pep 325": [[465, "index-13"]], "pep 333": [[465, "index-26"], [465, "index-27"]], "pep 339": [[465, "index-30"]], "pep 341": [[465, "index-8"]], "pep 347": [[465, "index-28"]], "pep 352": [[465, "index-15"], [466, "index-25"], [468, "index-25"]], "pep 356": [[465, "index-0"]], "pep 357": [[465, "index-18"]], "appdata": [[466, "index-5"]], "pep 3000": [[466, "index-1"]], "pep 3100": [[466, "index-2"]], "pep 3110": [[466, "index-11"], [468, "index-13"], [468, "index-27"]], "pep 3127": [[466, "index-17"]], "pep 361": [[466, "index-0"]], "pep 371": [[466, "index-8"]], "rfc 2033": [[466, "index-22"]], "rfc 3207": [[466, "index-23"]], "ldcxxshared": [[467, "index-11"]], "pep 3106": [[467, "index-6"]], "pep 3137": [[467, "index-7"]], "pep 372": [[467, "index-2"], [469, "index-0"]], "pep 373": [[467, "index-0"]], "pep 389": [[467, "index-4"], [473, "index-2"]], "pep 391": [[467, "index-5"], [473, "index-3"]], "pep 466": [[467, "index-14"], [467, "index-15"], [467, "index-16"], [467, "index-17"]], "pep 476": [[467, "index-22"]], "pep 477": [[467, "index-18"]], "pep 493": [[467, "index-23"]], "pep 274": [[468, "index-10"]], "pep 3102": [[468, "index-7"]], "pep 3108": [[468, "index-17"], [468, "index-20"], [468, "index-22"]], "pep 3109": [[468, "index-11"], [468, "index-26"]], "pep 3111": [[468, "index-32"]], "pep 3113": [[468, "index-15"]], "pep 3114": [[468, "index-30"]], "pep 3123": [[468, "index-35"]], "pep 3138": [[468, "index-3"]], "pep 4": [[468, "index-18"]], "pep 384": [[470, "index-118"], [473, "index-1"], [481, "index-106"]], "pep 618": [[470, "index-106"], [470, "index-83"], [481, "index-149"]], "pep 624": [[470, "index-92"], [471, "index-120"], [471, "index-85"], [481, "index-95"]], "pep 632": [[470, "index-108"], [470, "index-90"], [472, "index-2"], [472, "index-33"], [481, "index-36"]], "pep 635": [[470, "index-81"], [470, "index-96"]], "pep 652": [[470, "index-115"], [481, "index-101"]], "pep 11#tier-3": [[471, "index-116"]], "pep 484#annotating-instance-and-class-methods": [[471, "index-98"]], "pep 624#alternative-apis": [[471, "index-121"]], "pep 654": [[471, "index-112"], [471, "index-89"], [471, "index-90"], [481, "index-40"], [481, "index-78"], [481, "index-81"]], "pep 657": [[471, "index-109"], [471, "index-87"], [481, "index-58"], [481, "index-86"]], "pep 659": [[471, "index-110"], [471, "index-111"]], "pep 670": [[471, "index-117"], [471, "index-86"]], "pep 678": [[471, "index-91"], [472, "index-21"], [481, "index-22"], [481, "index-55"], [481, "index-8"]], "pep 680": [[471, "index-106"], [471, "index-82"], [481, "index-69"]], "pep 669": [[472, "index-11"], [481, "index-9"]], "pep 683": [[472, "index-43"], [481, "index-6"]], "pep 684": [[472, "index-44"], [472, "index-9"]], "pep 693": [[472, "index-56"]], "pep 697": [[472, "index-40"], [472, "index-42"], [481, "index-21"]], "pep 699": [[472, "index-45"], [472, "index-46"], [481, "index-29"]], "pep 701": [[472, "index-25"], [472, "index-27"], [472, "index-37"], [472, "index-38"], [472, "index-39"], [472, "index-58"], [472, "index-6"]], "pep 709": [[472, "index-13"], [472, "index-28"], [472, "index-59"], [481, "index-11"]], "pep 385": [[473, "index-14"]], "pep 392": [[473, "index-0"]], "rfc 2818": [[473, "index-12"]], "pep 3144": [[474, "index-59"]], "pep 398": [[474, "index-51"]], "pep 409": [[474, "index-13"]], "pep 418": [[474, "index-60"]], "rfc 1870": [[474, "index-27"]], "yield from\uff08\u5728\u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\u4e2d\uff09": [[474, "index-11"]], "pep 247": [[475, "index-37"]], "pep 3156": [[475, "index-25"], [475, "index-26"], [475, "index-31"], [475, "index-4"], [475, "index-8"]], "pep 424": [[475, "index-24"], [475, "index-38"]], "pep 429": [[475, "index-0"]], "pep 435": [[475, "index-28"], [475, "index-29"], [475, "index-6"]], "pep 436": [[475, "index-18"], [475, "index-48"], [475, "index-49"]], "pep 445": [[475, "index-17"], [475, "index-43"], [475, "index-44"], [475, "index-51"]], "pep 446": [[475, "index-14"], [475, "index-2"], [475, "index-21"], [475, "index-22"]], "pep 450": [[475, "index-32"], [475, "index-33"], [475, "index-9"]], "pep 454": [[475, "index-10"], [475, "index-34"], [475, "index-35"]], "pep 441": [[476, "index-29"], [476, "index-30"]], "pep 465": [[476, "index-3"], [476, "index-4"], [476, "index-46"], [481, "index-303"]], "pep 471": [[476, "index-13"], [476, "index-14"], [481, "index-299"]], "pep 478": [[476, "index-0"]], "pep 486": [[476, "index-21"], [476, "index-23"], [481, "index-300"]], "rfc 6152": [[476, "index-37"]], "pep 487": [[477, "index-13"], [477, "index-14"], [477, "index-15"], [477, "index-37"], [481, "index-250"], [481, "index-260"], [481, "index-269"]], "pep 494": [[477, "index-0"]], "pep 511": [[477, "index-36"]], "pep 520": [[477, "index-23"]], "pep 628": [[477, "index-29"], [477, "index-30"], [481, "index-271"]], "pep 545": [[478, "index-24"], [478, "index-42"]], "pep 553": [[478, "index-13"], [481, "index-244"]], "pep 564": [[478, "index-17"], [478, "index-18"], [478, "index-32"], [481, "index-242"]], "pep 573": [[480, "index-23"], [480, "index-6"], [481, "index-157"], [481, "index-162"]], "pep 596": [[480, "index-0"]], "pep 616": [[480, "index-12"], [480, "index-4"], [481, "index-169"]], "enablecontrolflowguard": [[481, "index-92"]], "pep 676": [[481, "index-71"]], "pep 687": [[481, "index-14"], [481, "index-15"], [481, "index-16"], [481, "index-17"], [481, "index-18"], [481, "index-19"], [481, "index-23"], [481, "index-25"], [481, "index-26"]], "pep 689": [[481, "index-27"]], "pip_user": [[481, "index-206"]], "pythondumprefsfile": [[481, "index-85"]], "pythonregrtest_unicode_guard": [[481, "index-62"]], "rfc 3491": [[481, "index-34"]], "rfc 5894": [[481, "index-33"]], "rfc 7538": [[481, "index-83"]], "rfc 9239": [[481, "index-42"]]}})